using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace StoryMode.Quests.QuestTasks
{
	public class PurchaseItemTutorialQuestTask : QuestTaskBase
	{
		public PurchaseItemTutorialQuestTask(Action onSucceed, int targetItemAmount, ItemObject item, JournalLog progressLog = null)
			: base(null, onSucceed, null, null)
		{
			this._targetItemAmount = targetItemAmount;
			this._item = item;
			this._progressLog = progressLog;
			this._purchasedItemAmount = 0;
		}

		public void InitializeTaskOnLoad(int targetItemAmount, ItemObject item)
		{
			this._targetItemAmount = targetItemAmount;
			this._item = item;
		}

		public override void SetReferences()
		{
			CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.PlayerInventoryExchange));
		}

		private void PlayerInventoryExchange(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
		{
			if (base.IsActive)
			{
				foreach (ValueTuple<ItemRosterElement, int> valueTuple in purchasedItems)
				{
					ItemRosterElement itemRosterElement = valueTuple.Item1;
					if (itemRosterElement.EquipmentElement.Item == this._item)
					{
						int purchasedItemAmount = this._purchasedItemAmount;
						itemRosterElement = valueTuple.Item1;
						this._purchasedItemAmount = purchasedItemAmount + itemRosterElement.Amount;
						if (this._purchasedItemAmount >= this._targetItemAmount)
						{
							JournalLog progressLog = this._progressLog;
							if (progressLog != null)
							{
								progressLog.UpdateCurrentProgress(this._targetItemAmount);
							}
							base.Finish(0);
							break;
						}
						JournalLog progressLog2 = this._progressLog;
						if (progressLog2 != null)
						{
							progressLog2.UpdateCurrentProgress(this._purchasedItemAmount);
						}
					}
				}
			}
		}

		internal static void AutoGeneratedStaticCollectObjectsPurchaseItemTutorialQuestTask(object o, List<object> collectedObjects)
		{
			((PurchaseItemTutorialQuestTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._progressLog);
		}

		internal static object AutoGeneratedGetMemberValue_progressLog(object o)
		{
			return ((PurchaseItemTutorialQuestTask)o)._progressLog;
		}

		internal static object AutoGeneratedGetMemberValue_purchasedItemAmount(object o)
		{
			return ((PurchaseItemTutorialQuestTask)o)._purchasedItemAmount;
		}

		[SaveableField(1)]
		private readonly JournalLog _progressLog;

		private int _targetItemAmount;

		private ItemObject _item;

		[SaveableField(2)]
		private int _purchasedItemAmount;
	}
}
