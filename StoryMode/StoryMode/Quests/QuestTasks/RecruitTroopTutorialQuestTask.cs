using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.SaveSystem;

namespace StoryMode.Quests.QuestTasks
{
	public class RecruitTroopTutorialQuestTask : QuestTaskBase
	{
		public RecruitTroopTutorialQuestTask(Action onSucceed, int targetRecruitAmount, Func<CharacterObject, bool> recruitTypeConditions, Settlement recruitSettlement = null, JournalLog progressLog = null)
			: base(null, onSucceed, null, null)
		{
			this._targetRecruitAmount = targetRecruitAmount;
			this._recruitTypeConditions = recruitTypeConditions;
			this._recruitSettlement = recruitSettlement;
			this._progressLog = progressLog;
			this._recruitedTroopAmount = 0;
		}

		public void InitializeTaskOnLoad(int targetRecruitAmount, Func<CharacterObject, bool> recruitTypeConditions, Settlement recruitSettlement = null)
		{
			this._targetRecruitAmount = targetRecruitAmount;
			this._recruitTypeConditions = recruitTypeConditions;
			this._recruitSettlement = recruitSettlement;
		}

		public override void SetReferences()
		{
			CampaignEvents.OnUnitRecruitedEvent.AddNonSerializedListener(this, new Action<CharacterObject, int>(this.OnUnitRecruited));
		}

		private void OnUnitRecruited(CharacterObject character, int amount)
		{
			if (base.IsActive && (this._recruitSettlement == null || Settlement.CurrentSettlement == this._recruitSettlement) && this._recruitTypeConditions(character))
			{
				this._recruitedTroopAmount += amount;
				if (this._recruitedTroopAmount >= this._targetRecruitAmount)
				{
					JournalLog progressLog = this._progressLog;
					if (progressLog != null)
					{
						progressLog.UpdateCurrentProgress(this._targetRecruitAmount);
					}
					base.Finish(0);
					return;
				}
				JournalLog progressLog2 = this._progressLog;
				if (progressLog2 == null)
				{
					return;
				}
				progressLog2.UpdateCurrentProgress(this._recruitedTroopAmount);
			}
		}

		internal static void AutoGeneratedStaticCollectObjectsRecruitTroopTutorialQuestTask(object o, List<object> collectedObjects)
		{
			((RecruitTroopTutorialQuestTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._progressLog);
		}

		internal static object AutoGeneratedGetMemberValue_progressLog(object o)
		{
			return ((RecruitTroopTutorialQuestTask)o)._progressLog;
		}

		internal static object AutoGeneratedGetMemberValue_recruitedTroopAmount(object o)
		{
			return ((RecruitTroopTutorialQuestTask)o)._recruitedTroopAmount;
		}

		private int _targetRecruitAmount;

		private Func<CharacterObject, bool> _recruitTypeConditions;

		private Settlement _recruitSettlement;

		[SaveableField(1)]
		private readonly JournalLog _progressLog;

		[SaveableField(2)]
		private int _recruitedTroopAmount;
	}
}
