using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using StoryMode.StoryModeObjects;
using StoryMode.StoryModePhases;
using TaleWorlds.CampaignSystem;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace StoryMode.Quests.SecondPhase
{
	// Token: 0x02000025 RID: 37
	public class ConspiracyProgressQuest : StoryModeQuestBase
	{
		// Token: 0x1700005A RID: 90
		// (get) Token: 0x060001A1 RID: 417 RVA: 0x00009E5B File Offset: 0x0000805B
		private bool _isImperialSide
		{
			get
			{
				return StoryModeManager.Current.MainStoryLine.IsOnImperialQuestLine;
			}
		}

		// Token: 0x1700005B RID: 91
		// (get) Token: 0x060001A2 RID: 418 RVA: 0x00009E6C File Offset: 0x0000806C
		private TextObject _startQuestLogText
		{
			get
			{
				TextObject textObject = new TextObject("{=oX2aoilb}{MENTOR.NAME} knows of the rise of your {KINGDOM_NAME}. Rumors say {MENTOR.NAME} is planning to undo your progress. Be ready!", null);
				StringHelpers.SetCharacterProperties("MENTOR", this._isImperialSide ? StoryModeHeroes.AntiImperialMentor.CharacterObject : StoryModeHeroes.ImperialMentor.CharacterObject, textObject, false);
				textObject.SetTextVariable("KINGDOM_NAME", (Clan.PlayerClan.Kingdom != null) ? Clan.PlayerClan.Kingdom.Name : Clan.PlayerClan.Name);
				return textObject;
			}
		}

		// Token: 0x1700005C RID: 92
		// (get) Token: 0x060001A3 RID: 419 RVA: 0x00009EE4 File Offset: 0x000080E4
		public override TextObject Title
		{
			get
			{
				TextObject textObject;
				if (this._isImperialSide)
				{
					textObject = new TextObject("{=PJ5C3Dim}{ANTIIMPERIAL_MENTOR.NAME}'s Conspiracy", null);
					StringHelpers.SetCharacterProperties("ANTIIMPERIAL_MENTOR", StoryModeHeroes.AntiImperialMentor.CharacterObject, textObject, false);
				}
				else
				{
					textObject = new TextObject("{=i3SSc0I4}{IMPERIAL_MENTOR.NAME}'s Plan", null);
					StringHelpers.SetCharacterProperties("IMPERIAL_MENTOR", StoryModeHeroes.ImperialMentor.CharacterObject, textObject, false);
				}
				return textObject;
			}
		}

		// Token: 0x060001A4 RID: 420 RVA: 0x00009F42 File Offset: 0x00008142
		public ConspiracyProgressQuest()
			: base("conspiracy_quest_campaign_behavior", null, CampaignTime.Never)
		{
			SecondPhase.Instance.TriggerConspiracy();
		}

		// Token: 0x060001A5 RID: 421 RVA: 0x00009F5F File Offset: 0x0000815F
		protected override void InitializeQuestOnGameLoad()
		{
			this.SetDialogs();
		}

		// Token: 0x060001A6 RID: 422 RVA: 0x00009F68 File Offset: 0x00008168
		protected override void RegisterEvents()
		{
			CampaignEvents.DailyTickEvent.AddNonSerializedListener(this, new Action(this.DailyTick));
			CampaignEvents.OnQuestCompletedEvent.AddNonSerializedListener(this, new Action<QuestBase, QuestBase.QuestCompleteDetails>(this.OnQuestCompleted));
			StoryModeEvents.OnConspiracyActivatedEvent.AddNonSerializedListener(this, new Action(this.OnConspiracyActivated));
		}

		// Token: 0x060001A7 RID: 423 RVA: 0x00009FBA File Offset: 0x000081BA
		protected override void OnStartQuest()
		{
			this._startQuestLog = base.AddDiscreteLog(this._startQuestLogText, new TextObject("{=1LrHV647}Conspiracy Strength", null), (int)SecondPhase.Instance.ConspiracyStrength, 2000, null, false);
		}

		// Token: 0x060001A8 RID: 424 RVA: 0x00009FEB File Offset: 0x000081EB
		protected override void SetDialogs()
		{
		}

		// Token: 0x060001A9 RID: 425 RVA: 0x00009FF0 File Offset: 0x000081F0
		protected override void OnFinalize()
		{
			base.OnFinalize();
			foreach (QuestBase questBase in Campaign.Current.QuestManager.Quests.ToList<QuestBase>())
			{
				if (typeof(ConspiracyQuestBase) == questBase.GetType().BaseType && questBase.IsOngoing)
				{
					questBase.CompleteQuestWithCancel(new TextObject("{=YJxCbbpd}Conspiracy is activated!", null));
				}
			}
		}

		// Token: 0x060001AA RID: 426 RVA: 0x0000A088 File Offset: 0x00008288
		private void DailyTick()
		{
			StoryModeManager.Current.MainStoryLine.SecondPhase.IncreaseConspiracyStrength();
			this._startQuestLog.UpdateCurrentProgress((int)StoryModeManager.Current.MainStoryLine.SecondPhase.ConspiracyStrength);
		}

		// Token: 0x060001AB RID: 427 RVA: 0x0000A0C0 File Offset: 0x000082C0
		private void OnQuestCompleted(QuestBase quest, QuestBase.QuestCompleteDetails detail)
		{
			if (detail == 1 && typeof(ConspiracyQuestBase) == quest.GetType().BaseType)
			{
				this._startQuestLog.UpdateCurrentProgress((int)StoryModeManager.Current.MainStoryLine.SecondPhase.ConspiracyStrength);
			}
		}

		// Token: 0x060001AC RID: 428 RVA: 0x0000A10D File Offset: 0x0000830D
		private void OnConspiracyActivated()
		{
			base.CompleteQuestWithTimeOut(null);
		}

		// Token: 0x060001AD RID: 429 RVA: 0x0000A116 File Offset: 0x00008316
		internal static void AutoGeneratedStaticCollectObjectsConspiracyProgressQuest(object o, List<object> collectedObjects)
		{
			((ConspiracyProgressQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060001AE RID: 430 RVA: 0x0000A124 File Offset: 0x00008324
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._startQuestLog);
		}

		// Token: 0x060001AF RID: 431 RVA: 0x0000A139 File Offset: 0x00008339
		internal static object AutoGeneratedGetMemberValue_startQuestLog(object o)
		{
			return ((ConspiracyProgressQuest)o)._startQuestLog;
		}

		// Token: 0x04000091 RID: 145
		[SaveableField(2)]
		private JournalLog _startQuestLog;
	}
}
