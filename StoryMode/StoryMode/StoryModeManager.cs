using System;
using System.Collections.Generic;
using StoryMode.StoryModeObjects;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace StoryMode
{
	public class StoryModeManager
	{
		internal static void AutoGeneratedStaticCollectObjectsStoryModeManager(object o, List<object> collectedObjects)
		{
			((StoryModeManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.MainStoryLine);
		}

		internal static object AutoGeneratedGetMemberValueMainStoryLine(object o)
		{
			return ((StoryModeManager)o).MainStoryLine;
		}

		public static StoryModeManager Current
		{
			get
			{
				Game game = Game.Current;
				CampaignStoryMode campaignStoryMode = ((game != null) ? game.GameType : null) as CampaignStoryMode;
				if (campaignStoryMode == null)
				{
					return null;
				}
				return campaignStoryMode.StoryMode;
			}
		}

		public StoryModeEvents StoryModeEvents { get; private set; }

		[SaveableProperty(1)]
		public MainStoryLine MainStoryLine { get; private set; }

		public StoryModeHeroes StoryModeHeroes { get; private set; }

		public StoryModeBannerEffects StoryModeBannerEffects { get; private set; }

		public StoryModeManager()
		{
			this.Initialize();
			this.MainStoryLine = new MainStoryLine();
		}

		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this.Initialize();
		}

		private void Initialize()
		{
			this.StoryModeEvents = new StoryModeEvents();
		}

		internal void Destroy()
		{
			StoryModeData.OnGameEnd();
		}

		internal void TickRealTime(float dt)
		{
		}

		internal void InitializeStoryModeObjects()
		{
			this.StoryModeHeroes = new StoryModeHeroes();
			this.StoryModeBannerEffects = new StoryModeBannerEffects();
		}
	}
}
