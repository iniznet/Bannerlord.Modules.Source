using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace StoryMode.StoryModePhases
{
	public class TutorialPhase
	{
		internal static void AutoGeneratedStaticCollectObjectsTutorialPhase(object o, List<object> collectedObjects)
		{
			((TutorialPhase)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._tutorialPhaseShoppingRoster);
			collectedObjects.Add(this.TutorialFocusSettlement);
			collectedObjects.Add(this.TutorialFocusMobileParty);
		}

		internal static object AutoGeneratedGetMemberValueTutorialFocusSettlement(object o)
		{
			return ((TutorialPhase)o).TutorialFocusSettlement;
		}

		internal static object AutoGeneratedGetMemberValueTutorialFocusMobileParty(object o)
		{
			return ((TutorialPhase)o).TutorialFocusMobileParty;
		}

		internal static object AutoGeneratedGetMemberValueTalkedWithBrotherForTheFirstTime(object o)
		{
			return ((TutorialPhase)o).TalkedWithBrotherForTheFirstTime;
		}

		internal static object AutoGeneratedGetMemberValueLockTutorialVillageEnter(object o)
		{
			return ((TutorialPhase)o).LockTutorialVillageEnter;
		}

		internal static object AutoGeneratedGetMemberValueTutorialQuestPhase(object o)
		{
			return ((TutorialPhase)o).TutorialQuestPhase;
		}

		internal static object AutoGeneratedGetMemberValueIsSkipped(object o)
		{
			return ((TutorialPhase)o).IsSkipped;
		}

		internal static object AutoGeneratedGetMemberValue_tutorialPhaseShoppingRoster(object o)
		{
			return ((TutorialPhase)o)._tutorialPhaseShoppingRoster;
		}

		public static TutorialPhase Instance
		{
			get
			{
				StoryModeManager storyModeManager = StoryModeManager.Current;
				if (storyModeManager == null)
				{
					return null;
				}
				MainStoryLine mainStoryLine = storyModeManager.MainStoryLine;
				if (mainStoryLine == null)
				{
					return null;
				}
				return mainStoryLine.TutorialPhase;
			}
		}

		[SaveableProperty(2)]
		public Settlement TutorialFocusSettlement { get; private set; }

		[SaveableProperty(3)]
		public MobileParty TutorialFocusMobileParty { get; private set; }

		public bool IsCompleted
		{
			get
			{
				return this.TutorialQuestPhase == TutorialQuestPhase.Finalized;
			}
		}

		[SaveableProperty(5)]
		public bool TalkedWithBrotherForTheFirstTime { get; private set; }

		[SaveableProperty(6)]
		public bool LockTutorialVillageEnter { get; private set; }

		[SaveableProperty(7)]
		public TutorialQuestPhase TutorialQuestPhase { get; private set; }

		[SaveableProperty(8)]
		public bool IsSkipped { get; private set; }

		[CachedData]
		public Hero TutorialVillageHeadman { get; set; }

		public TutorialPhase()
		{
			this._tutorialPhaseShoppingRoster = new ItemRoster();
			this.TutorialFocusSettlement = null;
			this.TutorialFocusMobileParty = null;
			this.TalkedWithBrotherForTheFirstTime = false;
			this.LockTutorialVillageEnter = false;
			this.TutorialQuestPhase = TutorialQuestPhase.None;
			this.IsSkipped = false;
		}

		public void PlayerTalkedWithBrotherForTheFirstTime()
		{
			this.TalkedWithBrotherForTheFirstTime = true;
		}

		public void SetLockTutorialVillageEnter(bool value)
		{
			this.LockTutorialVillageEnter = value;
		}

		public void CompleteTutorial(bool isSkipped)
		{
			this.TutorialQuestPhase = TutorialQuestPhase.Finalized;
			this.RemoveTutorialFocusSettlement();
			this.RemoveTutorialFocusMobileParty();
			this.IsSkipped = isSkipped;
		}

		public void SetTutorialFocusSettlement(Settlement settlement)
		{
			this.TutorialFocusSettlement = settlement;
		}

		public void RemoveTutorialFocusSettlement()
		{
			this.TutorialFocusSettlement = null;
		}

		public void RemoveTutorialFocusMobileParty()
		{
			this.TutorialFocusMobileParty = null;
		}

		public void PrepareRecruitOptionForTutorial()
		{
			bool flag = 6 - (MobileParty.MainParty.MemberRoster.TotalManCount - 2) > 0;
			Hero hero = Settlement.CurrentSettlement.Notables[0];
			CharacterObject @object = MBObjectManager.Instance.GetObject<CharacterObject>("tutorial_placeholder_volunteer");
			for (int i = 0; i < hero.VolunteerTypes.Length; i++)
			{
				if (flag || hero.VolunteerTypes[i] != null)
				{
					hero.VolunteerTypes[i] = @object;
				}
			}
			if (flag)
			{
				int troopRecruitmentCost = Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(@object, Hero.MainHero, false);
				int num = 6 * troopRecruitmentCost;
				if (Hero.MainHero.Gold < num)
				{
					GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num, false);
				}
			}
		}

		public ItemRoster GetAndPrepareBuyProductsOptionForTutorial(Village village)
		{
			if (PartyBase.MainParty.ItemRoster.TotalFood <= 3)
			{
				this._tutorialPhaseShoppingRoster.AddToCounts(DefaultItems.Grain, 3);
				int num = village.GetItemPrice(DefaultItems.Grain, null, false) * 3;
				if (Hero.MainHero.Gold < num)
				{
					GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num, false);
				}
			}
			return this._tutorialPhaseShoppingRoster;
		}

		public void SetTutorialQuestPhase(TutorialQuestPhase tutorialQuestPhase)
		{
			this.TutorialQuestPhase = tutorialQuestPhase;
		}

		public void InitializeTutorialVillageItemRoster()
		{
			Settlement @object = MBObjectManager.Instance.GetObject<Settlement>("village_ES3_2");
			for (int i = 0; i < @object.ItemRoster.Count; i++)
			{
				ItemObject itemAtIndex = @object.ItemRoster.GetItemAtIndex(i);
				if (itemAtIndex != null && !itemAtIndex.IsFood)
				{
					this._tutorialPhaseShoppingRoster.AddToCounts(itemAtIndex, MBRandom.RandomInt(1, 4));
				}
			}
		}

		private const int GrainAmount = 3;

		private const int RecruitTroopAmount = 6;

		public const int RestrictedModePriority = 1000000;

		public const string QuestVillageStringId = "village_ES3_2";

		public const string TrainingFieldStringId = "tutorial_training_field";

		public const string RadagosRaidersStringId = "storymode_quest_raider";

		public const string TutorialVoluteerStringId = "tutorial_placeholder_volunteer";

		public const string TutorialFemaleRefugeeStringId = "storymode_quest_refugee_female";

		public const string TutorialMaleRefugeeStringId = "storymode_quest_refugee_male";

		public const string TutorialHeadmanStringId = "storymode_tutorial_headman";

		[SaveableField(1)]
		private readonly ItemRoster _tutorialPhaseShoppingRoster;
	}
}
