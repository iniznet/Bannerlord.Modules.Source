using System;
using System.Collections.Generic;
using StoryMode.GameComponents.CampaignBehaviors;
using TaleWorlds.ActivitySystem;
using TaleWorlds.CampaignSystem;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace StoryMode.StoryModePhases
{
	// Token: 0x0200001B RID: 27
	public class ThirdPhase
	{
		// Token: 0x060000F6 RID: 246 RVA: 0x00005BCD File Offset: 0x00003DCD
		internal static void AutoGeneratedStaticCollectObjectsThirdPhase(object o, List<object> collectedObjects)
		{
			((ThirdPhase)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060000F7 RID: 247 RVA: 0x00005BDB File Offset: 0x00003DDB
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._oppositionKingdoms);
			collectedObjects.Add(this._allyKingdoms);
		}

		// Token: 0x060000F8 RID: 248 RVA: 0x00005BF5 File Offset: 0x00003DF5
		internal static object AutoGeneratedGetMemberValueIsCompleted(object o)
		{
			return ((ThirdPhase)o).IsCompleted;
		}

		// Token: 0x060000F9 RID: 249 RVA: 0x00005C07 File Offset: 0x00003E07
		internal static object AutoGeneratedGetMemberValue_oppositionKingdoms(object o)
		{
			return ((ThirdPhase)o)._oppositionKingdoms;
		}

		// Token: 0x060000FA RID: 250 RVA: 0x00005C14 File Offset: 0x00003E14
		internal static object AutoGeneratedGetMemberValue_allyKingdoms(object o)
		{
			return ((ThirdPhase)o)._allyKingdoms;
		}

		// Token: 0x17000046 RID: 70
		// (get) Token: 0x060000FB RID: 251 RVA: 0x00005C21 File Offset: 0x00003E21
		// (set) Token: 0x060000FC RID: 252 RVA: 0x00005C29 File Offset: 0x00003E29
		[SaveableProperty(3)]
		public bool IsCompleted { get; private set; }

		// Token: 0x17000047 RID: 71
		// (get) Token: 0x060000FD RID: 253 RVA: 0x00005C32 File Offset: 0x00003E32
		public MBReadOnlyList<Kingdom> OppositionKingdoms
		{
			get
			{
				return this._oppositionKingdoms;
			}
		}

		// Token: 0x17000048 RID: 72
		// (get) Token: 0x060000FE RID: 254 RVA: 0x00005C3A File Offset: 0x00003E3A
		public MBReadOnlyList<Kingdom> AllyKingdoms
		{
			get
			{
				return this._allyKingdoms;
			}
		}

		// Token: 0x060000FF RID: 255 RVA: 0x00005C42 File Offset: 0x00003E42
		public ThirdPhase()
		{
			this._oppositionKingdoms = new MBList<Kingdom>();
			this._allyKingdoms = new MBList<Kingdom>();
			this.IsCompleted = false;
		}

		// Token: 0x06000100 RID: 256 RVA: 0x00005C67 File Offset: 0x00003E67
		public void AddAllyKingdom(Kingdom kingdom)
		{
			this._allyKingdoms.Add(kingdom);
		}

		// Token: 0x06000101 RID: 257 RVA: 0x00005C75 File Offset: 0x00003E75
		public void AddOppositionKingdom(Kingdom kingdom)
		{
			this._oppositionKingdoms.Add(kingdom);
		}

		// Token: 0x06000102 RID: 258 RVA: 0x00005C83 File Offset: 0x00003E83
		public void RemoveOppositionKingdom(Kingdom kingdom)
		{
			this._oppositionKingdoms.Remove(kingdom);
		}

		// Token: 0x06000103 RID: 259 RVA: 0x00005C94 File Offset: 0x00003E94
		public void CompleteThirdPhase(QuestBase.QuestCompleteDetails defeatTheConspiracyQuestCompleteDetail)
		{
			this.IsCompleted = true;
			if (defeatTheConspiracyQuestCompleteDetail == 1)
			{
				ActivityManager.EndActivity("CompleteMainQuest", 2);
			}
			else if (defeatTheConspiracyQuestCompleteDetail == 4 || defeatTheConspiracyQuestCompleteDetail == 2 || defeatTheConspiracyQuestCompleteDetail == null)
			{
				ActivityManager.EndActivity("CompleteMainQuest", 0);
			}
			else if (defeatTheConspiracyQuestCompleteDetail == 3 || defeatTheConspiracyQuestCompleteDetail == 5)
			{
				ActivityManager.EndActivity("CompleteMainQuest", 1);
			}
			Campaign.Current.CampaignBehaviorManager.RemoveBehavior<ThirdPhaseCampaignBehavior>();
		}

		// Token: 0x04000062 RID: 98
		[SaveableField(1)]
		private readonly MBList<Kingdom> _oppositionKingdoms;

		// Token: 0x04000063 RID: 99
		[SaveableField(2)]
		private readonly MBList<Kingdom> _allyKingdoms;
	}
}
