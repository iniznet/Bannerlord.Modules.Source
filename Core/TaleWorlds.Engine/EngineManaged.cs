using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.DotNet;
using TaleWorlds.Library;

namespace TaleWorlds.Engine
{
	internal class EngineManaged : IManagedComponent
	{
		public string ManagedCallbacksDll
		{
			get
			{
				return ManagedDllFolder.Name + "TaleWorlds.Engine.AutoGenerated.dll";
			}
		}

		public EngineManaged()
		{
			EngineManaged._instance = this;
		}

		void IManagedComponent.OnStart()
		{
		}

		void IManagedComponent.OnCustomCallbackMethodPassed(string name, Delegate method)
		{
			if (name == "Engine")
			{
				EngineManaged.PassManagedEngineCallbackMethodPointersMono = method;
				this.OnInitialize();
			}
		}

		void IManagedComponent.OnApplicationTick(float dt)
		{
			EngineController.OnApplicationTick(dt);
		}

		private void OnInitialize()
		{
			List<Type> typesSafe = AssemblyLoader.LoadFrom(this.ManagedCallbacksDll, true).GetTypesSafe(null);
			Type type = null;
			foreach (Type type2 in typesSafe)
			{
				if (type2.GetInterfaces().Contains(typeof(ICallbackManager)))
				{
					type = type2;
					break;
				}
			}
			EngineManaged._callbackManager = type.GetConstructor(new Type[0]).Invoke(new object[0]) as ICallbackManager;
			EngineManaged._callbackManager.Initialize();
			Delegate[] delegates = EngineManaged._callbackManager.GetDelegates();
			for (int i = 0; i < delegates.Length; i++)
			{
				try
				{
					EngineManaged.PassManagedEngineCallbackMethodPointers(delegates[i]);
				}
				catch (Exception ex)
				{
					EngineManaged.PassManagedEngineCallbackMethodPointers(null);
					Console.WriteLine(ex + " " + i);
				}
			}
			EngineApplicationInterface.SetObjects(EngineManaged._callbackManager.GetScriptingInterfaceObjects());
			Managed.AddConstructorDelegateOfWeakReferenceClass<GameEntity>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<Scene>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<ManagedScriptComponent>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<Texture>();
			EngineScreenManager.Initialize();
		}

		[EngineCallback]
		internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer)
		{
			EngineManaged._engineApiPointers.Add(id, pointer);
		}

		[EngineCallback]
		internal static void CheckSharedStructureSizes()
		{
			EngineManaged._callbackManager.CheckSharedStructureSizes();
		}

		[EngineCallback]
		internal static void FillEngineApiPointers()
		{
			foreach (KeyValuePair<int, IntPtr> keyValuePair in EngineManaged._engineApiPointers)
			{
				try
				{
					EngineManaged._callbackManager.SetFunctionPointer(keyValuePair.Key, keyValuePair.Value);
				}
				catch (Exception ex)
				{
					Console.WriteLine(string.Concat(new object[] { "error: ", keyValuePair.Key, " ", ex }));
				}
			}
		}

		private static void PassManagedEngineCallbackMethodPointers(Delegate methodDelegate)
		{
			if (EngineManaged.PassManagedEngineCallbackMethodPointersMono != null)
			{
				EngineManaged.PassManagedEngineCallbackMethodPointersMono.DynamicInvoke(new object[] { methodDelegate });
			}
		}

		private static EngineManaged _instance;

		private static Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();

		private static ICallbackManager _callbackManager;

		private static Delegate PassManagedEngineCallbackMethodPointersMono = null;
	}
}
