using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.DotNet;
using TaleWorlds.Library;

namespace TaleWorlds.Engine
{
	// Token: 0x02000041 RID: 65
	internal class EngineManaged : IManagedComponent
	{
		// Token: 0x1700000E RID: 14
		// (get) Token: 0x0600059A RID: 1434 RVA: 0x00003320 File Offset: 0x00001520
		public string ManagedCallbacksDll
		{
			get
			{
				return ManagedDllFolder.Name + "TaleWorlds.Engine.AutoGenerated.dll";
			}
		}

		// Token: 0x0600059B RID: 1435 RVA: 0x00003331 File Offset: 0x00001531
		public EngineManaged()
		{
			EngineManaged._instance = this;
		}

		// Token: 0x0600059C RID: 1436 RVA: 0x0000333F File Offset: 0x0000153F
		void IManagedComponent.OnStart()
		{
		}

		// Token: 0x0600059D RID: 1437 RVA: 0x00003341 File Offset: 0x00001541
		void IManagedComponent.OnCustomCallbackMethodPassed(string name, Delegate method)
		{
			if (name == "Engine")
			{
				EngineManaged.PassManagedEngineCallbackMethodPointersMono = method;
				this.OnInitialize();
			}
		}

		// Token: 0x0600059E RID: 1438 RVA: 0x0000335C File Offset: 0x0000155C
		void IManagedComponent.OnApplicationTick(float dt)
		{
			EngineController.OnApplicationTick(dt);
		}

		// Token: 0x0600059F RID: 1439 RVA: 0x00003364 File Offset: 0x00001564
		private void OnInitialize()
		{
			Type[] types = AssemblyLoader.LoadFrom(this.ManagedCallbacksDll, true).GetTypes();
			Type type = null;
			foreach (Type type2 in types)
			{
				if (type2.GetInterfaces().Contains(typeof(ICallbackManager)))
				{
					type = type2;
					break;
				}
			}
			EngineManaged._callbackManager = type.GetConstructor(new Type[0]).Invoke(new object[0]) as ICallbackManager;
			EngineManaged._callbackManager.Initialize();
			Delegate[] delegates = EngineManaged._callbackManager.GetDelegates();
			for (int j = 0; j < delegates.Length; j++)
			{
				try
				{
					EngineManaged.PassManagedEngineCallbackMethodPointers(delegates[j]);
				}
				catch (Exception ex)
				{
					EngineManaged.PassManagedEngineCallbackMethodPointers(null);
					Console.WriteLine(ex + " " + j);
				}
			}
			EngineApplicationInterface.SetObjects(EngineManaged._callbackManager.GetScriptingInterfaceObjects());
			Managed.AddConstructorDelegateOfWeakReferenceClass<GameEntity>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<Scene>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<ManagedScriptComponent>();
			Managed.AddConstructorDelegateOfWeakReferenceClass<Texture>();
			EngineScreenManager.Initialize();
		}

		// Token: 0x060005A0 RID: 1440 RVA: 0x00003460 File Offset: 0x00001660
		[EngineCallback]
		internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer)
		{
			EngineManaged._engineApiPointers.Add(id, pointer);
		}

		// Token: 0x060005A1 RID: 1441 RVA: 0x0000346E File Offset: 0x0000166E
		[EngineCallback]
		internal static void CheckSharedStructureSizes()
		{
			EngineManaged._callbackManager.CheckSharedStructureSizes();
		}

		// Token: 0x060005A2 RID: 1442 RVA: 0x0000347C File Offset: 0x0000167C
		[EngineCallback]
		internal static void FillEngineApiPointers()
		{
			foreach (KeyValuePair<int, IntPtr> keyValuePair in EngineManaged._engineApiPointers)
			{
				try
				{
					EngineManaged._callbackManager.SetFunctionPointer(keyValuePair.Key, keyValuePair.Value);
				}
				catch (Exception ex)
				{
					Console.WriteLine(string.Concat(new object[] { "error: ", keyValuePair.Key, " ", ex }));
				}
			}
		}

		// Token: 0x060005A3 RID: 1443 RVA: 0x00003524 File Offset: 0x00001724
		private static void PassManagedEngineCallbackMethodPointers(Delegate methodDelegate)
		{
			if (EngineManaged.PassManagedEngineCallbackMethodPointersMono != null)
			{
				EngineManaged.PassManagedEngineCallbackMethodPointersMono.DynamicInvoke(new object[] { methodDelegate });
			}
		}

		// Token: 0x0400004A RID: 74
		private static EngineManaged _instance;

		// Token: 0x0400004B RID: 75
		private static Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();

		// Token: 0x0400004C RID: 76
		private static ICallbackManager _callbackManager;

		// Token: 0x0400004D RID: 77
		private static Delegate PassManagedEngineCallbackMethodPointersMono = null;
	}
}
