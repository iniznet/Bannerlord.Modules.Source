using System;
using System.Runtime.InteropServices;
using TaleWorlds.Core;
using TaleWorlds.DotNet;
using TaleWorlds.Engine;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.MountAndBlade
{
	// Token: 0x02000392 RID: 914
	[EngineStruct("Weapon_data", "TaleWorlds.MountAndBlade.AutoGenerated.WeaponDataAsNative")]
	public struct WeaponData
	{
		// Token: 0x06003246 RID: 12870 RVA: 0x000D0DFE File Offset: 0x000CEFFE
		public bool IsValid()
		{
			return this.WeaponKind >= 0;
		}

		// Token: 0x06003247 RID: 12871 RVA: 0x000D0E0C File Offset: 0x000CF00C
		public ItemObject GetItemObject()
		{
			return ((this.WeaponKind >= 0) ? MBObjectManager.Instance.GetObject(new MBGUID((uint)this.WeaponKind)) : null) as ItemObject;
		}

		// Token: 0x06003248 RID: 12872 RVA: 0x000D0E34 File Offset: 0x000CF034
		public void DeinitializeManagedPointers()
		{
			if (this.WeaponMesh != null)
			{
				this.WeaponMesh.ManualInvalidate();
			}
			if (this.HolsterMesh != null)
			{
				this.HolsterMesh.ManualInvalidate();
			}
			if (this.HolsterMeshWithWeapon != null)
			{
				this.HolsterMeshWithWeapon.ManualInvalidate();
			}
			if (this.FlyingMesh != null)
			{
				this.FlyingMesh.ManualInvalidate();
			}
		}

		// Token: 0x04001507 RID: 5383
		public MetaMesh WeaponMesh;

		// Token: 0x04001508 RID: 5384
		public MetaMesh HolsterMesh;

		// Token: 0x04001509 RID: 5385
		public MetaMesh HolsterMeshWithWeapon;

		// Token: 0x0400150A RID: 5386
		public MetaMesh FlyingMesh;

		// Token: 0x0400150B RID: 5387
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
		public string Prefab;

		// Token: 0x0400150C RID: 5388
		public PhysicsShape Shape;

		// Token: 0x0400150D RID: 5389
		public PhysicsShape CollisionShape;

		// Token: 0x0400150E RID: 5390
		public Material TableauMaterial;

		// Token: 0x0400150F RID: 5391
		public MatrixFrame WeaponFrame;

		// Token: 0x04001510 RID: 5392
		public int PhysicsMaterialIndex;

		// Token: 0x04001511 RID: 5393
		public int WeaponKind;

		// Token: 0x04001512 RID: 5394
		public StackArray.StackArray4Int ItemHolsterIndices;

		// Token: 0x04001513 RID: 5395
		public int Difficulty;

		// Token: 0x04001514 RID: 5396
		public float BaseWeight;

		// Token: 0x04001515 RID: 5397
		public float Inertia;

		// Token: 0x04001516 RID: 5398
		public short ReloadPhase;

		// Token: 0x04001517 RID: 5399
		public bool HasFlagAnimation;

		// Token: 0x04001518 RID: 5400
		public Vec3 AmmoOffset;

		// Token: 0x04001519 RID: 5401
		public MatrixFrame StickingFrame;

		// Token: 0x0400151A RID: 5402
		public float ScaleFactor;

		// Token: 0x0400151B RID: 5403
		public float CenterOfMass;

		// Token: 0x0400151C RID: 5404
		public Vec3 CenterOfMass3D;

		// Token: 0x0400151D RID: 5405
		public Vec3 HolsterPositionShift;

		// Token: 0x0400151E RID: 5406
		public int FlyingSoundCode;

		// Token: 0x0400151F RID: 5407
		public int PassbySoundCode;

		// Token: 0x04001520 RID: 5408
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
		public string TrailParticleName;

		// Token: 0x04001521 RID: 5409
		public Vec3 CenterOfMassShift;

		// Token: 0x04001522 RID: 5410
		public short DataValue;

		// Token: 0x04001523 RID: 5411
		public int CurrentUsageIndex;

		// Token: 0x04001524 RID: 5412
		public float AirFrictionConstant;

		// Token: 0x04001525 RID: 5413
		public bool HasLowerHolsterPriority;

		// Token: 0x04001526 RID: 5414
		public float GlossMultiplier;

		// Token: 0x04001527 RID: 5415
		public static WeaponData InvalidWeaponData = new WeaponData
		{
			WeaponKind = -1
		};
	}
}
