using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using TaleWorlds.DotNet;
using TaleWorlds.Library;

namespace TaleWorlds.MountAndBlade
{
	public class CoreManaged : IManagedComponent
	{
		public string ManagedCallbacksDll
		{
			get
			{
				return ManagedDllFolder.Name + "TaleWorlds.MountAndBlade.AutoGenerated.dll";
			}
		}

		public CoreManaged()
		{
			CoreManaged._instance = this;
		}

		[MBCallback]
		public static void Start()
		{
			Managed.Start(new IManagedComponent[0]);
		}

		void IManagedComponent.OnStart()
		{
			Debug.DebugManager = new MBDebugManager();
			Dictionary<string, Type> dictionary = new Dictionary<string, Type>();
			foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
			{
				Dictionary<string, Type> dictionary2 = this.CollectModuleAssemblyTypes(assembly);
				dictionary = dictionary.Union(dictionary2).ToDictionary((KeyValuePair<string, Type> k) => k.Key, (KeyValuePair<string, Type> v) => v.Value);
			}
			Managed.InitializeTypes(dictionary);
		}

		private Dictionary<string, Type> CollectModuleAssemblyTypes(Assembly moduleAssembly)
		{
			Dictionary<string, Type> dictionary = new Dictionary<string, Type>();
			try
			{
				foreach (Type type in moduleAssembly.GetTypes())
				{
					if (typeof(ManagedObject).IsAssignableFrom(type) || typeof(DotNetObject).IsAssignableFrom(type))
					{
						dictionary.Add(type.Name, type);
					}
				}
			}
			catch (Exception)
			{
				dictionary.Clear();
			}
			return dictionary;
		}

		[MBCallback]
		internal static void OnLoadCommonFinished()
		{
			FaceGen.CreateInstance();
		}

		private void OnInitialize()
		{
			List<Type> typesSafe = AssemblyLoader.LoadFrom(this.ManagedCallbacksDll, true).GetTypesSafe(null);
			Type type = null;
			foreach (Type type2 in typesSafe)
			{
				if (type2.GetInterfaces().Contains(typeof(ICallbackManager)))
				{
					type = type2;
					break;
				}
			}
			CoreManaged._callbackManager = type.GetConstructor(new Type[0]).Invoke(new object[0]) as ICallbackManager;
			CoreManaged._callbackManager.Initialize();
			Delegate[] delegates = CoreManaged._callbackManager.GetDelegates();
			for (int i = 0; i < delegates.Length; i++)
			{
				try
				{
					CoreManaged.PassManagedCoreCallbackMethodPointers(delegates[i]);
				}
				catch (Exception ex)
				{
					CoreManaged.PassManagedCoreCallbackMethodPointers(null);
					Console.WriteLine(ex + " " + i);
				}
			}
			MBAPI.SetObjects(CoreManaged._callbackManager.GetScriptingInterfaceObjects());
			Module.CreateModule();
		}

		void IManagedComponent.OnCustomCallbackMethodPassed(string name, Delegate method)
		{
			if (name == "MBCore")
			{
				CoreManaged._passManagedCoreCallbackMethodPointersMono = method;
				this.OnInitialize();
			}
		}

		[MBCallback]
		internal static void Finalize()
		{
			Module.FinalizeCurrentModule();
			Common.MemoryCleanupGC(false);
		}

		void IManagedComponent.OnApplicationTick(float dt)
		{
			Module.CurrentModule.OnApplicationTick(dt);
		}

		[MBCallback]
		internal static void CheckSharedStructureSizes()
		{
			CoreManaged._callbackManager.CheckSharedStructureSizes();
		}

		[MBCallback]
		internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer)
		{
			CoreManaged._engineApiPointers.Add(id, pointer);
		}

		[MBCallback]
		internal static void FillEngineApiPointers()
		{
			foreach (KeyValuePair<int, IntPtr> keyValuePair in CoreManaged._engineApiPointers)
			{
				try
				{
					CoreManaged._callbackManager.SetFunctionPointer(keyValuePair.Key, keyValuePair.Value);
				}
				catch (Exception ex)
				{
					Console.WriteLine(string.Concat(new object[] { "error: ", keyValuePair.Key, " ", ex }));
				}
			}
		}

		private static void PassManagedCoreCallbackMethodPointers(Delegate methodDelegate)
		{
			Delegate passManagedCoreCallbackMethodPointersMono = CoreManaged._passManagedCoreCallbackMethodPointersMono;
			if (passManagedCoreCallbackMethodPointersMono == null)
			{
				return;
			}
			passManagedCoreCallbackMethodPointersMono.DynamicInvoke(new object[] { methodDelegate });
		}

		private static CoreManaged _instance;

		private static ICallbackManager _callbackManager;

		private static readonly Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();

		private static Delegate _passManagedCoreCallbackMethodPointersMono = null;
	}
}
