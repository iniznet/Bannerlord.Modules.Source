using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables
{
	// Token: 0x02000417 RID: 1047
	public class LeaveKingdomAsClanBarterable : Barterable
	{
		// Token: 0x17000D1E RID: 3358
		// (get) Token: 0x06003DF0 RID: 15856 RVA: 0x001281CC File Offset: 0x001263CC
		public override string StringID
		{
			get
			{
				return "leave_faction_barterable";
			}
		}

		// Token: 0x17000D1F RID: 3359
		// (get) Token: 0x06003DF1 RID: 15857 RVA: 0x001281D3 File Offset: 0x001263D3
		public override TextObject Name
		{
			get
			{
				TextObject textObject = new TextObject("{=x5POJVWw}Stop serving {FACTION}", null);
				textObject.SetTextVariable("FACTION", base.OriginalOwner.MapFaction.Name);
				return textObject;
			}
		}

		// Token: 0x06003DF2 RID: 15858 RVA: 0x001281FC File Offset: 0x001263FC
		public LeaveKingdomAsClanBarterable(Hero owner, PartyBase ownerParty)
			: base(owner, ownerParty)
		{
		}

		// Token: 0x06003DF3 RID: 15859 RVA: 0x00128208 File Offset: 0x00126408
		public override int GetUnitValueForFaction(IFaction faction)
		{
			Hero leader = base.OriginalOwner.Clan.Leader;
			IFaction mapFaction = base.OriginalOwner.MapFaction;
			if (faction != base.OriginalOwner.Clan)
			{
				float num;
				if (faction == base.OriginalOwner.MapFaction)
				{
					if (base.OriginalOwner.Clan.IsUnderMercenaryService)
					{
						num = Campaign.Current.Models.DiplomacyModel.GetScoreOfMercenaryToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom);
					}
					else
					{
						num = Campaign.Current.Models.DiplomacyModel.GetScoreOfClanToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom);
					}
					num *= (float)((faction == base.OriginalOwner.Clan || faction == base.OriginalOwner.Clan.Kingdom) ? (-1) : 1);
				}
				else
				{
					float num2 = 0.5f;
					float num3 = 0.01f;
					float num4 = -0.5f;
					float clanStrength = Campaign.Current.Models.DiplomacyModel.GetClanStrength(base.OriginalOwner.Clan);
					if (faction.IsClan && FactionManager.IsAtWarAgainstFaction(faction, base.OriginalOwner.Clan.Kingdom))
					{
						num = clanStrength * num2;
					}
					else if (FactionManager.IsAlliedWithFaction(faction, base.OriginalOwner.Clan.Kingdom))
					{
						num = clanStrength * num4;
					}
					else
					{
						num = clanStrength * num3;
					}
				}
				return (int)num;
			}
			if (base.OriginalOwner.Clan.IsMinorFaction)
			{
				return (int)Campaign.Current.Models.DiplomacyModel.GetScoreOfMercenaryToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom);
			}
			return (int)Campaign.Current.Models.DiplomacyModel.GetScoreOfClanToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom);
		}

		// Token: 0x06003DF4 RID: 15860 RVA: 0x001283EA File Offset: 0x001265EA
		public override void CheckBarterLink(Barterable linkedBarterable)
		{
		}

		// Token: 0x06003DF5 RID: 15861 RVA: 0x001283EC File Offset: 0x001265EC
		public override bool IsCompatible(Barterable barterable)
		{
			JoinKingdomAsClanBarterable joinKingdomAsClanBarterable = barterable as JoinKingdomAsClanBarterable;
			return joinKingdomAsClanBarterable == null || joinKingdomAsClanBarterable.OriginalOwner != base.OriginalOwner || joinKingdomAsClanBarterable.TargetKingdom != base.OriginalOwner.MapFaction;
		}

		// Token: 0x06003DF6 RID: 15862 RVA: 0x00128429 File Offset: 0x00126629
		public override ImageIdentifier GetVisualIdentifier()
		{
			return new ImageIdentifier(BannerCode.CreateFrom(base.OriginalOwner.Clan.Banner), false);
		}

		// Token: 0x06003DF7 RID: 15863 RVA: 0x00128446 File Offset: 0x00126646
		public override string GetEncyclopediaLink()
		{
			return base.OriginalOwner.MapFaction.EncyclopediaLink;
		}

		// Token: 0x06003DF8 RID: 15864 RVA: 0x00128458 File Offset: 0x00126658
		public override void Apply()
		{
			if (base.OriginalOwner.Clan.IsUnderMercenaryService)
			{
				ChangeKingdomAction.ApplyByLeaveKingdomAsMercenary(base.OriginalOwner.Clan, true);
				return;
			}
			ChangeKingdomAction.ApplyByLeaveKingdom(base.OriginalOwner.Clan, true);
		}

		// Token: 0x06003DF9 RID: 15865 RVA: 0x0012848F File Offset: 0x0012668F
		internal static void AutoGeneratedStaticCollectObjectsLeaveKingdomAsClanBarterable(object o, List<object> collectedObjects)
		{
			((LeaveKingdomAsClanBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06003DFA RID: 15866 RVA: 0x0012849D File Offset: 0x0012669D
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}
	}
}
