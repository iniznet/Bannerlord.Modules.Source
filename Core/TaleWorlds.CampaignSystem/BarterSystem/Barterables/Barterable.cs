using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables
{
	public abstract class Barterable
	{
		protected Barterable(Hero originalOwner, PartyBase originalParty)
		{
			this.OriginalOwner = originalOwner;
			this.OriginalParty = originalParty;
			this.CurrentAmount = 1;
			this._linkedBarterables = new MBList<Barterable>();
			this.Side = Barterable.BarterSide.Left;
		}

		public abstract string StringID { get; }

		public Hero OriginalOwner { get; private set; }

		public PartyBase OriginalParty { get; private set; }

		public abstract TextObject Name { get; }

		public int GetValueForFaction(IFaction faction)
		{
			return this.GetUnitValueForFaction(faction) * this.CurrentAmount;
		}

		public virtual void CheckBarterLink(Barterable linkedBarterable)
		{
		}

		public abstract int GetUnitValueForFaction(IFaction faction);

		public virtual int MaxAmount
		{
			get
			{
				return 1;
			}
		}

		public int CurrentAmount
		{
			get
			{
				return this._currentAmout;
			}
			set
			{
				this._currentAmout = value;
				if (this._currentAmout > this.MaxAmount)
				{
					this._currentAmout = this.MaxAmount;
				}
			}
		}

		public bool IsOffered { get; protected set; }

		public bool IsContextDependent { get; protected set; }

		public BarterGroup Group { get; protected set; }

		public MBReadOnlyList<Barterable> LinkedBarterables
		{
			get
			{
				return this._linkedBarterables;
			}
		}

		public Barterable.BarterSide Side { get; }

		public void SetIsOffered(bool value)
		{
			if (this.IsOffered != value)
			{
				this.IsOffered = value;
				foreach (Barterable barterable in this._linkedBarterables)
				{
					barterable.IsOffered = value;
				}
			}
		}

		public void AddBarterLink(Barterable barterable)
		{
			this._linkedBarterables.Add(barterable);
		}

		public void Initialize(BarterGroup barterGroup, bool isContextDependent)
		{
			this.Group = barterGroup;
			this.IsContextDependent = isContextDependent;
		}

		public virtual bool IsCompatible(Barterable barterable)
		{
			return true;
		}

		public abstract ImageIdentifier GetVisualIdentifier();

		public virtual string GetEncyclopediaLink()
		{
			return "";
		}

		public abstract void Apply();

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		private int _currentAmout;

		protected MBList<Barterable> _linkedBarterables;

		public enum BarterSide
		{
			Left,
			Right
		}
	}
}
