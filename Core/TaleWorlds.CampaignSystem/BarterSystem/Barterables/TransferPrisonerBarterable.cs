using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables
{
	public class TransferPrisonerBarterable : Barterable
	{
		public override string StringID
		{
			get
			{
				return "transfer_prisoner_barterable";
			}
		}

		public TransferPrisonerBarterable(Hero prisonerCharacter, Hero owner, PartyBase ownerParty, Hero opponentHero, PartyBase otherParty)
			: base(owner, ownerParty)
		{
			this._prisonerCharacter = prisonerCharacter;
			this._opponentHero = opponentHero;
			this._otherParty = otherParty;
		}

		public override TextObject Name
		{
			get
			{
				TextObject textObject = new TextObject("{=g5bzJjd5}Transfer {PRISONER.NAME}", null);
				StringHelpers.SetCharacterProperties("PRISONER", this._prisonerCharacter.CharacterObject, textObject, false);
				return textObject;
			}
		}

		public override int GetUnitValueForFaction(IFaction faction)
		{
			int num = Campaign.Current.Models.RansomValueCalculationModel.PrisonerRansomValue(this._prisonerCharacter.CharacterObject, null);
			Hero originalOwner = base.OriginalOwner;
			if (faction != ((originalOwner != null) ? originalOwner.Clan : null))
			{
				Hero originalOwner2 = base.OriginalOwner;
				if (faction != ((originalOwner2 != null) ? originalOwner2.MapFaction : null) && faction != base.OriginalParty.MapFaction)
				{
					return num;
				}
			}
			return -num;
		}

		public override ImageIdentifier GetVisualIdentifier()
		{
			return new ImageIdentifier(CharacterCode.CreateFrom(this._prisonerCharacter.CharacterObject));
		}

		public override string GetEncyclopediaLink()
		{
			return this._prisonerCharacter.EncyclopediaLink;
		}

		public override void Apply()
		{
			if (this._otherParty != null && this._otherParty.MapFaction.IsAtWarWith(this._prisonerCharacter.MapFaction))
			{
				TransferPrisonerAction.Apply(this._prisonerCharacter.CharacterObject, base.OriginalParty, this._otherParty);
				return;
			}
			Debug.FailedAssert("Failed to transfer prisoner through barter", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\BarterSystem\\Barterables\\TransferPrisonerBarterable.cs", "Apply", 70);
		}

		internal static void AutoGeneratedStaticCollectObjectsTransferPrisonerBarterable(object o, List<object> collectedObjects)
		{
			((TransferPrisonerBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._prisonerCharacter);
			collectedObjects.Add(this._opponentHero);
			collectedObjects.Add(this._otherParty);
		}

		internal static object AutoGeneratedGetMemberValue_prisonerCharacter(object o)
		{
			return ((TransferPrisonerBarterable)o)._prisonerCharacter;
		}

		internal static object AutoGeneratedGetMemberValue_opponentHero(object o)
		{
			return ((TransferPrisonerBarterable)o)._opponentHero;
		}

		internal static object AutoGeneratedGetMemberValue_otherParty(object o)
		{
			return ((TransferPrisonerBarterable)o)._otherParty;
		}

		[SaveableField(10)]
		private readonly Hero _prisonerCharacter;

		[SaveableField(20)]
		private readonly Hero _opponentHero;

		[SaveableField(30)]
		private readonly PartyBase _otherParty;
	}
}
