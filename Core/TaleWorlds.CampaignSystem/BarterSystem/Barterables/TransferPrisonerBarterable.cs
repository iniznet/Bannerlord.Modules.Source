using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables
{
	// Token: 0x0200041E RID: 1054
	public class TransferPrisonerBarterable : Barterable
	{
		// Token: 0x17000D2D RID: 3373
		// (get) Token: 0x06003E3B RID: 15931 RVA: 0x00129941 File Offset: 0x00127B41
		public override string StringID
		{
			get
			{
				return "transfer_prisoner_barterable";
			}
		}

		// Token: 0x06003E3C RID: 15932 RVA: 0x00129948 File Offset: 0x00127B48
		public TransferPrisonerBarterable(Hero prisonerCharacter, Hero owner, PartyBase ownerParty, Hero opponentHero, PartyBase otherParty)
			: base(owner, ownerParty)
		{
			this._prisonerCharacter = prisonerCharacter;
			this._opponentHero = opponentHero;
			this._otherParty = otherParty;
		}

		// Token: 0x17000D2E RID: 3374
		// (get) Token: 0x06003E3D RID: 15933 RVA: 0x0012996C File Offset: 0x00127B6C
		public override TextObject Name
		{
			get
			{
				TextObject textObject = new TextObject("{=g5bzJjd5}Transfer {PRISONER.NAME}", null);
				StringHelpers.SetCharacterProperties("PRISONER", this._prisonerCharacter.CharacterObject, textObject, false);
				return textObject;
			}
		}

		// Token: 0x06003E3E RID: 15934 RVA: 0x001299A0 File Offset: 0x00127BA0
		public override int GetUnitValueForFaction(IFaction faction)
		{
			int num = Campaign.Current.Models.RansomValueCalculationModel.PrisonerRansomValue(this._prisonerCharacter.CharacterObject, null);
			Hero originalOwner = base.OriginalOwner;
			if (faction != ((originalOwner != null) ? originalOwner.Clan : null))
			{
				Hero originalOwner2 = base.OriginalOwner;
				if (faction != ((originalOwner2 != null) ? originalOwner2.MapFaction : null) && faction != base.OriginalParty.MapFaction)
				{
					return num;
				}
			}
			return -num;
		}

		// Token: 0x06003E3F RID: 15935 RVA: 0x00129A0A File Offset: 0x00127C0A
		public override ImageIdentifier GetVisualIdentifier()
		{
			return new ImageIdentifier(CharacterCode.CreateFrom(this._prisonerCharacter.CharacterObject));
		}

		// Token: 0x06003E40 RID: 15936 RVA: 0x00129A21 File Offset: 0x00127C21
		public override string GetEncyclopediaLink()
		{
			return this._prisonerCharacter.EncyclopediaLink;
		}

		// Token: 0x06003E41 RID: 15937 RVA: 0x00129A30 File Offset: 0x00127C30
		public override void Apply()
		{
			if (this._otherParty != null && this._otherParty.MapFaction.IsAtWarWith(this._prisonerCharacter.MapFaction))
			{
				TransferPrisonerAction.Apply(this._prisonerCharacter.CharacterObject, base.OriginalParty, this._otherParty);
				return;
			}
			Debug.FailedAssert("Failed to transfer prisoner through barter", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\BarterSystem\\Barterables\\TransferPrisonerBarterable.cs", "Apply", 70);
		}

		// Token: 0x06003E42 RID: 15938 RVA: 0x00129A95 File Offset: 0x00127C95
		internal static void AutoGeneratedStaticCollectObjectsTransferPrisonerBarterable(object o, List<object> collectedObjects)
		{
			((TransferPrisonerBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06003E43 RID: 15939 RVA: 0x00129AA3 File Offset: 0x00127CA3
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._prisonerCharacter);
			collectedObjects.Add(this._opponentHero);
			collectedObjects.Add(this._otherParty);
		}

		// Token: 0x06003E44 RID: 15940 RVA: 0x00129AD0 File Offset: 0x00127CD0
		internal static object AutoGeneratedGetMemberValue_prisonerCharacter(object o)
		{
			return ((TransferPrisonerBarterable)o)._prisonerCharacter;
		}

		// Token: 0x06003E45 RID: 15941 RVA: 0x00129ADD File Offset: 0x00127CDD
		internal static object AutoGeneratedGetMemberValue_opponentHero(object o)
		{
			return ((TransferPrisonerBarterable)o)._opponentHero;
		}

		// Token: 0x06003E46 RID: 15942 RVA: 0x00129AEA File Offset: 0x00127CEA
		internal static object AutoGeneratedGetMemberValue_otherParty(object o)
		{
			return ((TransferPrisonerBarterable)o)._otherParty;
		}

		// Token: 0x040012AB RID: 4779
		[SaveableField(10)]
		private readonly Hero _prisonerCharacter;

		// Token: 0x040012AC RID: 4780
		[SaveableField(20)]
		private readonly Hero _opponentHero;

		// Token: 0x040012AD RID: 4781
		[SaveableField(30)]
		private readonly PartyBase _otherParty;
	}
}
