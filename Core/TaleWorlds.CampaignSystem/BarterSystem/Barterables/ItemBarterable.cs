using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables
{
	public class ItemBarterable : Barterable
	{
		public override string StringID
		{
			get
			{
				return "item_barterable";
			}
		}

		public ItemBarterable(Hero ownerHero, Hero otherHero, PartyBase ownerParty, PartyBase otherParty, ItemRosterElement itemRosterElement, int averageValueOfItemInNearbySettlements)
			: base(ownerHero, ownerParty)
		{
			this._itemElement = itemRosterElement;
			this._averageValueOfItemInNearbySettlements = averageValueOfItemInNearbySettlements;
			this._otherParty = otherParty;
			this._otherHero = otherHero;
		}

		public ItemRosterElement ItemRosterElement
		{
			get
			{
				return this._itemElement;
			}
		}

		public override int MaxAmount
		{
			get
			{
				return this._itemElement.Amount;
			}
		}

		public override TextObject Name
		{
			get
			{
				return this._itemElement.EquipmentElement.Item.Name;
			}
		}

		public int ItemValue
		{
			get
			{
				return this._averageValueOfItemInNearbySettlements;
			}
		}

		public override int GetUnitValueForFaction(IFaction faction)
		{
			return MathF.Round(Campaign.Current.Models.BarterModel.GetBarterPenalty(faction, this, this._otherHero, this._otherParty).ResultNumber * (float)this.ItemValue);
		}

		public override void CheckBarterLink(Barterable parentLinkedBarterable)
		{
		}

		public override ImageIdentifier GetVisualIdentifier()
		{
			return new ImageIdentifier(this._itemElement.EquipmentElement.Item, "");
		}

		public override string GetEncyclopediaLink()
		{
			return "";
		}

		public override void Apply()
		{
			if (this._otherParty != null)
			{
				base.OriginalParty.ItemRoster.AddToCounts(this._itemElement.EquipmentElement, -base.CurrentAmount);
				this._otherParty.ItemRoster.AddToCounts(this._itemElement.EquipmentElement, base.CurrentAmount);
				return;
			}
			GiveItemAction.ApplyForHeroes(base.OriginalOwner, this._otherHero, this._itemElement, base.CurrentAmount);
		}

		internal static void AutoGeneratedStaticCollectObjectsItemBarterable(object o, List<object> collectedObjects)
		{
			((ItemBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private readonly ItemRosterElement _itemElement;

		private readonly Hero _otherHero;

		private readonly PartyBase _otherParty;

		private readonly int _averageValueOfItemInNearbySettlements;
	}
}
