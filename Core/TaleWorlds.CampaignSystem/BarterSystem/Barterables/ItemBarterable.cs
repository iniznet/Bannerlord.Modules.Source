using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables
{
	// Token: 0x02000415 RID: 1045
	public class ItemBarterable : Barterable
	{
		// Token: 0x17000D17 RID: 3351
		// (get) Token: 0x06003DD8 RID: 15832 RVA: 0x00127CB8 File Offset: 0x00125EB8
		public override string StringID
		{
			get
			{
				return "item_barterable";
			}
		}

		// Token: 0x06003DD9 RID: 15833 RVA: 0x00127CBF File Offset: 0x00125EBF
		public ItemBarterable(Hero ownerHero, Hero otherHero, PartyBase ownerParty, PartyBase otherParty, ItemRosterElement itemRosterElement, int averageValueOfItemInNearbySettlements)
			: base(ownerHero, ownerParty)
		{
			this._itemElement = itemRosterElement;
			this._averageValueOfItemInNearbySettlements = averageValueOfItemInNearbySettlements;
			this._otherParty = otherParty;
			this._otherHero = otherHero;
		}

		// Token: 0x17000D18 RID: 3352
		// (get) Token: 0x06003DDA RID: 15834 RVA: 0x00127CE8 File Offset: 0x00125EE8
		public ItemRosterElement ItemRosterElement
		{
			get
			{
				return this._itemElement;
			}
		}

		// Token: 0x17000D19 RID: 3353
		// (get) Token: 0x06003DDB RID: 15835 RVA: 0x00127CF0 File Offset: 0x00125EF0
		public override int MaxAmount
		{
			get
			{
				return this._itemElement.Amount;
			}
		}

		// Token: 0x17000D1A RID: 3354
		// (get) Token: 0x06003DDC RID: 15836 RVA: 0x00127D0C File Offset: 0x00125F0C
		public override TextObject Name
		{
			get
			{
				return this._itemElement.EquipmentElement.Item.Name;
			}
		}

		// Token: 0x17000D1B RID: 3355
		// (get) Token: 0x06003DDD RID: 15837 RVA: 0x00127D34 File Offset: 0x00125F34
		public int ItemValue
		{
			get
			{
				return this._averageValueOfItemInNearbySettlements;
			}
		}

		// Token: 0x06003DDE RID: 15838 RVA: 0x00127D3C File Offset: 0x00125F3C
		public override int GetUnitValueForFaction(IFaction faction)
		{
			return MathF.Round(Campaign.Current.Models.BarterModel.GetBarterPenalty(faction, this, this._otherHero, this._otherParty).ResultNumber * (float)this.ItemValue);
		}

		// Token: 0x06003DDF RID: 15839 RVA: 0x00127D80 File Offset: 0x00125F80
		public override void CheckBarterLink(Barterable parentLinkedBarterable)
		{
		}

		// Token: 0x06003DE0 RID: 15840 RVA: 0x00127D84 File Offset: 0x00125F84
		public override ImageIdentifier GetVisualIdentifier()
		{
			return new ImageIdentifier(this._itemElement.EquipmentElement.Item, "");
		}

		// Token: 0x06003DE1 RID: 15841 RVA: 0x00127DB1 File Offset: 0x00125FB1
		public override string GetEncyclopediaLink()
		{
			return "";
		}

		// Token: 0x06003DE2 RID: 15842 RVA: 0x00127DB8 File Offset: 0x00125FB8
		public override void Apply()
		{
			if (this._otherParty != null)
			{
				base.OriginalParty.ItemRoster.AddToCounts(this._itemElement.EquipmentElement, -base.CurrentAmount);
				this._otherParty.ItemRoster.AddToCounts(this._itemElement.EquipmentElement, base.CurrentAmount);
				return;
			}
			GiveItemAction.ApplyForHeroes(base.OriginalOwner, this._otherHero, this._itemElement, base.CurrentAmount);
		}

		// Token: 0x06003DE3 RID: 15843 RVA: 0x00127E36 File Offset: 0x00126036
		internal static void AutoGeneratedStaticCollectObjectsItemBarterable(object o, List<object> collectedObjects)
		{
			((ItemBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06003DE4 RID: 15844 RVA: 0x00127E44 File Offset: 0x00126044
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x04001297 RID: 4759
		private readonly ItemRosterElement _itemElement;

		// Token: 0x04001298 RID: 4760
		private readonly Hero _otherHero;

		// Token: 0x04001299 RID: 4761
		private readonly PartyBase _otherParty;

		// Token: 0x0400129A RID: 4762
		private readonly int _averageValueOfItemInNearbySettlements;
	}
}
