using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables
{
	// Token: 0x02000413 RID: 1043
	public class FiefBarterable : Barterable
	{
		// Token: 0x17000D11 RID: 3345
		// (get) Token: 0x06003DBE RID: 15806 RVA: 0x0012798D File Offset: 0x00125B8D
		public override string StringID
		{
			get
			{
				return "fief_barterable";
			}
		}

		// Token: 0x17000D12 RID: 3346
		// (get) Token: 0x06003DBF RID: 15807 RVA: 0x00127994 File Offset: 0x00125B94
		public Settlement TargetSettlement
		{
			get
			{
				return this._settlement;
			}
		}

		// Token: 0x17000D13 RID: 3347
		// (get) Token: 0x06003DC0 RID: 15808 RVA: 0x0012799C File Offset: 0x00125B9C
		public override TextObject Name
		{
			get
			{
				return this._settlement.Name;
			}
		}

		// Token: 0x06003DC1 RID: 15809 RVA: 0x001279A9 File Offset: 0x00125BA9
		public FiefBarterable(Settlement settlement, Hero owner, Hero heroOfferedTo)
			: base(owner, null)
		{
			this._settlement = settlement;
			this._heroOfferedTo = heroOfferedTo;
		}

		// Token: 0x06003DC2 RID: 15810 RVA: 0x001279C4 File Offset: 0x00125BC4
		public override int GetUnitValueForFaction(IFaction faction)
		{
			float num = 1f;
			if (faction == this._heroOfferedTo.Clan)
			{
				num = 1f;
			}
			else if (faction == base.OriginalOwner.Clan)
			{
				num = -1f;
			}
			else if (faction.MapFaction == this._heroOfferedTo.MapFaction)
			{
				num = 1f;
			}
			else if (faction.MapFaction == base.OriginalOwner.MapFaction)
			{
				num = -1f;
			}
			float num2 = Campaign.Current.Models.SettlementValueModel.CalculateSettlementValueForFaction(this._settlement, faction);
			return (int)(num * num2);
		}

		// Token: 0x06003DC3 RID: 15811 RVA: 0x00127A57 File Offset: 0x00125C57
		public override ImageIdentifier GetVisualIdentifier()
		{
			return null;
		}

		// Token: 0x06003DC4 RID: 15812 RVA: 0x00127A5A File Offset: 0x00125C5A
		public override string GetEncyclopediaLink()
		{
			return this.TargetSettlement.EncyclopediaLink;
		}

		// Token: 0x06003DC5 RID: 15813 RVA: 0x00127A67 File Offset: 0x00125C67
		public override void Apply()
		{
			ChangeOwnerOfSettlementAction.ApplyByBarter(this._heroOfferedTo, this._settlement);
		}

		// Token: 0x06003DC6 RID: 15814 RVA: 0x00127A7A File Offset: 0x00125C7A
		internal static void AutoGeneratedStaticCollectObjectsFiefBarterable(object o, List<object> collectedObjects)
		{
			((FiefBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06003DC7 RID: 15815 RVA: 0x00127A88 File Offset: 0x00125C88
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._settlement);
			collectedObjects.Add(this._heroOfferedTo);
		}

		// Token: 0x06003DC8 RID: 15816 RVA: 0x00127AA9 File Offset: 0x00125CA9
		internal static object AutoGeneratedGetMemberValue_settlement(object o)
		{
			return ((FiefBarterable)o)._settlement;
		}

		// Token: 0x06003DC9 RID: 15817 RVA: 0x00127AB6 File Offset: 0x00125CB6
		internal static object AutoGeneratedGetMemberValue_heroOfferedTo(object o)
		{
			return ((FiefBarterable)o)._heroOfferedTo;
		}

		// Token: 0x04001291 RID: 4753
		[SaveableField(100)]
		private readonly Settlement _settlement;

		// Token: 0x04001292 RID: 4754
		[SaveableField(101)]
		private readonly Hero _heroOfferedTo;
	}
}
