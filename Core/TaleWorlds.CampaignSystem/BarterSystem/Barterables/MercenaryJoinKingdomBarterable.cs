using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.BarterSystem.Barterables
{
	// Token: 0x02000419 RID: 1049
	public class MercenaryJoinKingdomBarterable : Barterable
	{
		// Token: 0x17000D22 RID: 3362
		// (get) Token: 0x06003E08 RID: 15880 RVA: 0x00128AAD File Offset: 0x00126CAD
		public override string StringID
		{
			get
			{
				return "mercenary_join_faction_barterable";
			}
		}

		// Token: 0x06003E09 RID: 15881 RVA: 0x00128AB4 File Offset: 0x00126CB4
		public MercenaryJoinKingdomBarterable(Hero owner, PartyBase ownerParty, Kingdom targetKingdom)
			: base(owner, ownerParty)
		{
			this._targetKingdom = targetKingdom;
		}

		// Token: 0x17000D23 RID: 3363
		// (get) Token: 0x06003E0A RID: 15882 RVA: 0x00128AC5 File Offset: 0x00126CC5
		public override TextObject Name
		{
			get
			{
				TextObject textObject = new TextObject("{=PaG0Blui}Become a mercenary for {TARGET_FACTION}", null);
				textObject.SetTextVariable("TARGET_FACTION", this._targetKingdom.Name);
				return textObject;
			}
		}

		// Token: 0x06003E0B RID: 15883 RVA: 0x00128AEC File Offset: 0x00126CEC
		public override int GetUnitValueForFaction(IFaction faction)
		{
			float num = 0f;
			if (this._targetKingdom == faction.MapFaction)
			{
				num += Campaign.Current.Models.DiplomacyModel.GetScoreOfKingdomToHireMercenary(this._targetKingdom, base.OriginalOwner.Clan);
			}
			else if (faction == base.OriginalOwner.Clan)
			{
				if (base.OriginalOwner.Clan.Kingdom != null)
				{
					num += Campaign.Current.Models.DiplomacyModel.GetScoreOfMercenaryToLeaveKingdom(base.OriginalOwner.Clan, base.OriginalOwner.Clan.Kingdom);
				}
				num += Campaign.Current.Models.DiplomacyModel.GetScoreOfMercenaryToJoinKingdom(base.OriginalOwner.Clan, this._targetKingdom);
			}
			return (int)num;
		}

		// Token: 0x06003E0C RID: 15884 RVA: 0x00128BB3 File Offset: 0x00126DB3
		public override void CheckBarterLink(Barterable linkedBarterable)
		{
		}

		// Token: 0x06003E0D RID: 15885 RVA: 0x00128BB5 File Offset: 0x00126DB5
		public override ImageIdentifier GetVisualIdentifier()
		{
			return null;
		}

		// Token: 0x06003E0E RID: 15886 RVA: 0x00128BB8 File Offset: 0x00126DB8
		public override string GetEncyclopediaLink()
		{
			return this._targetKingdom.EncyclopediaLink;
		}

		// Token: 0x06003E0F RID: 15887 RVA: 0x00128BC5 File Offset: 0x00126DC5
		public override void Apply()
		{
			ChangeKingdomAction.ApplyByJoinFactionAsMercenary(base.OriginalOwner.Clan, this._targetKingdom, Campaign.Current.Models.MinorFactionsModel.GetMercenaryAwardFactorToJoinKingdom(base.OriginalOwner.Clan, this._targetKingdom, false), true);
		}

		// Token: 0x06003E10 RID: 15888 RVA: 0x00128C04 File Offset: 0x00126E04
		internal static void AutoGeneratedStaticCollectObjectsMercenaryJoinKingdomBarterable(object o, List<object> collectedObjects)
		{
			((MercenaryJoinKingdomBarterable)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06003E11 RID: 15889 RVA: 0x00128C12 File Offset: 0x00126E12
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._targetKingdom);
		}

		// Token: 0x06003E12 RID: 15890 RVA: 0x00128C27 File Offset: 0x00126E27
		internal static object AutoGeneratedGetMemberValue_targetKingdom(object o)
		{
			return ((MercenaryJoinKingdomBarterable)o)._targetKingdom;
		}

		// Token: 0x0400129F RID: 4767
		[SaveableField(700)]
		private readonly Kingdom _targetKingdom;
	}
}
