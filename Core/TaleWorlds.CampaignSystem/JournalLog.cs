using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	public class JournalLog
	{
		internal static void AutoGeneratedStaticCollectObjectsJournalLog(object o, List<object> collectedObjects)
		{
			((JournalLog)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.LogTime, collectedObjects);
			collectedObjects.Add(this.LogText);
			collectedObjects.Add(this.TaskName);
		}

		internal static object AutoGeneratedGetMemberValueCurrentProgress(object o)
		{
			return ((JournalLog)o).CurrentProgress;
		}

		internal static object AutoGeneratedGetMemberValueLogTime(object o)
		{
			return ((JournalLog)o).LogTime;
		}

		internal static object AutoGeneratedGetMemberValueLogText(object o)
		{
			return ((JournalLog)o).LogText;
		}

		internal static object AutoGeneratedGetMemberValueTaskName(object o)
		{
			return ((JournalLog)o).TaskName;
		}

		internal static object AutoGeneratedGetMemberValueRange(object o)
		{
			return ((JournalLog)o).Range;
		}

		internal static object AutoGeneratedGetMemberValueType(object o)
		{
			return ((JournalLog)o).Type;
		}

		[SaveableProperty(3)]
		public int CurrentProgress { get; private set; }

		public JournalLog(CampaignTime logTime, TextObject logText, TextObject taskName = null, int currentProgress = 0, int range = 0, LogType type = LogType.Text)
		{
			this.LogTime = logTime;
			this.LogText = logText;
			this.TaskName = taskName;
			this.CurrentProgress = currentProgress;
			this.Range = range;
			this.Type = type;
		}

		public void UpdateCurrentProgress(int progress)
		{
			this.CurrentProgress = progress;
		}

		public bool HasBeenCompleted()
		{
			return this.CurrentProgress >= this.Range;
		}

		public TextObject GetTimeText()
		{
			int num = MathF.Ceiling(CampaignTime.Now.ToDays) - MathF.Ceiling(this.LogTime.ToDays);
			TextObject textObject;
			if (num != 0)
			{
				if (num != 1)
				{
					textObject = GameTexts.FindText("str_DAY_days_ago", null);
					textObject.SetTextVariable("DAY", num);
				}
				else
				{
					textObject = GameTexts.FindText("str_yesterday", null);
				}
			}
			else
			{
				textObject = GameTexts.FindText("str_today", null);
			}
			return textObject;
		}

		[SaveableField(0)]
		public readonly CampaignTime LogTime;

		[SaveableField(1)]
		public readonly TextObject LogText;

		[SaveableField(2)]
		public readonly TextObject TaskName;

		[SaveableField(4)]
		public readonly int Range;

		[SaveableField(5)]
		public readonly LogType Type;
	}
}
