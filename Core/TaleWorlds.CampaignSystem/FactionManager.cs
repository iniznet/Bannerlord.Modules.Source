using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x0200005C RID: 92
	public class FactionManager
	{
		// Token: 0x06000B0D RID: 2829 RVA: 0x0003A90C File Offset: 0x00038B0C
		internal static void AutoGeneratedStaticCollectObjectsFactionManager(object o, List<object> collectedObjects)
		{
			((FactionManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000B0E RID: 2830 RVA: 0x0003A91A File Offset: 0x00038B1A
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._stances);
		}

		// Token: 0x06000B0F RID: 2831 RVA: 0x0003A928 File Offset: 0x00038B28
		internal static object AutoGeneratedGetMemberValue_stances(object o)
		{
			return ((FactionManager)o)._stances;
		}

		// Token: 0x17000294 RID: 660
		// (get) Token: 0x06000B10 RID: 2832 RVA: 0x0003A935 File Offset: 0x00038B35
		public static FactionManager Instance
		{
			get
			{
				return Campaign.Current.FactionManager;
			}
		}

		// Token: 0x06000B11 RID: 2833 RVA: 0x0003A941 File Offset: 0x00038B41
		public FactionManager()
		{
			this._stances = new FactionManagerStancesData();
		}

		// Token: 0x06000B12 RID: 2834 RVA: 0x0003A954 File Offset: 0x00038B54
		internal void AfterLoad()
		{
			foreach (StanceLink stanceLink in this._stances.GetStanceLinks())
			{
				if (stanceLink.Faction1 != stanceLink.Faction2)
				{
					FactionManager.AddStanceToFaction(stanceLink.Faction1, stanceLink);
					FactionManager.AddStanceToFaction(stanceLink.Faction2, stanceLink);
				}
			}
		}

		// Token: 0x06000B13 RID: 2835 RVA: 0x0003A9CC File Offset: 0x00038BCC
		internal StanceLink GetStanceLinkInternal(IFaction faction1, IFaction faction2)
		{
			StanceLink stanceLink = this._stances.GetStance(faction1, faction2);
			if (stanceLink == null)
			{
				bool flag = (faction1.IsBanditFaction && !faction2.IsBanditFaction) || (!faction1.IsBanditFaction && faction2.IsBanditFaction);
				stanceLink = new StanceLink(flag ? StanceType.War : StanceType.Neutral, faction1, faction2, flag);
				this.AddStance(faction1, faction2, stanceLink);
			}
			return stanceLink;
		}

		// Token: 0x06000B14 RID: 2836 RVA: 0x0003AA29 File Offset: 0x00038C29
		private void AddStance(IFaction faction1, IFaction faction2, StanceLink stanceLink)
		{
			this._stances.AddStance(stanceLink);
			FactionManager.AddStanceToFaction(faction1, stanceLink);
			FactionManager.AddStanceToFaction(faction2, stanceLink);
		}

		// Token: 0x06000B15 RID: 2837 RVA: 0x0003AA45 File Offset: 0x00038C45
		private void RemoveStance(StanceLink stance)
		{
			this._stances.RemoveStance(stance);
			FactionManager.RemoveStanceFromFaction(stance.Faction1, stance);
			FactionManager.RemoveStanceFromFaction(stance.Faction2, stance);
		}

		// Token: 0x06000B16 RID: 2838 RVA: 0x0003AA6C File Offset: 0x00038C6C
		private static void AddStanceToFaction(IFaction faction1, StanceLink stanceLink)
		{
			Kingdom kingdom = faction1 as Kingdom;
			if (kingdom != null)
			{
				kingdom.AddStanceInternal(stanceLink);
				return;
			}
			(faction1 as Clan).AddStanceInternal(stanceLink);
		}

		// Token: 0x06000B17 RID: 2839 RVA: 0x0003AA98 File Offset: 0x00038C98
		private static void RemoveStanceFromFaction(IFaction faction1, StanceLink stanceLink)
		{
			Kingdom kingdom = faction1 as Kingdom;
			if (kingdom != null)
			{
				kingdom.RemoveStanceInternal(stanceLink);
				return;
			}
			(faction1 as Clan).RemoveStanceInternal(stanceLink);
		}

		// Token: 0x06000B18 RID: 2840 RVA: 0x0003AAC3 File Offset: 0x00038CC3
		private static StanceLink SetStance(IFaction faction1, IFaction faction2, StanceType stanceType)
		{
			StanceLink stanceLinkInternal = FactionManager.Instance.GetStanceLinkInternal(faction1, faction2);
			stanceLinkInternal.StanceType = stanceType;
			return stanceLinkInternal;
		}

		// Token: 0x06000B19 RID: 2841 RVA: 0x0003AAD8 File Offset: 0x00038CD8
		public static void DeclareAlliance(IFaction faction1, IFaction faction2)
		{
			if (faction1 != faction2 && !faction1.IsBanditFaction && !faction2.IsBanditFaction)
			{
				FactionManager.SetStance(faction1, faction2, StanceType.Neutral);
			}
		}

		// Token: 0x06000B1A RID: 2842 RVA: 0x0003AAF7 File Offset: 0x00038CF7
		public static void DeclareWar(IFaction faction1, IFaction faction2, bool isAtConstantWar = false)
		{
			if (faction1 != faction2 && !faction1.IsBanditFaction && !faction2.IsBanditFaction)
			{
				FactionManager.SetStance(faction1, faction2, StanceType.War).IsAtConstantWar = isAtConstantWar;
			}
		}

		// Token: 0x06000B1B RID: 2843 RVA: 0x0003AB1B File Offset: 0x00038D1B
		public static void SetNeutral(IFaction faction1, IFaction faction2)
		{
			if (faction1 != faction2 && !faction1.IsBanditFaction && !faction2.IsBanditFaction)
			{
				FactionManager.Instance.GetStanceLinkInternal(faction1, faction2).StanceType = StanceType.Neutral;
			}
		}

		// Token: 0x06000B1C RID: 2844 RVA: 0x0003AB43 File Offset: 0x00038D43
		public static bool IsAtWarAgainstFaction(IFaction faction1, IFaction faction2)
		{
			return faction1 != null && faction2 != null && faction1 != faction2 && FactionManager.Instance.GetStanceLinkInternal(faction1, faction2).IsAtWar;
		}

		// Token: 0x06000B1D RID: 2845 RVA: 0x0003AB64 File Offset: 0x00038D64
		public static bool IsAlliedWithFaction(IFaction faction1, IFaction faction2)
		{
			if (faction1 == null || faction2 == null)
			{
				return false;
			}
			if (faction1 == faction2)
			{
				return true;
			}
			StanceLink stanceLinkInternal = FactionManager.Instance.GetStanceLinkInternal(faction1, faction2);
			return stanceLinkInternal != null && stanceLinkInternal.IsAllied;
		}

		// Token: 0x06000B1E RID: 2846 RVA: 0x0003AB98 File Offset: 0x00038D98
		public static bool IsNeutralWithFaction(IFaction faction1, IFaction faction2)
		{
			if (faction1 == null || faction2 == null || faction1 == faction2)
			{
				return false;
			}
			StanceLink stanceLinkInternal = FactionManager.Instance.GetStanceLinkInternal(faction1, faction2);
			return (stanceLinkInternal != null || ((!faction1.IsBanditFaction || faction2.IsBanditFaction || faction2.IsOutlaw) && (!faction2.IsBanditFaction || faction1.IsBanditFaction || faction1.IsOutlaw))) && (stanceLinkInternal == null || stanceLinkInternal.IsNeutral);
		}

		// Token: 0x06000B1F RID: 2847 RVA: 0x0003AC00 File Offset: 0x00038E00
		internal void RemoveFactionsFromCampaignWars(IFaction faction1)
		{
			if (faction1.MapFaction != faction1)
			{
				return;
			}
			foreach (StanceLink stanceLink in faction1.Stances.ToArray<StanceLink>())
			{
				this.RemoveStance(stanceLink);
			}
		}

		// Token: 0x06000B20 RID: 2848 RVA: 0x0003AC3C File Offset: 0x00038E3C
		public static IEnumerable<IFaction> GetEnemyFactions(IFaction faction)
		{
			foreach (StanceLink stanceLink in faction.Stances)
			{
				if (stanceLink.IsAtWar)
				{
					IFaction faction2 = null;
					if (stanceLink.Faction1 == faction)
					{
						faction2 = stanceLink.Faction2;
					}
					else if (stanceLink.Faction2 == faction)
					{
						faction2 = stanceLink.Faction1;
					}
					if (faction2.IsMapFaction && !faction2.IsBanditFaction)
					{
						yield return faction2;
					}
				}
			}
			IEnumerator<StanceLink> enumerator = null;
			yield break;
			yield break;
		}

		// Token: 0x06000B21 RID: 2849 RVA: 0x0003AC4C File Offset: 0x00038E4C
		public static IEnumerable<Kingdom> GetEnemyKingdoms(Kingdom faction)
		{
			foreach (StanceLink stanceLink in faction.Stances)
			{
				if (stanceLink.IsAtWar)
				{
					IFaction faction2 = null;
					if (stanceLink.Faction1 == faction)
					{
						faction2 = stanceLink.Faction2;
					}
					else if (stanceLink.Faction2 == faction)
					{
						faction2 = stanceLink.Faction1;
					}
					if (faction2 != null && faction2.IsKingdomFaction)
					{
						yield return faction2 as Kingdom;
					}
				}
			}
			IEnumerator<StanceLink> enumerator = null;
			yield break;
			yield break;
		}

		// Token: 0x06000B22 RID: 2850 RVA: 0x0003AC5C File Offset: 0x00038E5C
		public static int GetRelationBetweenClans(Clan clan1, Clan clan2)
		{
			float num = 0f;
			float num2 = 1E-05f;
			if ((clan1.Lords.Count == 0 && clan1.IsBanditFaction && !clan2.IsBanditFaction) || (clan2.Lords.Count == 0 && clan2.IsBanditFaction && !clan1.IsBanditFaction))
			{
				return -10;
			}
			foreach (Hero hero in clan1.Lords)
			{
				if (hero.Age > (float)Campaign.Current.Models.AgeModel.HeroComesOfAge)
				{
					foreach (Hero hero2 in clan2.Lords)
					{
						if (hero2.Age > (float)Campaign.Current.Models.AgeModel.HeroComesOfAge)
						{
							float num3 = 0.1f;
							if (hero == clan1.Leader)
							{
								num3 += 0.2f;
							}
							else
							{
								Hero hero3 = hero;
								Hero leader = clan1.Leader;
								if (hero3 == ((leader != null) ? leader.Spouse : null))
								{
									num3 += 0.05f;
								}
							}
							if (hero2 == clan2.Leader)
							{
								num3 += 0.2f;
							}
							else
							{
								Hero hero4 = hero2;
								Hero leader2 = clan2.Leader;
								if (hero4 == ((leader2 != null) ? leader2.Spouse : null))
								{
									num3 += 0.05f;
								}
							}
							if (hero == clan1.Leader && hero2 == clan2.Leader)
							{
								num3 *= 20f;
							}
							int baseHeroRelation = hero.GetBaseHeroRelation(hero2);
							num += num3 * (float)baseHeroRelation;
							num2 += num3;
						}
					}
				}
			}
			return (int)(num / num2);
		}

		// Token: 0x0400035F RID: 863
		[SaveableField(20)]
		private FactionManagerStancesData _stances;
	}
}
