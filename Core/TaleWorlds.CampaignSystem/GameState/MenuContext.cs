using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.GameState
{
	public class MenuContext : MBObjectBase
	{
		internal static void AutoGeneratedStaticCollectObjectsMenuContext(object o, List<object> collectedObjects)
		{
			((MenuContext)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValue_currentState(object o)
		{
			return ((MenuContext)o)._currentState;
		}

		public GameMenu GameMenu { get; private set; }

		public IMenuContextHandler Handler { get; set; }

		public string CurrentBackgroundMeshName { get; private set; }

		public string CurrentAmbientSoundID { get; private set; }

		public string CurrentPanelSoundID { get; private set; }

		public void Refresh()
		{
			this._currentState = MenuContext.MenuContextState.RequiresCreation;
			this.HandleStates();
		}

		public void SwitchToMenu(string menuId)
		{
			Campaign.Current.GameMenuManager.SetNextMenu(menuId);
			this.HandleStates();
		}

		private void HandleStates()
		{
			if (this._currentState != MenuContext.MenuContextState.Finalized)
			{
				if (!string.IsNullOrEmpty(Campaign.Current.GameMenuManager.NextGameMenuId))
				{
					this._currentState = MenuContext.MenuContextState.RequiresCreation;
				}
				while (this._currentState == MenuContext.MenuContextState.RequiresCreation)
				{
					if (this.GameMenu != null)
					{
						this.GameMenu.PreInit(this);
					}
					if (Campaign.Current.GameMenuManager.NextGameMenuId != null)
					{
						this.GameMenu = Campaign.Current.GameMenuManager.NextMenu;
						Campaign.Current.GameMenuManager.SetNextMenu(null);
						MapState mapState = Game.Current.GameStateManager.LastOrDefault<MapState>();
						if (mapState != null)
						{
							mapState.GameMenuId = this.GameMenu.StringId;
						}
					}
					if (this.GameMenu.AutoSelectFirst)
					{
						Campaign.Current.GameMenuManager.RunConsequenceOfVirtualMenuOption(this, 0);
					}
					this.GameMenu.RunOnInit(Game.Current, this);
					if (string.IsNullOrEmpty(Campaign.Current.GameMenuManager.NextGameMenuId) && this._currentState != MenuContext.MenuContextState.Finalized)
					{
						this._currentState = MenuContext.MenuContextState.RequiresInitialization;
					}
				}
				if (this._currentState == MenuContext.MenuContextState.RequiresInitialization)
				{
					this._currentState = MenuContext.MenuContextState.None;
					if (this.Handler != null)
					{
						this.Handler.OnMenuCreate();
					}
					Campaign.Current.GameMenuCallbackManager.InitializeState(this.GameMenu.StringId, this);
					if (this.Handler != null)
					{
						this.Handler.OnMenuActivate();
					}
				}
			}
		}

		public void Destroy()
		{
			this._currentState = MenuContext.MenuContextState.Finalized;
			MapState mapState = Game.Current.GameStateManager.ActiveState as MapState;
			if (mapState != null)
			{
				mapState.GameMenuId = null;
			}
		}

		public void OnTick(float dt)
		{
			Campaign.Current.GameMenuManager.OnFrameTick(this, dt);
		}

		public void OnHourlyTick()
		{
			IMenuContextHandler handler = this.Handler;
			if (handler == null)
			{
				return;
			}
			handler.OnHourlyTick();
		}

		public object GetCurrentRepeatableObject()
		{
			return Campaign.Current.GameMenuManager.ObjectGetCurrentRepeatableObject(this);
		}

		public object GetSelectedObject()
		{
			return Campaign.Current.GameMenuManager.GetSelectedRepeatableObject(this);
		}

		public object GetSelectedRepeatableObject()
		{
			return Campaign.Current.GameMenuManager.GetSelectedRepeatableObject(this);
		}

		public void SetRepeatObjectList(IEnumerable<object> list)
		{
			Campaign.Current.GameMenuManager.SetRepeatObjectList(this, list);
		}

		public void OnConsequence(GameMenuOption gameMenuOption)
		{
			if (Campaign.Current == null)
			{
				return;
			}
			Campaign.Current.GameMenuCallbackManager.OnConsequence(this.GameMenu.StringId, gameMenuOption, this);
		}

		public void InvokeConsequence(int index)
		{
			if (Campaign.Current.CurrentMenuContext != this)
			{
				return;
			}
			Campaign.Current.GameMenuManager.RunConsequenceOfVirtualMenuOption(this, index);
		}

		public void CloseEvent()
		{
			if (Settlement.CurrentSettlement != null)
			{
				Campaign.Current.MapEventManager.FinalizePlayerMapEvent(null);
				Campaign.Current.autoEnterTown = Settlement.CurrentSettlement.Party;
				Game.Current.GameStateManager.PopState(0);
			}
		}

		public void SetBackgroundMeshName(string name)
		{
			this.CurrentBackgroundMeshName = name;
			IMenuContextHandler handler = this.Handler;
			if (handler == null)
			{
				return;
			}
			handler.OnBackgroundMeshNameSet(name);
		}

		public void SetPanelSound(string panelSoundID)
		{
			this.CurrentPanelSoundID = panelSoundID;
			IMenuContextHandler handler = this.Handler;
			if (handler == null)
			{
				return;
			}
			handler.OnPanelSoundIDSet(panelSoundID);
		}

		public void SetAmbientSound(string ambientSoundID)
		{
			this.CurrentAmbientSoundID = ambientSoundID;
			IMenuContextHandler handler = this.Handler;
			if (handler == null)
			{
				return;
			}
			handler.OnAmbientSoundIDSet(ambientSoundID);
		}

		public void OpenTownManagement()
		{
			IMenuContextHandler handler = this.Handler;
			if (handler == null)
			{
				return;
			}
			handler.OnOpenTownManagement();
		}

		public void OpenRecruitVolunteers()
		{
			IMenuContextHandler handler = this.Handler;
			if (handler == null)
			{
				return;
			}
			handler.OnOpenRecruitVolunteers();
		}

		public void OpenTournamentLeaderboards()
		{
			IMenuContextHandler handler = this.Handler;
			if (handler == null)
			{
				return;
			}
			handler.OnOpenTournamentLeaderboard();
		}

		public void OpenTroopSelection(TroopRoster fullRoster, TroopRoster initialSelections, Func<CharacterObject, bool> canChangeStatusOfTroop, Action<TroopRoster> onDone, int maxSelectableTroopCount, int minSelectableTroopCount = 1)
		{
			IMenuContextHandler handler = this.Handler;
			if (handler == null)
			{
				return;
			}
			handler.OnOpenTroopSelection(fullRoster, initialSelections, canChangeStatusOfTroop, onDone, maxSelectableTroopCount, minSelectableTroopCount);
		}

		[SaveableField(102)]
		private MenuContext.MenuContextState _currentState;

		internal enum MenuContextState
		{
			None,
			RequiresCreation,
			RequiresInitialization,
			Finalized
		}
	}
}
