using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Siege;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;
using TaleWorlds.SaveSystem.Load;

namespace TaleWorlds.CampaignSystem.Party
{
	public sealed class MobileParty : CampaignObjectBase, ILocatable<MobileParty>, IMapPoint, ITrackableCampaignObject, ITrackableBase, IMapEntity, IRandomOwner
	{
		internal static void AutoGeneratedStaticCollectObjectsMobileParty(object o, List<object> collectedObjects)
		{
			((MobileParty)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._currentSettlement);
			collectedObjects.Add(this._attachedTo);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._disorganizedUntilTime, collectedObjects);
			collectedObjects.Add(this._besiegerCamp);
			collectedObjects.Add(this._targetParty);
			collectedObjects.Add(this._targetSettlement);
			collectedObjects.Add(this._customHomeSettlement);
			collectedObjects.Add(this._army);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._ignoredUntilTime, collectedObjects);
			collectedObjects.Add(this._actualClan);
			collectedObjects.Add(this._partyComponent);
			collectedObjects.Add(this.CustomName);
			collectedObjects.Add(this.LastVisitedSettlement);
			collectedObjects.Add(this.Ai);
			collectedObjects.Add(this.Party);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.StationaryStartTime, collectedObjects);
			collectedObjects.Add(this.Scout);
			collectedObjects.Add(this.Engineer);
			collectedObjects.Add(this.Quartermaster);
			collectedObjects.Add(this.Surgeon);
		}

		internal static object AutoGeneratedGetMemberValueCustomName(object o)
		{
			return ((MobileParty)o).CustomName;
		}

		internal static object AutoGeneratedGetMemberValueLastVisitedSettlement(object o)
		{
			return ((MobileParty)o).LastVisitedSettlement;
		}

		internal static object AutoGeneratedGetMemberValueBearing(object o)
		{
			return ((MobileParty)o).Bearing;
		}

		internal static object AutoGeneratedGetMemberValueAggressiveness(object o)
		{
			return ((MobileParty)o).Aggressiveness;
		}

		internal static object AutoGeneratedGetMemberValueArmyPositionAdder(object o)
		{
			return ((MobileParty)o).ArmyPositionAdder;
		}

		internal static object AutoGeneratedGetMemberValueObjective(object o)
		{
			return ((MobileParty)o).Objective;
		}

		internal static object AutoGeneratedGetMemberValueAi(object o)
		{
			return ((MobileParty)o).Ai;
		}

		internal static object AutoGeneratedGetMemberValueParty(object o)
		{
			return ((MobileParty)o).Party;
		}

		internal static object AutoGeneratedGetMemberValueIsActive(object o)
		{
			return ((MobileParty)o).IsActive;
		}

		internal static object AutoGeneratedGetMemberValueShortTermBehavior(object o)
		{
			return ((MobileParty)o).ShortTermBehavior;
		}

		internal static object AutoGeneratedGetMemberValueIsPartyTradeActive(object o)
		{
			return ((MobileParty)o).IsPartyTradeActive;
		}

		internal static object AutoGeneratedGetMemberValuePartyTradeTaxGold(object o)
		{
			return ((MobileParty)o).PartyTradeTaxGold;
		}

		internal static object AutoGeneratedGetMemberValueStationaryStartTime(object o)
		{
			return ((MobileParty)o).StationaryStartTime;
		}

		internal static object AutoGeneratedGetMemberValueShouldJoinPlayerBattles(object o)
		{
			return ((MobileParty)o).ShouldJoinPlayerBattles;
		}

		internal static object AutoGeneratedGetMemberValueIsDisbanding(object o)
		{
			return ((MobileParty)o).IsDisbanding;
		}

		internal static object AutoGeneratedGetMemberValueScout(object o)
		{
			return ((MobileParty)o).Scout;
		}

		internal static object AutoGeneratedGetMemberValueEngineer(object o)
		{
			return ((MobileParty)o).Engineer;
		}

		internal static object AutoGeneratedGetMemberValueQuartermaster(object o)
		{
			return ((MobileParty)o).Quartermaster;
		}

		internal static object AutoGeneratedGetMemberValueSurgeon(object o)
		{
			return ((MobileParty)o).Surgeon;
		}

		internal static object AutoGeneratedGetMemberValueHasUnpaidWages(object o)
		{
			return ((MobileParty)o).HasUnpaidWages;
		}

		internal static object AutoGeneratedGetMemberValueAverageFleeTargetDirection(object o)
		{
			return ((MobileParty)o).AverageFleeTargetDirection;
		}

		internal static object AutoGeneratedGetMemberValue_currentSettlement(object o)
		{
			return ((MobileParty)o)._currentSettlement;
		}

		internal static object AutoGeneratedGetMemberValue_attachedTo(object o)
		{
			return ((MobileParty)o)._attachedTo;
		}

		internal static object AutoGeneratedGetMemberValue_eventPositionAdder(object o)
		{
			return ((MobileParty)o)._eventPositionAdder;
		}

		internal static object AutoGeneratedGetMemberValue_position2D(object o)
		{
			return ((MobileParty)o)._position2D;
		}

		internal static object AutoGeneratedGetMemberValue_isVisible(object o)
		{
			return ((MobileParty)o)._isVisible;
		}

		internal static object AutoGeneratedGetMemberValue_isInspected(object o)
		{
			return ((MobileParty)o)._isInspected;
		}

		internal static object AutoGeneratedGetMemberValue_disorganizedUntilTime(object o)
		{
			return ((MobileParty)o)._disorganizedUntilTime;
		}

		internal static object AutoGeneratedGetMemberValue_besiegerCamp(object o)
		{
			return ((MobileParty)o)._besiegerCamp;
		}

		internal static object AutoGeneratedGetMemberValue_targetParty(object o)
		{
			return ((MobileParty)o)._targetParty;
		}

		internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
		{
			return ((MobileParty)o)._targetSettlement;
		}

		internal static object AutoGeneratedGetMemberValue_targetPosition(object o)
		{
			return ((MobileParty)o)._targetPosition;
		}

		internal static object AutoGeneratedGetMemberValue_customHomeSettlement(object o)
		{
			return ((MobileParty)o)._customHomeSettlement;
		}

		internal static object AutoGeneratedGetMemberValue_army(object o)
		{
			return ((MobileParty)o)._army;
		}

		internal static object AutoGeneratedGetMemberValue_isCurrentlyUsedByAQuest(object o)
		{
			return ((MobileParty)o)._isCurrentlyUsedByAQuest;
		}

		internal static object AutoGeneratedGetMemberValue_partyTradeGold(object o)
		{
			return ((MobileParty)o)._partyTradeGold;
		}

		internal static object AutoGeneratedGetMemberValue_ignoredUntilTime(object o)
		{
			return ((MobileParty)o)._ignoredUntilTime;
		}

		internal static object AutoGeneratedGetMemberValue_actualClan(object o)
		{
			return ((MobileParty)o)._actualClan;
		}

		internal static object AutoGeneratedGetMemberValue_moraleDueToEvents(object o)
		{
			return ((MobileParty)o)._moraleDueToEvents;
		}

		internal static object AutoGeneratedGetMemberValue_partyComponent(object o)
		{
			return ((MobileParty)o)._partyComponent;
		}

		public static MobileParty MainParty
		{
			get
			{
				return Campaign.Current.MainParty;
			}
		}

		public static MBReadOnlyList<MobileParty> All
		{
			get
			{
				return Campaign.Current.MobileParties;
			}
		}

		public static MBReadOnlyList<MobileParty> AllCaravanParties
		{
			get
			{
				return Campaign.Current.CaravanParties;
			}
		}

		public static MBReadOnlyList<MobileParty> AllBanditParties
		{
			get
			{
				return Campaign.Current.BanditParties;
			}
		}

		public static MBReadOnlyList<MobileParty> AllLordParties
		{
			get
			{
				return Campaign.Current.LordParties;
			}
		}

		public static MBReadOnlyList<MobileParty> AllGarrisonParties
		{
			get
			{
				return Campaign.Current.GarrisonParties;
			}
		}

		public static MBReadOnlyList<MobileParty> AllMilitiaParties
		{
			get
			{
				return Campaign.Current.MilitiaParties;
			}
		}

		public static MBReadOnlyList<MobileParty> AllVillagerParties
		{
			get
			{
				return Campaign.Current.VillagerParties;
			}
		}

		public static MBReadOnlyList<MobileParty> AllCustomParties
		{
			get
			{
				return Campaign.Current.CustomParties;
			}
		}

		public static MBReadOnlyList<MobileParty> AllPartiesWithoutPartyComponent
		{
			get
			{
				return Campaign.Current.PartiesWithoutPartyComponent;
			}
		}

		public static int Count
		{
			get
			{
				return Campaign.Current.MobileParties.Count;
			}
		}

		public static MobileParty ConversationParty
		{
			get
			{
				return Campaign.Current.ConversationManager.ConversationParty;
			}
		}

		[SaveableProperty(1021)]
		private TextObject CustomName { get; set; }

		public TextObject Name
		{
			get
			{
				if (!TextObject.IsNullOrEmpty(this.CustomName))
				{
					return this.CustomName;
				}
				if (this._partyComponent == null)
				{
					return new TextObject("{=!}unnamedMobileParty", null);
				}
				return this._partyComponent.Name;
			}
		}

		[SaveableProperty(1002)]
		public Settlement LastVisitedSettlement { get; private set; }

		[SaveableProperty(1004)]
		public Vec2 Bearing { get; internal set; }

		public MBReadOnlyList<MobileParty> AttachedParties
		{
			get
			{
				return this._attachedParties;
			}
		}

		[SaveableProperty(1009)]
		public float Aggressiveness { get; set; }

		public int PaymentLimit
		{
			get
			{
				PartyComponent partyComponent = this._partyComponent;
				if (partyComponent == null)
				{
					return Campaign.Current.Models.PartyWageModel.MaxWage;
				}
				return partyComponent.WagePaymentLimit;
			}
		}

		public bool HasLimitedWage()
		{
			return this.PaymentLimit != Campaign.Current.Models.PartyWageModel.MaxWage;
		}

		public bool CanPayMoreWage()
		{
			return !this.HasLimitedWage() || this.PaymentLimit > this.TotalWage;
		}

		public bool IsWageLimitExceeded()
		{
			return this.HasLimitedWage() && this.PaymentLimit < this.TotalWage;
		}

		public void SetWagePaymentLimit(int newLimit)
		{
			PartyComponent partyComponent = this.PartyComponent;
			if (partyComponent == null)
			{
				return;
			}
			partyComponent.SetWagePaymentLimit(newLimit);
		}

		[SaveableProperty(1005)]
		public Vec2 ArmyPositionAdder { get; private set; }

		public Vec2 AiBehaviorTarget
		{
			get
			{
				return this.Ai.BehaviorTarget;
			}
		}

		[SaveableProperty(1090)]
		public MobileParty.PartyObjective Objective { get; private set; }

		[CachedData]
		MobileParty ILocatable<MobileParty>.NextLocatable { get; set; }

		[SaveableProperty(1019)]
		public MobilePartyAi Ai { get; private set; }

		[SaveableProperty(1020)]
		public PartyBase Party { get; private set; }

		[SaveableProperty(1023)]
		public bool IsActive { get; set; }

		public CampaignTime DisorganizedUntilTime
		{
			get
			{
				return this._disorganizedUntilTime;
			}
		}

		[CachedData]
		public PartyThinkParams ThinkParamsCache { get; private set; }

		public float Speed
		{
			get
			{
				return this.CalculateSpeed();
			}
		}

		public ExplainedNumber SpeedExplained
		{
			get
			{
				this._lastCalculatedBaseSpeedExplained = Campaign.Current.Models.PartySpeedCalculatingModel.CalculateBaseSpeed(this, true, 0, 0);
				ExplainedNumber explainedNumber = Campaign.Current.Models.PartySpeedCalculatingModel.CalculateFinalSpeed(this, this._lastCalculatedBaseSpeedExplained);
				this._lastCalculatedSpeed = explainedNumber.ResultNumber;
				return explainedNumber;
			}
		}

		public MobileParty ShortTermTargetParty
		{
			get
			{
				PartyBase aiBehaviorPartyBase = this.Ai.AiBehaviorPartyBase;
				if (aiBehaviorPartyBase == null)
				{
					return null;
				}
				return aiBehaviorPartyBase.MobileParty;
			}
		}

		public Settlement ShortTermTargetSettlement
		{
			get
			{
				PartyBase aiBehaviorPartyBase = this.Ai.AiBehaviorPartyBase;
				if (aiBehaviorPartyBase == null)
				{
					return null;
				}
				return aiBehaviorPartyBase.Settlement;
			}
		}

		public bool IsDisorganized
		{
			get
			{
				return this._isDisorganized;
			}
		}

		public bool IsCurrentlyUsedByAQuest
		{
			get
			{
				return this._isCurrentlyUsedByAQuest;
			}
		}

		[SaveableProperty(1050)]
		public AiBehavior ShortTermBehavior { get; internal set; }

		[SaveableProperty(1958)]
		public bool IsPartyTradeActive { get; private set; }

		public int PartyTradeGold
		{
			get
			{
				return this._partyTradeGold;
			}
			set
			{
				this._partyTradeGold = MathF.Max(value, 0);
			}
		}

		[SaveableProperty(1957)]
		public int PartyTradeTaxGold { get; private set; }

		[SaveableProperty(1960)]
		public CampaignTime StationaryStartTime { get; private set; }

		[CachedData]
		public int VersionNo { get; private set; }

		[SaveableProperty(1080)]
		public bool ShouldJoinPlayerBattles { get; set; }

		[SaveableProperty(1081)]
		public bool IsDisbanding { get; set; }

		public int RandomValue
		{
			get
			{
				return this.Party.RandomValue;
			}
		}

		public Settlement CurrentSettlement
		{
			get
			{
				return this._currentSettlement;
			}
			set
			{
				if (value != this._currentSettlement)
				{
					if (this._currentSettlement != null)
					{
						this._currentSettlement.RemoveMobileParty(this);
					}
					this._currentSettlement = value;
					if (this._currentSettlement != null)
					{
						this._currentSettlement.AddMobileParty(this);
						if (this._currentSettlement.IsFortification)
						{
							this.Position2D = this._currentSettlement.GatePosition;
						}
						this.LastVisitedSettlement = value;
					}
					foreach (MobileParty mobileParty in this._attachedParties)
					{
						mobileParty.CurrentSettlement = value;
					}
					if (this._currentSettlement != null && this._currentSettlement.IsFortification)
					{
						this.ArmyPositionAdder = Vec2.Zero;
						this.ErrorPosition = Vec2.Zero;
						this.Bearing = Vec2.Zero;
						this.Party.AverageBearingRotation = 0f;
						foreach (MobileParty mobileParty2 in this._currentSettlement.Parties)
						{
							mobileParty2.Party.SetVisualAsDirty();
						}
					}
					this.Party.SetVisualAsDirty();
				}
			}
		}

		public Settlement HomeSettlement
		{
			get
			{
				Settlement settlement;
				if ((settlement = this._customHomeSettlement) == null)
				{
					PartyComponent partyComponent = this._partyComponent;
					if (partyComponent == null)
					{
						return null;
					}
					settlement = partyComponent.HomeSettlement;
				}
				return settlement;
			}
		}

		public void SetCustomHomeSettlement(Settlement customHomeSettlement)
		{
			this._customHomeSettlement = customHomeSettlement;
		}

		public MobileParty AttachedTo
		{
			get
			{
				return this._attachedTo;
			}
			set
			{
				if (this._attachedTo != value)
				{
					this.SetAttachedToInternal(value);
				}
			}
		}

		private void SetAttachedToInternal(MobileParty value)
		{
			if (this._attachedTo != null)
			{
				this._attachedTo.RemoveAttachedPartyInternal(this);
				if (this.Party.MapEventSide != null)
				{
					this.Party.MapEventSide.HandleMapEventEndForPartyInternal(this.Party);
					this.Party.MapEventSide = null;
				}
				if (this.BesiegerCamp != null)
				{
					this.BesiegerCamp = null;
				}
				this.OnAttachedToRemoved();
			}
			this._attachedTo = value;
			if (this._attachedTo != null)
			{
				this._attachedTo.AddAttachedPartyInternal(this);
				this.Party.MapEventSide = this._attachedTo.Party.MapEventSide;
				this.BesiegerCamp = this._attachedTo.BesiegerCamp;
				this.CurrentSettlement = this._attachedTo.CurrentSettlement;
			}
			this.Party.SetVisualAsDirty();
		}

		private void AddAttachedPartyInternal(MobileParty mobileParty)
		{
			if (this._attachedParties == null)
			{
				this._attachedParties = new MBList<MobileParty>();
			}
			this._attachedParties.Add(mobileParty);
			if (CampaignEventDispatcher.Instance != null)
			{
				CampaignEventDispatcher.Instance.OnPartyAttachedAnotherParty(mobileParty);
			}
		}

		private void RemoveAttachedPartyInternal(MobileParty mobileParty)
		{
			this._attachedParties.Remove(mobileParty);
		}

		private void OnAttachedToRemoved()
		{
			this.ErrorPosition += this.ArmyPositionAdder;
			this.ArmyPositionAdder = Vec2.Zero;
			if (!this.IsVisible)
			{
				this.ErrorPosition = Vec2.Zero;
			}
			if (this.CurrentSettlement != null)
			{
				this.Ai.SetMoveGoToSettlement(this.CurrentSettlement);
				return;
			}
			this.Ai.SetMoveModeHold();
		}

		public Army Army
		{
			get
			{
				return this._army;
			}
			set
			{
				if (this._army != value)
				{
					this.UpdateVersionNo();
					if (this._army != null)
					{
						this._army.OnRemovePartyInternal(this);
					}
					this._army = value;
					if (value == null)
					{
						if (this == MobileParty.MainParty && Game.Current.GameStateManager.ActiveState is MapState)
						{
							((MapState)Game.Current.GameStateManager.ActiveState).OnLeaveArmy();
							return;
						}
					}
					else
					{
						this._army.OnAddPartyInternal(this);
						this.Ai.ResetNumberOfRecentFleeing();
					}
				}
			}
		}

		public BesiegerCamp BesiegerCamp
		{
			get
			{
				return this._besiegerCamp;
			}
			set
			{
				if (this._besiegerCamp != value && !this._besiegerCampResetStarted)
				{
					if (this._besiegerCamp != null)
					{
						this.OnPartyLeftSiegeInternal();
					}
					this._besiegerCamp = value;
					if (this._besiegerCamp != null)
					{
						this.OnPartyJoinedSiegeInternal();
					}
					foreach (MobileParty mobileParty in this._attachedParties)
					{
						mobileParty.BesiegerCamp = value;
					}
					this.Party.SetVisualAsDirty();
				}
			}
		}

		internal void ConsiderMapEventsAndSiegesInternal(IFaction factionToConsiderAgainst)
		{
			if (this.Army != null && this.Army.Kingdom != this.MapFaction)
			{
				this.Army = null;
			}
			if (this.CurrentSettlement != null)
			{
				IFaction mapFaction = this.CurrentSettlement.MapFaction;
				if ((mapFaction != null && mapFaction.IsAtWarWith(this.MapFaction) && this.DefaultBehavior == AiBehavior.RaidSettlement) || (this.IsMainParty && PlayerEncounter.Current != null && (PlayerEncounter.Current.ForceRaid || PlayerEncounter.Current.ForceSupplies || PlayerEncounter.Current.ForceVolunteers)))
				{
					return;
				}
			}
			if (this.Party.MapEventSide != null && !this.Party.MapEvent.IsFinalized)
			{
				if (!this.MapEvent.CanPartyJoinBattle(this.Party, this.Party.MapEventSide.MissionSide))
				{
					if (this.Party == PartyBase.MainParty && PlayerEncounter.Current != null)
					{
						PlayerEncounter.Current.SetPlayerEncounterInterruptedByPeace();
					}
					this.Party.MapEventSide = null;
					this.Ai.SetMoveModeHold();
				}
				if (this.Party == PartyBase.MainParty && PlayerEncounter.Current != null && PlayerEncounter.Battle != null && !PlayerEncounter.EncounteredParty.MapFaction.IsAtWarWith(MobileParty.MainParty.MapFaction) && PlayerEncounter.Current.IsPlayerEncounterInterruptedByPeace && Game.Current.GameStateManager.ActiveState is MapState)
				{
					PlayerEncounter.Finish(true);
				}
			}
			BattleSideEnum battleSideEnum = ((PlayerEncounter.Battle != null) ? PlayerEncounter.Battle.PlayerSide : BattleSideEnum.None);
			bool flag = PlayerEncounter.EncounterSettlement != null && PlayerEncounter.EncounterSettlement.SiegeEvent != null && PlayerEncounter.EncounterSettlement.SiegeEvent.IsPartyInvolved(this.Party);
			if (this.BesiegerCamp != null || flag)
			{
				BesiegerCamp besiegerCamp = this.BesiegerCamp;
				Settlement settlement = ((besiegerCamp != null) ? besiegerCamp.SiegeEvent.BesiegedSettlement : null) ?? PlayerEncounter.EncounterSettlement;
				BesiegerCamp besiegerCamp2 = this.BesiegerCamp;
				MobileParty mobileParty;
				if ((mobileParty = ((besiegerCamp2 != null) ? besiegerCamp2.LeaderParty : null)) == null)
				{
					Settlement encounterSettlement = PlayerEncounter.EncounterSettlement;
					mobileParty = ((encounterSettlement != null) ? encounterSettlement.SiegeEvent.BesiegerCamp.LeaderParty : null);
				}
				MobileParty mobileParty2 = mobileParty;
				IFaction mapFaction2 = settlement.MapFaction;
				IFaction faction = ((mobileParty2 != null) ? mobileParty2.MapFaction : null);
				if (mapFaction2 == null || (!mapFaction2.IsAtWarWith(this.MapFaction) && mapFaction2 == factionToConsiderAgainst))
				{
					if (this.Party == PartyBase.MainParty && battleSideEnum == BattleSideEnum.None)
					{
						GameMenu.ActivateGameMenu("hostile_action_end_by_peace");
					}
					else if (PlayerEncounter.Current != null && (PlayerEncounter.EncounteredParty == this.Party || (PlayerEncounter.EncounterSettlement != null && PlayerEncounter.EncounterSettlement.SiegeEvent != null && PlayerEncounter.EncounterSettlement.SiegeEvent == this.SiegeEvent)) && mobileParty2 != null && mobileParty2 == this)
					{
						PlayerEncounter.Current.SetPlayerEncounterInterruptedByPeace();
					}
					if (this.Army == null || this.Army.LeaderParty == this)
					{
						this.BesiegerCamp = null;
						this.Ai.SetMoveModeHold();
						if (this.Party.MapEventSide != null && !this.Party.MapEvent.IsFieldBattle && !this.Party.MapEvent.IsSiegeAssault)
						{
							this.Party.MapEvent.FinishSiegeEventKeepBattle();
						}
					}
				}
				else if (faction == null || (faction.IsAtWarWith(this.MapFaction) && mapFaction2 == factionToConsiderAgainst))
				{
					this.BesiegerCamp = null;
					this.Ai.SetMoveModeHold();
					if (this.Party.MapEventSide != null)
					{
						this.Party.MapEvent.FinishSiegeEventKeepBattle();
					}
				}
				else if (mapFaction2 != null && faction != null && this.MapFaction != mapFaction2 && this.MapFaction != faction && PlayerEncounter.EncounterSettlement != null && PlayerEncounter.EncounterSettlement.SiegeEvent != null && !PartyBase.MainParty.MapFaction.IsAtWarWith(PlayerEncounter.EncounterSettlement.SiegeEvent.BesiegerCamp.LeaderParty.MapFaction))
				{
					PlayerEncounter.Current.SetPlayerEncounterInterruptedByPeace();
				}
			}
			if (this.CurrentSettlement != null)
			{
				IFaction mapFaction3 = this.CurrentSettlement.MapFaction;
				if (mapFaction3 != null && mapFaction3 == factionToConsiderAgainst && mapFaction3.IsAtWarWith(this.MapFaction))
				{
					if (this.IsMainParty)
					{
						if (!GameStateManager.Current.ActiveState.IsMission && this.CurrentSettlement.IsFortification)
						{
							GameMenu.SwitchToMenu("fortification_crime_rating");
						}
					}
					else if (this.Army == null)
					{
						Settlement currentSettlement = this.CurrentSettlement;
						LeaveSettlementAction.ApplyForParty(this);
						SetPartyAiAction.GetActionForPatrollingAroundSettlement(this, currentSettlement);
					}
					else if (this.Army.LeaderParty == this)
					{
						if (!this.Army.Parties.Contains(MobileParty.MainParty))
						{
							Settlement currentSettlement2 = this.CurrentSettlement;
							LeaveSettlementAction.ApplyForParty(this);
							SetPartyAiAction.GetActionForPatrollingAroundSettlement(this, currentSettlement2);
						}
						else
						{
							GameMenu.SwitchToMenu("army_left_settlement_due_to_war_declaration");
						}
					}
				}
			}
			if (this.Party == PartyBase.MainParty && PlayerEncounter.Current != null)
			{
				if (PlayerEncounter.EncounteredBattle != null && !PlayerEncounter.EncounteredBattle.IsFinalized)
				{
					MapEvent encounteredBattle = PlayerEncounter.EncounteredBattle;
					if (encounteredBattle.PlayerSide != BattleSideEnum.None)
					{
						if (!encounteredBattle.GetLeaderParty(encounteredBattle.PlayerSide.GetOppositeSide()).MapFaction.IsAtWarWith(MobileParty.MainParty.MapFaction))
						{
							PlayerEncounter.Current.SetPlayerEncounterInterruptedByPeace();
						}
					}
					else if (!encounteredBattle.InvolvedParties.Any((PartyBase x) => x.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction)))
					{
						PlayerEncounter.Current.SetPlayerEncounterInterruptedByPeace();
					}
				}
				else if (PlayerEncounter.EncounterSettlement != null && PlayerEncounter.EncounterSettlement.IsUnderSiege && !PlayerEncounter.EncounterSettlement.SiegeEvent.BesiegerCamp.LeaderParty.MapFaction.IsAtWarWith(MobileParty.MainParty.MapFaction) && (PlayerEncounter.PlayerIsDefender || (PlayerEncounter.PlayerIsAttacker && MobileParty.MainParty.SiegeEvent != null && !PlayerEncounter.Current.IsJoinedBattle)))
				{
					PlayerEncounter.Current.SetPlayerEncounterInterruptedByPeace();
				}
				if (PlayerEncounter.Current.IsPlayerEncounterInterruptedByPeace)
				{
					if (Game.Current.GameStateManager.ActiveState is MapState)
					{
						PlayerEncounter.Finish(true);
						return;
					}
					GameMenu.ActivateGameMenu("hostile_action_end_by_peace");
				}
			}
		}

		public AiBehavior DefaultBehavior
		{
			get
			{
				return this.Ai.DefaultBehavior;
			}
		}

		public Settlement TargetSettlement
		{
			get
			{
				return this._targetSettlement;
			}
			internal set
			{
				if (value != this._targetSettlement)
				{
					this._targetSettlement = value;
					this.Ai.DefaultBehaviorNeedsUpdate = true;
				}
			}
		}

		public Vec2 TargetPosition
		{
			get
			{
				return this._targetPosition;
			}
			internal set
			{
				if (this._targetPosition != value)
				{
					this._targetPosition = value;
					this.Ai.DefaultBehaviorNeedsUpdate = true;
				}
			}
		}

		public MobileParty TargetParty
		{
			get
			{
				return this._targetParty;
			}
			internal set
			{
				if (value != this._targetParty)
				{
					this._targetParty = value;
					this.Ai.DefaultBehaviorNeedsUpdate = true;
				}
			}
		}

		public MobileParty()
		{
			this._isVisible = false;
			this.IsActive = true;
			this._isCurrentlyUsedByAQuest = false;
			this.Party = new PartyBase(this);
			this.InitMembers();
			this.InitCached();
			this.Initialize();
		}

		private void InitMembers()
		{
			if (this._attachedParties == null)
			{
				this._attachedParties = new MBList<MobileParty>();
			}
		}

		public Hero LeaderHero
		{
			get
			{
				PartyComponent partyComponent = this.PartyComponent;
				if (partyComponent == null)
				{
					return null;
				}
				return partyComponent.Leader;
			}
		}

		[SaveableProperty(1070)]
		private Hero Scout { get; set; }

		[SaveableProperty(1072)]
		private Hero Engineer { get; set; }

		[SaveableProperty(1071)]
		private Hero Quartermaster { get; set; }

		[SaveableProperty(1073)]
		private Hero Surgeon { get; set; }

		public Hero Owner
		{
			get
			{
				PartyComponent partyComponent = this._partyComponent;
				if (partyComponent == null)
				{
					return null;
				}
				return partyComponent.PartyOwner;
			}
		}

		public Hero EffectiveScout
		{
			get
			{
				if (this.Scout == null || this.Scout.PartyBelongedTo != this)
				{
					return this.LeaderHero;
				}
				return this.Scout;
			}
		}

		public Hero EffectiveQuartermaster
		{
			get
			{
				if (this.Quartermaster == null || this.Quartermaster.PartyBelongedTo != this)
				{
					return this.LeaderHero;
				}
				return this.Quartermaster;
			}
		}

		public Hero EffectiveEngineer
		{
			get
			{
				if (this.Engineer == null || this.Engineer.PartyBelongedTo != this)
				{
					return this.LeaderHero;
				}
				return this.Engineer;
			}
		}

		public Hero EffectiveSurgeon
		{
			get
			{
				if (this.Surgeon == null || this.Surgeon.PartyBelongedTo != this)
				{
					return this.LeaderHero;
				}
				return this.Surgeon;
			}
		}

		public void SetPartyScout(Hero hero)
		{
			this.RemoveHeroPerkRole(hero);
			this.Scout = hero;
		}

		public void SetPartyQuartermaster(Hero hero)
		{
			this.RemoveHeroPerkRole(hero);
			this.Quartermaster = hero;
		}

		public void SetPartyEngineer(Hero hero)
		{
			this.RemoveHeroPerkRole(hero);
			this.Engineer = hero;
		}

		public void SetPartySurgeon(Hero hero)
		{
			this.RemoveHeroPerkRole(hero);
			this.Surgeon = hero;
		}

		private void InitializeMobilePartyWithPartyTemplate(PartyTemplateObject pt, Vec2 position, int troopNumberLimit)
		{
			if (troopNumberLimit != 0)
			{
				this.FillPartyStacks(pt, troopNumberLimit);
			}
			this.CreateFigure(position, 0f);
			this.Ai.SetMoveModeHold();
		}

		public void InitializeMobilePartyAroundPosition(TroopRoster memberRoster, TroopRoster prisonerRoster, Vec2 position, float spawnRadius, float minSpawnRadius = 0f)
		{
			position = MobilePartyHelper.FindReachablePointAroundPosition(position, spawnRadius, minSpawnRadius);
			this.InitializeMobilePartyWithRosterInternal(memberRoster, prisonerRoster, position);
		}

		public override void Initialize()
		{
			base.Initialize();
			this.Aggressiveness = 1f;
			this.Ai = new MobilePartyAi(this);
			CampaignEventDispatcher.Instance.OnPartyVisibilityChanged(this.Party);
		}

		public void InitializeMobilePartyAtPosition(TroopRoster memberRoster, TroopRoster prisonerRoster, Vec2 position)
		{
			this.InitializeMobilePartyWithRosterInternal(memberRoster, prisonerRoster, position);
		}

		public void InitializeMobilePartyAtPosition(PartyTemplateObject pt, Vec2 position, int troopNumberLimit = -1)
		{
			this.InitializeMobilePartyWithPartyTemplate(pt, position, troopNumberLimit);
		}

		public void InitializeMobilePartyAroundPosition(PartyTemplateObject pt, Vec2 position, float spawnRadius, float minSpawnRadius = 0f, int troopNumberLimit = -1)
		{
			position = MobilePartyHelper.FindReachablePointAroundPosition(position, spawnRadius, minSpawnRadius);
			this.InitializeMobilePartyWithPartyTemplate(pt, position, troopNumberLimit);
		}

		private void InitializeMobilePartyWithRosterInternal(TroopRoster memberRoster, TroopRoster prisonerRoster, Vec2 position)
		{
			this.MemberRoster.Add(memberRoster);
			this.PrisonRoster.Add(prisonerRoster);
			this.CreateFigure(position, 0f);
			this.Ai.SetMoveModeHold();
		}

		public Clan ActualClan
		{
			get
			{
				return this._actualClan;
			}
			set
			{
				if (this._actualClan != value)
				{
					WarPartyComponent warPartyComponent;
					if (this._actualClan != null && value != null && (warPartyComponent = this.PartyComponent as WarPartyComponent) != null)
					{
						warPartyComponent.OnClanChange(this._actualClan, value);
					}
					this._actualClan = value;
				}
			}
		}

		internal void StartUp()
		{
			this.Ai.StartUp();
		}

		[LateLoadInitializationCallback]
		private void OnLateLoad(MetaData metaData, ObjectLoadData objectLoadData)
		{
			if (MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.1.0", 24202))
			{
				PartyBase partyBase = (PartyBase)objectLoadData.GetMemberValueBySaveId(1052);
				IMapEntity mapEntity = null;
				if (partyBase != null)
				{
					if (partyBase.IsSettlement)
					{
						mapEntity = partyBase.Settlement;
					}
					else if (partyBase.IsMobile)
					{
						mapEntity = partyBase.MobileParty;
					}
				}
				object memberValueBySaveId = objectLoadData.GetMemberValueBySaveId(1036);
				object memberValueBySaveId2 = objectLoadData.GetMemberValueBySaveId(1037);
				object memberValueBySaveId3 = objectLoadData.GetMemberValueBySaveId(1064);
				object memberValueBySaveId4 = objectLoadData.GetMemberValueBySaveId(1065);
				object memberValueBySaveId5 = objectLoadData.GetMemberValueBySaveId(1047);
				object memberValueBySaveId6 = objectLoadData.GetMemberValueBySaveId(1051);
				object memberValueBySaveId7 = objectLoadData.GetMemberValueBySaveId(1038);
				object memberValueBySaveId8 = objectLoadData.GetMemberValueBySaveId(1039);
				object memberValueBySaveId9 = objectLoadData.GetMemberValueBySaveId(1055);
				object memberValueBySaveId10 = objectLoadData.GetMemberValueBySaveId(1054);
				object memberValueBySaveId11 = objectLoadData.GetMemberValueBySaveId(1062);
				object memberValueBySaveId12 = objectLoadData.GetMemberValueBySaveId(1061);
				object fieldValueBySaveId = objectLoadData.GetFieldValueBySaveId(1070);
				object memberValueBySaveId13 = objectLoadData.GetMemberValueBySaveId(1022);
				object obj = mapEntity ?? objectLoadData.GetMemberValueBySaveId(1056);
				object memberValueBySaveId14 = objectLoadData.GetMemberValueBySaveId(1074);
				if (memberValueBySaveId != null)
				{
					this.Ai.InitializeForOldSaves((float)memberValueBySaveId, (float)memberValueBySaveId2, (CampaignTime)memberValueBySaveId3, (int)memberValueBySaveId4, (AiBehavior)memberValueBySaveId5, (Vec2)memberValueBySaveId6, (bool)memberValueBySaveId7, (bool)memberValueBySaveId8, (MoveModeType)memberValueBySaveId9, (MobileParty)memberValueBySaveId10, (Vec2)memberValueBySaveId11, (Vec2)memberValueBySaveId12, (Vec2)fieldValueBySaveId, (Vec2)memberValueBySaveId13, (IMapEntity)obj, ((CampaignTime?)memberValueBySaveId14) ?? CampaignTime.Never);
				}
				this.UpdatePartyComponentFlags();
				if (this.IsGarrison || this.IsLordParty)
				{
					object memberValueBySaveId15 = objectLoadData.GetMemberValueBySaveId(1010);
					if (memberValueBySaveId15 != null)
					{
						this.SetWagePaymentLimit((int)memberValueBySaveId15);
					}
				}
			}
		}

		public float RecentEventsMorale
		{
			get
			{
				return this._moraleDueToEvents;
			}
			set
			{
				this._moraleDueToEvents = value;
				if (this._moraleDueToEvents < -50f)
				{
					this._moraleDueToEvents = -50f;
					return;
				}
				if (this._moraleDueToEvents > 50f)
				{
					this._moraleDueToEvents = 50f;
				}
			}
		}

		public override string ToString()
		{
			return base.StringId + ":" + this.Party.Index;
		}

		public float Morale
		{
			get
			{
				float resultNumber = Campaign.Current.Models.PartyMoraleModel.GetEffectivePartyMorale(this, false).ResultNumber;
				return (resultNumber < 0f) ? 0f : ((resultNumber > 100f) ? 100f : resultNumber);
			}
		}

		TextObject ITrackableBase.GetName()
		{
			return this.Name;
		}

		public ExplainedNumber MoraleExplained
		{
			get
			{
				return Campaign.Current.Models.PartyMoraleModel.GetEffectivePartyMorale(this, true);
			}
		}

		public void ValidateSpeed()
		{
			this.CalculateSpeed();
		}

		public void ChangePartyLeader(Hero newLeader)
		{
			if (newLeader == null || !this.MemberRoster.Contains(newLeader.CharacterObject))
			{
				Debug.FailedAssert(string.Concat(new object[]
				{
					(newLeader != null) ? newLeader.Name : null,
					" is not a member of ",
					this.Name,
					"!\nParty leader did not change."
				}), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Party\\MobileParty.cs", "ChangePartyLeader", 1030);
				return;
			}
			if (this.IsLordParty)
			{
				LordPartyComponent lordPartyComponent = this._partyComponent as LordPartyComponent;
				if (lordPartyComponent != null)
				{
					lordPartyComponent.ChangePartyOwner(newLeader);
				}
			}
			this.PartyComponent.ChangePartyLeader(newLeader);
		}

		public void RemovePartyLeader()
		{
			if (this.LeaderHero == null)
			{
				return;
			}
			if (this.MapEvent == null)
			{
				this.Ai.SetMoveModeHold();
			}
			this.PartyComponent.ChangePartyLeader(null);
		}

		private void RecoverPositionsForNavMeshUpdate()
		{
			if (this.Position2D.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this.Position2D))
			{
				Debug.Print(string.Concat(new object[]
				{
					"Position of ",
					base.StringId,
					" is not valid! (",
					this.Position2D.x,
					", ",
					this.Position2D.y,
					") Party will be moved to a valid position."
				}), 0, Debug.DebugColor.White, 17592186044416UL);
				Settlement currentSettlement = this.CurrentSettlement;
				this.Position2D = ((currentSettlement != null) ? currentSettlement.GatePosition : SettlementHelper.FindNearestVillage(null, this).GatePosition);
			}
			if (this.CurrentSettlement != null)
			{
				float num = (this.CurrentSettlement.IsFortification ? Campaign.Current.Models.EncounterModel.NeededMaximumDistanceForEncounteringTown : Campaign.Current.Models.EncounterModel.NeededMaximumDistanceForEncounteringVillage);
				if (!this.CurrentSettlement.GatePosition.NearlyEquals(this.Position2D, num))
				{
					Debug.Print(string.Concat(new object[]
					{
						"Position of ",
						base.StringId,
						" is not valid! (",
						this.Position2D.x,
						", ",
						this.Position2D.y,
						") Party will be moved to a valid position."
					}), 0, Debug.DebugColor.White, 17592186044416UL);
					this.Position2D = this.CurrentSettlement.GatePosition;
				}
			}
			this.Ai.RecoverPositionsForNavMeshUpdate();
		}

		public void OnGameInitialized()
		{
			this.RecoverPositionsForNavMeshUpdate();
			Campaign campaign = Campaign.Current;
			if (campaign.MapSceneWrapper != null)
			{
				this.CurrentNavigationFace = campaign.MapSceneWrapper.GetFaceIndex(this.Position2D);
			}
			this.Ai.OnGameInitialized();
			MobileParty mobileParty = Campaign.Current.CampaignObjectManager.Find<MobileParty>((MobileParty x) => x.StringId == base.StringId);
			if (this != mobileParty)
			{
				DestroyPartyAction.Apply(null, this);
			}
		}

		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData, ObjectLoadData objectLoadData)
		{
			object memberValueBySaveId = objectLoadData.GetMemberValueBySaveId(1032);
			if (memberValueBySaveId != null)
			{
				this._doNotAttackMainParty = (int)memberValueBySaveId;
			}
		}

		protected override void PreAfterLoad()
		{
			this.UpdatePartyComponentFlags();
			PartyComponent partyComponent = this.PartyComponent;
			if (partyComponent != null)
			{
				partyComponent.Initialize(this);
			}
			this.Ai.PreAfterLoad();
			if (this._disorganizedUntilTime.IsFuture)
			{
				this._isDisorganized = true;
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.2", 24202))
			{
				if (this.LeaderHero != null && this != MobileParty.MainParty && this.LeaderHero.PartyBelongedTo != this)
				{
					DestroyPartyAction.Apply(null, this);
				}
				if (this.MapEvent == null && (base.StringId.Contains("troops_of_CharacterObject") || base.StringId.Contains("troops_of_TaleWorlds.CampaignSystem.CharacterObject")))
				{
					DestroyPartyAction.Apply(null, this);
				}
			}
		}

		protected override void OnBeforeLoad()
		{
			this.Ai.OnBeforeLoad();
			this.InitMembers();
			this.InitCached();
			MobileParty attachedTo = this._attachedTo;
			if (attachedTo == null)
			{
				return;
			}
			attachedTo.AddAttachedPartyInternal(this);
		}

		private void InitCached()
		{
			MobilePartyAi ai = this.Ai;
			if (ai != null)
			{
				ai.InitCached();
			}
			((ILocatable<MobileParty>)this).LocatorNodeIndex = -1;
			this.ThinkParamsCache = new PartyThinkParams(this);
			this.ResetCached();
		}

		private void ResetCached()
		{
			this._partySizeRatioLastCheckVersion = -1;
			this._latestUsedPaymentRatio = -1;
			this._cachedPartySizeRatio = 1f;
			this.VersionNo = 0;
			this._partyPureSpeedLastCheckVersion = -1;
			this._itemRosterVersionNo = -1;
			this.Party.InitCache();
		}

		protected override void AfterLoad()
		{
			this.Party.AfterLoad();
			if (this.IsGarrison && this.MapEvent == null && this.SiegeEvent == null && this.TargetParty != null && this.CurrentSettlement != null)
			{
				this.Ai.SetMoveModeHold();
			}
			if (this.CurrentSettlement != null && !this.CurrentSettlement.Parties.Contains(this))
			{
				this.CurrentSettlement.AddMobileParty(this);
				foreach (MobileParty mobileParty in this._attachedParties)
				{
					if (this.Army.LeaderParty != this)
					{
						this.CurrentSettlement.AddMobileParty(mobileParty);
					}
				}
			}
			if (this._doNotAttackMainParty > 0)
			{
				this.Ai.DoNotAttackMainPartyUntil = CampaignTime.HoursFromNow((float)this._doNotAttackMainParty);
			}
			if (this.IsCaravan && this.Army != null)
			{
				this.Army = null;
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.1.0", 24202) && (this.PaymentLimit == 2000 || (this == MobileParty.MainParty && this.PaymentLimit == 0)))
			{
				this.SetWagePaymentLimit(Campaign.Current.Models.PartyWageModel.MaxWage);
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0", 24202) && this.IsCaravan && this.Owner == Hero.MainHero && this.ActualClan == null)
			{
				this.ActualClan = this.Owner.Clan;
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.1.4", 24202))
			{
				if (this.TargetParty != null)
				{
					IFaction mapFaction = this.TargetParty.MapFaction;
					if (mapFaction == null || !mapFaction.IsAtWarWith(this.MapFaction))
					{
						goto IL_25E;
					}
				}
				if (this.TargetSettlement != null)
				{
					IFaction mapFaction2 = this.TargetSettlement.MapFaction;
					if (mapFaction2 == null || !mapFaction2.IsAtWarWith(this.MapFaction))
					{
						goto IL_25E;
					}
				}
				if (this.ShortTermTargetParty == null)
				{
					return;
				}
				MobileParty shortTermTargetParty = this.ShortTermTargetParty;
				bool flag;
				if (shortTermTargetParty == null)
				{
					flag = true;
				}
				else
				{
					IFaction mapFaction3 = shortTermTargetParty.MapFaction;
					bool? flag2 = ((mapFaction3 != null) ? new bool?(mapFaction3.IsAtWarWith(this.MapFaction)) : null);
					bool flag3 = true;
					flag = !((flag2.GetValueOrDefault() == flag3) & (flag2 != null));
				}
				if (!flag)
				{
					return;
				}
				IL_25E:
				this.Ai.SetMoveModeHold();
			}
		}

		internal void OnFinishLoadState()
		{
			Campaign.Current.MobilePartyLocator.UpdateLocator(this);
		}

		int ILocatable<MobileParty>.LocatorNodeIndex
		{
			get
			{
				return this._locatorNodeIndex;
			}
			set
			{
				this._locatorNodeIndex = value;
			}
		}

		[CachedData]
		public PathFaceRecord CurrentNavigationFace
		{
			get
			{
				return this._currentNavigationFace;
			}
			private set
			{
				this._lastNavigationFace = this.CurrentNavigationFace;
				this._currentNavigationFace = value;
			}
		}

		internal void HourlyTick()
		{
			if (this.IsActive)
			{
				if (this.LeaderHero != null && this.CurrentSettlement != null && this.CurrentSettlement == this.LeaderHero.HomeSettlement)
				{
					Hero leaderHero = this.LeaderHero;
					float passedTimeAtHomeSettlement = leaderHero.PassedTimeAtHomeSettlement;
					leaderHero.PassedTimeAtHomeSettlement = passedTimeAtHomeSettlement + 1f;
				}
				this.Ai.HourlyTick();
			}
		}

		internal void DailyTick()
		{
			this.RecentEventsMorale -= this.RecentEventsMorale * 0.1f;
			if (this.LeaderHero != null)
			{
				this.LeaderHero.PassedTimeAtHomeSettlement *= 0.9f;
			}
		}

		[CachedData]
		public Vec2 ErrorPosition { get; private set; }

		internal void TickForStationaryMobileParty(ref MobileParty.CachedPartyVariables variables, float dt, float realDt)
		{
			if (this.StationaryStartTime == CampaignTime.Never)
			{
				this.StationaryStartTime = CampaignTime.Now;
			}
			this.CheckIsDisorganized();
			this.DoUpdatePosition(ref variables, dt, realDt);
			this.DoErrorCorrections(ref variables, realDt);
		}

		internal void TickForMovingMobileParty(ref MobileParty.CachedPartyVariables variables, float dt, float realDt)
		{
			this.ComputeNextMoveDistance(ref variables, dt);
			this.CommonMovingPartyTick(ref variables, dt, realDt);
		}

		internal void TickForMovingArmyLeader(ref MobileParty.CachedPartyVariables variables, float dt, float realDt)
		{
			this.ComputeNextMoveDistanceForArmyLeader(ref variables, dt);
			this.CommonMovingPartyTick(ref variables, dt, realDt);
		}

		internal void CommonMovingPartyTick(ref MobileParty.CachedPartyVariables variables, float dt, float realDt)
		{
			this.StationaryStartTime = CampaignTime.Never;
			this.CheckIsDisorganized();
			this.Ai.DoAiPathMode(ref variables);
			this.DoUpdatePosition(ref variables, dt, realDt);
			this.DoErrorCorrections(ref variables, realDt);
		}

		internal void InitializeCachedPartyVariables(ref MobileParty.CachedPartyVariables variables)
		{
			variables.HasMapEvent = this.MapEvent != null;
			variables.CurrentPosition = this.Position2D;
			variables.TargetPartyPositionAtFrameStart = Vec2.Invalid;
			variables.LastCurrentPosition = this.Position2D;
			variables.IsAttachedArmyMember = false;
			variables.IsMoving = this.IsMoving || this.IsMainParty;
			variables.IsArmyLeader = false;
			if (this.Army != null)
			{
				if (this.Army.LeaderParty == this)
				{
					variables.IsArmyLeader = true;
					return;
				}
				if (this.Army.LeaderParty.AttachedParties.Contains(this))
				{
					variables.IsAttachedArmyMember = true;
					variables.IsMoving = this.IsMoving || this.Army.LeaderParty.IsMoving;
				}
			}
		}

		internal void ComputeNextMoveDistanceForArmyLeader(ref MobileParty.CachedPartyVariables variables, float dt)
		{
			if (dt > 0f)
			{
				this.CalculateSpeedForPartyUnified();
				variables.NextMoveDistance = this.Speed * dt;
				return;
			}
			variables.NextMoveDistance = 0f;
		}

		internal void ComputeNextMoveDistance(ref MobileParty.CachedPartyVariables variables, float dt)
		{
			if (dt > 0f)
			{
				this.CalculateSpeed();
				variables.NextMoveDistance = this.Speed * dt;
				return;
			}
			variables.NextMoveDistance = 0f;
		}

		internal void UpdateStationaryTimer()
		{
			if (!this.IsMoving)
			{
				if (this.StationaryStartTime == CampaignTime.Never)
				{
					this.StationaryStartTime = CampaignTime.Now;
					return;
				}
			}
			else
			{
				this.StationaryStartTime = CampaignTime.Never;
			}
		}

		private void CheckIsDisorganized()
		{
			if (this._isDisorganized && this._disorganizedUntilTime.IsPast)
			{
				this.SetDisorganized(false);
			}
		}

		public void SetDisorganized(bool isDisorganized)
		{
			if (isDisorganized)
			{
				this._disorganizedUntilTime = CampaignTime.HoursFromNow(Campaign.Current.Models.PartyImpairmentModel.GetDisorganizedStateDuration(this));
			}
			this._isDisorganized = isDisorganized;
			this.UpdateVersionNo();
		}

		internal void DoUpdatePosition(ref MobileParty.CachedPartyVariables variables, float dt, float realDt)
		{
			variables.NextPosition = variables.CurrentPosition;
			Vec2 vec = variables.CurrentPosition + this.EventPositionAdder + this.ArmyPositionAdder;
			Vec2 vec2;
			if (variables.IsAttachedArmyMember)
			{
				if (variables.HasMapEvent || this.CurrentSettlement != null)
				{
					vec2 = Vec2.Zero;
				}
				else
				{
					Vec2 vec3 = (variables.HasMapEvent ? this.Army.LeaderParty.Position2D : this.Army.LeaderParty.Ai.NextTargetPosition);
					Vec2 vec4;
					PathFaceRecord pathFaceRecord;
					bool flag;
					this.Army.LeaderParty.Ai.GetTargetPositionAndFace(ref variables, out vec4, out pathFaceRecord, out flag);
					Vec2 vec5 = (((vec3 - this.Army.LeaderParty.Position2D).LengthSquared < 0.0025000002f) ? Vec2.FromRotation(this.Army.LeaderParty.Party.AverageBearingRotation) : (vec3 - this.Army.LeaderParty.Position2D).Normalized());
					Vec2 vec6 = vec5.TransformToParentUnitF(this.Army.GetRelativePositionForParty(this, vec5));
					vec2 = vec3 + vec6 - vec;
					if ((vec4 + vec6 - vec).LengthSquared < 0.010000001f || vec2.LengthSquared < 0.010000001f)
					{
						vec2 = Vec2.Zero;
					}
					float num = vec2.LeftVec().Normalized().DotProduct(this.Army.LeaderParty.Position2D + vec6 - vec);
					vec2.RotateCCW((num < 0f) ? MathF.Max(num * 2f, -0.7853982f) : MathF.Min(num * 2f, 0.7853982f));
				}
			}
			else
			{
				vec2 = (variables.HasMapEvent ? this.Party.MapEvent.Position : this.Ai.NextTargetPosition) - vec;
			}
			float num2 = vec2.Normalize();
			if (num2 < variables.NextMoveDistance)
			{
				variables.NextMoveDistance = num2;
			}
			if (this.BesiegedSettlement == null && this.CurrentSettlement == null && (variables.NextMoveDistance > 0f || variables.HasMapEvent))
			{
				bool flag2 = false;
				Vec2 vec7 = this.Bearing;
				if (num2 > 0f)
				{
					flag2 = true;
					vec7 = vec2;
					if (!variables.IsAttachedArmyMember || !variables.HasMapEvent)
					{
						this.Bearing = vec7;
					}
				}
				else if (variables.IsAttachedArmyMember && variables.HasMapEvent)
				{
					vec7 = this.Army.LeaderParty.Bearing;
					this.Bearing = vec7;
					flag2 = true;
				}
				if (flag2)
				{
					float num3 = MBMath.WrapAngle(this.Bearing.RotationInRadians - this.Party.AverageBearingRotation);
					float num4 = (variables.HasMapEvent ? realDt : dt);
					this.Party.AverageBearingRotation += num3 * MathF.Min(num4 * 30f, 1f);
					this.Party.AverageBearingRotation = MBMath.WrapAngle(this.Party.AverageBearingRotation);
				}
				variables.NextPosition = variables.CurrentPosition + vec7 * variables.NextMoveDistance;
			}
		}

		internal void DoErrorCorrections(ref MobileParty.CachedPartyVariables variables, float realDt)
		{
			float lengthSquared = this.ErrorPosition.LengthSquared;
			if (lengthSquared > 0f)
			{
				if (this.CurrentSettlement != null || !this.IsVisible)
				{
					this.ErrorPosition = Vec2.Zero;
				}
				if ((double)lengthSquared <= 49.0 * (double)realDt * (double)realDt)
				{
					this.ErrorPosition = Vec2.Zero;
					return;
				}
				this.ErrorPosition -= this.ErrorPosition.Normalized() * (7f * realDt);
			}
		}

		internal void TickForMobileParty2(ref MobileParty.CachedPartyVariables variables, float realDt, ref int gridChangeCount, ref MobileParty[] gridChangeMobilePartyList)
		{
			variables.NextPathFaceRecord = Campaign.Current.MapSceneWrapper.GetFaceIndex(variables.NextPosition);
			if (variables.NextMoveDistance > 0f && variables.IsMoving && this.BesiegedSettlement == null && !variables.HasMapEvent)
			{
				if (variables.IsAttachedArmyMember && (this.Army.LeaderParty.Position2D - (this.Position2D + this.ArmyPositionAdder)).Length > 0.25f)
				{
					this._position2D = this.Army.LeaderParty.Position2D;
					this.ArmyPositionAdder += variables.NextPosition - this.Position2D;
					return;
				}
				PathFaceRecord nextPathFaceRecord = variables.NextPathFaceRecord;
				if (this.CurrentNavigationFace.IsValid() && this.CurrentNavigationFace.FaceIslandIndex == nextPathFaceRecord.FaceIslandIndex)
				{
					this.SetPositionParallel(variables, variables.NextPosition, ref gridChangeCount, ref gridChangeMobilePartyList);
				}
			}
		}

		public Vec2 EventPositionAdder
		{
			get
			{
				return this._eventPositionAdder;
			}
			set
			{
				this.ErrorPosition += this._eventPositionAdder;
				this._eventPositionAdder = value;
				this.ErrorPosition -= this._eventPositionAdder;
			}
		}

		public bool IsVisible
		{
			get
			{
				return this._isVisible;
			}
			set
			{
				if (this._isVisible != value)
				{
					this._isVisible = value;
					this.Party.OnVisibilityChanged(value);
				}
			}
		}

		public Vec2 Position2D
		{
			get
			{
				return this._position2D;
			}
			set
			{
				if (this._position2D != value)
				{
					this._position2D = value;
					Campaign campaign = Campaign.Current;
					campaign.MobilePartyLocator.UpdateLocator(this);
					if (campaign.MapSceneWrapper != null)
					{
						this.CurrentNavigationFace = campaign.MapSceneWrapper.GetFaceIndex(this._position2D);
					}
				}
			}
		}

		private void SetPositionParallel(MobileParty.CachedPartyVariables variables, Vec2 value, ref int GridChangeCounter, ref MobileParty[] GridChangeList)
		{
			if (this._position2D != value)
			{
				this._position2D = value;
				if (!Campaign.Current.MobilePartyLocator.CheckWhetherPositionsAreInSameNode(value, this))
				{
					int num = Interlocked.Increment(ref GridChangeCounter);
					GridChangeList[num] = this;
				}
				this.CurrentNavigationFace = variables.NextPathFaceRecord;
			}
		}

		public void SetCustomName(TextObject name)
		{
			this.CustomName = name;
		}

		public void SetPartyUsedByQuest(bool isActivelyUsed)
		{
			if (this._isCurrentlyUsedByAQuest != isActivelyUsed)
			{
				this._isCurrentlyUsedByAQuest = isActivelyUsed;
				CampaignEventDispatcher.Instance.OnMobilePartyQuestStatusChanged(this, isActivelyUsed);
			}
		}

		public void ResetTargetParty()
		{
			this.TargetParty = null;
		}

		public bool IsInspected
		{
			get
			{
				return (this.Army != null && this.Army == MobileParty.MainParty.Army) || this._isInspected;
			}
			set
			{
				this._isInspected = value;
			}
		}

		public void IgnoreForHours(float hours)
		{
			this._ignoredUntilTime = CampaignTime.HoursFromNow(hours);
		}

		public void IgnoreByOtherPartiesTill(CampaignTime time)
		{
			this._ignoredUntilTime = time;
		}

		public void ResetBesiegedSettlement()
		{
			if (!this._besiegerCampResetStarted)
			{
				this._besiegerCampResetStarted = true;
				if (this.BesiegerCamp != null)
				{
					this.BesiegerCamp = null;
				}
				this._besiegerCampResetStarted = false;
			}
		}

		public Vec2 GetPosition2D
		{
			get
			{
				return this.Position2D;
			}
		}

		public int TotalWage
		{
			get
			{
				return (int)Campaign.Current.Models.PartyWageModel.GetTotalWage(this, false).ResultNumber;
			}
		}

		public ExplainedNumber TotalWageExplained
		{
			get
			{
				return Campaign.Current.Models.PartyWageModel.GetTotalWage(this, true);
			}
		}

		public MapEvent MapEvent
		{
			get
			{
				return this.Party.MapEvent;
			}
		}

		internal void OnRemovedFromArmyInternal()
		{
			this.ResetTargetParty();
			if (this.IsActive && this.LeaderHero != null)
			{
				if (this.BesiegedSettlement != null && this.Army.LeaderParty != this)
				{
					if (!this.BesiegedSettlement.SiegeEvent.BesiegerCamp.HasInvolvedPartyForEventType(this.Party, MapEvent.BattleTypes.Siege))
					{
						if (this == MobileParty.MainParty)
						{
							this.Ai.SetMoveModeHold();
							return;
						}
						if (this.MapEvent == null)
						{
							this.Ai.SetMoveBesiegeSettlement(this.BesiegedSettlement);
							return;
						}
					}
				}
				else
				{
					if (this.CurrentSettlement == null)
					{
						this.Ai.SetMoveModeHold();
						return;
					}
					if (this.Party.MapEvent == null)
					{
						this.Ai.SetMoveGoToSettlement(this.CurrentSettlement);
					}
				}
			}
		}

		private void OnRemoveParty()
		{
			this.Army = null;
			this.CurrentSettlement = null;
			this.AttachedTo = null;
			this.BesiegerCamp = null;
			List<Settlement> list = new List<Settlement>();
			if (this.CurrentSettlement != null)
			{
				list.Add(this.CurrentSettlement);
			}
			else if ((this.IsGarrison || this.IsMilitia || this.IsBandit || this.IsVillager) && this.HomeSettlement != null)
			{
				list.Add(this.HomeSettlement);
			}
			PartyComponent partyComponent = this.PartyComponent;
			if (partyComponent != null)
			{
				partyComponent.Finish();
			}
			this.ActualClan = null;
			Campaign.Current.CampaignObjectManager.RemoveMobileParty(this);
			foreach (Settlement settlement in list)
			{
				settlement.SettlementComponent.OnRelatedPartyRemoved(this);
			}
		}

		public void SetPartyObjective(MobileParty.PartyObjective objective)
		{
			this.Objective = objective;
		}

		public void UpdateVersionNo()
		{
			int versionNo = this.VersionNo;
			this.VersionNo = versionNo + 1;
		}

		public TroopRoster MemberRoster
		{
			get
			{
				return this.Party.MemberRoster;
			}
		}

		public TroopRoster PrisonRoster
		{
			get
			{
				return this.Party.PrisonRoster;
			}
		}

		private bool IsLastSpeedCacheInvalid()
		{
			Hero leaderHero = this.LeaderHero;
			bool flag = !this.IsActive || leaderHero == null || leaderHero.PartyBelongedToAsPrisoner != null;
			bool isNight = Campaign.Current.IsNight;
			return this._lastNavigationFace.FaceIndex != this.CurrentNavigationFace.FaceIndex || this._partyLastCheckIsPrisoner != flag || this._partyLastCheckAtNight != isNight;
		}

		private bool IsBaseSpeedCacheInvalid()
		{
			MapWeatherModel.WeatherEventEffectOnTerrain weatherEffectOnTerrainForPosition = Campaign.Current.Models.MapWeatherModel.GetWeatherEffectOnTerrainForPosition(this.Position2D);
			return this._partyPureSpeedLastCheckVersion != this.VersionNo || this._itemRosterVersionNo != this.Party.ItemRoster.VersionNo || this._lastWeatherTerrainEffect != weatherEffectOnTerrainForPosition;
		}

		private float CalculateSpeedForPartyUnified()
		{
			bool flag = false;
			if (this.IsBaseSpeedCacheInvalid())
			{
				if (this.Army != null && this.Army.LeaderParty.AttachedParties.Contains(this))
				{
					this._lastCalculatedBaseSpeedExplained = this.Army.LeaderParty._lastCalculatedBaseSpeedExplained;
				}
				else
				{
					this._lastCalculatedBaseSpeedExplained = Campaign.Current.Models.PartySpeedCalculatingModel.CalculateBaseSpeed(this, false, 0, 0);
				}
				MapWeatherModel.WeatherEventEffectOnTerrain weatherEffectOnTerrainForPosition = Campaign.Current.Models.MapWeatherModel.GetWeatherEffectOnTerrainForPosition(this.Position2D);
				this._partyPureSpeedLastCheckVersion = this.VersionNo;
				this._itemRosterVersionNo = this.Party.ItemRoster.VersionNo;
				this._lastWeatherTerrainEffect = weatherEffectOnTerrainForPosition;
				flag = true;
			}
			if (flag)
			{
				this._lastCalculatedSpeed = Campaign.Current.Models.PartySpeedCalculatingModel.CalculateFinalSpeed(this, this._lastCalculatedBaseSpeedExplained).ResultNumber;
			}
			else if (this.IsLastSpeedCacheInvalid())
			{
				Hero leaderHero = this.LeaderHero;
				bool flag2 = !this.IsActive || leaderHero == null || leaderHero.PartyBelongedToAsPrisoner != null;
				bool isNight = Campaign.Current.IsNight;
				this._lastNavigationFace = this.CurrentNavigationFace;
				this._partyLastCheckIsPrisoner = flag2;
				this._partyLastCheckAtNight = isNight;
				this._lastCalculatedSpeed = Campaign.Current.Models.PartySpeedCalculatingModel.CalculateFinalSpeed(this, this._lastCalculatedBaseSpeedExplained).ResultNumber;
			}
			return this._lastCalculatedSpeed;
		}

		private float CalculateSpeed()
		{
			if (this.Army != null)
			{
				if (this.Army.LeaderParty.AttachedParties.Contains(this))
				{
					Vec2 vec = (((this.Army.LeaderParty.MapEvent != null) ? this.Army.LeaderParty.Position2D : this.Army.LeaderParty.Ai.NextTargetPosition) - this.Army.LeaderParty.Position2D).Normalized();
					Vec2 vec2 = this.Army.LeaderParty.Position2D + vec.TransformToParentUnitF(this.Army.GetRelativePositionForParty(this, vec));
					float num = this.Bearing.DotProduct(vec2 - this.VisualPosition2DWithoutError);
					return this.Army.LeaderParty._lastCalculatedSpeed * MBMath.ClampFloat(1f + num * 1f, 0.7f, 1.3f);
				}
			}
			else if (this.DefaultBehavior == AiBehavior.EscortParty && this.TargetParty != null && this._lastCalculatedSpeed > this.TargetParty._lastCalculatedSpeed)
			{
				return this.TargetParty._lastCalculatedSpeed;
			}
			return this.CalculateSpeedForPartyUnified();
		}

		public ItemRoster ItemRoster
		{
			get
			{
				return this.Party.ItemRoster;
			}
		}

		public bool IsSpotted()
		{
			return this.IsVisible;
		}

		public bool IsMainParty
		{
			get
			{
				return this == MobileParty.MainParty;
			}
		}

		public int AddElementToMemberRoster(CharacterObject element, int numberToAdd, bool insertAtFront = false)
		{
			return this.Party.AddElementToMemberRoster(element, numberToAdd, insertAtFront);
		}

		public int AddPrisoner(CharacterObject element, int numberToAdd)
		{
			return this.Party.AddPrisoner(element, numberToAdd);
		}

		public IFaction MapFaction
		{
			get
			{
				IFaction faction;
				if (this.ActualClan != null)
				{
					faction = this.ActualClan.MapFaction;
				}
				else if (this.Party.Owner != null)
				{
					if (this.Party.Owner == Hero.MainHero)
					{
						faction = this.Party.Owner.MapFaction;
					}
					else if (this.Party.Owner.IsNotable)
					{
						faction = this.Party.Owner.HomeSettlement.MapFaction;
					}
					else
					{
						if (this.IsMilitia || this.IsGarrison || this.IsVillager)
						{
							Settlement homeSettlement = this.HomeSettlement;
							if (((homeSettlement != null) ? homeSettlement.OwnerClan : null) != null)
							{
								return this.HomeSettlement.OwnerClan.MapFaction;
							}
						}
						if (this.IsCaravan || this.IsBanditBossParty)
						{
							faction = this.Party.Owner.MapFaction;
						}
						else if (this._isCurrentlyUsedByAQuest && this.Party.Owner != null)
						{
							faction = this.Party.Owner.MapFaction;
						}
						else
						{
							faction = ((this.LeaderHero != null) ? this.LeaderHero.MapFaction : null);
						}
					}
				}
				else if (this.HomeSettlement != null)
				{
					faction = this.HomeSettlement.OwnerClan.MapFaction;
				}
				else
				{
					faction = ((this.LeaderHero != null) ? this.LeaderHero.MapFaction : null);
				}
				return faction;
			}
		}

		public TextObject ArmyName
		{
			get
			{
				if (this.Army == null || this.Army.LeaderParty != this)
				{
					return this.Name;
				}
				return this.Army.Name;
			}
		}

		public SiegeEvent SiegeEvent
		{
			get
			{
				BesiegerCamp besiegerCamp = this.BesiegerCamp;
				if (besiegerCamp == null)
				{
					return null;
				}
				return besiegerCamp.SiegeEvent;
			}
		}

		public float Food
		{
			get
			{
				return (float)this.Party.RemainingFoodPercentage * 0.01f + (float)this.TotalFoodAtInventory;
			}
		}

		public Vec3 GetLogicalPosition()
		{
			float num = 0f;
			Campaign.Current.MapSceneWrapper.GetHeightAtPoint(this.Position2D, ref num);
			return new Vec3(this.Position2D.x, this.Position2D.y, num, -1f);
		}

		public int TotalFoodAtInventory
		{
			get
			{
				return this.ItemRoster.TotalFood;
			}
		}

		public float TotalWeightCarried
		{
			get
			{
				return this.ItemRoster.TotalWeight;
			}
		}

		public float SeeingRange
		{
			get
			{
				return Campaign.Current.Models.MapVisibilityModel.GetPartySpottingRange(this, false).ResultNumber;
			}
		}

		public Settlement BesiegedSettlement
		{
			get
			{
				BesiegerCamp besiegerCamp = this.BesiegerCamp;
				if (besiegerCamp == null)
				{
					return null;
				}
				return besiegerCamp.SiegeEvent.BesiegedSettlement;
			}
		}

		public float GetTotalStrengthWithFollowers(bool includeNonAttachedArmyMembers = true)
		{
			MobileParty mobileParty = ((this.DefaultBehavior == AiBehavior.EscortParty) ? this.TargetParty : this);
			float num = mobileParty.Party.TotalStrength;
			if (mobileParty.Army != null && mobileParty == mobileParty.Army.LeaderParty)
			{
				foreach (MobileParty mobileParty2 in mobileParty.Army.Parties)
				{
					if (mobileParty2.Army.LeaderParty != mobileParty2 && (mobileParty2.AttachedTo != null || includeNonAttachedArmyMembers))
					{
						num += mobileParty2.Party.TotalStrength;
					}
				}
			}
			return num;
		}

		private void FillPartyStacks(PartyTemplateObject pt, int troopNumberLimit = -1)
		{
			if (this.IsBandit)
			{
				float playerProgress = Campaign.Current.PlayerProgress;
				float num = 0.4f + 0.8f * playerProgress;
				int num2 = MBRandom.RandomInt(2);
				float num3 = ((num2 == 0) ? MBRandom.RandomFloat : (MBRandom.RandomFloat * MBRandom.RandomFloat * MBRandom.RandomFloat * 4f));
				float num4 = ((num2 == 0) ? (num3 * 0.8f + 0.2f) : (1f + num3));
				float randomFloat = MBRandom.RandomFloat;
				float randomFloat2 = MBRandom.RandomFloat;
				float randomFloat3 = MBRandom.RandomFloat;
				float num5 = ((pt.Stacks.Count > 0) ? ((float)pt.Stacks[0].MinValue + num * num4 * randomFloat * (float)(pt.Stacks[0].MaxValue - pt.Stacks[0].MinValue)) : 0f);
				float num6 = ((pt.Stacks.Count > 1) ? ((float)pt.Stacks[1].MinValue + num * num4 * randomFloat2 * (float)(pt.Stacks[1].MaxValue - pt.Stacks[1].MinValue)) : 0f);
				float num7 = ((pt.Stacks.Count > 2) ? ((float)pt.Stacks[2].MinValue + num * num4 * randomFloat3 * (float)(pt.Stacks[2].MaxValue - pt.Stacks[2].MinValue)) : 0f);
				this.AddElementToMemberRoster(pt.Stacks[0].Character, MBRandom.RoundRandomized(num5), false);
				if (pt.Stacks.Count > 1)
				{
					this.AddElementToMemberRoster(pt.Stacks[1].Character, MBRandom.RoundRandomized(num6), false);
				}
				if (pt.Stacks.Count > 2)
				{
					this.AddElementToMemberRoster(pt.Stacks[2].Character, MBRandom.RoundRandomized(num7), false);
					return;
				}
			}
			else
			{
				if (troopNumberLimit < 0)
				{
					float playerProgress2 = Campaign.Current.PlayerProgress;
					for (int i = 0; i < pt.Stacks.Count; i++)
					{
						int num8 = (int)(playerProgress2 * (float)(pt.Stacks[i].MaxValue - pt.Stacks[i].MinValue)) + pt.Stacks[i].MinValue;
						CharacterObject character = pt.Stacks[i].Character;
						this.AddElementToMemberRoster(character, num8, false);
					}
					return;
				}
				for (int j = 0; j < troopNumberLimit; j++)
				{
					int num9 = -1;
					float num10 = 0f;
					for (int k = 0; k < pt.Stacks.Count; k++)
					{
						num10 += ((this.IsGarrison && pt.Stacks[k].Character.IsRanged) ? 6f : ((this.IsGarrison && !pt.Stacks[k].Character.IsMounted) ? 2f : 1f)) * ((float)(pt.Stacks[k].MaxValue + pt.Stacks[k].MinValue) / 2f);
					}
					float num11 = MBRandom.RandomFloat * num10;
					for (int l = 0; l < pt.Stacks.Count; l++)
					{
						num11 -= ((this.IsGarrison && pt.Stacks[l].Character.IsRanged) ? 6f : ((this.IsGarrison && !pt.Stacks[l].Character.IsMounted) ? 2f : 1f)) * ((float)(pt.Stacks[l].MaxValue + pt.Stacks[l].MinValue) / 2f);
						if (num11 < 0f)
						{
							num9 = l;
							break;
						}
					}
					if (num9 < 0)
					{
						num9 = 0;
					}
					CharacterObject character2 = pt.Stacks[num9].Character;
					this.AddElementToMemberRoster(character2, 1, false);
				}
				bool isVillager = this.IsVillager;
			}
		}

		private void OnPartyJoinedSiegeInternal()
		{
			this._besiegerCamp.AddSiegePartyInternal(this);
			this._besiegerCamp.SetSiegeCampPartyPosition(this);
		}

		private void OnPartyLeftSiegeInternal()
		{
			this._besiegerCamp.RemoveSiegePartyInternal(this);
			this.EventPositionAdder = Vec2.Zero;
			this.ErrorPosition = Vec2.Zero;
		}

		public bool HasPerk(PerkObject perk, bool checkSecondaryRole = false)
		{
			switch (checkSecondaryRole ? perk.SecondaryRole : perk.PrimaryRole)
			{
			case SkillEffect.PerkRole.ClanLeader:
				if (this.LeaderHero != null)
				{
					Clan clan = this.LeaderHero.Clan;
					bool? flag;
					if (clan == null)
					{
						flag = null;
					}
					else
					{
						Hero leader = clan.Leader;
						flag = ((leader != null) ? new bool?(leader.GetPerkValue(perk)) : null);
					}
					return flag ?? false;
				}
				return false;
			case SkillEffect.PerkRole.ArmyCommander:
			{
				Army army = this.Army;
				bool? flag2;
				if (army == null)
				{
					flag2 = null;
				}
				else
				{
					MobileParty leaderParty = army.LeaderParty;
					if (leaderParty == null)
					{
						flag2 = null;
					}
					else
					{
						Hero leaderHero = leaderParty.LeaderHero;
						flag2 = ((leaderHero != null) ? new bool?(leaderHero.GetPerkValue(perk)) : null);
					}
				}
				return flag2 ?? false;
			}
			case SkillEffect.PerkRole.PartyLeader:
			{
				Hero leaderHero2 = this.LeaderHero;
				return leaderHero2 != null && leaderHero2.GetPerkValue(perk);
			}
			case SkillEffect.PerkRole.Surgeon:
			{
				Hero effectiveSurgeon = this.EffectiveSurgeon;
				return effectiveSurgeon != null && effectiveSurgeon.GetPerkValue(perk);
			}
			case SkillEffect.PerkRole.Engineer:
			{
				Hero effectiveEngineer = this.EffectiveEngineer;
				return effectiveEngineer != null && effectiveEngineer.GetPerkValue(perk);
			}
			case SkillEffect.PerkRole.Scout:
			{
				Hero effectiveScout = this.EffectiveScout;
				return effectiveScout != null && effectiveScout.GetPerkValue(perk);
			}
			case SkillEffect.PerkRole.Quartermaster:
			{
				Hero effectiveQuartermaster = this.EffectiveQuartermaster;
				return effectiveQuartermaster != null && effectiveQuartermaster.GetPerkValue(perk);
			}
			case SkillEffect.PerkRole.PartyMember:
				foreach (TroopRosterElement troopRosterElement in this.MemberRoster.GetTroopRoster())
				{
					if (troopRosterElement.Character.IsHero && troopRosterElement.Character.HeroObject.GetPerkValue(perk))
					{
						return true;
					}
				}
				return false;
			case SkillEffect.PerkRole.Personal:
			{
				Debug.FailedAssert("personal perk is called in party", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Party\\MobileParty.cs", "HasPerk", 2182);
				Hero leaderHero3 = this.LeaderHero;
				return leaderHero3 != null && leaderHero3.GetPerkValue(perk);
			}
			}
			return false;
		}

		public bool IsEngaging
		{
			get
			{
				return this.DefaultBehavior == AiBehavior.EngageParty || this.ShortTermBehavior == AiBehavior.EngageParty;
			}
		}

		public SkillEffect.PerkRole GetHeroPerkRole(Hero hero)
		{
			if (this.Engineer == hero)
			{
				return SkillEffect.PerkRole.Engineer;
			}
			if (this.Quartermaster == hero)
			{
				return SkillEffect.PerkRole.Quartermaster;
			}
			if (this.Surgeon == hero)
			{
				return SkillEffect.PerkRole.Surgeon;
			}
			if (this.Scout == hero)
			{
				return SkillEffect.PerkRole.Scout;
			}
			return SkillEffect.PerkRole.None;
		}

		public void SetHeroPerkRole(Hero hero, SkillEffect.PerkRole perkRole)
		{
			switch (perkRole)
			{
			case SkillEffect.PerkRole.None:
			case SkillEffect.PerkRole.Ruler:
			case SkillEffect.PerkRole.ClanLeader:
			case SkillEffect.PerkRole.Governor:
			case SkillEffect.PerkRole.ArmyCommander:
			case SkillEffect.PerkRole.PartyLeader:
			case SkillEffect.PerkRole.PartyOwner:
			case SkillEffect.PerkRole.PartyMember:
			case SkillEffect.PerkRole.Personal:
			case SkillEffect.PerkRole.Captain:
			case SkillEffect.PerkRole.NumberOfPerkRoles:
				break;
			case SkillEffect.PerkRole.Surgeon:
				this.SetPartySurgeon(hero);
				return;
			case SkillEffect.PerkRole.Engineer:
				this.SetPartyEngineer(hero);
				return;
			case SkillEffect.PerkRole.Scout:
				this.SetPartyScout(hero);
				return;
			case SkillEffect.PerkRole.Quartermaster:
				this.SetPartyQuartermaster(hero);
				break;
			default:
				return;
			}
		}

		public void RemoveHeroPerkRole(Hero hero)
		{
			if (this.Engineer == hero)
			{
				this.Engineer = null;
			}
			if (this.Quartermaster == hero)
			{
				this.Quartermaster = null;
			}
			if (this.Surgeon == hero)
			{
				this.Surgeon = null;
			}
			if (this.Scout == hero)
			{
				this.Scout = null;
			}
			this.ResetCached();
		}

		public Hero GetRoleHolder(SkillEffect.PerkRole perkRole)
		{
			switch (perkRole)
			{
			case SkillEffect.PerkRole.PartyLeader:
				return this.LeaderHero;
			case SkillEffect.PerkRole.Surgeon:
				return this.Surgeon;
			case SkillEffect.PerkRole.Engineer:
				return this.Engineer;
			case SkillEffect.PerkRole.Scout:
				return this.Scout;
			case SkillEffect.PerkRole.Quartermaster:
				return this.Quartermaster;
			}
			return null;
		}

		public Hero GetEffectiveRoleHolder(SkillEffect.PerkRole perkRole)
		{
			switch (perkRole)
			{
			case SkillEffect.PerkRole.PartyLeader:
				return this.LeaderHero;
			case SkillEffect.PerkRole.Surgeon:
				return this.EffectiveSurgeon;
			case SkillEffect.PerkRole.Engineer:
				return this.EffectiveEngineer;
			case SkillEffect.PerkRole.Scout:
				return this.EffectiveScout;
			case SkillEffect.PerkRole.Quartermaster:
				return this.EffectiveQuartermaster;
			}
			return null;
		}

		internal bool IsCurrentlyEngagingSettlement
		{
			get
			{
				return this.ShortTermBehavior == AiBehavior.GoToSettlement || this.ShortTermBehavior == AiBehavior.RaidSettlement || this.ShortTermBehavior == AiBehavior.AssaultSettlement;
			}
		}

		public int GetNumDaysForFoodToLast()
		{
			int num = this.ItemRoster.TotalFood;
			num *= 100;
			if (this == MobileParty.MainParty)
			{
				num += this.Party.RemainingFoodPercentage;
			}
			return (int)((float)num / (100f * -this.FoodChange));
		}

		internal bool IsCurrentlyEngagingParty
		{
			get
			{
				return this.ShortTermBehavior == AiBehavior.EngageParty;
			}
		}

		public Vec3 GetPosition()
		{
			return this.GetLogicalPosition();
		}

		public bool IsCurrentlyGoingToSettlement
		{
			get
			{
				return this.ShortTermBehavior == AiBehavior.GoToSettlement;
			}
		}

		public float GetTrackDistanceToMainAgent()
		{
			return this.GetPosition().Distance(Hero.MainHero.GetPosition());
		}

		public float PartySizeRatio
		{
			get
			{
				int versionNo = this.Party.MemberRoster.VersionNo;
				float num = this._cachedPartySizeRatio;
				if (this._partySizeRatioLastCheckVersion != versionNo || this == MobileParty.MainParty)
				{
					this._partySizeRatioLastCheckVersion = versionNo;
					this._cachedPartySizeRatio = (float)this.Party.NumberOfAllMembers / (float)this.Party.PartySizeLimit;
					num = this._cachedPartySizeRatio;
				}
				return num;
			}
		}

		public int LimitedPartySize
		{
			get
			{
				if (!this.HasLimitedWage())
				{
					return this.Party.PartySizeLimit;
				}
				int paymentLimit = this.Party.MobileParty.PaymentLimit;
				if (this._latestUsedPaymentRatio != paymentLimit || this == MobileParty.MainParty)
				{
					this._latestUsedPaymentRatio = paymentLimit;
					int num = Math.Min((this.LeaderHero != null && this.Party.Owner != null && this.Party.Owner.Clan != null && this.LeaderHero != this.Party.Owner.Clan.Leader) ? this.LeaderHero.CharacterObject.TroopWage : 0, this.TotalWage);
					int num2 = (int)((float)(this.PaymentLimit - num) / Campaign.Current.AverageWage) + 1;
					int num3 = MathF.Max(1, MathF.Min(num2, this.Party.PartySizeLimit));
					this._cachedPartySizeLimit = num3;
					return num3;
				}
				return this._cachedPartySizeLimit;
			}
		}

		public bool CheckTracked(BasicCharacterObject basicCharacter)
		{
			return this.MemberRoster.GetTroopRoster().Any((TroopRosterElement t) => t.Character == basicCharacter) || this.PrisonRoster.GetTroopRoster().Any((TroopRosterElement t) => t.Character == basicCharacter);
		}

		public Vec2 VisualPosition2DWithoutError
		{
			get
			{
				return this.Position2D + this.EventPositionAdder + this.ArmyPositionAdder;
			}
		}

		private Settlement DetermineRelatedBesiegedSettlementWhileDestroyingParty()
		{
			Settlement settlement = this.BesiegedSettlement;
			if (settlement == null)
			{
				settlement = ((this.ShortTermBehavior == AiBehavior.AssaultSettlement) ? this.ShortTermTargetSettlement : null);
			}
			if (settlement == null && (this.IsGarrison || this.IsMilitia) && this.CurrentSettlement != null)
			{
				MobileParty lastAttackerParty = this.CurrentSettlement.LastAttackerParty;
				MapEvent mapEvent = ((lastAttackerParty != null) ? lastAttackerParty.MapEvent : null);
				if (mapEvent != null && (mapEvent.IsSiegeAssault || mapEvent.IsSiegeOutside || mapEvent.IsSallyOut) && mapEvent.DefeatedSide != BattleSideEnum.None && mapEvent.State == MapEventState.WaitingRemoval)
				{
					settlement = this.CurrentSettlement;
				}
			}
			return settlement;
		}

		public void RemoveParty()
		{
			this.IsActive = false;
			this.IsVisible = false;
			Settlement settlement = this.DetermineRelatedBesiegedSettlementWhileDestroyingParty();
			Campaign campaign = Campaign.Current;
			this.AttachedTo = null;
			this.BesiegerCamp = null;
			this.ReleaseHeroPrisoners();
			this.ItemRoster.Clear();
			this.MemberRoster.Reset();
			this.PrisonRoster.Reset();
			Campaign.Current.MobilePartyLocator.RemoveLocatable(this);
			Campaign.Current.VisualTrackerManager.RemoveTrackedObject(this, true);
			CampaignEventDispatcher.Instance.OnPartyRemoved(this.Party);
			GC.SuppressFinalize(this.Party);
			foreach (MobileParty mobileParty in campaign.MobileParties)
			{
				bool flag = mobileParty.Ai.AiBehaviorPartyBase == this.Party || (mobileParty.TargetSettlement != null && mobileParty.TargetSettlement == settlement && mobileParty.CurrentSettlement != settlement) || (mobileParty.ShortTermTargetSettlement != null && mobileParty.ShortTermTargetSettlement == settlement && mobileParty.CurrentSettlement != settlement);
				if (mobileParty.TargetParty != null && mobileParty.TargetParty == this)
				{
					mobileParty.ResetTargetParty();
					flag = true;
				}
				if (flag && mobileParty.TargetSettlement != null && (mobileParty.MapEvent == null || mobileParty.MapEvent.IsFinalized) && mobileParty.DefaultBehavior == AiBehavior.GoToSettlement)
				{
					Settlement targetSettlement = mobileParty.TargetSettlement;
					mobileParty.Ai.SetMoveModeHold();
					mobileParty.Ai.SetNavigationModeHold();
					mobileParty.Ai.SetMoveGoToSettlement(targetSettlement);
					flag = false;
				}
				if (flag)
				{
					mobileParty.Ai.SetMoveModeHold();
					mobileParty.Ai.SetNavigationModeHold();
				}
			}
			this.OnRemoveParty();
			this._customHomeSettlement = null;
		}

		public bool IsMoving
		{
			get
			{
				if (this.IsMainParty)
				{
					return !Campaign.Current.IsMainPartyWaiting;
				}
				return this.Position2D != this.TargetPosition || (this.MapEvent == null && this.BesiegedSettlement == null && this.CurrentSettlement == null && this.ShortTermBehavior > AiBehavior.Hold);
			}
		}

		private void ReleaseHeroPrisoners()
		{
			for (int i = this.PrisonRoster.Count - 1; i >= 0; i--)
			{
				if (this.PrisonRoster.GetElementNumber(i) > 0)
				{
					TroopRosterElement elementCopyAtIndex = this.PrisonRoster.GetElementCopyAtIndex(i);
					if (elementCopyAtIndex.Character.IsHero && !elementCopyAtIndex.Character.IsPlayerCharacter)
					{
						EndCaptivityAction.ApplyByReleasedByChoice(elementCopyAtIndex.Character.HeroObject, null);
					}
				}
			}
		}

		public bool ShouldBeIgnored
		{
			get
			{
				return this._ignoredUntilTime.IsFuture;
			}
		}

		private void CreateFigure(Vec2 position, float spawnRadius)
		{
			Vec2 accessiblePointNearPosition = Campaign.Current.MapSceneWrapper.GetAccessiblePointNearPosition(position, spawnRadius);
			this.Position2D = new Vec2(accessiblePointNearPosition.x, accessiblePointNearPosition.y);
			Vec2 vec = new Vec2(1f, 0f);
			float num = MBRandom.RandomFloat * 2f * 3.1415927f;
			vec.RotateCCW(num);
			this.Bearing = vec;
			this.Party.UpdateVisibilityAndInspected(0f);
			this.StartUp();
		}

		internal void SendPartyToReachablePointAroundPosition(Vec2 centerPosition, float distanceLimit, float innerCenterMinimumDistanceLimit = 0f)
		{
			this.Ai.SetMoveGoToPoint(MobilePartyHelper.FindReachablePointAroundPosition(centerPosition, distanceLimit, innerCenterMinimumDistanceLimit));
		}

		internal void TeleportPartyToSafePosition(float maxRadius = 3.3f, float minRadius = 3f)
		{
			for (int i = 0; i < 15; i++)
			{
				Vec2 vec = MobilePartyHelper.FindReachablePointAroundPosition(this.Position2D, maxRadius, minRadius);
				bool flag = true;
				LocatableSearchData<MobileParty> locatableSearchData = MobileParty.StartFindingLocatablesAroundPosition(vec, 1f);
				for (MobileParty mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData); mobileParty != null; mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData))
				{
					if (mobileParty.MapFaction.IsAtWarWith(this.MapFaction))
					{
						flag = false;
						break;
					}
				}
				if (flag)
				{
					this.Position2D = vec;
					return;
				}
			}
		}

		public float FoodChange
		{
			get
			{
				ExplainedNumber explainedNumber = Campaign.Current.Models.MobilePartyFoodConsumptionModel.CalculateDailyBaseFoodConsumptionf(this, false);
				return Campaign.Current.Models.MobilePartyFoodConsumptionModel.CalculateDailyFoodConsumptionf(this, explainedNumber).ResultNumber;
			}
		}

		public float BaseFoodChange
		{
			get
			{
				return Campaign.Current.Models.MobilePartyFoodConsumptionModel.CalculateDailyBaseFoodConsumptionf(this, false).ResultNumber;
			}
		}

		public ExplainedNumber FoodChangeExplained
		{
			get
			{
				ExplainedNumber explainedNumber = Campaign.Current.Models.MobilePartyFoodConsumptionModel.CalculateDailyBaseFoodConsumptionf(this, true);
				return Campaign.Current.Models.MobilePartyFoodConsumptionModel.CalculateDailyFoodConsumptionf(this, explainedNumber);
			}
		}

		public float HealingRateForRegulars
		{
			get
			{
				return Campaign.Current.Models.PartyHealingModel.GetDailyHealingForRegulars(this, false).ResultNumber;
			}
		}

		public ExplainedNumber HealingRateForRegularsExplained
		{
			get
			{
				return Campaign.Current.Models.PartyHealingModel.GetDailyHealingForRegulars(this, true);
			}
		}

		public float HealingRateForHeroes
		{
			get
			{
				return Campaign.Current.Models.PartyHealingModel.GetDailyHealingHpForHeroes(this, false).ResultNumber;
			}
		}

		public ExplainedNumber HealingRateForHeroesExplained
		{
			get
			{
				return Campaign.Current.Models.PartyHealingModel.GetDailyHealingHpForHeroes(this, true);
			}
		}

		public ExplainedNumber SeeingRangeExplanation
		{
			get
			{
				return Campaign.Current.Models.MapVisibilityModel.GetPartySpottingRange(this, true);
			}
		}

		public int InventoryCapacity
		{
			get
			{
				return (int)Campaign.Current.Models.InventoryCapacityModel.CalculateInventoryCapacity(this, false, 0, 0, 0, false).ResultNumber;
			}
		}

		public ExplainedNumber InventoryCapacityExplainedNumber
		{
			get
			{
				return Campaign.Current.Models.InventoryCapacityModel.CalculateInventoryCapacity(this, true, 0, 0, 0, false);
			}
		}

		public MapEventSide MapEventSide
		{
			get
			{
				return this.Party.MapEventSide;
			}
			set
			{
				this.Party.MapEventSide = value;
			}
		}

		public static LocatableSearchData<MobileParty> StartFindingLocatablesAroundPosition(Vec2 position, float radius)
		{
			return Campaign.Current.MobilePartyLocator.StartFindingLocatablesAroundPosition(position, radius);
		}

		public static MobileParty FindNextLocatable(ref LocatableSearchData<MobileParty> data)
		{
			return Campaign.Current.MobilePartyLocator.FindNextLocatable(ref data);
		}

		internal void OnHeroAdded(Hero hero)
		{
			hero.OnAddedToParty(this);
		}

		internal void OnHeroRemoved(Hero hero)
		{
			hero.OnRemovedFromParty(this);
		}

		internal void CheckExitingSettlementParallel(ref int exitingPartyCount, ref MobileParty[] exitingPartyList)
		{
			if (!this.Ai.IsDisabled && this.ShortTermBehavior != AiBehavior.Hold && this.CurrentSettlement != null && (!this.IsCurrentlyGoingToSettlement || this.ShortTermTargetSettlement != this.CurrentSettlement) && !this.IsMainParty && (this.Army == null || this.AttachedTo == null || this.Army.LeaderParty == this))
			{
				int num = Interlocked.Increment(ref exitingPartyCount);
				exitingPartyList[num] = this;
			}
		}

		public bool ComputeIsWaiting()
		{
			return (2f * this.Position2D - this.TargetPosition - this.Ai.NextTargetPosition).LengthSquared < 1E-05f || this.DefaultBehavior == AiBehavior.Hold || ((this.DefaultBehavior == AiBehavior.EngageParty || this.DefaultBehavior == AiBehavior.EscortParty) && this.Ai.AiBehaviorPartyBase != null && this.Ai.AiBehaviorPartyBase.IsValid && this.Ai.AiBehaviorPartyBase.IsActive && this.Ai.AiBehaviorPartyBase.IsMobile && this.Ai.AiBehaviorPartyBase.MobileParty.CurrentSettlement != null);
		}

		bool IMapEntity.ShowCircleAroundEntity
		{
			get
			{
				return this.CurrentSettlement == null;
			}
		}

		void IMapEntity.OnOpenEncyclopedia()
		{
			if (this.IsLordParty && this.LeaderHero != null)
			{
				Campaign.Current.EncyclopediaManager.GoToLink(this.LeaderHero.EncyclopediaLink);
			}
		}

		bool IMapEntity.OnMapClick(bool followModifierUsed)
		{
			if (this.IsMainParty)
			{
				MobileParty.MainParty.Ai.SetMoveModeHold();
			}
			else if (followModifierUsed)
			{
				MobileParty.MainParty.Ai.SetMoveEscortParty(this);
			}
			else
			{
				MobileParty.MainParty.Ai.SetMoveEngageParty(this);
			}
			return true;
		}

		void IMapEntity.OnHover()
		{
			Army army = this.Army;
			if (((army != null) ? army.LeaderParty : null) == this)
			{
				InformationManager.ShowTooltip(typeof(Army), new object[] { this.Army, false, true });
				return;
			}
			InformationManager.ShowTooltip(typeof(MobileParty), new object[] { this, false, true });
		}

		bool IMapEntity.IsEnemyOf(IFaction faction)
		{
			return FactionManager.IsAtWarAgainstFaction(this.MapFaction, faction);
		}

		bool IMapEntity.IsAllyOf(IFaction faction)
		{
			return FactionManager.IsAlliedWithFaction(this.MapFaction, faction);
		}

		public void GetMountAndHarnessVisualIdsForPartyIcon(out string mountStringId, out string harnessStringId)
		{
			mountStringId = "";
			harnessStringId = "";
			PartyComponent partyComponent = this._partyComponent;
			if (partyComponent == null)
			{
				return;
			}
			partyComponent.GetMountAndHarnessVisualIdsForPartyIcon(this.Party, out mountStringId, out harnessStringId);
		}

		Vec2 IMapEntity.InteractionPosition
		{
			get
			{
				return this.Position2D;
			}
		}

		bool IMapEntity.IsMobileEntity
		{
			get
			{
				return true;
			}
		}

		void IMapEntity.OnPartyInteraction(MobileParty engagingParty)
		{
			MobileParty mobileParty = this;
			if (mobileParty.AttachedTo != null && engagingParty != mobileParty.AttachedTo)
			{
				mobileParty = mobileParty.AttachedTo;
			}
			bool flag = false;
			if (mobileParty.CurrentSettlement != null)
			{
				if (mobileParty.MapEvent != null)
				{
					flag = mobileParty.MapEvent.MapEventSettlement == mobileParty.CurrentSettlement && (mobileParty.MapEvent.AttackerSide.LeaderParty.MapFaction == engagingParty.MapFaction || mobileParty.MapEvent.DefenderSide.LeaderParty.MapFaction == engagingParty.MapFaction);
				}
			}
			else
			{
				flag = engagingParty != MobileParty.MainParty || !mobileParty.IsEngaging || mobileParty.ShortTermTargetParty != MobileParty.MainParty;
			}
			if (flag)
			{
				if (engagingParty == MobileParty.MainParty)
				{
					MapState mapState = Game.Current.GameStateManager.ActiveState as MapState;
					if (mapState != null)
					{
						mapState.OnMainPartyEncounter();
					}
				}
				EncounterManager.StartPartyEncounter(engagingParty.Party, mobileParty.Party);
			}
		}

		public void InitializePartyTrade(int initialGold)
		{
			this.IsPartyTradeActive = true;
			this.PartyTradeGold = initialGold;
		}

		public void AddTaxGold(int amount)
		{
			this.PartyTradeTaxGold += amount;
		}

		public static MobileParty CreateParty(string stringId, PartyComponent component, PartyComponent.OnPartyComponentCreatedDelegate delegateFunction = null)
		{
			stringId = Campaign.Current.CampaignObjectManager.FindNextUniqueStringId<MobileParty>(stringId);
			MobileParty mobileParty = new MobileParty();
			mobileParty.StringId = stringId;
			mobileParty._partyComponent = component;
			mobileParty.UpdatePartyComponentFlags();
			if (component != null)
			{
				component.SetMobilePartyInternal(mobileParty);
			}
			if (delegateFunction != null)
			{
				delegateFunction(mobileParty);
			}
			PartyComponent partyComponent = mobileParty.PartyComponent;
			if (partyComponent != null)
			{
				partyComponent.Initialize(mobileParty);
			}
			Campaign.Current.CampaignObjectManager.AddMobileParty(mobileParty);
			CampaignEventDispatcher.Instance.OnMobilePartyCreated(mobileParty);
			return mobileParty;
		}

		public CaravanPartyComponent CaravanPartyComponent
		{
			get
			{
				return this._partyComponent as CaravanPartyComponent;
			}
		}

		public WarPartyComponent WarPartyComponent
		{
			get
			{
				return this._partyComponent as WarPartyComponent;
			}
		}

		public BanditPartyComponent BanditPartyComponent
		{
			get
			{
				return this._partyComponent as BanditPartyComponent;
			}
		}

		public LordPartyComponent LordPartyComponent
		{
			get
			{
				return this._partyComponent as LordPartyComponent;
			}
		}

		public PartyComponent PartyComponent
		{
			get
			{
				return this._partyComponent;
			}
			set
			{
				if (this._partyComponent != value)
				{
					if (this._partyComponent != null)
					{
						this._partyComponent.Finish();
					}
					Campaign.Current.CampaignObjectManager.BeforePartyComponentChanged(this);
					this._partyComponent = value;
					this.UpdatePartyComponentFlags();
					Campaign.Current.CampaignObjectManager.AfterPartyComponentChanged(this);
					if (this._partyComponent != null)
					{
						this._partyComponent.Initialize(this);
					}
				}
			}
		}

		[CachedData]
		public bool IsMilitia { get; private set; }

		[CachedData]
		public bool IsLordParty { get; private set; }

		public void UpdatePartyComponentFlags()
		{
			this.IsLordParty = this._partyComponent is LordPartyComponent;
			this.IsVillager = this._partyComponent is VillagerPartyComponent;
			this.IsMilitia = this._partyComponent is MilitiaPartyComponent;
			this.IsCaravan = this._partyComponent is CaravanPartyComponent;
			this.IsGarrison = this._partyComponent is GarrisonPartyComponent;
			this.IsCustomParty = this._partyComponent is CustomPartyComponent;
			this.IsBandit = this._partyComponent is BanditPartyComponent;
		}

		[CachedData]
		public bool IsVillager { get; private set; }

		[CachedData]
		public bool IsCaravan { get; private set; }

		[CachedData]
		public bool IsGarrison { get; private set; }

		[CachedData]
		public bool IsCustomParty { get; private set; }

		[CachedData]
		public bool IsBandit { get; private set; }

		public bool IsBanditBossParty
		{
			get
			{
				return this.IsBandit && this.BanditPartyComponent.IsBossParty;
			}
		}

		public bool AvoidHostileActions
		{
			get
			{
				return this._partyComponent != null && this._partyComponent.AvoidHostileActions;
			}
		}

		public const int DefaultPartyTradeInitialGold = 5000;

		public const int ClanRoleAssignmentMinimumSkillValue = 0;

		[SaveableField(1001)]
		private Settlement _currentSettlement;

		[CachedData]
		private MBList<MobileParty> _attachedParties;

		[SaveableField(1046)]
		private MobileParty _attachedTo;

		[SaveableField(1006)]
		public float HasUnpaidWages;

		[SaveableField(1060)]
		private Vec2 _eventPositionAdder;

		[SaveableField(1100)]
		private Vec2 _position2D;

		[SaveableField(1024)]
		private bool _isVisible;

		[CachedData]
		internal float _lastCalculatedSpeed = 1f;

		[SaveableField(1025)]
		private bool _isInspected;

		[SaveableField(1955)]
		private CampaignTime _disorganizedUntilTime;

		[CachedData]
		private int _partyPureSpeedLastCheckVersion = -1;

		[CachedData]
		private bool _partyLastCheckIsPrisoner;

		[CachedData]
		private ExplainedNumber _lastCalculatedBaseSpeedExplained;

		[CachedData]
		private bool _partyLastCheckAtNight;

		[CachedData]
		private int _itemRosterVersionNo = -1;

		[CachedData]
		private int _partySizeRatioLastCheckVersion = -1;

		[CachedData]
		private int _latestUsedPaymentRatio = -1;

		[CachedData]
		private float _cachedPartySizeRatio = 1f;

		[CachedData]
		private int _cachedPartySizeLimit;

		[SaveableField(1059)]
		private BesiegerCamp _besiegerCamp;

		[SaveableField(1048)]
		private MobileParty _targetParty;

		[SaveableField(1049)]
		private Settlement _targetSettlement;

		[SaveableField(1053)]
		private Vec2 _targetPosition;

		private int _doNotAttackMainParty;

		[SaveableField(1034)]
		private Settlement _customHomeSettlement;

		[SaveableField(1035)]
		private Army _army;

		[CachedData]
		private bool _isDisorganized;

		[SaveableField(1959)]
		private bool _isCurrentlyUsedByAQuest;

		[SaveableField(1956)]
		private int _partyTradeGold;

		[SaveableField(1063)]
		private CampaignTime _ignoredUntilTime;

		[SaveableField(1071)]
		public Vec2 AverageFleeTargetDirection;

		private bool _besiegerCampResetStarted;

		[CachedData]
		private int _locatorNodeIndex;

		[SaveableField(1120)]
		private Clan _actualClan;

		[SaveableField(1200)]
		private float _moraleDueToEvents;

		[CachedData]
		private PathFaceRecord _lastNavigationFace;

		[CachedData]
		private MapWeatherModel.WeatherEventEffectOnTerrain _lastWeatherTerrainEffect;

		[CachedData]
		private PathFaceRecord _currentNavigationFace;

		[SaveableField(210)]
		private PartyComponent _partyComponent;

		public enum PartyObjective
		{
			Neutral,
			Defensive,
			Aggressive,
			NumberOfPartyObjectives
		}

		internal struct CachedPartyVariables
		{
			internal bool IsAttachedArmyMember;

			internal bool IsArmyLeader;

			internal bool IsMoving;

			internal bool HasMapEvent;

			internal float NextMoveDistance;

			internal Vec2 CurrentPosition;

			internal Vec2 LastCurrentPosition;

			internal Vec2 NextPosition;

			internal Vec2 TargetPartyPositionAtFrameStart;

			internal PathFaceRecord TargetPartyCurrentNavigationFaceAtFrameStart;

			internal PathFaceRecord NextPathFaceRecord;
		}
	}
}
