using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Party.PartyComponents
{
	public class CustomPartyComponent : PartyComponent
	{
		internal static void AutoGeneratedStaticCollectObjectsCustomPartyComponent(object o, List<object> collectedObjects)
		{
			((CustomPartyComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._name);
			collectedObjects.Add(this._homeSettlement);
			collectedObjects.Add(this._owner);
		}

		internal static object AutoGeneratedGetMemberValueAvoidHostileActions(object o)
		{
			return ((CustomPartyComponent)o).AvoidHostileActions;
		}

		internal static object AutoGeneratedGetMemberValue_name(object o)
		{
			return ((CustomPartyComponent)o)._name;
		}

		internal static object AutoGeneratedGetMemberValue_homeSettlement(object o)
		{
			return ((CustomPartyComponent)o)._homeSettlement;
		}

		internal static object AutoGeneratedGetMemberValue_owner(object o)
		{
			return ((CustomPartyComponent)o)._owner;
		}

		internal static object AutoGeneratedGetMemberValue_customPartyBaseSpeed(object o)
		{
			return ((CustomPartyComponent)o)._customPartyBaseSpeed;
		}

		internal static object AutoGeneratedGetMemberValue_partyMountStringId(object o)
		{
			return ((CustomPartyComponent)o)._partyMountStringId;
		}

		internal static object AutoGeneratedGetMemberValue_partyHarnessStringId(object o)
		{
			return ((CustomPartyComponent)o)._partyHarnessStringId;
		}

		public float CustomPartyBaseSpeed
		{
			get
			{
				return this._customPartyBaseSpeed;
			}
			set
			{
				this._customPartyBaseSpeed = value;
			}
		}

		public float BaseSpeed
		{
			get
			{
				return this._customPartyBaseSpeed;
			}
		}

		public override Hero PartyOwner
		{
			get
			{
				return this._owner;
			}
		}

		public override TextObject Name
		{
			get
			{
				return this._name;
			}
		}

		public override Settlement HomeSettlement
		{
			get
			{
				return this._homeSettlement;
			}
		}

		public static MobileParty CreateQuestParty(Vec2 position, float spawnRadius, Settlement homeSettlement, TextObject name, Clan clan, PartyTemplateObject partyTemplate, Hero owner, int troopLimit = 0, string partyMountStringId = "", string partyHarnessStringId = "", float customPartyBaseSpeed = 0f, bool avoidHostileActions = false)
		{
			return MobileParty.CreateParty("quest_party_template_1", new CustomPartyComponent(), delegate(MobileParty mobileParty)
			{
				(mobileParty.PartyComponent as CustomPartyComponent).InitializeQuestPartyProperties(mobileParty, position, spawnRadius, homeSettlement, name, partyTemplate, owner, troopLimit, partyMountStringId, partyHarnessStringId, customPartyBaseSpeed, avoidHostileActions);
				mobileParty.ActualClan = clan;
			});
		}

		public static MobileParty CreateQuestParty(Vec2 position, float spawnRadius, Settlement homeSettlement, TextObject name, Clan clan, TroopRoster troopRoster, TroopRoster prisonerRoster, Hero owner, string partyMountStringId = "", string partyHarnessStringId = "", float customPartyBaseSpeed = 0f, bool avoidHostileActions = false)
		{
			return MobileParty.CreateParty("quest_party_template_1", new CustomPartyComponent(), delegate(MobileParty mobileParty)
			{
				(mobileParty.PartyComponent as CustomPartyComponent).InitializeQuestPartyProperties(mobileParty, position, spawnRadius, homeSettlement, name, troopRoster, prisonerRoster, owner, partyMountStringId, partyHarnessStringId, customPartyBaseSpeed, avoidHostileActions);
				mobileParty.ActualClan = clan;
			});
		}

		private void InitializeQuestPartyProperties(MobileParty mobileParty, Vec2 position, float spawnRadius, Settlement homeSettlement, TextObject name, PartyTemplateObject partyTemplate, Hero owner, int troopLimit, string partyMountStringId, string partyHarnessStringId, float customPartyBaseSpeed, bool avoidHostileActions)
		{
			this._name = name;
			this._homeSettlement = homeSettlement;
			this._owner = owner;
			mobileParty.InitializeMobilePartyAroundPosition(partyTemplate, position, spawnRadius, 0f, troopLimit);
			mobileParty.Party.Visuals.SetMapIconAsDirty();
			this._partyMountStringId = partyMountStringId;
			this._partyHarnessStringId = partyHarnessStringId;
			this.SetBaseSpeed(customPartyBaseSpeed);
			this.AvoidHostileActions = avoidHostileActions;
		}

		private void InitializeQuestPartyProperties(MobileParty mobileParty, Vec2 position, float spawnRadius, Settlement homeSettlement, TextObject name, TroopRoster troopRoster, TroopRoster prisonerRoster, Hero owner, string partyMountStringId, string partyHarnessStringId, float customPartyBaseSpeed, bool avoidHostileActions)
		{
			this._name = name;
			this._homeSettlement = homeSettlement;
			this._owner = owner;
			mobileParty.InitializeMobilePartyAroundPosition(troopRoster, prisonerRoster, position, spawnRadius, 0f);
			mobileParty.Party.Visuals.SetMapIconAsDirty();
			this._partyMountStringId = partyMountStringId;
			this._partyHarnessStringId = partyHarnessStringId;
			this.SetBaseSpeed(customPartyBaseSpeed);
			this.AvoidHostileActions = avoidHostileActions;
		}

		public void SetBaseSpeed(float speed)
		{
			this._customPartyBaseSpeed = speed;
			MobileParty mobileParty = base.MobileParty;
			if (mobileParty == null)
			{
				return;
			}
			mobileParty.UpdateVersionNo();
		}

		public override void GetMountAndHarnessVisualIdsForPartyIcon(PartyBase party, out string mountStringId, out string harnessStringId)
		{
			mountStringId = this._partyMountStringId;
			harnessStringId = this._partyHarnessStringId;
		}

		private const string StringId = "quest_party_template_1";

		[SaveableField(10)]
		private TextObject _name;

		[SaveableField(20)]
		private Settlement _homeSettlement;

		[SaveableField(30)]
		private Hero _owner;

		[SaveableField(40)]
		private float _customPartyBaseSpeed;

		[SaveableField(50)]
		private string _partyMountStringId;

		[SaveableField(60)]
		private string _partyHarnessStringId;

		[SaveableField(70)]
		public bool AvoidHostileActions;
	}
}
