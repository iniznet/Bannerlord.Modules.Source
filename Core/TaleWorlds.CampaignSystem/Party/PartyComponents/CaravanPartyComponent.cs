using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Party.PartyComponents
{
	public class CaravanPartyComponent : PartyComponent
	{
		internal static void AutoGeneratedStaticCollectObjectsCaravanPartyComponent(object o, List<object> collectedObjects)
		{
			((CaravanPartyComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._leader);
			collectedObjects.Add(this.Settlement);
			collectedObjects.Add(this.Owner);
		}

		internal static object AutoGeneratedGetMemberValueSettlement(object o)
		{
			return ((CaravanPartyComponent)o).Settlement;
		}

		internal static object AutoGeneratedGetMemberValueOwner(object o)
		{
			return ((CaravanPartyComponent)o).Owner;
		}

		internal static object AutoGeneratedGetMemberValue_leader(object o)
		{
			return ((CaravanPartyComponent)o)._leader;
		}

		[SaveableProperty(1)]
		public Settlement Settlement { get; private set; }

		[SaveableProperty(2)]
		public Hero Owner { get; private set; }

		public override Hero PartyOwner
		{
			get
			{
				return this.Owner;
			}
		}

		public override TextObject Name
		{
			get
			{
				if (this._cachedName == null)
				{
					this._cachedName = GameTexts.FindText("str_caravan_party_name", null);
					TextObject cachedName = this._cachedName;
					string text = "OWNER";
					Hero leaderHero = base.MobileParty.LeaderHero;
					cachedName.SetCharacterProperties(text, ((leaderHero != null) ? leaderHero.CharacterObject : null) ?? this.Owner.CharacterObject, false);
				}
				return this._cachedName;
			}
		}

		public override Settlement HomeSettlement
		{
			get
			{
				return this.Settlement;
			}
		}

		public override Hero Leader
		{
			get
			{
				return this._leader;
			}
		}

		protected internal CaravanPartyComponent(Settlement settlement, Hero owner, Hero partyLeader)
		{
			this.Settlement = settlement;
			this.Owner = owner;
			this._leader = partyLeader;
		}

		protected override void OnInitialize()
		{
			this.Owner.OwnedCaravans.Add(this);
		}

		protected override void OnFinalize()
		{
			this.Owner.OwnedCaravans.Remove(this);
		}

		public override void ChangePartyLeader(Hero newLeader)
		{
			this._leader = newLeader;
		}

		public override void ClearCachedName()
		{
			this._cachedName = null;
		}

		public static MobileParty CreateCaravanParty(Hero caravanOwner, Settlement spawnSettlement, bool isInitialSpawn = false, Hero caravanLeader = null, ItemRoster caravanItems = null, int troopToBeGiven = 0, bool isElite = false)
		{
			MobileParty mobileParty2 = MobileParty.CreateParty("caravan_template_" + spawnSettlement.Culture.StringId.ToLower() + "_1", new CaravanPartyComponent(spawnSettlement, caravanOwner, caravanLeader), delegate(MobileParty mobileParty)
			{
				(mobileParty.PartyComponent as CaravanPartyComponent).InitializeCaravanOnCreation(mobileParty, caravanLeader, caravanItems, troopToBeGiven, isElite);
			});
			if (spawnSettlement.Party.MapEvent == null && spawnSettlement.SiegeEvent == null)
			{
				mobileParty2.Ai.SetMoveGoToSettlement(spawnSettlement);
				mobileParty2.Ai.RecalculateShortTermAi();
				EnterSettlementAction.ApplyForParty(mobileParty2, spawnSettlement);
			}
			else
			{
				mobileParty2.Ai.SetMoveModeHold();
			}
			if (mobileParty2.LeaderHero != null)
			{
				CampaignEventDispatcher.Instance.OnHeroGetsBusy(mobileParty2.LeaderHero, HeroGetsBusyReasons.BecomeCaravanLeader);
			}
			return mobileParty2;
		}

		private void InitializeCaravanOnCreation(MobileParty mobileParty, Hero caravanLeader, ItemRoster caravanItems, int troopToBeGiven, bool isElite)
		{
			this.InitializeCaravanProperties();
			if (troopToBeGiven == 0)
			{
				float num;
				if (MBRandom.RandomFloat < 0.67f)
				{
					num = (1f - MBRandom.RandomFloat * MBRandom.RandomFloat) * 0.5f + 0.5f;
				}
				else
				{
					num = 1f;
				}
				int num2 = (int)((float)mobileParty.Party.PartySizeLimit * num);
				if (num2 >= 10)
				{
					num2--;
				}
				troopToBeGiven = num2;
			}
			PartyTemplateObject partyTemplateObject = (isElite ? this.Settlement.Culture.EliteCaravanPartyTemplate : this.Settlement.Culture.CaravanPartyTemplate);
			mobileParty.InitializeMobilePartyAtPosition(partyTemplateObject, this.Settlement.GatePosition, troopToBeGiven);
			if (caravanLeader != null)
			{
				mobileParty.MemberRoster.AddToCounts(caravanLeader.CharacterObject, 1, true, 0, 0, true, -1);
			}
			else
			{
				CharacterObject characterObject = CharacterObject.All.First((CharacterObject character) => character.Occupation == Occupation.CaravanGuard && character.IsInfantry && character.Level == 26 && character.Culture == mobileParty.Party.Owner.Culture);
				mobileParty.MemberRoster.AddToCounts(characterObject, 1, true, 0, 0, true, -1);
			}
			mobileParty.ActualClan = this.Owner.Clan;
			mobileParty.Party.Visuals.SetMapIconAsDirty();
			mobileParty.InitializePartyTrade(10000 + ((this.Owner.Clan == Clan.PlayerClan) ? 5000 : 0));
			if (caravanItems != null)
			{
				mobileParty.ItemRoster.Add(caravanItems);
				return;
			}
			float num3 = 10000f;
			ItemObject itemObject = null;
			foreach (ItemObject itemObject2 in Items.All)
			{
				if (itemObject2.ItemCategory == DefaultItemCategories.PackAnimal && !itemObject2.NotMerchandise && (float)itemObject2.Value < num3)
				{
					itemObject = itemObject2;
					num3 = (float)itemObject2.Value;
				}
			}
			if (itemObject != null)
			{
				mobileParty.ItemRoster.Add(new ItemRosterElement(itemObject, (int)((float)mobileParty.MemberRoster.TotalManCount * 0.5f), null));
			}
		}

		private void InitializeCaravanProperties()
		{
			base.MobileParty.Aggressiveness = 0f;
		}

		public override void GetMountAndHarnessVisualIdsForPartyIcon(PartyBase party, out string mountStringId, out string harnessStringId)
		{
			IFaction mapFaction = party.MapFaction;
			string text;
			if (mapFaction == null)
			{
				text = null;
			}
			else
			{
				CultureObject culture = mapFaction.Culture;
				text = ((culture != null) ? culture.StringId : null);
			}
			string text2 = text ?? string.Empty;
			if (text2 == "aserai" || text2 == "khuzait")
			{
				mountStringId = "camel";
				if (party.Index % 2 == 0)
				{
					harnessStringId = "camel_saddle_a";
					return;
				}
				harnessStringId = "camel_saddle_b";
				return;
			}
			else
			{
				mountStringId = "mule";
				int num = party.Index % 3;
				if (num == 0)
				{
					harnessStringId = "mule_load_a";
					return;
				}
				if (num != 1)
				{
					harnessStringId = "mule_load_c";
					return;
				}
				harnessStringId = "mule_load_b";
				return;
			}
		}

		public static void TransferCaravanOwnership(MobileParty caravan, Hero newOwner, Settlement homeSettlement)
		{
			CaravanPartyComponent caravanPartyComponent = new CaravanPartyComponent(homeSettlement, newOwner, caravan.PartyComponent.Leader);
			caravan.PartyComponent = caravanPartyComponent;
			caravanPartyComponent.InitializeCaravanProperties();
			caravan.Party.Visuals.SetMapIconAsDirty();
		}

		public const int DefaultCaravanPartyTradeInitialGold = 10000;

		[CachedData]
		private TextObject _cachedName;

		[SaveableField(3)]
		private Hero _leader;
	}
}
