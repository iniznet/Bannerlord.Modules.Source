using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Party.PartyComponents
{
	// Token: 0x020002B7 RID: 695
	public class BanditPartyComponent : WarPartyComponent
	{
		// Token: 0x060027B8 RID: 10168 RVA: 0x000A9640 File Offset: 0x000A7840
		internal static void AutoGeneratedStaticCollectObjectsBanditPartyComponent(object o, List<object> collectedObjects)
		{
			((BanditPartyComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060027B9 RID: 10169 RVA: 0x000A964E File Offset: 0x000A784E
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._relatedSettlement);
			collectedObjects.Add(this.Hideout);
		}

		// Token: 0x060027BA RID: 10170 RVA: 0x000A966F File Offset: 0x000A786F
		internal static object AutoGeneratedGetMemberValueHideout(object o)
		{
			return ((BanditPartyComponent)o).Hideout;
		}

		// Token: 0x060027BB RID: 10171 RVA: 0x000A967C File Offset: 0x000A787C
		internal static object AutoGeneratedGetMemberValueIsBossParty(object o)
		{
			return ((BanditPartyComponent)o).IsBossParty;
		}

		// Token: 0x060027BC RID: 10172 RVA: 0x000A968E File Offset: 0x000A788E
		internal static object AutoGeneratedGetMemberValue_relatedSettlement(object o)
		{
			return ((BanditPartyComponent)o)._relatedSettlement;
		}

		// Token: 0x060027BD RID: 10173 RVA: 0x000A969C File Offset: 0x000A789C
		public static MobileParty CreateBanditParty(string stringId, Clan clan, Hideout hideout, bool isBossParty)
		{
			return MobileParty.CreateParty(stringId, new BanditPartyComponent(hideout, isBossParty), delegate(MobileParty mobileParty)
			{
				mobileParty.ActualClan = clan;
			});
		}

		// Token: 0x060027BE RID: 10174 RVA: 0x000A96D0 File Offset: 0x000A78D0
		public static MobileParty CreateLooterParty(string stringId, Clan clan, Settlement relatedSettlement, bool isBossParty)
		{
			return MobileParty.CreateParty(stringId, new BanditPartyComponent(relatedSettlement), delegate(MobileParty mobileParty)
			{
				mobileParty.ActualClan = clan;
			});
		}

		// Token: 0x170009E3 RID: 2531
		// (get) Token: 0x060027BF RID: 10175 RVA: 0x000A9702 File Offset: 0x000A7902
		// (set) Token: 0x060027C0 RID: 10176 RVA: 0x000A970A File Offset: 0x000A790A
		[SaveableProperty(1)]
		public Hideout Hideout { get; private set; }

		// Token: 0x170009E4 RID: 2532
		// (get) Token: 0x060027C1 RID: 10177 RVA: 0x000A9713 File Offset: 0x000A7913
		// (set) Token: 0x060027C2 RID: 10178 RVA: 0x000A971B File Offset: 0x000A791B
		[SaveableProperty(2)]
		public bool IsBossParty { get; private set; }

		// Token: 0x170009E5 RID: 2533
		// (get) Token: 0x060027C3 RID: 10179 RVA: 0x000A9724 File Offset: 0x000A7924
		public override Settlement HomeSettlement
		{
			get
			{
				if (this.Hideout == null)
				{
					return this._relatedSettlement;
				}
				return this.Hideout.Settlement;
			}
		}

		// Token: 0x170009E6 RID: 2534
		// (get) Token: 0x060027C4 RID: 10180 RVA: 0x000A9740 File Offset: 0x000A7940
		public override Hero PartyOwner
		{
			get
			{
				Clan actualClan = base.MobileParty.ActualClan;
				if (actualClan == null)
				{
					return null;
				}
				return actualClan.Leader;
			}
		}

		// Token: 0x170009E7 RID: 2535
		// (get) Token: 0x060027C5 RID: 10181 RVA: 0x000A9758 File Offset: 0x000A7958
		public override TextObject Name
		{
			get
			{
				TextObject textObject;
				if (!Game.Current.IsDevelopmentMode)
				{
					if ((textObject = this._cachedName) == null)
					{
						textObject = (this._cachedName = ((this.Hideout != null) ? this.Hideout.MapFaction.Name : base.MobileParty.MapFaction.Name));
					}
				}
				else
				{
					textObject = new TextObject(base.MobileParty.StringId, null);
				}
				TextObject textObject2 = textObject;
				textObject2.SetTextVariable("IS_BANDIT", 1);
				return textObject2;
			}
		}

		// Token: 0x060027C6 RID: 10182 RVA: 0x000A97CE File Offset: 0x000A79CE
		protected internal BanditPartyComponent(Hideout hideout, bool isBossParty)
		{
			this.Hideout = hideout;
			this.IsBossParty = isBossParty;
		}

		// Token: 0x060027C7 RID: 10183 RVA: 0x000A97E4 File Offset: 0x000A79E4
		protected internal BanditPartyComponent(Settlement relatedSettlement)
		{
			this._relatedSettlement = relatedSettlement;
		}

		// Token: 0x060027C8 RID: 10184 RVA: 0x000A97F3 File Offset: 0x000A79F3
		public void SetHomeHideout(Hideout hideout)
		{
			this.Hideout = hideout;
		}

		// Token: 0x060027C9 RID: 10185 RVA: 0x000A97FC File Offset: 0x000A79FC
		public override void ClearCachedName()
		{
			this._cachedName = null;
		}

		// Token: 0x04000C2F RID: 3119
		[CachedData]
		private TextObject _cachedName;

		// Token: 0x04000C31 RID: 3121
		[SaveableField(3)]
		private readonly Settlement _relatedSettlement;
	}
}
