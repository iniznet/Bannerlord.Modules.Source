using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Party.PartyComponents
{
	public class BanditPartyComponent : WarPartyComponent
	{
		internal static void AutoGeneratedStaticCollectObjectsBanditPartyComponent(object o, List<object> collectedObjects)
		{
			((BanditPartyComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._relatedSettlement);
			collectedObjects.Add(this.Hideout);
		}

		internal static object AutoGeneratedGetMemberValueHideout(object o)
		{
			return ((BanditPartyComponent)o).Hideout;
		}

		internal static object AutoGeneratedGetMemberValueIsBossParty(object o)
		{
			return ((BanditPartyComponent)o).IsBossParty;
		}

		internal static object AutoGeneratedGetMemberValue_relatedSettlement(object o)
		{
			return ((BanditPartyComponent)o)._relatedSettlement;
		}

		public static MobileParty CreateBanditParty(string stringId, Clan clan, Hideout hideout, bool isBossParty)
		{
			return MobileParty.CreateParty(stringId, new BanditPartyComponent(hideout, isBossParty), delegate(MobileParty mobileParty)
			{
				mobileParty.ActualClan = clan;
			});
		}

		public static MobileParty CreateLooterParty(string stringId, Clan clan, Settlement relatedSettlement, bool isBossParty)
		{
			return MobileParty.CreateParty(stringId, new BanditPartyComponent(relatedSettlement), delegate(MobileParty mobileParty)
			{
				mobileParty.ActualClan = clan;
			});
		}

		[SaveableProperty(1)]
		public Hideout Hideout { get; private set; }

		[SaveableProperty(2)]
		public bool IsBossParty { get; private set; }

		public override Settlement HomeSettlement
		{
			get
			{
				if (this.Hideout == null)
				{
					return this._relatedSettlement;
				}
				return this.Hideout.Settlement;
			}
		}

		public override Hero PartyOwner
		{
			get
			{
				Clan actualClan = base.MobileParty.ActualClan;
				if (actualClan == null)
				{
					return null;
				}
				return actualClan.Leader;
			}
		}

		public override TextObject Name
		{
			get
			{
				TextObject textObject;
				if (!Game.Current.IsDevelopmentMode)
				{
					if ((textObject = this._cachedName) == null)
					{
						textObject = (this._cachedName = ((this.Hideout != null) ? this.Hideout.MapFaction.Name : base.MobileParty.MapFaction.Name));
					}
				}
				else
				{
					textObject = new TextObject(base.MobileParty.StringId, null);
				}
				TextObject textObject2 = textObject;
				textObject2.SetTextVariable("IS_BANDIT", 1);
				return textObject2;
			}
		}

		protected internal BanditPartyComponent(Hideout hideout, bool isBossParty)
		{
			this.Hideout = hideout;
			this.IsBossParty = isBossParty;
		}

		protected internal BanditPartyComponent(Settlement relatedSettlement)
		{
			this._relatedSettlement = relatedSettlement;
		}

		public void SetHomeHideout(Hideout hideout)
		{
			this.Hideout = hideout;
		}

		public override void ClearCachedName()
		{
			this._cachedName = null;
		}

		[CachedData]
		private TextObject _cachedName;

		[SaveableField(3)]
		private readonly Settlement _relatedSettlement;
	}
}
