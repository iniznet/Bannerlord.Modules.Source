using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Party
{
	// Token: 0x020002A0 RID: 672
	public class MobilePartyAi
	{
		// Token: 0x06002567 RID: 9575 RVA: 0x0009DE44 File Offset: 0x0009C044
		internal static void AutoGeneratedStaticCollectObjectsMobilePartyAi(object o, List<object> collectedObjects)
		{
			((MobilePartyAi)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002568 RID: 9576 RVA: 0x0009DE54 File Offset: 0x0009C054
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._mobileParty);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._initiativeRestoreTime, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._nextAiCheckTime, collectedObjects);
			collectedObjects.Add(this._aiBehaviorMapEntity);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._enableAgainAtHour, collectedObjects);
			collectedObjects.Add(this.MoveTargetParty);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.DoNotAttackMainPartyUntil, collectedObjects);
		}

		// Token: 0x06002569 RID: 9577 RVA: 0x0009DEC9 File Offset: 0x0009C0C9
		internal static object AutoGeneratedGetMemberValue_enableAgainAtHour(object o)
		{
			return ((MobilePartyAi)o)._enableAgainAtHour;
		}

		// Token: 0x0600256A RID: 9578 RVA: 0x0009DEDB File Offset: 0x0009C0DB
		internal static object AutoGeneratedGetMemberValueRethinkAtNextHourlyTick(object o)
		{
			return ((MobilePartyAi)o).RethinkAtNextHourlyTick;
		}

		// Token: 0x0600256B RID: 9579 RVA: 0x0009DEED File Offset: 0x0009C0ED
		internal static object AutoGeneratedGetMemberValueDoNotMakeNewDecisions(object o)
		{
			return ((MobilePartyAi)o).DoNotMakeNewDecisions;
		}

		// Token: 0x0600256C RID: 9580 RVA: 0x0009DEFF File Offset: 0x0009C0FF
		internal static object AutoGeneratedGetMemberValueIsAlerted(object o)
		{
			return ((MobilePartyAi)o).IsAlerted;
		}

		// Token: 0x0600256D RID: 9581 RVA: 0x0009DF11 File Offset: 0x0009C111
		internal static object AutoGeneratedGetMemberValuePartyMoveMode(object o)
		{
			return ((MobilePartyAi)o).PartyMoveMode;
		}

		// Token: 0x0600256E RID: 9582 RVA: 0x0009DF23 File Offset: 0x0009C123
		internal static object AutoGeneratedGetMemberValueMoveTargetParty(object o)
		{
			return ((MobilePartyAi)o).MoveTargetParty;
		}

		// Token: 0x0600256F RID: 9583 RVA: 0x0009DF30 File Offset: 0x0009C130
		internal static object AutoGeneratedGetMemberValueNextTargetPosition(object o)
		{
			return ((MobilePartyAi)o).NextTargetPosition;
		}

		// Token: 0x06002570 RID: 9584 RVA: 0x0009DF42 File Offset: 0x0009C142
		internal static object AutoGeneratedGetMemberValueDoNotAttackMainPartyUntil(object o)
		{
			return ((MobilePartyAi)o).DoNotAttackMainPartyUntil;
		}

		// Token: 0x06002571 RID: 9585 RVA: 0x0009DF54 File Offset: 0x0009C154
		internal static object AutoGeneratedGetMemberValueHourCounter(object o)
		{
			return ((MobilePartyAi)o).HourCounter;
		}

		// Token: 0x06002572 RID: 9586 RVA: 0x0009DF66 File Offset: 0x0009C166
		internal static object AutoGeneratedGetMemberValueBehaviorTarget(object o)
		{
			return ((MobilePartyAi)o).BehaviorTarget;
		}

		// Token: 0x06002573 RID: 9587 RVA: 0x0009DF78 File Offset: 0x0009C178
		internal static object AutoGeneratedGetMemberValueDefaultBehaviorNeedsUpdate(object o)
		{
			return ((MobilePartyAi)o).DefaultBehaviorNeedsUpdate;
		}

		// Token: 0x06002574 RID: 9588 RVA: 0x0009DF8A File Offset: 0x0009C18A
		internal static object AutoGeneratedGetMemberValue_isDisabled(object o)
		{
			return ((MobilePartyAi)o)._isDisabled;
		}

		// Token: 0x06002575 RID: 9589 RVA: 0x0009DF9C File Offset: 0x0009C19C
		internal static object AutoGeneratedGetMemberValue_mobileParty(object o)
		{
			return ((MobilePartyAi)o)._mobileParty;
		}

		// Token: 0x06002576 RID: 9590 RVA: 0x0009DFA9 File Offset: 0x0009C1A9
		internal static object AutoGeneratedGetMemberValue_attackInitiative(object o)
		{
			return ((MobilePartyAi)o)._attackInitiative;
		}

		// Token: 0x06002577 RID: 9591 RVA: 0x0009DFBB File Offset: 0x0009C1BB
		internal static object AutoGeneratedGetMemberValue_avoidInitiative(object o)
		{
			return ((MobilePartyAi)o)._avoidInitiative;
		}

		// Token: 0x06002578 RID: 9592 RVA: 0x0009DFCD File Offset: 0x0009C1CD
		internal static object AutoGeneratedGetMemberValue_initiativeRestoreTime(object o)
		{
			return ((MobilePartyAi)o)._initiativeRestoreTime;
		}

		// Token: 0x06002579 RID: 9593 RVA: 0x0009DFDF File Offset: 0x0009C1DF
		internal static object AutoGeneratedGetMemberValue_aiBehaviorResetNeeded(object o)
		{
			return ((MobilePartyAi)o)._aiBehaviorResetNeeded;
		}

		// Token: 0x0600257A RID: 9594 RVA: 0x0009DFF1 File Offset: 0x0009C1F1
		internal static object AutoGeneratedGetMemberValue_nextAiCheckTime(object o)
		{
			return ((MobilePartyAi)o)._nextAiCheckTime;
		}

		// Token: 0x0600257B RID: 9595 RVA: 0x0009E003 File Offset: 0x0009C203
		internal static object AutoGeneratedGetMemberValue_numberOfRecentFleeingFromAParty(object o)
		{
			return ((MobilePartyAi)o)._numberOfRecentFleeingFromAParty;
		}

		// Token: 0x0600257C RID: 9596 RVA: 0x0009E015 File Offset: 0x0009C215
		internal static object AutoGeneratedGetMemberValue_defaultBehavior(object o)
		{
			return ((MobilePartyAi)o)._defaultBehavior;
		}

		// Token: 0x0600257D RID: 9597 RVA: 0x0009E027 File Offset: 0x0009C227
		internal static object AutoGeneratedGetMemberValue_aiPathMode(object o)
		{
			return ((MobilePartyAi)o)._aiPathMode;
		}

		// Token: 0x0600257E RID: 9598 RVA: 0x0009E039 File Offset: 0x0009C239
		internal static object AutoGeneratedGetMemberValue_aiPathNeeded(object o)
		{
			return ((MobilePartyAi)o)._aiPathNeeded;
		}

		// Token: 0x0600257F RID: 9599 RVA: 0x0009E04B File Offset: 0x0009C24B
		internal static object AutoGeneratedGetMemberValue_formationPosition(object o)
		{
			return ((MobilePartyAi)o)._formationPosition;
		}

		// Token: 0x06002580 RID: 9600 RVA: 0x0009E05D File Offset: 0x0009C25D
		internal static object AutoGeneratedGetMemberValue_moveTargetPoint(object o)
		{
			return ((MobilePartyAi)o)._moveTargetPoint;
		}

		// Token: 0x06002581 RID: 9601 RVA: 0x0009E06F File Offset: 0x0009C26F
		internal static object AutoGeneratedGetMemberValue_aiPathLastPosition(object o)
		{
			return ((MobilePartyAi)o)._aiPathLastPosition;
		}

		// Token: 0x06002582 RID: 9602 RVA: 0x0009E081 File Offset: 0x0009C281
		internal static object AutoGeneratedGetMemberValue_aiBehaviorMapEntity(object o)
		{
			return ((MobilePartyAi)o)._aiBehaviorMapEntity;
		}

		// Token: 0x1700095B RID: 2395
		// (get) Token: 0x06002583 RID: 9603 RVA: 0x0009E08E File Offset: 0x0009C28E
		// (set) Token: 0x06002584 RID: 9604 RVA: 0x0009E096 File Offset: 0x0009C296
		public bool IsDisabled
		{
			get
			{
				return this._isDisabled;
			}
			private set
			{
				this._isDisabled = value;
			}
		}

		// Token: 0x1700095C RID: 2396
		// (get) Token: 0x06002585 RID: 9605 RVA: 0x0009E09F File Offset: 0x0009C29F
		// (set) Token: 0x06002586 RID: 9606 RVA: 0x0009E0A7 File Offset: 0x0009C2A7
		[SaveableProperty(3)]
		private CampaignTime _enableAgainAtHour { get; set; }

		// Token: 0x1700095D RID: 2397
		// (get) Token: 0x06002587 RID: 9607 RVA: 0x0009E0B0 File Offset: 0x0009C2B0
		// (set) Token: 0x06002588 RID: 9608 RVA: 0x0009E0B8 File Offset: 0x0009C2B8
		[SaveableProperty(10)]
		public bool RethinkAtNextHourlyTick { get; set; }

		// Token: 0x1700095E RID: 2398
		// (get) Token: 0x06002589 RID: 9609 RVA: 0x0009E0C1 File Offset: 0x0009C2C1
		// (set) Token: 0x0600258A RID: 9610 RVA: 0x0009E0C9 File Offset: 0x0009C2C9
		[SaveableProperty(11)]
		public bool DoNotMakeNewDecisions { get; private set; }

		// Token: 0x1700095F RID: 2399
		// (get) Token: 0x0600258B RID: 9611 RVA: 0x0009E0D2 File Offset: 0x0009C2D2
		// (set) Token: 0x0600258C RID: 9612 RVA: 0x0009E0DA File Offset: 0x0009C2DA
		[SaveableProperty(17)]
		public bool IsAlerted { get; private set; }

		// Token: 0x17000960 RID: 2400
		// (get) Token: 0x0600258D RID: 9613 RVA: 0x0009E0E3 File Offset: 0x0009C2E3
		// (set) Token: 0x0600258E RID: 9614 RVA: 0x0009E0EB File Offset: 0x0009C2EB
		[SaveableProperty(24)]
		public MoveModeType PartyMoveMode { get; private set; }

		// Token: 0x17000961 RID: 2401
		// (get) Token: 0x0600258F RID: 9615 RVA: 0x0009E0F4 File Offset: 0x0009C2F4
		// (set) Token: 0x06002590 RID: 9616 RVA: 0x0009E0FC File Offset: 0x0009C2FC
		[SaveableProperty(26)]
		public MobileParty MoveTargetParty { get; private set; }

		// Token: 0x17000962 RID: 2402
		// (get) Token: 0x06002591 RID: 9617 RVA: 0x0009E105 File Offset: 0x0009C305
		// (set) Token: 0x06002592 RID: 9618 RVA: 0x0009E10D File Offset: 0x0009C30D
		[SaveableProperty(27)]
		public Vec2 NextTargetPosition { get; private set; }

		// Token: 0x17000963 RID: 2403
		// (get) Token: 0x06002593 RID: 9619 RVA: 0x0009E116 File Offset: 0x0009C316
		// (set) Token: 0x06002594 RID: 9620 RVA: 0x0009E11E File Offset: 0x0009C31E
		[SaveableProperty(31)]
		public CampaignTime DoNotAttackMainPartyUntil { get; internal set; }

		// Token: 0x17000964 RID: 2404
		// (get) Token: 0x06002595 RID: 9621 RVA: 0x0009E127 File Offset: 0x0009C327
		// (set) Token: 0x06002596 RID: 9622 RVA: 0x0009E12F File Offset: 0x0009C32F
		[CachedData]
		public int PathBegin { get; private set; }

		// Token: 0x17000965 RID: 2405
		// (get) Token: 0x06002597 RID: 9623 RVA: 0x0009E138 File Offset: 0x0009C338
		// (set) Token: 0x06002598 RID: 9624 RVA: 0x0009E140 File Offset: 0x0009C340
		[CachedData]
		public NavigationPath Path { get; private set; }

		// Token: 0x17000966 RID: 2406
		// (get) Token: 0x06002599 RID: 9625 RVA: 0x0009E149 File Offset: 0x0009C349
		// (set) Token: 0x0600259A RID: 9626 RVA: 0x0009E151 File Offset: 0x0009C351
		[CachedData]
		public bool ForceAiNoPathMode { get; set; }

		// Token: 0x17000967 RID: 2407
		// (get) Token: 0x0600259B RID: 9627 RVA: 0x0009E15A File Offset: 0x0009C35A
		// (set) Token: 0x0600259C RID: 9628 RVA: 0x0009E164 File Offset: 0x0009C364
		public AiBehavior DefaultBehavior
		{
			get
			{
				return this._defaultBehavior;
			}
			private set
			{
				if (this._defaultBehavior != value)
				{
					this._numberOfRecentFleeingFromAParty = 0;
					this._defaultBehavior = value;
					this.DefaultBehaviorNeedsUpdate = true;
					if (this._mobileParty != MobileParty.MainParty && this._mobileParty.BesiegedSettlement != null && value != AiBehavior.BesiegeSettlement && value != AiBehavior.EscortParty && value != AiBehavior.AssaultSettlement)
					{
						this._mobileParty.ResetBesiegedSettlement();
					}
				}
			}
		}

		// Token: 0x17000968 RID: 2408
		// (get) Token: 0x0600259D RID: 9629 RVA: 0x0009E1C1 File Offset: 0x0009C3C1
		public bool NeedTargetReset
		{
			get
			{
				return this._numberOfRecentFleeingFromAParty >= 6;
			}
		}

		// Token: 0x17000969 RID: 2409
		// (get) Token: 0x0600259E RID: 9630 RVA: 0x0009E1CF File Offset: 0x0009C3CF
		public int NumberOfRecentFleeingFromAParty
		{
			get
			{
				return this._numberOfRecentFleeingFromAParty;
			}
		}

		// Token: 0x1700096A RID: 2410
		// (get) Token: 0x0600259F RID: 9631 RVA: 0x0009E1D7 File Offset: 0x0009C3D7
		private float AvoidInitiative
		{
			get
			{
				if (!this._initiativeRestoreTime.IsPast)
				{
					return this._avoidInitiative;
				}
				return 1f;
			}
		}

		// Token: 0x1700096B RID: 2411
		// (get) Token: 0x060025A0 RID: 9632 RVA: 0x0009E1F2 File Offset: 0x0009C3F2
		private float AttackInitiative
		{
			get
			{
				if (!this._initiativeRestoreTime.IsPast)
				{
					return this._attackInitiative;
				}
				return 1f;
			}
		}

		// Token: 0x1700096C RID: 2412
		// (get) Token: 0x060025A1 RID: 9633 RVA: 0x0009E20D File Offset: 0x0009C40D
		// (set) Token: 0x060025A2 RID: 9634 RVA: 0x0009E215 File Offset: 0x0009C415
		public PartyBase AiBehaviorPartyBase { get; private set; }

		// Token: 0x1700096D RID: 2413
		// (get) Token: 0x060025A3 RID: 9635 RVA: 0x0009E21E File Offset: 0x0009C41E
		// (set) Token: 0x060025A4 RID: 9636 RVA: 0x0009E228 File Offset: 0x0009C428
		public IMapEntity AiBehaviorMapEntity
		{
			get
			{
				return this._aiBehaviorMapEntity;
			}
			set
			{
				if (this._aiBehaviorMapEntity != value)
				{
					this._aiBehaviorMapEntity = value;
					this.AiBehaviorPartyBase = null;
					if (this._aiBehaviorMapEntity != null)
					{
						MobileParty mobileParty;
						if ((mobileParty = this._aiBehaviorMapEntity as MobileParty) != null)
						{
							this.AiBehaviorPartyBase = mobileParty.Party;
							return;
						}
						Settlement settlement;
						if ((settlement = this._aiBehaviorMapEntity as Settlement) != null)
						{
							this.AiBehaviorPartyBase = settlement.Party;
							return;
						}
					}
					else
					{
						this.AiBehaviorPartyBase = null;
					}
				}
			}
		}

		// Token: 0x060025A5 RID: 9637 RVA: 0x0009E294 File Offset: 0x0009C494
		internal MobilePartyAi(MobileParty mobileParty)
		{
			this._mobileParty = mobileParty;
			this.RethinkAtNextHourlyTick = false;
			this.HourCounter = MBRandom.RandomInt(100);
			this._lastTargetedParties = new List<MobileParty>();
			this.InitCached();
			this._formationPosition.x = 10000f;
			this._formationPosition.y = 10000f;
			while (this._formationPosition.LengthSquared > 0.36f || this._formationPosition.LengthSquared < 0.22f)
			{
				this._formationPosition = new Vec2(MBRandom.RandomFloat * 1.2f - 0.6f, MBRandom.RandomFloat * 1.2f - 0.6f);
			}
		}

		// Token: 0x060025A6 RID: 9638 RVA: 0x0009E372 File Offset: 0x0009C572
		internal void StartUp()
		{
			this.NextTargetPosition = this._mobileParty.Position2D;
			this._aiPathLastFace = PathFaceRecord.NullFaceRecord;
			this._moveTargetPoint = this._mobileParty.Position2D;
			this.ForceAiNoPathMode = false;
		}

		// Token: 0x060025A7 RID: 9639 RVA: 0x0009E3A8 File Offset: 0x0009C5A8
		internal void OnGameInitialized()
		{
			this.UpdatePathModeWithPosition(this._moveTargetPoint);
			this.ComputePath(this._moveTargetPoint);
		}

		// Token: 0x060025A8 RID: 9640 RVA: 0x0009E3C3 File Offset: 0x0009C5C3
		internal void InitCached()
		{
			this.Path = new NavigationPath();
			this._aiPathLastFace = PathFaceRecord.NullFaceRecord;
			this.ForceAiNoPathMode = false;
		}

		// Token: 0x060025A9 RID: 9641 RVA: 0x0009E3E4 File Offset: 0x0009C5E4
		internal void PreAfterLoad()
		{
			if (this.AiBehaviorMapEntity != null)
			{
				Settlement settlement;
				if ((settlement = this.AiBehaviorMapEntity as Settlement) != null)
				{
					this.AiBehaviorPartyBase = settlement.Party;
					return;
				}
				MobileParty mobileParty;
				if ((mobileParty = this.AiBehaviorMapEntity as MobileParty) != null)
				{
					this.AiBehaviorPartyBase = mobileParty.Party;
				}
			}
		}

		// Token: 0x060025AA RID: 9642 RVA: 0x0009E430 File Offset: 0x0009C630
		internal void OnBeforeLoad()
		{
			this._lastTargetedParties = new List<MobileParty>();
		}

		// Token: 0x060025AB RID: 9643 RVA: 0x0009E43D File Offset: 0x0009C63D
		internal void HourlyTick()
		{
			if (this._numberOfRecentFleeingFromAParty > 5 && MBRandom.RandomFloat < 0.2f)
			{
				this._numberOfRecentFleeingFromAParty -= 5;
			}
			this.RemoveOneOfLastTargettedPartiesWithProbability(0.2f);
		}

		// Token: 0x060025AC RID: 9644 RVA: 0x0009E470 File Offset: 0x0009C670
		internal void Tick(float dt)
		{
			if (this.DefaultBehaviorNeedsUpdate)
			{
				this._nextAiCheckTime = CampaignTime.Now;
				this.DefaultBehaviorNeedsUpdate = false;
			}
			if (!this._nextAiCheckTime.IsFuture)
			{
				this.TickInternal();
				long num = (long)(0.25f * (0.6f + 0.1f * MBRandom.RandomFloat) * ((this._mobileParty.ShortTermTargetParty == MobileParty.MainParty && this._mobileParty.ShortTermBehavior == AiBehavior.EngageParty) ? 0.5f : 1f) * 60f * 60f);
				this._nextAiCheckTime = CampaignTime.Now + CampaignTime.Seconds(num);
			}
		}

		// Token: 0x060025AD RID: 9645 RVA: 0x0009E514 File Offset: 0x0009C714
		private void TickInternal()
		{
			if (this._mobileParty.MapEvent != null)
			{
				return;
			}
			if (this._mobileParty == MobileParty.MainParty && MobileParty.MainParty.DefaultBehavior == AiBehavior.EngageParty && !MobileParty.MainParty.TargetParty.IsVisible)
			{
				MobileParty.MainParty.Ai.SetMoveModeHold();
			}
			if (this.IsDisabled && this.EnableAgainAtHourIsPast())
			{
				this.EnableAi();
				return;
			}
			if (this._mobileParty.Army != null && this._mobileParty.Army.LeaderParty.AttachedParties.Contains(this._mobileParty))
			{
				return;
			}
			AiBehavior aiBehavior;
			PartyBase partyBase;
			Vec2 vec;
			this.GetBehaviors(out aiBehavior, out partyBase, out vec);
			if (this.IsDisabled && partyBase == null)
			{
				return;
			}
			this.SetAiBehavior(aiBehavior, partyBase, vec);
		}

		// Token: 0x060025AE RID: 9646 RVA: 0x0009E5D4 File Offset: 0x0009C7D4
		private void RemoveOneOfLastTargettedPartiesWithProbability(float probabilityToRemove)
		{
			int num = -1;
			for (int i = 0; i < this._lastTargetedParties.Count; i++)
			{
				if (MBRandom.RandomFloat < probabilityToRemove)
				{
					num = i;
					break;
				}
			}
			if (num >= 0)
			{
				this._lastTargetedParties.RemoveAt(num);
			}
		}

		// Token: 0x060025AF RID: 9647 RVA: 0x0009E615 File Offset: 0x0009C815
		public void CheckPartyNeedsUpdate()
		{
			if (this.DefaultBehaviorNeedsUpdate)
			{
				this.Tick(0f);
				EncounterManager.HandleEncounterForMobileParty(this._mobileParty, 0f);
			}
		}

		// Token: 0x060025B0 RID: 9648 RVA: 0x0009E63A File Offset: 0x0009C83A
		public void SetMoveModeHold()
		{
			this.DefaultBehavior = AiBehavior.Hold;
			this.SetShortTermBehavior(AiBehavior.Hold, null);
			this._mobileParty.TargetSettlement = null;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x060025B1 RID: 9649 RVA: 0x0009E663 File Offset: 0x0009C863
		public void SetMoveEngageParty(MobileParty party)
		{
			this.DefaultBehavior = AiBehavior.EngageParty;
			this._mobileParty.TargetParty = party;
			this._mobileParty.TargetSettlement = null;
		}

		// Token: 0x060025B2 RID: 9650 RVA: 0x0009E684 File Offset: 0x0009C884
		public void SetMoveGoAroundParty(MobileParty party)
		{
			this.DefaultBehavior = AiBehavior.GoAroundParty;
			this._mobileParty.TargetParty = party;
			this._mobileParty.TargetSettlement = null;
		}

		// Token: 0x060025B3 RID: 9651 RVA: 0x0009E6A5 File Offset: 0x0009C8A5
		public void SetMoveGoToSettlement(Settlement settlement)
		{
			this.DefaultBehavior = AiBehavior.GoToSettlement;
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
			this._mobileParty.TargetPosition = settlement.GatePosition;
		}

		// Token: 0x060025B4 RID: 9652 RVA: 0x0009E6D7 File Offset: 0x0009C8D7
		public void SetMoveGoToPoint(Vec2 point)
		{
			this.DefaultBehavior = AiBehavior.GoToPoint;
			this._mobileParty.TargetPosition = point;
			this._mobileParty.TargetSettlement = null;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x060025B5 RID: 9653 RVA: 0x0009E705 File Offset: 0x0009C905
		public void SetMoveEscortParty(MobileParty mobileParty)
		{
			this.DefaultBehavior = AiBehavior.EscortParty;
			this._mobileParty.TargetParty = mobileParty;
			this._mobileParty.TargetSettlement = null;
		}

		// Token: 0x060025B6 RID: 9654 RVA: 0x0009E727 File Offset: 0x0009C927
		public void SetMovePatrolAroundPoint(Vec2 point)
		{
			this._mobileParty.TargetParty = null;
			this._mobileParty.TargetSettlement = null;
			this.DefaultBehavior = AiBehavior.PatrolAroundPoint;
			this._mobileParty.TargetPosition = point;
			this._aiBehaviorResetNeeded = true;
		}

		// Token: 0x060025B7 RID: 9655 RVA: 0x0009E75C File Offset: 0x0009C95C
		public void SetMovePatrolAroundSettlement(Settlement settlement)
		{
			this.SetMovePatrolAroundPoint(settlement.GatePosition);
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x060025B8 RID: 9656 RVA: 0x0009E782 File Offset: 0x0009C982
		public void SetMoveRaidSettlement(Settlement settlement)
		{
			this.DefaultBehavior = AiBehavior.RaidSettlement;
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x060025B9 RID: 9657 RVA: 0x0009E7A4 File Offset: 0x0009C9A4
		public void SetMoveBesiegeSettlement(Settlement settlement)
		{
			if (this._mobileParty.BesiegedSettlement != null && this._mobileParty.BesiegedSettlement != settlement)
			{
				this._mobileParty.ResetBesiegedSettlement();
			}
			this.DefaultBehavior = AiBehavior.BesiegeSettlement;
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x060025BA RID: 9658 RVA: 0x0009E7F6 File Offset: 0x0009C9F6
		public void SetMoveDefendSettlement(Settlement settlement)
		{
			this.DefaultBehavior = AiBehavior.DefendSettlement;
			this._mobileParty.TargetSettlement = settlement;
			this._mobileParty.TargetParty = null;
		}

		// Token: 0x060025BB RID: 9659 RVA: 0x0009E818 File Offset: 0x0009CA18
		internal void GetBehaviors(out AiBehavior bestAiBehavior, out PartyBase behaviorParty, out Vec2 bestTargetPoint)
		{
			bestAiBehavior = this._mobileParty.DefaultBehavior;
			MobileParty mobileParty = this._mobileParty.TargetParty;
			bestTargetPoint = this._mobileParty.TargetPosition;
			Vec2 vec = new Vec2(0f, 0f);
			MobileParty mobileParty2 = null;
			if (Campaign.Current.GameStarted && this._mobileParty != MobileParty.MainParty && this._mobileParty.BesiegedSettlement == null && (this._mobileParty.DefaultBehavior != AiBehavior.GoToSettlement || this._mobileParty.TargetSettlement.Town == null || this._mobileParty.CurrentSettlement == this._mobileParty.TargetSettlement || !this._mobileParty.TargetSettlement.Town.IsTaken) && (this._mobileParty.Army == null || !this._mobileParty.Army.LeaderParty.AttachedParties.Contains(this._mobileParty)))
			{
				AiBehavior aiBehavior;
				MobileParty mobileParty3;
				float num;
				this.GetBestInitiativeBehavior(out aiBehavior, out mobileParty3, out num, out vec);
				if (!this.DoNotMakeNewDecisions || (mobileParty3 != null && this._mobileParty.TargetSettlement != null && ((mobileParty3.MapEvent != null && mobileParty3.MapEvent.MapEventSettlement == this._mobileParty.TargetSettlement) || mobileParty3.BesiegedSettlement == this._mobileParty.TargetSettlement)))
				{
					if (this._mobileParty.ShortTermBehavior == AiBehavior.EngageParty && this._mobileParty.ShortTermTargetParty != null && (num < 1f || aiBehavior != AiBehavior.EngageParty || mobileParty3 != this._mobileParty.ShortTermTargetParty))
					{
						this._lastTargetedParties.Add(this._mobileParty.ShortTermTargetParty);
					}
					if (num > 1f)
					{
						bestAiBehavior = aiBehavior;
						mobileParty = mobileParty3;
					}
					else if (this._mobileParty.ShortTermBehavior == AiBehavior.FleeToPoint || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToGate)
					{
						float num2 = this._mobileParty.AiBehaviorTarget.DistanceSquared(this._mobileParty.Position2D);
						float lastCalculatedSpeed = this._mobileParty._lastCalculatedSpeed;
						if (num2 >= lastCalculatedSpeed * lastCalculatedSpeed * 0.25f * 0.25f)
						{
							bestAiBehavior = AiBehavior.FleeToPoint;
							mobileParty = this._mobileParty.ShortTermTargetParty;
						}
					}
					if (aiBehavior == AiBehavior.DefendSettlement && mobileParty3.DefaultBehavior == AiBehavior.DefendSettlement)
					{
						if (mobileParty3.MapEvent != null)
						{
							bestAiBehavior = AiBehavior.EngageParty;
							mobileParty = mobileParty3.ShortTermTargetParty;
						}
						else
						{
							mobileParty2 = mobileParty3;
						}
					}
				}
			}
			this.IsAlerted = false;
			AiBehavior aiBehavior2 = bestAiBehavior;
			Vec2 vec2 = bestTargetPoint;
			Settlement targetSettlement = this._mobileParty.TargetSettlement;
			MobileParty mobileParty4 = mobileParty;
			switch (bestAiBehavior)
			{
			case AiBehavior.GoToSettlement:
				if (this._mobileParty.CurrentSettlement == this._mobileParty.TargetSettlement)
				{
					this.GetInSettlementBehavior(ref aiBehavior2, ref mobileParty4);
				}
				break;
			case AiBehavior.BesiegeSettlement:
				if (!this._mobileParty.IsMainParty)
				{
					this.GetBesiegeBehavior(out aiBehavior2, out vec2, out targetSettlement);
				}
				break;
			case AiBehavior.EngageParty:
				this.SetShortTermBehavior(AiBehavior.EngageParty, mobileParty4);
				break;
			case AiBehavior.GoAroundParty:
				this.GetGoAroundPartyBehavior(this._mobileParty.TargetParty, mobileParty2, out aiBehavior2, out vec2, out mobileParty4);
				break;
			case AiBehavior.FleeToPoint:
				if (this._mobileParty.DefaultBehavior == AiBehavior.PatrolAroundPoint)
				{
					this._aiBehaviorResetNeeded = true;
				}
				this.IsAlerted = true;
				this.GetFleeBehavior(out aiBehavior2, out vec2, ref targetSettlement, mobileParty, vec);
				break;
			case AiBehavior.PatrolAroundPoint:
				this.GetPatrolBehavior(out aiBehavior2, out vec2, out mobileParty4, this._mobileParty.TargetPosition);
				break;
			case AiBehavior.EscortParty:
				this.GetFollowBehavior(ref aiBehavior2, ref targetSettlement, ref mobileParty4, mobileParty);
				break;
			case AiBehavior.DefendSettlement:
			{
				Settlement settlement = this._mobileParty.TargetSettlement;
				if (settlement == null)
				{
					settlement = mobileParty.TargetSettlement;
				}
				if (settlement.LastAttackerParty != null && settlement.LastAttackerParty.IsActive)
				{
					this.GetGoAroundPartyBehavior(settlement.LastAttackerParty, mobileParty2, out aiBehavior2, out vec2, out mobileParty4);
				}
				break;
			}
			}
			bestAiBehavior = aiBehavior2;
			bestTargetPoint = vec2;
			if (mobileParty4 != null)
			{
				mobileParty = mobileParty4;
			}
			if (bestAiBehavior == AiBehavior.GoToSettlement || bestAiBehavior == AiBehavior.RaidSettlement || bestAiBehavior == AiBehavior.AssaultSettlement || bestAiBehavior == AiBehavior.BesiegeSettlement || (bestAiBehavior == AiBehavior.DefendSettlement && mobileParty == null))
			{
				behaviorParty = ((targetSettlement != null) ? targetSettlement.Party : this._mobileParty.TargetSettlement.Party);
				return;
			}
			behaviorParty = ((mobileParty != null) ? mobileParty.Party : null);
		}

		// Token: 0x060025BC RID: 9660 RVA: 0x0009EC48 File Offset: 0x0009CE48
		private void GetInSettlementBehavior(ref AiBehavior shortTermBehavior, ref MobileParty shortTermTargetParty)
		{
			if (this._mobileParty.MapEvent != null)
			{
				MobileParty mobileParty = this._mobileParty.MapEvent.AttackerSide.LeaderParty.MobileParty;
				if (FactionManager.IsAtWarAgainstFaction(mobileParty.MapFaction, this._mobileParty.MapFaction))
				{
					shortTermBehavior = AiBehavior.EngageParty;
					shortTermTargetParty = mobileParty;
				}
			}
		}

		// Token: 0x060025BD RID: 9661 RVA: 0x0009EC9B File Offset: 0x0009CE9B
		private void GetFollowBehavior(ref AiBehavior shortTermBehavior, ref Settlement shortTermTargetSettlement, ref MobileParty shortTermTargetParty, MobileParty followedParty)
		{
			shortTermBehavior = AiBehavior.EscortParty;
			if (!followedParty.IsActive)
			{
				shortTermBehavior = AiBehavior.Hold;
				return;
			}
			if (followedParty.CurrentSettlement != null)
			{
				shortTermBehavior = AiBehavior.GoToSettlement;
				shortTermTargetSettlement = followedParty.CurrentSettlement;
			}
		}

		// Token: 0x060025BE RID: 9662 RVA: 0x0009ECC4 File Offset: 0x0009CEC4
		private void GetBesiegeBehavior(out AiBehavior shortTermBehavior, out Vec2 shortTermTargetPoint, out Settlement shortTermTargetSettlement)
		{
			if (this._mobileParty.TargetSettlement != null)
			{
				if (this._mobileParty.TargetSettlement.SiegeEvent != null && this._mobileParty.TargetSettlement.SiegeEvent.BesiegerCamp.BesiegerParty == this._mobileParty && this._mobileParty.TargetSettlement.SiegeEvent.BesiegerCamp.IsReadyToBesiege)
				{
					shortTermTargetSettlement = this._mobileParty.TargetSettlement;
					shortTermBehavior = AiBehavior.AssaultSettlement;
				}
				else if (this._mobileParty.BesiegedSettlement == this._mobileParty.TargetSettlement)
				{
					shortTermTargetSettlement = null;
					shortTermBehavior = AiBehavior.Hold;
				}
				else
				{
					shortTermTargetSettlement = this._mobileParty.TargetSettlement;
					shortTermBehavior = AiBehavior.GoToSettlement;
				}
			}
			else
			{
				shortTermTargetSettlement = null;
				shortTermBehavior = AiBehavior.GoToPoint;
			}
			shortTermTargetPoint = this._mobileParty.TargetSettlement.GatePosition;
		}

		// Token: 0x060025BF RID: 9663 RVA: 0x0009ED94 File Offset: 0x0009CF94
		private void GetFleeBehavior(out AiBehavior fleeBehaviorInternal, out Vec2 fleeTargetPoint, ref Settlement fleeTargetSettlement, MobileParty partyToFleeFrom, Vec2 avarageEnemyVec)
		{
			fleeBehaviorInternal = this._mobileParty.ShortTermBehavior;
			fleeTargetPoint = this._mobileParty.AiBehaviorTarget;
			if (this._mobileParty.CurrentSettlement != null)
			{
				fleeBehaviorInternal = AiBehavior.GoToSettlement;
				fleeTargetSettlement = this._mobileParty.CurrentSettlement;
			}
			else if (this._mobileParty.DefaultBehavior == AiBehavior.GoToSettlement && ((partyToFleeFrom.MapEvent != null && partyToFleeFrom.MapEvent.MapEventSettlement == this._mobileParty.TargetSettlement) || partyToFleeFrom.BesiegedSettlement == this._mobileParty.TargetSettlement))
			{
				fleeBehaviorInternal = AiBehavior.FleeToPoint;
				fleeTargetPoint = this._mobileParty.Position2D;
			}
			else if (this._mobileParty.ShortTermBehavior != AiBehavior.FleeToPoint || this._mobileParty.ShortTermTargetParty != partyToFleeFrom || this._mobileParty.AiBehaviorTarget.Distance(this._mobileParty.Position2D) < this._mobileParty._lastCalculatedSpeed * 0.25f)
			{
				fleeBehaviorInternal = AiBehavior.FleeToPoint;
				fleeTargetPoint = this._mobileParty.Position2D;
				Vec2 vec = partyToFleeFrom.Position2D - this._mobileParty.Position2D;
				float num = MathF.Min(3f, vec.Length);
				float num2 = 2f * MBRandom.RandomFloat - 1f;
				float num3 = 2f * MBRandom.RandomFloat - 1f;
				vec.Normalize();
				this._mobileParty.AverageFleeTargetDirection = new Vec2((this._mobileParty.AverageFleeTargetDirection.x * (float)(this._numberOfRecentFleeingFromAParty - 1) + vec.x) / (float)this._numberOfRecentFleeingFromAParty, (this._mobileParty.AverageFleeTargetDirection.y * (float)(this._numberOfRecentFleeingFromAParty - 1) + vec.y) / (float)this._numberOfRecentFleeingFromAParty);
				this._mobileParty.AverageFleeTargetDirection.Normalize();
				vec += 3f * avarageEnemyVec;
				vec.Normalize();
				Vec2 vec2 = -vec + 0.1f * this._mobileParty.Bearing + new Vec2(num2 * (num / 10f), num3 * (num / 10f));
				vec2.Normalize();
				float num4 = (partyToFleeFrom.GetTotalStrengthWithFollowers(false) + 0.1f) / (this._mobileParty.GetTotalStrengthWithFollowers(false) + 0.1f) * 3f;
				num4 += (float)this.NumberOfRecentFleeingFromAParty * 2f;
				num4 = MathF.Min(num4, this._mobileParty.IsLordParty ? 10f : 5f);
				fleeBehaviorInternal = AiBehavior.FleeToPoint;
				vec2.Normalize();
				this.GetAccessibleTargetPointInDirection(out fleeTargetPoint, vec2, num4, this._mobileParty.Position2D, 100, 0.1f);
			}
			Vec2 vec3 = fleeTargetPoint - this._mobileParty.Position2D;
			vec3.Normalize();
			if (this._mobileParty.IsLordParty && this._mobileParty.MapFaction.IsKingdomFaction)
			{
				ValueTuple<AiBehavior, Settlement> behaviorForNearbySettlementToFlee = this.GetBehaviorForNearbySettlementToFlee(partyToFleeFrom.Position2D, vec3);
				AiBehavior item = behaviorForNearbySettlementToFlee.Item1;
				Settlement item2 = behaviorForNearbySettlementToFlee.Item2;
				if (item != AiBehavior.None)
				{
					fleeBehaviorInternal = item;
					if (item == AiBehavior.GoToSettlement)
					{
						fleeTargetSettlement = item2;
					}
					else if (item == AiBehavior.FleeToGate)
					{
						fleeTargetPoint = item2.GatePosition;
					}
				}
			}
			MobileParty nearbyPartyToFlee = this.GetNearbyPartyToFlee(partyToFleeFrom, vec3);
			if (nearbyPartyToFlee != null)
			{
				fleeBehaviorInternal = AiBehavior.FleeToParty;
				fleeTargetPoint = nearbyPartyToFlee.Position2D;
			}
			if (this.IsFleeBehavior(fleeBehaviorInternal))
			{
				this._numberOfRecentFleeingFromAParty++;
			}
		}

		// Token: 0x060025C0 RID: 9664 RVA: 0x0009F118 File Offset: 0x0009D318
		private void GetGoAroundPartyBehavior(MobileParty targetParty, MobileParty bestInitiativeAllyPartyToEscort, out AiBehavior goAroundPartyBehavior, out Vec2 goAroundPartyTargetPoint, out MobileParty goAroundPartyTargetParty)
		{
			Vec2 position2D = targetParty.Position2D;
			goAroundPartyTargetPoint = position2D;
			goAroundPartyTargetParty = targetParty;
			Vec2 vec = this._mobileParty.Position2D - position2D;
			float length = vec.Length;
			vec.Normalize();
			bool flag = false;
			Vec2 vec2 = goAroundPartyTargetPoint;
			int num = 5;
			while (num >= 0 && !flag)
			{
				int num2 = this._mobileParty.RandomInt(-4, 5);
				int num3 = 1;
				while (num3 <= 2 && !flag)
				{
					for (int i = num2; i < num2 + 9; i++)
					{
						Vec2 vec3 = vec;
						vec3.RotateCCW((float)i / 9f * 1.5707964f * (float)num3 * 0.5f * (MathF.Min(MathF.Max(0f, length - 3.6000001f), 9f) / 9f));
						Vec2 vec4 = position2D + vec3 * 3f * 1.2f * ((float)num / 5f);
						PathFaceRecord faceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(this._mobileParty.Position2D);
						PathFaceRecord faceIndex2 = Campaign.Current.MapSceneWrapper.GetFaceIndex(vec4);
						if (Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, faceIndex2, false) && PartyBase.IsPositionOkForTraveling(vec4))
						{
							flag = true;
							vec2 = vec4;
							break;
						}
					}
					num3++;
				}
				num--;
			}
			if (flag)
			{
				if (MBRandom.RandomFloat < 0.2f * this._mobileParty.AiBehaviorTarget.DistanceSquared(vec2) || targetParty._lastCalculatedSpeed > this._mobileParty._lastCalculatedSpeed)
				{
					goAroundPartyTargetPoint = vec2;
				}
				else
				{
					goAroundPartyTargetPoint = this._mobileParty.AiBehaviorTarget;
				}
				goAroundPartyBehavior = AiBehavior.GoToPoint;
			}
			else
			{
				goAroundPartyBehavior = AiBehavior.EngageParty;
				goAroundPartyTargetParty = targetParty;
			}
			if (bestInitiativeAllyPartyToEscort != null && targetParty.SiegeEvent != null && targetParty.BesiegerCamp.BesiegerParty == targetParty)
			{
				goAroundPartyBehavior = AiBehavior.EscortParty;
				goAroundPartyTargetParty = bestInitiativeAllyPartyToEscort;
			}
		}

		// Token: 0x060025C1 RID: 9665 RVA: 0x0009F314 File Offset: 0x0009D514
		private void GetPatrolBehavior(out AiBehavior patrolBehavior, out Vec2 patrolTargetPoint, out MobileParty patrolTargetParty, Vec2 patrollingCenterPoint)
		{
			float num = this._mobileParty.AiBehaviorTarget.DistanceSquared(this._mobileParty.Position2D);
			patrolBehavior = AiBehavior.GoToPoint;
			patrolTargetPoint = this._mobileParty.AiBehaviorTarget;
			patrolTargetParty = null;
			if (this._mobileParty.ShortTermBehavior == AiBehavior.GoToSettlement || this._mobileParty.ShortTermBehavior == AiBehavior.EngageParty || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToPoint)
			{
				this._aiBehaviorResetNeeded = true;
			}
			if (num < 1f || this._aiBehaviorResetNeeded)
			{
				if (MBRandom.RandomFloat < 0.125f || this._aiBehaviorResetNeeded)
				{
					Vec2 vec = patrollingCenterPoint - this._mobileParty.Position2D;
					float num2 = vec.Normalize();
					float maxPatrolRadiusForSettlement = this.GetMaxPatrolRadiusForSettlement();
					float num3 = MathF.Max(num2 * 0.25f, maxPatrolRadiusForSettlement);
					if (num2 > num3 * (3.2f / (this._mobileParty.IsCurrentlyUsedByAQuest ? 1.5f : 1f)))
					{
						patrolBehavior = AiBehavior.GoToPoint;
						patrolTargetPoint = ((this._mobileParty.TargetSettlement != null) ? this._mobileParty.TargetSettlement.GatePosition : patrollingCenterPoint);
					}
					else
					{
						float num4 = ((this._mobileParty.TargetSettlement != null && this._mobileParty.TargetSettlement.NumberOfEnemiesSpottedAround > 1f) ? (MathF.Sqrt(this._mobileParty.TargetSettlement.NumberOfEnemiesSpottedAround) - 1f) : 0f);
						float num5 = MathF.Max(0f, MathF.Min(0.9f, num2 / (num3 / (((this._mobileParty.TargetSettlement != null && this._mobileParty.TargetSettlement.MapFaction == this._mobileParty.MapFaction) ? num4 : 0f) + 1f)) - 0.4f));
						Vec2 vec2 = (1f - num5) * this._mobileParty.Bearing + num5 * vec;
						vec2.RotateCCW((-0.3f + MBRandom.RandomFloat) * 0.15f);
						vec2.Normalize();
						float num6 = 0.5f + 0.5f * MBRandom.RandomFloat;
						float num7 = ((num2 > maxPatrolRadiusForSettlement * 4f) ? 0.2f : ((num2 > maxPatrolRadiusForSettlement * 2f) ? 0.4f : ((num2 > maxPatrolRadiusForSettlement) ? 0.6f : 1f)));
						this.GetAccessibleTargetPointInDirection(out patrolTargetPoint, vec2, num3 * num6, patrollingCenterPoint, 20, num7);
					}
					this._aiBehaviorResetNeeded = false;
					return;
				}
				patrolTargetPoint = this._mobileParty.Position2D;
			}
		}

		// Token: 0x060025C2 RID: 9666 RVA: 0x0009F598 File Offset: 0x0009D798
		private void GetBestInitiativeBehavior(out AiBehavior bestInitiativeBehavior, out MobileParty bestInitiativeTargetParty, out float bestInitiativeBehaviorScore, out Vec2 averageEnemyVec)
		{
			MobilePartyAi.DangerousPartiesAndTheirVecs.Clear();
			bestInitiativeBehaviorScore = 0f;
			bestInitiativeTargetParty = null;
			bestInitiativeBehavior = AiBehavior.None;
			averageEnemyVec = Vec2.Zero;
			if (this._mobileParty.CurrentSettlement != null && (this._mobileParty.IsGarrison || this._mobileParty.IsMilitia || this._mobileParty.IsBandit))
			{
				return;
			}
			LocatableSearchData<MobileParty> locatableSearchData = MobileParty.StartFindingLocatablesAroundPosition(this._mobileParty.Position2D, 9f);
			MobileParty mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
			while (mobileParty != null)
			{
				if (mobileParty.MapEvent != null && MobileParty.MainParty.MapEvent == mobileParty.MapEvent && (MobileParty.MainParty.Army == null || MobileParty.MainParty.Army.LeaderParty == MobileParty.MainParty) && mobileParty != MobileParty.MainParty)
				{
					mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
				}
				else
				{
					if (mobileParty != this._mobileParty && mobileParty.IsActive && this.IsEnemy(mobileParty.Party) && !mobileParty.ShouldBeIgnored && (mobileParty.CurrentSettlement == null || mobileParty.IsGarrison || mobileParty.IsLordParty))
					{
						Settlement currentSettlement = this._mobileParty.CurrentSettlement;
						if (((currentSettlement != null) ? currentSettlement.SiegeEvent : null) == null && (!mobileParty.IsGarrison || this._mobileParty.IsBandit) && (mobileParty.BesiegerCamp == null || mobileParty.BesiegerCamp.BesiegerParty == mobileParty) && (mobileParty.Army == null || mobileParty.Army.LeaderParty == mobileParty || mobileParty.AttachedTo == null) && (mobileParty.MapEvent == null || mobileParty == MobileParty.MainParty || mobileParty.Party.MapEvent.MapEventSettlement != null || mobileParty.Party == mobileParty.Party.MapEvent.GetLeaderParty(BattleSideEnum.Attacker) || mobileParty.Party == mobileParty.Party.MapEvent.GetLeaderParty(BattleSideEnum.Defender)) && (mobileParty.MapEvent == null || this.IsEnemy(mobileParty.MapEvent.AttackerSide.LeaderParty) != this.IsEnemy(mobileParty.MapEvent.DefenderSide.LeaderParty)))
						{
							Vec2 vec = ((mobileParty.BesiegedSettlement != null) ? mobileParty.VisualPosition2DWithoutError : mobileParty.Position2D);
							float num = this._mobileParty.Position2D.Distance(vec);
							if (num >= 6f)
							{
								mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
								continue;
							}
							float num2 = 1f + MathF.Max(0f, (num - 1f) / 4f);
							num2 = ((num2 > 2f) ? 2f : num2);
							float num3 = 0.01f + ((this._mobileParty.Army != null && this._mobileParty == this._mobileParty.Army.LeaderParty) ? this._mobileParty.Army.TotalStrength : this._mobileParty.Party.TotalStrength);
							float num4 = this._mobileParty.Aggressiveness;
							float num5 = 0f;
							float num6 = 0.01f;
							if (mobileParty.BesiegerCamp != null)
							{
								using (IEnumerator<PartyBase> enumerator = mobileParty.SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).GetEnumerator())
								{
									while (enumerator.MoveNext())
									{
										PartyBase partyBase = enumerator.Current;
										num6 += partyBase.TotalStrength;
									}
									goto IL_36D;
								}
								goto IL_34C;
							}
							goto IL_34C;
							IL_36D:
							MobileParty mobileParty2 = null;
							LocatableSearchData<MobileParty> locatableSearchData2 = MobileParty.StartFindingLocatablesAroundPosition(this._mobileParty.Position2D, 9f);
							MobileParty mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
							while (mobileParty3 != null)
							{
								if ((this._mobileParty.MapFaction == mobileParty3.MapFaction && mobileParty3.BesiegedSettlement != null) || (mobileParty3.MapEvent != null && mobileParty3.MapEvent != mobileParty.MapEvent))
								{
									mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
								}
								else if (mobileParty3.AttachedTo != null)
								{
									mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
								}
								else
								{
									if (mobileParty3 != this._mobileParty && mobileParty3 != mobileParty)
									{
										Vec2 vec2 = ((mobileParty3.BesiegedSettlement != null) ? mobileParty3.VisualPosition2DWithoutError : mobileParty3.Position2D);
										float num7 = ((mobileParty3 != mobileParty) ? vec2.Distance(vec) : this._mobileParty.Position2D.Distance(vec2));
										if (num7 > 6f)
										{
											mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
											continue;
										}
										if (mobileParty3.BesiegerCamp != null && mobileParty3.BesiegerCamp.BesiegerParty != mobileParty3)
										{
											mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
											continue;
										}
										PartyBase partyBase2 = mobileParty3.Ai.AiBehaviorPartyBase;
										if (mobileParty3.Army != null)
										{
											partyBase2 = mobileParty3.Army.LeaderParty.Ai.AiBehaviorPartyBase;
										}
										bool flag = partyBase2 != null && (partyBase2 == mobileParty.Party || (partyBase2.MapEvent != null && partyBase2.MapEvent == mobileParty.Party.MapEvent));
										bool flag2 = (this._mobileParty.Army != null && this._mobileParty.Army == mobileParty3.Army && this._mobileParty.Army.DoesLeaderPartyAndAttachedPartiesContain(this._mobileParty)) || (mobileParty.Army != null && mobileParty.Army == mobileParty3.Army) || (mobileParty.BesiegedSettlement != null && mobileParty.BesiegedSettlement == mobileParty3.BesiegedSettlement) || (num > 3f && flag) || (num7 > 3f && flag && mobileParty != MobileParty.MainParty && (MobileParty.MainParty.Army == null || mobileParty != MobileParty.MainParty.Army.LeaderParty));
										if (this._mobileParty.MapFaction == mobileParty3.MapFaction && mobileParty.BesiegedSettlement != null && mobileParty3.DefaultBehavior == AiBehavior.DefendSettlement && mobileParty.BesiegedSettlement == mobileParty3.TargetSettlement && mobileParty3.Party.TotalStrength > this._mobileParty.Party.TotalStrength * 1.25f)
										{
											mobileParty2 = ((mobileParty3.Army != null) ? mobileParty3.Army.LeaderParty : mobileParty3);
										}
										if (flag2 || num7 < 3f * num2)
										{
											float num8 = (flag2 ? 1f : ((num7 < 3f) ? 1f : (1f - (num7 - 3f) / (3f * (num2 - 1f)))));
											num8 = MathF.Min(1f, num8);
											bool flag3 = mobileParty.MapEvent != null && mobileParty.MapEvent == mobileParty3.MapEvent;
											float num9 = ((mobileParty3.Army != null && mobileParty3.Army.LeaderParty == mobileParty3) ? mobileParty3.Army.TotalStrength : mobileParty3.Party.TotalStrength);
											if ((mobileParty3.Aggressiveness > 0.01f || mobileParty3.IsGarrison || flag3) && mobileParty3.MapFaction == mobileParty.MapFaction)
											{
												if (mobileParty3.BesiegerCamp != null)
												{
													using (IEnumerator<PartyBase> enumerator = mobileParty3.SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).GetEnumerator())
													{
														while (enumerator.MoveNext())
														{
															PartyBase partyBase3 = enumerator.Current;
															if (partyBase3.MobileParty.AttachedTo == null)
															{
																float num10 = num6;
																Army army = partyBase3.MobileParty.Army;
																num6 = num10 + ((army != null) ? army.TotalStrength : partyBase3.TotalStrength);
															}
														}
														goto IL_76E;
													}
												}
												num6 += num9 * num8;
											}
											IL_76E:
											if (this._mobileParty.MapFaction == mobileParty3.MapFaction)
											{
												bool flag4 = mobileParty3.Aggressiveness > 0.01f || (mobileParty3.CurrentSettlement != null && mobileParty3.CurrentSettlement == mobileParty.CurrentSettlement);
												bool flag5 = mobileParty != MobileParty.MainParty || mobileParty3.Ai.CanAttack(MobileParty.MainParty);
												bool flag6 = mobileParty3.CurrentSettlement == null || !mobileParty3.CurrentSettlement.IsHideout;
												if (flag3 || (flag4 && flag5 && flag6))
												{
													Settlement currentSettlement2 = mobileParty3.CurrentSettlement;
													if (((currentSettlement2 != null) ? currentSettlement2.SiegeEvent : null) == null || mobileParty != mobileParty3.CurrentSettlement.SiegeEvent.BesiegerCamp.BesiegerParty)
													{
														if (mobileParty3.BesiegerCamp != null)
														{
															using (IEnumerator<PartyBase> enumerator = mobileParty3.SiegeEvent.BesiegerCamp.GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).GetEnumerator())
															{
																while (enumerator.MoveNext())
																{
																	PartyBase partyBase4 = enumerator.Current;
																	if (partyBase4.MobileParty.AttachedTo == null)
																	{
																		float num11 = num3;
																		Army army2 = partyBase4.MobileParty.Army;
																		num3 = num11 + ((army2 != null) ? army2.TotalStrength : partyBase4.TotalStrength);
																		if (partyBase4.MobileParty.Aggressiveness > num4)
																		{
																			num4 = partyBase4.MobileParty.Aggressiveness;
																		}
																	}
																}
																goto IL_8F7;
															}
														}
														num3 += num9 * num8;
														if (mobileParty3.Aggressiveness > num4)
														{
															num4 = mobileParty3.Aggressiveness;
														}
														if (mobileParty3.CurrentSettlement != null)
														{
															num5 += num9 * num8;
														}
													}
												}
											}
										}
									}
									IL_8F7:
									mobileParty3 = MobileParty.FindNextLocatable(ref locatableSearchData2);
								}
							}
							if (this._mobileParty.CurrentSettlement != null)
							{
								num3 -= num5;
							}
							if (mobileParty.LastVisitedSettlement != null && mobileParty.LastVisitedSettlement.IsVillage && mobileParty.Position2D.DistanceSquared(mobileParty.LastVisitedSettlement.Position2D) < 1f && mobileParty.LastVisitedSettlement.MapFaction.IsAtWarWith(this._mobileParty.MapFaction))
							{
								num6 += 20f;
							}
							float num12 = num3 / num6;
							num12 *= (((this._mobileParty.IsCaravan || this._mobileParty.IsVillager) && mobileParty == MobileParty.MainParty) ? 0.6f : 1f);
							if (mobileParty.IsCaravan)
							{
								if (this._mobileParty.IsBandit)
								{
									float playerProgress = Campaign.Current.Models.PlayerProgressionModel.GetPlayerProgress();
									num12 *= 2.4f - 0.9f * playerProgress;
								}
								else if (this._mobileParty.LeaderHero != null && this._mobileParty.LeaderHero.IsMinorFactionHero)
								{
									num12 *= 1.5f;
								}
							}
							if (mobileParty.MapEvent != null && mobileParty.MapEvent.IsSiegeAssault && mobileParty == mobileParty.MapEvent.AttackerSide.LeaderParty.MobileParty)
							{
								float settlementAdvantage = Campaign.Current.Models.CombatSimulationModel.GetSettlementAdvantage(mobileParty.MapEvent.MapEventSettlement);
								if (num5 * MathF.Sqrt(settlementAdvantage) > num6)
								{
									mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
									continue;
								}
							}
							float num13;
							float num14;
							this.CalculateInitiativeScoresForEnemy(mobileParty, out num13, out num14, num12, num4);
							if (mobileParty.CurrentSettlement != null && mobileParty.MapEvent == null)
							{
								num14 = 0f;
							}
							if (num13 > 1f)
							{
								MobilePartyAi.DangerousPartiesAndTheirVecs.Add(new ValueTuple<float, Vec2>(num13, (vec - this._mobileParty.Position2D).Normalized()));
							}
							if (mobileParty2 == null)
							{
								if (num13 > bestInitiativeBehaviorScore || (num13 * 0.75f > bestInitiativeBehaviorScore && bestInitiativeBehavior == AiBehavior.EngageParty))
								{
									bestInitiativeBehavior = AiBehavior.FleeToPoint;
									bestInitiativeTargetParty = mobileParty;
									bestInitiativeBehaviorScore = num13;
								}
								if (num14 > bestInitiativeBehaviorScore && (bestInitiativeBehaviorScore < num14 * 0.75f || bestInitiativeBehavior == AiBehavior.EngageParty))
								{
									bestInitiativeBehavior = AiBehavior.EngageParty;
									bestInitiativeTargetParty = mobileParty;
									bestInitiativeBehaviorScore = num14;
								}
							}
							else if (this._mobileParty.Aggressiveness > 0.01f)
							{
								bestInitiativeBehavior = AiBehavior.DefendSettlement;
								bestInitiativeTargetParty = mobileParty2;
								bestInitiativeBehaviorScore = num14;
							}
							mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
							continue;
							IL_34C:
							float num15 = num6;
							Army army3 = mobileParty.Army;
							num6 = num15 + ((army3 != null) ? army3.TotalStrength : mobileParty.Party.TotalStrength);
							goto IL_36D;
						}
					}
					mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
				}
			}
			if (bestInitiativeBehavior == AiBehavior.FleeToPoint || bestInitiativeBehavior == AiBehavior.FleeToGate)
			{
				float num16 = 0f;
				for (int i = 0; i < 8; i++)
				{
					Vec2 vec3 = new Vec2(MathF.Sin((float)i / 8f * 3.1415927f * 2f), MathF.Cos((float)i / 8f * 3.1415927f * 2f));
					float num17 = 0f;
					for (int j = 0; j < MobilePartyAi.DangerousPartiesAndTheirVecs.Count; j++)
					{
						Vec2 item = MobilePartyAi.DangerousPartiesAndTheirVecs[j].Item2;
						float num18 = item.DistanceSquared(vec3);
						if (num18 > 1f)
						{
							num18 = 1f + (num18 - 1f) * 0.5f;
						}
						num17 += num18 * MobilePartyAi.DangerousPartiesAndTheirVecs[j].Item1;
					}
					if (num17 > num16)
					{
						averageEnemyVec = -vec3;
						num16 = num17;
					}
				}
			}
		}

		// Token: 0x060025C3 RID: 9667 RVA: 0x000A0218 File Offset: 0x0009E418
		private void SetAiBehavior(AiBehavior newAiBehavior, PartyBase targetPartyFigure, Vec2 bestTargetPoint)
		{
			IMapEntity mapEntity;
			if (targetPartyFigure == null)
			{
				mapEntity = null;
			}
			else if (!targetPartyFigure.IsSettlement)
			{
				IMapEntity mapEntity2 = targetPartyFigure.MobileParty;
				mapEntity = mapEntity2;
			}
			else
			{
				IMapEntity mapEntity2 = targetPartyFigure.Settlement;
				mapEntity = mapEntity2;
			}
			IMapEntity mapEntity3 = mapEntity;
			this.SetShortTermBehavior(newAiBehavior, mapEntity3);
			this.BehaviorTarget = bestTargetPoint;
			this.UpdateBehavior();
		}

		// Token: 0x060025C4 RID: 9668 RVA: 0x000A025C File Offset: 0x0009E45C
		internal void SetShortTermBehavior(AiBehavior newBehavior, IMapEntity mapEntity)
		{
			AiBehavior shortTermBehavior = this._mobileParty.ShortTermBehavior;
			if (shortTermBehavior != newBehavior)
			{
				if (this.IsFleeBehavior(shortTermBehavior) && !this.IsFleeBehavior(newBehavior))
				{
					this._numberOfRecentFleeingFromAParty = 0;
				}
				this._mobileParty.ShortTermBehavior = newBehavior;
			}
			this.AiBehaviorMapEntity = mapEntity;
		}

		// Token: 0x060025C5 RID: 9669 RVA: 0x000A02A8 File Offset: 0x0009E4A8
		private void UpdateBehavior()
		{
			if (this._mobileParty.ShortTermBehavior == AiBehavior.GoToPoint || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToPoint || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToGate || this._mobileParty.ShortTermBehavior == AiBehavior.FleeToParty)
			{
				this.SetNavigationModePoint(this._mobileParty.AiBehaviorTarget);
				return;
			}
			if ((this._mobileParty.ShortTermBehavior == AiBehavior.GoToSettlement || this._mobileParty.ShortTermBehavior == AiBehavior.RaidSettlement || this._mobileParty.ShortTermBehavior == AiBehavior.AssaultSettlement || this._mobileParty.ShortTermBehavior == AiBehavior.BesiegeSettlement) && this.AiBehaviorPartyBase != null && this.AiBehaviorPartyBase.IsValid)
			{
				this.SetNavigationModePoint(this.AiBehaviorPartyBase.Settlement.GatePosition);
				return;
			}
			AiBehavior shortTermBehavior = this._mobileParty.ShortTermBehavior;
			if (shortTermBehavior != AiBehavior.Hold)
			{
				switch (shortTermBehavior)
				{
				case AiBehavior.EngageParty:
					this.SetNavigationModeParty(this.AiBehaviorPartyBase.MobileParty);
					return;
				case AiBehavior.FleeToPoint:
				case AiBehavior.FleeToGate:
				case AiBehavior.FleeToParty:
				case AiBehavior.DefendSettlement:
					return;
				case AiBehavior.EscortParty:
					this.SetNavigationModeEscort(this.AiBehaviorPartyBase.MobileParty);
					return;
				}
				Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Party\\MobilePartyAi.cs", "UpdateBehavior", 1383);
				return;
			}
			this.SetNavigationModeHold();
		}

		// Token: 0x060025C6 RID: 9670 RVA: 0x000A03EC File Offset: 0x0009E5EC
		public void RecalculateShortTermAi()
		{
			if (this._mobileParty.DefaultBehavior == AiBehavior.RaidSettlement)
			{
				this.SetShortTermBehavior(AiBehavior.RaidSettlement, this._mobileParty.TargetSettlement);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.BesiegeSettlement)
			{
				this.SetShortTermBehavior(AiBehavior.BesiegeSettlement, this._mobileParty.TargetSettlement);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.GoToSettlement)
			{
				this.SetShortTermBehavior(AiBehavior.GoToSettlement, this._mobileParty.TargetSettlement);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.EngageParty)
			{
				this.SetShortTermBehavior(AiBehavior.EngageParty, this._mobileParty.TargetParty);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.DefendSettlement)
			{
				this.SetShortTermBehavior(AiBehavior.GoToPoint, this._mobileParty.TargetSettlement);
				return;
			}
			if (this._mobileParty.DefaultBehavior == AiBehavior.EscortParty)
			{
				this.SetShortTermBehavior(AiBehavior.EscortParty, this._mobileParty.TargetParty);
				return;
			}
			if (this.DefaultBehavior == AiBehavior.None)
			{
				this._mobileParty.ShortTermBehavior = AiBehavior.None;
			}
		}

		// Token: 0x060025C7 RID: 9671 RVA: 0x000A04D8 File Offset: 0x0009E6D8
		private MobileParty GetNearbyPartyToFlee(MobileParty partyToFleeFrom, Vec2 fleeDirection)
		{
			ValueTuple<MobileParty, float> valueTuple = new ValueTuple<MobileParty, float>(null, 0f);
			LocatableSearchData<MobileParty> locatableSearchData = MobileParty.StartFindingLocatablesAroundPosition(this._mobileParty.Position2D, 10f);
			for (MobileParty mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData); mobileParty != null; mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData))
			{
				if (!mobileParty.IsMilitia && !mobileParty.IsGarrison && !mobileParty.IsCaravan && mobileParty != this._mobileParty && (mobileParty.MapFaction == this._mobileParty.MapFaction || (mobileParty.IsBandit && this._mobileParty.IsBandit)))
				{
					if (mobileParty.AttachedTo != null || mobileParty.CurrentSettlement != null || mobileParty.MapEvent != null)
					{
						mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
						continue;
					}
					float num = ((mobileParty.Army != null && mobileParty.Army.DoesLeaderPartyAndAttachedPartiesContain(this._mobileParty)) ? mobileParty.Army.TotalStrength : mobileParty.Party.TotalStrength);
					if (num > this._mobileParty.Party.TotalStrength && (this._mobileParty.IsBandit || num + this._mobileParty.Party.TotalStrength > partyToFleeFrom.Party.TotalStrength * 0.5f))
					{
						Vec2 vec = mobileParty.Position2D - this._mobileParty.Position2D;
						float length = vec.Length;
						if (length < 1f && mobileParty._lastCalculatedSpeed < this._mobileParty._lastCalculatedSpeed)
						{
							mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
							continue;
						}
						float length2 = (partyToFleeFrom.Position2D - mobileParty.Position2D).Length;
						vec.Normalize();
						if (vec.DistanceSquared(fleeDirection) < 0.3f + 0.1f * (10f - Math.Min(10f, length)) && length < length2 * 0.86f)
						{
							float num2 = length * 0.66f + num * 0.34f;
							if (valueTuple.Item2 < num2)
							{
								valueTuple.Item1 = mobileParty;
								valueTuple.Item2 = num2;
							}
						}
					}
				}
			}
			return valueTuple.Item1;
		}

		// Token: 0x060025C8 RID: 9672 RVA: 0x000A06F8 File Offset: 0x0009E8F8
		private ValueTuple<AiBehavior, Settlement> GetBehaviorForNearbySettlementToFlee(Vec2 partyToFleeFromPosition, Vec2 fleeDirection)
		{
			LocatableSearchData<Settlement> locatableSearchData = Campaign.Current.SettlementLocator.StartFindingLocatablesAroundPosition(this._mobileParty.Position2D, 20f);
			for (Settlement settlement = Campaign.Current.SettlementLocator.FindNextLocatable(ref locatableSearchData); settlement != null; settlement = Campaign.Current.SettlementLocator.FindNextLocatable(ref locatableSearchData))
			{
				if (settlement.IsFortification && settlement.MapFaction == this._mobileParty.MapFaction && !settlement.IsUnderSiege)
				{
					Vec2 vec = settlement.GatePosition - this._mobileParty.Position2D;
					float length = vec.Length;
					float length2 = (partyToFleeFromPosition - settlement.GatePosition).Length;
					if (length < length2 * 0.86f)
					{
						if (length > 1f)
						{
							return new ValueTuple<AiBehavior, Settlement>(AiBehavior.FleeToGate, settlement);
						}
						this.DisableForHours(3);
						return new ValueTuple<AiBehavior, Settlement>(AiBehavior.GoToSettlement, settlement);
					}
					else
					{
						vec.Normalize();
						if (vec.DistanceSquared(fleeDirection) < 0.3f + 0.1f * (10f - MathF.Min(10f, length)))
						{
							if (length <= 1f)
							{
								return new ValueTuple<AiBehavior, Settlement>(AiBehavior.GoToSettlement, settlement);
							}
							return new ValueTuple<AiBehavior, Settlement>(AiBehavior.FleeToGate, settlement);
						}
					}
				}
			}
			return new ValueTuple<AiBehavior, Settlement>(AiBehavior.None, null);
		}

		// Token: 0x060025C9 RID: 9673 RVA: 0x000A0830 File Offset: 0x0009EA30
		private float GetMaxPatrolRadiusForSettlement()
		{
			if (this._mobileParty.TargetSettlement != null)
			{
				if (this._mobileParty.TargetSettlement.IsHideout)
				{
					return 25f;
				}
				if (this._mobileParty.TargetSettlement.IsFortification)
				{
					return 30f;
				}
				if (this._mobileParty.TargetSettlement.IsVillage)
				{
					return 15f;
				}
			}
			return 0f;
		}

		// Token: 0x060025CA RID: 9674 RVA: 0x000A0898 File Offset: 0x0009EA98
		private float CalculateStanceScore(MobileParty otherParty)
		{
			if (FactionManager.IsAtWarAgainstFaction(this._mobileParty.MapFaction, otherParty.MapFaction))
			{
				return 1f;
			}
			if (FactionManager.IsAlliedWithFaction(this._mobileParty.MapFaction, otherParty.MapFaction))
			{
				return -1f;
			}
			return 0f;
		}

		// Token: 0x060025CB RID: 9675 RVA: 0x000A08E8 File Offset: 0x0009EAE8
		private void CalculateInitiativeScoresForEnemy(MobileParty enemyParty, out float avoidScore, out float attackScore, float localAdvantage, float maxAggressiveness)
		{
			float num = 1f;
			if (enemyParty.IsCaravan)
			{
				num = (this._mobileParty.IsBandit ? 2f : ((this._mobileParty.Army == null) ? 1.5f : 1f));
			}
			else if (enemyParty.IsBandit || enemyParty.Aggressiveness < 0.1f)
			{
				num = 0.7f;
			}
			else if ((this._mobileParty.DefaultBehavior == AiBehavior.GoAroundParty || this._mobileParty.ShortTermBehavior == AiBehavior.GoAroundParty) && enemyParty != this._mobileParty.TargetParty)
			{
				num = 0.7f;
			}
			int num2 = 0;
			for (int i = 0; i < this._lastTargetedParties.Count; i++)
			{
				if (enemyParty == this._lastTargetedParties[i])
				{
					num2++;
				}
			}
			if (num2 > 0)
			{
				num *= 3f / ((float)num2 + 3f);
			}
			if (enemyParty.MapEvent == null && this._mobileParty._lastCalculatedSpeed < enemyParty.Speed * 1.1f && (this._mobileParty.DefaultBehavior != AiBehavior.GoAroundParty || this._mobileParty.TargetParty != enemyParty) && (this._mobileParty.DefaultBehavior != AiBehavior.DefendSettlement || enemyParty != this._mobileParty.TargetSettlement.LastAttackerParty))
			{
				float num3 = MathF.Max(0.5f, (this._mobileParty.Speed + 0.1f) / (enemyParty.Speed + 0.1f)) / 1.1f;
				num *= MathF.Max(0.8f, num3) * MathF.Max(0.8f, num3);
			}
			float num4 = ((this._mobileParty.IsCaravan || this._mobileParty.IsVillager) ? 0.9f : ((enemyParty.IsGarrison || enemyParty.IsMilitia || enemyParty.CurrentSettlement != null) ? 0.4f : 0.7f));
			float num5 = 4.8f * num;
			float num6 = 4.8f * num4;
			num5 *= (1f + ((this._mobileParty.Army != null && this._mobileParty.Army.LeaderParty != null && (enemyParty.BesiegedSettlement == this._mobileParty.Army.LeaderParty.TargetSettlement || (this._mobileParty.Army.LeaderParty.TargetSettlement != null && enemyParty == this._mobileParty.Army.LeaderParty.TargetSettlement.LastAttackerParty))) ? 1f : this.AttackInitiative)) / 2f;
			num5 *= ((enemyParty.Army != null) ? MathF.Pow((float)enemyParty.Army.Parties.Count, 0.33f) : 1f);
			num6 *= (1f + this.AvoidInitiative) / 2f;
			bool flag = enemyParty.MapEvent != null || enemyParty.BesiegedSettlement != null;
			if (flag || (this._mobileParty.DefaultBehavior == AiBehavior.EngageParty && this._mobileParty.TargetParty == enemyParty) || (this._mobileParty.DefaultBehavior == AiBehavior.GoAroundParty && this._mobileParty.TargetParty == enemyParty))
			{
				num6 = 2.88f;
				num5 = 7.2000003f;
			}
			Vec2 vec = ((enemyParty.BesiegedSettlement != null) ? enemyParty.VisualPosition2DWithoutError : enemyParty.Position2D) - this._mobileParty.Position2D;
			float length = vec.Length;
			float num7 = num5 / (length + 1E-05f);
			float num8 = num6 / (length + 1E-05f);
			num7 = MBMath.ClampFloat((!flag) ? (num7 * num7 * num7) : 1f, 0.05f, 1f);
			num8 = MBMath.ClampFloat(num8 * num8 * num8, 0.05f, 1f);
			float num9 = 1f;
			if (enemyParty.IsMoving && (this._mobileParty.DefaultBehavior != AiBehavior.GoAroundParty || this._mobileParty.TargetParty != enemyParty))
			{
				num9 = this.CalculateInitiativeSpeedScore(enemyParty, vec);
			}
			float num10 = MBMath.ClampFloat(0.5f * (1f + localAdvantage), 0.05f, 2f);
			float num11 = MBMath.ClampFloat((localAdvantage < 1f) ? MBMath.ClampFloat(1f / localAdvantage, 0.05f, 2f) : 0f, 0.05f, 2f);
			float num12 = this.CalculateStanceScore(enemyParty);
			float num13 = ((enemyParty.IsLordParty && enemyParty.LeaderHero != null && enemyParty.LeaderHero.IsLord) ? 1f : this.AttackInitiative);
			if ((double)this._mobileParty.Aggressiveness < 0.01)
			{
				maxAggressiveness = this._mobileParty.Aggressiveness;
			}
			float num14 = ((enemyParty.MapEvent != null && maxAggressiveness > 0.1f) ? MathF.Max(1f + (enemyParty.MapEvent.IsSallyOut ? 0.3f : 0f), maxAggressiveness) : maxAggressiveness);
			float num15 = ((this._mobileParty.DefaultBehavior == AiBehavior.DefendSettlement && ((enemyParty.BesiegedSettlement != null && this.AiBehaviorPartyBase == enemyParty.BesiegedSettlement.Party) || (enemyParty.MapEvent != null && enemyParty.MapEvent.MapEventSettlement != null && this.AiBehaviorPartyBase == enemyParty.MapEvent.MapEventSettlement.Party))) ? 1.1f : 1f);
			float num16 = 1f;
			if (this.IsFleeBehavior(enemyParty.ShortTermBehavior) && enemyParty.ShortTermTargetParty == this._mobileParty)
			{
				num16 = this.CalculateContinueChasingScore(enemyParty);
			}
			attackScore = (this.CanAttack(enemyParty) ? (1.06f * num15 * num7 * num10 * num12 * num9 * num14 * num16 * num13) : 0f);
			num13 = ((enemyParty.IsLordParty && enemyParty.LeaderHero != null && enemyParty.LeaderHero.IsLord) ? 1f : this.AvoidInitiative);
			if (attackScore < 1f)
			{
				if (!enemyParty.IsGarrison || this._numberOfRecentFleeingFromAParty <= 0)
				{
					avoidScore = (this.CanAvoid(enemyParty) ? (0.9433963f * num13 * num8 * ((num12 > 0.01f) ? 1f : 0f) * num11) : 0f);
					return;
				}
				avoidScore = 0f;
				attackScore = 0f;
				if (enemyParty == this._mobileParty.ShortTermTargetParty)
				{
					this.RecalculateShortTermAi();
					return;
				}
			}
			else
			{
				avoidScore = 0f;
			}
		}

		// Token: 0x060025CC RID: 9676 RVA: 0x000A0F08 File Offset: 0x0009F108
		private float CalculateInitiativeSpeedScore(MobileParty enemyParty, Vec2 otherPartyDif)
		{
			float num = 1f;
			float length = otherPartyDif.Length;
			float num2 = (this._mobileParty.Speed + 0.1f) / (enemyParty.Speed + 0.1f);
			float num3 = (enemyParty.IsLordParty ? 4.5f : 3f);
			float num8;
			if (num2 < 1.1f && length < num3 && length > 0.5f)
			{
				float num4 = enemyParty.Bearing.DotProduct(otherPartyDif);
				float num5 = 2f;
				float num6 = num5 * 0.5f;
				if (num4 > num5)
				{
					num = 0f;
				}
				else if (num4 > num5 * 0.5f)
				{
					num = 1f - (num4 - num6) / (num5 - num6);
				}
				else if (num4 < 0f)
				{
					num = 1f + (1.1f / num2 - 1f) * MathF.Min(1f, MathF.Abs(num4) / 3f);
					float num7 = 1f - MathF.Max(0f, length - num3 * 0.5f) / num3 * 0.5f * 0.67f;
					num = 1f + (num - 1f) * num7;
				}
				num8 = num2 * 1.5f * MathF.Pow(num2 / 1.1f, 1f - MathF.Max(0.8f, 0.5f * num));
				num8 = MathF.Pow(num8, MathF.Min(2.5f, length - 1f));
			}
			else
			{
				num8 = 1f;
			}
			return MBMath.ClampFloat(num8, 0.0001f, 1f);
		}

		// Token: 0x060025CD RID: 9677 RVA: 0x000A10A0 File Offset: 0x0009F2A0
		private float CalculateContinueChasingScore(MobileParty enemyParty)
		{
			float num = ((this._mobileParty.Army != null && this._mobileParty.Army.LeaderParty == this._mobileParty) ? this._mobileParty.Army.TotalStrength : this._mobileParty.Party.TotalStrength);
			float num2 = ((enemyParty.Army != null && enemyParty.Army.LeaderParty == this._mobileParty) ? enemyParty.Army.TotalStrength : enemyParty.Party.TotalStrength) / (num + 0.01f);
			float num3 = 1f + 0.01f * (float)enemyParty.Ai._numberOfRecentFleeingFromAParty;
			float num4 = Math.Min(1f, (this._mobileParty.Position2D - enemyParty.Position2D).Length / 3f);
			Settlement settlement;
			if (this._mobileParty.IsBandit)
			{
				Hideout hideout = this._mobileParty.BanditPartyComponent.Hideout;
				settlement = ((hideout != null) ? hideout.Settlement : null);
			}
			else if (this._mobileParty.IsLordParty && this._mobileParty.LeaderHero != null && this._mobileParty.LeaderHero.IsMinorFactionHero)
			{
				settlement = this._mobileParty.MapFaction.FactionMidSettlement;
			}
			else
			{
				settlement = SettlementHelper.FindNearestFortification((Settlement x) => x.MapFaction == this._mobileParty.MapFaction, null);
			}
			float num5 = Campaign.AverageDistanceBetweenTwoFortifications * 3f;
			if (settlement != null)
			{
				num5 = Campaign.Current.Models.MapDistanceModel.GetDistance(this._mobileParty, settlement);
			}
			float num6 = num5 / (Campaign.AverageDistanceBetweenTwoFortifications * 3f);
			float num7 = 1f + (float)Math.Pow((double)(enemyParty.Speed / (this._mobileParty.Speed - 0.25f)), 3.0);
			num7 = MBMath.Map(num7, 0f, 5.2f, 0f, 2f);
			float num8 = 60000f;
			float num9 = 10000f;
			float num10 = (float)((enemyParty.LeaderHero != null) ? (enemyParty.PartyTradeGold + enemyParty.LeaderHero.Gold) : enemyParty.PartyTradeGold) / (enemyParty.IsCaravan ? num9 : num8);
			float num11 = ((enemyParty.LeaderHero != null) ? (enemyParty.LeaderHero.IsFactionLeader ? 1.5f : 1f) : 0.75f);
			float num12 = num2 * num6 * num7 * num3 * num4;
			return MBMath.ClampFloat(num10 * num11 / (num12 + 0.001f), 0.005f, 3f);
		}

		// Token: 0x060025CE RID: 9678 RVA: 0x000A131C File Offset: 0x0009F51C
		private bool GetAccessibleTargetPointInDirection(out Vec2 targetPoint, Vec2 direction, float distance, Vec2 alternativePosition, int neededTriesForAlternative, float rotationChangeLimitAddition = 0.1f)
		{
			targetPoint = this._mobileParty.Position2D;
			float num = 2f * rotationChangeLimitAddition;
			float num2 = 1f;
			bool flag = false;
			int num3 = 0;
			while (!flag)
			{
				Vec2 vec = direction;
				float randomFloat = MBRandom.RandomFloat;
				vec.RotateCCW((-0.5f + randomFloat) * num);
				targetPoint = this._mobileParty.Position2D + vec * distance * num2;
				num3++;
				num += rotationChangeLimitAddition;
				num2 *= 0.97f;
				PathFaceRecord faceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(targetPoint);
				if (faceIndex.IsValid() && Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, this._mobileParty.CurrentNavigationFace, false) && (targetPoint.x > Campaign.Current.MinSettlementX - 50f || targetPoint.x > this._mobileParty.Position2D.x) && (targetPoint.y > Campaign.Current.MinSettlementY - 50f || targetPoint.y > this._mobileParty.Position2D.y) && (targetPoint.x < Campaign.Current.MaxSettlementX + 50f || targetPoint.x < this._mobileParty.Position2D.x) && (targetPoint.y < Campaign.Current.MaxSettlementY + 50f || targetPoint.y < this._mobileParty.Position2D.y))
				{
					flag = num3 >= neededTriesForAlternative || MobilePartyAi.CheckIfThereIsAnyHugeObstacleBetweenPartyAndTarget(this._mobileParty, targetPoint);
				}
				if (num3 >= neededTriesForAlternative)
				{
					flag = true;
					targetPoint = alternativePosition;
				}
			}
			return flag;
		}

		// Token: 0x060025CF RID: 9679 RVA: 0x000A14DA File Offset: 0x0009F6DA
		private bool CanAvoid(MobileParty targetParty)
		{
			return (targetParty.Aggressiveness > 0.01f && targetParty.Party.IsMobile) || targetParty.IsGarrison;
		}

		// Token: 0x060025D0 RID: 9680 RVA: 0x000A1500 File Offset: 0x0009F700
		private bool CanAttack(MobileParty targetParty)
		{
			bool flag = targetParty != MobileParty.MainParty || !Game.Current.CheatMode || CampaignCheats.MainPartyIsAttackable;
			bool flag2 = targetParty != MobileParty.MainParty || this.DoNotAttackMainPartyUntil.IsPast;
			return flag && flag2;
		}

		// Token: 0x060025D1 RID: 9681 RVA: 0x000A1545 File Offset: 0x0009F745
		private bool IsEnemy(PartyBase party)
		{
			return FactionManager.IsAtWarAgainstFaction(party.MapFaction, this._mobileParty.MapFaction);
		}

		// Token: 0x060025D2 RID: 9682 RVA: 0x000A155D File Offset: 0x0009F75D
		private bool IsFleeBehavior(AiBehavior aiBehavior)
		{
			return aiBehavior == AiBehavior.FleeToPoint || aiBehavior == AiBehavior.FleeToGate || aiBehavior == AiBehavior.FleeToParty;
		}

		// Token: 0x060025D3 RID: 9683 RVA: 0x000A1570 File Offset: 0x0009F770
		public bool IsFleeing()
		{
			return this.IsFleeBehavior(this._mobileParty.ShortTermBehavior) || this.IsFleeBehavior(this._mobileParty.DefaultBehavior);
		}

		// Token: 0x060025D4 RID: 9684 RVA: 0x000A1598 File Offset: 0x0009F798
		internal void CacheTargetPartyVariablesAtFrameStart(ref MobileParty.CachedPartyVariables variables)
		{
			if (this.MoveTargetParty != null)
			{
				variables.TargetPartyPositionAtFrameStart = this.MoveTargetParty.Position2D;
				variables.TargetPartyCurrentNavigationFaceAtFrameStart = this.MoveTargetParty.CurrentNavigationFace;
			}
		}

		// Token: 0x060025D5 RID: 9685 RVA: 0x000A15C4 File Offset: 0x0009F7C4
		private bool ComputePath(Vec2 newTargetPosition)
		{
			bool flag = false;
			if (this._mobileParty.CurrentNavigationFace.IsValid())
			{
				this._targetAiFaceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(newTargetPosition);
				if (this._targetAiFaceIndex.IsValid())
				{
					Vec2 position2D = this._mobileParty.Position2D;
					flag = Campaign.Current.MapSceneWrapper.GetPathBetweenAIFaces(this._mobileParty.CurrentNavigationFace, this._targetAiFaceIndex, position2D, newTargetPosition, 0.1f, this.Path);
				}
				else
				{
					Debug.FailedAssert("Path finding target is not valid", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Party\\MobilePartyAi.cs", "ComputePath", 2009);
				}
			}
			this.PathBegin = 0;
			if (!flag)
			{
				this._aiPathMode = false;
			}
			return flag;
		}

		// Token: 0x060025D6 RID: 9686 RVA: 0x000A1674 File Offset: 0x0009F874
		private void DoAIMove(ref MobileParty.CachedPartyVariables variables)
		{
			Vec2 vec;
			PathFaceRecord pathFaceRecord;
			bool flag;
			this.GetTargetPositionAndFace(ref variables, out vec, out pathFaceRecord, out flag);
			if (this._aiPathMode)
			{
				float num = ((this._aiPathLastPosition.DistanceSquared(this._mobileParty.Position2D) > 108f) ? 3f : (this._aiPathLastPosition.DistanceSquared(this._mobileParty.Position2D) / 36f));
				if (flag || pathFaceRecord.FaceIndex != this._aiPathLastFace.FaceIndex || this._aiPathLastPosition.DistanceSquared(vec) > num)
				{
					this._aiPathMode = false;
					this._aiPathLastFace = PathFaceRecord.NullFaceRecord;
				}
			}
			if (!this._aiPathMode && !flag && !this._aiPathNotFound)
			{
				if ((pathFaceRecord.FaceIndex != this._aiPathLastFace.FaceIndex || this._aiPathNeeded) && pathFaceRecord.IsValid())
				{
					if (this._mobileParty.CurrentNavigationFace.FaceIndex != pathFaceRecord.FaceIndex || this._aiPathNeeded)
					{
						this._aiPathNotFound = !this.ComputePath(vec);
						this._aiPathNeeded = false;
						if (!this._aiPathNotFound)
						{
							this._aiPathLastFace = pathFaceRecord;
							this._aiPathLastPosition = vec;
							this._aiPathMode = true;
						}
					}
					else
					{
						this._aiPathMode = false;
					}
				}
				else if (pathFaceRecord.FaceIndex == this._aiPathLastFace.FaceIndex && this._mobileParty.CurrentNavigationFace.FaceIndex != pathFaceRecord.FaceIndex)
				{
					this._aiPathMode = true;
				}
			}
			if (!this._aiPathMode)
			{
				this.NextTargetPosition = vec;
			}
		}

		// Token: 0x060025D7 RID: 9687 RVA: 0x000A17FC File Offset: 0x0009F9FC
		internal void DoAiPathMode(ref MobileParty.CachedPartyVariables variables)
		{
			if (variables.IsAttachedArmyMember)
			{
				this._aiPathMode = false;
				return;
			}
			this.DoAIMove(ref variables);
			if (this._aiPathMode)
			{
				bool flag;
				do
				{
					flag = false;
					this.NextTargetPosition = this.Path[this.PathBegin];
					float lengthSquared = (this.NextTargetPosition - variables.CurrentPosition).LengthSquared;
					if (lengthSquared < variables.NextMoveDistance * variables.NextMoveDistance)
					{
						flag = true;
						variables.NextMoveDistance -= MathF.Sqrt(lengthSquared);
						variables.LastCurrentPosition = variables.CurrentPosition;
						variables.CurrentPosition = this.NextTargetPosition;
						int num = this.PathBegin + 1;
						this.PathBegin = num;
					}
				}
				while (flag && this.PathBegin < this.Path.Size);
				if (this.PathBegin >= this.Path.Size)
				{
					this._aiPathMode = false;
					this._aiPathNeeded = false;
					if (this.Path.Size > 0)
					{
						variables.CurrentPosition = variables.LastCurrentPosition;
						this.NextTargetPosition = this.Path[this.Path.Size - 1];
					}
				}
			}
		}

		// Token: 0x060025D8 RID: 9688 RVA: 0x000A191A File Offset: 0x0009FB1A
		public void ResetAiBehaviorObject()
		{
			this.AiBehaviorPartyBase = null;
		}

		// Token: 0x060025D9 RID: 9689 RVA: 0x000A1923 File Offset: 0x0009FB23
		private void UpdatePathModeWithPosition(Vec2 newTargetPosition)
		{
			this._moveTargetPoint = newTargetPosition;
			this._moveTargetAiFaceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(newTargetPosition);
		}

		// Token: 0x060025DA RID: 9690 RVA: 0x000A1944 File Offset: 0x0009FB44
		internal void GetTargetPositionAndFace(ref MobileParty.CachedPartyVariables variables, out Vec2 finalTargetPosition, out PathFaceRecord finalTargetNavigationFace, out bool forceNoPathMode)
		{
			finalTargetPosition = this._mobileParty.Position2D;
			finalTargetNavigationFace = this._mobileParty.CurrentNavigationFace;
			forceNoPathMode = false;
			if (this.PartyMoveMode == MoveModeType.Point)
			{
				finalTargetPosition = this._moveTargetPoint;
				finalTargetNavigationFace = this._moveTargetAiFaceIndex;
				forceNoPathMode = this.ForceAiNoPathMode;
				return;
			}
			if (this.PartyMoveMode == MoveModeType.Party)
			{
				if (this.MoveTargetParty.Party.IsValid)
				{
					if (!this.MoveTargetParty.IsMoving)
					{
						finalTargetPosition = variables.TargetPartyPositionAtFrameStart;
						finalTargetNavigationFace = variables.TargetPartyCurrentNavigationFaceAtFrameStart;
						return;
					}
					Vec2 targetPartyPositionAtFrameStart = variables.TargetPartyPositionAtFrameStart;
					if (PartyBase.IsPositionOkForTraveling(targetPartyPositionAtFrameStart))
					{
						finalTargetPosition = targetPartyPositionAtFrameStart;
						finalTargetNavigationFace = Campaign.Current.MapSceneWrapper.GetFaceIndex(targetPartyPositionAtFrameStart);
						return;
					}
					finalTargetPosition = variables.TargetPartyPositionAtFrameStart;
					finalTargetNavigationFace = variables.TargetPartyCurrentNavigationFaceAtFrameStart;
					return;
				}
			}
			else if (this.PartyMoveMode == MoveModeType.Escort)
			{
				if (this.MoveTargetParty != null && this.MoveTargetParty.Party.IsValid && this.MoveTargetParty.CurrentSettlement == null && this._mobileParty.CurrentSettlement == null)
				{
					if (variables.TargetPartyPositionAtFrameStart.DistanceSquared(this._mobileParty.Position2D) > 25f)
					{
						finalTargetPosition = variables.TargetPartyPositionAtFrameStart;
						finalTargetNavigationFace = variables.TargetPartyCurrentNavigationFaceAtFrameStart;
						return;
					}
					float num = ((this._mobileParty.Army != null) ? 0f : (((this.MoveTargetParty.DefaultBehavior == AiBehavior.DefendSettlement || this.MoveTargetParty.DefaultBehavior == AiBehavior.BesiegeSettlement || this.MoveTargetParty.DefaultBehavior == AiBehavior.RaidSettlement) && this._mobileParty.Party.MobileParty.Position2D.DistanceSquared(this.MoveTargetParty.AiBehaviorTarget) < 100f) ? 1.2f : 2.4f));
					for (;;)
					{
						finalTargetPosition = variables.TargetPartyPositionAtFrameStart + num * this._formationPosition;
						PathFaceRecord faceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(this._mobileParty.Position2D);
						finalTargetNavigationFace = Campaign.Current.MapSceneWrapper.GetFaceIndex(finalTargetPosition);
						PathFaceRecord targetPartyCurrentNavigationFaceAtFrameStart = variables.TargetPartyCurrentNavigationFaceAtFrameStart;
						Vec2.StackArray6Vec2 stackArray6Vec = default(Vec2.StackArray6Vec2);
						PathFaceRecord.StackArray6PathFaceRecord stackArray6PathFaceRecord = default(PathFaceRecord.StackArray6PathFaceRecord);
						for (int i = 0; i < 6; i++)
						{
							stackArray6Vec[i] = new Vec2((finalTargetPosition.x * (float)i + this._mobileParty.Position2D.x * (float)(6 - i)) / 6f, (finalTargetPosition.y * (float)i + this._mobileParty.Position2D.y * (float)(6 - i)) / 6f);
							stackArray6PathFaceRecord[i] = Campaign.Current.MapSceneWrapper.GetFaceIndex(stackArray6Vec[i]);
						}
						bool flag = Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, finalTargetNavigationFace, false);
						int num2 = 0;
						while (num2 < 6 && flag)
						{
							if (faceIndex.FaceIndex != stackArray6PathFaceRecord[num2].FaceIndex && !Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, stackArray6PathFaceRecord[num2], false))
							{
								flag = false;
							}
							num2++;
						}
						if (flag)
						{
							Vec2.StackArray6Vec2 stackArray6Vec2 = default(Vec2.StackArray6Vec2);
							PathFaceRecord.StackArray6PathFaceRecord stackArray6PathFaceRecord2 = default(PathFaceRecord.StackArray6PathFaceRecord);
							for (int j = 0; j < 6; j++)
							{
								stackArray6Vec2[j] = new Vec2((finalTargetPosition.x * (float)j + variables.TargetPartyPositionAtFrameStart.x * (float)(6 - j)) / 6f, (finalTargetPosition.y * (float)j + variables.TargetPartyPositionAtFrameStart.y * (float)(6 - j)) / 6f);
								stackArray6PathFaceRecord2[j] = Campaign.Current.MapSceneWrapper.GetFaceIndex(stackArray6Vec2[j]);
							}
							bool flag2 = Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(finalTargetNavigationFace, targetPartyCurrentNavigationFaceAtFrameStart, false);
							int num3 = 0;
							while (num3 < 6 && flag2)
							{
								if (variables.TargetPartyCurrentNavigationFaceAtFrameStart.FaceIndex != stackArray6PathFaceRecord2[num3].FaceIndex && !Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(variables.TargetPartyCurrentNavigationFaceAtFrameStart, stackArray6PathFaceRecord2[num3], false))
								{
									flag2 = false;
								}
								num3++;
							}
							if (flag2)
							{
								break;
							}
						}
						num *= 0.75f;
						num -= 0.1f;
						if (num < 0.1f)
						{
							break;
						}
						if (num <= 0.3f)
						{
							num = 0f;
						}
					}
				}
				else
				{
					this.SetMoveModeHold();
				}
			}
		}

		// Token: 0x060025DB RID: 9691 RVA: 0x000A1DD6 File Offset: 0x0009FFD6
		internal void SetNavigationModeHold()
		{
			this.PartyMoveMode = MoveModeType.Hold;
			this._aiPathMode = false;
			this._aiPathNeeded = false;
			this.NextTargetPosition = this._mobileParty.Position2D;
			this.MoveTargetParty = null;
		}

		// Token: 0x060025DC RID: 9692 RVA: 0x000A1E05 File Offset: 0x000A0005
		private void SetNavigationModePoint(Vec2 newTargetPosition)
		{
			this.PartyMoveMode = MoveModeType.Point;
			this.UpdatePathModeWithPosition(newTargetPosition);
			this._aiPathNotFound = false;
			this.MoveTargetParty = null;
		}

		// Token: 0x060025DD RID: 9693 RVA: 0x000A1E23 File Offset: 0x000A0023
		private void SetNavigationModeParty(MobileParty targetParty)
		{
			this.PartyMoveMode = MoveModeType.Party;
			this.MoveTargetParty = targetParty;
			this._aiPathNotFound = false;
		}

		// Token: 0x060025DE RID: 9694 RVA: 0x000A1E3A File Offset: 0x000A003A
		private void SetNavigationModeEscort(MobileParty targetParty)
		{
			if (this.PartyMoveMode != MoveModeType.Escort || this.MoveTargetParty != targetParty)
			{
				this.PartyMoveMode = MoveModeType.Escort;
				this.MoveTargetParty = targetParty;
				this._aiPathNotFound = false;
			}
		}

		// Token: 0x060025DF RID: 9695 RVA: 0x000A1E63 File Offset: 0x000A0063
		public void DisableForHours(int hours)
		{
			this._isDisabled = true;
			this._enableAgainAtHour = CampaignTime.Now + CampaignTime.Hours((float)hours);
		}

		// Token: 0x060025E0 RID: 9696 RVA: 0x000A1E83 File Offset: 0x000A0083
		public void DisableAi()
		{
			this._isDisabled = true;
			this._enableAgainAtHour = CampaignTime.Never;
		}

		// Token: 0x060025E1 RID: 9697 RVA: 0x000A1E97 File Offset: 0x000A0097
		public void EnableAi()
		{
			this._isDisabled = false;
			this._enableAgainAtHour = CampaignTime.Now;
		}

		// Token: 0x060025E2 RID: 9698 RVA: 0x000A1EAC File Offset: 0x000A00AC
		public bool EnableAgainAtHourIsPast()
		{
			return this._enableAgainAtHour.IsPast;
		}

		// Token: 0x060025E3 RID: 9699 RVA: 0x000A1EC8 File Offset: 0x000A00C8
		public void SetDoNotAttackMainParty(int hours)
		{
			if (this.DoNotAttackMainPartyUntil.RemainingHoursFromNow < (float)hours)
			{
				this.DoNotAttackMainPartyUntil = CampaignTime.HoursFromNow((float)hours);
			}
		}

		// Token: 0x060025E4 RID: 9700 RVA: 0x000A1EF4 File Offset: 0x000A00F4
		public void SetAsMainParty()
		{
			this.SetInitiative(0f, 0f, 100000000f);
		}

		// Token: 0x060025E5 RID: 9701 RVA: 0x000A1F0B File Offset: 0x000A010B
		internal void ForceDefaultBehaviorUpdate()
		{
			this.DefaultBehaviorNeedsUpdate = true;
		}

		// Token: 0x060025E6 RID: 9702 RVA: 0x000A1F14 File Offset: 0x000A0114
		public void SetInitiative(float attackInitiative, float avoidInitiative, float hoursUntilReset)
		{
			if (this._mobileParty != MobileParty.MainParty)
			{
				this._attackInitiative = attackInitiative;
				this._avoidInitiative = avoidInitiative;
				this._initiativeRestoreTime = CampaignTime.HoursFromNow(hoursUntilReset);
			}
		}

		// Token: 0x060025E7 RID: 9703 RVA: 0x000A1F3D File Offset: 0x000A013D
		public void SetDoNotMakeNewDecisions(bool doNotMakeNewDecisions)
		{
			this.DoNotMakeNewDecisions = doNotMakeNewDecisions;
		}

		// Token: 0x060025E8 RID: 9704 RVA: 0x000A1F48 File Offset: 0x000A0148
		internal void InitializeForOldSaves(float attackInitiative, float avoidInitiative, CampaignTime initiativeRestoreTime, int numberOfRecentFleeingFromAParty, AiBehavior aiBehavior, Vec2 oldAiBehaviorTarget, bool oldAiPathMode, bool oldAiPathNeeded, MoveModeType oldPartyMoveMode, MobileParty oldMoveTargetParty, Vec2 oldNextTargetPosition, Vec2 oldMoveTargetPoint, Vec2 oldAiPathLastPosition, Vec2 oldFormationPosition, IMapEntity oldAiBehaviorMapEntity, CampaignTime oldDoNotAttackMainPartyUntil)
		{
			this._attackInitiative = attackInitiative;
			this._avoidInitiative = avoidInitiative;
			this._initiativeRestoreTime = initiativeRestoreTime;
			this._numberOfRecentFleeingFromAParty = numberOfRecentFleeingFromAParty;
			this._defaultBehavior = aiBehavior;
			this.BehaviorTarget = oldAiBehaviorTarget;
			this._aiPathMode = oldAiPathMode;
			this._aiPathNeeded = oldAiPathNeeded;
			this.PartyMoveMode = oldPartyMoveMode;
			this.MoveTargetParty = oldMoveTargetParty;
			this.NextTargetPosition = oldNextTargetPosition;
			this._moveTargetPoint = oldMoveTargetPoint;
			this._aiPathLastPosition = oldAiPathLastPosition;
			this._formationPosition = oldFormationPosition;
			this.AiBehaviorMapEntity = oldAiBehaviorMapEntity;
			this.DoNotAttackMainPartyUntil = oldDoNotAttackMainPartyUntil;
		}

		// Token: 0x060025E9 RID: 9705 RVA: 0x000A1FD4 File Offset: 0x000A01D4
		internal void RecoverPositionsForNavMeshUpdate()
		{
			if (this._moveTargetPoint.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this._moveTargetPoint))
			{
				Debug.Print(string.Concat(new object[]
				{
					"Target of ",
					this._mobileParty.StringId,
					" is not valid! (",
					this._mobileParty.Position2D.x,
					", ",
					this._mobileParty.Position2D.y,
					") Party will be moved to a valid position."
				}), 0, Debug.DebugColor.White, 17592186044416UL);
				Settlement targetSettlement = this._mobileParty.TargetSettlement;
				this._moveTargetPoint = ((targetSettlement != null) ? targetSettlement.GatePosition : this._mobileParty.Position2D);
				this._mobileParty.TargetPosition = this._moveTargetPoint;
				this.NextTargetPosition = this._moveTargetPoint;
				this.BehaviorTarget = this._moveTargetPoint;
			}
			if (this._mobileParty.TargetPosition.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this._mobileParty.TargetPosition))
			{
				this._mobileParty.TargetPosition = Vec2.Zero;
			}
			if (this.DefaultBehavior != AiBehavior.Hold && ((this._mobileParty.TargetPosition.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this._mobileParty.TargetPosition)) || (this.NextTargetPosition.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this.NextTargetPosition)) || (this.BehaviorTarget.IsNonZero() && !PartyBase.IsPositionOkForTraveling(this.BehaviorTarget))))
			{
				this.ForceDefaultBehaviorUpdate();
				this.SetMoveModeHold();
				this.SetNavigationModeHold();
			}
		}

		// Token: 0x060025EA RID: 9706 RVA: 0x000A217A File Offset: 0x000A037A
		internal void ResetNumberOfRecentFleeing()
		{
			this._numberOfRecentFleeingFromAParty = 0;
		}

		// Token: 0x060025EB RID: 9707 RVA: 0x000A2184 File Offset: 0x000A0384
		internal static bool CheckIfThereIsAnyHugeObstacleBetweenPartyAndTarget(MobileParty party, Vec2 newTargetPosition)
		{
			IMapScene mapSceneWrapper = Campaign.Current.MapSceneWrapper;
			Vec2 position2D = party.Position2D;
			Vec2 vec = new Vec2((newTargetPosition.x + position2D.x * 3f) * 0.25f, (newTargetPosition.y + position2D.y * 3f) * 0.25f);
			PathFaceRecord faceIndex = mapSceneWrapper.GetFaceIndex(vec);
			Vec2 vec2 = new Vec2((newTargetPosition.x + position2D.x) * 0.5f, (newTargetPosition.y + position2D.y) * 0.5f);
			PathFaceRecord faceIndex2 = mapSceneWrapper.GetFaceIndex(vec2);
			Vec2 vec3 = new Vec2((newTargetPosition.x * 3f + position2D.x) * 0.25f, (newTargetPosition.y * 3f + position2D.y) * 0.25f);
			PathFaceRecord faceIndex3 = mapSceneWrapper.GetFaceIndex(vec3);
			return faceIndex.IsValid() && mapSceneWrapper.AreFacesOnSameIsland(faceIndex, party.CurrentNavigationFace, false) && faceIndex2.IsValid() && mapSceneWrapper.AreFacesOnSameIsland(faceIndex2, party.CurrentNavigationFace, false) && faceIndex3.IsValid() && mapSceneWrapper.AreFacesOnSameIsland(faceIndex3, party.CurrentNavigationFace, false);
		}

		// Token: 0x04000B58 RID: 2904
		private const float AiCheckInterval = 0.25f;

		// Token: 0x04000B59 RID: 2905
		private const int FleeToNearbyPartyDistanceRadius = 10;

		// Token: 0x04000B5A RID: 2906
		private const int FleeToNearbySettlementDistanceRadius = 20;

		// Token: 0x04000B5B RID: 2907
		public const float GoAroundPartyWaitNearbyRadiusMultiplier = 1.2f;

		// Token: 0x04000B5C RID: 2908
		private const float HideoutPatrolRadius = 25f;

		// Token: 0x04000B5D RID: 2909
		private const float FortificationPatrolRadius = 30f;

		// Token: 0x04000B5E RID: 2910
		private const float VillagePatrolRadius = 15f;

		// Token: 0x04000B5F RID: 2911
		private const float MaximumJoiningRadiusMultiplier = 2f;

		// Token: 0x04000B60 RID: 2912
		private static readonly List<ValueTuple<float, Vec2>> DangerousPartiesAndTheirVecs = new List<ValueTuple<float, Vec2>>();

		// Token: 0x04000B61 RID: 2913
		[SaveableField(2)]
		private bool _isDisabled;

		// Token: 0x04000B63 RID: 2915
		[SaveableField(5)]
		private readonly MobileParty _mobileParty;

		// Token: 0x04000B64 RID: 2916
		[SaveableField(6)]
		public int HourCounter;

		// Token: 0x04000B67 RID: 2919
		[SaveableField(12)]
		internal Vec2 BehaviorTarget;

		// Token: 0x04000B68 RID: 2920
		[SaveableField(13)]
		private float _attackInitiative = 1f;

		// Token: 0x04000B69 RID: 2921
		[SaveableField(14)]
		private float _avoidInitiative = 1f;

		// Token: 0x04000B6A RID: 2922
		[SaveableField(15)]
		private CampaignTime _initiativeRestoreTime;

		// Token: 0x04000B6B RID: 2923
		[SaveableField(16)]
		private bool _aiBehaviorResetNeeded;

		// Token: 0x04000B6D RID: 2925
		[SaveableField(18)]
		private CampaignTime _nextAiCheckTime;

		// Token: 0x04000B6E RID: 2926
		[SaveableField(19)]
		internal bool DefaultBehaviorNeedsUpdate;

		// Token: 0x04000B6F RID: 2927
		[SaveableField(20)]
		private int _numberOfRecentFleeingFromAParty;

		// Token: 0x04000B70 RID: 2928
		[SaveableField(21)]
		private AiBehavior _defaultBehavior;

		// Token: 0x04000B71 RID: 2929
		[SaveableField(22)]
		private bool _aiPathMode;

		// Token: 0x04000B72 RID: 2930
		[SaveableField(23)]
		private bool _aiPathNeeded;

		// Token: 0x04000B74 RID: 2932
		[SaveableField(25)]
		private Vec2 _formationPosition;

		// Token: 0x04000B77 RID: 2935
		[SaveableField(28)]
		private Vec2 _moveTargetPoint;

		// Token: 0x04000B78 RID: 2936
		[SaveableField(29)]
		private Vec2 _aiPathLastPosition;

		// Token: 0x04000B79 RID: 2937
		[SaveableField(30)]
		private IMapEntity _aiBehaviorMapEntity;

		// Token: 0x04000B7D RID: 2941
		[CachedData]
		private PathFaceRecord _targetAiFaceIndex = PathFaceRecord.NullFaceRecord;

		// Token: 0x04000B7E RID: 2942
		[CachedData]
		private PathFaceRecord _moveTargetAiFaceIndex = PathFaceRecord.NullFaceRecord;

		// Token: 0x04000B7F RID: 2943
		[CachedData]
		private PathFaceRecord _aiPathLastFace;

		// Token: 0x04000B80 RID: 2944
		[CachedData]
		private List<MobileParty> _lastTargetedParties;

		// Token: 0x04000B82 RID: 2946
		private bool _aiPathNotFound;
	}
}
