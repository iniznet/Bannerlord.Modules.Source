using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Siege;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;
using TaleWorlds.SaveSystem.Load;

namespace TaleWorlds.CampaignSystem.Party
{
	// Token: 0x020002A1 RID: 673
	public sealed class PartyBase : IBattleCombatant, IRandomOwner
	{
		// Token: 0x060025EE RID: 9710 RVA: 0x000A22CE File Offset: 0x000A04CE
		internal static void AutoGeneratedStaticCollectObjectsPartyBase(object o, List<object> collectedObjects)
		{
			((PartyBase)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060025EF RID: 9711 RVA: 0x000A22DC File Offset: 0x000A04DC
		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._lastEatingTime, collectedObjects);
			collectedObjects.Add(this._customOwner);
			collectedObjects.Add(this._mapEventSide);
			collectedObjects.Add(this.Settlement);
			collectedObjects.Add(this.MobileParty);
			collectedObjects.Add(this.MemberRoster);
			collectedObjects.Add(this.PrisonRoster);
			collectedObjects.Add(this.ItemRoster);
		}

		// Token: 0x060025F0 RID: 9712 RVA: 0x000A234E File Offset: 0x000A054E
		internal static object AutoGeneratedGetMemberValueSettlement(object o)
		{
			return ((PartyBase)o).Settlement;
		}

		// Token: 0x060025F1 RID: 9713 RVA: 0x000A235B File Offset: 0x000A055B
		internal static object AutoGeneratedGetMemberValueMobileParty(object o)
		{
			return ((PartyBase)o).MobileParty;
		}

		// Token: 0x060025F2 RID: 9714 RVA: 0x000A2368 File Offset: 0x000A0568
		internal static object AutoGeneratedGetMemberValueMemberRoster(object o)
		{
			return ((PartyBase)o).MemberRoster;
		}

		// Token: 0x060025F3 RID: 9715 RVA: 0x000A2375 File Offset: 0x000A0575
		internal static object AutoGeneratedGetMemberValuePrisonRoster(object o)
		{
			return ((PartyBase)o).PrisonRoster;
		}

		// Token: 0x060025F4 RID: 9716 RVA: 0x000A2382 File Offset: 0x000A0582
		internal static object AutoGeneratedGetMemberValueItemRoster(object o)
		{
			return ((PartyBase)o).ItemRoster;
		}

		// Token: 0x060025F5 RID: 9717 RVA: 0x000A238F File Offset: 0x000A058F
		internal static object AutoGeneratedGetMemberValueRandomValue(object o)
		{
			return ((PartyBase)o).RandomValue;
		}

		// Token: 0x060025F6 RID: 9718 RVA: 0x000A23A1 File Offset: 0x000A05A1
		internal static object AutoGeneratedGetMemberValueAverageBearingRotation(object o)
		{
			return ((PartyBase)o).AverageBearingRotation;
		}

		// Token: 0x060025F7 RID: 9719 RVA: 0x000A23B3 File Offset: 0x000A05B3
		internal static object AutoGeneratedGetMemberValue_remainingFoodPercentage(object o)
		{
			return ((PartyBase)o)._remainingFoodPercentage;
		}

		// Token: 0x060025F8 RID: 9720 RVA: 0x000A23C5 File Offset: 0x000A05C5
		internal static object AutoGeneratedGetMemberValue_lastEatingTime(object o)
		{
			return ((PartyBase)o)._lastEatingTime;
		}

		// Token: 0x060025F9 RID: 9721 RVA: 0x000A23D7 File Offset: 0x000A05D7
		internal static object AutoGeneratedGetMemberValue_customOwner(object o)
		{
			return ((PartyBase)o)._customOwner;
		}

		// Token: 0x060025FA RID: 9722 RVA: 0x000A23E4 File Offset: 0x000A05E4
		internal static object AutoGeneratedGetMemberValue_index(object o)
		{
			return ((PartyBase)o)._index;
		}

		// Token: 0x060025FB RID: 9723 RVA: 0x000A23F6 File Offset: 0x000A05F6
		internal static object AutoGeneratedGetMemberValue_mapEventSide(object o)
		{
			return ((PartyBase)o)._mapEventSide;
		}

		// Token: 0x060025FC RID: 9724 RVA: 0x000A2403 File Offset: 0x000A0603
		internal static object AutoGeneratedGetMemberValue_numberOfMenWithHorse(object o)
		{
			return ((PartyBase)o)._numberOfMenWithHorse;
		}

		// Token: 0x1700096E RID: 2414
		// (get) Token: 0x060025FD RID: 9725 RVA: 0x000A2415 File Offset: 0x000A0615
		public Vec2 Position2D
		{
			get
			{
				if (!this.IsMobile)
				{
					return this.Settlement.Position2D;
				}
				return this.MobileParty.Position2D;
			}
		}

		// Token: 0x1700096F RID: 2415
		// (get) Token: 0x060025FE RID: 9726 RVA: 0x000A2436 File Offset: 0x000A0636
		public bool IsVisible
		{
			get
			{
				if (!this.IsMobile)
				{
					return this.Settlement.IsVisible;
				}
				return this.MobileParty.IsVisible;
			}
		}

		// Token: 0x17000970 RID: 2416
		// (get) Token: 0x060025FF RID: 9727 RVA: 0x000A2457 File Offset: 0x000A0657
		public bool IsActive
		{
			get
			{
				if (!this.IsMobile)
				{
					return this.Settlement.IsActive;
				}
				return this.MobileParty.IsActive;
			}
		}

		// Token: 0x17000971 RID: 2417
		// (get) Token: 0x06002600 RID: 9728 RVA: 0x000A2478 File Offset: 0x000A0678
		public SiegeEvent SiegeEvent
		{
			get
			{
				if (!this.IsMobile)
				{
					return this.Settlement.SiegeEvent;
				}
				return this.MobileParty.SiegeEvent;
			}
		}

		// Token: 0x17000972 RID: 2418
		// (get) Token: 0x06002601 RID: 9729 RVA: 0x000A2499 File Offset: 0x000A0699
		public IPartyVisual Visuals
		{
			get
			{
				return this._visual;
			}
		}

		// Token: 0x06002602 RID: 9730 RVA: 0x000A24A1 File Offset: 0x000A06A1
		public void OnVisibilityChanged(bool value)
		{
			MapEvent mapEvent = this.MapEvent;
			if (mapEvent != null)
			{
				mapEvent.PartyVisibilityChanged(this, value);
			}
			CampaignEventDispatcher.Instance.OnPartyVisibilityChanged(this);
			IPartyVisual visuals = this.Visuals;
			if (visuals == null)
			{
				return;
			}
			visuals.SetVisualVisible(value);
		}

		// Token: 0x17000973 RID: 2419
		// (get) Token: 0x06002603 RID: 9731 RVA: 0x000A24D2 File Offset: 0x000A06D2
		// (set) Token: 0x06002604 RID: 9732 RVA: 0x000A24DA File Offset: 0x000A06DA
		[SaveableProperty(1)]
		public Settlement Settlement { get; private set; }

		// Token: 0x17000974 RID: 2420
		// (get) Token: 0x06002605 RID: 9733 RVA: 0x000A24E3 File Offset: 0x000A06E3
		// (set) Token: 0x06002606 RID: 9734 RVA: 0x000A24EB File Offset: 0x000A06EB
		[SaveableProperty(2)]
		public MobileParty MobileParty { get; private set; }

		// Token: 0x17000975 RID: 2421
		// (get) Token: 0x06002607 RID: 9735 RVA: 0x000A24F4 File Offset: 0x000A06F4
		public bool IsSettlement
		{
			get
			{
				return this.Settlement != null;
			}
		}

		// Token: 0x17000976 RID: 2422
		// (get) Token: 0x06002608 RID: 9736 RVA: 0x000A24FF File Offset: 0x000A06FF
		public bool IsMobile
		{
			get
			{
				return this.MobileParty != null;
			}
		}

		// Token: 0x17000977 RID: 2423
		// (get) Token: 0x06002609 RID: 9737 RVA: 0x000A250A File Offset: 0x000A070A
		// (set) Token: 0x0600260A RID: 9738 RVA: 0x000A2512 File Offset: 0x000A0712
		[SaveableProperty(3)]
		public TroopRoster MemberRoster { get; private set; }

		// Token: 0x17000978 RID: 2424
		// (get) Token: 0x0600260B RID: 9739 RVA: 0x000A251B File Offset: 0x000A071B
		// (set) Token: 0x0600260C RID: 9740 RVA: 0x000A2523 File Offset: 0x000A0723
		[SaveableProperty(4)]
		public TroopRoster PrisonRoster { get; private set; }

		// Token: 0x17000979 RID: 2425
		// (get) Token: 0x0600260D RID: 9741 RVA: 0x000A252C File Offset: 0x000A072C
		// (set) Token: 0x0600260E RID: 9742 RVA: 0x000A2534 File Offset: 0x000A0734
		[SaveableProperty(5)]
		public ItemRoster ItemRoster { get; private set; }

		// Token: 0x1700097A RID: 2426
		// (get) Token: 0x0600260F RID: 9743 RVA: 0x000A253D File Offset: 0x000A073D
		public TextObject Name
		{
			get
			{
				if (this.IsSettlement)
				{
					return this.Settlement.Name;
				}
				if (!this.IsMobile)
				{
					return TextObject.Empty;
				}
				return this.MobileParty.Name;
			}
		}

		// Token: 0x1700097B RID: 2427
		// (get) Token: 0x06002610 RID: 9744 RVA: 0x000A256C File Offset: 0x000A076C
		public float DaysStarving
		{
			get
			{
				if (!this.IsStarving)
				{
					return 0f;
				}
				return this._lastEatingTime.ElapsedDaysUntilNow;
			}
		}

		// Token: 0x06002611 RID: 9745 RVA: 0x000A2587 File Offset: 0x000A0787
		public void OnConsumedFood()
		{
			this._lastEatingTime = CampaignTime.Now;
		}

		// Token: 0x1700097C RID: 2428
		// (get) Token: 0x06002612 RID: 9746 RVA: 0x000A2594 File Offset: 0x000A0794
		// (set) Token: 0x06002613 RID: 9747 RVA: 0x000A259C File Offset: 0x000A079C
		public int RemainingFoodPercentage
		{
			get
			{
				return this._remainingFoodPercentage;
			}
			set
			{
				this._remainingFoodPercentage = value;
			}
		}

		// Token: 0x1700097D RID: 2429
		// (get) Token: 0x06002614 RID: 9748 RVA: 0x000A25A5 File Offset: 0x000A07A5
		public bool IsStarving
		{
			get
			{
				return this._remainingFoodPercentage < 0;
			}
		}

		// Token: 0x1700097E RID: 2430
		// (get) Token: 0x06002615 RID: 9749 RVA: 0x000A25B0 File Offset: 0x000A07B0
		public string Id
		{
			get
			{
				MobileParty mobileParty = this.MobileParty;
				return ((mobileParty != null) ? mobileParty.StringId : null) ?? this.Settlement.StringId;
			}
		}

		// Token: 0x1700097F RID: 2431
		// (get) Token: 0x06002616 RID: 9750 RVA: 0x000A25D3 File Offset: 0x000A07D3
		public Hero Owner
		{
			get
			{
				Hero hero;
				if ((hero = this._customOwner) == null)
				{
					if (!this.IsMobile)
					{
						return this.Settlement.Owner;
					}
					hero = this.MobileParty.Owner;
				}
				return hero;
			}
		}

		// Token: 0x06002617 RID: 9751 RVA: 0x000A25FE File Offset: 0x000A07FE
		public void SetCustomOwner(Hero customOwner)
		{
			this._customOwner = customOwner;
		}

		// Token: 0x17000980 RID: 2432
		// (get) Token: 0x06002618 RID: 9752 RVA: 0x000A2607 File Offset: 0x000A0807
		public Hero LeaderHero
		{
			get
			{
				MobileParty mobileParty = this.MobileParty;
				if (mobileParty == null)
				{
					return null;
				}
				return mobileParty.LeaderHero;
			}
		}

		// Token: 0x17000981 RID: 2433
		// (get) Token: 0x06002619 RID: 9753 RVA: 0x000A261A File Offset: 0x000A081A
		public static PartyBase MainParty
		{
			get
			{
				if (Campaign.Current == null)
				{
					return null;
				}
				return Campaign.Current.MainParty.Party;
			}
		}

		// Token: 0x17000982 RID: 2434
		// (get) Token: 0x0600261A RID: 9754 RVA: 0x000A2634 File Offset: 0x000A0834
		// (set) Token: 0x0600261B RID: 9755 RVA: 0x000A263C File Offset: 0x000A083C
		public int Index
		{
			get
			{
				return this._index;
			}
			private set
			{
				this._index = value;
			}
		}

		// Token: 0x17000983 RID: 2435
		// (get) Token: 0x0600261C RID: 9756 RVA: 0x000A2645 File Offset: 0x000A0845
		public bool IsValid
		{
			get
			{
				return this.Index >= 0;
			}
		}

		// Token: 0x17000984 RID: 2436
		// (get) Token: 0x0600261D RID: 9757 RVA: 0x000A2653 File Offset: 0x000A0853
		public IMapEntity MapEntity
		{
			get
			{
				if (this.IsMobile)
				{
					return this.MobileParty;
				}
				return this.Settlement;
			}
		}

		// Token: 0x17000985 RID: 2437
		// (get) Token: 0x0600261E RID: 9758 RVA: 0x000A266A File Offset: 0x000A086A
		public IFaction MapFaction
		{
			get
			{
				if (this.MobileParty != null)
				{
					return this.MobileParty.MapFaction;
				}
				if (this.Settlement != null)
				{
					return this.Settlement.MapFaction;
				}
				return null;
			}
		}

		// Token: 0x17000986 RID: 2438
		// (get) Token: 0x0600261F RID: 9759 RVA: 0x000A2695 File Offset: 0x000A0895
		// (set) Token: 0x06002620 RID: 9760 RVA: 0x000A269D File Offset: 0x000A089D
		[SaveableProperty(210)]
		public int RandomValue { get; private set; } = MBRandom.RandomInt(1, int.MaxValue);

		// Token: 0x17000987 RID: 2439
		// (get) Token: 0x06002621 RID: 9761 RVA: 0x000A26A6 File Offset: 0x000A08A6
		public CultureObject Culture
		{
			get
			{
				return this.MapFaction.Culture;
			}
		}

		// Token: 0x17000988 RID: 2440
		// (get) Token: 0x06002622 RID: 9762 RVA: 0x000A26B3 File Offset: 0x000A08B3
		public Tuple<uint, uint> PrimaryColorPair
		{
			get
			{
				return new Tuple<uint, uint>(this.MapFaction.Color, this.MapFaction.Color2);
			}
		}

		// Token: 0x17000989 RID: 2441
		// (get) Token: 0x06002623 RID: 9763 RVA: 0x000A26D0 File Offset: 0x000A08D0
		public Tuple<uint, uint> AlternativeColorPair
		{
			get
			{
				return new Tuple<uint, uint>(this.MapFaction.AlternativeColor, this.MapFaction.AlternativeColor2);
			}
		}

		// Token: 0x1700098A RID: 2442
		// (get) Token: 0x06002624 RID: 9764 RVA: 0x000A26ED File Offset: 0x000A08ED
		public Banner Banner
		{
			get
			{
				if (this.LeaderHero != null)
				{
					return this.LeaderHero.ClanBanner;
				}
				IFaction mapFaction = this.MapFaction;
				if (mapFaction == null)
				{
					return null;
				}
				return mapFaction.Banner;
			}
		}

		// Token: 0x06002625 RID: 9765 RVA: 0x000A2714 File Offset: 0x000A0914
		int IBattleCombatant.GetTacticsSkillAmount()
		{
			if (this.LeaderHero != null)
			{
				return this.LeaderHero.GetSkillValue(DefaultSkills.Tactics);
			}
			return 0;
		}

		// Token: 0x1700098B RID: 2443
		// (get) Token: 0x06002626 RID: 9766 RVA: 0x000A2730 File Offset: 0x000A0930
		public MapEvent MapEvent
		{
			get
			{
				MapEventSide mapEventSide = this._mapEventSide;
				if (mapEventSide == null)
				{
					return null;
				}
				return mapEventSide.MapEvent;
			}
		}

		// Token: 0x1700098C RID: 2444
		// (get) Token: 0x06002627 RID: 9767 RVA: 0x000A2743 File Offset: 0x000A0943
		// (set) Token: 0x06002628 RID: 9768 RVA: 0x000A274C File Offset: 0x000A094C
		public MapEventSide MapEventSide
		{
			get
			{
				return this._mapEventSide;
			}
			set
			{
				if (this._mapEventSide != value)
				{
					if (value != null && this.IsMobile && this.MapEvent != null && this.MapEvent.DefenderSide.LeaderParty == this)
					{
						Debug.FailedAssert(string.Format("Double MapEvent For {0}", this.Name), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Party\\PartyBase.cs", "MapEventSide", 234);
					}
					if (this._mapEventSide != null)
					{
						this._mapEventSide.RemovePartyInternal(this);
					}
					this._mapEventSide = value;
					if (this._mapEventSide != null)
					{
						this._mapEventSide.AddPartyInternal(this);
					}
					if (this.MobileParty != null)
					{
						foreach (MobileParty mobileParty in this.MobileParty.AttachedParties)
						{
							mobileParty.Party.MapEventSide = this._mapEventSide;
						}
					}
				}
			}
		}

		// Token: 0x1700098D RID: 2445
		// (get) Token: 0x06002629 RID: 9769 RVA: 0x000A283C File Offset: 0x000A0A3C
		public BattleSideEnum Side
		{
			get
			{
				MapEventSide mapEventSide = this.MapEventSide;
				if (mapEventSide == null)
				{
					return BattleSideEnum.None;
				}
				return mapEventSide.MissionSide;
			}
		}

		// Token: 0x1700098E RID: 2446
		// (get) Token: 0x0600262A RID: 9770 RVA: 0x000A284F File Offset: 0x000A0A4F
		public BattleSideEnum OpponentSide
		{
			get
			{
				if (this.Side == BattleSideEnum.Attacker)
				{
					return BattleSideEnum.Defender;
				}
				return BattleSideEnum.Attacker;
			}
		}

		// Token: 0x0600262B RID: 9771 RVA: 0x000A2860 File Offset: 0x000A0A60
		internal void AfterLoad()
		{
			if (this.RandomValue == 0)
			{
				this.RandomValue = MBRandom.RandomInt(1, int.MaxValue);
			}
			TroopRoster prisonRoster = this.PrisonRoster;
			if (prisonRoster != null && prisonRoster.Contains(CharacterObject.PlayerCharacter) && (this != Hero.MainHero.PartyBelongedToAsPrisoner || (Hero.MainHero.PartyBelongedTo != null && Hero.MainHero.PartyBelongedToAsPrisoner != null)))
			{
				MobileParty partyBelongedTo = Hero.MainHero.PartyBelongedTo;
				PartyBase mainParty = PartyBase.MainParty;
				if (partyBelongedTo == ((mainParty != null) ? mainParty.MobileParty : null))
				{
					this.PrisonRoster.AddToCounts(CharacterObject.PlayerCharacter, -1, false, 0, 0, true, -1);
				}
				else
				{
					PlayerCaptivity.CaptorParty = this;
				}
			}
			if (this.IsMobile && this.MobileParty.IsCaravan && !this.MobileParty.IsCurrentlyUsedByAQuest && this._customOwner != null && this.MobileParty.PartyComponent.PartyOwner != this.Owner)
			{
				this.SetCustomOwner(null);
			}
			foreach (TroopRosterElement troopRosterElement in this.PrisonRoster.GetTroopRoster())
			{
				if (troopRosterElement.Character.HeroObject != null && troopRosterElement.Character.HeroObject.PartyBelongedToAsPrisoner == null)
				{
					this.PrisonRoster.RemoveTroop(troopRosterElement.Character, 1, default(UniqueTroopDescriptor), 0);
				}
			}
		}

		// Token: 0x0600262C RID: 9772 RVA: 0x000A29C8 File Offset: 0x000A0BC8
		private void InitCache()
		{
			this._partyMemberSizeLastCheckVersion = -1;
			this._prisonerSizeLastCheckVersion = -1;
			this._lastNumberOfMenWithHorseVersionNo = -1;
			this._lastNumberOfMenPerTierVersionNo = -1;
			this._lastMemberRosterVersionNo = -1;
		}

		// Token: 0x0600262D RID: 9773 RVA: 0x000A29ED File Offset: 0x000A0BED
		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData, ObjectLoadData objectLoadData)
		{
			this.InitCache();
		}

		// Token: 0x1700098F RID: 2447
		// (get) Token: 0x0600262E RID: 9774 RVA: 0x000A29F8 File Offset: 0x000A0BF8
		public int PartySizeLimit
		{
			get
			{
				int versionNo = this.MemberRoster.VersionNo;
				if (this._partyMemberSizeLastCheckVersion != versionNo || this._cachedPartyMemberSizeLimit == 0)
				{
					this._partyMemberSizeLastCheckVersion = versionNo;
					this._cachedPartyMemberSizeLimit = (int)Campaign.Current.Models.PartySizeLimitModel.GetPartyMemberSizeLimit(this, false).ResultNumber;
				}
				return this._cachedPartyMemberSizeLimit;
			}
		}

		// Token: 0x17000990 RID: 2448
		// (get) Token: 0x0600262F RID: 9775 RVA: 0x000A2A54 File Offset: 0x000A0C54
		public int PrisonerSizeLimit
		{
			get
			{
				int versionNo = this.MemberRoster.VersionNo;
				if (this._prisonerSizeLastCheckVersion != versionNo || this._cachedPrisonerSizeLimit == 0)
				{
					this._prisonerSizeLastCheckVersion = versionNo;
					this._cachedPrisonerSizeLimit = (int)Campaign.Current.Models.PartySizeLimitModel.GetPartyPrisonerSizeLimit(this, false).ResultNumber;
				}
				return this._cachedPrisonerSizeLimit;
			}
		}

		// Token: 0x17000991 RID: 2449
		// (get) Token: 0x06002630 RID: 9776 RVA: 0x000A2AB0 File Offset: 0x000A0CB0
		public ExplainedNumber PartySizeLimitExplainer
		{
			get
			{
				return Campaign.Current.Models.PartySizeLimitModel.GetPartyMemberSizeLimit(this, true);
			}
		}

		// Token: 0x17000992 RID: 2450
		// (get) Token: 0x06002631 RID: 9777 RVA: 0x000A2AC8 File Offset: 0x000A0CC8
		public ExplainedNumber PrisonerSizeLimitExplainer
		{
			get
			{
				return Campaign.Current.Models.PartySizeLimitModel.GetPartyPrisonerSizeLimit(this, true);
			}
		}

		// Token: 0x17000993 RID: 2451
		// (get) Token: 0x06002632 RID: 9778 RVA: 0x000A2AE0 File Offset: 0x000A0CE0
		public int NumberOfHealthyMembers
		{
			get
			{
				return this.MemberRoster.TotalManCount - this.MemberRoster.TotalWounded;
			}
		}

		// Token: 0x17000994 RID: 2452
		// (get) Token: 0x06002633 RID: 9779 RVA: 0x000A2AF9 File Offset: 0x000A0CF9
		public int NumberOfRegularMembers
		{
			get
			{
				return this.MemberRoster.TotalRegulars;
			}
		}

		// Token: 0x17000995 RID: 2453
		// (get) Token: 0x06002634 RID: 9780 RVA: 0x000A2B06 File Offset: 0x000A0D06
		public int NumberOfWoundedTotalMembers
		{
			get
			{
				return this.MemberRoster.TotalWounded;
			}
		}

		// Token: 0x17000996 RID: 2454
		// (get) Token: 0x06002635 RID: 9781 RVA: 0x000A2B13 File Offset: 0x000A0D13
		public int NumberOfAllMembers
		{
			get
			{
				return this.MemberRoster.TotalManCount;
			}
		}

		// Token: 0x17000997 RID: 2455
		// (get) Token: 0x06002636 RID: 9782 RVA: 0x000A2B20 File Offset: 0x000A0D20
		public int NumberOfPrisoners
		{
			get
			{
				return this.PrisonRoster.TotalManCount;
			}
		}

		// Token: 0x17000998 RID: 2456
		// (get) Token: 0x06002637 RID: 9783 RVA: 0x000A2B2D File Offset: 0x000A0D2D
		public int NumberOfMounts
		{
			get
			{
				return this.ItemRoster.NumberOfMounts;
			}
		}

		// Token: 0x17000999 RID: 2457
		// (get) Token: 0x06002638 RID: 9784 RVA: 0x000A2B3A File Offset: 0x000A0D3A
		public int NumberOfPackAnimals
		{
			get
			{
				return this.ItemRoster.NumberOfPackAnimals;
			}
		}

		// Token: 0x1700099A RID: 2458
		// (get) Token: 0x06002639 RID: 9785 RVA: 0x000A2B47 File Offset: 0x000A0D47
		public IEnumerable<CharacterObject> PrisonerHeroes
		{
			get
			{
				int num;
				for (int i = 0; i < this.PrisonRoster.Count; i = num + 1)
				{
					if (this.PrisonRoster.GetElementNumber(i) > 0)
					{
						TroopRosterElement elementCopyAtIndex = this.PrisonRoster.GetElementCopyAtIndex(i);
						if (elementCopyAtIndex.Character.IsHero)
						{
							yield return elementCopyAtIndex.Character;
						}
					}
					num = i;
				}
				yield break;
			}
		}

		// Token: 0x1700099B RID: 2459
		// (get) Token: 0x0600263A RID: 9786 RVA: 0x000A2B57 File Offset: 0x000A0D57
		public int NumberOfMenWithHorse
		{
			get
			{
				if (this._lastNumberOfMenWithHorseVersionNo != this.MemberRoster.VersionNo)
				{
					this.RecalculateNumberOfMenWithHorses();
					this._lastNumberOfMenWithHorseVersionNo = this.MemberRoster.VersionNo;
				}
				return this._numberOfMenWithHorse;
			}
		}

		// Token: 0x1700099C RID: 2460
		// (get) Token: 0x0600263B RID: 9787 RVA: 0x000A2B89 File Offset: 0x000A0D89
		public int NumberOfMenWithoutHorse
		{
			get
			{
				return this.NumberOfAllMembers - this.NumberOfMenWithHorse;
			}
		}

		// Token: 0x0600263C RID: 9788 RVA: 0x000A2B98 File Offset: 0x000A0D98
		public int GetNumberOfHealthyMenOfTier(int tier)
		{
			if (tier < 0)
			{
				Debug.FailedAssert("Requested men count for negative tier.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Party\\PartyBase.cs", "GetNumberOfHealthyMenOfTier", 444);
				return 0;
			}
			bool flag = false;
			if (this._numberOfHealthyMenPerTier == null || tier >= this._numberOfHealthyMenPerTier.Length)
			{
				int num = MathF.Max(tier, 6);
				this._numberOfHealthyMenPerTier = new int[num + 1];
				flag = true;
			}
			else if (this._lastNumberOfMenPerTierVersionNo != this.MemberRoster.VersionNo)
			{
				flag = true;
			}
			if (flag)
			{
				for (int i = 0; i < this._numberOfHealthyMenPerTier.Length; i++)
				{
					this._numberOfHealthyMenPerTier[i] = 0;
				}
				for (int j = 0; j < this.MemberRoster.Count; j++)
				{
					CharacterObject characterAtIndex = this.MemberRoster.GetCharacterAtIndex(j);
					if (characterAtIndex != null && !characterAtIndex.IsHero)
					{
						int tier2 = characterAtIndex.Tier;
						if (tier2 >= 0 && tier2 < this._numberOfHealthyMenPerTier.Length)
						{
							int num2 = this.MemberRoster.GetElementNumber(j) - this.MemberRoster.GetElementWoundedNumber(j);
							this._numberOfHealthyMenPerTier[tier2] += num2;
						}
					}
				}
				this._lastNumberOfMenPerTierVersionNo = this.MemberRoster.VersionNo;
			}
			return this._numberOfHealthyMenPerTier[tier];
		}

		// Token: 0x1700099D RID: 2461
		// (get) Token: 0x0600263D RID: 9789 RVA: 0x000A2CBC File Offset: 0x000A0EBC
		public int InventoryCapacity
		{
			get
			{
				if (this.MobileParty == null)
				{
					return 100;
				}
				return (int)Campaign.Current.Models.InventoryCapacityModel.CalculateInventoryCapacity(this.MobileParty, false, 0, 0, 0, false).ResultNumber;
			}
		}

		// Token: 0x1700099E RID: 2462
		// (get) Token: 0x0600263E RID: 9790 RVA: 0x000A2CFC File Offset: 0x000A0EFC
		public float TotalStrength
		{
			get
			{
				if (this._lastMemberRosterVersionNo == this.MemberRoster.VersionNo)
				{
					return this._cachedTotalStrength;
				}
				this._cachedTotalStrength = this.CalculateStrength();
				this._lastMemberRosterVersionNo = this.MemberRoster.VersionNo;
				return this._cachedTotalStrength;
			}
		}

		// Token: 0x0600263F RID: 9791 RVA: 0x000A2D3B File Offset: 0x000A0F3B
		public PartyBase(MobileParty mobileParty)
			: this(mobileParty, null)
		{
		}

		// Token: 0x06002640 RID: 9792 RVA: 0x000A2D45 File Offset: 0x000A0F45
		public PartyBase(Settlement settlement)
			: this(null, settlement)
		{
		}

		// Token: 0x06002641 RID: 9793 RVA: 0x000A2D50 File Offset: 0x000A0F50
		private PartyBase(MobileParty mobileParty, Settlement settlement)
		{
			this.Index = Campaign.Current.GeneratePartyId(this);
			this.MobileParty = mobileParty;
			this.Settlement = settlement;
			this.ItemRoster = new ItemRoster();
			this.MemberRoster = new TroopRoster(this);
			this.PrisonRoster = new TroopRoster(this);
			this.MemberRoster.NumberChangedCallback = new NumberChangedCallback(this.MemberRosterNumberChanged);
			this.PrisonRoster.IsPrisonRoster = true;
			this._visual = Campaign.Current.VisualCreator.CreatePartyVisual();
		}

		// Token: 0x06002642 RID: 9794 RVA: 0x000A2DFC File Offset: 0x000A0FFC
		private void RecalculateNumberOfMenWithHorses()
		{
			this._numberOfMenWithHorse = 0;
			for (int i = 0; i < this.MemberRoster.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = this.MemberRoster.GetElementCopyAtIndex(i);
				if (elementCopyAtIndex.Character != null && elementCopyAtIndex.Character.IsMounted)
				{
					this._numberOfMenWithHorse += elementCopyAtIndex.Number;
				}
			}
		}

		// Token: 0x06002643 RID: 9795 RVA: 0x000A2E5C File Offset: 0x000A105C
		public int GetNumberOfMenWith(TraitObject trait)
		{
			int num = 0;
			foreach (TroopRosterElement troopRosterElement in this.MemberRoster.GetTroopRoster())
			{
				if (troopRosterElement.Character.GetTraitLevel(trait) > 0)
				{
					num += troopRosterElement.Number;
				}
			}
			return num;
		}

		// Token: 0x06002644 RID: 9796 RVA: 0x000A2ECC File Offset: 0x000A10CC
		public int AddPrisoner(CharacterObject element, int numberToAdd)
		{
			return this.PrisonRoster.AddToCounts(element, numberToAdd, false, 0, 0, true, -1);
		}

		// Token: 0x06002645 RID: 9797 RVA: 0x000A2EE0 File Offset: 0x000A10E0
		public int AddMember(CharacterObject element, int numberToAdd, int numberToAddWounded = 0)
		{
			return this.MemberRoster.AddToCounts(element, numberToAdd, false, numberToAddWounded, 0, true, -1);
		}

		// Token: 0x06002646 RID: 9798 RVA: 0x000A2EF4 File Offset: 0x000A10F4
		public void AddPrisoners(TroopRoster roster)
		{
			foreach (TroopRosterElement troopRosterElement in roster.GetTroopRoster())
			{
				this.AddPrisoner(troopRosterElement.Character, troopRosterElement.Number);
			}
		}

		// Token: 0x06002647 RID: 9799 RVA: 0x000A2F54 File Offset: 0x000A1154
		public void AddMembers(TroopRoster roster)
		{
			this.MemberRoster.Add(roster);
		}

		// Token: 0x06002648 RID: 9800 RVA: 0x000A2F62 File Offset: 0x000A1162
		public override string ToString()
		{
			if (!this.IsSettlement)
			{
				return this.MobileParty.Name.ToString();
			}
			return this.Settlement.Name.ToString();
		}

		// Token: 0x06002649 RID: 9801 RVA: 0x000A2F90 File Offset: 0x000A1190
		public void PlaceRandomPositionAroundPosition(Vec2 centerPosition, float radius)
		{
			Vec2 vec = new Vec2(0f, 0f);
			bool flag;
			do
			{
				vec.x = centerPosition.x + MBRandom.RandomFloat * radius * 2f - radius;
				vec.y = centerPosition.y + MBRandom.RandomFloat * radius * 2f - radius;
				PathFaceRecord faceIndex = Campaign.Current.MapSceneWrapper.GetFaceIndex(vec);
				PathFaceRecord faceIndex2 = Campaign.Current.MapSceneWrapper.GetFaceIndex(centerPosition);
				flag = Campaign.Current.MapSceneWrapper.AreFacesOnSameIsland(faceIndex, faceIndex2, false);
			}
			while (!flag);
			if (this.IsMobile)
			{
				this.MobileParty.Position2D = vec;
				this.MobileParty.Ai.SetMoveModeHold();
			}
		}

		// Token: 0x0600264A RID: 9802 RVA: 0x000A3044 File Offset: 0x000A1244
		public int AddElementToMemberRoster(CharacterObject element, int numberToAdd, bool insertAtFront = false)
		{
			return this.MemberRoster.AddToCounts(element, numberToAdd, insertAtFront, 0, 0, true, -1);
		}

		// Token: 0x0600264B RID: 9803 RVA: 0x000A3058 File Offset: 0x000A1258
		public void AddToMemberRosterElementAtIndex(int index, int numberToAdd, int woundedCount = 0)
		{
			this.MemberRoster.AddToCountsAtIndex(index, numberToAdd, woundedCount, 0, true);
		}

		// Token: 0x0600264C RID: 9804 RVA: 0x000A306B File Offset: 0x000A126B
		public void WoundMemberRosterElements(CharacterObject elementObj, int numberToWound)
		{
			this.MemberRoster.AddToCounts(elementObj, 0, false, numberToWound, 0, true, -1);
		}

		// Token: 0x0600264D RID: 9805 RVA: 0x000A3080 File Offset: 0x000A1280
		public void WoundMemberRosterElementsWithIndex(int elementIndex, int numberToWound)
		{
			this.MemberRoster.AddToCountsAtIndex(elementIndex, 0, numberToWound, 0, true);
		}

		// Token: 0x0600264E RID: 9806 RVA: 0x000A3094 File Offset: 0x000A1294
		private float CalculateStrength()
		{
			float num = 0f;
			for (int i = 0; i < this.MemberRoster.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = this.MemberRoster.GetElementCopyAtIndex(i);
				if (elementCopyAtIndex.Character != null)
				{
					num += (float)(elementCopyAtIndex.Number - elementCopyAtIndex.WoundedNumber) * Campaign.Current.Models.MilitaryPowerModel.GetTroopPowerBasedOnContext(elementCopyAtIndex.Character, MapEvent.BattleTypes.None, BattleSideEnum.None, false);
				}
			}
			return num;
		}

		// Token: 0x0600264F RID: 9807 RVA: 0x000A3104 File Offset: 0x000A1304
		internal void Tick(float realDt, float dt)
		{
			bool flag = (this.IsMobile ? this.MobileParty.IsActive : this.Settlement.IsActive);
		}

		// Token: 0x06002650 RID: 9808 RVA: 0x000A3127 File Offset: 0x000A1327
		public void VisualTick(float realDt, float dt, ref int dirtyPartiesCount, ref PartyBase[] dirtyPartiesList)
		{
			this.Visuals.Tick(realDt, dt, this, ref dirtyPartiesCount, ref dirtyPartiesList);
		}

		// Token: 0x06002651 RID: 9809 RVA: 0x000A313C File Offset: 0x000A133C
		internal bool GetCharacterFromPartyRank(int partyRank, out CharacterObject character, out PartyBase party, out int stackIndex, bool includeWoundeds = false)
		{
			for (int i = 0; i < this.MemberRoster.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = this.MemberRoster.GetElementCopyAtIndex(i);
				int num = elementCopyAtIndex.Number - (includeWoundeds ? 0 : elementCopyAtIndex.WoundedNumber);
				partyRank -= num;
				if (!elementCopyAtIndex.Character.IsHero && partyRank < 0)
				{
					character = elementCopyAtIndex.Character;
					party = this;
					stackIndex = i;
					return true;
				}
			}
			character = null;
			party = null;
			stackIndex = 0;
			return false;
		}

		// Token: 0x06002652 RID: 9810 RVA: 0x000A31B8 File Offset: 0x000A13B8
		public static bool IsPositionOkForTraveling(Vec2 position)
		{
			IMapScene mapSceneWrapper = Campaign.Current.MapSceneWrapper;
			PathFaceRecord faceIndex = mapSceneWrapper.GetFaceIndex(position);
			if (!faceIndex.IsValid())
			{
				return false;
			}
			TerrainType faceTerrainType = mapSceneWrapper.GetFaceTerrainType(faceIndex);
			return PartyBase.ValidTerrainTypes.Contains(faceTerrainType);
		}

		// Token: 0x06002653 RID: 9811 RVA: 0x000A31F6 File Offset: 0x000A13F6
		private void MemberRosterNumberChanged(bool numberChanged, bool woundedNumberChanged, bool heroNumberChanged)
		{
			if (numberChanged || heroNumberChanged)
			{
				CampaignEventDispatcher.Instance.OnPartySizeChanged(this);
			}
		}

		// Token: 0x06002654 RID: 9812 RVA: 0x000A3208 File Offset: 0x000A1408
		public void UpdateVisibilityAndInspected(float mainPartySeeingRange = 0f, bool tickVisuals = false)
		{
			bool flag = false;
			bool flag2 = false;
			if (this.IsSettlement)
			{
				flag = true;
				ISpottable spottable;
				if ((spottable = this.Settlement.SettlementComponent as ISpottable) != null && !spottable.IsSpotted)
				{
					flag = false;
				}
				if (flag)
				{
					flag2 = PartyBase.CalculateSettlementInspected(this.Settlement, mainPartySeeingRange);
				}
			}
			else if (this.MobileParty.IsActive)
			{
				if (Campaign.Current.TrueSight)
				{
					flag = true;
				}
				else
				{
					if (this.MobileParty.CurrentSettlement != null)
					{
						Hero leaderHero = this.MobileParty.LeaderHero;
						if (((leaderHero != null) ? leaderHero.ClanBanner : null) == null && (this.MobileParty.MapEvent == null || !this.MobileParty.MapEvent.IsSiegeAssault || this.MobileParty.Party.Side != BattleSideEnum.Attacker))
						{
							goto IL_C9;
						}
					}
					PartyBase.CalculateVisibilityAndInspected(this.MobileParty, out flag, out flag2, mainPartySeeingRange);
				}
			}
			IL_C9:
			if (this.IsSettlement)
			{
				this.Settlement.IsVisible = flag;
				this.Settlement.IsInspected = flag2;
				return;
			}
			this.MobileParty.IsVisible = flag;
			this.MobileParty.IsInspected = flag2;
		}

		// Token: 0x06002655 RID: 9813 RVA: 0x000A3318 File Offset: 0x000A1518
		private static void CalculateVisibilityAndInspected(IMapPoint mapPoint, out bool isVisible, out bool isInspected, float mainPartySeeingRange = 0f)
		{
			isInspected = false;
			MobileParty mobileParty = mapPoint as MobileParty;
			if (((mobileParty != null) ? mobileParty.Army : null) != null && mobileParty.Army.LeaderParty.AttachedParties.IndexOf(mobileParty) >= 0)
			{
				isVisible = mobileParty.Army.LeaderParty.IsVisible;
				return;
			}
			float num = PartyBase.CalculateVisibilityRangeOfMapPoint(mapPoint, mainPartySeeingRange);
			isVisible = num > 1f && mapPoint.IsActive;
			if (isVisible)
			{
				if (mapPoint.IsInspected)
				{
					isInspected = true;
					return;
				}
				isInspected = 1f / num < Campaign.Current.Models.MapVisibilityModel.GetPartyRelativeInspectionRange(mapPoint);
			}
		}

		// Token: 0x06002656 RID: 9814 RVA: 0x000A33B4 File Offset: 0x000A15B4
		private static bool CalculateSettlementInspected(IMapPoint mapPoint, float mainPartySeeingRange = 0f)
		{
			return 1f / PartyBase.CalculateVisibilityRangeOfMapPoint(mapPoint, mainPartySeeingRange) < Campaign.Current.Models.MapVisibilityModel.GetPartyRelativeInspectionRange(mapPoint);
		}

		// Token: 0x06002657 RID: 9815 RVA: 0x000A33DC File Offset: 0x000A15DC
		private static float CalculateVisibilityRangeOfMapPoint(IMapPoint mapPoint, float mainPartySeeingRange)
		{
			MobileParty mainParty = MobileParty.MainParty;
			float lengthSquared = (mainParty.Position2D - mapPoint.Position2D).LengthSquared;
			float num = mainPartySeeingRange;
			if (mainPartySeeingRange == 0f)
			{
				num = mainParty.SeeingRange;
			}
			float num2 = num * num / lengthSquared;
			float num3 = 0.25f;
			MobileParty mobileParty;
			if ((mobileParty = mapPoint as MobileParty) != null)
			{
				num3 = Campaign.Current.Models.MapVisibilityModel.GetPartySpottingDifficulty(mainParty, mobileParty);
			}
			return num2 / num3;
		}

		// Token: 0x1700099F RID: 2463
		// (get) Token: 0x06002658 RID: 9816 RVA: 0x000A344D File Offset: 0x000A164D
		// (set) Token: 0x06002659 RID: 9817 RVA: 0x000A3455 File Offset: 0x000A1655
		[SaveableProperty(12)]
		public float AverageBearingRotation { get; set; }

		// Token: 0x170009A0 RID: 2464
		// (get) Token: 0x0600265A RID: 9818 RVA: 0x000A345E File Offset: 0x000A165E
		public BasicCultureObject BasicCulture
		{
			get
			{
				return this.Culture;
			}
		}

		// Token: 0x170009A1 RID: 2465
		// (get) Token: 0x0600265B RID: 9819 RVA: 0x000A3468 File Offset: 0x000A1668
		public BasicCharacterObject General
		{
			get
			{
				MobileParty mobileParty = this.MobileParty;
				if (((mobileParty != null) ? mobileParty.Army : null) != null)
				{
					MobileParty leaderParty = this.MobileParty.Army.LeaderParty;
					if (leaderParty == null)
					{
						return null;
					}
					Hero leaderHero = leaderParty.LeaderHero;
					if (leaderHero == null)
					{
						return null;
					}
					return leaderHero.CharacterObject;
				}
				else
				{
					Hero leaderHero2 = this.LeaderHero;
					if (leaderHero2 == null)
					{
						return null;
					}
					return leaderHero2.CharacterObject;
				}
			}
		}

		// Token: 0x0600265C RID: 9820 RVA: 0x000A34C1 File Offset: 0x000A16C1
		internal void WeightSurroundedFaces(int weight, bool isTown, int level)
		{
		}

		// Token: 0x0600265D RID: 9821 RVA: 0x000A34C3 File Offset: 0x000A16C3
		public void SetAsCameraFollowParty()
		{
			Campaign.Current.CameraFollowParty = this;
		}

		// Token: 0x0600265E RID: 9822 RVA: 0x000A34D0 File Offset: 0x000A16D0
		internal void OnFinishLoadState()
		{
			this._visual = Campaign.Current.VisualCreator.CreatePartyVisual();
			this.Visuals.OnStartup(this);
			bool flag = (this.IsSettlement ? this.Settlement.IsVisible : this.MobileParty.IsVisible);
			this.Visuals.SetVisualVisible(flag);
			this.Visuals.SetMapIconAsDirty();
			MobileParty mobileParty = this.MobileParty;
			if (mobileParty != null)
			{
				mobileParty.OnFinishLoadState();
			}
			this.MemberRoster.NumberChangedCallback = new NumberChangedCallback(this.MemberRosterNumberChanged);
		}

		// Token: 0x0600265F RID: 9823 RVA: 0x000A355E File Offset: 0x000A175E
		internal void OnHeroAdded(Hero heroObject)
		{
			MobileParty mobileParty = this.MobileParty;
			if (mobileParty == null)
			{
				return;
			}
			mobileParty.OnHeroAdded(heroObject);
		}

		// Token: 0x06002660 RID: 9824 RVA: 0x000A3571 File Offset: 0x000A1771
		internal void OnHeroRemoved(Hero heroObject)
		{
			MobileParty mobileParty = this.MobileParty;
			if (mobileParty == null)
			{
				return;
			}
			mobileParty.OnHeroRemoved(heroObject);
		}

		// Token: 0x06002661 RID: 9825 RVA: 0x000A3584 File Offset: 0x000A1784
		internal void OnHeroAddedAsPrisoner(Hero heroObject)
		{
			heroObject.OnAddedToPartyAsPrisoner(this);
		}

		// Token: 0x06002662 RID: 9826 RVA: 0x000A358D File Offset: 0x000A178D
		internal void OnHeroRemovedAsPrisoner(Hero heroObject)
		{
			heroObject.OnRemovedFromPartyAsPrisoner(this);
		}

		// Token: 0x06002663 RID: 9827 RVA: 0x000A3596 File Offset: 0x000A1796
		public void ResetTempXp()
		{
			this.MemberRoster.ClearTempXp();
		}

		// Token: 0x06002664 RID: 9828 RVA: 0x000A35A3 File Offset: 0x000A17A3
		public void OnGameInitialized()
		{
			if (this.IsMobile)
			{
				this.MobileParty.OnGameInitialized();
				return;
			}
			if (this.IsSettlement)
			{
				this.Settlement.OnGameInitialized();
			}
		}

		// Token: 0x04000B84 RID: 2948
		private static readonly HashSet<TerrainType> ValidTerrainTypes = new HashSet<TerrainType>
		{
			TerrainType.Snow,
			TerrainType.Steppe,
			TerrainType.Plain,
			TerrainType.Desert,
			TerrainType.Swamp,
			TerrainType.Dune,
			TerrainType.Bridge,
			TerrainType.Forest,
			TerrainType.ShallowRiver
		};

		// Token: 0x04000B85 RID: 2949
		[CachedData]
		private IPartyVisual _visual;

		// Token: 0x04000B8B RID: 2955
		[SaveableField(15)]
		private int _remainingFoodPercentage;

		// Token: 0x04000B8C RID: 2956
		[SaveableField(182)]
		private CampaignTime _lastEatingTime = CampaignTime.Now;

		// Token: 0x04000B8D RID: 2957
		[SaveableField(8)]
		private Hero _customOwner;

		// Token: 0x04000B8E RID: 2958
		[SaveableField(9)]
		private int _index;

		// Token: 0x04000B90 RID: 2960
		[SaveableField(200)]
		private MapEventSide _mapEventSide;

		// Token: 0x04000B91 RID: 2961
		[CachedData]
		private int _lastMemberRosterVersionNo;

		// Token: 0x04000B92 RID: 2962
		[CachedData]
		private int _partyMemberSizeLastCheckVersion;

		// Token: 0x04000B93 RID: 2963
		[CachedData]
		private int _cachedPartyMemberSizeLimit;

		// Token: 0x04000B94 RID: 2964
		[CachedData]
		private int _prisonerSizeLastCheckVersion;

		// Token: 0x04000B95 RID: 2965
		[CachedData]
		private int _cachedPrisonerSizeLimit;

		// Token: 0x04000B96 RID: 2966
		[CachedData]
		private int _lastNumberOfMenWithHorseVersionNo;

		// Token: 0x04000B97 RID: 2967
		[CachedData]
		private int _lastNumberOfMenPerTierVersionNo;

		// Token: 0x04000B98 RID: 2968
		[SaveableField(17)]
		private int _numberOfMenWithHorse;

		// Token: 0x04000B99 RID: 2969
		private int[] _numberOfHealthyMenPerTier;

		// Token: 0x04000B9A RID: 2970
		[CachedData]
		private float _cachedTotalStrength;
	}
}
