using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.LogEntries;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x0200004E RID: 78
	public class CampaignInformationManager
	{
		// Token: 0x06000775 RID: 1909 RVA: 0x0002082C File Offset: 0x0001EA2C
		private void MapNoticeRemoved(InformationData obj)
		{
			int num = -1;
			for (int i = 0; i < this._mapNotices.Count; i++)
			{
				if (obj == this._mapNotices[i])
				{
					num = i;
				}
			}
			if (num >= 0)
			{
				this._mapNotices.RemoveAt(num);
			}
		}

		// Token: 0x06000776 RID: 1910 RVA: 0x00020872 File Offset: 0x0001EA72
		public CampaignInformationManager()
		{
			this._mapNotices = new List<InformationData>();
		}

		// Token: 0x06000777 RID: 1911 RVA: 0x00020888 File Offset: 0x0001EA88
		internal void NewLogEntryAdded(LogEntry log)
		{
			IChatNotification chatNotification;
			if (this._isSessionLaunched && (chatNotification = log as IChatNotification) != null && chatNotification.IsVisibleNotification)
			{
				InformationManager.DisplayMessage(new InformationMessage
				{
					Information = chatNotification.GetNotificationText().ToString(),
					Color = Color.FromUint(Campaign.Current.Models.DiplomacyModel.GetNotificationColor(chatNotification.NotificationType))
				});
			}
		}

		// Token: 0x06000778 RID: 1912 RVA: 0x000208EF File Offset: 0x0001EAEF
		private void AddInformationData(InformationData informationData)
		{
			List<InformationData> mapNotices = this._mapNotices;
			if (mapNotices != null)
			{
				mapNotices.Add(informationData);
			}
			MBInformationManager.AddNotice(informationData);
		}

		// Token: 0x06000779 RID: 1913 RVA: 0x00020909 File Offset: 0x0001EB09
		internal void RegisterEvents()
		{
			this._isSessionLaunched = true;
			MBInformationManager.OnRemoveMapNotice += this.MapNoticeRemoved;
		}

		// Token: 0x0600077A RID: 1914 RVA: 0x00020923 File Offset: 0x0001EB23
		internal void DeRegisterEvents()
		{
			this._isSessionLaunched = false;
			MBInformationManager.OnRemoveMapNotice -= this.MapNoticeRemoved;
		}

		// Token: 0x0600077B RID: 1915 RVA: 0x00020940 File Offset: 0x0001EB40
		public void OnGameLoaded()
		{
			this._mapNotices.RemoveAll((InformationData t) => t == null || !t.IsValid());
			foreach (InformationData informationData in this._mapNotices)
			{
				MBInformationManager.AddNotice(informationData);
			}
		}

		// Token: 0x0600077C RID: 1916 RVA: 0x000209BC File Offset: 0x0001EBBC
		public void NewMapNoticeAdded(InformationData informationData)
		{
			this.AddInformationData(informationData);
		}

		// Token: 0x0600077D RID: 1917 RVA: 0x000209C8 File Offset: 0x0001EBC8
		public bool InformationDataExists<T>(Func<T, bool> predicate) where T : InformationData
		{
			using (List<InformationData>.Enumerator enumerator = this._mapNotices.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					T t;
					if ((t = enumerator.Current as T) != null && (predicate == null || predicate(t)))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x0600077E RID: 1918 RVA: 0x00020A3C File Offset: 0x0001EC3C
		internal static void AutoGeneratedStaticCollectObjectsCampaignInformationManager(object o, List<object> collectedObjects)
		{
			((CampaignInformationManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600077F RID: 1919 RVA: 0x00020A4A File Offset: 0x0001EC4A
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._mapNotices);
		}

		// Token: 0x06000780 RID: 1920 RVA: 0x00020A58 File Offset: 0x0001EC58
		internal static object AutoGeneratedGetMemberValue_mapNotices(object o)
		{
			return ((CampaignInformationManager)o)._mapNotices;
		}

		// Token: 0x04000291 RID: 657
		[SaveableField(10)]
		private List<InformationData> _mapNotices;

		// Token: 0x04000292 RID: 658
		[CachedData]
		private bool _isSessionLaunched;

		// Token: 0x02000495 RID: 1173
		public enum NoticeType
		{
			// Token: 0x040013DD RID: 5085
			None,
			// Token: 0x040013DE RID: 5086
			WarAnnouncement,
			// Token: 0x040013DF RID: 5087
			PeaceAnnouncement,
			// Token: 0x040013E0 RID: 5088
			ChangeSettlementOwner,
			// Token: 0x040013E1 RID: 5089
			FortificationIsCaptured,
			// Token: 0x040013E2 RID: 5090
			HeroChangedFaction,
			// Token: 0x040013E3 RID: 5091
			BarterAnnouncement
		}
	}
}
