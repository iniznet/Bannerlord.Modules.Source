using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment
{
	public sealed class PerkObject : PropertyObject
	{
		internal static void AutoGeneratedStaticCollectObjectsPerkObject(object o, List<object> collectedObjects)
		{
			((PerkObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public static MBReadOnlyList<PerkObject> All
		{
			get
			{
				return Campaign.Current.AllPerks;
			}
		}

		public SkillObject Skill { get; private set; }

		public float RequiredSkillValue { get; private set; }

		public PerkObject AlternativePerk { get; private set; }

		public SkillEffect.PerkRole PrimaryRole { get; private set; }

		public SkillEffect.PerkRole SecondaryRole { get; private set; }

		public float PrimaryBonus { get; private set; }

		public float SecondaryBonus { get; private set; }

		public SkillEffect.EffectIncrementType PrimaryIncrementType { get; private set; }

		public SkillEffect.EffectIncrementType SecondaryIncrementType { get; private set; }

		public TroopClassFlag PrimaryTroopClassMask { get; private set; }

		public TroopClassFlag SecondaryTroopClassMask { get; private set; }

		public TextObject PrimaryDescription { get; private set; }

		public TextObject SecondaryDescription { get; private set; }

		public bool IsTrash
		{
			get
			{
				return base.Name == null || base.Description == null || this.Skill == null;
			}
		}

		public PerkObject(string stringId)
			: base(stringId)
		{
		}

		public void Initialize(string name, SkillObject skill, int requiredSkillValue, PerkObject alternativePerk, string primaryDescription, SkillEffect.PerkRole primaryRole, float primaryBonus, SkillEffect.EffectIncrementType incrementType, string secondaryDescription = "", SkillEffect.PerkRole secondaryRole = SkillEffect.PerkRole.None, float secondaryBonus = 0f, SkillEffect.EffectIncrementType secondaryIncrementType = SkillEffect.EffectIncrementType.Invalid, TroopClassFlag primaryTroopClassMask = TroopClassFlag.None, TroopClassFlag secondaryTroopClassMask = TroopClassFlag.None)
		{
			this.PrimaryDescription = new TextObject(primaryDescription, null);
			this.SecondaryDescription = new TextObject(secondaryDescription, null);
			this.SetDescriptionTextVariable(this.PrimaryDescription, primaryBonus, incrementType);
			TextObject textObject;
			if (secondaryDescription != "")
			{
				this.SetDescriptionTextVariable(this.SecondaryDescription, secondaryBonus, secondaryIncrementType);
				textObject = GameTexts.FindText("str_string_newline_newline_string", null);
				textObject.SetTextVariable("STR1", this.PrimaryDescription);
				textObject.SetTextVariable("STR2", this.SecondaryDescription);
			}
			else
			{
				textObject = this.PrimaryDescription.CopyTextObject();
			}
			textObject.SetTextVariable("newline", "\n");
			base.Initialize(new TextObject(name, null), textObject);
			this.Skill = skill;
			this.RequiredSkillValue = (float)requiredSkillValue;
			this.AlternativePerk = alternativePerk;
			if (alternativePerk != null)
			{
				alternativePerk.AlternativePerk = this;
			}
			this.PrimaryRole = primaryRole;
			this.SecondaryRole = secondaryRole;
			this.PrimaryBonus = primaryBonus;
			this.SecondaryBonus = secondaryBonus;
			this.PrimaryIncrementType = incrementType;
			this.SecondaryIncrementType = ((secondaryIncrementType == SkillEffect.EffectIncrementType.Invalid) ? this.PrimaryIncrementType : secondaryIncrementType);
			this.PrimaryTroopClassMask = primaryTroopClassMask;
			this.SecondaryTroopClassMask = secondaryTroopClassMask;
			base.AfterInitialized();
		}

		public override string ToString()
		{
			return base.Name.ToString();
		}

		private void SetDescriptionTextVariable(TextObject description, float bonus, SkillEffect.EffectIncrementType effectIncrementType)
		{
			float num = ((effectIncrementType == SkillEffect.EffectIncrementType.AddFactor) ? (bonus * 100f) : bonus);
			if (bonus > 0f)
			{
				description.SetTextVariable("VALUE", "+" + num);
				return;
			}
			description.SetTextVariable("VALUE", string.Concat(num));
		}
	}
}
