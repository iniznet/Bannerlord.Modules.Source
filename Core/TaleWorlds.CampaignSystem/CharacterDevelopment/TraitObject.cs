using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment
{
	// Token: 0x0200034B RID: 843
	public sealed class TraitObject : PropertyObject
	{
		// Token: 0x06002F16 RID: 12054 RVA: 0x000C194B File Offset: 0x000BFB4B
		internal static void AutoGeneratedStaticCollectObjectsTraitObject(object o, List<object> collectedObjects)
		{
			((TraitObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002F17 RID: 12055 RVA: 0x000C1959 File Offset: 0x000BFB59
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x17000B29 RID: 2857
		// (get) Token: 0x06002F18 RID: 12056 RVA: 0x000C1962 File Offset: 0x000BFB62
		public static MBReadOnlyList<TraitObject> All
		{
			get
			{
				return Campaign.Current.AllTraits;
			}
		}

		// Token: 0x17000B2A RID: 2858
		// (get) Token: 0x06002F19 RID: 12057 RVA: 0x000C196E File Offset: 0x000BFB6E
		// (set) Token: 0x06002F1A RID: 12058 RVA: 0x000C1976 File Offset: 0x000BFB76
		public int MinValue { get; private set; }

		// Token: 0x17000B2B RID: 2859
		// (get) Token: 0x06002F1B RID: 12059 RVA: 0x000C197F File Offset: 0x000BFB7F
		// (set) Token: 0x06002F1C RID: 12060 RVA: 0x000C1987 File Offset: 0x000BFB87
		public int MaxValue { get; private set; }

		// Token: 0x17000B2C RID: 2860
		// (get) Token: 0x06002F1D RID: 12061 RVA: 0x000C1990 File Offset: 0x000BFB90
		// (set) Token: 0x06002F1E RID: 12062 RVA: 0x000C1998 File Offset: 0x000BFB98
		public bool IsHidden { get; private set; }

		// Token: 0x06002F1F RID: 12063 RVA: 0x000C19A1 File Offset: 0x000BFBA1
		public TraitObject(string stringId)
			: base(stringId)
		{
		}

		// Token: 0x06002F20 RID: 12064 RVA: 0x000C19AA File Offset: 0x000BFBAA
		public void Initialize(TextObject name, TextObject description, bool isHidden, int minValue, int maxValue)
		{
			base.Initialize(name, description);
			this.MinValue = minValue;
			this.MaxValue = maxValue;
			this.IsHidden = isHidden;
			base.AfterInitialized();
		}
	}
}
