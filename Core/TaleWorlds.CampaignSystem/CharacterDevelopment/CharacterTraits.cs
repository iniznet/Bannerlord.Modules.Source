using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment
{
	public class CharacterTraits : PropertyOwner<TraitObject>
	{
		internal static void AutoGeneratedStaticCollectObjectsCharacterTraits(object o, List<object> collectedObjects)
		{
			((CharacterTraits)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public CharacterTraits(CharacterTraits propertyOwner)
			: base(propertyOwner)
		{
		}

		public CharacterTraits()
		{
		}

		public int Mercy
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Mercy);
			}
		}

		public int Valor
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Valor);
			}
		}

		public int Honor
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Honor);
			}
		}

		public int Generosity
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Generosity);
			}
		}

		public int Calculating
		{
			get
			{
				return base.GetPropertyValue(DefaultTraits.Calculating);
			}
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			this.Initialize();
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.NodeType != XmlNodeType.Comment)
				{
					XmlAttributeCollection attributes = xmlNode.Attributes;
					string value = attributes["id"].Value;
					string value2 = attributes["value"].Value;
					TraitObject @object = Game.Current.ObjectManager.GetObject<TraitObject>(value);
					if (@object != null)
					{
						int num = ((value2 != null) ? Convert.ToInt32(value2) : 1);
						base.SetPropertyValue(@object, num);
					}
				}
			}
			foreach (object obj2 in node.ChildNodes)
			{
				XmlNode xmlNode2 = (XmlNode)obj2;
				if (xmlNode2.NodeType != XmlNodeType.Comment)
				{
					string text = xmlNode2.Name;
					int num2 = 1;
					if (text == "Trait")
					{
						text = null;
						if (xmlNode2.Attributes != null)
						{
							XmlAttribute xmlAttribute = xmlNode2.Attributes["id"];
							if (xmlAttribute != null)
							{
								text = xmlAttribute.InnerText;
							}
						}
					}
					if (text != null)
					{
						TraitObject object2 = Game.Current.ObjectManager.GetObject<TraitObject>(text);
						if (object2 != null)
						{
							XmlAttribute xmlAttribute2 = xmlNode2.Attributes["value"];
							if (xmlAttribute2 != null)
							{
								string value3 = xmlAttribute2.Value;
								num2 = ((value3 != null) ? Convert.ToInt32(value3) : 1);
							}
							base.SetPropertyValue(object2, num2);
						}
					}
				}
			}
		}

		protected override void AfterLoad()
		{
			if (MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("e1.8.1.0", 26219))
			{
				List<KeyValuePair<TraitObject, int>> list = this._attributes.ToMBList<KeyValuePair<TraitObject, int>>();
				int num = 0;
				foreach (KeyValuePair<TraitObject, int> keyValuePair in list)
				{
					if (keyValuePair.Key.StringId == "DesertScoutSkills")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
					if (keyValuePair.Key.StringId == "WoodsScoutSkills")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
					if (keyValuePair.Key.StringId == "HillScoutSkills")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
					if (keyValuePair.Key.StringId == "MarshesLore")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
					if (keyValuePair.Key.StringId == "SteppeScoutSkills")
					{
						this._attributes.Remove(keyValuePair.Key);
						num = Math.Max(keyValuePair.Value, num);
					}
				}
				if (num > 0)
				{
					this._attributes.Add(DefaultTraits.ScoutSkills, num);
				}
				List<string> list2 = new List<string> { "Engineer", "SergeantCommandSkills", "Manager", "Surgeon", "ScoutSkills", "Commander", "Politician", "RogueSkills", "Blacksmith" };
				foreach (KeyValuePair<TraitObject, int> keyValuePair2 in this._attributes.ToMBList<KeyValuePair<TraitObject, int>>())
				{
					if (list2.ContainsQ(keyValuePair2.Key.StringId) && keyValuePair2.Value > 0)
					{
						this._attributes[keyValuePair2.Key] = keyValuePair2.Value * 2;
					}
				}
			}
		}

		public const int MaxTraitValue = 20;
	}
}
