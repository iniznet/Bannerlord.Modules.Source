using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.CharacterDevelopment
{
	// Token: 0x0200034A RID: 842
	public class HeroDeveloper : PropertyOwnerF<PropertyObject>, IHeroDeveloper
	{
		// Token: 0x06002EE1 RID: 12001 RVA: 0x000C0E08 File Offset: 0x000BF008
		internal static void AutoGeneratedStaticCollectObjectsHeroDeveloper(object o, List<object> collectedObjects)
		{
			((HeroDeveloper)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002EE2 RID: 12002 RVA: 0x000C0E16 File Offset: 0x000BF016
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._newFocuses);
			collectedObjects.Add(this.Hero);
		}

		// Token: 0x06002EE3 RID: 12003 RVA: 0x000C0E37 File Offset: 0x000BF037
		internal static object AutoGeneratedGetMemberValueUnspentFocusPoints(object o)
		{
			return ((HeroDeveloper)o).UnspentFocusPoints;
		}

		// Token: 0x06002EE4 RID: 12004 RVA: 0x000C0E49 File Offset: 0x000BF049
		internal static object AutoGeneratedGetMemberValueUnspentAttributePoints(object o)
		{
			return ((HeroDeveloper)o).UnspentAttributePoints;
		}

		// Token: 0x06002EE5 RID: 12005 RVA: 0x000C0E5B File Offset: 0x000BF05B
		internal static object AutoGeneratedGetMemberValueHero(object o)
		{
			return ((HeroDeveloper)o).Hero;
		}

		// Token: 0x06002EE6 RID: 12006 RVA: 0x000C0E68 File Offset: 0x000BF068
		internal static object AutoGeneratedGetMemberValue_newFocuses(object o)
		{
			return ((HeroDeveloper)o)._newFocuses;
		}

		// Token: 0x06002EE7 RID: 12007 RVA: 0x000C0E75 File Offset: 0x000BF075
		internal static object AutoGeneratedGetMemberValue_totalXp(object o)
		{
			return ((HeroDeveloper)o)._totalXp;
		}

		// Token: 0x17000B24 RID: 2852
		// (get) Token: 0x06002EE8 RID: 12008 RVA: 0x000C0E87 File Offset: 0x000BF087
		// (set) Token: 0x06002EE9 RID: 12009 RVA: 0x000C0E8F File Offset: 0x000BF08F
		[SaveableProperty(101)]
		public int UnspentFocusPoints { get; set; }

		// Token: 0x17000B25 RID: 2853
		// (get) Token: 0x06002EEA RID: 12010 RVA: 0x000C0E98 File Offset: 0x000BF098
		// (set) Token: 0x06002EEB RID: 12011 RVA: 0x000C0EA0 File Offset: 0x000BF0A0
		[SaveableProperty(102)]
		public int UnspentAttributePoints { get; set; }

		// Token: 0x17000B26 RID: 2854
		// (get) Token: 0x06002EEC RID: 12012 RVA: 0x000C0EA9 File Offset: 0x000BF0A9
		public bool IsDeveloperInitialized
		{
			get
			{
				return this.Hero != null;
			}
		}

		// Token: 0x17000B27 RID: 2855
		// (get) Token: 0x06002EED RID: 12013 RVA: 0x000C0EB4 File Offset: 0x000BF0B4
		// (set) Token: 0x06002EEE RID: 12014 RVA: 0x000C0EBC File Offset: 0x000BF0BC
		[SaveableProperty(103)]
		public Hero Hero { get; private set; }

		// Token: 0x17000B28 RID: 2856
		// (get) Token: 0x06002EEF RID: 12015 RVA: 0x000C0EC5 File Offset: 0x000BF0C5
		// (set) Token: 0x06002EF0 RID: 12016 RVA: 0x000C0ECD File Offset: 0x000BF0CD
		public int TotalXp
		{
			get
			{
				return this._totalXp;
			}
			private set
			{
				this._totalXp = value;
			}
		}

		// Token: 0x06002EF1 RID: 12017 RVA: 0x000C0ED8 File Offset: 0x000BF0D8
		public int GetSkillXpProgress(SkillObject skill)
		{
			int skillValue = this.Hero.GetSkillValue(skill);
			return MathF.Round(base.GetPropertyValue(skill)) - Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(skillValue);
		}

		// Token: 0x06002EF2 RID: 12018 RVA: 0x000C0F14 File Offset: 0x000BF114
		internal HeroDeveloper(Hero hero)
		{
			this.Hero = hero;
			this._newFocuses = new CharacterSkills();
		}

		// Token: 0x06002EF3 RID: 12019 RVA: 0x000C0F2E File Offset: 0x000BF12E
		public void ClearUnspentPoints()
		{
			this.UnspentAttributePoints = 0;
			this.UnspentFocusPoints = 0;
		}

		// Token: 0x06002EF4 RID: 12020 RVA: 0x000C0F40 File Offset: 0x000BF140
		public void ClearHero()
		{
			base.ClearAllProperty();
			this.ClearFocuses();
			this.Hero.ClearAttributes();
			this.Hero.ClearSkills();
			this.Hero.ClearPerks();
			this.UnspentFocusPoints = 0;
			this.UnspentAttributePoints = 0;
			this.Hero.ClearTraits();
			this.ClearHeroLevel();
		}

		// Token: 0x06002EF5 RID: 12021 RVA: 0x000C0F9C File Offset: 0x000BF19C
		public int GetTotalSkillPoints()
		{
			int num = 0;
			foreach (SkillObject skillObject in Skills.All)
			{
				num += this.Hero.GetSkillValue(skillObject);
			}
			return num;
		}

		// Token: 0x06002EF6 RID: 12022 RVA: 0x000C0FFC File Offset: 0x000BF1FC
		public void ChangeSkillLevel(SkillObject skill, int changeAmount, bool shouldNotify = true)
		{
			int skillValue = this.Hero.GetSkillValue(skill);
			int num = skillValue + changeAmount;
			float num2 = 0f;
			float propertyValue = base.GetPropertyValue(skill);
			num2 -= propertyValue - (float)Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(skillValue);
			for (int i = skillValue + 1; i <= num; i++)
			{
				num2 += (float)(Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(i) - Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(i - 1));
			}
			this.AddSkillXp(skill, num2 + 1f, false, shouldNotify);
		}

		// Token: 0x06002EF7 RID: 12023 RVA: 0x000C1098 File Offset: 0x000BF298
		public void DeriveSkillsFromTraits(bool isByNaturalGrowth = false, CharacterObject template = null)
		{
			foreach (Tuple<SkillObject, int> tuple in Campaign.Current.Models.CharacterDevelopmentModel.GetSkillsDerivedFromTraits(this.Hero, template, isByNaturalGrowth))
			{
				SkillObject item = tuple.Item1;
				int item2 = tuple.Item2;
				if (this.Hero.GetSkillValue(item) < item2)
				{
					this.Hero.HeroDeveloper.SetInitialSkillLevel(item, item2);
				}
			}
			this.Hero.HeroDeveloper.CheckInitialLevel();
		}

		// Token: 0x06002EF8 RID: 12024 RVA: 0x000C1138 File Offset: 0x000BF338
		public void SetInitialSkillLevel(SkillObject skill, int newSkillValue)
		{
			int xpRequiredForSkillLevel = Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(newSkillValue);
			base.SetPropertyValue(skill, (float)xpRequiredForSkillLevel);
			this.Hero.SetSkillValue(skill, newSkillValue);
			this.InitializeSkillXp(skill);
		}

		// Token: 0x06002EF9 RID: 12025 RVA: 0x000C1178 File Offset: 0x000BF378
		public void AddSkillXp(SkillObject skill, float rawXp, bool isAffectedByFocusFactor = true, bool shouldNotify = true)
		{
			if (rawXp <= 0f)
			{
				return;
			}
			if (isAffectedByFocusFactor)
			{
				this.GainRawXp(rawXp, shouldNotify);
			}
			float num = rawXp * Campaign.Current.Models.GenericXpModel.GetXpMultiplier(this.Hero);
			if (num <= 0f)
			{
				return;
			}
			float propertyValue = base.GetPropertyValue(skill);
			float focusFactor = this.GetFocusFactor(skill);
			float num2 = (isAffectedByFocusFactor ? (num * focusFactor) : num);
			float num3 = propertyValue + num2;
			int skillLevelChange = Campaign.Current.Models.CharacterDevelopmentModel.GetSkillLevelChange(this.Hero, skill, num3);
			base.SetPropertyValue(skill, num3);
			if (skillLevelChange > 0)
			{
				this.ChangeSkillLevelFromXpChange(skill, skillLevelChange, shouldNotify);
			}
		}

		// Token: 0x06002EFA RID: 12026 RVA: 0x000C1214 File Offset: 0x000BF414
		private void GainRawXp(float rawXp, bool shouldNotify)
		{
			if ((long)this._totalXp + (long)MathF.Round(rawXp) < (long)Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint())
			{
				this._totalXp += MathF.Round(rawXp);
				this.CheckLevel(shouldNotify);
				return;
			}
			this._totalXp = Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint();
		}

		// Token: 0x06002EFB RID: 12027 RVA: 0x000C127C File Offset: 0x000BF47C
		public float GetFocusFactor(SkillObject skill)
		{
			return Campaign.Current.Models.CharacterDevelopmentModel.CalculateLearningRate(this.Hero, skill);
		}

		// Token: 0x06002EFC RID: 12028 RVA: 0x000C129C File Offset: 0x000BF49C
		private void ChangeSkillLevelFromXpChange(SkillObject skill, int changeAmount, bool shouldNotify = false)
		{
			if (changeAmount != 0)
			{
				int num = this.Hero.GetSkillValue(skill) + changeAmount;
				this.Hero.SetSkillValue(skill, num);
				CampaignEventDispatcher.Instance.OnHeroGainedSkill(this.Hero, skill, changeAmount, shouldNotify);
			}
		}

		// Token: 0x06002EFD RID: 12029 RVA: 0x000C12DB File Offset: 0x000BF4DB
		void IHeroDeveloper.AfterLoad()
		{
			base.AfterLoadInternal();
		}

		// Token: 0x06002EFE RID: 12030 RVA: 0x000C12E4 File Offset: 0x000BF4E4
		internal void CheckLevel(bool shouldNotify = false)
		{
			bool flag = false;
			int totalXp = this._totalXp;
			while (!flag)
			{
				int xpRequiredForLevel = this.GetXpRequiredForLevel(this.Hero.Level + 1);
				if (xpRequiredForLevel != Campaign.Current.Models.CharacterDevelopmentModel.GetMaxSkillPoint() && totalXp >= xpRequiredForLevel)
				{
					this.Hero.Level++;
					this.OnGainLevel(shouldNotify);
				}
				else
				{
					flag = true;
				}
			}
		}

		// Token: 0x06002EFF RID: 12031 RVA: 0x000C134C File Offset: 0x000BF54C
		public void SetInitialLevel(int level)
		{
			int xpRequiredForLevel = this.GetXpRequiredForLevel(level);
			this.TotalXp = xpRequiredForLevel + 1;
		}

		// Token: 0x06002F00 RID: 12032 RVA: 0x000C136A File Offset: 0x000BF56A
		public void CheckInitialLevel()
		{
			this.SetupDefaultPoints();
			this.SetInitialLevelFromSkills();
			this.CheckLevel(false);
			this.SetInitialFocusAndAttributePoints();
		}

		// Token: 0x06002F01 RID: 12033 RVA: 0x000C1388 File Offset: 0x000BF588
		private void SetupDefaultPoints()
		{
			this.UnspentFocusPoints = (this.Hero.Level - 1) * Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsPerLevel + Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsAtStart;
			this.UnspentAttributePoints = (this.Hero.Level - 1) / Campaign.Current.Models.CharacterDevelopmentModel.LevelsPerAttributePoint + Campaign.Current.Models.CharacterDevelopmentModel.AttributePointsAtStart;
		}

		// Token: 0x06002F02 RID: 12034 RVA: 0x000C1410 File Offset: 0x000BF610
		private void SetInitialLevelFromSkills()
		{
			int num = (int)Skills.All.Sum((SkillObject s) => 2f * MathF.Pow((float)this.Hero.GetSkillValue(s), 2.2f)) - 2000;
			this.TotalXp = MathF.Max(1, num);
		}

		// Token: 0x06002F03 RID: 12035 RVA: 0x000C1448 File Offset: 0x000BF648
		private void SetInitialFocusAndAttributePoints()
		{
			foreach (CharacterAttribute characterAttribute in Attributes.All)
			{
				int attributeValue = this.Hero.GetAttributeValue(characterAttribute);
				this.UnspentAttributePoints -= attributeValue;
				if (attributeValue == 0)
				{
					this.AddAttribute(characterAttribute, 1, true);
				}
			}
			foreach (SkillObject skillObject in Skills.All)
			{
				this.UnspentFocusPoints -= this.GetFocus(skillObject);
				this.InitializeSkillXp(skillObject);
			}
		}

		// Token: 0x06002F04 RID: 12036 RVA: 0x000C1514 File Offset: 0x000BF714
		public MBReadOnlyList<PerkObject> GetOneAvailablePerkForEachPerkPair()
		{
			MBList<PerkObject> mblist = new MBList<PerkObject>();
			foreach (PerkObject perkObject in PerkObject.All)
			{
				SkillObject skill = perkObject.Skill;
				if ((float)this.Hero.GetSkillValue(skill) >= perkObject.RequiredSkillValue && !this.Hero.GetPerkValue(perkObject) && (perkObject.AlternativePerk == null || !this.Hero.GetPerkValue(perkObject.AlternativePerk)) && !mblist.Contains(perkObject.AlternativePerk))
				{
					mblist.Add(perkObject);
				}
			}
			return mblist;
		}

		// Token: 0x06002F05 RID: 12037 RVA: 0x000C15C0 File Offset: 0x000BF7C0
		private void ClearHeroLevel()
		{
			this.Hero.Level = 0;
		}

		// Token: 0x06002F06 RID: 12038 RVA: 0x000C15CE File Offset: 0x000BF7CE
		public void AddPerk(PerkObject perk)
		{
			this.Hero.SetPerkValueInternal(perk, true);
		}

		// Token: 0x06002F07 RID: 12039 RVA: 0x000C15E0 File Offset: 0x000BF7E0
		private void OnGainLevel(bool shouldNotify = true)
		{
			this.UnspentFocusPoints += Campaign.Current.Models.CharacterDevelopmentModel.FocusPointsPerLevel;
			if (this.Hero.Level % Campaign.Current.Models.CharacterDevelopmentModel.LevelsPerAttributePoint == 0)
			{
				this.UnspentAttributePoints++;
			}
			CampaignEventDispatcher.Instance.OnHeroLevelledUp(this.Hero, shouldNotify);
		}

		// Token: 0x06002F08 RID: 12040 RVA: 0x000C164F File Offset: 0x000BF84F
		public int GetXpRequiredForLevel(int level)
		{
			return Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(level);
		}

		// Token: 0x06002F09 RID: 12041 RVA: 0x000C1668 File Offset: 0x000BF868
		public void RemoveAttribute(CharacterAttribute attrib, int changeAmount)
		{
			if (changeAmount == 0)
			{
				return;
			}
			int num = this.Hero.GetAttributeValue(attrib) - changeAmount;
			this.Hero.SetAttributeValueInternal(attrib, num);
		}

		// Token: 0x06002F0A RID: 12042 RVA: 0x000C1698 File Offset: 0x000BF898
		public void AddAttribute(CharacterAttribute attrib, int changeAmount, bool checkUnspentPoints = true)
		{
			if (changeAmount == 0)
			{
				return;
			}
			int attributeValue = this.Hero.GetAttributeValue(attrib);
			if (attributeValue + changeAmount <= Campaign.Current.Models.CharacterDevelopmentModel.MaxAttribute && (this.UnspentAttributePoints >= 1 || !checkUnspentPoints))
			{
				int num = attributeValue + changeAmount;
				this.Hero.SetAttributeValueInternal(attrib, num);
				if (checkUnspentPoints)
				{
					this.UnspentAttributePoints--;
				}
			}
		}

		// Token: 0x06002F0B RID: 12043 RVA: 0x000C16FE File Offset: 0x000BF8FE
		private void ClearFocuses()
		{
			this._newFocuses.ClearAllProperty();
		}

		// Token: 0x06002F0C RID: 12044 RVA: 0x000C170C File Offset: 0x000BF90C
		public void AddFocus(SkillObject skill, int changeAmount, bool checkUnspentFocusPoints = true)
		{
			int focus = this.GetFocus(skill);
			int requiredFocusPointsToAddFocus = this.GetRequiredFocusPointsToAddFocus(skill);
			if (focus + changeAmount <= Campaign.Current.Models.CharacterDevelopmentModel.MaxFocusPerSkill && (this.UnspentFocusPoints >= requiredFocusPointsToAddFocus || !checkUnspentFocusPoints))
			{
				int num = focus + changeAmount;
				this.SetFocus(skill, num);
				if (this.Hero.GetSkillValue(skill) == 0)
				{
					this.SetInitialSkillLevel(skill, 1);
					this.InitializeSkillXp(skill);
				}
				this.UnspentFocusPoints = (checkUnspentFocusPoints ? (this.UnspentFocusPoints - requiredFocusPointsToAddFocus) : this.UnspentFocusPoints);
			}
		}

		// Token: 0x06002F0D RID: 12045 RVA: 0x000C1794 File Offset: 0x000BF994
		public void RemoveFocus(SkillObject skill, int changeAmount)
		{
			int num = this.GetFocus(skill) - changeAmount;
			this.SetFocus(skill, num);
		}

		// Token: 0x06002F0E RID: 12046 RVA: 0x000C17B3 File Offset: 0x000BF9B3
		public bool CanAddFocusToSkill(SkillObject skill)
		{
			return this.GetFocus(skill) < Campaign.Current.Models.CharacterDevelopmentModel.MaxFocusPerSkill && this.Hero.HeroDeveloper.UnspentFocusPoints >= this.GetRequiredFocusPointsToAddFocus(skill);
		}

		// Token: 0x06002F0F RID: 12047 RVA: 0x000C17F0 File Offset: 0x000BF9F0
		public int GetRequiredFocusPointsToAddFocus(SkillObject skill)
		{
			return 1;
		}

		// Token: 0x06002F10 RID: 12048 RVA: 0x000C17F3 File Offset: 0x000BF9F3
		private void SetFocus(SkillObject focus, int newAmount)
		{
			this._newFocuses.SetPropertyValue(focus, newAmount);
		}

		// Token: 0x06002F11 RID: 12049 RVA: 0x000C1802 File Offset: 0x000BFA02
		public int GetFocus(SkillObject skill)
		{
			return this._newFocuses.GetPropertyValue(skill);
		}

		// Token: 0x06002F12 RID: 12050 RVA: 0x000C1810 File Offset: 0x000BFA10
		public bool GetPerkValue(PerkObject perk)
		{
			return this.Hero.GetPerkValue(perk);
		}

		// Token: 0x06002F13 RID: 12051 RVA: 0x000C1820 File Offset: 0x000BFA20
		public void InitializeSkillXp(SkillObject skill)
		{
			int xpRequiredForSkillLevel = Campaign.Current.Models.CharacterDevelopmentModel.GetXpRequiredForSkillLevel(this.Hero.GetSkillValue(skill));
			base.SetPropertyValue(skill, (float)xpRequiredForSkillLevel);
		}

		// Token: 0x06002F14 RID: 12052 RVA: 0x000C1858 File Offset: 0x000BFA58
		protected override void AfterLoad()
		{
			if (this.Hero.Age >= (float)Campaign.Current.Models.AgeModel.HeroComesOfAge && Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(this.Hero.Level) > this.TotalXp)
			{
				this.TotalXp = Campaign.Current.Models.CharacterDevelopmentModel.SkillsRequiredForLevel(this.Hero.Level);
				this.CheckLevel(false);
			}
			foreach (SkillObject skillObject in Skills.All)
			{
				if (this.GetSkillXpProgress(skillObject) < 0)
				{
					this.InitializeSkillXp(skillObject);
				}
			}
		}

		// Token: 0x04000E03 RID: 3587
		[SaveableField(100)]
		private CharacterSkills _newFocuses;

		// Token: 0x04000E07 RID: 3591
		[SaveableField(130)]
		private int _totalXp;
	}
}
