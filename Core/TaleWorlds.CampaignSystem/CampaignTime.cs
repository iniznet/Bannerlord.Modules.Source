using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	public struct CampaignTime : IComparable<CampaignTime>
	{
		public static void AutoGeneratedStaticCollectObjectsCampaignTime(object o, List<object> collectedObjects)
		{
			((CampaignTime)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		internal static object AutoGeneratedGetMemberValue_numTicks(object o)
		{
			return ((CampaignTime)o)._numTicks;
		}

		internal long NumTicks
		{
			get
			{
				return this._numTicks;
			}
		}

		internal CampaignTime(long numTicks)
		{
			this._numTicks = numTicks;
		}

		private static long CurrentTicks
		{
			get
			{
				return Campaign.Current.MapTimeTracker.NumTicks;
			}
		}

		public static CampaignTime DeltaTime
		{
			get
			{
				return new CampaignTime(Campaign.Current.MapTimeTracker.DeltaTimeInTicks);
			}
		}

		private static long DeltaTimeInTicks
		{
			get
			{
				return Campaign.Current.MapTimeTracker.DeltaTimeInTicks;
			}
		}

		public static CampaignTime Now
		{
			get
			{
				return Campaign.Current.MapTimeTracker.Now;
			}
		}

		public static CampaignTime Never
		{
			get
			{
				return new CampaignTime(long.MaxValue);
			}
		}

		public bool Equals(CampaignTime other)
		{
			return this._numTicks == other._numTicks;
		}

		public override bool Equals(object obj)
		{
			return obj != null && obj is CampaignTime && this.Equals((CampaignTime)obj);
		}

		public override int GetHashCode()
		{
			return this._numTicks.GetHashCode();
		}

		public int CompareTo(CampaignTime other)
		{
			if (this._numTicks == other._numTicks)
			{
				return 0;
			}
			if (this._numTicks > other._numTicks)
			{
				return 1;
			}
			return -1;
		}

		public static bool operator <(CampaignTime x, CampaignTime y)
		{
			return x._numTicks < y._numTicks;
		}

		public static bool operator >(CampaignTime x, CampaignTime y)
		{
			return x._numTicks > y._numTicks;
		}

		public static bool operator ==(CampaignTime x, CampaignTime y)
		{
			return x._numTicks == y._numTicks;
		}

		public static bool operator !=(CampaignTime x, CampaignTime y)
		{
			return !(x == y);
		}

		public static bool operator <=(CampaignTime x, CampaignTime y)
		{
			return x._numTicks <= y._numTicks;
		}

		public static bool operator >=(CampaignTime x, CampaignTime y)
		{
			return x._numTicks >= y._numTicks;
		}

		public bool IsFuture
		{
			get
			{
				return CampaignTime.CurrentTicks < this._numTicks;
			}
		}

		public bool IsPast
		{
			get
			{
				return CampaignTime.CurrentTicks > this._numTicks;
			}
		}

		public bool IsNow
		{
			get
			{
				return CampaignTime.CurrentTicks == this._numTicks;
			}
		}

		public bool IsDayTime
		{
			get
			{
				int num = MathF.Floor(this.CurrentHourInDay);
				return num >= 2 && num < 22;
			}
		}

		public float CurrentHourInDay
		{
			get
			{
				return (float)(this._numTicks % 864000000L / 10000L) / 3600f;
			}
		}

		public bool IsNightTime
		{
			get
			{
				return !this.IsDayTime;
			}
		}

		public float ElapsedMillisecondsUntilNow
		{
			get
			{
				return (float)(CampaignTime.CurrentTicks - this._numTicks) / 10f;
			}
		}

		public float ElapsedSecondsUntilNow
		{
			get
			{
				return (float)(CampaignTime.CurrentTicks - this._numTicks) / 10000f;
			}
		}

		public float ElapsedHoursUntilNow
		{
			get
			{
				return (float)(CampaignTime.CurrentTicks - this._numTicks) / 36000000f;
			}
		}

		public float ElapsedDaysUntilNow
		{
			get
			{
				return (float)(CampaignTime.CurrentTicks - this._numTicks) / 864000000f;
			}
		}

		public float ElapsedWeeksUntilNow
		{
			get
			{
				return (float)(CampaignTime.CurrentTicks - this._numTicks) / 6.048E+09f;
			}
		}

		public float ElapsedSeasonsUntilNow
		{
			get
			{
				return (float)(CampaignTime.CurrentTicks - this._numTicks) / 1.8144E+10f;
			}
		}

		public float ElapsedYearsUntilNow
		{
			get
			{
				return (float)(CampaignTime.CurrentTicks - this._numTicks) / 7.2576E+10f;
			}
		}

		public float RemainingMillisecondsFromNow
		{
			get
			{
				return (float)(this._numTicks - CampaignTime.CurrentTicks) / 10f;
			}
		}

		public float RemainingSecondsFromNow
		{
			get
			{
				return (float)(this._numTicks - CampaignTime.CurrentTicks) / 10000f;
			}
		}

		public float RemainingHoursFromNow
		{
			get
			{
				return (float)(this._numTicks - CampaignTime.CurrentTicks) / 36000000f;
			}
		}

		public float RemainingDaysFromNow
		{
			get
			{
				return (float)(this._numTicks - CampaignTime.CurrentTicks) / 864000000f;
			}
		}

		public float RemainingWeeksFromNow
		{
			get
			{
				return (float)(this._numTicks - CampaignTime.CurrentTicks) / 6.048E+09f;
			}
		}

		public float RemainingSeasonsFromNow
		{
			get
			{
				return (float)(this._numTicks - CampaignTime.CurrentTicks) / 1.8144E+10f;
			}
		}

		public float RemainingYearsFromNow
		{
			get
			{
				return (float)(this._numTicks - CampaignTime.CurrentTicks) / 7.2576E+10f;
			}
		}

		public double ToMilliseconds
		{
			get
			{
				return (double)this._numTicks / 10.0;
			}
		}

		public double ToSeconds
		{
			get
			{
				return (double)this._numTicks / 10000.0;
			}
		}

		public double ToMinutes
		{
			get
			{
				return (double)this._numTicks / 600000.0;
			}
		}

		public double ToHours
		{
			get
			{
				return (double)this._numTicks / 36000000.0;
			}
		}

		public double ToDays
		{
			get
			{
				return (double)this._numTicks / 864000000.0;
			}
		}

		public double ToWeeks
		{
			get
			{
				return (double)this._numTicks / 6048000000.0;
			}
		}

		public double ToSeasons
		{
			get
			{
				return (double)this._numTicks / 18144000000.0;
			}
		}

		public double ToYears
		{
			get
			{
				return (double)this._numTicks / 72576000000.0;
			}
		}

		public int GetHourOfDay
		{
			get
			{
				return (int)(this._numTicks / 36000000L % 24L);
			}
		}

		public int GetDayOfWeek
		{
			get
			{
				return (int)(this._numTicks / 864000000L % 7L);
			}
		}

		public int GetDayOfSeason
		{
			get
			{
				return (int)(this._numTicks / 864000000L % 21L);
			}
		}

		public int GetDayOfYear
		{
			get
			{
				return (int)(this._numTicks / 864000000L % 84L);
			}
		}

		public int GetWeekOfSeason
		{
			get
			{
				return (int)(this._numTicks / 6048000000L % 3L);
			}
		}

		public CampaignTime.Seasons GetSeasonOfYear
		{
			get
			{
				return (CampaignTime.Seasons)(this._numTicks / 18144000000L % 4L);
			}
		}

		public int GetYear
		{
			get
			{
				return (int)(this._numTicks / 72576000000L);
			}
		}

		public static CampaignTime Milliseconds(long valueInMilliseconds)
		{
			return new CampaignTime(valueInMilliseconds * 10L);
		}

		public static CampaignTime MillisecondsFromNow(long valueInMilliseconds)
		{
			return new CampaignTime(CampaignTime.CurrentTicks + valueInMilliseconds * 10L);
		}

		public static CampaignTime Seconds(long valueInSeconds)
		{
			return new CampaignTime(valueInSeconds * 10000L);
		}

		public static CampaignTime SecondsFromNow(long valueInSeconds)
		{
			return new CampaignTime(CampaignTime.CurrentTicks + valueInSeconds * 10000L);
		}

		public static CampaignTime Minutes(long valueInMinutes)
		{
			return new CampaignTime(valueInMinutes * 600000L);
		}

		public static CampaignTime MinutesFromNow(long valueInMinutes)
		{
			return new CampaignTime(CampaignTime.CurrentTicks + valueInMinutes * 600000L);
		}

		public static CampaignTime Hours(float valueInHours)
		{
			return new CampaignTime((long)(valueInHours * 36000000f));
		}

		public static CampaignTime HoursFromNow(float valueInHours)
		{
			return new CampaignTime(CampaignTime.CurrentTicks + (long)(valueInHours * 36000000f));
		}

		public static CampaignTime Days(float valueInDays)
		{
			return new CampaignTime((long)(valueInDays * 864000000f));
		}

		public static CampaignTime DaysFromNow(float valueInDays)
		{
			return new CampaignTime(CampaignTime.CurrentTicks + (long)(valueInDays * 864000000f));
		}

		public static CampaignTime Weeks(float valueInWeeeks)
		{
			return new CampaignTime((long)(valueInWeeeks * 6.048E+09f));
		}

		public static CampaignTime WeeksFromNow(float valueInWeeks)
		{
			return new CampaignTime(CampaignTime.CurrentTicks + (long)(valueInWeeks * 6.048E+09f));
		}

		public static CampaignTime Years(float valueInYears)
		{
			return new CampaignTime((long)(valueInYears * 7.2576E+10f));
		}

		public static CampaignTime YearsFromNow(float valueInYears)
		{
			return new CampaignTime(CampaignTime.CurrentTicks + (long)(valueInYears * 7.2576E+10f));
		}

		public static CampaignTime Zero
		{
			get
			{
				return new CampaignTime(0L);
			}
		}

		public static CampaignTime operator +(CampaignTime g1, CampaignTime g2)
		{
			return new CampaignTime(g1._numTicks + g2._numTicks);
		}

		public static CampaignTime operator -(CampaignTime g1, CampaignTime g2)
		{
			return new CampaignTime(g1._numTicks - g2._numTicks);
		}

		public bool StringSameAs(CampaignTime otherTime)
		{
			return this._numTicks / 864000000L == otherTime.NumTicks / 864000000L;
		}

		public override string ToString()
		{
			int getYear = this.GetYear;
			CampaignTime.Seasons getSeasonOfYear = this.GetSeasonOfYear;
			int num = this.GetDayOfSeason + 1;
			TextObject textObject = GameTexts.FindText("str_date_format", null);
			textObject.SetTextVariable("SEASON", GameTexts.FindText("str_season_" + getSeasonOfYear, null));
			textObject.SetTextVariable("YEAR", getYear.ToString());
			textObject.SetTextVariable("DAY", num.ToString());
			return textObject.ToString();
		}

		public const int SunRise = 2;

		public const int SunSet = 22;

		public const int MinutesInHour = 60;

		public const int HoursInDay = 24;

		public const int DaysInWeek = 7;

		public const int WeeksInSeason = 3;

		public const int SeasonsInYear = 4;

		public const int DaysInSeason = 21;

		public const int DaysInYear = 84;

		internal const long TimeTicksPerMillisecond = 10L;

		internal const long TimeTicksPerSecond = 10000L;

		internal const long TimeTicksPerMinute = 600000L;

		internal const long TimeTicksPerHour = 36000000L;

		internal const long TimeTicksPerDay = 864000000L;

		internal const long TimeTicksPerWeek = 6048000000L;

		internal const long TimeTicksPerSeason = 18144000000L;

		internal const long TimeTicksPerYear = 72576000000L;

		[SaveableField(2)]
		private readonly long _numTicks;

		public enum Seasons
		{
			Spring,
			Summer,
			Autumn,
			Winter
		}
	}
}
