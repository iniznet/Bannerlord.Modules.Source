using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CampaignBehaviors;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x02000060 RID: 96
	public class PlayerCaptivity
	{
		// Token: 0x06000CEB RID: 3307 RVA: 0x0003FB15 File Offset: 0x0003DD15
		internal static void AutoGeneratedStaticCollectObjectsPlayerCaptivity(object o, List<object> collectedObjects)
		{
			((PlayerCaptivity)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000CEC RID: 3308 RVA: 0x0003FB23 File Offset: 0x0003DD23
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._captivityStartTime, collectedObjects);
			collectedObjects.Add(this._captorParty);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._lastCheckTime, collectedObjects);
		}

		// Token: 0x06000CED RID: 3309 RVA: 0x0003FB53 File Offset: 0x0003DD53
		internal static object AutoGeneratedGetMemberValueCountOfOffers(object o)
		{
			return ((PlayerCaptivity)o).CountOfOffers;
		}

		// Token: 0x06000CEE RID: 3310 RVA: 0x0003FB65 File Offset: 0x0003DD65
		internal static object AutoGeneratedGetMemberValueCurrentRansomAmount(object o)
		{
			return ((PlayerCaptivity)o).CurrentRansomAmount;
		}

		// Token: 0x06000CEF RID: 3311 RVA: 0x0003FB77 File Offset: 0x0003DD77
		internal static object AutoGeneratedGetMemberValue_captivityStartTime(object o)
		{
			return ((PlayerCaptivity)o)._captivityStartTime;
		}

		// Token: 0x06000CF0 RID: 3312 RVA: 0x0003FB89 File Offset: 0x0003DD89
		internal static object AutoGeneratedGetMemberValue_captorParty(object o)
		{
			return ((PlayerCaptivity)o)._captorParty;
		}

		// Token: 0x06000CF1 RID: 3313 RVA: 0x0003FB96 File Offset: 0x0003DD96
		internal static object AutoGeneratedGetMemberValue_randomNumber(object o)
		{
			return ((PlayerCaptivity)o)._randomNumber;
		}

		// Token: 0x06000CF2 RID: 3314 RVA: 0x0003FBA8 File Offset: 0x0003DDA8
		internal static object AutoGeneratedGetMemberValue_lastCheckTime(object o)
		{
			return ((PlayerCaptivity)o)._lastCheckTime;
		}

		// Token: 0x17000331 RID: 817
		// (get) Token: 0x06000CF3 RID: 3315 RVA: 0x0003FBBA File Offset: 0x0003DDBA
		// (set) Token: 0x06000CF4 RID: 3316 RVA: 0x0003FBCC File Offset: 0x0003DDCC
		public static PartyBase CaptorParty
		{
			get
			{
				return Campaign.Current.PlayerCaptivity._captorParty;
			}
			set
			{
				if (value != null)
				{
					Campaign.Current.PlayerCaptivity._captorParty.PrisonRoster.RemoveTroop(Hero.MainHero.CharacterObject, 1, default(UniqueTroopDescriptor), 0);
				}
				Campaign.Current.PlayerCaptivity._captorParty = value;
				if (value != null)
				{
					Campaign.Current.PlayerCaptivity._captorParty.AddPrisoner(Hero.MainHero.CharacterObject, 1);
					if ((Game.Current.GameStateManager.ActiveState as MapState).AtMenu)
					{
						GameMenu.SwitchToMenu(PlayerCaptivity.CaptorParty.IsSettlement ? "settlement_wait" : "prisoner_wait");
						return;
					}
					GameMenu.ActivateGameMenu(PlayerCaptivity.CaptorParty.IsSettlement ? "settlement_wait" : "prisoner_wait");
				}
			}
		}

		// Token: 0x17000332 RID: 818
		// (get) Token: 0x06000CF5 RID: 3317 RVA: 0x0003FC93 File Offset: 0x0003DE93
		private ICaptivityCampaignBehavior CaptivityCampaignBehavior
		{
			get
			{
				if (this._captivityCampaignBehavior == null)
				{
					this._captivityCampaignBehavior = Campaign.Current.GetCampaignBehavior<ICaptivityCampaignBehavior>();
				}
				return this._captivityCampaignBehavior;
			}
		}

		// Token: 0x17000333 RID: 819
		// (get) Token: 0x06000CF6 RID: 3318 RVA: 0x0003FCB3 File Offset: 0x0003DEB3
		// (set) Token: 0x06000CF7 RID: 3319 RVA: 0x0003FCC4 File Offset: 0x0003DEC4
		public static float RandomNumber
		{
			get
			{
				return Campaign.Current.PlayerCaptivity._randomNumber;
			}
			set
			{
				Campaign.Current.PlayerCaptivity._randomNumber = value;
			}
		}

		// Token: 0x17000334 RID: 820
		// (get) Token: 0x06000CF8 RID: 3320 RVA: 0x0003FCD6 File Offset: 0x0003DED6
		public static bool IsCaptive
		{
			get
			{
				return Campaign.Current.PlayerCaptivity._captorParty != null;
			}
		}

		// Token: 0x17000335 RID: 821
		// (get) Token: 0x06000CF9 RID: 3321 RVA: 0x0003FCEC File Offset: 0x0003DEEC
		public static int CaptiveTimeInDays
		{
			get
			{
				return (int)(CampaignTime.Now - PlayerCaptivity.CaptivityStartTime).ToDays;
			}
		}

		// Token: 0x17000336 RID: 822
		// (get) Token: 0x06000CFA RID: 3322 RVA: 0x0003FD11 File Offset: 0x0003DF11
		public static CampaignTime CaptivityStartTime
		{
			get
			{
				return Campaign.Current.PlayerCaptivity._captivityStartTime;
			}
		}

		// Token: 0x17000337 RID: 823
		// (get) Token: 0x06000CFB RID: 3323 RVA: 0x0003FD22 File Offset: 0x0003DF22
		// (set) Token: 0x06000CFC RID: 3324 RVA: 0x0003FD33 File Offset: 0x0003DF33
		public static CampaignTime LastCheckTime
		{
			get
			{
				return Campaign.Current.PlayerCaptivity._lastCheckTime;
			}
			set
			{
				Campaign.Current.PlayerCaptivity._lastCheckTime = value;
			}
		}

		// Token: 0x06000CFD RID: 3325 RVA: 0x0003FD45 File Offset: 0x0003DF45
		public static void StartCaptivity(PartyBase captorParty)
		{
			Campaign.Current.PlayerCaptivity.StartCaptivityInternal(captorParty);
			PlayerCaptivity.RandomNumber = MBRandom.RandomFloat;
		}

		// Token: 0x06000CFE RID: 3326 RVA: 0x0003FD61 File Offset: 0x0003DF61
		public static void OnPlayerCharacterChanged()
		{
			if (Hero.MainHero.IsPrisoner)
			{
				Campaign.Current.PlayerCaptivity.StartCaptivityInternal(Hero.MainHero.PartyBelongedToAsPrisoner);
				PlayerCaptivity.RandomNumber = MBRandom.RandomFloat;
				PlayerCaptivity.CaptorParty = Hero.MainHero.PartyBelongedToAsPrisoner;
			}
		}

		// Token: 0x06000CFF RID: 3327 RVA: 0x0003FDA1 File Offset: 0x0003DFA1
		public void SetRansomAmount()
		{
			this.CurrentRansomAmount = this.GetPlayerRansomValue();
		}

		// Token: 0x06000D00 RID: 3328 RVA: 0x0003FDB0 File Offset: 0x0003DFB0
		private int GetPlayerRansomValue()
		{
			return (int)((MBRandom.RandomFloat * 0.5f + 0.5f) * ((float)Hero.MainHero.Gold * 0.05f + 300f) * (float)(Hero.MainHero.PartyBelongedToAsPrisoner.IsSettlement ? (Hero.MainHero.PartyBelongedToAsPrisoner.Settlement.MapFaction.IsKingdomFaction ? 4 : 2) : 1) * (float)((Hero.MainHero.PartyBelongedToAsPrisoner.IsMobile && Hero.MainHero.PartyBelongedToAsPrisoner.MobileParty.IsLordParty) ? 2 : 1) * (Hero.MainHero.GetPerkValue(DefaultPerks.Trade.ManOfMeans) ? (1f + DefaultPerks.Trade.ManOfMeans.SecondaryBonus) : 1f));
		}

		// Token: 0x06000D01 RID: 3329 RVA: 0x0003FE74 File Offset: 0x0003E074
		private void StartCaptivityInternal(PartyBase captorParty)
		{
			this._captivityStartTime = CampaignTime.Now;
			this._lastCheckTime = CampaignTime.Now;
			if (PlayerEncounter.Current != null)
			{
				PlayerEncounter.LeaveEncounter = true;
			}
			if (MobileParty.MainParty.CurrentSettlement != null)
			{
				LeaveSettlementAction.ApplyForParty(MobileParty.MainParty);
			}
			MobileParty.MainParty.IsActive = false;
			PartyBase.MainParty.UpdateVisibilityAndInspected(0f, true);
			this._captorParty = captorParty;
			this._captorParty.SetAsCameraFollowParty();
			this._captorParty.UpdateVisibilityAndInspected(0f, false);
			if (MobileParty.MainParty.Army != null)
			{
				if (MobileParty.MainParty.Army.LeaderParty == MobileParty.MainParty)
				{
					DisbandArmyAction.ApplyByPlayerTakenPrisoner(MobileParty.MainParty.Army);
				}
				MobileParty.MainParty.Army = null;
			}
		}

		// Token: 0x06000D02 RID: 3330 RVA: 0x0003FF34 File Offset: 0x0003E134
		private void EndCaptivityInternal()
		{
			if (Hero.MainHero.IsAlive)
			{
				PartyBase.MainParty.AddElementToMemberRoster(CharacterObject.PlayerCharacter, 1, true);
				MobileParty.MainParty.ChangePartyLeader(Hero.MainHero);
			}
			if (Hero.MainHero.CurrentSettlement != null)
			{
				if (PlayerEncounter.Current != null)
				{
					PlayerEncounter.LeaveSettlement();
				}
				else if (Hero.MainHero.IsAlive)
				{
					LeaveSettlementAction.ApplyForParty(MobileParty.MainParty);
				}
				else
				{
					LeaveSettlementAction.ApplyForCharacterOnly(Hero.MainHero);
				}
			}
			if (PlayerEncounter.Current != null)
			{
				PlayerEncounter.Finish(true);
			}
			else if (Campaign.Current.CurrentMenuContext != null)
			{
				GameMenu.ExitToLast();
			}
			if (this._captorParty.IsActive)
			{
				this._captorParty.PrisonRoster.RemoveTroop(Hero.MainHero.CharacterObject, 1, default(UniqueTroopDescriptor), 0);
			}
			if (Hero.MainHero.IsAlive)
			{
				Hero.MainHero.ChangeState(Hero.CharacterStates.Active);
			}
			if (Hero.MainHero.IsAlive)
			{
				MobileParty.MainParty.IsActive = true;
				PartyBase.MainParty.SetAsCameraFollowParty();
				MobileParty.MainParty.Ai.SetMoveModeHold();
				SkillLevelingManager.OnMainHeroReleasedFromCaptivity(PlayerCaptivity.CaptivityStartTime.ElapsedHoursUntilNow);
				PartyBase.MainParty.UpdateVisibilityAndInspected(0f, true);
			}
			CampaignEventDispatcher.Instance.OnHeroPrisonerReleased(Hero.MainHero, this._captorParty, this._captorParty.MapFaction, EndCaptivityDetail.ReleasedAfterEscape);
			this._captorParty = null;
			this.CountOfOffers = 0;
			this.CurrentRansomAmount = 0;
		}

		// Token: 0x06000D03 RID: 3331 RVA: 0x0004009C File Offset: 0x0003E29C
		public static void EndCaptivity()
		{
			if (Hero.MainHero.IsAlive)
			{
				if (Hero.MainHero.IsWounded)
				{
					Hero.MainHero.HitPoints = 20;
				}
				if (Hero.MainHero.PartyBelongedToAsPrisoner != null && Hero.MainHero.PartyBelongedToAsPrisoner.IsMobile)
				{
					Hero.MainHero.PartyBelongedToAsPrisoner.MobileParty.Ai.SetDoNotAttackMainParty(12);
				}
				PlayerEncounter.ProtectPlayerSide(4f);
			}
			Campaign.Current.PlayerCaptivity.EndCaptivityInternal();
		}

		// Token: 0x06000D04 RID: 3332 RVA: 0x00040120 File Offset: 0x0003E320
		internal void Update(float dt)
		{
			MapState mapState = Game.Current.GameStateManager.ActiveState as MapState;
			if (PlayerCaptivity.IsCaptive && (dt > 0f || (mapState != null && !mapState.AtMenu)))
			{
				if (this._captorParty.IsMobile && this._captorParty.MobileParty.IsActive)
				{
					PartyBase.MainParty.MobileParty.Position2D = this._captorParty.MobileParty.Position2D;
				}
				else if (this._captorParty.IsSettlement)
				{
					PartyBase.MainParty.MobileParty.Position2D = this._captorParty.Settlement.GatePosition;
				}
				if (mapState != null && !mapState.AtMenu)
				{
					GameMenu.ActivateGameMenu(PlayerCaptivity.CaptorParty.IsSettlement ? "settlement_wait" : "prisoner_wait");
				}
				if (PlayerCaptivity.IsCaptive)
				{
					ICaptivityCampaignBehavior captivityCampaignBehavior = this.CaptivityCampaignBehavior;
					if (captivityCampaignBehavior == null)
					{
						return;
					}
					captivityCampaignBehavior.CheckCaptivityChange(dt);
				}
			}
		}

		// Token: 0x040003CF RID: 975
		[SaveableField(0)]
		private CampaignTime _captivityStartTime;

		// Token: 0x040003D0 RID: 976
		[SaveableField(1)]
		private PartyBase _captorParty;

		// Token: 0x040003D1 RID: 977
		[SaveableField(2)]
		public int CountOfOffers;

		// Token: 0x040003D2 RID: 978
		[SaveableField(3)]
		public int CurrentRansomAmount;

		// Token: 0x040003D3 RID: 979
		private ICaptivityCampaignBehavior _captivityCampaignBehavior;

		// Token: 0x040003D4 RID: 980
		[SaveableField(4)]
		private float _randomNumber;

		// Token: 0x040003D5 RID: 981
		[SaveableField(5)]
		private CampaignTime _lastCheckTime;
	}
}
