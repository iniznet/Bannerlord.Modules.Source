using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;
using TaleWorlds.SaveSystem.Load;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x02000056 RID: 86
	public sealed class CharacterObject : BasicCharacterObject, ICharacterData
	{
		// Token: 0x060008F2 RID: 2290 RVA: 0x00035796 File Offset: 0x00033996
		internal static void AutoGeneratedStaticCollectObjectsCharacterObject(object o, List<object> collectedObjects)
		{
			((CharacterObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060008F3 RID: 2291 RVA: 0x000357A4 File Offset: 0x000339A4
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._heroObject);
			collectedObjects.Add(this._originCharacter);
		}

		// Token: 0x060008F4 RID: 2292 RVA: 0x000357C5 File Offset: 0x000339C5
		internal static object AutoGeneratedGetMemberValue_heroObject(object o)
		{
			return ((CharacterObject)o)._heroObject;
		}

		// Token: 0x060008F5 RID: 2293 RVA: 0x000357D2 File Offset: 0x000339D2
		internal static object AutoGeneratedGetMemberValue_originCharacter(object o)
		{
			return ((CharacterObject)o)._originCharacter;
		}

		// Token: 0x170001B8 RID: 440
		// (get) Token: 0x060008F6 RID: 2294 RVA: 0x000357DF File Offset: 0x000339DF
		public override TextObject Name
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.Name;
				}
				return base.Name;
			}
		}

		// Token: 0x170001B9 RID: 441
		// (get) Token: 0x060008F7 RID: 2295 RVA: 0x000357FB File Offset: 0x000339FB
		public string EncyclopediaLink
		{
			get
			{
				if (!this.IsHero)
				{
					return Campaign.Current.EncyclopediaManager.GetIdentifier(typeof(CharacterObject)) + "-" + base.StringId;
				}
				return this._heroObject.EncyclopediaLink;
			}
		}

		// Token: 0x170001BA RID: 442
		// (get) Token: 0x060008F8 RID: 2296 RVA: 0x0003583C File Offset: 0x00033A3C
		public TextObject EncyclopediaLinkWithName
		{
			get
			{
				if (this.IsHero)
				{
					return this._heroObject.EncyclopediaLinkWithName;
				}
				if (Campaign.Current.EncyclopediaManager.GetPageOf(typeof(CharacterObject)).IsValidEncyclopediaItem(this))
				{
					return HyperlinkTexts.GetUnitHyperlinkText(this.EncyclopediaLink, this.Name);
				}
				return this.Name;
			}
		}

		// Token: 0x170001BB RID: 443
		// (get) Token: 0x060008F9 RID: 2297 RVA: 0x00035896 File Offset: 0x00033A96
		// (set) Token: 0x060008FA RID: 2298 RVA: 0x0003589E File Offset: 0x00033A9E
		public bool HiddenInEncylopedia { get; set; }

		// Token: 0x060008FB RID: 2299 RVA: 0x000358A7 File Offset: 0x00033AA7
		public override string ToString()
		{
			return this.Name.ToString();
		}

		// Token: 0x170001BC RID: 444
		// (get) Token: 0x060008FC RID: 2300 RVA: 0x000358B4 File Offset: 0x00033AB4
		public bool IsNotTransferableInPartyScreen
		{
			get
			{
				return (this._characterRestrictionFlags & CharacterRestrictionFlags.NotTransferableInPartyScreen) == CharacterRestrictionFlags.NotTransferableInPartyScreen;
			}
		}

		// Token: 0x170001BD RID: 445
		// (get) Token: 0x060008FD RID: 2301 RVA: 0x000358C1 File Offset: 0x00033AC1
		public bool IsNotTransferableInHideouts
		{
			get
			{
				return (this._characterRestrictionFlags & CharacterRestrictionFlags.CanNotGoInHideout) == CharacterRestrictionFlags.CanNotGoInHideout;
			}
		}

		// Token: 0x170001BE RID: 446
		// (get) Token: 0x060008FE RID: 2302 RVA: 0x000358CE File Offset: 0x00033ACE
		public CharacterObject OriginalCharacter
		{
			get
			{
				return this._originCharacter;
			}
		}

		// Token: 0x170001BF RID: 447
		// (get) Token: 0x060008FF RID: 2303 RVA: 0x000358D6 File Offset: 0x00033AD6
		public bool IsOriginalCharacter
		{
			get
			{
				return this._originCharacter == null;
			}
		}

		// Token: 0x170001C0 RID: 448
		// (get) Token: 0x06000900 RID: 2304 RVA: 0x000358E1 File Offset: 0x00033AE1
		// (set) Token: 0x06000901 RID: 2305 RVA: 0x000358E9 File Offset: 0x00033AE9
		public Hero HeroObject
		{
			get
			{
				return this._heroObject;
			}
			internal set
			{
				this._heroObject = value;
			}
		}

		// Token: 0x170001C1 RID: 449
		// (get) Token: 0x06000902 RID: 2306 RVA: 0x000358F2 File Offset: 0x00033AF2
		public override MBReadOnlyList<Equipment> AllEquipments
		{
			get
			{
				if (!this.IsHero)
				{
					return base.AllEquipments;
				}
				return new MBList<Equipment>
				{
					this.HeroObject.BattleEquipment,
					this.HeroObject.CivilianEquipment
				};
			}
		}

		// Token: 0x170001C2 RID: 450
		// (get) Token: 0x06000903 RID: 2307 RVA: 0x0003592A File Offset: 0x00033B2A
		public override Equipment Equipment
		{
			get
			{
				if (!this.IsHero)
				{
					return base.Equipment;
				}
				return this.HeroObject.BattleEquipment;
			}
		}

		// Token: 0x170001C3 RID: 451
		// (get) Token: 0x06000904 RID: 2308 RVA: 0x00035948 File Offset: 0x00033B48
		public IEnumerable<Equipment> BattleEquipments
		{
			get
			{
				if (!this.IsHero)
				{
					return this.AllEquipments.WhereQ((Equipment e) => !e.IsCivilian);
				}
				return new List<Equipment> { this.HeroObject.BattleEquipment }.AsEnumerable<Equipment>();
			}
		}

		// Token: 0x170001C4 RID: 452
		// (get) Token: 0x06000905 RID: 2309 RVA: 0x000359A4 File Offset: 0x00033BA4
		public IEnumerable<Equipment> CivilianEquipments
		{
			get
			{
				if (this.IsHero)
				{
					return new List<Equipment> { this.HeroObject.CivilianEquipment }.AsEnumerable<Equipment>();
				}
				return this.AllEquipments.WhereQ((Equipment e) => e.IsCivilian);
			}
		}

		// Token: 0x170001C5 RID: 453
		// (get) Token: 0x06000906 RID: 2310 RVA: 0x000359FF File Offset: 0x00033BFF
		public Equipment FirstBattleEquipment
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.BattleEquipment;
				}
				return this.AllEquipments.FirstOrDefaultQ((Equipment e) => !e.IsCivilian);
			}
		}

		// Token: 0x170001C6 RID: 454
		// (get) Token: 0x06000907 RID: 2311 RVA: 0x00035A3F File Offset: 0x00033C3F
		public Equipment FirstCivilianEquipment
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.CivilianEquipment;
				}
				return this.AllEquipments.FirstOrDefaultQ((Equipment e) => e.IsCivilian);
			}
		}

		// Token: 0x170001C7 RID: 455
		// (get) Token: 0x06000908 RID: 2312 RVA: 0x00035A7F File Offset: 0x00033C7F
		public Equipment RandomBattleEquipment
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.BattleEquipment;
				}
				return this.AllEquipments.GetRandomElementWithPredicate((Equipment e) => !e.IsCivilian);
			}
		}

		// Token: 0x170001C8 RID: 456
		// (get) Token: 0x06000909 RID: 2313 RVA: 0x00035ABF File Offset: 0x00033CBF
		public Equipment RandomCivilianEquipment
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.CivilianEquipment;
				}
				return this.AllEquipments.GetRandomElementWithPredicate((Equipment e) => e.IsCivilian);
			}
		}

		// Token: 0x170001C9 RID: 457
		// (get) Token: 0x0600090A RID: 2314 RVA: 0x00035AFF File Offset: 0x00033CFF
		public override int HitPoints
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.HitPoints;
				}
				return this.MaxHitPoints();
			}
		}

		// Token: 0x170001CA RID: 458
		// (get) Token: 0x0600090B RID: 2315 RVA: 0x00035B1B File Offset: 0x00033D1B
		public override string HairTags
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.HairTags;
				}
				return base.HairTags;
			}
		}

		// Token: 0x170001CB RID: 459
		// (get) Token: 0x0600090C RID: 2316 RVA: 0x00035B37 File Offset: 0x00033D37
		public override string BeardTags
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.BeardTags;
				}
				return base.BeardTags;
			}
		}

		// Token: 0x170001CC RID: 460
		// (get) Token: 0x0600090D RID: 2317 RVA: 0x00035B53 File Offset: 0x00033D53
		public override string TattooTags
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.TattooTags;
				}
				return base.TattooTags;
			}
		}

		// Token: 0x0600090E RID: 2318 RVA: 0x00035B70 File Offset: 0x00033D70
		public override int MaxHitPoints()
		{
			return MathF.Round(Campaign.Current.Models.CharacterStatsModel.MaxHitpoints(this, false).ResultNumber);
		}

		// Token: 0x170001CD RID: 461
		// (get) Token: 0x0600090F RID: 2319 RVA: 0x00035BA0 File Offset: 0x00033DA0
		public ExplainedNumber MaxHitPointsExplanation
		{
			get
			{
				return Campaign.Current.Models.CharacterStatsModel.MaxHitpoints(this, true);
			}
		}

		// Token: 0x170001CE RID: 462
		// (get) Token: 0x06000910 RID: 2320 RVA: 0x00035BB8 File Offset: 0x00033DB8
		public override int Level
		{
			get
			{
				if (!this.IsHero)
				{
					return base.Level;
				}
				return this.HeroObject.Level;
			}
		}

		// Token: 0x06000911 RID: 2321 RVA: 0x00035BD4 File Offset: 0x00033DD4
		public CharacterObject()
		{
			this.Init();
		}

		// Token: 0x06000912 RID: 2322 RVA: 0x00035BEE File Offset: 0x00033DEE
		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData, ObjectLoadData objectLoadData)
		{
			this.Init();
		}

		// Token: 0x06000913 RID: 2323 RVA: 0x00035BF6 File Offset: 0x00033DF6
		private void Init()
		{
			this._occupation = Occupation.NotAssigned;
			this._characterTraits = new CharacterTraits();
			this.Level = 1;
			this._characterRestrictionFlags = CharacterRestrictionFlags.None;
		}

		// Token: 0x06000914 RID: 2324 RVA: 0x00035C18 File Offset: 0x00033E18
		public static CharacterObject CreateFrom(CharacterObject character)
		{
			CharacterObject characterObject = MBObjectManager.Instance.CreateObject<CharacterObject>();
			characterObject._originCharacter = character._originCharacter ?? character;
			characterObject.Culture = character.Culture;
			characterObject.DefaultFormationClass = character.DefaultFormationClass;
			characterObject.DefaultFormationGroup = character.DefaultFormationGroup;
			characterObject.BodyPropertyRange = character.BodyPropertyRange;
			if (characterObject.IsHero)
			{
				characterObject.HeroObject.StaticBodyProperties = (character.IsHero ? character.HeroObject.StaticBodyProperties : character.GetBodyPropertiesMin(false).StaticProperties);
			}
			characterObject.FormationPositionPreference = character.FormationPositionPreference;
			characterObject.IsFemale = character.IsFemale;
			characterObject.Level = character.Level;
			characterObject._basicName = character.Name;
			characterObject._occupation = character._occupation;
			characterObject._persona = character._persona;
			characterObject.Age = character.Age;
			characterObject.CharacterSkills = character.CharacterSkills;
			characterObject._characterTraits = new CharacterTraits(character._characterTraits);
			characterObject.HairTags = character.HairTags;
			characterObject.BeardTags = character.BeardTags;
			characterObject._civilianEquipmentTemplate = character._civilianEquipmentTemplate;
			characterObject._battleEquipmentTemplate = character._battleEquipmentTemplate;
			characterObject.InitializeEquipmentsOnLoad(character);
			return characterObject;
		}

		// Token: 0x170001CF RID: 463
		// (get) Token: 0x06000915 RID: 2325 RVA: 0x00035D51 File Offset: 0x00033F51
		public static CharacterObject PlayerCharacter
		{
			get
			{
				return Game.Current.PlayerTroop as CharacterObject;
			}
		}

		// Token: 0x170001D0 RID: 464
		// (get) Token: 0x06000916 RID: 2326 RVA: 0x00035D62 File Offset: 0x00033F62
		public static CharacterObject OneToOneConversationCharacter
		{
			get
			{
				return Campaign.Current.ConversationManager.OneToOneConversationCharacter;
			}
		}

		// Token: 0x170001D1 RID: 465
		// (get) Token: 0x06000917 RID: 2327 RVA: 0x00035D73 File Offset: 0x00033F73
		public static IEnumerable<CharacterObject> ConversationCharacters
		{
			get
			{
				return Campaign.Current.ConversationManager.ConversationCharacters;
			}
		}

		// Token: 0x06000918 RID: 2328 RVA: 0x00035D84 File Offset: 0x00033F84
		public override void AfterRegister()
		{
			base.AfterRegister();
			if (this.Equipment != null)
			{
				this.Equipment.SyncEquipments = true;
			}
			if (this.FirstCivilianEquipment != null)
			{
				this.FirstCivilianEquipment.SyncEquipments = true;
			}
		}

		// Token: 0x170001D2 RID: 466
		// (get) Token: 0x06000919 RID: 2329 RVA: 0x00035DB4 File Offset: 0x00033FB4
		// (set) Token: 0x0600091A RID: 2330 RVA: 0x00035DD5 File Offset: 0x00033FD5
		public new CultureObject Culture
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.Culture;
				}
				return (CultureObject)base.Culture;
			}
			set
			{
				if (this.IsHero)
				{
					this.HeroObject.Culture = value;
					return;
				}
				base.Culture = value;
			}
		}

		// Token: 0x0600091B RID: 2331 RVA: 0x00035DF3 File Offset: 0x00033FF3
		public override BodyProperties GetBodyPropertiesMin(bool returnBaseValue = false)
		{
			if (this.IsHero && !returnBaseValue)
			{
				return this.HeroObject.BodyProperties;
			}
			return base.GetBodyPropertiesMin(false);
		}

		// Token: 0x0600091C RID: 2332 RVA: 0x00035E13 File Offset: 0x00034013
		public override BodyProperties GetBodyPropertiesMax()
		{
			if (this.IsHero)
			{
				return this.HeroObject.BodyProperties;
			}
			return base.GetBodyPropertiesMax();
		}

		// Token: 0x170001D3 RID: 467
		// (get) Token: 0x0600091D RID: 2333 RVA: 0x00035E2F File Offset: 0x0003402F
		public override bool IsFemale
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.IsFemale;
				}
				return base.IsFemale;
			}
		}

		// Token: 0x0600091E RID: 2334 RVA: 0x00035E4C File Offset: 0x0003404C
		public override void UpdatePlayerCharacterBodyProperties(BodyProperties properties, int race, bool isFemale)
		{
			if (this.IsPlayerCharacter && this.IsHero)
			{
				this.HeroObject.StaticBodyProperties = properties.StaticProperties;
				this.HeroObject.Weight = properties.Weight;
				this.HeroObject.Build = properties.Build;
				base.Race = race;
				this.HeroObject.UpdatePlayerGender(isFemale);
				CampaignEventDispatcher.Instance.OnPlayerBodyPropertiesChanged();
			}
		}

		// Token: 0x170001D4 RID: 468
		// (get) Token: 0x0600091F RID: 2335 RVA: 0x00035EBC File Offset: 0x000340BC
		// (set) Token: 0x06000920 RID: 2336 RVA: 0x00035EC4 File Offset: 0x000340C4
		public bool IsBasicTroop { get; set; }

		// Token: 0x170001D5 RID: 469
		// (get) Token: 0x06000921 RID: 2337 RVA: 0x00035ECD File Offset: 0x000340CD
		// (set) Token: 0x06000922 RID: 2338 RVA: 0x00035ED5 File Offset: 0x000340D5
		public bool IsTemplate { get; private set; }

		// Token: 0x170001D6 RID: 470
		// (get) Token: 0x06000923 RID: 2339 RVA: 0x00035EDE File Offset: 0x000340DE
		// (set) Token: 0x06000924 RID: 2340 RVA: 0x00035EE6 File Offset: 0x000340E6
		public bool IsChildTemplate { get; private set; }

		// Token: 0x170001D7 RID: 471
		// (get) Token: 0x06000925 RID: 2341 RVA: 0x00035EEF File Offset: 0x000340EF
		public override bool IsPlayerCharacter
		{
			get
			{
				return CharacterObject.PlayerCharacter == this;
			}
		}

		// Token: 0x170001D8 RID: 472
		// (get) Token: 0x06000926 RID: 2342 RVA: 0x00035EF9 File Offset: 0x000340F9
		public override bool IsHero
		{
			get
			{
				return this._heroObject != null;
			}
		}

		// Token: 0x170001D9 RID: 473
		// (get) Token: 0x06000927 RID: 2343 RVA: 0x00035F04 File Offset: 0x00034104
		public bool IsRegular
		{
			get
			{
				return this._heroObject == null;
			}
		}

		// Token: 0x170001DA RID: 474
		// (get) Token: 0x06000928 RID: 2344 RVA: 0x00035F0F File Offset: 0x0003410F
		public Occupation Occupation
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.Occupation;
				}
				return this._occupation;
			}
		}

		// Token: 0x06000929 RID: 2345 RVA: 0x00035F2B File Offset: 0x0003412B
		public Occupation GetDefaultOccupation()
		{
			return this._occupation;
		}

		// Token: 0x170001DB RID: 475
		// (get) Token: 0x0600092A RID: 2346 RVA: 0x00035F33 File Offset: 0x00034133
		public override float Age
		{
			get
			{
				Hero heroObject = this.HeroObject;
				if (heroObject == null)
				{
					return base.Age;
				}
				return heroObject.Age;
			}
		}

		// Token: 0x170001DC RID: 476
		// (get) Token: 0x0600092B RID: 2347 RVA: 0x00035F4B File Offset: 0x0003414B
		public int ConformityNeededToRecruitPrisoner
		{
			get
			{
				return Campaign.Current.Models.PrisonerRecruitmentCalculationModel.GetConformityNeededToRecruitPrisoner(this);
			}
		}

		// Token: 0x170001DD RID: 477
		// (get) Token: 0x0600092C RID: 2348 RVA: 0x00035F62 File Offset: 0x00034162
		// (set) Token: 0x0600092D RID: 2349 RVA: 0x00035F6A File Offset: 0x0003416A
		public CharacterObject[] UpgradeTargets { get; private set; } = new CharacterObject[0];

		// Token: 0x170001DE RID: 478
		// (get) Token: 0x0600092E RID: 2350 RVA: 0x00035F73 File Offset: 0x00034173
		// (set) Token: 0x0600092F RID: 2351 RVA: 0x00035F7B File Offset: 0x0003417B
		public ItemCategory UpgradeRequiresItemFromCategory { get; private set; }

		// Token: 0x06000930 RID: 2352 RVA: 0x00035F84 File Offset: 0x00034184
		public bool HasThrowingWeapon()
		{
			for (EquipmentIndex equipmentIndex = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex < EquipmentIndex.NumAllWeaponSlots; equipmentIndex++)
			{
				ItemObject item = this.Equipment[equipmentIndex].Item;
				if (item != null && item.Type == ItemObject.ItemTypeEnum.Thrown)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000931 RID: 2353 RVA: 0x00035FC4 File Offset: 0x000341C4
		public int GetUpgradeXpCost(PartyBase party, int index)
		{
			CharacterObject characterObject = null;
			if (index >= 0 && index < this.UpgradeTargets.Length)
			{
				characterObject = this.UpgradeTargets[index];
			}
			return Campaign.Current.Models.PartyTroopUpgradeModel.GetXpCostForUpgrade(party, this, characterObject);
		}

		// Token: 0x06000932 RID: 2354 RVA: 0x00036002 File Offset: 0x00034202
		public int GetUpgradeGoldCost(PartyBase party, int index)
		{
			return Campaign.Current.Models.PartyTroopUpgradeModel.GetGoldCostForUpgrade(party, this, this.UpgradeTargets[index]);
		}

		// Token: 0x06000933 RID: 2355 RVA: 0x00036024 File Offset: 0x00034224
		public void InitializeHeroCharacterOnAfterLoad()
		{
			base.InitializeHeroBasicCharacterOnAfterLoad(this._originCharacter);
			this._occupation = this._originCharacter._occupation;
			this.IsChildTemplate = this._originCharacter.IsChildTemplate;
			this._basicName = this._originCharacter._basicName;
			this.UpgradeTargets = this._originCharacter.UpgradeTargets;
			this.IsBasicTroop = this._originCharacter.IsBasicTroop;
			this.UpgradeRequiresItemFromCategory = this._originCharacter.UpgradeRequiresItemFromCategory;
			this._civilianEquipmentTemplate = this._originCharacter._civilianEquipmentTemplate;
			this._battleEquipmentTemplate = this._originCharacter._battleEquipmentTemplate;
			this._persona = this._originCharacter._persona;
			this._characterTraits = this._originCharacter._characterTraits;
			this.CharacterSkills = this._originCharacter.CharacterSkills;
			base.IsReady = true;
		}

		// Token: 0x06000934 RID: 2356 RVA: 0x00036100 File Offset: 0x00034300
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			XmlNode xmlNode = node.Attributes["occupation"];
			if (xmlNode != null)
			{
				this._occupation = (Occupation)Enum.Parse(typeof(Occupation), xmlNode.InnerText);
			}
			XmlNode xmlNode2 = node.Attributes["is_template"];
			this.IsTemplate = xmlNode2 != null && Convert.ToBoolean(xmlNode2.InnerText);
			XmlNode xmlNode3 = node.Attributes["is_child_template"];
			this.IsChildTemplate = xmlNode3 != null && Convert.ToBoolean(xmlNode3.InnerText);
			XmlNode xmlNode4 = node.Attributes["is_hidden_encyclopedia"];
			this.HiddenInEncylopedia = xmlNode4 != null && Convert.ToBoolean(xmlNode4.InnerText);
			List<CharacterObject> list = new List<CharacterObject>();
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode5 = (XmlNode)obj;
				if (xmlNode5.Name == "Traits")
				{
					this._characterTraits.Deserialize(objectManager, xmlNode5);
				}
				else if (xmlNode5.Name == "upgrade_targets")
				{
					foreach (object obj2 in xmlNode5.ChildNodes)
					{
						XmlNode xmlNode6 = (XmlNode)obj2;
						if (xmlNode6.Name == "upgrade_target")
						{
							CharacterObject characterObject = objectManager.ReadObjectReferenceFromXml("id", typeof(CharacterObject), xmlNode6) as CharacterObject;
							list.Add(characterObject);
						}
					}
				}
			}
			this.UpgradeTargets = list.ToArray();
			XmlNode xmlNode7 = node.Attributes["voice"];
			if (xmlNode7 != null)
			{
				this._persona = MBObjectManager.Instance.GetObject<TraitObject>(xmlNode7.Value);
			}
			XmlNode xmlNode8 = node.Attributes["is_basic_troop"];
			if (xmlNode8 != null)
			{
				this.IsBasicTroop = Convert.ToBoolean(xmlNode8.InnerText);
			}
			else
			{
				this.IsBasicTroop = false;
			}
			this.UpgradeRequiresItemFromCategory = objectManager.ReadObjectReferenceFromXml<ItemCategory>("upgrade_requires", node);
			XmlNode xmlNode9 = node.Attributes["level"];
			this.Level = ((xmlNode9 != null) ? Convert.ToInt32(xmlNode9.InnerText) : 1);
			if (node.Attributes["civilianTemplate"] != null)
			{
				this._civilianEquipmentTemplate = objectManager.ReadObjectReferenceFromXml("civilianTemplate", typeof(CharacterObject), node) as CharacterObject;
			}
			if (node.Attributes["battleTemplate"] != null)
			{
				this._battleEquipmentTemplate = objectManager.ReadObjectReferenceFromXml("battleTemplate", typeof(CharacterObject), node) as CharacterObject;
			}
			this._originCharacter = null;
		}

		// Token: 0x06000935 RID: 2357 RVA: 0x000363F0 File Offset: 0x000345F0
		public override float GetPower()
		{
			return CharacterObject.GetPowerImp(this.IsHero ? (this.HeroObject.Level / 4 + 1) : this.Tier, this.IsHero, this.IsMounted);
		}

		// Token: 0x06000936 RID: 2358 RVA: 0x00036422 File Offset: 0x00034622
		public override float GetBattlePower()
		{
			return MathF.Max(1f + 0.5f * (this.GetPower() - CharacterObject.GetPowerImp(0, false, false)), 1f);
		}

		// Token: 0x06000937 RID: 2359 RVA: 0x0003644C File Offset: 0x0003464C
		public override float GetMoraleResistance()
		{
			int num = (this.IsHero ? (this.HeroObject.Level / 4 + 1) : this.Tier);
			return (this.IsHero ? 1.5f : 1f) * (0.5f * (float)num + 1f);
		}

		// Token: 0x06000938 RID: 2360 RVA: 0x0003649C File Offset: 0x0003469C
		public void GetSimulationAttackPower(out float attackPoints, out float defencePoints, Equipment equipment = null)
		{
			if (equipment == null)
			{
				equipment = this.Equipment;
			}
			attackPoints = 0f;
			defencePoints = 0f;
			float num = 0f;
			float num2 = 0f;
			float num3 = equipment.GetArmArmorSum() + equipment.GetHeadArmorSum() + equipment.GetHumanBodyArmorSum() + equipment.GetLegArmorSum();
			num3 = num3 * num3 / equipment.GetTotalWeightOfArmor(true);
			defencePoints += num3 * 10f + 4000f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex < EquipmentIndex.NumAllWeaponSlots; equipmentIndex++)
			{
				EquipmentElement equipmentElement = equipment[equipmentIndex];
				if (!equipmentElement.IsEmpty)
				{
					float num4 = ((equipmentElement.Item.RelevantSkill == null) ? 1f : (0.3f + (float)this.GetSkillValue(equipmentElement.Item.RelevantSkill) / 300f * 0.7f));
					float num5 = num4 * equipmentElement.Item.Effectiveness;
					if (equipmentElement.Item.PrimaryWeapon.IsRangedWeapon)
					{
						for (EquipmentIndex equipmentIndex2 = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex2 < EquipmentIndex.NumAllWeaponSlots; equipmentIndex2++)
						{
							EquipmentElement equipmentElement2 = equipment[equipmentIndex];
							if (equipmentIndex != equipmentIndex2 && !equipmentElement2.IsEmpty && equipmentElement2.Item.PrimaryWeapon.IsAmmo)
							{
								num5 += num4 * equipmentElement2.Item.Effectiveness;
								break;
							}
						}
					}
					if (equipmentElement.Item.PrimaryWeapon.IsShield)
					{
						defencePoints += num5 * 10f;
					}
					else
					{
						num = MathF.Max(num, num5);
					}
				}
			}
			attackPoints += num;
			for (EquipmentIndex equipmentIndex3 = EquipmentIndex.ArmorItemEndSlot; equipmentIndex3 <= EquipmentIndex.HorseHarness; equipmentIndex3++)
			{
				EquipmentElement equipmentElement3 = equipment[equipmentIndex3];
				if (!equipmentElement3.IsEmpty)
				{
					num2 += equipmentElement3.Item.Effectiveness;
				}
			}
			float num6 = ((equipment.Horse.Item == null || equipment.Horse.Item.RelevantSkill == null) ? 1f : (0.3f + (float)this.GetSkillValue(equipment.Horse.Item.RelevantSkill) / 300f * 0.7f));
			num2 *= num6;
			attackPoints += num2 * 2.5f;
			defencePoints += num2 * 5f;
		}

		// Token: 0x170001DF RID: 479
		// (get) Token: 0x06000939 RID: 2361 RVA: 0x000366CC File Offset: 0x000348CC
		public override bool IsMounted
		{
			get
			{
				if (this.IsHero)
				{
					return this.Equipment[10].Item != null;
				}
				return base.IsMounted;
			}
		}

		// Token: 0x170001E0 RID: 480
		// (get) Token: 0x0600093A RID: 2362 RVA: 0x00036700 File Offset: 0x00034900
		public override bool IsRanged
		{
			get
			{
				if (this.IsHero)
				{
					for (int i = 0; i < 4; i++)
					{
						ItemObject item = this.Equipment[i].Item;
						if (item != null && (item.ItemType == ItemObject.ItemTypeEnum.Bow || item.ItemType == ItemObject.ItemTypeEnum.Crossbow))
						{
							return true;
						}
					}
				}
				return base.IsRanged;
			}
		}

		// Token: 0x0600093B RID: 2363 RVA: 0x00036754 File Offset: 0x00034954
		public float GetHeadArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetHeadArmorSum();
			}
			return this.FirstCivilianEquipment.GetHeadArmorSum();
		}

		// Token: 0x0600093C RID: 2364 RVA: 0x00036770 File Offset: 0x00034970
		public float GetBodyArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetHumanBodyArmorSum();
			}
			return this.FirstCivilianEquipment.GetHumanBodyArmorSum();
		}

		// Token: 0x0600093D RID: 2365 RVA: 0x0003678C File Offset: 0x0003498C
		public float GetLegArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetLegArmorSum();
			}
			return this.FirstCivilianEquipment.GetLegArmorSum();
		}

		// Token: 0x0600093E RID: 2366 RVA: 0x000367A8 File Offset: 0x000349A8
		public float GetArmArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetArmArmorSum();
			}
			return this.FirstCivilianEquipment.GetArmArmorSum();
		}

		// Token: 0x0600093F RID: 2367 RVA: 0x000367C4 File Offset: 0x000349C4
		public float GetHorseArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetHorseArmorSum();
			}
			return this.FirstCivilianEquipment.GetHorseArmorSum();
		}

		// Token: 0x06000940 RID: 2368 RVA: 0x000367E0 File Offset: 0x000349E0
		public float GetTotalArmorSum(bool civilianEquipment = false)
		{
			return this.GetHeadArmorSum(civilianEquipment) + this.GetBodyArmorSum(civilianEquipment) + this.GetLegArmorSum(civilianEquipment) + this.GetArmArmorSum(civilianEquipment);
		}

		// Token: 0x06000941 RID: 2369 RVA: 0x00036804 File Offset: 0x00034A04
		public override BodyProperties GetBodyProperties(Equipment equipment, int seed = -1)
		{
			if (this.IsHero)
			{
				return this.HeroObject.BodyProperties;
			}
			if (seed == -2)
			{
				return this.GetBodyPropertiesMin(false);
			}
			if (seed == -1)
			{
				seed = base.StringId.GetDeterministicHashCode();
			}
			return FaceGen.GetRandomBodyProperties(base.Race, this.IsFemale, this.GetBodyPropertiesMin(false), this.GetBodyPropertiesMax(), (int)((equipment != null) ? equipment.HairCoverType : ArmorComponent.HairCoverTypes.None), seed, this.HairTags, this.BeardTags, this.TattooTags);
		}

		// Token: 0x170001E1 RID: 481
		// (get) Token: 0x06000942 RID: 2370 RVA: 0x00036880 File Offset: 0x00034A80
		public int TroopWage
		{
			get
			{
				if (this.IsHero)
				{
					return 2 + this.Level * 2;
				}
				return Campaign.Current.Models.PartyWageModel.GetCharacterWage(this);
			}
		}

		// Token: 0x06000943 RID: 2371 RVA: 0x000368AA File Offset: 0x00034AAA
		public void SetTransferableInPartyScreen(bool isTransferable)
		{
			if (isTransferable)
			{
				this._characterRestrictionFlags &= ~CharacterRestrictionFlags.NotTransferableInPartyScreen;
				return;
			}
			this._characterRestrictionFlags |= CharacterRestrictionFlags.NotTransferableInPartyScreen;
		}

		// Token: 0x06000944 RID: 2372 RVA: 0x000368CD File Offset: 0x00034ACD
		public void SetTransferableInHideouts(bool isTransferable)
		{
			if (isTransferable)
			{
				this._characterRestrictionFlags &= ~CharacterRestrictionFlags.CanNotGoInHideout;
				return;
			}
			this._characterRestrictionFlags |= CharacterRestrictionFlags.CanNotGoInHideout;
		}

		// Token: 0x170001E2 RID: 482
		// (get) Token: 0x06000945 RID: 2373 RVA: 0x000368F0 File Offset: 0x00034AF0
		public int Tier
		{
			get
			{
				return Campaign.Current.Models.CharacterStatsModel.GetTier(this);
			}
		}

		// Token: 0x06000946 RID: 2374 RVA: 0x00036907 File Offset: 0x00034B07
		public void ClearAttributes()
		{
			if (this.IsHero)
			{
				this.HeroObject.ClearAttributes();
			}
		}

		// Token: 0x06000947 RID: 2375 RVA: 0x0003691C File Offset: 0x00034B1C
		public int GetTraitLevel(TraitObject trait)
		{
			if (this.IsHero)
			{
				return this.HeroObject.GetTraitLevel(trait);
			}
			return this._characterTraits.GetPropertyValue(trait);
		}

		// Token: 0x06000948 RID: 2376 RVA: 0x0003693F File Offset: 0x00034B3F
		public bool GetPerkValue(PerkObject perk)
		{
			return this.IsHero && this.HeroObject.GetPerkValue(perk);
		}

		// Token: 0x06000949 RID: 2377 RVA: 0x00036957 File Offset: 0x00034B57
		public override int GetSkillValue(SkillObject skill)
		{
			if (this.IsHero)
			{
				return this.HeroObject.GetSkillValue(skill);
			}
			return base.GetSkillValue(skill);
		}

		// Token: 0x0600094A RID: 2378 RVA: 0x00036975 File Offset: 0x00034B75
		public TraitObject GetPersona()
		{
			if (this._persona == null)
			{
				return DefaultTraits.PersonaSoftspoken;
			}
			return this._persona;
		}

		// Token: 0x0600094B RID: 2379 RVA: 0x0003698B File Offset: 0x00034B8B
		public override int GetMountKeySeed()
		{
			if (!this.IsHero)
			{
				return MBRandom.NondeterministicRandomInt;
			}
			return this.HeroObject.RandomValue;
		}

		// Token: 0x0600094C RID: 2380 RVA: 0x000369A8 File Offset: 0x00034BA8
		public override FormationClass GetFormationClass()
		{
			if (!this.IsHero || this.Equipment == null)
			{
				return base.GetFormationClass();
			}
			ItemObject item = this.Equipment[EquipmentIndex.ArmorItemEndSlot].Item;
			bool flag = item != null && item.HasHorseComponent;
			bool flag2 = this.Equipment.HasWeaponOfClass(WeaponClass.Bow) || this.Equipment.HasWeaponOfClass(WeaponClass.Crossbow);
			if (!flag)
			{
				if (!flag2)
				{
					return FormationClass.Infantry;
				}
				return FormationClass.Ranged;
			}
			else
			{
				if (!flag2)
				{
					return FormationClass.Cavalry;
				}
				return FormationClass.HorseArcher;
			}
		}

		// Token: 0x0600094D RID: 2381 RVA: 0x00036A1D File Offset: 0x00034C1D
		public static CharacterObject Find(string idString)
		{
			return MBObjectManager.Instance.GetObject<CharacterObject>(idString);
		}

		// Token: 0x0600094E RID: 2382 RVA: 0x00036A2C File Offset: 0x00034C2C
		public static CharacterObject FindFirst(Predicate<CharacterObject> predicate)
		{
			return CharacterObject.All.FirstOrDefault((CharacterObject x) => predicate(x));
		}

		// Token: 0x0600094F RID: 2383 RVA: 0x00036A5C File Offset: 0x00034C5C
		public static IEnumerable<CharacterObject> FindAll(Predicate<CharacterObject> predicate)
		{
			return CharacterObject.All.Where((CharacterObject x) => predicate(x));
		}

		// Token: 0x170001E3 RID: 483
		// (get) Token: 0x06000950 RID: 2384 RVA: 0x00036A8C File Offset: 0x00034C8C
		public static MBReadOnlyList<CharacterObject> All
		{
			get
			{
				return Campaign.Current.Characters;
			}
		}

		// Token: 0x06000951 RID: 2385 RVA: 0x00036A98 File Offset: 0x00034C98
		private static float GetPowerImp(int tier, bool isHero = false, bool isMounted = false)
		{
			return (float)((2 + tier) * (8 + tier)) * 0.02f * (isHero ? 1.5f : (isMounted ? 1.2f : 1f));
		}

		// Token: 0x040002B8 RID: 696
		private CharacterRestrictionFlags _characterRestrictionFlags;

		// Token: 0x040002B9 RID: 697
		[SaveableField(101)]
		private Hero _heroObject;

		// Token: 0x040002BA RID: 698
		[SaveableField(103)]
		private CharacterObject _originCharacter;

		// Token: 0x040002BB RID: 699
		private TraitObject _persona;

		// Token: 0x040002BC RID: 700
		private CharacterTraits _characterTraits;

		// Token: 0x040002BD RID: 701
		private CharacterObject _civilianEquipmentTemplate;

		// Token: 0x040002BE RID: 702
		private CharacterObject _battleEquipmentTemplate;

		// Token: 0x040002C2 RID: 706
		private Occupation _occupation;
	}
}
