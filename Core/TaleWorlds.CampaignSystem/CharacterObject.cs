using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;
using TaleWorlds.SaveSystem.Load;

namespace TaleWorlds.CampaignSystem
{
	public sealed class CharacterObject : BasicCharacterObject, ICharacterData
	{
		internal static void AutoGeneratedStaticCollectObjectsCharacterObject(object o, List<object> collectedObjects)
		{
			((CharacterObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._heroObject);
			collectedObjects.Add(this._originCharacter);
		}

		internal static object AutoGeneratedGetMemberValue_heroObject(object o)
		{
			return ((CharacterObject)o)._heroObject;
		}

		internal static object AutoGeneratedGetMemberValue_originCharacter(object o)
		{
			return ((CharacterObject)o)._originCharacter;
		}

		public override TextObject Name
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.Name;
				}
				return base.Name;
			}
		}

		public string EncyclopediaLink
		{
			get
			{
				if (!this.IsHero)
				{
					return Campaign.Current.EncyclopediaManager.GetIdentifier(typeof(CharacterObject)) + "-" + base.StringId;
				}
				return this._heroObject.EncyclopediaLink;
			}
		}

		public TextObject EncyclopediaLinkWithName
		{
			get
			{
				if (this.IsHero)
				{
					return this._heroObject.EncyclopediaLinkWithName;
				}
				if (Campaign.Current.EncyclopediaManager.GetPageOf(typeof(CharacterObject)).IsValidEncyclopediaItem(this))
				{
					return HyperlinkTexts.GetUnitHyperlinkText(this.EncyclopediaLink, this.Name);
				}
				return this.Name;
			}
		}

		public bool HiddenInEncylopedia { get; set; }

		public override string ToString()
		{
			return this.Name.ToString();
		}

		public bool IsNotTransferableInPartyScreen
		{
			get
			{
				return (this._characterRestrictionFlags & CharacterRestrictionFlags.NotTransferableInPartyScreen) == CharacterRestrictionFlags.NotTransferableInPartyScreen;
			}
		}

		public bool IsNotTransferableInHideouts
		{
			get
			{
				return (this._characterRestrictionFlags & CharacterRestrictionFlags.CanNotGoInHideout) == CharacterRestrictionFlags.CanNotGoInHideout;
			}
		}

		public CharacterObject OriginalCharacter
		{
			get
			{
				return this._originCharacter;
			}
		}

		public bool IsOriginalCharacter
		{
			get
			{
				return this._originCharacter == null;
			}
		}

		public Hero HeroObject
		{
			get
			{
				return this._heroObject;
			}
			internal set
			{
				this._heroObject = value;
			}
		}

		public override MBReadOnlyList<Equipment> AllEquipments
		{
			get
			{
				if (!this.IsHero)
				{
					return base.AllEquipments;
				}
				return new MBList<Equipment>
				{
					this.HeroObject.BattleEquipment,
					this.HeroObject.CivilianEquipment
				};
			}
		}

		public override Equipment Equipment
		{
			get
			{
				if (!this.IsHero)
				{
					return base.Equipment;
				}
				return this.HeroObject.BattleEquipment;
			}
		}

		public IEnumerable<Equipment> BattleEquipments
		{
			get
			{
				if (!this.IsHero)
				{
					return this.AllEquipments.WhereQ((Equipment e) => !e.IsCivilian);
				}
				return new List<Equipment> { this.HeroObject.BattleEquipment }.AsEnumerable<Equipment>();
			}
		}

		public IEnumerable<Equipment> CivilianEquipments
		{
			get
			{
				if (this.IsHero)
				{
					return new List<Equipment> { this.HeroObject.CivilianEquipment }.AsEnumerable<Equipment>();
				}
				return this.AllEquipments.WhereQ((Equipment e) => e.IsCivilian);
			}
		}

		public Equipment FirstBattleEquipment
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.BattleEquipment;
				}
				return this.AllEquipments.FirstOrDefaultQ((Equipment e) => !e.IsCivilian);
			}
		}

		public Equipment FirstCivilianEquipment
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.CivilianEquipment;
				}
				return this.AllEquipments.FirstOrDefaultQ((Equipment e) => e.IsCivilian);
			}
		}

		public Equipment RandomBattleEquipment
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.BattleEquipment;
				}
				return this.AllEquipments.GetRandomElementWithPredicate((Equipment e) => !e.IsCivilian);
			}
		}

		public Equipment RandomCivilianEquipment
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.CivilianEquipment;
				}
				return this.AllEquipments.GetRandomElementWithPredicate((Equipment e) => e.IsCivilian);
			}
		}

		public override int HitPoints
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.HitPoints;
				}
				return this.MaxHitPoints();
			}
		}

		public override string HairTags
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.HairTags;
				}
				return base.HairTags;
			}
		}

		public override string BeardTags
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.BeardTags;
				}
				return base.BeardTags;
			}
		}

		public override string TattooTags
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.TattooTags;
				}
				return base.TattooTags;
			}
		}

		public override int MaxHitPoints()
		{
			return MathF.Round(Campaign.Current.Models.CharacterStatsModel.MaxHitpoints(this, false).ResultNumber);
		}

		public ExplainedNumber MaxHitPointsExplanation
		{
			get
			{
				return Campaign.Current.Models.CharacterStatsModel.MaxHitpoints(this, true);
			}
		}

		public override int Level
		{
			get
			{
				if (!this.IsHero)
				{
					return base.Level;
				}
				return this.HeroObject.Level;
			}
		}

		public CharacterObject()
		{
			this.Init();
		}

		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData, ObjectLoadData objectLoadData)
		{
			this.Init();
		}

		private void Init()
		{
			this._occupation = Occupation.NotAssigned;
			this._characterTraits = new CharacterTraits();
			this.Level = 1;
			this._characterRestrictionFlags = CharacterRestrictionFlags.None;
		}

		public static CharacterObject CreateFrom(CharacterObject character)
		{
			CharacterObject characterObject = MBObjectManager.Instance.CreateObject<CharacterObject>();
			characterObject._originCharacter = character._originCharacter ?? character;
			if (characterObject.IsHero)
			{
				characterObject.HeroObject.StaticBodyProperties = (character.IsHero ? character.HeroObject.StaticBodyProperties : character.GetBodyPropertiesMin(false).StaticProperties);
			}
			characterObject._occupation = character._occupation;
			characterObject._persona = character._persona;
			characterObject._characterTraits = new CharacterTraits(character._characterTraits);
			characterObject._civilianEquipmentTemplate = character._civilianEquipmentTemplate;
			characterObject._battleEquipmentTemplate = character._battleEquipmentTemplate;
			characterObject.FillFrom(character);
			return characterObject;
		}

		public static CharacterObject PlayerCharacter
		{
			get
			{
				return Game.Current.PlayerTroop as CharacterObject;
			}
		}

		public static CharacterObject OneToOneConversationCharacter
		{
			get
			{
				return Campaign.Current.ConversationManager.OneToOneConversationCharacter;
			}
		}

		public static IEnumerable<CharacterObject> ConversationCharacters
		{
			get
			{
				return Campaign.Current.ConversationManager.ConversationCharacters;
			}
		}

		public override void AfterRegister()
		{
			base.AfterRegister();
			if (this.Equipment != null)
			{
				this.Equipment.SyncEquipments = true;
			}
			if (this.FirstCivilianEquipment != null)
			{
				this.FirstCivilianEquipment.SyncEquipments = true;
			}
		}

		public new CultureObject Culture
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.Culture;
				}
				return (CultureObject)base.Culture;
			}
			set
			{
				if (this.IsHero)
				{
					this.HeroObject.Culture = value;
					return;
				}
				base.Culture = value;
			}
		}

		public override BodyProperties GetBodyPropertiesMin(bool returnBaseValue = false)
		{
			if (this.IsHero && !returnBaseValue)
			{
				return this.HeroObject.BodyProperties;
			}
			return base.GetBodyPropertiesMin(false);
		}

		public override BodyProperties GetBodyPropertiesMax()
		{
			if (this.IsHero)
			{
				return this.HeroObject.BodyProperties;
			}
			return base.GetBodyPropertiesMax();
		}

		public override bool IsFemale
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.IsFemale;
				}
				return base.IsFemale;
			}
		}

		public override void UpdatePlayerCharacterBodyProperties(BodyProperties properties, int race, bool isFemale)
		{
			if (this.IsPlayerCharacter && this.IsHero)
			{
				this.HeroObject.StaticBodyProperties = properties.StaticProperties;
				this.HeroObject.Weight = properties.Weight;
				this.HeroObject.Build = properties.Build;
				base.Race = race;
				this.HeroObject.UpdatePlayerGender(isFemale);
				CampaignEventDispatcher.Instance.OnPlayerBodyPropertiesChanged();
			}
		}

		public bool IsBasicTroop { get; set; }

		public bool IsTemplate { get; private set; }

		public bool IsChildTemplate { get; private set; }

		public override bool IsPlayerCharacter
		{
			get
			{
				return CharacterObject.PlayerCharacter == this;
			}
		}

		public override bool IsHero
		{
			get
			{
				return this._heroObject != null;
			}
		}

		public bool IsRegular
		{
			get
			{
				return this._heroObject == null;
			}
		}

		public Occupation Occupation
		{
			get
			{
				if (this.IsHero)
				{
					return this.HeroObject.Occupation;
				}
				return this._occupation;
			}
		}

		public Occupation GetDefaultOccupation()
		{
			return this._occupation;
		}

		public override float Age
		{
			get
			{
				Hero heroObject = this.HeroObject;
				if (heroObject == null)
				{
					return base.Age;
				}
				return heroObject.Age;
			}
		}

		public int ConformityNeededToRecruitPrisoner
		{
			get
			{
				return Campaign.Current.Models.PrisonerRecruitmentCalculationModel.GetConformityNeededToRecruitPrisoner(this);
			}
		}

		public CharacterObject[] UpgradeTargets { get; private set; } = new CharacterObject[0];

		public ItemCategory UpgradeRequiresItemFromCategory { get; private set; }

		public bool HasThrowingWeapon()
		{
			for (EquipmentIndex equipmentIndex = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex < EquipmentIndex.NumAllWeaponSlots; equipmentIndex++)
			{
				ItemObject item = this.Equipment[equipmentIndex].Item;
				if (item != null && item.Type == ItemObject.ItemTypeEnum.Thrown)
				{
					return true;
				}
			}
			return false;
		}

		public int GetUpgradeXpCost(PartyBase party, int index)
		{
			CharacterObject characterObject = null;
			if (index >= 0 && index < this.UpgradeTargets.Length)
			{
				characterObject = this.UpgradeTargets[index];
			}
			return Campaign.Current.Models.PartyTroopUpgradeModel.GetXpCostForUpgrade(party, this, characterObject);
		}

		public int GetUpgradeGoldCost(PartyBase party, int index)
		{
			return Campaign.Current.Models.PartyTroopUpgradeModel.GetGoldCostForUpgrade(party, this, this.UpgradeTargets[index]);
		}

		public void InitializeHeroCharacterOnAfterLoad()
		{
			base.InitializeHeroBasicCharacterOnAfterLoad(this._originCharacter);
			this._occupation = this._originCharacter._occupation;
			this.IsChildTemplate = this._originCharacter.IsChildTemplate;
			this._basicName = this._originCharacter._basicName;
			this.UpgradeTargets = this._originCharacter.UpgradeTargets;
			this.IsBasicTroop = this._originCharacter.IsBasicTroop;
			this.UpgradeRequiresItemFromCategory = this._originCharacter.UpgradeRequiresItemFromCategory;
			this._civilianEquipmentTemplate = this._originCharacter._civilianEquipmentTemplate;
			this._battleEquipmentTemplate = this._originCharacter._battleEquipmentTemplate;
			this._persona = this._originCharacter._persona;
			this._characterTraits = this._originCharacter._characterTraits;
			this.DefaultCharacterSkills = this._originCharacter.DefaultCharacterSkills;
			base.IsReady = true;
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			XmlNode xmlNode = node.Attributes["occupation"];
			if (xmlNode != null)
			{
				this._occupation = (Occupation)Enum.Parse(typeof(Occupation), xmlNode.InnerText);
			}
			XmlNode xmlNode2 = node.Attributes["is_template"];
			this.IsTemplate = xmlNode2 != null && Convert.ToBoolean(xmlNode2.InnerText);
			XmlNode xmlNode3 = node.Attributes["is_child_template"];
			this.IsChildTemplate = xmlNode3 != null && Convert.ToBoolean(xmlNode3.InnerText);
			XmlNode xmlNode4 = node.Attributes["is_hidden_encyclopedia"];
			this.HiddenInEncylopedia = xmlNode4 != null && Convert.ToBoolean(xmlNode4.InnerText);
			List<CharacterObject> list = new List<CharacterObject>();
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode5 = (XmlNode)obj;
				if (xmlNode5.Name == "Traits")
				{
					this._characterTraits.Deserialize(objectManager, xmlNode5);
				}
				else if (xmlNode5.Name == "upgrade_targets")
				{
					foreach (object obj2 in xmlNode5.ChildNodes)
					{
						XmlNode xmlNode6 = (XmlNode)obj2;
						if (xmlNode6.Name == "upgrade_target")
						{
							CharacterObject characterObject = objectManager.ReadObjectReferenceFromXml("id", typeof(CharacterObject), xmlNode6) as CharacterObject;
							list.Add(characterObject);
						}
					}
				}
			}
			this.UpgradeTargets = list.ToArray();
			XmlNode xmlNode7 = node.Attributes["voice"];
			if (xmlNode7 != null)
			{
				this._persona = MBObjectManager.Instance.GetObject<TraitObject>(xmlNode7.Value);
			}
			XmlNode xmlNode8 = node.Attributes["is_basic_troop"];
			if (xmlNode8 != null)
			{
				this.IsBasicTroop = Convert.ToBoolean(xmlNode8.InnerText);
			}
			else
			{
				this.IsBasicTroop = false;
			}
			this.UpgradeRequiresItemFromCategory = objectManager.ReadObjectReferenceFromXml<ItemCategory>("upgrade_requires", node);
			XmlNode xmlNode9 = node.Attributes["level"];
			this.Level = ((xmlNode9 != null) ? Convert.ToInt32(xmlNode9.InnerText) : 1);
			if (node.Attributes["civilianTemplate"] != null)
			{
				this._civilianEquipmentTemplate = objectManager.ReadObjectReferenceFromXml("civilianTemplate", typeof(CharacterObject), node) as CharacterObject;
			}
			if (node.Attributes["battleTemplate"] != null)
			{
				this._battleEquipmentTemplate = objectManager.ReadObjectReferenceFromXml("battleTemplate", typeof(CharacterObject), node) as CharacterObject;
			}
			this._originCharacter = null;
		}

		public override float GetPower()
		{
			return CharacterObject.GetPowerImp(this.IsHero ? (this.HeroObject.Level / 4 + 1) : this.Tier, this.IsHero, this.IsMounted);
		}

		public override float GetBattlePower()
		{
			return MathF.Max(1f + 0.5f * (this.GetPower() - CharacterObject.GetPowerImp(0, false, false)), 1f);
		}

		public override float GetMoraleResistance()
		{
			int num = (this.IsHero ? (this.HeroObject.Level / 4 + 1) : this.Tier);
			return (this.IsHero ? 1.5f : 1f) * (0.5f * (float)num + 1f);
		}

		public void GetSimulationAttackPower(out float attackPoints, out float defencePoints, Equipment equipment = null)
		{
			if (equipment == null)
			{
				equipment = this.Equipment;
			}
			attackPoints = 0f;
			defencePoints = 0f;
			float num = 0f;
			float num2 = 0f;
			float num3 = equipment.GetArmArmorSum() + equipment.GetHeadArmorSum() + equipment.GetHumanBodyArmorSum() + equipment.GetLegArmorSum();
			num3 = num3 * num3 / equipment.GetTotalWeightOfArmor(true);
			defencePoints += num3 * 10f + 4000f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex < EquipmentIndex.NumAllWeaponSlots; equipmentIndex++)
			{
				EquipmentElement equipmentElement = equipment[equipmentIndex];
				if (!equipmentElement.IsEmpty)
				{
					float num4 = ((equipmentElement.Item.RelevantSkill == null) ? 1f : (0.3f + (float)this.GetSkillValue(equipmentElement.Item.RelevantSkill) / 300f * 0.7f));
					float num5 = num4 * equipmentElement.Item.Effectiveness;
					if (equipmentElement.Item.PrimaryWeapon.IsRangedWeapon)
					{
						for (EquipmentIndex equipmentIndex2 = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex2 < EquipmentIndex.NumAllWeaponSlots; equipmentIndex2++)
						{
							EquipmentElement equipmentElement2 = equipment[equipmentIndex];
							if (equipmentIndex != equipmentIndex2 && !equipmentElement2.IsEmpty && equipmentElement2.Item.PrimaryWeapon.IsAmmo)
							{
								num5 += num4 * equipmentElement2.Item.Effectiveness;
								break;
							}
						}
					}
					if (equipmentElement.Item.PrimaryWeapon.IsShield)
					{
						defencePoints += num5 * 10f;
					}
					else
					{
						num = MathF.Max(num, num5);
					}
				}
			}
			attackPoints += num;
			for (EquipmentIndex equipmentIndex3 = EquipmentIndex.ArmorItemEndSlot; equipmentIndex3 <= EquipmentIndex.HorseHarness; equipmentIndex3++)
			{
				EquipmentElement equipmentElement3 = equipment[equipmentIndex3];
				if (!equipmentElement3.IsEmpty)
				{
					num2 += equipmentElement3.Item.Effectiveness;
				}
			}
			float num6 = ((equipment.Horse.Item == null || equipment.Horse.Item.RelevantSkill == null) ? 1f : (0.3f + (float)this.GetSkillValue(equipment.Horse.Item.RelevantSkill) / 300f * 0.7f));
			num2 *= num6;
			attackPoints += num2 * 2.5f;
			defencePoints += num2 * 5f;
		}

		public override bool IsMounted
		{
			get
			{
				if (this.IsHero)
				{
					return this.Equipment[10].Item != null;
				}
				return base.IsMounted;
			}
		}

		public override bool IsRanged
		{
			get
			{
				if (this.IsHero)
				{
					for (int i = 0; i < 4; i++)
					{
						ItemObject item = this.Equipment[i].Item;
						if (item != null && (item.ItemType == ItemObject.ItemTypeEnum.Bow || item.ItemType == ItemObject.ItemTypeEnum.Crossbow))
						{
							return true;
						}
					}
				}
				return base.IsRanged;
			}
		}

		public float GetHeadArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetHeadArmorSum();
			}
			return this.FirstCivilianEquipment.GetHeadArmorSum();
		}

		public float GetBodyArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetHumanBodyArmorSum();
			}
			return this.FirstCivilianEquipment.GetHumanBodyArmorSum();
		}

		public float GetLegArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetLegArmorSum();
			}
			return this.FirstCivilianEquipment.GetLegArmorSum();
		}

		public float GetArmArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetArmArmorSum();
			}
			return this.FirstCivilianEquipment.GetArmArmorSum();
		}

		public float GetHorseArmorSum(bool civilianEquipment = false)
		{
			if (!civilianEquipment)
			{
				return this.FirstBattleEquipment.GetHorseArmorSum();
			}
			return this.FirstCivilianEquipment.GetHorseArmorSum();
		}

		public float GetTotalArmorSum(bool civilianEquipment = false)
		{
			return this.GetHeadArmorSum(civilianEquipment) + this.GetBodyArmorSum(civilianEquipment) + this.GetLegArmorSum(civilianEquipment) + this.GetArmArmorSum(civilianEquipment);
		}

		public override BodyProperties GetBodyProperties(Equipment equipment, int seed = -1)
		{
			if (this.IsHero)
			{
				return this.HeroObject.BodyProperties;
			}
			if (seed == -2)
			{
				return this.GetBodyPropertiesMin(false);
			}
			if (seed == -1)
			{
				seed = base.StringId.GetDeterministicHashCode();
			}
			return FaceGen.GetRandomBodyProperties(base.Race, this.IsFemale, this.GetBodyPropertiesMin(false), this.GetBodyPropertiesMax(), (int)((equipment != null) ? equipment.HairCoverType : ArmorComponent.HairCoverTypes.None), seed, this.HairTags, this.BeardTags, this.TattooTags);
		}

		public int TroopWage
		{
			get
			{
				if (this.IsHero)
				{
					return 2 + this.Level * 2;
				}
				return Campaign.Current.Models.PartyWageModel.GetCharacterWage(this);
			}
		}

		public void SetTransferableInPartyScreen(bool isTransferable)
		{
			if (isTransferable)
			{
				this._characterRestrictionFlags &= ~CharacterRestrictionFlags.NotTransferableInPartyScreen;
				return;
			}
			this._characterRestrictionFlags |= CharacterRestrictionFlags.NotTransferableInPartyScreen;
		}

		public void SetTransferableInHideouts(bool isTransferable)
		{
			if (isTransferable)
			{
				this._characterRestrictionFlags &= ~CharacterRestrictionFlags.CanNotGoInHideout;
				return;
			}
			this._characterRestrictionFlags |= CharacterRestrictionFlags.CanNotGoInHideout;
		}

		public int Tier
		{
			get
			{
				return Campaign.Current.Models.CharacterStatsModel.GetTier(this);
			}
		}

		public void ClearAttributes()
		{
			if (this.IsHero)
			{
				this.HeroObject.ClearAttributes();
			}
		}

		public int GetTraitLevel(TraitObject trait)
		{
			if (this.IsHero)
			{
				return this.HeroObject.GetTraitLevel(trait);
			}
			return this._characterTraits.GetPropertyValue(trait);
		}

		public bool GetPerkValue(PerkObject perk)
		{
			return this.IsHero && this.HeroObject.GetPerkValue(perk);
		}

		public override int GetSkillValue(SkillObject skill)
		{
			if (this.IsHero)
			{
				return this.HeroObject.GetSkillValue(skill);
			}
			return base.GetSkillValue(skill);
		}

		public TraitObject GetPersona()
		{
			if (this._persona == null)
			{
				return DefaultTraits.PersonaSoftspoken;
			}
			return this._persona;
		}

		public override int GetMountKeySeed()
		{
			if (!this.IsHero)
			{
				return MBRandom.NondeterministicRandomInt;
			}
			return this.HeroObject.RandomValue;
		}

		public override FormationClass GetFormationClass()
		{
			if (!this.IsHero || this.Equipment == null)
			{
				return base.GetFormationClass();
			}
			ItemObject item = this.Equipment[EquipmentIndex.ArmorItemEndSlot].Item;
			bool flag = item != null && item.HasHorseComponent;
			bool flag2 = this.Equipment.HasWeaponOfClass(WeaponClass.Bow) || this.Equipment.HasWeaponOfClass(WeaponClass.Crossbow);
			if (!flag)
			{
				if (!flag2)
				{
					return FormationClass.Infantry;
				}
				return FormationClass.Ranged;
			}
			else
			{
				if (!flag2)
				{
					return FormationClass.Cavalry;
				}
				return FormationClass.HorseArcher;
			}
		}

		public static CharacterObject Find(string idString)
		{
			return MBObjectManager.Instance.GetObject<CharacterObject>(idString);
		}

		public static CharacterObject FindFirst(Predicate<CharacterObject> predicate)
		{
			return CharacterObject.All.FirstOrDefault((CharacterObject x) => predicate(x));
		}

		public static IEnumerable<CharacterObject> FindAll(Predicate<CharacterObject> predicate)
		{
			return CharacterObject.All.Where((CharacterObject x) => predicate(x));
		}

		public static MBReadOnlyList<CharacterObject> All
		{
			get
			{
				return Campaign.Current.Characters;
			}
		}

		private static float GetPowerImp(int tier, bool isHero = false, bool isMounted = false)
		{
			return (float)((2 + tier) * (8 + tier)) * 0.02f * (isHero ? 1.5f : (isMounted ? 1.2f : 1f));
		}

		private CharacterRestrictionFlags _characterRestrictionFlags;

		[SaveableField(101)]
		private Hero _heroObject;

		[SaveableField(103)]
		private CharacterObject _originCharacter;

		private TraitObject _persona;

		private CharacterTraits _characterTraits;

		private CharacterObject _civilianEquipmentTemplate;

		private CharacterObject _battleEquipmentTemplate;

		private Occupation _occupation;
	}
}
