using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.MapNotificationTypes
{
	public class TraitChangedMapNotification : InformationData
	{
		internal static void AutoGeneratedStaticCollectObjectsTraitChangedMapNotification(object o, List<object> collectedObjects)
		{
			((TraitChangedMapNotification)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Trait);
		}

		internal static object AutoGeneratedGetMemberValueTrait(object o)
		{
			return ((TraitChangedMapNotification)o).Trait;
		}

		internal static object AutoGeneratedGetMemberValueGained(object o)
		{
			return ((TraitChangedMapNotification)o).Gained;
		}

		internal static object AutoGeneratedGetMemberValuePreviousTraitLevel(object o)
		{
			return ((TraitChangedMapNotification)o).PreviousTraitLevel;
		}

		internal static object AutoGeneratedGetMemberValueCurrentTraitLevel(object o)
		{
			return ((TraitChangedMapNotification)o).CurrentTraitLevel;
		}

		public override TextObject TitleText
		{
			get
			{
				if (!this.Gained)
				{
					return new TextObject("{=UT211jbX}Trait Lost", null);
				}
				return new TextObject("{=kbaA7aC8}Trait Gained", null);
			}
		}

		public override string SoundEventPath
		{
			get
			{
				return "event:/ui/notification/trait_change";
			}
		}

		[SaveableProperty(1)]
		public TraitObject Trait { get; private set; }

		[SaveableProperty(2)]
		public bool Gained { get; private set; }

		[SaveableProperty(3)]
		public int PreviousTraitLevel { get; private set; }

		[SaveableProperty(4)]
		public int CurrentTraitLevel { get; private set; }

		public TraitChangedMapNotification(TraitObject trait, bool gained, int previousLevel, TextObject descriptionText)
			: base(descriptionText)
		{
			this.CurrentTraitLevel = Hero.MainHero.GetTraitLevel(trait);
			this.Gained = gained;
			this.Trait = trait;
			this.PreviousTraitLevel = previousLevel;
		}
	}
}
