using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.MapNotificationTypes
{
	public class SettlementOwnerChangedMapNotification : InformationData
	{
		internal static void AutoGeneratedStaticCollectObjectsSettlementOwnerChangedMapNotification(object o, List<object> collectedObjects)
		{
			((SettlementOwnerChangedMapNotification)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.PreviousOwner);
			collectedObjects.Add(this.NewOwner);
			collectedObjects.Add(this.Settlement);
		}

		internal static object AutoGeneratedGetMemberValuePreviousOwner(object o)
		{
			return ((SettlementOwnerChangedMapNotification)o).PreviousOwner;
		}

		internal static object AutoGeneratedGetMemberValueNewOwner(object o)
		{
			return ((SettlementOwnerChangedMapNotification)o).NewOwner;
		}

		internal static object AutoGeneratedGetMemberValueSettlement(object o)
		{
			return ((SettlementOwnerChangedMapNotification)o).Settlement;
		}

		public override TextObject TitleText
		{
			get
			{
				return new TextObject("{=b6BunI6y}Settlement Owner Changed", null);
			}
		}

		public override string SoundEventPath
		{
			get
			{
				return "";
			}
		}

		[SaveableProperty(10)]
		public Hero PreviousOwner { get; private set; }

		[SaveableProperty(20)]
		public Hero NewOwner { get; private set; }

		[SaveableProperty(30)]
		public Settlement Settlement { get; private set; }

		public SettlementOwnerChangedMapNotification(Settlement settlement, Hero newOwner, Hero previousOwner, TextObject descriptionText)
			: base(descriptionText)
		{
			this.PreviousOwner = previousOwner;
			this.NewOwner = newOwner;
			this.Settlement = settlement;
		}
	}
}
