using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Overlay;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x02000062 RID: 98
	public abstract class QuestBase : MBObjectBase
	{
		// Token: 0x06000D16 RID: 3350 RVA: 0x000402DE File Offset: 0x0003E4DE
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._taskList);
			collectedObjects.Add(this._journalEntries);
			collectedObjects.Add(this._questGiver);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.QuestDueTime, collectedObjects);
		}

		// Token: 0x06000D17 RID: 3351 RVA: 0x0004031C File Offset: 0x0003E51C
		internal static object AutoGeneratedGetMemberValueQuestDueTime(object o)
		{
			return ((QuestBase)o).QuestDueTime;
		}

		// Token: 0x06000D18 RID: 3352 RVA: 0x0004032E File Offset: 0x0003E52E
		internal static object AutoGeneratedGetMemberValueIsTrackEnabled(object o)
		{
			return ((QuestBase)o).IsTrackEnabled;
		}

		// Token: 0x06000D19 RID: 3353 RVA: 0x00040340 File Offset: 0x0003E540
		internal static object AutoGeneratedGetMemberValueRewardGold(object o)
		{
			return ((QuestBase)o).RewardGold;
		}

		// Token: 0x06000D1A RID: 3354 RVA: 0x00040352 File Offset: 0x0003E552
		internal static object AutoGeneratedGetMemberValue_questState(object o)
		{
			return ((QuestBase)o)._questState;
		}

		// Token: 0x06000D1B RID: 3355 RVA: 0x00040364 File Offset: 0x0003E564
		internal static object AutoGeneratedGetMemberValue_taskList(object o)
		{
			return ((QuestBase)o)._taskList;
		}

		// Token: 0x06000D1C RID: 3356 RVA: 0x00040371 File Offset: 0x0003E571
		internal static object AutoGeneratedGetMemberValue_journalEntries(object o)
		{
			return ((QuestBase)o)._journalEntries;
		}

		// Token: 0x06000D1D RID: 3357 RVA: 0x0004037E File Offset: 0x0003E57E
		internal static object AutoGeneratedGetMemberValue_questGiver(object o)
		{
			return ((QuestBase)o)._questGiver;
		}

		// Token: 0x1700033E RID: 830
		// (get) Token: 0x06000D1E RID: 3358 RVA: 0x0004038B File Offset: 0x0003E58B
		// (set) Token: 0x06000D1F RID: 3359 RVA: 0x00040393 File Offset: 0x0003E593
		[SaveableProperty(101)]
		public CampaignTime QuestDueTime { get; protected set; }

		// Token: 0x1700033F RID: 831
		// (get) Token: 0x06000D20 RID: 3360 RVA: 0x0004039C File Offset: 0x0003E59C
		public MBReadOnlyList<QuestTaskBase> TaskList
		{
			get
			{
				return this._taskList;
			}
		}

		// Token: 0x17000340 RID: 832
		// (get) Token: 0x06000D21 RID: 3361 RVA: 0x000403A4 File Offset: 0x0003E5A4
		public MBReadOnlyList<JournalLog> JournalEntries
		{
			get
			{
				return this._journalEntries;
			}
		}

		// Token: 0x17000341 RID: 833
		// (get) Token: 0x06000D22 RID: 3362 RVA: 0x000403AC File Offset: 0x0003E5AC
		// (set) Token: 0x06000D23 RID: 3363 RVA: 0x000403B4 File Offset: 0x0003E5B4
		[SaveableProperty(104)]
		public bool IsTrackEnabled { get; private set; }

		// Token: 0x17000342 RID: 834
		// (get) Token: 0x06000D24 RID: 3364 RVA: 0x000403BD File Offset: 0x0003E5BD
		public bool IsOngoing
		{
			get
			{
				return this._questState == QuestBase.QuestStates.Ongoing;
			}
		}

		// Token: 0x17000343 RID: 835
		// (get) Token: 0x06000D25 RID: 3365 RVA: 0x000403C8 File Offset: 0x0003E5C8
		public bool IsFinalized
		{
			get
			{
				return this._questState == QuestBase.QuestStates.Finalized;
			}
		}

		// Token: 0x17000344 RID: 836
		// (get) Token: 0x06000D26 RID: 3366 RVA: 0x000403D3 File Offset: 0x0003E5D3
		public bool IsThereDiscussDialogFlow
		{
			get
			{
				return this.DiscussDialogFlow != null;
			}
		}

		// Token: 0x17000345 RID: 837
		// (get) Token: 0x06000D27 RID: 3367 RVA: 0x000403DE File Offset: 0x0003E5DE
		// (set) Token: 0x06000D28 RID: 3368 RVA: 0x000403E6 File Offset: 0x0003E5E6
		public Hero QuestGiver
		{
			get
			{
				return this._questGiver;
			}
			private set
			{
				this._questGiver = value;
			}
		}

		// Token: 0x17000346 RID: 838
		// (get) Token: 0x06000D29 RID: 3369
		public abstract TextObject Title { get; }

		// Token: 0x17000347 RID: 839
		// (get) Token: 0x06000D2A RID: 3370
		public abstract bool IsRemainingTimeHidden { get; }

		// Token: 0x17000348 RID: 840
		// (get) Token: 0x06000D2B RID: 3371 RVA: 0x000403EF File Offset: 0x0003E5EF
		// (set) Token: 0x06000D2C RID: 3372 RVA: 0x000403F7 File Offset: 0x0003E5F7
		public virtual int RelationshipChangeWithQuestGiver { get; protected set; }

		// Token: 0x17000349 RID: 841
		// (get) Token: 0x06000D2D RID: 3373 RVA: 0x00040400 File Offset: 0x0003E600
		public virtual bool IsSpecialQuest
		{
			get
			{
				return false;
			}
		}

		// Token: 0x06000D2E RID: 3374
		protected abstract void SetDialogs();

		// Token: 0x06000D2F RID: 3375 RVA: 0x00040403 File Offset: 0x0003E603
		protected QuestBase(string questId, Hero questGiver, CampaignTime duration, int rewardGold)
			: base(questId)
		{
			this.QuestGiver = questGiver;
			this.QuestDueTime = duration;
			this.IsTrackEnabled = true;
			this.RewardGold = rewardGold;
			this._taskList = new MBList<QuestTaskBase>();
			this._journalEntries = new MBList<JournalLog>();
		}

		// Token: 0x06000D30 RID: 3376 RVA: 0x00040440 File Offset: 0x0003E640
		public void StartQuest()
		{
			this._questState = QuestBase.QuestStates.Ongoing;
			this.OnStartQuest();
			this.RegisterEvents();
			MapEventHelper.OnConversationEnd();
			if (this.QuestGiver != null && !Campaign.Current.QuestManager.TrackedObjects.ContainsKey(this.QuestGiver))
			{
				Campaign.Current.QuestManager.AddTrackedObjectForQuest(this.QuestGiver, this);
			}
			CampaignEventDispatcher.Instance.OnQuestStarted(this);
		}

		// Token: 0x06000D31 RID: 3377 RVA: 0x000404AA File Offset: 0x0003E6AA
		public void CompleteQuestWithSuccess()
		{
			this.OnCompleteWithSuccess();
			this.FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.Success);
			this.AfterFinalize();
		}

		// Token: 0x06000D32 RID: 3378 RVA: 0x000404CC File Offset: 0x0003E6CC
		public void CompleteQuestWithTimeOut(TextObject timeOutLog = null)
		{
			bool flag = false;
			bool flag2 = false;
			this.OnBeforeTimedOut(ref flag, ref flag2);
			if (!flag2)
			{
				if (!flag)
				{
					if (timeOutLog != null)
					{
						this.AddLog(timeOutLog, false);
					}
					this.OnTimedOut();
					this.FinalizeQuest();
					CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.Timeout);
					this.AfterFinalize();
					return;
				}
				this.CompleteQuestWithSuccess();
			}
		}

		// Token: 0x06000D33 RID: 3379 RVA: 0x0004051E File Offset: 0x0003E71E
		public void CompleteQuestWithFail(TextObject cancelLog = null)
		{
			if (cancelLog != null)
			{
				this.AddLog(cancelLog, false);
			}
			this.OnFailed();
			this.FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.Fail);
			this.AfterFinalize();
		}

		// Token: 0x06000D34 RID: 3380 RVA: 0x0004054A File Offset: 0x0003E74A
		public void CompleteQuestWithBetrayal(TextObject betrayLog = null)
		{
			if (betrayLog != null)
			{
				this.AddLog(betrayLog, false);
			}
			this.OnBetrayal();
			this.FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.FailWithBetrayal);
			this.AfterFinalize();
		}

		// Token: 0x06000D35 RID: 3381 RVA: 0x00040576 File Offset: 0x0003E776
		public void CompleteQuestWithCancel(TextObject cancelLog = null)
		{
			if (cancelLog != null)
			{
				this.AddLog(cancelLog, false);
			}
			this.OnCanceled();
			this.FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.Cancel);
			this.AfterFinalize();
		}

		// Token: 0x06000D36 RID: 3382 RVA: 0x000405A4 File Offset: 0x0003E7A4
		private void FinalizeQuest()
		{
			foreach (QuestTaskBase questTaskBase in this._taskList)
			{
				if (questTaskBase.IsActive)
				{
					questTaskBase.Finish(QuestTaskBase.FinishStates.Cancel);
				}
			}
			this._questState = QuestBase.QuestStates.Finalized;
			this.OnFinalize();
			this.ClearRelatedFields();
			this.OfferDialogFlow = null;
			this.DiscussDialogFlow = null;
			this.QuestCharacterDialogFlow = null;
			Campaign.Current.QuestManager.OnQuestFinalized(this);
		}

		// Token: 0x06000D37 RID: 3383 RVA: 0x00040638 File Offset: 0x0003E838
		private void AfterFinalize()
		{
			this.RemoveAllTrackedObjects();
		}

		// Token: 0x06000D38 RID: 3384 RVA: 0x00040640 File Offset: 0x0003E840
		protected void InitializeQuestOnCreation()
		{
			this.AddDialogs();
		}

		// Token: 0x06000D39 RID: 3385 RVA: 0x00040648 File Offset: 0x0003E848
		public void InitializeQuestOnLoadWithQuestManager()
		{
			this.RegisterEvents();
			this.InitializeQuestOnGameLoad();
			this.AddDialogs();
		}

		// Token: 0x06000D3A RID: 3386 RVA: 0x0004065C File Offset: 0x0003E85C
		protected void AddTask(QuestTaskBase task)
		{
			this._taskList.Add(task);
			task.SetReferences();
		}

		// Token: 0x1700034A RID: 842
		// (get) Token: 0x06000D3B RID: 3387 RVA: 0x00040670 File Offset: 0x0003E870
		protected virtual TextObject TargetHeroDisappearedLogText
		{
			get
			{
				return new TextObject("{=ZfRmHMJJ}{QUEST_TARGET.LINK} has lost the struggle against {?QUEST_TARGET.GENDER}her{?}his{\\?} rivals and decided to left the realm. Your agreement with {QUEST_GIVER.LINK} has been canceled and your service is no longer needed to solve the issue.", null);
			}
		}

		// Token: 0x1700034B RID: 843
		// (get) Token: 0x06000D3C RID: 3388 RVA: 0x0004067D File Offset: 0x0003E87D
		protected virtual TextObject TargetHeroDiedLogText
		{
			get
			{
				return new TextObject("{=WKIqnKtu}{QUEST_TARGET.LINK} has died and your agreement with {QUEST_GIVER.LINK} has been canceled. Your service is no longer needed to solve the issue.", null);
			}
		}

		// Token: 0x06000D3D RID: 3389 RVA: 0x0004068C File Offset: 0x0003E88C
		public JournalLog AddLog(TextObject text, bool hideInformation = false)
		{
			JournalLog journalLog = new JournalLog(CampaignTime.Now, text, null, 0, 0, LogType.Text);
			this._journalEntries.Add(journalLog);
			CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
			return journalLog;
		}

		// Token: 0x06000D3E RID: 3390 RVA: 0x000406C4 File Offset: 0x0003E8C4
		public JournalLog AddDiscreteLog(TextObject text, TextObject taskName, int currentProgress, int targetProgress, TextObject shortText = null, bool hideInformation = false)
		{
			JournalLog journalLog = new JournalLog(CampaignTime.Now, text, taskName, currentProgress, targetProgress, LogType.Discreate);
			this._journalEntries.Add(journalLog);
			CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
			return journalLog;
		}

		// Token: 0x06000D3F RID: 3391 RVA: 0x000406FC File Offset: 0x0003E8FC
		public JournalLog AddTwoWayContinuousLog(TextObject text, TextObject taskName, int currentProgress, int range, bool hideInformation = false)
		{
			JournalLog journalLog = new JournalLog(CampaignTime.Now, text, taskName, currentProgress, range, LogType.TwoWayContinuous);
			this._journalEntries.Add(journalLog);
			CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
			return journalLog;
		}

		// Token: 0x06000D40 RID: 3392 RVA: 0x00040734 File Offset: 0x0003E934
		protected void RemoveLog(JournalLog logToRemove)
		{
			if (this._journalEntries.Contains(logToRemove))
			{
				this._journalEntries.Remove(logToRemove);
				return;
			}
			Debug.FailedAssert("Quest log requested to be removed cant be found.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestBase.cs", "RemoveLog", 274);
		}

		// Token: 0x06000D41 RID: 3393 RVA: 0x0004076C File Offset: 0x0003E96C
		protected void UpdateQuestTaskStage(JournalLog questLog, int currentProgress)
		{
			foreach (JournalLog journalLog in this._journalEntries)
			{
				if (journalLog == questLog)
				{
					journalLog.UpdateCurrentProgress(currentProgress);
				}
			}
		}

		// Token: 0x06000D42 RID: 3394 RVA: 0x000407C4 File Offset: 0x0003E9C4
		public virtual GameMenuOption.IssueQuestFlags IsLocationTrackedByQuest(Location location)
		{
			return GameMenuOption.IssueQuestFlags.None;
		}

		// Token: 0x06000D43 RID: 3395 RVA: 0x000407C7 File Offset: 0x0003E9C7
		public virtual int GetCurrentProgress()
		{
			return -1;
		}

		// Token: 0x06000D44 RID: 3396 RVA: 0x000407CA File Offset: 0x0003E9CA
		public virtual int GetMaxProgress()
		{
			return 1;
		}

		// Token: 0x06000D45 RID: 3397 RVA: 0x000407CD File Offset: 0x0003E9CD
		public override string ToString()
		{
			return base.StringId;
		}

		// Token: 0x06000D46 RID: 3398 RVA: 0x000407D5 File Offset: 0x0003E9D5
		public virtual string GetPrefabName()
		{
			return "bd_target_board_2";
		}

		// Token: 0x06000D47 RID: 3399 RVA: 0x000407DC File Offset: 0x0003E9DC
		private void AddDialogs()
		{
			if (this.OfferDialogFlow != null)
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.OfferDialogFlow, this);
			}
			if (this.DiscussDialogFlow != null)
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.DiscussDialogFlow, this);
			}
			if (this.QuestCharacterDialogFlow != null)
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.QuestCharacterDialogFlow, this);
			}
		}

		// Token: 0x06000D48 RID: 3400 RVA: 0x00040844 File Offset: 0x0003EA44
		private void ClearRelatedFields()
		{
			CampaignEventDispatcher.Instance.RemoveListeners(this);
			foreach (QuestTaskBase questTaskBase in this._taskList)
			{
				CampaignEventDispatcher.Instance.RemoveListeners(questTaskBase);
			}
			Campaign.Current.ConversationManager.RemoveRelatedLines(this);
			Campaign.Current.GameMenuManager.RemoveRelatedGameMenus(this);
			Campaign.Current.GameMenuManager.RemoveRelatedGameMenuOptions(this);
		}

		// Token: 0x06000D49 RID: 3401 RVA: 0x000408D8 File Offset: 0x0003EAD8
		private void RemoveAllTrackedObjects()
		{
			Campaign.Current.QuestManager.RemoveAllTrackedObjectsForQuest(this);
		}

		// Token: 0x06000D4A RID: 3402 RVA: 0x000408EA File Offset: 0x0003EAEA
		public void AddTrackedObject(ITrackableCampaignObject trackedObject)
		{
			Campaign.Current.QuestManager.AddTrackedObjectForQuest(trackedObject, this);
			if (this.IsTrackEnabled)
			{
				Campaign.Current.VisualTrackerManager.RegisterObject(trackedObject);
			}
		}

		// Token: 0x06000D4B RID: 3403 RVA: 0x00040915 File Offset: 0x0003EB15
		public void RemoveTrackedObject(ITrackableCampaignObject trackedObject)
		{
			Campaign.Current.QuestManager.RemoveTrackedObjectForQuest(trackedObject, this);
		}

		// Token: 0x06000D4C RID: 3404 RVA: 0x00040928 File Offset: 0x0003EB28
		public bool IsTracked(ITrackableCampaignObject o)
		{
			return Campaign.Current.QuestManager.TrackedObjects.ContainsKey(o) && Campaign.Current.QuestManager.TrackedObjects[o].Contains(this);
		}

		// Token: 0x06000D4D RID: 3405 RVA: 0x00040960 File Offset: 0x0003EB60
		public void ToggleTrackedObjects()
		{
			this.IsTrackEnabled = !this.IsTrackEnabled;
			List<ITrackableCampaignObject> allTrackedObjectsOfAQuest = Campaign.Current.QuestManager.GetAllTrackedObjectsOfAQuest(this);
			if (this.IsTrackEnabled)
			{
				using (List<ITrackableCampaignObject>.Enumerator enumerator = allTrackedObjectsOfAQuest.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						ITrackableCampaignObject trackableCampaignObject = enumerator.Current;
						Campaign.Current.VisualTrackerManager.RegisterObject(trackableCampaignObject);
					}
					return;
				}
			}
			foreach (ITrackableCampaignObject trackableCampaignObject2 in allTrackedObjectsOfAQuest)
			{
				Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackableCampaignObject2, false);
			}
		}

		// Token: 0x06000D4E RID: 3406 RVA: 0x00040A28 File Offset: 0x0003EC28
		public void AddGameMenu(string menuId, TextObject menuText, OnInitDelegate initDelegate, GameOverlays.MenuOverlayType overlay = GameOverlays.MenuOverlayType.None, GameMenu.MenuFlags menuFlags = GameMenu.MenuFlags.None)
		{
			GameMenu gameMenu = new GameMenu(menuId);
			gameMenu.Initialize(menuText, initDelegate, overlay, menuFlags, null);
			Campaign.Current.GameMenuManager.AddGameMenu(gameMenu);
		}

		// Token: 0x06000D4F RID: 3407 RVA: 0x00040A5C File Offset: 0x0003EC5C
		public void AddGameMenuOption(string menuId, string optionId, TextObject optionText, GameMenuOption.OnConditionDelegate condition, GameMenuOption.OnConsequenceDelegate consequence, bool Isleave = false, int index = -1, object relatedObject = null)
		{
			GameMenu gameMenu = Campaign.Current.GameMenuManager.GetGameMenu(menuId);
			if (gameMenu == null)
			{
				throw new KeyNotFoundException();
			}
			gameMenu.AddOption(optionId, optionText, condition, consequence, index, Isleave, false, relatedObject);
		}

		// Token: 0x06000D50 RID: 3408 RVA: 0x00040A94 File Offset: 0x0003EC94
		public void ChangeQuestDueTime(CampaignTime questDueTime)
		{
			this.QuestDueTime = questDueTime;
		}

		// Token: 0x06000D51 RID: 3409
		protected abstract void InitializeQuestOnGameLoad();

		// Token: 0x06000D52 RID: 3410 RVA: 0x00040A9D File Offset: 0x0003EC9D
		protected virtual void RegisterEvents()
		{
		}

		// Token: 0x06000D53 RID: 3411 RVA: 0x00040A9F File Offset: 0x0003EC9F
		protected virtual void OnStartQuest()
		{
		}

		// Token: 0x06000D54 RID: 3412 RVA: 0x00040AA1 File Offset: 0x0003ECA1
		protected virtual void OnCompleteWithSuccess()
		{
		}

		// Token: 0x06000D55 RID: 3413 RVA: 0x00040AA3 File Offset: 0x0003ECA3
		protected virtual void OnFinalize()
		{
		}

		// Token: 0x06000D56 RID: 3414 RVA: 0x00040AA5 File Offset: 0x0003ECA5
		public virtual void OnFailed()
		{
		}

		// Token: 0x06000D57 RID: 3415 RVA: 0x00040AA7 File Offset: 0x0003ECA7
		protected virtual void OnTimedOut()
		{
		}

		// Token: 0x06000D58 RID: 3416 RVA: 0x00040AA9 File Offset: 0x0003ECA9
		protected virtual void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
		{
		}

		// Token: 0x06000D59 RID: 3417 RVA: 0x00040AAB File Offset: 0x0003ECAB
		protected virtual void OnBetrayal()
		{
		}

		// Token: 0x06000D5A RID: 3418 RVA: 0x00040AAD File Offset: 0x0003ECAD
		public virtual void OnCanceled()
		{
		}

		// Token: 0x06000D5B RID: 3419 RVA: 0x00040AAF File Offset: 0x0003ECAF
		public virtual bool QuestPreconditions()
		{
			return false;
		}

		// Token: 0x06000D5C RID: 3420 RVA: 0x00040AB2 File Offset: 0x0003ECB2
		public virtual void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06000D5D RID: 3421 RVA: 0x00040AB4 File Offset: 0x0003ECB4
		public virtual void OnHeroCanMarryInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06000D5E RID: 3422 RVA: 0x00040AB6 File Offset: 0x0003ECB6
		public virtual void OnHeroCanLeadPartyInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06000D5F RID: 3423 RVA: 0x00040AB8 File Offset: 0x0003ECB8
		public virtual void OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06000D60 RID: 3424 RVA: 0x00040ABA File Offset: 0x0003ECBA
		public virtual void OnHeroCanDieInfoIsRequested(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
		{
			result = hero != this.QuestGiver;
		}

		// Token: 0x06000D61 RID: 3425 RVA: 0x00040ACA File Offset: 0x0003ECCA
		public virtual void OnHeroCanBecomePrisonerInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06000D62 RID: 3426 RVA: 0x00040ACC File Offset: 0x0003ECCC
		public virtual void OnHeroCanBeSelectedInInventoryInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06000D63 RID: 3427 RVA: 0x00040ACE File Offset: 0x0003ECCE
		public virtual void OnHeroCanMoveToSettlementInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x040003DB RID: 987
		[SaveableField(100)]
		private QuestBase.QuestStates _questState;

		// Token: 0x040003DD RID: 989
		protected DialogFlow OfferDialogFlow;

		// Token: 0x040003DE RID: 990
		protected DialogFlow DiscussDialogFlow;

		// Token: 0x040003DF RID: 991
		protected DialogFlow QuestCharacterDialogFlow;

		// Token: 0x040003E0 RID: 992
		[SaveableField(102)]
		private MBList<QuestTaskBase> _taskList;

		// Token: 0x040003E1 RID: 993
		[SaveableField(103)]
		private readonly MBList<JournalLog> _journalEntries;

		// Token: 0x040003E3 RID: 995
		[SaveableField(106)]
		private Hero _questGiver;

		// Token: 0x040003E5 RID: 997
		[SaveableField(107)]
		public readonly int RewardGold;

		// Token: 0x020004B6 RID: 1206
		internal enum QuestStates
		{
			// Token: 0x0400145D RID: 5213
			Ongoing,
			// Token: 0x0400145E RID: 5214
			Finalized
		}

		// Token: 0x020004B7 RID: 1207
		public enum QuestCompleteDetails
		{
			// Token: 0x04001460 RID: 5216
			Invalid,
			// Token: 0x04001461 RID: 5217
			Success,
			// Token: 0x04001462 RID: 5218
			Cancel,
			// Token: 0x04001463 RID: 5219
			Fail,
			// Token: 0x04001464 RID: 5220
			Timeout,
			// Token: 0x04001465 RID: 5221
			FailWithBetrayal
		}
	}
}
