using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Overlay;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	public abstract class QuestBase : MBObjectBase
	{
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._taskList);
			collectedObjects.Add(this._journalEntries);
			collectedObjects.Add(this._questGiver);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.QuestDueTime, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueQuestDueTime(object o)
		{
			return ((QuestBase)o).QuestDueTime;
		}

		internal static object AutoGeneratedGetMemberValueIsTrackEnabled(object o)
		{
			return ((QuestBase)o).IsTrackEnabled;
		}

		internal static object AutoGeneratedGetMemberValueRewardGold(object o)
		{
			return ((QuestBase)o).RewardGold;
		}

		internal static object AutoGeneratedGetMemberValue_questState(object o)
		{
			return ((QuestBase)o)._questState;
		}

		internal static object AutoGeneratedGetMemberValue_taskList(object o)
		{
			return ((QuestBase)o)._taskList;
		}

		internal static object AutoGeneratedGetMemberValue_journalEntries(object o)
		{
			return ((QuestBase)o)._journalEntries;
		}

		internal static object AutoGeneratedGetMemberValue_questGiver(object o)
		{
			return ((QuestBase)o)._questGiver;
		}

		[SaveableProperty(101)]
		public CampaignTime QuestDueTime { get; protected set; }

		public MBReadOnlyList<QuestTaskBase> TaskList
		{
			get
			{
				return this._taskList;
			}
		}

		public MBReadOnlyList<JournalLog> JournalEntries
		{
			get
			{
				return this._journalEntries;
			}
		}

		[SaveableProperty(104)]
		public bool IsTrackEnabled { get; private set; }

		public bool IsOngoing
		{
			get
			{
				return this._questState == QuestBase.QuestStates.Ongoing;
			}
		}

		public bool IsFinalized
		{
			get
			{
				return this._questState == QuestBase.QuestStates.Finalized;
			}
		}

		public bool IsThereDiscussDialogFlow
		{
			get
			{
				return this.DiscussDialogFlow != null;
			}
		}

		public Hero QuestGiver
		{
			get
			{
				return this._questGiver;
			}
			private set
			{
				this._questGiver = value;
			}
		}

		public abstract TextObject Title { get; }

		public abstract bool IsRemainingTimeHidden { get; }

		public virtual int RelationshipChangeWithQuestGiver { get; protected set; }

		public virtual bool IsSpecialQuest
		{
			get
			{
				return false;
			}
		}

		protected abstract void SetDialogs();

		protected QuestBase(string questId, Hero questGiver, CampaignTime duration, int rewardGold)
			: base(questId)
		{
			this.QuestGiver = questGiver;
			this.QuestDueTime = duration;
			this.IsTrackEnabled = true;
			this.RewardGold = rewardGold;
			this._taskList = new MBList<QuestTaskBase>();
			this._journalEntries = new MBList<JournalLog>();
		}

		public void StartQuest()
		{
			this._questState = QuestBase.QuestStates.Ongoing;
			this.OnStartQuest();
			this.RegisterEvents();
			MapEventHelper.OnConversationEnd();
			if (this.QuestGiver != null && !Campaign.Current.QuestManager.TrackedObjects.ContainsKey(this.QuestGiver))
			{
				Campaign.Current.QuestManager.AddTrackedObjectForQuest(this.QuestGiver, this);
			}
			CampaignEventDispatcher.Instance.OnQuestStarted(this);
		}

		public void CompleteQuestWithSuccess()
		{
			this.OnCompleteWithSuccess();
			this.FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.Success);
			this.AfterFinalize();
		}

		public void CompleteQuestWithTimeOut(TextObject timeOutLog = null)
		{
			bool flag = false;
			bool flag2 = false;
			this.OnBeforeTimedOut(ref flag, ref flag2);
			if (!flag2)
			{
				if (!flag)
				{
					if (timeOutLog != null)
					{
						this.AddLog(timeOutLog, false);
					}
					this.OnTimedOut();
					this.FinalizeQuest();
					CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.Timeout);
					this.AfterFinalize();
					return;
				}
				this.CompleteQuestWithSuccess();
			}
		}

		public void CompleteQuestWithFail(TextObject cancelLog = null)
		{
			if (cancelLog != null)
			{
				this.AddLog(cancelLog, false);
			}
			this.OnFailed();
			this.FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.Fail);
			this.AfterFinalize();
		}

		public void CompleteQuestWithBetrayal(TextObject betrayLog = null)
		{
			if (betrayLog != null)
			{
				this.AddLog(betrayLog, false);
			}
			this.OnBetrayal();
			this.FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.FailWithBetrayal);
			this.AfterFinalize();
		}

		public void CompleteQuestWithCancel(TextObject cancelLog = null)
		{
			if (cancelLog != null)
			{
				this.AddLog(cancelLog, false);
			}
			this.OnCanceled();
			this.FinalizeQuest();
			CampaignEventDispatcher.Instance.OnQuestCompleted(this, QuestBase.QuestCompleteDetails.Cancel);
			this.AfterFinalize();
		}

		private void FinalizeQuest()
		{
			foreach (QuestTaskBase questTaskBase in this._taskList)
			{
				if (questTaskBase.IsActive)
				{
					questTaskBase.Finish(QuestTaskBase.FinishStates.Cancel);
				}
			}
			this._questState = QuestBase.QuestStates.Finalized;
			this.OnFinalize();
			this.ClearRelatedFields();
			this.OfferDialogFlow = null;
			this.DiscussDialogFlow = null;
			this.QuestCharacterDialogFlow = null;
			Campaign.Current.QuestManager.OnQuestFinalized(this);
		}

		private void AfterFinalize()
		{
			this.RemoveAllTrackedObjects();
		}

		protected void InitializeQuestOnCreation()
		{
			this.AddDialogs();
		}

		public void InitializeQuestOnLoadWithQuestManager()
		{
			this.RegisterEvents();
			this.InitializeQuestOnGameLoad();
			this.AddDialogs();
		}

		protected void AddTask(QuestTaskBase task)
		{
			this._taskList.Add(task);
			task.SetReferences();
		}

		protected virtual TextObject TargetHeroDisappearedLogText
		{
			get
			{
				return new TextObject("{=ZfRmHMJJ}{QUEST_TARGET.LINK} has lost the struggle against {?QUEST_TARGET.GENDER}her{?}his{\\?} rivals and decided to left the realm. Your agreement with {QUEST_GIVER.LINK} has been canceled and your service is no longer needed to solve the issue.", null);
			}
		}

		protected virtual TextObject TargetHeroDiedLogText
		{
			get
			{
				return new TextObject("{=WKIqnKtu}{QUEST_TARGET.LINK} has died and your agreement with {QUEST_GIVER.LINK} has been canceled. Your service is no longer needed to solve the issue.", null);
			}
		}

		public JournalLog AddLog(TextObject text, bool hideInformation = false)
		{
			JournalLog journalLog = new JournalLog(CampaignTime.Now, text, null, 0, 0, LogType.Text);
			this._journalEntries.Add(journalLog);
			CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
			return journalLog;
		}

		public JournalLog AddDiscreteLog(TextObject text, TextObject taskName, int currentProgress, int targetProgress, TextObject shortText = null, bool hideInformation = false)
		{
			JournalLog journalLog = new JournalLog(CampaignTime.Now, text, taskName, currentProgress, targetProgress, LogType.Discreate);
			this._journalEntries.Add(journalLog);
			CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
			return journalLog;
		}

		public JournalLog AddTwoWayContinuousLog(TextObject text, TextObject taskName, int currentProgress, int range, bool hideInformation = false)
		{
			JournalLog journalLog = new JournalLog(CampaignTime.Now, text, taskName, currentProgress, range, LogType.TwoWayContinuous);
			this._journalEntries.Add(journalLog);
			CampaignEventDispatcher.Instance.OnQuestLogAdded(this, hideInformation);
			return journalLog;
		}

		protected void RemoveLog(JournalLog logToRemove)
		{
			if (this._journalEntries.Contains(logToRemove))
			{
				this._journalEntries.Remove(logToRemove);
				return;
			}
			Debug.FailedAssert("Quest log requested to be removed cant be found.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestBase.cs", "RemoveLog", 274);
		}

		protected void UpdateQuestTaskStage(JournalLog questLog, int currentProgress)
		{
			foreach (JournalLog journalLog in this._journalEntries)
			{
				if (journalLog == questLog)
				{
					journalLog.UpdateCurrentProgress(currentProgress);
				}
			}
		}

		public virtual GameMenuOption.IssueQuestFlags IsLocationTrackedByQuest(Location location)
		{
			return GameMenuOption.IssueQuestFlags.None;
		}

		public virtual int GetCurrentProgress()
		{
			return -1;
		}

		public virtual int GetMaxProgress()
		{
			return 1;
		}

		public override string ToString()
		{
			return base.StringId;
		}

		public virtual string GetPrefabName()
		{
			return "bd_target_board_2";
		}

		private void AddDialogs()
		{
			if (this.OfferDialogFlow != null)
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.OfferDialogFlow, this);
			}
			if (this.DiscussDialogFlow != null)
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.DiscussDialogFlow, this);
			}
			if (this.QuestCharacterDialogFlow != null)
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.QuestCharacterDialogFlow, this);
			}
		}

		private void ClearRelatedFields()
		{
			CampaignEventDispatcher.Instance.RemoveListeners(this);
			foreach (QuestTaskBase questTaskBase in this._taskList)
			{
				CampaignEventDispatcher.Instance.RemoveListeners(questTaskBase);
			}
			Campaign.Current.ConversationManager.RemoveRelatedLines(this);
			Campaign.Current.GameMenuManager.RemoveRelatedGameMenus(this);
			Campaign.Current.GameMenuManager.RemoveRelatedGameMenuOptions(this);
		}

		private void RemoveAllTrackedObjects()
		{
			Campaign.Current.QuestManager.RemoveAllTrackedObjectsForQuest(this);
		}

		public void AddTrackedObject(ITrackableCampaignObject trackedObject)
		{
			Campaign.Current.QuestManager.AddTrackedObjectForQuest(trackedObject, this);
			if (this.IsTrackEnabled)
			{
				Campaign.Current.VisualTrackerManager.RegisterObject(trackedObject);
			}
		}

		public void RemoveTrackedObject(ITrackableCampaignObject trackedObject)
		{
			Campaign.Current.QuestManager.RemoveTrackedObjectForQuest(trackedObject, this);
		}

		public bool IsTracked(ITrackableCampaignObject o)
		{
			return Campaign.Current.QuestManager.TrackedObjects.ContainsKey(o) && Campaign.Current.QuestManager.TrackedObjects[o].Contains(this);
		}

		public void ToggleTrackedObjects()
		{
			this.IsTrackEnabled = !this.IsTrackEnabled;
			List<ITrackableCampaignObject> allTrackedObjectsOfAQuest = Campaign.Current.QuestManager.GetAllTrackedObjectsOfAQuest(this);
			if (this.IsTrackEnabled)
			{
				using (List<ITrackableCampaignObject>.Enumerator enumerator = allTrackedObjectsOfAQuest.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						ITrackableCampaignObject trackableCampaignObject = enumerator.Current;
						Campaign.Current.VisualTrackerManager.RegisterObject(trackableCampaignObject);
					}
					return;
				}
			}
			foreach (ITrackableCampaignObject trackableCampaignObject2 in allTrackedObjectsOfAQuest)
			{
				Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackableCampaignObject2, false);
			}
		}

		public void AddGameMenu(string menuId, TextObject menuText, OnInitDelegate initDelegate, GameOverlays.MenuOverlayType overlay = GameOverlays.MenuOverlayType.None, GameMenu.MenuFlags menuFlags = GameMenu.MenuFlags.None)
		{
			GameMenu gameMenu = new GameMenu(menuId);
			gameMenu.Initialize(menuText, initDelegate, overlay, menuFlags, null);
			Campaign.Current.GameMenuManager.AddGameMenu(gameMenu);
		}

		public void AddGameMenuOption(string menuId, string optionId, TextObject optionText, GameMenuOption.OnConditionDelegate condition, GameMenuOption.OnConsequenceDelegate consequence, bool Isleave = false, int index = -1, object relatedObject = null)
		{
			GameMenu gameMenu = Campaign.Current.GameMenuManager.GetGameMenu(menuId);
			if (gameMenu == null)
			{
				throw new KeyNotFoundException();
			}
			gameMenu.AddOption(optionId, optionText, condition, consequence, index, Isleave, false, relatedObject);
		}

		public void ChangeQuestDueTime(CampaignTime questDueTime)
		{
			this.QuestDueTime = questDueTime;
		}

		protected abstract void InitializeQuestOnGameLoad();

		protected virtual void RegisterEvents()
		{
		}

		protected virtual void OnStartQuest()
		{
		}

		protected virtual void OnCompleteWithSuccess()
		{
		}

		protected virtual void OnFinalize()
		{
		}

		public virtual void OnFailed()
		{
		}

		protected virtual void OnTimedOut()
		{
		}

		protected virtual void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
		{
		}

		protected virtual void OnBetrayal()
		{
		}

		public virtual void OnCanceled()
		{
		}

		public virtual bool QuestPreconditions()
		{
			return false;
		}

		public virtual void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanMarryInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanLeadPartyInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanDieInfoIsRequested(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
		{
			result = hero != this.QuestGiver;
		}

		public virtual void OnHeroCanBecomePrisonerInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanBeSelectedInInventoryInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanMoveToSettlementInfoIsRequested(Hero hero, ref bool result)
		{
		}

		[SaveableField(100)]
		private QuestBase.QuestStates _questState;

		protected DialogFlow OfferDialogFlow;

		protected DialogFlow DiscussDialogFlow;

		protected DialogFlow QuestCharacterDialogFlow;

		[SaveableField(102)]
		private MBList<QuestTaskBase> _taskList;

		[SaveableField(103)]
		private readonly MBList<JournalLog> _journalEntries;

		[SaveableField(106)]
		private Hero _questGiver;

		[SaveableField(107)]
		public readonly int RewardGold;

		internal enum QuestStates
		{
			Ongoing,
			Finalized
		}

		public enum QuestCompleteDetails
		{
			Invalid,
			Success,
			Cancel,
			Fail,
			Timeout,
			FailWithBetrayal
		}
	}
}
