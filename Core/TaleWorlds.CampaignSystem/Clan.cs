using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	public sealed class Clan : MBObjectBase, IFaction
	{
		internal static void AutoGeneratedStaticCollectObjectsClan(object o, List<object> collectedObjects)
		{
			((Clan)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._defaultPartyTemplate);
			collectedObjects.Add(this._minorFactionCharacterTemplates);
			collectedObjects.Add(this._kingdom);
			collectedObjects.Add(this._basicTroop);
			collectedObjects.Add(this._leader);
			collectedObjects.Add(this._banner);
			collectedObjects.Add(this._home);
			collectedObjects.Add(this.Name);
			collectedObjects.Add(this.InformalName);
			collectedObjects.Add(this.Culture);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.LastFactionChangeTime, collectedObjects);
			collectedObjects.Add(this.EncyclopediaText);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.NotAttackableByPlayerUntilTime, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueName(object o)
		{
			return ((Clan)o).Name;
		}

		internal static object AutoGeneratedGetMemberValueInformalName(object o)
		{
			return ((Clan)o).InformalName;
		}

		internal static object AutoGeneratedGetMemberValueCulture(object o)
		{
			return ((Clan)o).Culture;
		}

		internal static object AutoGeneratedGetMemberValueLastFactionChangeTime(object o)
		{
			return ((Clan)o).LastFactionChangeTime;
		}

		internal static object AutoGeneratedGetMemberValueAutoRecruitmentExpenses(object o)
		{
			return ((Clan)o).AutoRecruitmentExpenses;
		}

		internal static object AutoGeneratedGetMemberValueEncyclopediaText(object o)
		{
			return ((Clan)o).EncyclopediaText;
		}

		internal static object AutoGeneratedGetMemberValueIsNoble(object o)
		{
			return ((Clan)o).IsNoble;
		}

		internal static object AutoGeneratedGetMemberValueMercenaryAwardMultiplier(object o)
		{
			return ((Clan)o).MercenaryAwardMultiplier;
		}

		internal static object AutoGeneratedGetMemberValueLabelColor(object o)
		{
			return ((Clan)o).LabelColor;
		}

		internal static object AutoGeneratedGetMemberValueInitialPosition(object o)
		{
			return ((Clan)o).InitialPosition;
		}

		internal static object AutoGeneratedGetMemberValueIsRebelClan(object o)
		{
			return ((Clan)o).IsRebelClan;
		}

		internal static object AutoGeneratedGetMemberValueIsMinorFaction(object o)
		{
			return ((Clan)o).IsMinorFaction;
		}

		internal static object AutoGeneratedGetMemberValueIsOutlaw(object o)
		{
			return ((Clan)o).IsOutlaw;
		}

		internal static object AutoGeneratedGetMemberValueIsNomad(object o)
		{
			return ((Clan)o).IsNomad;
		}

		internal static object AutoGeneratedGetMemberValueIsMafia(object o)
		{
			return ((Clan)o).IsMafia;
		}

		internal static object AutoGeneratedGetMemberValueIsClanTypeMercenary(object o)
		{
			return ((Clan)o).IsClanTypeMercenary;
		}

		internal static object AutoGeneratedGetMemberValueIsSect(object o)
		{
			return ((Clan)o).IsSect;
		}

		internal static object AutoGeneratedGetMemberValueIsUnderMercenaryService(object o)
		{
			return ((Clan)o).IsUnderMercenaryService;
		}

		internal static object AutoGeneratedGetMemberValueColor(object o)
		{
			return ((Clan)o).Color;
		}

		internal static object AutoGeneratedGetMemberValueColor2(object o)
		{
			return ((Clan)o).Color2;
		}

		internal static object AutoGeneratedGetMemberValueAlternativeColor(object o)
		{
			return ((Clan)o).AlternativeColor;
		}

		internal static object AutoGeneratedGetMemberValueAlternativeColor2(object o)
		{
			return ((Clan)o).AlternativeColor2;
		}

		internal static object AutoGeneratedGetMemberValueBannerBackgroundColorPrimary(object o)
		{
			return ((Clan)o).BannerBackgroundColorPrimary;
		}

		internal static object AutoGeneratedGetMemberValueBannerBackgroundColorSecondary(object o)
		{
			return ((Clan)o).BannerBackgroundColorSecondary;
		}

		internal static object AutoGeneratedGetMemberValueBannerIconColor(object o)
		{
			return ((Clan)o).BannerIconColor;
		}

		internal static object AutoGeneratedGetMemberValueIsBanditFaction(object o)
		{
			return ((Clan)o).IsBanditFaction;
		}

		internal static object AutoGeneratedGetMemberValueRenown(object o)
		{
			return ((Clan)o).Renown;
		}

		internal static object AutoGeneratedGetMemberValueMainHeroCrimeRating(object o)
		{
			return ((Clan)o).MainHeroCrimeRating;
		}

		internal static object AutoGeneratedGetMemberValueNotAttackableByPlayerUntilTime(object o)
		{
			return ((Clan)o).NotAttackableByPlayerUntilTime;
		}

		internal static object AutoGeneratedGetMemberValue_defaultPartyTemplate(object o)
		{
			return ((Clan)o)._defaultPartyTemplate;
		}

		internal static object AutoGeneratedGetMemberValue_isEliminated(object o)
		{
			return ((Clan)o)._isEliminated;
		}

		internal static object AutoGeneratedGetMemberValue_minorFactionCharacterTemplates(object o)
		{
			return ((Clan)o)._minorFactionCharacterTemplates;
		}

		internal static object AutoGeneratedGetMemberValue_kingdom(object o)
		{
			return ((Clan)o)._kingdom;
		}

		internal static object AutoGeneratedGetMemberValue_influence(object o)
		{
			return ((Clan)o)._influence;
		}

		internal static object AutoGeneratedGetMemberValue_basicTroop(object o)
		{
			return ((Clan)o)._basicTroop;
		}

		internal static object AutoGeneratedGetMemberValue_leader(object o)
		{
			return ((Clan)o)._leader;
		}

		internal static object AutoGeneratedGetMemberValue_banner(object o)
		{
			return ((Clan)o)._banner;
		}

		internal static object AutoGeneratedGetMemberValue_tier(object o)
		{
			return ((Clan)o)._tier;
		}

		internal static object AutoGeneratedGetMemberValue_aggressiveness(object o)
		{
			return ((Clan)o)._aggressiveness;
		}

		internal static object AutoGeneratedGetMemberValue_tributeWallet(object o)
		{
			return ((Clan)o)._tributeWallet;
		}

		internal static object AutoGeneratedGetMemberValue_home(object o)
		{
			return ((Clan)o)._home;
		}

		internal static object AutoGeneratedGetMemberValue_clanDebtToKingdom(object o)
		{
			return ((Clan)o)._clanDebtToKingdom;
		}

		[SaveableProperty(51)]
		public TextObject Name { get; private set; }

		[SaveableProperty(52)]
		public TextObject InformalName { get; private set; }

		public TextObject FullName
		{
			get
			{
				TextObject textObject = TextObject.Empty;
				int minClanTier = Campaign.Current.Models.ClanTierModel.MinClanTier;
				if (minClanTier >= this.Tier)
				{
					textObject = new TextObject("{=aZne44IB}{CLAN_NAME} Family", null);
				}
				else if (minClanTier + 1 == this.Tier)
				{
					textObject = new TextObject("{=ztXDDMSI}{CLAN_NAME} Clan", null);
				}
				else if (minClanTier + 2 == this.Tier)
				{
					textObject = new TextObject("{=UnjmmLFm}{CLAN_NAME} Noble Clan", null);
				}
				else
				{
					textObject = new TextObject("{=iOrtiVLt}House of {CLAN_NAME}", null);
				}
				textObject.SetTextVariable("CLAN_NAME", this.Name);
				return textObject;
			}
		}

		[SaveableProperty(53)]
		public CultureObject Culture { get; set; }

		[SaveableProperty(55)]
		public CampaignTime LastFactionChangeTime { get; set; }

		public PartyTemplateObject DefaultPartyTemplate
		{
			get
			{
				if (this._defaultPartyTemplate != null)
				{
					return this._defaultPartyTemplate;
				}
				return this.Culture.DefaultPartyTemplate;
			}
		}

		[SaveableProperty(58)]
		public int AutoRecruitmentExpenses { get; set; }

		[SaveableProperty(56)]
		public TextObject EncyclopediaText { get; private set; }

		[SaveableProperty(140)]
		public bool IsNoble { get; set; }

		public bool IsEliminated
		{
			get
			{
				return this._isEliminated;
			}
		}

		public IList<CharacterObject> MinorFactionCharacterTemplates
		{
			get
			{
				return this._minorFactionCharacterTemplates;
			}
		}

		public string EncyclopediaLink
		{
			get
			{
				return Campaign.Current.EncyclopediaManager.GetIdentifier(typeof(Clan)) + "-" + base.StringId;
			}
		}

		public bool IsNeutralClan
		{
			get
			{
				return this == CampaignData.NeutralFaction;
			}
		}

		public TextObject EncyclopediaLinkWithName
		{
			get
			{
				return HyperlinkTexts.GetClanHyperlinkText(this.EncyclopediaLink, this.Name);
			}
		}

		public Kingdom Kingdom
		{
			get
			{
				return this._kingdom;
			}
			set
			{
				if (this._kingdom != value)
				{
					this.SetKingdomInternal(value);
				}
			}
		}

		public IEnumerable<CharacterObject> DungeonPrisonersOfClan
		{
			get
			{
				foreach (Town town in this.Fiefs)
				{
					foreach (CharacterObject characterObject in town.Settlement.Party.PrisonerHeroes)
					{
						yield return characterObject;
					}
					IEnumerator<CharacterObject> enumerator2 = null;
				}
				List<Town>.Enumerator enumerator = default(List<Town>.Enumerator);
				yield break;
				yield break;
			}
		}

		public MBReadOnlyList<Town> Fiefs
		{
			get
			{
				return this._fiefsCache;
			}
		}

		public MBReadOnlyList<Village> Villages
		{
			get
			{
				return this._villagesCache;
			}
		}

		public MBReadOnlyList<Settlement> Settlements
		{
			get
			{
				return this._settlementsCache;
			}
		}

		public MBReadOnlyList<Hero> SupporterNotables
		{
			get
			{
				return this._supporterNotablesCache;
			}
		}

		public MBReadOnlyList<Hero> Lords
		{
			get
			{
				return this._lordsCache;
			}
		}

		public MBReadOnlyList<Hero> Heroes
		{
			get
			{
				return this._heroesCache;
			}
		}

		public MBReadOnlyList<Hero> Companions
		{
			get
			{
				return this._companionsCache;
			}
		}

		public MBReadOnlyList<WarPartyComponent> WarPartyComponents
		{
			get
			{
				return this._warPartyComponentsCache;
			}
		}

		public float Influence
		{
			get
			{
				return this._influence;
			}
			set
			{
				if (value < this._influence && this.Leader != null)
				{
					SkillLevelingManager.OnInfluenceSpent(this.Leader, value - this._influence);
				}
				this._influence = value;
			}
		}

		public ExplainedNumber InfluenceChangeExplained
		{
			get
			{
				return Campaign.Current.Models.ClanPoliticsModel.CalculateInfluenceChange(this, true);
			}
		}

		[CachedData]
		public float TotalStrength { get; private set; }

		[SaveableProperty(65)]
		public int MercenaryAwardMultiplier { get; set; }

		public bool IsMapFaction
		{
			get
			{
				return this._kingdom == null;
			}
		}

		[SaveableProperty(66)]
		public uint LabelColor { get; set; }

		[SaveableProperty(67)]
		public Vec2 InitialPosition { get; set; }

		[SaveableProperty(68)]
		public bool IsRebelClan { get; set; }

		[SaveableProperty(69)]
		public bool IsMinorFaction { get; private set; }

		[SaveableProperty(70)]
		public bool IsOutlaw { get; private set; }

		[SaveableProperty(71)]
		public bool IsNomad { get; private set; }

		[SaveableProperty(72)]
		public bool IsMafia { get; private set; }

		[SaveableProperty(73)]
		public bool IsClanTypeMercenary { get; private set; }

		[SaveableProperty(74)]
		public bool IsSect { get; private set; }

		[SaveableProperty(75)]
		public bool IsUnderMercenaryService { get; private set; }

		[SaveableProperty(76)]
		public uint Color { get; set; }

		[SaveableProperty(77)]
		public uint Color2 { get; set; }

		[SaveableProperty(78)]
		public uint AlternativeColor { get; set; }

		[SaveableProperty(79)]
		public uint AlternativeColor2 { get; set; }

		[SaveableProperty(111)]
		private uint BannerBackgroundColorPrimary { get; set; }

		[SaveableProperty(112)]
		private uint BannerBackgroundColorSecondary { get; set; }

		[SaveableProperty(113)]
		private uint BannerIconColor { get; set; }

		[CachedData]
		private bool _midPointCalculated { get; set; }

		public CharacterObject BasicTroop
		{
			get
			{
				return this._basicTroop ?? this.Culture.BasicTroop;
			}
			set
			{
				this._basicTroop = value;
			}
		}

		public static Clan PlayerClan
		{
			get
			{
				return Campaign.Current.PlayerDefaultFaction;
			}
		}

		public Hero Leader
		{
			get
			{
				return this._leader;
			}
		}

		public int Gold
		{
			get
			{
				Hero leader = this.Leader;
				if (leader == null)
				{
					return 0;
				}
				return leader.Gold;
			}
		}

		public Banner Banner
		{
			get
			{
				if (this.Kingdom == null || this.Kingdom.RulingClan != this)
				{
					return this._banner;
				}
				return this.Kingdom.Banner;
			}
			private set
			{
				this._banner = value;
			}
		}

		[SaveableProperty(85)]
		public bool IsBanditFaction { get; private set; }

		bool IFaction.IsKingdomFaction
		{
			get
			{
				return false;
			}
		}

		public bool IsClan
		{
			get
			{
				return true;
			}
		}

		[SaveableProperty(88)]
		public float Renown { get; set; }

		[SaveableProperty(89)]
		public float MainHeroCrimeRating { get; set; }

		public float DailyCrimeRatingChange
		{
			get
			{
				return Campaign.Current.Models.CrimeModel.GetDailyCrimeRatingChange(this, false).ResultNumber;
			}
		}

		public ExplainedNumber DailyCrimeRatingChangeExplained
		{
			get
			{
				return Campaign.Current.Models.CrimeModel.GetDailyCrimeRatingChange(this, true);
			}
		}

		public int Tier
		{
			get
			{
				return this._tier;
			}
			private set
			{
				int minClanTier = Campaign.Current.Models.ClanTierModel.MinClanTier;
				int maxClanTier = Campaign.Current.Models.ClanTierModel.MaxClanTier;
				if (value > maxClanTier)
				{
					value = maxClanTier;
				}
				else if (value < minClanTier)
				{
					value = minClanTier;
				}
				this._tier = value;
			}
		}

		public IFaction MapFaction
		{
			get
			{
				if (this.Kingdom != null)
				{
					return this.Kingdom;
				}
				return this;
			}
		}

		[SaveableProperty(100)]
		public CampaignTime NotAttackableByPlayerUntilTime { get; set; }

		public float Aggressiveness
		{
			get
			{
				return this._aggressiveness;
			}
			internal set
			{
				this._aggressiveness = MathF.Clamp(value, 0f, 100f);
			}
		}

		public int TributeWallet
		{
			get
			{
				return this._tributeWallet;
			}
			set
			{
				this._tributeWallet = value;
			}
		}

		public Settlement HomeSettlement
		{
			get
			{
				return this._home;
			}
			private set
			{
				this._home = value;
			}
		}

		public int DebtToKingdom
		{
			get
			{
				return this._clanDebtToKingdom;
			}
			set
			{
				this._clanDebtToKingdom = value;
			}
		}

		internal void UpdateStrength()
		{
			this.TotalStrength = 0f;
			foreach (WarPartyComponent warPartyComponent in this._warPartyComponentsCache)
			{
				this.TotalStrength += warPartyComponent.MobileParty.Party.TotalStrength;
			}
			foreach (Town town in this.Fiefs)
			{
				if (town.GarrisonParty != null)
				{
					this.TotalStrength += town.GarrisonParty.Party.TotalStrength;
				}
			}
		}

		public IEnumerable<StanceLink> Stances
		{
			get
			{
				return this._stances;
			}
		}

		public int RenownRequirementForNextTier
		{
			get
			{
				return Campaign.Current.Models.ClanTierModel.GetRequiredRenownForTier(this.Tier + 1);
			}
		}

		public int CompanionLimit
		{
			get
			{
				return Campaign.Current.Models.ClanTierModel.GetCompanionLimit(this);
			}
		}

		public float DistanceToClosestNonAllyFortification
		{
			get
			{
				if (this._distanceToClosestNonAllyFortificationCacheDirty)
				{
					this._distanceToClosestNonAllyFortificationCache = FactionHelper.GetDistanceToClosestNonAllyFortificationOfFaction(this);
					this._distanceToClosestNonAllyFortificationCacheDirty = false;
				}
				return this._distanceToClosestNonAllyFortificationCache;
			}
		}

		public int CommanderLimit
		{
			get
			{
				return Campaign.Current.Models.ClanTierModel.GetPartyLimitForTier(this, this.Tier);
			}
		}

		public bool IsAtWarWith(IFaction other)
		{
			return FactionManager.IsAtWarAgainstFaction(this, other);
		}

		private void UpdateFactionMidSettlement()
		{
			this._clanMidSettlement = FactionHelper.FactionMidSettlement(this);
			this._midPointCalculated = this._clanMidSettlement != null;
		}

		public Settlement FactionMidSettlement
		{
			get
			{
				if (!this._midPointCalculated)
				{
					this.UpdateFactionMidSettlement();
				}
				return this._clanMidSettlement;
			}
		}

		private void InitMembers()
		{
			this._companionsCache = new MBList<Hero>();
			this._warPartyComponentsCache = new MBList<WarPartyComponent>();
			this._stances = new List<StanceLink>();
			this._supporterNotablesCache = new MBList<Hero>();
			this._lordsCache = new MBList<Hero>();
			this._heroesCache = new MBList<Hero>();
			this._villagesCache = new MBList<Village>();
			this._fiefsCache = new MBList<Town>();
			this._settlementsCache = new MBList<Settlement>();
		}

		public Clan()
		{
			this.InitMembers();
			this._isEliminated = false;
			this.NotAttackableByPlayerUntilTime = CampaignTime.Zero;
		}

		public static Clan CreateClan(string stringID)
		{
			stringID = Campaign.Current.CampaignObjectManager.FindNextUniqueStringId<Clan>(stringID);
			Clan clan = new Clan();
			clan.StringId = stringID;
			Campaign.Current.CampaignObjectManager.AddClan(clan);
			return clan;
		}

		public void InitializeClan(TextObject name, TextObject informalName, CultureObject culture, Banner banner, Vec2 initialPosition = default(Vec2), bool isDeserialize = false)
		{
			this.ChangeClanName(name, informalName);
			this.Culture = culture;
			this.Banner = banner;
			if (!isDeserialize)
			{
				this.ValidateInitialPosition(initialPosition);
			}
		}

		protected override void PreAfterLoad()
		{
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("e1.8.0.0", 21456))
			{
				Hero leader = this.Leader;
				this.IsNoble = leader != null && leader.IsNobleForOldSaves;
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0", 21456) && this.Leader != null && this.Leader.Clan != this)
			{
				ChangeClanLeaderAction.ApplyWithoutSelectedNewLeader(this);
			}
			Kingdom kingdom = this._kingdom;
			if (kingdom != null)
			{
				kingdom.AddClanInternal(this);
			}
			this._midPointCalculated = this._clanMidSettlement != null;
			if (this.HomeSettlement == null && !this.IsBanditFaction && !this.IsNeutralClan)
			{
				this.UpdateHomeSettlement(null);
			}
			this.ValidateInitialPosition(this.InitialPosition);
			this.UpdateBannerColorsAccordingToKingdom();
		}

		protected override void AfterLoad()
		{
			this.UpdateStrength();
			if (MBSaveLoad.LastLoadedGameVersion <= ApplicationVersion.FromString("e1.8.0.0", 21456) && this.Kingdom != null)
			{
				FactionHelper.AdjustFactionStancesForClanJoiningKingdom(this, this.Kingdom);
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.1.3", 21456) && this.Kingdom == null && this.IsUnderMercenaryService)
			{
				this.EndMercenaryService(true);
			}
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.SetLeader(objectManager.ReadObjectReferenceFromXml("owner", typeof(Hero), node) as Hero);
			this.Kingdom = (Kingdom)objectManager.ReadObjectReferenceFromXml("super_faction", typeof(Kingdom), node);
			this.Tier = ((node.Attributes["tier"] == null) ? 1 : Convert.ToInt32(node.Attributes["tier"].Value));
			this.Renown = (float)Campaign.Current.Models.ClanTierModel.CalculateInitialRenown(this);
			this.InitializeClan(new TextObject(node.Attributes["name"].Value, null), (node.Attributes["short_name"] != null) ? new TextObject(node.Attributes["short_name"].Value, null) : new TextObject(node.Attributes["name"].Value, null), (CultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(CultureObject), node), null, default(Vec2), true);
			XmlNode xmlNode = node.Attributes["is_noble"];
			if (xmlNode != null)
			{
				this.IsNoble = Convert.ToBoolean(xmlNode.InnerText);
			}
			this.LabelColor = ((node.Attributes["label_color"] == null) ? 0U : Convert.ToUInt32(node.Attributes["label_color"].Value, 16));
			this.Color = ((node.Attributes["color"] == null) ? 4291609515U : Convert.ToUInt32(node.Attributes["color"].Value, 16));
			this.Color2 = ((node.Attributes["color2"] == null) ? 4291609515U : Convert.ToUInt32(node.Attributes["color2"].Value, 16));
			this.AlternativeColor = ((node.Attributes["alternative_color"] == null) ? 4291609515U : Convert.ToUInt32(node.Attributes["alternative_color"].Value, 16));
			this.AlternativeColor2 = ((node.Attributes["alternative_color2"] == null) ? 4291609515U : Convert.ToUInt32(node.Attributes["alternative_color2"].Value, 16));
			if (node.Attributes["initial_posX"] != null && node.Attributes["initial_posY"] != null)
			{
				this.InitialPosition = new Vec2((float)Convert.ToDouble(node.Attributes["initial_posX"].Value), (float)Convert.ToDouble(node.Attributes["initial_posY"].Value));
			}
			this.IsBanditFaction = node.Attributes["is_bandit"] != null && Convert.ToBoolean(node.Attributes["is_bandit"].Value);
			this.IsMinorFaction = node.Attributes["is_minor_faction"] != null && Convert.ToBoolean(node.Attributes["is_minor_faction"].Value);
			this.IsOutlaw = node.Attributes["is_outlaw"] != null && Convert.ToBoolean(node.Attributes["is_outlaw"].Value);
			this.IsSect = node.Attributes["is_sect"] != null && Convert.ToBoolean(node.Attributes["is_sect"].Value);
			this.IsMafia = node.Attributes["is_mafia"] != null && Convert.ToBoolean(node.Attributes["is_mafia"].Value);
			this.IsClanTypeMercenary = node.Attributes["is_clan_type_mercenary"] != null && Convert.ToBoolean(node.Attributes["is_clan_type_mercenary"].Value);
			this.IsNomad = node.Attributes["is_nomad"] != null && Convert.ToBoolean(node.Attributes["is_nomad"].Value);
			this._defaultPartyTemplate = (PartyTemplateObject)objectManager.ReadObjectReferenceFromXml("default_party_template", typeof(PartyTemplateObject), node);
			this.EncyclopediaText = ((node.Attributes["text"] != null) ? new TextObject(node.Attributes["text"].Value, null) : TextObject.Empty);
			if (node.Attributes["banner_key"] != null)
			{
				this._banner = new Banner();
				this._banner.Deserialize(node.Attributes["banner_key"].Value);
			}
			else
			{
				this._banner = Banner.CreateRandomClanBanner(base.StringId.GetDeterministicHashCode());
			}
			this.BannerBackgroundColorPrimary = this._banner.GetPrimaryColor();
			this.BannerBackgroundColorSecondary = this._banner.GetSecondaryColor();
			this.BannerIconColor = this._banner.GetFirstIconColor();
			this.UpdateBannerColorsAccordingToKingdom();
			this._minorFactionCharacterTemplates = new List<CharacterObject>();
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode2 = (XmlNode)obj;
				if (xmlNode2.Name == "minor_faction_character_templates")
				{
					using (IEnumerator enumerator2 = xmlNode2.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj2 = enumerator2.Current;
							XmlNode xmlNode3 = (XmlNode)obj2;
							CharacterObject characterObject = objectManager.ReadObjectReferenceFromXml("id", typeof(CharacterObject), xmlNode3) as CharacterObject;
							this._minorFactionCharacterTemplates.Add(characterObject);
						}
						continue;
					}
				}
				if (xmlNode2.Name == "relationship")
				{
					IFaction faction;
					if (xmlNode2.Attributes["clan"] != null)
					{
						faction = (Clan)objectManager.ReadObjectReferenceFromXml("clan", typeof(Clan), xmlNode2);
					}
					else
					{
						faction = (Kingdom)objectManager.ReadObjectReferenceFromXml("kingdom", typeof(Kingdom), xmlNode2);
					}
					int num = Convert.ToInt32(xmlNode2.Attributes["value"].InnerText);
					if (num > 0)
					{
						FactionManager.DeclareAlliance(this, faction);
					}
					else if (num < 0)
					{
						FactionManager.DeclareWar(this, faction, false);
					}
					else
					{
						FactionManager.SetNeutral(this, faction);
					}
				}
			}
		}

		protected override void OnBeforeLoad()
		{
		}

		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this.InitMembers();
		}

		public void OnGameCreated()
		{
			this.ValidateInitialPosition(this.InitialPosition);
		}

		public int GetRelationWithClan(Clan other)
		{
			if (this.Leader != null && other.Leader != null)
			{
				return this.Leader.GetRelation(other.Leader);
			}
			return 0;
		}

		public void SetLeader(Hero leader)
		{
			this._leader = leader;
			if (leader != null)
			{
				leader.Clan = this;
			}
		}

		private float FindSettlementScoreForBeingHomeSettlement(Settlement settlement)
		{
			int num = (int)settlement.Prosperity;
			foreach (Village village in settlement.BoundVillages)
			{
				num += (int)village.Settlement.Prosperity;
			}
			float num2 = (settlement.IsTown ? 1f : 0.5f);
			float num3 = MathF.Sqrt(1000f + (float)num) / 50f;
			float num4 = ((this.HomeSettlement == settlement) ? 1f : 0.65f);
			float num5 = ((settlement.Culture == this.Culture) ? 1f : 0.25f);
			float num6 = ((settlement.OwnerClan.Culture == this.Culture) ? 1f : 0.85f);
			float num7 = ((settlement.OwnerClan == this) ? 1f : 0.1f);
			float num8 = ((settlement.MapFaction == this.MapFaction) ? 1f : 0.1f);
			float num9;
			if (this.MapFaction.FactionMidSettlement != null)
			{
				num9 = Campaign.Current.Models.MapDistanceModel.GetDistance(this.MapFaction.FactionMidSettlement, settlement);
			}
			else
			{
				num9 = this.InitialPosition.Distance(settlement.GatePosition);
			}
			float num10 = 1f - num9 / Campaign.MaximumDistanceBetweenTwoSettlements;
			num10 *= num10;
			return num2 * num3 * num5 * num6 * num8 * num7 * num10 * num4;
		}

		public void UpdateHomeSettlement(Settlement updatedSettlement)
		{
			Settlement settlement = this.HomeSettlement;
			if (this.HomeSettlement == null || updatedSettlement == null || (this.HomeSettlement == updatedSettlement && updatedSettlement.OwnerClan != this))
			{
				float num = 0f;
				foreach (Settlement settlement2 in Settlement.All)
				{
					if (settlement2.IsFortification)
					{
						float num2 = this.FindSettlementScoreForBeingHomeSettlement(settlement2);
						if (num2 > num)
						{
							settlement = settlement2;
							num = num2;
						}
					}
				}
			}
			if (settlement != this.HomeSettlement)
			{
				this.HomeSettlement = settlement;
				foreach (Hero hero in this.Heroes)
				{
					hero.UpdateHomeSettlement();
				}
			}
		}

		private void ValidateInitialPosition(Vec2 initialPosition)
		{
			if (initialPosition.IsValid && this.InitialPosition.IsNonZero())
			{
				this.InitialPosition = initialPosition;
				return;
			}
			Vec2 vec;
			if (this.Settlements.Count > 0)
			{
				vec = this.Settlements.GetRandomElement<Settlement>().GatePosition;
			}
			else
			{
				Settlement randomElementWithPredicate = Settlement.All.GetRandomElementWithPredicate((Settlement x) => x.Culture == this.Culture);
				vec = ((randomElementWithPredicate != null) ? randomElementWithPredicate.GatePosition : Settlement.All.GetRandomElement<Settlement>().GatePosition);
			}
			this.InitialPosition = MobilePartyHelper.FindReachablePointAroundPosition(vec, 150f, 0f);
		}

		public override TextObject GetName()
		{
			return this.Name;
		}

		public void ChangeClanName(TextObject name, TextObject informalName)
		{
			this.Name = name;
			this.InformalName = informalName;
		}

		public override string ToString()
		{
			return string.Concat(new object[] { "(", base.Id, ") ", this.Name });
		}

		public StanceLink GetStanceWith(IFaction other)
		{
			return FactionManager.Instance.GetStanceLinkInternal(this, other);
		}

		internal void AddStanceInternal(StanceLink stanceLink)
		{
			this._stances.Add(stanceLink);
		}

		internal void RemoveStanceInternal(StanceLink stanceLink)
		{
			this._stances.Remove(stanceLink);
		}

		private void SetKingdomInternal(Kingdom value)
		{
			if (this.Kingdom != null)
			{
				this.LeaveKingdomInternal();
			}
			this._kingdom = value;
			if (this.Kingdom != null)
			{
				this.EnterKingdomInternal();
			}
			this.UpdateBannerColorsAccordingToKingdom();
			this.LastFactionChangeTime = CampaignTime.Now;
			this.ConsiderSiegesAndMapEvents(this._kingdom);
		}

		public void ConsiderSiegesAndMapEvents(IFaction factionToConsiderAgainst)
		{
			foreach (WarPartyComponent warPartyComponent in this._warPartyComponentsCache.ToList<WarPartyComponent>())
			{
				warPartyComponent.MobileParty.ConsiderMapEventsAndSiegesInternal(factionToConsiderAgainst);
			}
			foreach (Town town in this.Fiefs)
			{
				town.ConsiderSiegesAndMapEventsInternal(factionToConsiderAgainst);
			}
		}

		private void EnterKingdomInternal()
		{
			this._kingdom.AddClanInternal(this);
			foreach (Hero hero in this.Heroes)
			{
				this._kingdom.OnHeroAdded(hero);
			}
			foreach (Town town in this.Fiefs)
			{
				this._kingdom.OnFortificationAdded(town);
			}
			foreach (WarPartyComponent warPartyComponent in this.WarPartyComponents)
			{
				this._kingdom.OnWarPartyAdded(warPartyComponent);
			}
		}

		private void LeaveKingdomInternal()
		{
			ChangeClanInfluenceAction.Apply(this, -this.Influence);
			this._kingdom.RemoveClanInternal(this);
			foreach (Hero hero in this.Heroes)
			{
				this._kingdom.OnHeroRemoved(hero);
			}
			foreach (Town town in this.Fiefs)
			{
				this._kingdom.OnFiefRemoved(town);
			}
			List<WarPartyComponent> list = this.WarPartyComponents.ToListQ<WarPartyComponent>();
			for (int i = list.Count<WarPartyComponent>() - 1; i >= 0; i--)
			{
				if (list[i].MobileParty.Army != null)
				{
					list[i].MobileParty.Army = null;
				}
				this._kingdom.OnWarPartyRemoved(list[i]);
			}
		}

		public void ClanLeaveKingdom(bool giveBackFiefs = false)
		{
			ChangeClanInfluenceAction.Apply(this, -this.Influence);
			if (this.Kingdom != null)
			{
				foreach (Settlement settlement in Campaign.Current.Settlements)
				{
					if (settlement.IsTown && settlement.OwnerClan == this)
					{
						SettlementHelper.TakeEnemyVillagersOutsideSettlements(settlement);
					}
				}
			}
			this.LastFactionChangeTime = CampaignTime.Now;
			this.Kingdom = null;
		}

		public float CalculateTotalSettlementBaseValue()
		{
			float num = 0f;
			foreach (Town town in this.Fiefs)
			{
				num += Campaign.Current.Models.SettlementValueModel.CalculateSettlementBaseValue(town.Owner.Settlement);
			}
			return num;
		}

		public void StartMercenaryService()
		{
			this.IsUnderMercenaryService = true;
		}

		private int DistanceOfTwoValues(int x, int y)
		{
			int num = ((x < 50) ? x : (100 - x));
			int num2 = ((y < 50) ? y : (100 - y));
			return MathF.Min(num + num2, x - y);
		}

		public static Clan FindFirst(Predicate<Clan> predicate)
		{
			return Clan.All.FirstOrDefault((Clan x) => predicate(x));
		}

		public void EndMercenaryService(bool isByLeavingKingdom)
		{
			this.IsUnderMercenaryService = false;
		}

		public static IEnumerable<Clan> FindAll(Predicate<Clan> predicate)
		{
			return Clan.All.Where((Clan x) => predicate(x));
		}

		public static MBReadOnlyList<Clan> All
		{
			get
			{
				return Campaign.Current.Clans;
			}
		}

		public static IEnumerable<Clan> NonBanditFactions
		{
			get
			{
				foreach (Clan clan in Campaign.Current.Clans)
				{
					if (!clan.IsBanditFaction && CampaignData.NeutralFaction != clan)
					{
						yield return clan;
					}
				}
				List<Clan>.Enumerator enumerator = default(List<Clan>.Enumerator);
				yield break;
				yield break;
			}
		}

		public float CalculateTotalSettlementValueForFaction(Kingdom kingdom)
		{
			float num = 0f;
			foreach (Town town in this.Fiefs)
			{
				num += Campaign.Current.Models.SettlementValueModel.CalculateSettlementValueForFaction(town.Owner.Settlement, kingdom);
			}
			return num;
		}

		public static IEnumerable<Clan> BanditFactions
		{
			get
			{
				foreach (Clan clan in Campaign.Current.Clans)
				{
					if (clan.IsBanditFaction)
					{
						yield return clan;
					}
				}
				List<Clan>.Enumerator enumerator = default(List<Clan>.Enumerator);
				yield break;
				yield break;
			}
		}

		internal void OnFortificationAdded(Town settlement)
		{
			this._fiefsCache.Add(settlement);
			this._settlementsCache.Add(settlement.Settlement);
			foreach (Village village in settlement.Settlement.BoundVillages)
			{
				this.OnBoundVillageAddedInternal(village);
			}
			this._midPointCalculated = false;
			this._distanceToClosestNonAllyFortificationCacheDirty = true;
			if (this._kingdom != null)
			{
				this._kingdom._midPointCalculated = false;
				this._kingdom._distanceToClosestNonAllyFortificationCacheDirty = true;
				this._kingdom.OnFortificationAdded(settlement);
			}
		}

		internal void OnFortificationRemoved(Town settlement)
		{
			this._fiefsCache.Remove(settlement);
			this._settlementsCache.Remove(settlement.Settlement);
			foreach (Village village in settlement.Settlement.BoundVillages)
			{
				this._villagesCache.Remove(village);
				this._settlementsCache.Remove(village.Settlement);
			}
			this._midPointCalculated = false;
			this._distanceToClosestNonAllyFortificationCacheDirty = true;
			if (this._kingdom != null)
			{
				this._kingdom._midPointCalculated = false;
				this._kingdom._distanceToClosestNonAllyFortificationCacheDirty = true;
				this._kingdom.OnFiefRemoved(settlement);
			}
		}

		public void OnBoundVillageAdded(Village village)
		{
			this.OnBoundVillageAddedInternal(village);
			if (this._kingdom != null)
			{
				this._kingdom.OnBoundVillageAdded(village);
			}
		}

		private void OnBoundVillageAddedInternal(Village village)
		{
			this._villagesCache.Add(village);
			this._settlementsCache.Add(village.Settlement);
		}

		internal void OnLordAdded(Hero lord)
		{
			this._lordsCache.Add(lord);
			this.OnHeroAdded(lord);
		}

		internal void OnLordRemoved(Hero lord)
		{
			this._lordsCache.Remove(lord);
			this.OnHeroRemoved(lord);
		}

		internal void OnCompanionAdded(Hero companion)
		{
			this._companionsCache.Add(companion);
			this.OnHeroAdded(companion);
		}

		internal void OnCompanionRemoved(Hero companion)
		{
			this._companionsCache.Remove(companion);
			this.OnHeroRemoved(companion);
		}

		private void OnHeroAdded(Hero hero)
		{
			this._heroesCache.Add(hero);
			if (this._kingdom != null)
			{
				this._kingdom.OnHeroAdded(hero);
			}
		}

		private void OnHeroRemoved(Hero hero)
		{
			this._heroesCache.Remove(hero);
			if (this._kingdom != null)
			{
				this._kingdom.OnHeroRemoved(hero);
			}
		}

		internal void OnWarPartyAdded(WarPartyComponent warPartyComponent)
		{
			this._warPartyComponentsCache.Add(warPartyComponent);
			if (this._kingdom != null)
			{
				this._kingdom.OnWarPartyAdded(warPartyComponent);
			}
		}

		internal void OnWarPartyRemoved(WarPartyComponent warPartyComponent)
		{
			this._warPartyComponentsCache.Remove(warPartyComponent);
			if (this._kingdom != null)
			{
				this._kingdom.OnWarPartyRemoved(warPartyComponent);
			}
		}

		internal void OnSupporterNotableAdded(Hero hero)
		{
			this._supporterNotablesCache.Add(hero);
		}

		internal void OnSupporterNotableRemoved(Hero hero)
		{
			this._supporterNotablesCache.Remove(hero);
		}

		public void AddRenown(float value, bool shouldNotify = true)
		{
			if (value > 0f)
			{
				this.Renown += value;
				int num = Campaign.Current.Models.ClanTierModel.CalculateTier(this);
				if (num > this.Tier)
				{
					this.Tier = num;
					CampaignEventDispatcher.Instance.OnClanTierChanged(this, shouldNotify);
				}
			}
		}

		public void ResetClanRenown()
		{
			this.Renown = 0f;
			this.Tier = Campaign.Current.Models.ClanTierModel.CalculateTier(this);
			CampaignEventDispatcher.Instance.OnClanTierChanged(this, false);
		}

		public void OnSupportedByClan(Clan supporterClan)
		{
			DiplomacyModel diplomacyModel = Campaign.Current.Models.DiplomacyModel;
			int influenceCostOfSupportingClan = diplomacyModel.GetInfluenceCostOfSupportingClan();
			if (supporterClan.Influence >= (float)influenceCostOfSupportingClan)
			{
				int influenceValueOfSupportingClan = diplomacyModel.GetInfluenceValueOfSupportingClan();
				int relationValueOfSupportingClan = diplomacyModel.GetRelationValueOfSupportingClan();
				ChangeClanInfluenceAction.Apply(supporterClan, (float)(-(float)influenceCostOfSupportingClan));
				ChangeClanInfluenceAction.Apply(this, (float)influenceValueOfSupportingClan);
				ChangeRelationAction.ApplyRelationChangeBetweenHeroes(supporterClan.Leader, this.Leader, relationValueOfSupportingClan, true);
			}
		}

		public static Clan CreateSettlementRebelClan(Settlement settlement, Hero owner, int iconMeshId = -1)
		{
			Clan clan = Clan.CreateClan(settlement.StringId + "_rebel_clan");
			TextObject textObject = new TextObject("{=2LIV2cy7}{SETTLEMENT}{.o} rebels", null);
			textObject.SetTextVariable("SETTLEMENT", settlement.Name);
			clan.InitializeClan(textObject, textObject, settlement.Culture, Banner.CreateOneColoredBannerWithOneIcon(settlement.MapFaction.Banner.GetFirstIconColor(), settlement.MapFaction.Banner.GetPrimaryColor(), iconMeshId), settlement.GatePosition, false);
			clan.SetLeader(owner);
			clan.LabelColor = settlement.MapFaction.LabelColor;
			clan.Color = settlement.MapFaction.Color2;
			clan.Color2 = settlement.MapFaction.Color;
			clan.IsRebelClan = true;
			clan.Tier = Campaign.Current.Models.ClanTierModel.RebelClanStartingTier;
			clan.BannerBackgroundColorPrimary = settlement.MapFaction.Banner.GetFirstIconColor();
			clan.BannerBackgroundColorSecondary = settlement.MapFaction.Banner.GetFirstIconColor();
			clan.BannerIconColor = settlement.MapFaction.Banner.GetPrimaryColor();
			clan._midPointCalculated = false;
			clan._distanceToClosestNonAllyFortificationCacheDirty = true;
			clan.HomeSettlement = settlement;
			return clan;
		}

		public static Clan CreateCompanionToLordClan(Hero hero, Settlement settlement, TextObject clanName, int newClanIconId)
		{
			Clan clan = Clan.CreateClan(Hero.MainHero.MapFaction.StringId + "_companion_clan");
			clan.InitializeClan(clanName, clanName, settlement.Culture, Banner.CreateOneColoredBannerWithOneIcon(settlement.MapFaction.Banner.GetFirstIconColor(), settlement.MapFaction.Banner.GetPrimaryColor(), newClanIconId), settlement.GatePosition, false);
			clan.Kingdom = Hero.MainHero.Clan.Kingdom;
			clan.Tier = Campaign.Current.Models.ClanTierModel.CompanionToLordClanStartingTier;
			hero.Clan = clan;
			clan.SetLeader(hero);
			clan.IsNoble = true;
			ChangeOwnerOfSettlementAction.ApplyByGift(settlement, hero);
			CampaignEventDispatcher.Instance.OnCompanionClanCreated(clan);
			return clan;
		}

		public MobileParty CreateNewMobileParty(Hero hero)
		{
			MobileParty mobileParty;
			if (hero.CurrentSettlement != null)
			{
				Settlement currentSettlement = hero.CurrentSettlement;
				if (hero.PartyBelongedTo != null && hero.PartyBelongedTo.IsMainParty)
				{
					PartyBase.MainParty.MemberRoster.RemoveTroop(hero.CharacterObject, 1, default(UniqueTroopDescriptor), 0);
				}
				mobileParty = MobilePartyHelper.SpawnLordParty(hero, currentSettlement);
			}
			else
			{
				MobileParty partyBelongedTo = hero.PartyBelongedTo;
				if (partyBelongedTo != null)
				{
					partyBelongedTo.AddElementToMemberRoster(hero.CharacterObject, -1, false);
				}
				mobileParty = MobilePartyHelper.SpawnLordParty(hero, (partyBelongedTo != null) ? partyBelongedTo.Position2D : SettlementHelper.GetBestSettlementToSpawnAround(hero).GatePosition, 5f);
			}
			return mobileParty;
		}

		public MobileParty CreateNewMobilePartyAtPosition(Hero hero, Vec2 spawnPosition)
		{
			return MobilePartyHelper.SpawnLordParty(hero, spawnPosition, 5f);
		}

		public Dictionary<Hero, int> GetHeirApparents()
		{
			Dictionary<Hero, int> dictionary = new Dictionary<Hero, int>();
			int heroComesOfAge = Campaign.Current.Models.AgeModel.HeroComesOfAge;
			Hero leader = this.Leader;
			foreach (Hero hero in this.Heroes)
			{
				if (hero != this.Leader && hero.IsAlive && hero.DeathMark == KillCharacterAction.KillCharacterActionDetail.None && !hero.IsNotSpawned && !hero.IsDisabled && !hero.IsWanderer && !hero.IsNotable && hero.Age >= (float)heroComesOfAge)
				{
					int num = Campaign.Current.Models.HeirSelectionCalculationModel.CalculateHeirSelectionPoint(hero, this.Leader, ref leader);
					dictionary.Add(hero, num);
				}
			}
			if (leader != this.Leader)
			{
				Dictionary<Hero, int> dictionary2 = dictionary;
				Hero hero2 = leader;
				dictionary2[hero2] += Campaign.Current.Models.HeirSelectionCalculationModel.HighestSkillPoint;
			}
			return dictionary;
		}

		private void UpdateBannerColorsAccordingToKingdom()
		{
			if (this.Kingdom != null)
			{
				Banner banner = this.Banner;
				if (banner != null)
				{
					banner.ChangePrimaryColor(this.Kingdom.PrimaryBannerColor);
				}
				Banner banner2 = this.Banner;
				if (banner2 != null)
				{
					banner2.ChangeIconColors(this.Kingdom.SecondaryBannerColor);
				}
				if (this.Kingdom.RulingClan == this)
				{
					Banner banner3 = this._banner;
					if (banner3 != null)
					{
						banner3.ChangePrimaryColor(this.Kingdom.PrimaryBannerColor);
					}
					Banner banner4 = this._banner;
					if (banner4 == null)
					{
						return;
					}
					banner4.ChangeIconColors(this.Kingdom.SecondaryBannerColor);
					return;
				}
			}
			else if (this.BannerBackgroundColorPrimary != 0U || this.BannerBackgroundColorSecondary != 0U || this.BannerIconColor != 0U)
			{
				Banner banner5 = this.Banner;
				if (banner5 != null)
				{
					banner5.ChangeBackgroundColor(this.BannerBackgroundColorPrimary, this.BannerBackgroundColorSecondary);
				}
				Banner banner6 = this.Banner;
				if (banner6 == null)
				{
					return;
				}
				banner6.ChangeIconColors(this.BannerIconColor);
				return;
			}
			else if (this.IsMinorFaction)
			{
				Banner banner7 = this.Banner;
				if (banner7 != null)
				{
					banner7.ChangePrimaryColor(this.Color);
				}
				Banner banner8 = this.Banner;
				if (banner8 == null)
				{
					return;
				}
				banner8.ChangeIconColors((this.Color != this.Color2) ? this.Color2 : uint.MaxValue);
			}
		}

		public void UpdateBannerColor(uint backgroundColor, uint iconColor)
		{
			this.BannerBackgroundColorPrimary = backgroundColor;
			this.BannerBackgroundColorSecondary = backgroundColor;
			this.BannerIconColor = iconColor;
		}

		internal void DeactivateClan()
		{
			this._isEliminated = true;
		}

		string IFaction.get_StringId()
		{
			return base.StringId;
		}

		MBGUID IFaction.get_Id()
		{
			return base.Id;
		}

		[SaveableField(54)]
		private PartyTemplateObject _defaultPartyTemplate;

		[SaveableField(97)]
		private bool _isEliminated;

		[SaveableField(99)]
		private List<CharacterObject> _minorFactionCharacterTemplates;

		[CachedData]
		private MBList<Hero> _supporterNotablesCache;

		[SaveableField(57)]
		private Kingdom _kingdom;

		[CachedData]
		private MBList<Town> _fiefsCache;

		[CachedData]
		private MBList<Village> _villagesCache;

		[CachedData]
		private MBList<Settlement> _settlementsCache;

		[CachedData]
		private MBList<Hero> _lordsCache;

		[CachedData]
		private MBList<Hero> _heroesCache;

		[CachedData]
		private MBList<Hero> _companionsCache;

		[CachedData]
		private MBList<WarPartyComponent> _warPartyComponentsCache;

		[SaveableField(62)]
		private float _influence;

		[CachedData]
		private Settlement _clanMidSettlement;

		[SaveableField(82)]
		private CharacterObject _basicTroop;

		[SaveableField(83)]
		private Hero _leader;

		[SaveableField(84)]
		private Banner _banner;

		[SaveableField(91)]
		private int _tier;

		[SaveableField(120)]
		private float _aggressiveness;

		[SaveableField(130)]
		private int _tributeWallet;

		[SaveableField(95)]
		private Settlement _home;

		[SaveableField(110)]
		private int _clanDebtToKingdom;

		[CachedData]
		private List<StanceLink> _stances;

		[CachedData]
		private float _distanceToClosestNonAllyFortificationCache;

		[CachedData]
		internal bool _distanceToClosestNonAllyFortificationCacheDirty = true;
	}
}
