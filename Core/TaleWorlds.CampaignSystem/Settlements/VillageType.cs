using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	// Token: 0x02000362 RID: 866
	public sealed class VillageType : MBObjectBase
	{
		// Token: 0x0600321E RID: 12830 RVA: 0x000D0737 File Offset: 0x000CE937
		internal static void AutoGeneratedStaticCollectObjectsVillageType(object o, List<object> collectedObjects)
		{
			((VillageType)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600321F RID: 12831 RVA: 0x000D0745 File Offset: 0x000CE945
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x17000C23 RID: 3107
		// (get) Token: 0x06003220 RID: 12832 RVA: 0x000D074E File Offset: 0x000CE94E
		public static MBReadOnlyList<VillageType> All
		{
			get
			{
				return Campaign.Current.AllVillageTypes;
			}
		}

		// Token: 0x17000C24 RID: 3108
		// (get) Token: 0x06003221 RID: 12833 RVA: 0x000D075A File Offset: 0x000CE95A
		public MBReadOnlyList<ValueTuple<ItemObject, float>> Productions
		{
			get
			{
				return this._productions;
			}
		}

		// Token: 0x17000C25 RID: 3109
		// (get) Token: 0x06003222 RID: 12834 RVA: 0x000D0764 File Offset: 0x000CE964
		public ItemObject PrimaryProduction
		{
			get
			{
				ValueTuple<ItemObject, float> valueTuple = this._productions[0];
				float num = 0f;
				foreach (ValueTuple<ItemObject, float> valueTuple2 in this._productions)
				{
					if (valueTuple2.Item2 * (float)valueTuple2.Item1.Value > num)
					{
						valueTuple = valueTuple2;
						num = valueTuple2.Item2 * (float)valueTuple2.Item1.Value;
					}
				}
				return valueTuple.Item1;
			}
		}

		// Token: 0x06003223 RID: 12835 RVA: 0x000D07F8 File Offset: 0x000CE9F8
		public VillageType(string stringId)
			: base(stringId)
		{
		}

		// Token: 0x06003224 RID: 12836 RVA: 0x000D0801 File Offset: 0x000CEA01
		public VillageType Initialize(TextObject shortName, string meshName, string meshNameUnderConstruction, string meshNameBurned, ValueTuple<ItemObject, float>[] productions)
		{
			this.ShortName = shortName;
			this.MeshName = meshName;
			this.MeshNameUnderConstruction = meshNameUnderConstruction;
			this.MeshNameBurned = meshNameBurned;
			this._productions = productions.ToMBList<ValueTuple<ItemObject, float>>();
			base.AfterInitialized();
			return this;
		}

		// Token: 0x06003225 RID: 12837 RVA: 0x000D0834 File Offset: 0x000CEA34
		public override string ToString()
		{
			return this.ShortName.ToString();
		}

		// Token: 0x06003226 RID: 12838 RVA: 0x000D0841 File Offset: 0x000CEA41
		public void AddProductions(IEnumerable<ValueTuple<ItemObject, float>> productions)
		{
			this._productions = productions.Concat(this._productions).ToMBList<ValueTuple<ItemObject, float>>();
		}

		// Token: 0x06003227 RID: 12839 RVA: 0x000D085C File Offset: 0x000CEA5C
		public float GetProductionPerDay(ItemObject item)
		{
			foreach (ValueTuple<ItemObject, float> valueTuple in this._productions)
			{
				if (valueTuple.Item1 == item)
				{
					return valueTuple.Item2;
				}
			}
			return 0f;
		}

		// Token: 0x06003228 RID: 12840 RVA: 0x000D08C4 File Offset: 0x000CEAC4
		public float GetProductionPerDay(ItemCategory itemCategory)
		{
			float num = 0f;
			foreach (ValueTuple<ItemObject, float> valueTuple in this._productions)
			{
				if (valueTuple.Item1 != null && valueTuple.Item1.ItemCategory == itemCategory)
				{
					num += valueTuple.Item2;
				}
			}
			return num;
		}

		// Token: 0x0400104E RID: 4174
		private MBList<ValueTuple<ItemObject, float>> _productions;

		// Token: 0x0400104F RID: 4175
		public TextObject ShortName;

		// Token: 0x04001050 RID: 4176
		public string MeshName;

		// Token: 0x04001051 RID: 4177
		public string MeshNameUnderConstruction;

		// Token: 0x04001052 RID: 4178
		public string MeshNameBurned;
	}
}
