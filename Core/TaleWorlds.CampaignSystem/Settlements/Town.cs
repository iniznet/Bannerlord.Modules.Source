using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements.Buildings;
using TaleWorlds.CampaignSystem.Settlements.Workshops;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	// Token: 0x02000360 RID: 864
	public class Town : Fief
	{
		// Token: 0x06003197 RID: 12695 RVA: 0x000CE95F File Offset: 0x000CCB5F
		internal static void AutoGeneratedStaticCollectObjectsTown(object o, List<object> collectedObjects)
		{
			((Town)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06003198 RID: 12696 RVA: 0x000CE970 File Offset: 0x000CCB70
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Buildings);
			collectedObjects.Add(this.BuildingsInProgress);
			collectedObjects.Add(this._ownerClan);
			collectedObjects.Add(this._marketData);
			collectedObjects.Add(this._governor);
			collectedObjects.Add(this._soldItems);
			collectedObjects.Add(this.Workshops);
			collectedObjects.Add(this.LastCapturedBy);
		}

		// Token: 0x06003199 RID: 12697 RVA: 0x000CE9E4 File Offset: 0x000CCBE4
		internal static object AutoGeneratedGetMemberValueWorkshops(object o)
		{
			return ((Town)o).Workshops;
		}

		// Token: 0x0600319A RID: 12698 RVA: 0x000CE9F1 File Offset: 0x000CCBF1
		internal static object AutoGeneratedGetMemberValueLastCapturedBy(object o)
		{
			return ((Town)o).LastCapturedBy;
		}

		// Token: 0x0600319B RID: 12699 RVA: 0x000CE9FE File Offset: 0x000CCBFE
		internal static object AutoGeneratedGetMemberValueGarrisonAutoRecruitmentIsEnabled(object o)
		{
			return ((Town)o).GarrisonAutoRecruitmentIsEnabled;
		}

		// Token: 0x0600319C RID: 12700 RVA: 0x000CEA10 File Offset: 0x000CCC10
		internal static object AutoGeneratedGetMemberValueBuildings(object o)
		{
			return ((Town)o).Buildings;
		}

		// Token: 0x0600319D RID: 12701 RVA: 0x000CEA1D File Offset: 0x000CCC1D
		internal static object AutoGeneratedGetMemberValueBuildingsInProgress(object o)
		{
			return ((Town)o).BuildingsInProgress;
		}

		// Token: 0x0600319E RID: 12702 RVA: 0x000CEA2A File Offset: 0x000CCC2A
		internal static object AutoGeneratedGetMemberValueBoostBuildingProcess(object o)
		{
			return ((Town)o).BoostBuildingProcess;
		}

		// Token: 0x0600319F RID: 12703 RVA: 0x000CEA3C File Offset: 0x000CCC3C
		internal static object AutoGeneratedGetMemberValueInRebelliousState(object o)
		{
			return ((Town)o).InRebelliousState;
		}

		// Token: 0x060031A0 RID: 12704 RVA: 0x000CEA4E File Offset: 0x000CCC4E
		internal static object AutoGeneratedGetMemberValue_wallLevel(object o)
		{
			return ((Town)o)._wallLevel;
		}

		// Token: 0x060031A1 RID: 12705 RVA: 0x000CEA60 File Offset: 0x000CCC60
		internal static object AutoGeneratedGetMemberValue_ownerClan(object o)
		{
			return ((Town)o)._ownerClan;
		}

		// Token: 0x060031A2 RID: 12706 RVA: 0x000CEA6D File Offset: 0x000CCC6D
		internal static object AutoGeneratedGetMemberValue_security(object o)
		{
			return ((Town)o)._security;
		}

		// Token: 0x060031A3 RID: 12707 RVA: 0x000CEA7F File Offset: 0x000CCC7F
		internal static object AutoGeneratedGetMemberValue_loyalty(object o)
		{
			return ((Town)o)._loyalty;
		}

		// Token: 0x060031A4 RID: 12708 RVA: 0x000CEA91 File Offset: 0x000CCC91
		internal static object AutoGeneratedGetMemberValue_marketData(object o)
		{
			return ((Town)o)._marketData;
		}

		// Token: 0x060031A5 RID: 12709 RVA: 0x000CEA9E File Offset: 0x000CCC9E
		internal static object AutoGeneratedGetMemberValue_tradeTax(object o)
		{
			return ((Town)o)._tradeTax;
		}

		// Token: 0x060031A6 RID: 12710 RVA: 0x000CEAB0 File Offset: 0x000CCCB0
		internal static object AutoGeneratedGetMemberValue_governor(object o)
		{
			return ((Town)o)._governor;
		}

		// Token: 0x060031A7 RID: 12711 RVA: 0x000CEABD File Offset: 0x000CCCBD
		internal static object AutoGeneratedGetMemberValue_soldItems(object o)
		{
			return ((Town)o)._soldItems;
		}

		// Token: 0x060031A8 RID: 12712 RVA: 0x000CEACA File Offset: 0x000CCCCA
		public IEnumerable<PartyBase> GetDefenderParties(MapEvent.BattleTypes battleType)
		{
			yield return base.Settlement.Party;
			foreach (MobileParty mobileParty in base.Settlement.Parties)
			{
				if (mobileParty.MapFaction.IsAtWarWith(base.Settlement.SiegeEvent.BesiegerCamp.BesiegerParty.MapFaction) && mobileParty.IsActive && !mobileParty.IsVillager && !mobileParty.IsCaravan && (!mobileParty.IsMilitia || (!this.InRebelliousState && battleType != MapEvent.BattleTypes.SallyOut)))
				{
					yield return mobileParty.Party;
				}
			}
			List<MobileParty>.Enumerator enumerator = default(List<MobileParty>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x060031A9 RID: 12713 RVA: 0x000CEAE4 File Offset: 0x000CCCE4
		public PartyBase GetNextDefenderParty(ref int partyIndex, MapEvent.BattleTypes battleType)
		{
			partyIndex++;
			if (partyIndex == 0)
			{
				return base.Settlement.Party;
			}
			for (int i = partyIndex - 1; i < base.Settlement.Parties.Count; i++)
			{
				MobileParty mobileParty = base.Settlement.Parties[i];
				if (mobileParty.MapFaction.IsAtWarWith(base.Settlement.SiegeEvent.BesiegerCamp.BesiegerParty.MapFaction) && mobileParty.IsActive && !mobileParty.IsVillager && !mobileParty.IsCaravan && (!mobileParty.IsMilitia || (!this.InRebelliousState && battleType != MapEvent.BattleTypes.SallyOut)))
				{
					partyIndex = i + 1;
					return mobileParty.Party;
				}
			}
			return null;
		}

		// Token: 0x17000BEF RID: 3055
		// (get) Token: 0x060031AA RID: 12714 RVA: 0x000CEB9A File Offset: 0x000CCD9A
		public CultureObject Culture
		{
			get
			{
				return base.Owner.Settlement.Culture;
			}
		}

		// Token: 0x17000BF0 RID: 3056
		// (get) Token: 0x060031AB RID: 12715 RVA: 0x000CEBAC File Offset: 0x000CCDAC
		public float ProsperityChange
		{
			get
			{
				return Campaign.Current.Models.SettlementProsperityModel.CalculateProsperityChange(this, false).ResultNumber;
			}
		}

		// Token: 0x17000BF1 RID: 3057
		// (get) Token: 0x060031AC RID: 12716 RVA: 0x000CEBD7 File Offset: 0x000CCDD7
		public ExplainedNumber ProsperityChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementProsperityModel.CalculateProsperityChange(this, true);
			}
		}

		// Token: 0x17000BF2 RID: 3058
		// (get) Token: 0x060031AD RID: 12717 RVA: 0x000CEBF0 File Offset: 0x000CCDF0
		public int GarrisonChange
		{
			get
			{
				return (int)Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChange(base.Owner.Settlement, false).ResultNumber;
			}
		}

		// Token: 0x17000BF3 RID: 3059
		// (get) Token: 0x060031AE RID: 12718 RVA: 0x000CEC28 File Offset: 0x000CCE28
		public int GarrisonChangeAutoRecruitment
		{
			get
			{
				return (int)Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChangeAutoRecruitment(base.Owner.Settlement, false).ResultNumber;
			}
		}

		// Token: 0x17000BF4 RID: 3060
		// (get) Token: 0x060031AF RID: 12719 RVA: 0x000CEC5E File Offset: 0x000CCE5E
		public ExplainedNumber GarrisonChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChange(base.Owner.Settlement, true);
			}
		}

		// Token: 0x17000BF5 RID: 3061
		// (get) Token: 0x060031B0 RID: 12720 RVA: 0x000CEC80 File Offset: 0x000CCE80
		public float FoodChange
		{
			get
			{
				return Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this, true, false).ResultNumber;
			}
		}

		// Token: 0x17000BF6 RID: 3062
		// (get) Token: 0x060031B1 RID: 12721 RVA: 0x000CECAC File Offset: 0x000CCEAC
		public float FoodChangeWithoutMarketStocks
		{
			get
			{
				return Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this, false, false).ResultNumber;
			}
		}

		// Token: 0x17000BF7 RID: 3063
		// (get) Token: 0x060031B2 RID: 12722 RVA: 0x000CECD8 File Offset: 0x000CCED8
		public ExplainedNumber FoodChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this, true, true);
			}
		}

		// Token: 0x17000BF8 RID: 3064
		// (get) Token: 0x060031B3 RID: 12723 RVA: 0x000CECF4 File Offset: 0x000CCEF4
		public float LoyaltyChange
		{
			get
			{
				return Campaign.Current.Models.SettlementLoyaltyModel.CalculateLoyaltyChange(this, false).ResultNumber;
			}
		}

		// Token: 0x17000BF9 RID: 3065
		// (get) Token: 0x060031B4 RID: 12724 RVA: 0x000CED1F File Offset: 0x000CCF1F
		public ExplainedNumber LoyaltyChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementLoyaltyModel.CalculateLoyaltyChange(this, true);
			}
		}

		// Token: 0x17000BFA RID: 3066
		// (get) Token: 0x060031B5 RID: 12725 RVA: 0x000CED38 File Offset: 0x000CCF38
		public float SecurityChange
		{
			get
			{
				return Campaign.Current.Models.SettlementSecurityModel.CalculateSecurityChange(this, false).ResultNumber;
			}
		}

		// Token: 0x17000BFB RID: 3067
		// (get) Token: 0x060031B6 RID: 12726 RVA: 0x000CED63 File Offset: 0x000CCF63
		public ExplainedNumber SecurityChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementSecurityModel.CalculateSecurityChange(this, true);
			}
		}

		// Token: 0x17000BFC RID: 3068
		// (get) Token: 0x060031B7 RID: 12727 RVA: 0x000CED7C File Offset: 0x000CCF7C
		public float MilitiaChange
		{
			get
			{
				return Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement, false).ResultNumber;
			}
		}

		// Token: 0x17000BFD RID: 3069
		// (get) Token: 0x060031B8 RID: 12728 RVA: 0x000CEDB1 File Offset: 0x000CCFB1
		public ExplainedNumber MilitiaChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement, true);
			}
		}

		// Token: 0x17000BFE RID: 3070
		// (get) Token: 0x060031B9 RID: 12729 RVA: 0x000CEDD4 File Offset: 0x000CCFD4
		public float Construction
		{
			get
			{
				return Campaign.Current.Models.BuildingConstructionModel.CalculateDailyConstructionPower(this, false).ResultNumber;
			}
		}

		// Token: 0x17000BFF RID: 3071
		// (get) Token: 0x060031BA RID: 12730 RVA: 0x000CEDFF File Offset: 0x000CCFFF
		public ExplainedNumber ConstructionExplanation
		{
			get
			{
				return Campaign.Current.Models.BuildingConstructionModel.CalculateDailyConstructionPower(this, true);
			}
		}

		// Token: 0x17000C00 RID: 3072
		// (get) Token: 0x060031BB RID: 12731 RVA: 0x000CEE17 File Offset: 0x000CD017
		// (set) Token: 0x060031BC RID: 12732 RVA: 0x000CEE1F File Offset: 0x000CD01F
		public Clan OwnerClan
		{
			get
			{
				return this._ownerClan;
			}
			set
			{
				if (this._ownerClan != value)
				{
					this.ChangeClanInternal(value);
				}
			}
		}

		// Token: 0x17000C01 RID: 3073
		// (get) Token: 0x060031BD RID: 12733 RVA: 0x000CEE31 File Offset: 0x000CD031
		// (set) Token: 0x060031BE RID: 12734 RVA: 0x000CEE39 File Offset: 0x000CD039
		public float Security
		{
			get
			{
				return this._security;
			}
			set
			{
				this._security = value;
				if (this._security < 0f)
				{
					this._security = 0f;
					return;
				}
				if (this._security > 100f)
				{
					this._security = 100f;
				}
			}
		}

		// Token: 0x17000C02 RID: 3074
		// (get) Token: 0x060031BF RID: 12735 RVA: 0x000CEE73 File Offset: 0x000CD073
		// (set) Token: 0x060031C0 RID: 12736 RVA: 0x000CEE7B File Offset: 0x000CD07B
		public float Loyalty
		{
			get
			{
				return this._loyalty;
			}
			set
			{
				this._loyalty = value;
				if (this._loyalty < 0f)
				{
					this._loyalty = 0f;
					return;
				}
				if (this._loyalty > 100f)
				{
					this._loyalty = 100f;
				}
			}
		}

		// Token: 0x17000C03 RID: 3075
		// (get) Token: 0x060031C1 RID: 12737 RVA: 0x000CEEB5 File Offset: 0x000CD0B5
		public MBReadOnlyList<Village> TradeBoundVillages
		{
			get
			{
				return this._tradeBoundVillagesCache;
			}
		}

		// Token: 0x060031C2 RID: 12738 RVA: 0x000CEEBD File Offset: 0x000CD0BD
		internal void SetTradeBoundVillageInternal(Village village)
		{
			this._tradeBoundVillagesCache.Add(village);
		}

		// Token: 0x060031C3 RID: 12739 RVA: 0x000CEECB File Offset: 0x000CD0CB
		internal void RemoveTradeBoundVillageInternal(Village village)
		{
			this._tradeBoundVillagesCache.Remove(village);
		}

		// Token: 0x060031C4 RID: 12740 RVA: 0x000CEEDC File Offset: 0x000CD0DC
		public int FoodStocksUpperLimit()
		{
			return (int)((float)(Campaign.Current.Models.SettlementFoodModel.FoodStocksUpperLimit + (this.IsCastle ? Campaign.Current.Models.SettlementFoodModel.CastleFoodStockUpperLimitBonus : 0)) + this.GetEffectOfBuildings(BuildingEffectEnum.Foodstock));
		}

		// Token: 0x17000C04 RID: 3076
		// (get) Token: 0x060031C5 RID: 12741 RVA: 0x000CEF28 File Offset: 0x000CD128
		// (set) Token: 0x060031C6 RID: 12742 RVA: 0x000CEF30 File Offset: 0x000CD130
		[SaveableProperty(1005)]
		public Workshop[] Workshops { get; protected set; }

		// Token: 0x17000C05 RID: 3077
		// (get) Token: 0x060031C7 RID: 12743 RVA: 0x000CEF39 File Offset: 0x000CD139
		public Building CurrentBuilding
		{
			get
			{
				if (!this.BuildingsInProgress.IsEmpty<Building>())
				{
					return this.BuildingsInProgress.Peek();
				}
				return this.CurrentDefaultBuilding;
			}
		}

		// Token: 0x17000C06 RID: 3078
		// (get) Token: 0x060031C8 RID: 12744 RVA: 0x000CEF5A File Offset: 0x000CD15A
		public Building CurrentDefaultBuilding
		{
			get
			{
				return this.Buildings.Find((Building k) => k.IsCurrentlyDefault);
			}
		}

		// Token: 0x17000C07 RID: 3079
		// (get) Token: 0x060031C9 RID: 12745 RVA: 0x000CEF86 File Offset: 0x000CD186
		public TownMarketData MarketData
		{
			get
			{
				return this._marketData;
			}
		}

		// Token: 0x17000C08 RID: 3080
		// (get) Token: 0x060031CA RID: 12746 RVA: 0x000CEF8E File Offset: 0x000CD18E
		// (set) Token: 0x060031CB RID: 12747 RVA: 0x000CEF96 File Offset: 0x000CD196
		public int TradeTaxAccumulated
		{
			get
			{
				return this._tradeTax;
			}
			set
			{
				this._tradeTax = value;
			}
		}

		// Token: 0x17000C09 RID: 3081
		// (get) Token: 0x060031CC RID: 12748 RVA: 0x000CEF9F File Offset: 0x000CD19F
		// (set) Token: 0x060031CD RID: 12749 RVA: 0x000CEFA7 File Offset: 0x000CD1A7
		public Hero Governor
		{
			get
			{
				return this._governor;
			}
			set
			{
				if (this._governor != value)
				{
					if (this._governor != null)
					{
						this._governor.GovernorOf = null;
					}
					this._governor = value;
					if (this._governor != null)
					{
						this._governor.GovernorOf = this;
					}
				}
			}
		}

		// Token: 0x060031CE RID: 12750 RVA: 0x000CEFE4 File Offset: 0x000CD1E4
		public Town()
		{
			this.Buildings = new MBList<Building>();
			this.BuildingsInProgress = new Queue<Building>();
			this.Workshops = new Workshop[0];
			this._marketData = new TownMarketData(this);
			this._tradeBoundVillagesCache = new MBList<Village>();
		}

		// Token: 0x17000C0A RID: 3082
		// (get) Token: 0x060031CF RID: 12751 RVA: 0x000CF043 File Offset: 0x000CD243
		public static IEnumerable<Town> AllFiefs
		{
			get
			{
				foreach (Town town in Campaign.Current.AllTowns)
				{
					yield return town;
				}
				List<Town>.Enumerator enumerator = default(List<Town>.Enumerator);
				foreach (Town town2 in Campaign.Current.AllCastles)
				{
					yield return town2;
				}
				enumerator = default(List<Town>.Enumerator);
				yield break;
				yield break;
			}
		}

		// Token: 0x17000C0B RID: 3083
		// (get) Token: 0x060031D0 RID: 12752 RVA: 0x000CF04C File Offset: 0x000CD24C
		public static MBReadOnlyList<Town> AllTowns
		{
			get
			{
				return Campaign.Current.AllTowns;
			}
		}

		// Token: 0x17000C0C RID: 3084
		// (get) Token: 0x060031D1 RID: 12753 RVA: 0x000CF058 File Offset: 0x000CD258
		public static MBReadOnlyList<Town> AllCastles
		{
			get
			{
				return Campaign.Current.AllCastles;
			}
		}

		// Token: 0x17000C0D RID: 3085
		// (get) Token: 0x060031D2 RID: 12754 RVA: 0x000CF064 File Offset: 0x000CD264
		public override bool IsTown
		{
			get
			{
				return !this._isCastle;
			}
		}

		// Token: 0x17000C0E RID: 3086
		// (get) Token: 0x060031D3 RID: 12755 RVA: 0x000CF06F File Offset: 0x000CD26F
		public override bool IsCastle
		{
			get
			{
				return this._isCastle;
			}
		}

		// Token: 0x060031D4 RID: 12756 RVA: 0x000CF078 File Offset: 0x000CD278
		public override void OnInit()
		{
			this.Loyalty = (float)base.Owner.RandomIntWithSeed(1337U, 30, 70);
			this.Security = (float)base.Owner.RandomIntWithSeed(1001U, 40, 60);
			this.TradeTaxAccumulated = (this.IsTown ? (1000 + MBRandom.RandomInt(1000)) : 0);
			base.ChangeGold(20000);
			this.Buildings.Add(new Building(this.IsTown ? DefaultBuildingTypes.Fortifications : DefaultBuildingTypes.Wall, this, 0f, this._wallLevel));
		}

		// Token: 0x060031D5 RID: 12757 RVA: 0x000CF118 File Offset: 0x000CD318
		public void InitializeWorkshops(int count)
		{
			if (count > 0)
			{
				this.Workshops = new Workshop[count];
				for (int i = 0; i < count; i++)
				{
					this.Workshops[i] = new Workshop(base.Owner.Settlement, "workshop_" + i);
				}
			}
		}

		// Token: 0x060031D6 RID: 12758 RVA: 0x000CF169 File Offset: 0x000CD369
		[LoadInitializationCallback]
		private void OnLoad()
		{
			this._tradeBoundVillagesCache = new MBList<Village>();
		}

		// Token: 0x060031D7 RID: 12759 RVA: 0x000CF176 File Offset: 0x000CD376
		protected override void PreAfterLoad()
		{
			Clan ownerClan = this._ownerClan;
			if (ownerClan == null)
			{
				return;
			}
			ownerClan.OnFortificationAdded(this);
		}

		// Token: 0x060031D8 RID: 12760 RVA: 0x000CF18C File Offset: 0x000CD38C
		protected override void AfterLoad()
		{
			Workshop[] workshops = this.Workshops;
			for (int i = 0; i < workshops.Length; i++)
			{
				workshops[i].AfterLoad();
			}
			bool flag = false;
			for (int j = this.Buildings.Count - 1; j >= 0; j--)
			{
				Building building = this.Buildings[j];
				if (building.BuildingType == null || !building.BuildingType.IsReady)
				{
					this.Buildings.RemoveAt(j);
					flag = true;
				}
			}
			if (!flag)
			{
				foreach (Building building2 in this.BuildingsInProgress)
				{
					if (building2.BuildingType == null || !building2.BuildingType.IsReady)
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				this.BuildingsInProgress.Clear();
			}
			if (this.Governor != null && this.Governor.GovernorOf == null)
			{
				this.Governor = null;
			}
		}

		// Token: 0x17000C0F RID: 3087
		// (get) Token: 0x060031D9 RID: 12761 RVA: 0x000CF28C File Offset: 0x000CD48C
		public IReadOnlyCollection<Town.SellLog> SoldItems
		{
			get
			{
				return this._soldItems;
			}
		}

		// Token: 0x17000C10 RID: 3088
		// (get) Token: 0x060031DA RID: 12762 RVA: 0x000CF294 File Offset: 0x000CD494
		public IFaction MapFaction
		{
			get
			{
				Clan ownerClan = this.OwnerClan;
				if (ownerClan == null)
				{
					return null;
				}
				return ownerClan.MapFaction;
			}
		}

		// Token: 0x17000C11 RID: 3089
		// (get) Token: 0x060031DB RID: 12763 RVA: 0x000CF2A7 File Offset: 0x000CD4A7
		public bool IsUnderSiege
		{
			get
			{
				return base.Settlement.IsUnderSiege;
			}
		}

		// Token: 0x17000C12 RID: 3090
		// (get) Token: 0x060031DC RID: 12764 RVA: 0x000CF2B4 File Offset: 0x000CD4B4
		[CachedData]
		public MBReadOnlyList<Village> Villages
		{
			get
			{
				return base.Settlement.BoundVillages;
			}
		}

		// Token: 0x17000C13 RID: 3091
		// (get) Token: 0x060031DD RID: 12765 RVA: 0x000CF2C1 File Offset: 0x000CD4C1
		// (set) Token: 0x060031DE RID: 12766 RVA: 0x000CF2C9 File Offset: 0x000CD4C9
		[SaveableProperty(1030)]
		public Clan LastCapturedBy { get; set; }

		// Token: 0x060031DF RID: 12767 RVA: 0x000CF2D2 File Offset: 0x000CD4D2
		private void ChangeClanInternal(Clan value)
		{
			if (this._ownerClan != null)
			{
				this.RemoveOwnerClan();
			}
			this._ownerClan = value;
			if (this._ownerClan != null)
			{
				this.SetNewOwnerClan();
			}
			this.ConsiderSiegesAndMapEventsInternal(this._ownerClan);
		}

		// Token: 0x060031E0 RID: 12768 RVA: 0x000CF304 File Offset: 0x000CD504
		public float GetEffectOfBuildings(BuildingEffectEnum buildingEffect)
		{
			float num = 0f;
			foreach (Building building in this.Buildings)
			{
				num += building.GetBuildingEffectAmount(buildingEffect);
			}
			return num;
		}

		// Token: 0x060031E1 RID: 12769 RVA: 0x000CF364 File Offset: 0x000CD564
		internal void ConsiderSiegesAndMapEventsInternal(IFaction factionToConsiderAgainst)
		{
			MobileParty garrisonParty = base.GarrisonParty;
			if (garrisonParty != null)
			{
				garrisonParty.ConsiderMapEventsAndSiegesInternal(factionToConsiderAgainst);
			}
			foreach (Village village in base.Settlement.BoundVillages)
			{
				VillagerPartyComponent villagerPartyComponent = village.VillagerPartyComponent;
				if (villagerPartyComponent != null)
				{
					villagerPartyComponent.MobileParty.ConsiderMapEventsAndSiegesInternal(factionToConsiderAgainst);
				}
			}
		}

		// Token: 0x060031E2 RID: 12770 RVA: 0x000CF3DC File Offset: 0x000CD5DC
		private void SetNewOwnerClan()
		{
			this._ownerClan.OnFortificationAdded(this);
			foreach (Village village in base.Settlement.BoundVillages)
			{
				IPartyVisual visuals = village.Settlement.Party.Visuals;
				if (visuals != null)
				{
					visuals.SetMapIconAsDirty();
				}
				VillagerPartyComponent villagerPartyComponent = village.VillagerPartyComponent;
				if (villagerPartyComponent != null)
				{
					IPartyVisual visuals2 = villagerPartyComponent.MobileParty.Party.Visuals;
					if (visuals2 != null)
					{
						visuals2.SetMapIconAsDirty();
					}
				}
			}
		}

		// Token: 0x060031E3 RID: 12771 RVA: 0x000CF478 File Offset: 0x000CD678
		private void RemoveOwnerClan()
		{
			this._ownerClan.OnFortificationRemoved(this);
		}

		// Token: 0x17000C14 RID: 3092
		// (get) Token: 0x060031E4 RID: 12772 RVA: 0x000CF486 File Offset: 0x000CD686
		public bool HasTournament
		{
			get
			{
				return this.IsTown && Campaign.Current.TournamentManager.GetTournamentGame(this) != null;
			}
		}

		// Token: 0x060031E5 RID: 12773 RVA: 0x000CF4A8 File Offset: 0x000CD6A8
		internal void DailyTick()
		{
			this.Loyalty += this.LoyaltyChange;
			this.Security += this.SecurityChange;
			if (base.FoodStocks > 0f)
			{
				base.Owner.OnConsumedFood();
			}
			base.FoodStocks += this.FoodChange;
			if (base.FoodStocks < 0f)
			{
				base.FoodStocks = 0f;
				base.Owner.RemainingFoodPercentage = -100;
			}
			else
			{
				base.Owner.RemainingFoodPercentage = 0;
			}
			if (base.FoodStocks > (float)this.FoodStocksUpperLimit())
			{
				base.FoodStocks = (float)this.FoodStocksUpperLimit();
			}
			if (!this.CurrentBuilding.BuildingType.IsDefaultProject)
			{
				this.TickCurrentBuilding();
			}
			else if (this.Governor != null && this.Governor.GetPerkValue(DefaultPerks.Charm.Virile) && MBRandom.RandomFloat < 0.1f)
			{
				Hero randomElement = base.Settlement.Notables.GetRandomElement<Hero>();
				if (randomElement != null)
				{
					ChangeRelationAction.ApplyRelationChangeBetweenHeroes(this.Governor.Clan.Leader, randomElement, MathF.Round(DefaultPerks.Charm.Virile.SecondaryBonus), false);
				}
			}
			if (this.Governor != null)
			{
				if (this.Governor.GetPerkValue(DefaultPerks.Roguery.WhiteLies) && MBRandom.RandomFloat < 0.02f)
				{
					Hero randomElement2 = base.Settlement.Notables.GetRandomElement<Hero>();
					if (randomElement2 != null)
					{
						ChangeRelationAction.ApplyRelationChangeBetweenHeroes(this.Governor, randomElement2, MathF.Round(DefaultPerks.Roguery.WhiteLies.SecondaryBonus), true);
					}
				}
				if (this.Governor.GetPerkValue(DefaultPerks.Roguery.Scarface) && MBRandom.RandomFloat < 0.05f)
				{
					Hero randomElementWithPredicate = base.Settlement.Notables.GetRandomElementWithPredicate((Hero x) => x.IsGangLeader);
					if (randomElementWithPredicate != null)
					{
						ChangeRelationAction.ApplyRelationChangeBetweenHeroes(this.Governor, randomElementWithPredicate, MathF.Round(DefaultPerks.Roguery.Scarface.SecondaryBonus), true);
					}
				}
			}
			base.Owner.Settlement.Prosperity += this.ProsperityChange;
			if (base.Owner.Settlement.Prosperity < 0f)
			{
				base.Owner.Settlement.Prosperity = 0f;
			}
			this.HandleMilitiaAndGarrisonOfSettlementDaily();
			this.RepairWallsOfSettlementDaily();
		}

		// Token: 0x060031E6 RID: 12774 RVA: 0x000CF6EC File Offset: 0x000CD8EC
		private void HandleMilitiaAndGarrisonOfSettlementDaily()
		{
			base.Owner.Settlement.Militia += this.MilitiaChange;
			if (this.GarrisonChange >= 1 && base.GarrisonParty == null)
			{
				base.Owner.Settlement.AddGarrisonParty(false);
			}
			if (base.GarrisonParty != null && base.GarrisonParty.IsActive && base.GarrisonParty.MapEvent == null && base.GarrisonParty.CurrentSettlement != null)
			{
				int num = Campaign.Current.Models.DailyTroopXpBonusModel.CalculateDailyTroopXpBonus(this);
				float num2 = Campaign.Current.Models.DailyTroopXpBonusModel.CalculateGarrisonXpBonusMultiplier(this);
				if (num > 0)
				{
					foreach (TroopRosterElement troopRosterElement in base.GarrisonParty.MemberRoster.GetTroopRoster())
					{
						base.GarrisonParty.MemberRoster.AddXpToTroop(MathF.Round((float)num * num2 * (float)troopRosterElement.Number), troopRosterElement.Character);
					}
				}
				this.DailyGarrisonAdjustment();
			}
		}

		// Token: 0x060031E7 RID: 12775 RVA: 0x000CF81C File Offset: 0x000CDA1C
		private void RepairWallsOfSettlementDaily()
		{
			Settlement settlement = base.Owner.Settlement;
			float maxWallHitPoints = settlement.MaxWallHitPoints;
			if (settlement.SettlementWallSectionHitPointsRatioList.Any((float health) => health < 1f) && !settlement.IsUnderSiege)
			{
				float num = maxWallHitPoints * 0.02f;
				float effectOfBuildings = this.GetEffectOfBuildings(BuildingEffectEnum.WallRepairSpeed);
				if (effectOfBuildings > 0f)
				{
					num += num * effectOfBuildings * 0.01f;
				}
				float num2 = num / settlement.MaxHitPointsOfOneWallSection;
				for (int i = 0; i < settlement.SettlementWallSectionHitPointsRatioList.Count; i++)
				{
					float num3 = settlement.SettlementWallSectionHitPointsRatioList[i];
					float num4 = MathF.Min(1f - num3, num2);
					settlement.SetWallSectionHitPointsRatioAtIndex(i, num3 + num4);
					num2 -= num4;
					if (num2 <= 0f)
					{
						break;
					}
				}
			}
		}

		// Token: 0x060031E8 RID: 12776 RVA: 0x000CF8FC File Offset: 0x000CDAFC
		private void DesertOneTroopFromGarrison()
		{
			if (base.GarrisonParty.MemberRoster.TotalManCount > 0)
			{
				int num = (int)(MBRandom.RandomFloat * (float)base.GarrisonParty.MemberRoster.TotalManCount);
				for (int i = 0; i < base.GarrisonParty.MemberRoster.Count; i++)
				{
					num -= base.GarrisonParty.MemberRoster.GetElementNumber(i);
					if (num < 0)
					{
						TroopRoster troopRoster = TroopRoster.CreateDummyTroopRoster();
						MobilePartyHelper.DesertTroopsFromParty(base.GarrisonParty, i, 1, 0, ref troopRoster);
						return;
					}
				}
			}
		}

		// Token: 0x060031E9 RID: 12777 RVA: 0x000CF980 File Offset: 0x000CDB80
		private void DailyGarrisonAdjustment()
		{
			int num = base.GarrisonParty.CurrentSettlement.Town.GarrisonChange;
			int num2 = (this.GarrisonAutoRecruitmentIsEnabled ? base.GarrisonParty.CurrentSettlement.Town.GarrisonChangeAutoRecruitment : 0);
			num -= num2;
			int limitedPartySize = base.GarrisonParty.LimitedPartySize;
			if (num > 0)
			{
				num = MBMath.ClampInt(num, 0, limitedPartySize - base.GarrisonParty.Party.NumberOfAllMembers - num2);
			}
			if (num < 0)
			{
				for (int i = 0; i < MathF.Abs(num); i++)
				{
					this.DesertOneTroopFromGarrison();
				}
			}
			else if (num > 0)
			{
				base.GarrisonParty.MemberRoster.AddToCounts(base.GarrisonParty.MapFaction.BasicTroop, num, false, 0, 0, true, -1);
			}
			if (num2 > 0)
			{
				int num3 = SettlementHelper.NumberOfVolunteersCanBeRecruitedForGarrison(base.GarrisonParty.CurrentSettlement);
				Hero leader = base.GarrisonParty.CurrentSettlement.OwnerClan.Leader;
				if (num3 > 0)
				{
					float num4 = MBRandom.RandomFloat * (float)num3;
					foreach (Hero hero in base.GarrisonParty.CurrentSettlement.Notables)
					{
						if (num4 <= 0f)
						{
							break;
						}
						int num5 = Campaign.Current.Models.VolunteerModel.MaximumIndexHeroCanRecruitFromHero(leader, hero, -101);
						for (int j = 0; j < num5; j++)
						{
							if (hero.VolunteerTypes[j] != null)
							{
								num4 -= 1f;
								if (num4 <= 0f)
								{
									base.GarrisonParty.MemberRoster.AddToCounts(hero.VolunteerTypes[j], 1, false, 0, 0, true, -1);
									leader.Clan.AutoRecruitmentExpenses += Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(hero.VolunteerTypes[j], leader, false);
									hero.VolunteerTypes[j] = null;
									break;
								}
							}
						}
					}
					if (num4 > 0f)
					{
						foreach (Village village in base.GarrisonParty.CurrentSettlement.BoundVillages)
						{
							if (num4 <= 0f)
							{
								break;
							}
							if (village.VillageState == Village.VillageStates.Normal)
							{
								foreach (Hero hero2 in village.Settlement.Notables)
								{
									if (num4 <= 0f)
									{
										break;
									}
									int num6 = Campaign.Current.Models.VolunteerModel.MaximumIndexHeroCanRecruitFromHero(leader, hero2, -101);
									for (int k = 0; k < num6; k++)
									{
										if (hero2.VolunteerTypes[k] != null)
										{
											num4 -= 1f;
											if (num4 <= 0f)
											{
												base.GarrisonParty.MemberRoster.AddToCounts(hero2.VolunteerTypes[k], 1, false, 0, 0, true, -1);
												leader.Clan.AutoRecruitmentExpenses += Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(hero2.VolunteerTypes[k], leader, false);
												hero2.VolunteerTypes[k] = null;
												break;
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (base.GarrisonParty.Party.NumberOfAllMembers > limitedPartySize)
			{
				int num7 = MBRandom.RoundRandomized((float)(base.GarrisonParty.Party.NumberOfAllMembers - limitedPartySize) * 0.2f);
				for (int l = 0; l < num7; l++)
				{
					this.DesertOneTroopFromGarrison();
				}
			}
		}

		// Token: 0x060031EA RID: 12778 RVA: 0x000CFD80 File Offset: 0x000CDF80
		public int GetWallLevel()
		{
			int num = 0;
			foreach (Building building in this.Buildings)
			{
				if (building.BuildingType == DefaultBuildingTypes.Fortifications && this.IsTown)
				{
					num = building.CurrentLevel;
					break;
				}
				if (building.BuildingType == DefaultBuildingTypes.Wall && this.IsCastle)
				{
					num = building.CurrentLevel;
					break;
				}
			}
			return num;
		}

		// Token: 0x060031EB RID: 12779 RVA: 0x000CFE0C File Offset: 0x000CE00C
		public override string ToString()
		{
			return base.Name.ToString();
		}

		// Token: 0x060031EC RID: 12780 RVA: 0x000CFE1C File Offset: 0x000CE01C
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			if (!base.IsInitialized)
			{
				this._wallLevel = ((node.Attributes["level"] != null) ? int.Parse(node.Attributes["level"].Value) : 0);
			}
			this._isCastle = node.Attributes["is_castle"] != null && bool.Parse(node.Attributes["is_castle"].Value);
			base.BackgroundCropPosition = float.Parse(node.Attributes["background_crop_position"].Value);
			base.BackgroundMeshName = node.Attributes["background_mesh"].Value;
			base.WaitMeshName = node.Attributes["wait_mesh"].Value;
			base.Deserialize(objectManager, node);
		}

		// Token: 0x060031ED RID: 12781 RVA: 0x000CFEF9 File Offset: 0x000CE0F9
		public void SetSoldItems(IEnumerable<Town.SellLog> logList)
		{
			this._soldItems = logList.ToArray<Town.SellLog>();
		}

		// Token: 0x060031EE RID: 12782 RVA: 0x000CFF07 File Offset: 0x000CE107
		public override int GetItemPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false)
		{
			return this.MarketData.GetPrice(item, tradingParty, isSelling, null);
		}

		// Token: 0x060031EF RID: 12783 RVA: 0x000CFF18 File Offset: 0x000CE118
		public override int GetItemPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false)
		{
			return this.MarketData.GetPrice(itemRosterElement, tradingParty, isSelling, null);
		}

		// Token: 0x060031F0 RID: 12784 RVA: 0x000CFF29 File Offset: 0x000CE129
		public override SettlementComponent.ProsperityLevel GetProsperityLevel()
		{
			if (base.Owner.Settlement.Prosperity >= 5000f)
			{
				return SettlementComponent.ProsperityLevel.High;
			}
			if (base.Owner.Settlement.Prosperity >= 2000f)
			{
				return SettlementComponent.ProsperityLevel.Mid;
			}
			return SettlementComponent.ProsperityLevel.Low;
		}

		// Token: 0x060031F1 RID: 12785 RVA: 0x000CFF60 File Offset: 0x000CE160
		private void TickCurrentBuilding()
		{
			if (this.BuildingsInProgress.Peek().CurrentLevel == 3)
			{
				this.BuildingsInProgress.Dequeue();
			}
			if (!base.Owner.Settlement.IsUnderSiege && !this.BuildingsInProgress.IsEmpty<Building>())
			{
				BuildingConstructionModel buildingConstructionModel = Campaign.Current.Models.BuildingConstructionModel;
				Building building = this.BuildingsInProgress.Peek();
				building.BuildingProgress += this.Construction;
				int num = (this.IsCastle ? buildingConstructionModel.CastleBoostCost : buildingConstructionModel.TownBoostCost);
				if (this.BoostBuildingProcess > 0)
				{
					this.BoostBuildingProcess -= num;
					if (this.BoostBuildingProcess < 0)
					{
						this.BoostBuildingProcess = 0;
					}
				}
				if ((float)building.GetConstructionCost() <= building.BuildingProgress)
				{
					if (building.CurrentLevel < 3)
					{
						building.LevelUp();
					}
					if (building.CurrentLevel == 3)
					{
						building.BuildingProgress = (float)building.GetConstructionCost();
					}
					this.BuildingsInProgress.Dequeue();
				}
			}
		}

		// Token: 0x060031F2 RID: 12786 RVA: 0x000D005E File Offset: 0x000CE25E
		protected override void OnInventoryUpdated(ItemRosterElement item, int count)
		{
			this.MarketData.OnTownInventoryUpdated(item, count);
		}

		// Token: 0x060031F3 RID: 12787 RVA: 0x000D006D File Offset: 0x000CE26D
		public float GetItemCategoryPriceIndex(ItemCategory itemCategory)
		{
			return this.MarketData.GetPriceFactor(itemCategory);
		}

		// Token: 0x0400102D RID: 4141
		private const int InitialTownGold = 20000;

		// Token: 0x0400102E RID: 4142
		private const int HighProsperityThreshold = 5000;

		// Token: 0x0400102F RID: 4143
		private const int MidProsperityThreshold = 2000;

		// Token: 0x04001030 RID: 4144
		[SaveableField(1000)]
		private int _wallLevel;

		// Token: 0x04001031 RID: 4145
		private bool _isCastle;

		// Token: 0x04001032 RID: 4146
		[SaveableField(1016)]
		public bool GarrisonAutoRecruitmentIsEnabled = true;

		// Token: 0x04001033 RID: 4147
		[SaveableField(1040)]
		private Clan _ownerClan;

		// Token: 0x04001034 RID: 4148
		[SaveableField(1015)]
		private float _security;

		// Token: 0x04001035 RID: 4149
		[SaveableField(1014)]
		private float _loyalty;

		// Token: 0x04001036 RID: 4150
		[CachedData]
		private MBList<Village> _tradeBoundVillagesCache;

		// Token: 0x04001038 RID: 4152
		[SaveableField(1006)]
		public MBList<Building> Buildings;

		// Token: 0x04001039 RID: 4153
		[SaveableField(1007)]
		public Queue<Building> BuildingsInProgress;

		// Token: 0x0400103A RID: 4154
		[SaveableField(1008)]
		public int BoostBuildingProcess;

		// Token: 0x0400103B RID: 4155
		[SaveableField(1009)]
		private readonly TownMarketData _marketData;

		// Token: 0x0400103C RID: 4156
		[SaveableField(1010)]
		private int _tradeTax;

		// Token: 0x0400103D RID: 4157
		[SaveableField(1011)]
		public bool InRebelliousState;

		// Token: 0x0400103E RID: 4158
		[SaveableField(1012)]
		private Hero _governor;

		// Token: 0x0400103F RID: 4159
		[SaveableField(1013)]
		private Town.SellLog[] _soldItems = new Town.SellLog[0];

		// Token: 0x02000695 RID: 1685
		public struct SellLog
		{
			// Token: 0x06005374 RID: 21364 RVA: 0x00169098 File Offset: 0x00167298
			public static void AutoGeneratedStaticCollectObjectsSellLog(object o, List<object> collectedObjects)
			{
				((Town.SellLog)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06005375 RID: 21365 RVA: 0x001690B4 File Offset: 0x001672B4
			private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.Category);
			}

			// Token: 0x06005376 RID: 21366 RVA: 0x001690C4 File Offset: 0x001672C4
			internal static object AutoGeneratedGetMemberValueCategory(object o)
			{
				return ((Town.SellLog)o).Category;
			}

			// Token: 0x06005377 RID: 21367 RVA: 0x001690E0 File Offset: 0x001672E0
			internal static object AutoGeneratedGetMemberValueNumber(object o)
			{
				return ((Town.SellLog)o).Number;
			}

			// Token: 0x17001343 RID: 4931
			// (get) Token: 0x06005378 RID: 21368 RVA: 0x00169100 File Offset: 0x00167300
			// (set) Token: 0x06005379 RID: 21369 RVA: 0x00169108 File Offset: 0x00167308
			[SaveableProperty(200)]
			public ItemCategory Category { get; private set; }

			// Token: 0x17001344 RID: 4932
			// (get) Token: 0x0600537A RID: 21370 RVA: 0x00169111 File Offset: 0x00167311
			// (set) Token: 0x0600537B RID: 21371 RVA: 0x00169119 File Offset: 0x00167319
			[SaveableProperty(201)]
			public int Number { get; private set; }

			// Token: 0x0600537C RID: 21372 RVA: 0x00169122 File Offset: 0x00167322
			public SellLog(ItemCategory category, int count)
			{
				this.Category = category;
				this.Number = count;
			}
		}
	}
}
