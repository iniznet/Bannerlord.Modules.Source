using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements.Buildings;
using TaleWorlds.CampaignSystem.Settlements.Workshops;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	public class Town : Fief
	{
		internal static void AutoGeneratedStaticCollectObjectsTown(object o, List<object> collectedObjects)
		{
			((Town)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Buildings);
			collectedObjects.Add(this.BuildingsInProgress);
			collectedObjects.Add(this._ownerClan);
			collectedObjects.Add(this._marketData);
			collectedObjects.Add(this._governor);
			collectedObjects.Add(this._soldItems);
			collectedObjects.Add(this.Workshops);
			collectedObjects.Add(this.LastCapturedBy);
		}

		internal static object AutoGeneratedGetMemberValueWorkshops(object o)
		{
			return ((Town)o).Workshops;
		}

		internal static object AutoGeneratedGetMemberValueLastCapturedBy(object o)
		{
			return ((Town)o).LastCapturedBy;
		}

		internal static object AutoGeneratedGetMemberValueGarrisonAutoRecruitmentIsEnabled(object o)
		{
			return ((Town)o).GarrisonAutoRecruitmentIsEnabled;
		}

		internal static object AutoGeneratedGetMemberValueBuildings(object o)
		{
			return ((Town)o).Buildings;
		}

		internal static object AutoGeneratedGetMemberValueBuildingsInProgress(object o)
		{
			return ((Town)o).BuildingsInProgress;
		}

		internal static object AutoGeneratedGetMemberValueBoostBuildingProcess(object o)
		{
			return ((Town)o).BoostBuildingProcess;
		}

		internal static object AutoGeneratedGetMemberValueInRebelliousState(object o)
		{
			return ((Town)o).InRebelliousState;
		}

		internal static object AutoGeneratedGetMemberValue_wallLevel(object o)
		{
			return ((Town)o)._wallLevel;
		}

		internal static object AutoGeneratedGetMemberValue_ownerClan(object o)
		{
			return ((Town)o)._ownerClan;
		}

		internal static object AutoGeneratedGetMemberValue_security(object o)
		{
			return ((Town)o)._security;
		}

		internal static object AutoGeneratedGetMemberValue_loyalty(object o)
		{
			return ((Town)o)._loyalty;
		}

		internal static object AutoGeneratedGetMemberValue_marketData(object o)
		{
			return ((Town)o)._marketData;
		}

		internal static object AutoGeneratedGetMemberValue_tradeTax(object o)
		{
			return ((Town)o)._tradeTax;
		}

		internal static object AutoGeneratedGetMemberValue_governor(object o)
		{
			return ((Town)o)._governor;
		}

		internal static object AutoGeneratedGetMemberValue_soldItems(object o)
		{
			return ((Town)o)._soldItems;
		}

		public IEnumerable<PartyBase> GetDefenderParties(MapEvent.BattleTypes battleType)
		{
			yield return base.Settlement.Party;
			foreach (MobileParty mobileParty in base.Settlement.Parties)
			{
				if (mobileParty.MapFaction.IsAtWarWith(base.Settlement.SiegeEvent.BesiegerCamp.BesiegerParty.MapFaction) && mobileParty.IsActive && !mobileParty.IsVillager && !mobileParty.IsCaravan && (!mobileParty.IsMilitia || (!this.InRebelliousState && battleType != MapEvent.BattleTypes.SallyOut)))
				{
					yield return mobileParty.Party;
				}
			}
			List<MobileParty>.Enumerator enumerator = default(List<MobileParty>.Enumerator);
			yield break;
			yield break;
		}

		public PartyBase GetNextDefenderParty(ref int partyIndex, MapEvent.BattleTypes battleType)
		{
			partyIndex++;
			if (partyIndex == 0)
			{
				return base.Settlement.Party;
			}
			for (int i = partyIndex - 1; i < base.Settlement.Parties.Count; i++)
			{
				MobileParty mobileParty = base.Settlement.Parties[i];
				if (mobileParty.MapFaction.IsAtWarWith(base.Settlement.SiegeEvent.BesiegerCamp.BesiegerParty.MapFaction) && mobileParty.IsActive && !mobileParty.IsVillager && !mobileParty.IsCaravan && (!mobileParty.IsMilitia || (!this.InRebelliousState && battleType != MapEvent.BattleTypes.SallyOut)))
				{
					partyIndex = i + 1;
					return mobileParty.Party;
				}
			}
			return null;
		}

		public CultureObject Culture
		{
			get
			{
				return base.Owner.Settlement.Culture;
			}
		}

		public float ProsperityChange
		{
			get
			{
				return Campaign.Current.Models.SettlementProsperityModel.CalculateProsperityChange(this, false).ResultNumber;
			}
		}

		public ExplainedNumber ProsperityChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementProsperityModel.CalculateProsperityChange(this, true);
			}
		}

		public int GarrisonChange
		{
			get
			{
				return (int)Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChange(base.Owner.Settlement, false).ResultNumber;
			}
		}

		public int GarrisonChangeAutoRecruitment
		{
			get
			{
				return (int)Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChangeAutoRecruitment(base.Owner.Settlement, false).ResultNumber;
			}
		}

		public ExplainedNumber GarrisonChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementGarrisonModel.CalculateGarrisonChange(base.Owner.Settlement, true);
			}
		}

		public float FoodChange
		{
			get
			{
				return Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this, true, false).ResultNumber;
			}
		}

		public float FoodChangeWithoutMarketStocks
		{
			get
			{
				return Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this, false, false).ResultNumber;
			}
		}

		public ExplainedNumber FoodChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementFoodModel.CalculateTownFoodStocksChange(this, true, true);
			}
		}

		public float LoyaltyChange
		{
			get
			{
				return Campaign.Current.Models.SettlementLoyaltyModel.CalculateLoyaltyChange(this, false).ResultNumber;
			}
		}

		public ExplainedNumber LoyaltyChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementLoyaltyModel.CalculateLoyaltyChange(this, true);
			}
		}

		public float SecurityChange
		{
			get
			{
				return Campaign.Current.Models.SettlementSecurityModel.CalculateSecurityChange(this, false).ResultNumber;
			}
		}

		public ExplainedNumber SecurityChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementSecurityModel.CalculateSecurityChange(this, true);
			}
		}

		public float MilitiaChange
		{
			get
			{
				return Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement, false).ResultNumber;
			}
		}

		public ExplainedNumber MilitiaChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement, true);
			}
		}

		public float Construction
		{
			get
			{
				return Campaign.Current.Models.BuildingConstructionModel.CalculateDailyConstructionPower(this, false).ResultNumber;
			}
		}

		public ExplainedNumber ConstructionExplanation
		{
			get
			{
				return Campaign.Current.Models.BuildingConstructionModel.CalculateDailyConstructionPower(this, true);
			}
		}

		public Clan OwnerClan
		{
			get
			{
				return this._ownerClan;
			}
			set
			{
				if (this._ownerClan != value)
				{
					this.ChangeClanInternal(value);
				}
			}
		}

		public float Security
		{
			get
			{
				return this._security;
			}
			set
			{
				this._security = value;
				if (this._security < 0f)
				{
					this._security = 0f;
					return;
				}
				if (this._security > 100f)
				{
					this._security = 100f;
				}
			}
		}

		public float Loyalty
		{
			get
			{
				return this._loyalty;
			}
			set
			{
				this._loyalty = value;
				if (this._loyalty < 0f)
				{
					this._loyalty = 0f;
					return;
				}
				if (this._loyalty > 100f)
				{
					this._loyalty = 100f;
				}
			}
		}

		public MBReadOnlyList<Village> TradeBoundVillages
		{
			get
			{
				return this._tradeBoundVillagesCache;
			}
		}

		internal void SetTradeBoundVillageInternal(Village village)
		{
			this._tradeBoundVillagesCache.Add(village);
		}

		internal void RemoveTradeBoundVillageInternal(Village village)
		{
			this._tradeBoundVillagesCache.Remove(village);
		}

		public int FoodStocksUpperLimit()
		{
			return (int)((float)(Campaign.Current.Models.SettlementFoodModel.FoodStocksUpperLimit + (this.IsCastle ? Campaign.Current.Models.SettlementFoodModel.CastleFoodStockUpperLimitBonus : 0)) + this.GetEffectOfBuildings(BuildingEffectEnum.Foodstock));
		}

		[SaveableProperty(1005)]
		public Workshop[] Workshops { get; protected set; }

		public Building CurrentBuilding
		{
			get
			{
				if (!this.BuildingsInProgress.IsEmpty<Building>())
				{
					return this.BuildingsInProgress.Peek();
				}
				return this.CurrentDefaultBuilding;
			}
		}

		public Building CurrentDefaultBuilding
		{
			get
			{
				return this.Buildings.Find((Building k) => k.IsCurrentlyDefault);
			}
		}

		public TownMarketData MarketData
		{
			get
			{
				return this._marketData;
			}
		}

		public int TradeTaxAccumulated
		{
			get
			{
				return this._tradeTax;
			}
			set
			{
				this._tradeTax = value;
			}
		}

		public Hero Governor
		{
			get
			{
				return this._governor;
			}
			set
			{
				if (this._governor != value)
				{
					if (this._governor != null)
					{
						this._governor.GovernorOf = null;
					}
					this._governor = value;
					if (this._governor != null)
					{
						this._governor.GovernorOf = this;
					}
				}
			}
		}

		public Town()
		{
			this.Buildings = new MBList<Building>();
			this.BuildingsInProgress = new Queue<Building>();
			this.Workshops = new Workshop[0];
			this._marketData = new TownMarketData(this);
			this._tradeBoundVillagesCache = new MBList<Village>();
		}

		public static IEnumerable<Town> AllFiefs
		{
			get
			{
				foreach (Town town in Campaign.Current.AllTowns)
				{
					yield return town;
				}
				List<Town>.Enumerator enumerator = default(List<Town>.Enumerator);
				foreach (Town town2 in Campaign.Current.AllCastles)
				{
					yield return town2;
				}
				enumerator = default(List<Town>.Enumerator);
				yield break;
				yield break;
			}
		}

		public static MBReadOnlyList<Town> AllTowns
		{
			get
			{
				return Campaign.Current.AllTowns;
			}
		}

		public static MBReadOnlyList<Town> AllCastles
		{
			get
			{
				return Campaign.Current.AllCastles;
			}
		}

		public override bool IsTown
		{
			get
			{
				return !this._isCastle;
			}
		}

		public override bool IsCastle
		{
			get
			{
				return this._isCastle;
			}
		}

		public override void OnInit()
		{
			this.Loyalty = (float)base.Owner.RandomIntWithSeed(1337U, 30, 70);
			this.Security = (float)base.Owner.RandomIntWithSeed(1001U, 40, 60);
			this.TradeTaxAccumulated = (this.IsTown ? (1000 + MBRandom.RandomInt(1000)) : 0);
			base.ChangeGold(20000);
			this.Buildings.Add(new Building(this.IsTown ? DefaultBuildingTypes.Fortifications : DefaultBuildingTypes.Wall, this, 0f, this._wallLevel));
		}

		public void InitializeWorkshops(int count)
		{
			if (count > 0)
			{
				this.Workshops = new Workshop[count];
				for (int i = 0; i < count; i++)
				{
					this.Workshops[i] = new Workshop(base.Owner.Settlement, "workshop_" + i);
				}
			}
		}

		[LoadInitializationCallback]
		private void OnLoad()
		{
			this._tradeBoundVillagesCache = new MBList<Village>();
		}

		protected override void PreAfterLoad()
		{
			Clan ownerClan = this._ownerClan;
			if (ownerClan == null)
			{
				return;
			}
			ownerClan.OnFortificationAdded(this);
		}

		protected override void AfterLoad()
		{
			Workshop[] workshops = this.Workshops;
			for (int i = 0; i < workshops.Length; i++)
			{
				workshops[i].AfterLoad();
			}
			bool flag = false;
			for (int j = this.Buildings.Count - 1; j >= 0; j--)
			{
				Building building = this.Buildings[j];
				if (building.BuildingType == null || !building.BuildingType.IsReady)
				{
					this.Buildings.RemoveAt(j);
					flag = true;
				}
			}
			if (!flag)
			{
				foreach (Building building2 in this.BuildingsInProgress)
				{
					if (building2.BuildingType == null || !building2.BuildingType.IsReady)
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				this.BuildingsInProgress.Clear();
			}
			if (this.Governor != null && this.Governor.GovernorOf == null)
			{
				this.Governor = null;
			}
		}

		public IReadOnlyCollection<Town.SellLog> SoldItems
		{
			get
			{
				return this._soldItems;
			}
		}

		public IFaction MapFaction
		{
			get
			{
				Clan ownerClan = this.OwnerClan;
				if (ownerClan == null)
				{
					return null;
				}
				return ownerClan.MapFaction;
			}
		}

		public bool IsUnderSiege
		{
			get
			{
				return base.Settlement.IsUnderSiege;
			}
		}

		[CachedData]
		public MBReadOnlyList<Village> Villages
		{
			get
			{
				return base.Settlement.BoundVillages;
			}
		}

		[SaveableProperty(1030)]
		public Clan LastCapturedBy { get; set; }

		private void ChangeClanInternal(Clan value)
		{
			if (this._ownerClan != null)
			{
				this.RemoveOwnerClan();
			}
			this._ownerClan = value;
			if (this._ownerClan != null)
			{
				this.SetNewOwnerClan();
			}
			this.ConsiderSiegesAndMapEventsInternal(this._ownerClan);
		}

		public float GetEffectOfBuildings(BuildingEffectEnum buildingEffect)
		{
			float num = 0f;
			foreach (Building building in this.Buildings)
			{
				num += building.GetBuildingEffectAmount(buildingEffect);
			}
			return num;
		}

		internal void ConsiderSiegesAndMapEventsInternal(IFaction factionToConsiderAgainst)
		{
			MobileParty garrisonParty = base.GarrisonParty;
			if (garrisonParty != null)
			{
				garrisonParty.ConsiderMapEventsAndSiegesInternal(factionToConsiderAgainst);
			}
			foreach (Village village in base.Settlement.BoundVillages)
			{
				VillagerPartyComponent villagerPartyComponent = village.VillagerPartyComponent;
				if (villagerPartyComponent != null)
				{
					villagerPartyComponent.MobileParty.ConsiderMapEventsAndSiegesInternal(factionToConsiderAgainst);
				}
			}
		}

		private void SetNewOwnerClan()
		{
			this._ownerClan.OnFortificationAdded(this);
			foreach (Village village in base.Settlement.BoundVillages)
			{
				IPartyVisual visuals = village.Settlement.Party.Visuals;
				if (visuals != null)
				{
					visuals.SetMapIconAsDirty();
				}
				VillagerPartyComponent villagerPartyComponent = village.VillagerPartyComponent;
				if (villagerPartyComponent != null)
				{
					IPartyVisual visuals2 = villagerPartyComponent.MobileParty.Party.Visuals;
					if (visuals2 != null)
					{
						visuals2.SetMapIconAsDirty();
					}
				}
			}
		}

		private void RemoveOwnerClan()
		{
			this._ownerClan.OnFortificationRemoved(this);
		}

		public bool HasTournament
		{
			get
			{
				return this.IsTown && Campaign.Current.TournamentManager.GetTournamentGame(this) != null;
			}
		}

		internal void DailyTick()
		{
			this.Loyalty += this.LoyaltyChange;
			this.Security += this.SecurityChange;
			if (base.FoodStocks > 0f)
			{
				base.Owner.OnConsumedFood();
			}
			base.FoodStocks += this.FoodChange;
			if (base.FoodStocks < 0f)
			{
				base.FoodStocks = 0f;
				base.Owner.RemainingFoodPercentage = -100;
			}
			else
			{
				base.Owner.RemainingFoodPercentage = 0;
			}
			if (base.FoodStocks > (float)this.FoodStocksUpperLimit())
			{
				base.FoodStocks = (float)this.FoodStocksUpperLimit();
			}
			if (!this.CurrentBuilding.BuildingType.IsDefaultProject)
			{
				this.TickCurrentBuilding();
			}
			else if (this.Governor != null && this.Governor.GetPerkValue(DefaultPerks.Charm.Virile) && MBRandom.RandomFloat < 0.1f)
			{
				Hero randomElement = base.Settlement.Notables.GetRandomElement<Hero>();
				if (randomElement != null)
				{
					ChangeRelationAction.ApplyRelationChangeBetweenHeroes(this.Governor.Clan.Leader, randomElement, MathF.Round(DefaultPerks.Charm.Virile.SecondaryBonus), false);
				}
			}
			if (this.Governor != null)
			{
				if (this.Governor.GetPerkValue(DefaultPerks.Roguery.WhiteLies) && MBRandom.RandomFloat < 0.02f)
				{
					Hero randomElement2 = base.Settlement.Notables.GetRandomElement<Hero>();
					if (randomElement2 != null)
					{
						ChangeRelationAction.ApplyRelationChangeBetweenHeroes(this.Governor, randomElement2, MathF.Round(DefaultPerks.Roguery.WhiteLies.SecondaryBonus), true);
					}
				}
				if (this.Governor.GetPerkValue(DefaultPerks.Roguery.Scarface) && MBRandom.RandomFloat < 0.05f)
				{
					Hero randomElementWithPredicate = base.Settlement.Notables.GetRandomElementWithPredicate((Hero x) => x.IsGangLeader);
					if (randomElementWithPredicate != null)
					{
						ChangeRelationAction.ApplyRelationChangeBetweenHeroes(this.Governor, randomElementWithPredicate, MathF.Round(DefaultPerks.Roguery.Scarface.SecondaryBonus), true);
					}
				}
			}
			base.Owner.Settlement.Prosperity += this.ProsperityChange;
			if (base.Owner.Settlement.Prosperity < 0f)
			{
				base.Owner.Settlement.Prosperity = 0f;
			}
			this.HandleMilitiaAndGarrisonOfSettlementDaily();
			this.RepairWallsOfSettlementDaily();
		}

		private void HandleMilitiaAndGarrisonOfSettlementDaily()
		{
			base.Owner.Settlement.Militia += this.MilitiaChange;
			if (this.GarrisonChange >= 1 && base.GarrisonParty == null)
			{
				base.Owner.Settlement.AddGarrisonParty(false);
			}
			if (base.GarrisonParty != null && base.GarrisonParty.IsActive && base.GarrisonParty.MapEvent == null && base.GarrisonParty.CurrentSettlement != null)
			{
				int num = Campaign.Current.Models.DailyTroopXpBonusModel.CalculateDailyTroopXpBonus(this);
				float num2 = Campaign.Current.Models.DailyTroopXpBonusModel.CalculateGarrisonXpBonusMultiplier(this);
				if (num > 0)
				{
					foreach (TroopRosterElement troopRosterElement in base.GarrisonParty.MemberRoster.GetTroopRoster())
					{
						base.GarrisonParty.MemberRoster.AddXpToTroop(MathF.Round((float)num * num2 * (float)troopRosterElement.Number), troopRosterElement.Character);
					}
				}
				this.DailyGarrisonAdjustment();
			}
		}

		private void RepairWallsOfSettlementDaily()
		{
			Settlement settlement = base.Owner.Settlement;
			float maxWallHitPoints = settlement.MaxWallHitPoints;
			if (settlement.SettlementWallSectionHitPointsRatioList.Any((float health) => health < 1f) && !settlement.IsUnderSiege)
			{
				float num = maxWallHitPoints * 0.02f;
				float effectOfBuildings = this.GetEffectOfBuildings(BuildingEffectEnum.WallRepairSpeed);
				if (effectOfBuildings > 0f)
				{
					num += num * effectOfBuildings * 0.01f;
				}
				float num2 = num / settlement.MaxHitPointsOfOneWallSection;
				for (int i = 0; i < settlement.SettlementWallSectionHitPointsRatioList.Count; i++)
				{
					float num3 = settlement.SettlementWallSectionHitPointsRatioList[i];
					float num4 = MathF.Min(1f - num3, num2);
					settlement.SetWallSectionHitPointsRatioAtIndex(i, num3 + num4);
					num2 -= num4;
					if (num2 <= 0f)
					{
						break;
					}
				}
			}
		}

		private void DesertOneTroopFromGarrison()
		{
			if (base.GarrisonParty.MemberRoster.TotalManCount > 0)
			{
				int num = (int)(MBRandom.RandomFloat * (float)base.GarrisonParty.MemberRoster.TotalManCount);
				for (int i = 0; i < base.GarrisonParty.MemberRoster.Count; i++)
				{
					num -= base.GarrisonParty.MemberRoster.GetElementNumber(i);
					if (num < 0)
					{
						TroopRoster troopRoster = TroopRoster.CreateDummyTroopRoster();
						MobilePartyHelper.DesertTroopsFromParty(base.GarrisonParty, i, 1, 0, ref troopRoster);
						return;
					}
				}
			}
		}

		private void DailyGarrisonAdjustment()
		{
			int num = base.GarrisonParty.CurrentSettlement.Town.GarrisonChange;
			int num2 = (this.GarrisonAutoRecruitmentIsEnabled ? base.GarrisonParty.CurrentSettlement.Town.GarrisonChangeAutoRecruitment : 0);
			num -= num2;
			int limitedPartySize = base.GarrisonParty.LimitedPartySize;
			if (num > 0)
			{
				num = MBMath.ClampInt(num, 0, limitedPartySize - base.GarrisonParty.Party.NumberOfAllMembers - num2);
			}
			if (num < 0)
			{
				for (int i = 0; i < MathF.Abs(num); i++)
				{
					this.DesertOneTroopFromGarrison();
				}
			}
			else if (num > 0)
			{
				base.GarrisonParty.MemberRoster.AddToCounts(base.GarrisonParty.MapFaction.BasicTroop, num, false, 0, 0, true, -1);
			}
			if (num2 > 0)
			{
				int num3 = SettlementHelper.NumberOfVolunteersCanBeRecruitedForGarrison(base.GarrisonParty.CurrentSettlement);
				Hero leader = base.GarrisonParty.CurrentSettlement.OwnerClan.Leader;
				if (num3 > 0)
				{
					float num4 = MBRandom.RandomFloat * (float)num3;
					foreach (Hero hero in base.GarrisonParty.CurrentSettlement.Notables)
					{
						if (num4 <= 0f)
						{
							break;
						}
						int num5 = Campaign.Current.Models.VolunteerModel.MaximumIndexHeroCanRecruitFromHero(leader, hero, -101);
						for (int j = 0; j < num5; j++)
						{
							if (hero.VolunteerTypes[j] != null)
							{
								num4 -= 1f;
								if (num4 <= 0f)
								{
									base.GarrisonParty.MemberRoster.AddToCounts(hero.VolunteerTypes[j], 1, false, 0, 0, true, -1);
									leader.Clan.AutoRecruitmentExpenses += Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(hero.VolunteerTypes[j], leader, false);
									hero.VolunteerTypes[j] = null;
									break;
								}
							}
						}
					}
					if (num4 > 0f)
					{
						foreach (Village village in base.GarrisonParty.CurrentSettlement.BoundVillages)
						{
							if (num4 <= 0f)
							{
								break;
							}
							if (village.VillageState == Village.VillageStates.Normal)
							{
								foreach (Hero hero2 in village.Settlement.Notables)
								{
									if (num4 <= 0f)
									{
										break;
									}
									int num6 = Campaign.Current.Models.VolunteerModel.MaximumIndexHeroCanRecruitFromHero(leader, hero2, -101);
									for (int k = 0; k < num6; k++)
									{
										if (hero2.VolunteerTypes[k] != null)
										{
											num4 -= 1f;
											if (num4 <= 0f)
											{
												base.GarrisonParty.MemberRoster.AddToCounts(hero2.VolunteerTypes[k], 1, false, 0, 0, true, -1);
												leader.Clan.AutoRecruitmentExpenses += Campaign.Current.Models.PartyWageModel.GetTroopRecruitmentCost(hero2.VolunteerTypes[k], leader, false);
												hero2.VolunteerTypes[k] = null;
												break;
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if (base.GarrisonParty.Party.NumberOfAllMembers > limitedPartySize)
			{
				int num7 = MBRandom.RoundRandomized((float)(base.GarrisonParty.Party.NumberOfAllMembers - limitedPartySize) * 0.2f);
				for (int l = 0; l < num7; l++)
				{
					this.DesertOneTroopFromGarrison();
				}
			}
		}

		public int GetWallLevel()
		{
			int num = 0;
			foreach (Building building in this.Buildings)
			{
				if (building.BuildingType == DefaultBuildingTypes.Fortifications && this.IsTown)
				{
					num = building.CurrentLevel;
					break;
				}
				if (building.BuildingType == DefaultBuildingTypes.Wall && this.IsCastle)
				{
					num = building.CurrentLevel;
					break;
				}
			}
			return num;
		}

		public override string ToString()
		{
			return base.Name.ToString();
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			if (!base.IsInitialized)
			{
				this._wallLevel = ((node.Attributes["level"] != null) ? int.Parse(node.Attributes["level"].Value) : 0);
			}
			this._isCastle = node.Attributes["is_castle"] != null && bool.Parse(node.Attributes["is_castle"].Value);
			base.BackgroundCropPosition = float.Parse(node.Attributes["background_crop_position"].Value);
			base.BackgroundMeshName = node.Attributes["background_mesh"].Value;
			base.WaitMeshName = node.Attributes["wait_mesh"].Value;
			base.Deserialize(objectManager, node);
		}

		public void SetSoldItems(IEnumerable<Town.SellLog> logList)
		{
			this._soldItems = logList.ToArray<Town.SellLog>();
		}

		public override int GetItemPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false)
		{
			return this.MarketData.GetPrice(item, tradingParty, isSelling, null);
		}

		public override int GetItemPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false)
		{
			return this.MarketData.GetPrice(itemRosterElement, tradingParty, isSelling, null);
		}

		public override SettlementComponent.ProsperityLevel GetProsperityLevel()
		{
			if (base.Owner.Settlement.Prosperity >= 5000f)
			{
				return SettlementComponent.ProsperityLevel.High;
			}
			if (base.Owner.Settlement.Prosperity >= 2000f)
			{
				return SettlementComponent.ProsperityLevel.Mid;
			}
			return SettlementComponent.ProsperityLevel.Low;
		}

		private void TickCurrentBuilding()
		{
			if (this.BuildingsInProgress.Peek().CurrentLevel == 3)
			{
				this.BuildingsInProgress.Dequeue();
			}
			if (!base.Owner.Settlement.IsUnderSiege && !this.BuildingsInProgress.IsEmpty<Building>())
			{
				BuildingConstructionModel buildingConstructionModel = Campaign.Current.Models.BuildingConstructionModel;
				Building building = this.BuildingsInProgress.Peek();
				building.BuildingProgress += this.Construction;
				int num = (this.IsCastle ? buildingConstructionModel.CastleBoostCost : buildingConstructionModel.TownBoostCost);
				if (this.BoostBuildingProcess > 0)
				{
					this.BoostBuildingProcess -= num;
					if (this.BoostBuildingProcess < 0)
					{
						this.BoostBuildingProcess = 0;
					}
				}
				if ((float)building.GetConstructionCost() <= building.BuildingProgress)
				{
					if (building.CurrentLevel < 3)
					{
						building.LevelUp();
					}
					if (building.CurrentLevel == 3)
					{
						building.BuildingProgress = (float)building.GetConstructionCost();
					}
					this.BuildingsInProgress.Dequeue();
				}
			}
		}

		protected override void OnInventoryUpdated(ItemRosterElement item, int count)
		{
			this.MarketData.OnTownInventoryUpdated(item, count);
		}

		public float GetItemCategoryPriceIndex(ItemCategory itemCategory)
		{
			return this.MarketData.GetPriceFactor(itemCategory);
		}

		private const int InitialTownGold = 20000;

		private const int HighProsperityThreshold = 5000;

		private const int MidProsperityThreshold = 2000;

		[SaveableField(1000)]
		private int _wallLevel;

		private bool _isCastle;

		[SaveableField(1016)]
		public bool GarrisonAutoRecruitmentIsEnabled = true;

		[SaveableField(1040)]
		private Clan _ownerClan;

		[SaveableField(1015)]
		private float _security;

		[SaveableField(1014)]
		private float _loyalty;

		[CachedData]
		private MBList<Village> _tradeBoundVillagesCache;

		[SaveableField(1006)]
		public MBList<Building> Buildings;

		[SaveableField(1007)]
		public Queue<Building> BuildingsInProgress;

		[SaveableField(1008)]
		public int BoostBuildingProcess;

		[SaveableField(1009)]
		private readonly TownMarketData _marketData;

		[SaveableField(1010)]
		private int _tradeTax;

		[SaveableField(1011)]
		public bool InRebelliousState;

		[SaveableField(1012)]
		private Hero _governor;

		[SaveableField(1013)]
		private Town.SellLog[] _soldItems = new Town.SellLog[0];

		public struct SellLog
		{
			public static void AutoGeneratedStaticCollectObjectsSellLog(object o, List<object> collectedObjects)
			{
				((Town.SellLog)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.Category);
			}

			internal static object AutoGeneratedGetMemberValueCategory(object o)
			{
				return ((Town.SellLog)o).Category;
			}

			internal static object AutoGeneratedGetMemberValueNumber(object o)
			{
				return ((Town.SellLog)o).Number;
			}

			[SaveableProperty(200)]
			public ItemCategory Category { get; private set; }

			[SaveableProperty(201)]
			public int Number { get; private set; }

			public SellLog(ItemCategory category, int count)
			{
				this.Category = category;
				this.Number = count;
			}
		}
	}
}
