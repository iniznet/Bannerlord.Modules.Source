using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Buildings
{
	// Token: 0x02000371 RID: 881
	public class Building
	{
		// Token: 0x06003363 RID: 13155 RVA: 0x000D43B4 File Offset: 0x000D25B4
		internal static void AutoGeneratedStaticCollectObjectsBuilding(object o, List<object> collectedObjects)
		{
			((Building)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06003364 RID: 13156 RVA: 0x000D43C2 File Offset: 0x000D25C2
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.BuildingType);
			collectedObjects.Add(this.Town);
		}

		// Token: 0x06003365 RID: 13157 RVA: 0x000D43DC File Offset: 0x000D25DC
		internal static object AutoGeneratedGetMemberValueTown(object o)
		{
			return ((Building)o).Town;
		}

		// Token: 0x06003366 RID: 13158 RVA: 0x000D43E9 File Offset: 0x000D25E9
		internal static object AutoGeneratedGetMemberValueBuildingType(object o)
		{
			return ((Building)o).BuildingType;
		}

		// Token: 0x06003367 RID: 13159 RVA: 0x000D43F6 File Offset: 0x000D25F6
		internal static object AutoGeneratedGetMemberValueBuildingProgress(object o)
		{
			return ((Building)o).BuildingProgress;
		}

		// Token: 0x06003368 RID: 13160 RVA: 0x000D4408 File Offset: 0x000D2608
		internal static object AutoGeneratedGetMemberValueIsCurrentlyDefault(object o)
		{
			return ((Building)o).IsCurrentlyDefault;
		}

		// Token: 0x06003369 RID: 13161 RVA: 0x000D441A File Offset: 0x000D261A
		internal static object AutoGeneratedGetMemberValue_currentLevel(object o)
		{
			return ((Building)o)._currentLevel;
		}

		// Token: 0x0600336A RID: 13162 RVA: 0x000D442C File Offset: 0x000D262C
		internal static object AutoGeneratedGetMemberValue_hitpoints(object o)
		{
			return ((Building)o)._hitpoints;
		}

		// Token: 0x17000C8D RID: 3213
		// (get) Token: 0x0600336B RID: 13163 RVA: 0x000D443E File Offset: 0x000D263E
		public TextObject Name
		{
			get
			{
				return this.BuildingType.Name;
			}
		}

		// Token: 0x17000C8E RID: 3214
		// (get) Token: 0x0600336C RID: 13164 RVA: 0x000D444B File Offset: 0x000D264B
		public TextObject Explanation
		{
			get
			{
				return this.BuildingType.Explanation;
			}
		}

		// Token: 0x17000C8F RID: 3215
		// (get) Token: 0x0600336D RID: 13165 RVA: 0x000D4458 File Offset: 0x000D2658
		// (set) Token: 0x0600336E RID: 13166 RVA: 0x000D4460 File Offset: 0x000D2660
		[SaveableProperty(6)]
		public Town Town { get; private set; }

		// Token: 0x17000C90 RID: 3216
		// (get) Token: 0x0600336F RID: 13167 RVA: 0x000D4469 File Offset: 0x000D2669
		// (set) Token: 0x06003370 RID: 13168 RVA: 0x000D4471 File Offset: 0x000D2671
		public int CurrentLevel
		{
			get
			{
				return this._currentLevel;
			}
			set
			{
				this._currentLevel = value;
				if (this.Town.Owner != null)
				{
					this.Town.Owner.Visuals.RefreshLevelMask(this.Town.Owner);
				}
			}
		}

		// Token: 0x06003371 RID: 13169 RVA: 0x000D44A7 File Offset: 0x000D26A7
		public Building(BuildingType buildingType, Town town, float buildingProgress = 0f, int currentLevel = 0)
		{
			this.BuildingType = buildingType;
			this.BuildingProgress = buildingProgress;
			this.Town = town;
			this._currentLevel = currentLevel;
			this.IsCurrentlyDefault = false;
			bool isDefaultProject = buildingType.IsDefaultProject;
		}

		// Token: 0x06003372 RID: 13170 RVA: 0x000D44E5 File Offset: 0x000D26E5
		public override int GetHashCode()
		{
			return this.BuildingType.GetHashCode() + this.Town.GetHashCode();
		}

		// Token: 0x06003373 RID: 13171 RVA: 0x000D4500 File Offset: 0x000D2700
		public int GetConstructionCost()
		{
			float num = 1f;
			if (this.Town.Settlement.OwnerClan.Kingdom != null && this.Town.Settlement.OwnerClan.Kingdom.ActivePolicies.Contains(DefaultPolicies.CastleCharters))
			{
				num = 0.8f;
			}
			return (int)((float)this.BuildingType.GetProductionCost(this._currentLevel) * num);
		}

		// Token: 0x06003374 RID: 13172 RVA: 0x000D456C File Offset: 0x000D276C
		public void LevelUp()
		{
			if (this.CurrentLevel < 3)
			{
				int constructionCost = this.GetConstructionCost();
				this.CurrentLevel++;
				this.BuildingProgress -= (float)constructionCost;
				CampaignEventDispatcher.Instance.OnBuildingLevelChanged(this.Town, this, 1);
			}
		}

		// Token: 0x06003375 RID: 13173 RVA: 0x000D45B8 File Offset: 0x000D27B8
		public void LevelDown()
		{
			if (this.CurrentLevel != this.BuildingType.StartLevel)
			{
				this.CurrentLevel--;
				this.BuildingProgress = 0f;
				this._hitpoints = 100f;
				CampaignEventDispatcher.Instance.OnBuildingLevelChanged(this.Town, this, -1);
			}
		}

		// Token: 0x06003376 RID: 13174 RVA: 0x000D4610 File Offset: 0x000D2810
		public void HitPointChanged(float change)
		{
			if (this.CurrentLevel == this.BuildingType.StartLevel)
			{
				return;
			}
			this._hitpoints = MathF.Clamp(this._hitpoints + change, 0f, 100f);
			if (this._hitpoints == 0f)
			{
				this.LevelDown();
			}
		}

		// Token: 0x06003377 RID: 13175 RVA: 0x000D4664 File Offset: 0x000D2864
		public float GetBuildingEffectAmount(BuildingEffectEnum effect)
		{
			if (this._currentLevel < this.BuildingType.StartLevel || this._currentLevel > 3)
			{
				Debug.FailedAssert("Building: " + this.Name + " current level is out of bounds!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Buildings\\Building.cs", "GetBuildingEffectAmount", 126);
			}
			if (this._currentLevel == 0)
			{
				return 0f;
			}
			return Campaign.Current.Models.BuildingEffectModel.GetBuildingEffectAmount(this, effect);
		}

		// Token: 0x06003378 RID: 13176 RVA: 0x000D46D7 File Offset: 0x000D28D7
		public TextObject GetBonusExplanation()
		{
			if (this._currentLevel == 0)
			{
				return TextObject.Empty;
			}
			return this.GetBonusExplanations()[this._currentLevel - 1];
		}

		// Token: 0x06003379 RID: 13177 RVA: 0x000D46F8 File Offset: 0x000D28F8
		private TextObject[] GetBonusExplanations()
		{
			TextObject[] array = new TextObject[]
			{
				TextObject.Empty,
				TextObject.Empty,
				TextObject.Empty
			};
			if (this._currentLevel == 0 || this._currentLevel > 3)
			{
				return array;
			}
			for (int i = 0; i < this._currentLevel; i++)
			{
				array[i] = this.BuildingType.GetExplanationAtLevel(i);
			}
			return array;
		}

		// Token: 0x040010B4 RID: 4276
		[SaveableField(0)]
		public readonly BuildingType BuildingType;

		// Token: 0x040010B5 RID: 4277
		[SaveableField(1)]
		public float BuildingProgress;

		// Token: 0x040010B6 RID: 4278
		public const float MaxHitpoints = 100f;

		// Token: 0x040010B7 RID: 4279
		[SaveableField(2)]
		public bool IsCurrentlyDefault;

		// Token: 0x040010B8 RID: 4280
		[SaveableField(3)]
		private int _currentLevel;

		// Token: 0x040010BA RID: 4282
		[SaveableField(5)]
		private float _hitpoints = 100f;
	}
}
