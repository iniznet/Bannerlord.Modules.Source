using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Buildings
{
	public sealed class BuildingType : MBObjectBase
	{
		internal static void AutoGeneratedStaticCollectObjectsBuildingType(object o, List<object> collectedObjects)
		{
			((BuildingType)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public static MBReadOnlyList<BuildingType> All
		{
			get
			{
				return Campaign.Current.AllBuildingTypes;
			}
		}

		public TextObject Name { get; private set; }

		public TextObject Explanation { get; private set; }

		public BuildingType(string stringId)
			: base(stringId)
		{
		}

		public void Initialize(TextObject name, TextObject explanation, int[] productionCosts, BuildingLocation buildingLocation, Tuple<BuildingEffectEnum, float, float, float>[] effects, int startLevel = 0)
		{
			base.Initialize();
			this.Name = name;
			this.Explanation = explanation;
			this._productionCosts = productionCosts;
			this.IsDefaultProject = buildingLocation == BuildingLocation.Daily;
			this._effects = effects.Select((Tuple<BuildingEffectEnum, float, float, float> x) => new BuildingType.EffectInfo(x.Item1, x.Item2, x.Item3, x.Item4)).ToArray<BuildingType.EffectInfo>();
			this.StartLevel = startLevel;
			this.BuildingLocation = buildingLocation;
			base.AfterInitialized();
		}

		public override string ToString()
		{
			return this.Name.ToString();
		}

		public int GetProductionCost(int level)
		{
			if (level < this.StartLevel || level >= 3)
			{
				return 0;
			}
			return this._productionCosts[level];
		}

		public float GetBaseBuildingEffectAmount(BuildingEffectEnum effect, int level)
		{
			for (int i = 0; i < this._effects.Length; i++)
			{
				if (this._effects[i].BuildingEffect == effect)
				{
					return this._effects[i].GetEffectValue(level);
				}
			}
			return 0f;
		}

		public TextObject GetExplanationAtLevel(int level)
		{
			if (level == 0 || level > 3)
			{
				return TextObject.Empty;
			}
			TextObject textObject = TextObject.Empty;
			if (this._effects.Length == 1)
			{
				textObject = GameTexts.FindText("str_building_effect_explanation", Enum.GetName(typeof(BuildingEffectEnum), this._effects[0].BuildingEffect));
				textObject.SetTextVariable("BONUS_AMOUNT", this._effects[0].GetEffectValue(level));
			}
			else if (this._effects.Length >= 2)
			{
				textObject = GameTexts.FindText("str_string_newline_string", null);
				TextObject textObject2 = GameTexts.FindText("str_building_effect_explanation", Enum.GetName(typeof(BuildingEffectEnum), this._effects[0].BuildingEffect));
				textObject2.SetTextVariable("BONUS_AMOUNT", this._effects[0].GetEffectValue(level));
				TextObject textObject3 = GameTexts.FindText("str_building_effect_explanation", Enum.GetName(typeof(BuildingEffectEnum), this._effects[1].BuildingEffect));
				textObject3.SetTextVariable("BONUS_AMOUNT", this._effects[1].GetEffectValue(level));
				textObject.SetTextVariable("STR1", textObject2);
				textObject.SetTextVariable("STR2", textObject3);
				textObject.SetTextVariable("newline", "\n");
				for (int i = 2; i < this._effects.Length; i++)
				{
					TextObject textObject4 = GameTexts.FindText("str_string_newline_string", null);
					textObject4.SetTextVariable("STR1", textObject);
					TextObject textObject5 = GameTexts.FindText("str_building_effect_explanation", Enum.GetName(typeof(BuildingEffectEnum), this._effects[i].BuildingEffect));
					textObject5.SetTextVariable("BONUS_AMOUNT", this._effects[i].GetEffectValue(level));
					textObject4.SetTextVariable("STR2", textObject5);
					textObject4.SetTextVariable("newline", "\n");
					textObject = textObject4;
				}
			}
			return textObject;
		}

		public const int MaxLevel = 3;

		public bool IsDefaultProject;

		private int[] _productionCosts = new int[3];

		public int StartLevel;

		public BuildingLocation BuildingLocation;

		private BuildingType.EffectInfo[] _effects;

		public struct EffectInfo
		{
			public BuildingEffectEnum BuildingEffect { get; }

			public float Level1Effect { get; }

			public float Level2Effect { get; }

			public float Level3Effect { get; }

			public float GetEffectValue(int i)
			{
				if (i == 1)
				{
					return this.Level1Effect;
				}
				if (i != 2)
				{
					return this.Level3Effect;
				}
				return this.Level2Effect;
			}

			public EffectInfo(BuildingEffectEnum effect, float[] effectValues)
			{
				this.BuildingEffect = effect;
				this.Level1Effect = effectValues[0];
				this.Level2Effect = effectValues[1];
				this.Level3Effect = effectValues[2];
			}

			public EffectInfo(BuildingEffectEnum effect, float effectValue1, float effectValue2, float effectValue3)
			{
				this.BuildingEffect = effect;
				this.Level1Effect = effectValue1;
				this.Level2Effect = effectValue2;
				this.Level3Effect = effectValue3;
			}
		}
	}
}
