using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	public struct ItemData
	{
		public static void AutoGeneratedStaticCollectObjectsItemData(object o, List<object> collectedObjects)
		{
			((ItemData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		internal static object AutoGeneratedGetMemberValueSupply(object o)
		{
			return ((ItemData)o).Supply;
		}

		internal static object AutoGeneratedGetMemberValueDemand(object o)
		{
			return ((ItemData)o).Demand;
		}

		internal static object AutoGeneratedGetMemberValueInStore(object o)
		{
			return ((ItemData)o).InStore;
		}

		internal static object AutoGeneratedGetMemberValueInStoreValue(object o)
		{
			return ((ItemData)o).InStoreValue;
		}

		public ItemData(float supply, float demand, int inStore, int inStoreValue)
		{
			this.Supply = supply;
			this.Demand = demand;
			this.InStore = inStore;
			this.InStoreValue = inStoreValue;
		}

		public ItemData Add(ItemData other)
		{
			return new ItemData(this.Supply + other.Supply, this.Demand + other.Demand, this.InStore + other.InStore, this.InStoreValue + other.InStoreValue);
		}

		internal ItemData AddDemand(float demandAmount)
		{
			return new ItemData(this.Supply, this.Demand + demandAmount, this.InStore, this.InStoreValue);
		}

		internal ItemData AddSupply(float supplyAmount)
		{
			return new ItemData(this.Supply + supplyAmount, this.Demand, this.InStore, this.InStoreValue);
		}

		internal ItemData AddInStore(int inStoreAmount, int value)
		{
			return new ItemData(this.Supply, this.Demand, this.InStore + inStoreAmount, this.InStoreValue + inStoreAmount * value);
		}

		internal ItemData AddSupplyDemand(float supply, float demand)
		{
			return new ItemData(this.Supply + supply, this.Demand + demand, this.InStore, this.InStoreValue);
		}

		[SaveableField(1)]
		public readonly float Supply;

		[SaveableField(2)]
		public readonly float Demand;

		[SaveableField(3)]
		public readonly int InStore;

		[SaveableField(4)]
		public readonly int InStoreValue;
	}
}
