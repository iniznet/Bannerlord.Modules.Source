using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements.Buildings;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.CampaignSystem.Siege;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	// Token: 0x0200035C RID: 860
	public sealed class Settlement : MBObjectBase, ILocatable<Settlement>, IMapPoint, ITrackableCampaignObject, ITrackableBase, ISiegeEventSide, IMapEntity, IRandomOwner
	{
		// Token: 0x060030A3 RID: 12451 RVA: 0x000CC470 File Offset: 0x000CA670
		internal static void AutoGeneratedStaticCollectObjectsSettlement(object o, List<object> collectedObjects)
		{
			((Settlement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060030A4 RID: 12452 RVA: 0x000CC480 File Offset: 0x000CA680
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.ClaimedBy);
			collectedObjects.Add(this.Stash);
			collectedObjects.Add(this._nextLocatable);
			collectedObjects.Add(this._settlementWallSectionHitPointsRatioList);
			collectedObjects.Add(this._boundVillages);
			collectedObjects.Add(this._lastAttackerParty);
			collectedObjects.Add(this._siegeEngineMissiles);
			collectedObjects.Add(this.Party);
			collectedObjects.Add(this.SiegeEvent);
			collectedObjects.Add(this.SettlementComponent);
			collectedObjects.Add(this.SiegeEngines);
			collectedObjects.Add(this.SiegeStrategy);
			collectedObjects.Add(this.Alleys);
			collectedObjects.Add(this.LocationComplex);
		}

		// Token: 0x060030A5 RID: 12453 RVA: 0x000CC53C File Offset: 0x000CA73C
		internal static object AutoGeneratedGetMemberValueParty(object o)
		{
			return ((Settlement)o).Party;
		}

		// Token: 0x060030A6 RID: 12454 RVA: 0x000CC549 File Offset: 0x000CA749
		internal static object AutoGeneratedGetMemberValueBribePaid(object o)
		{
			return ((Settlement)o).BribePaid;
		}

		// Token: 0x060030A7 RID: 12455 RVA: 0x000CC55B File Offset: 0x000CA75B
		internal static object AutoGeneratedGetMemberValueSiegeEvent(object o)
		{
			return ((Settlement)o).SiegeEvent;
		}

		// Token: 0x060030A8 RID: 12456 RVA: 0x000CC568 File Offset: 0x000CA768
		internal static object AutoGeneratedGetMemberValueIsActive(object o)
		{
			return ((Settlement)o).IsActive;
		}

		// Token: 0x060030A9 RID: 12457 RVA: 0x000CC57A File Offset: 0x000CA77A
		internal static object AutoGeneratedGetMemberValueNumberOfEnemiesSpottedAround(object o)
		{
			return ((Settlement)o).NumberOfEnemiesSpottedAround;
		}

		// Token: 0x060030AA RID: 12458 RVA: 0x000CC58C File Offset: 0x000CA78C
		internal static object AutoGeneratedGetMemberValueNumberOfAlliesSpottedAround(object o)
		{
			return ((Settlement)o).NumberOfAlliesSpottedAround;
		}

		// Token: 0x060030AB RID: 12459 RVA: 0x000CC59E File Offset: 0x000CA79E
		internal static object AutoGeneratedGetMemberValueSettlementHitPoints(object o)
		{
			return ((Settlement)o).SettlementHitPoints;
		}

		// Token: 0x060030AC RID: 12460 RVA: 0x000CC5B0 File Offset: 0x000CA7B0
		internal static object AutoGeneratedGetMemberValueSettlementComponent(object o)
		{
			return ((Settlement)o).SettlementComponent;
		}

		// Token: 0x060030AD RID: 12461 RVA: 0x000CC5BD File Offset: 0x000CA7BD
		internal static object AutoGeneratedGetMemberValueGarrisonWagePaymentLimit(object o)
		{
			return ((Settlement)o).GarrisonWagePaymentLimit;
		}

		// Token: 0x060030AE RID: 12462 RVA: 0x000CC5CF File Offset: 0x000CA7CF
		internal static object AutoGeneratedGetMemberValueSiegeEngines(object o)
		{
			return ((Settlement)o).SiegeEngines;
		}

		// Token: 0x060030AF RID: 12463 RVA: 0x000CC5DC File Offset: 0x000CA7DC
		internal static object AutoGeneratedGetMemberValueNumberOfTroopsKilledOnSide(object o)
		{
			return ((Settlement)o).NumberOfTroopsKilledOnSide;
		}

		// Token: 0x060030B0 RID: 12464 RVA: 0x000CC5EE File Offset: 0x000CA7EE
		internal static object AutoGeneratedGetMemberValueSiegeStrategy(object o)
		{
			return ((Settlement)o).SiegeStrategy;
		}

		// Token: 0x060030B1 RID: 12465 RVA: 0x000CC5FB File Offset: 0x000CA7FB
		internal static object AutoGeneratedGetMemberValueAlleys(object o)
		{
			return ((Settlement)o).Alleys;
		}

		// Token: 0x060030B2 RID: 12466 RVA: 0x000CC608 File Offset: 0x000CA808
		internal static object AutoGeneratedGetMemberValueLocationComplex(object o)
		{
			return ((Settlement)o).LocationComplex;
		}

		// Token: 0x060030B3 RID: 12467 RVA: 0x000CC615 File Offset: 0x000CA815
		internal static object AutoGeneratedGetMemberValueCurrentSiegeState(object o)
		{
			return ((Settlement)o).CurrentSiegeState;
		}

		// Token: 0x060030B4 RID: 12468 RVA: 0x000CC627 File Offset: 0x000CA827
		internal static object AutoGeneratedGetMemberValueNumberOfLordPartiesTargeting(object o)
		{
			return ((Settlement)o).NumberOfLordPartiesTargeting;
		}

		// Token: 0x060030B5 RID: 12469 RVA: 0x000CC639 File Offset: 0x000CA839
		internal static object AutoGeneratedGetMemberValueCanBeClaimed(object o)
		{
			return ((Settlement)o).CanBeClaimed;
		}

		// Token: 0x060030B6 RID: 12470 RVA: 0x000CC64B File Offset: 0x000CA84B
		internal static object AutoGeneratedGetMemberValueClaimValue(object o)
		{
			return ((Settlement)o).ClaimValue;
		}

		// Token: 0x060030B7 RID: 12471 RVA: 0x000CC65D File Offset: 0x000CA85D
		internal static object AutoGeneratedGetMemberValueClaimedBy(object o)
		{
			return ((Settlement)o).ClaimedBy;
		}

		// Token: 0x060030B8 RID: 12472 RVA: 0x000CC66A File Offset: 0x000CA86A
		internal static object AutoGeneratedGetMemberValueHasVisited(object o)
		{
			return ((Settlement)o).HasVisited;
		}

		// Token: 0x060030B9 RID: 12473 RVA: 0x000CC67C File Offset: 0x000CA87C
		internal static object AutoGeneratedGetMemberValueLastVisitTimeOfOwner(object o)
		{
			return ((Settlement)o).LastVisitTimeOfOwner;
		}

		// Token: 0x060030BA RID: 12474 RVA: 0x000CC68E File Offset: 0x000CA88E
		internal static object AutoGeneratedGetMemberValuePassedHoursAfterLastThreat(object o)
		{
			return ((Settlement)o).PassedHoursAfterLastThreat;
		}

		// Token: 0x060030BB RID: 12475 RVA: 0x000CC6A0 File Offset: 0x000CA8A0
		internal static object AutoGeneratedGetMemberValueStash(object o)
		{
			return ((Settlement)o).Stash;
		}

		// Token: 0x060030BC RID: 12476 RVA: 0x000CC6AD File Offset: 0x000CA8AD
		internal static object AutoGeneratedGetMemberValue_isVisible(object o)
		{
			return ((Settlement)o)._isVisible;
		}

		// Token: 0x060030BD RID: 12477 RVA: 0x000CC6BF File Offset: 0x000CA8BF
		internal static object AutoGeneratedGetMemberValue_nextLocatable(object o)
		{
			return ((Settlement)o)._nextLocatable;
		}

		// Token: 0x060030BE RID: 12478 RVA: 0x000CC6CC File Offset: 0x000CA8CC
		internal static object AutoGeneratedGetMemberValue_prosperity(object o)
		{
			return ((Settlement)o)._prosperity;
		}

		// Token: 0x060030BF RID: 12479 RVA: 0x000CC6DE File Offset: 0x000CA8DE
		internal static object AutoGeneratedGetMemberValue_readyMilitia(object o)
		{
			return ((Settlement)o)._readyMilitia;
		}

		// Token: 0x060030C0 RID: 12480 RVA: 0x000CC6F0 File Offset: 0x000CA8F0
		internal static object AutoGeneratedGetMemberValue_settlementWallSectionHitPointsRatioList(object o)
		{
			return ((Settlement)o)._settlementWallSectionHitPointsRatioList;
		}

		// Token: 0x060030C1 RID: 12481 RVA: 0x000CC6FD File Offset: 0x000CA8FD
		internal static object AutoGeneratedGetMemberValue_boundVillages(object o)
		{
			return ((Settlement)o)._boundVillages;
		}

		// Token: 0x060030C2 RID: 12482 RVA: 0x000CC70A File Offset: 0x000CA90A
		internal static object AutoGeneratedGetMemberValue_lastAttackerParty(object o)
		{
			return ((Settlement)o)._lastAttackerParty;
		}

		// Token: 0x060030C3 RID: 12483 RVA: 0x000CC717 File Offset: 0x000CA917
		internal static object AutoGeneratedGetMemberValue_siegeEngineMissiles(object o)
		{
			return ((Settlement)o)._siegeEngineMissiles;
		}

		// Token: 0x17000B99 RID: 2969
		// (get) Token: 0x060030C4 RID: 12484 RVA: 0x000CC724 File Offset: 0x000CA924
		// (set) Token: 0x060030C5 RID: 12485 RVA: 0x000CC72C File Offset: 0x000CA92C
		[SaveableProperty(101)]
		public PartyBase Party { get; private set; }

		// Token: 0x17000B9A RID: 2970
		// (get) Token: 0x060030C6 RID: 12486 RVA: 0x000CC735 File Offset: 0x000CA935
		public int NumberOfLordPartiesAt
		{
			get
			{
				return this._numberOfLordPartiesAt;
			}
		}

		// Token: 0x17000B9B RID: 2971
		// (get) Token: 0x060030C7 RID: 12487 RVA: 0x000CC73D File Offset: 0x000CA93D
		// (set) Token: 0x060030C8 RID: 12488 RVA: 0x000CC745 File Offset: 0x000CA945
		[SaveableProperty(116)]
		public int BribePaid { get; set; }

		// Token: 0x17000B9C RID: 2972
		// (get) Token: 0x060030C9 RID: 12489 RVA: 0x000CC74E File Offset: 0x000CA94E
		// (set) Token: 0x060030CA RID: 12490 RVA: 0x000CC756 File Offset: 0x000CA956
		[SaveableProperty(111)]
		public SiegeEvent SiegeEvent { get; set; }

		// Token: 0x17000B9D RID: 2973
		// (get) Token: 0x060030CB RID: 12491 RVA: 0x000CC75F File Offset: 0x000CA95F
		// (set) Token: 0x060030CC RID: 12492 RVA: 0x000CC767 File Offset: 0x000CA967
		[SaveableProperty(112)]
		public bool IsActive { get; set; }

		// Token: 0x17000B9E RID: 2974
		// (get) Token: 0x060030CD RID: 12493 RVA: 0x000CC770 File Offset: 0x000CA970
		public Hero Owner
		{
			get
			{
				return this.OwnerClan.Leader;
			}
		}

		// Token: 0x17000B9F RID: 2975
		// (get) Token: 0x060030CE RID: 12494 RVA: 0x000CC77D File Offset: 0x000CA97D
		// (set) Token: 0x060030CF RID: 12495 RVA: 0x000CC785 File Offset: 0x000CA985
		public bool IsVisible
		{
			get
			{
				return this._isVisible;
			}
			set
			{
				if (this._isVisible != value)
				{
					this._isVisible = value;
					this.Party.OnVisibilityChanged(value);
				}
			}
		}

		// Token: 0x17000BA0 RID: 2976
		// (get) Token: 0x060030D0 RID: 12496 RVA: 0x000CC7A3 File Offset: 0x000CA9A3
		// (set) Token: 0x060030D1 RID: 12497 RVA: 0x000CC7AB File Offset: 0x000CA9AB
		public bool IsInspected { get; set; }

		// Token: 0x17000BA1 RID: 2977
		// (get) Token: 0x060030D2 RID: 12498 RVA: 0x000CC7B4 File Offset: 0x000CA9B4
		// (set) Token: 0x060030D3 RID: 12499 RVA: 0x000CC7BC File Offset: 0x000CA9BC
		public int WallSectionCount { get; private set; }

		// Token: 0x17000BA2 RID: 2978
		// (get) Token: 0x060030D4 RID: 12500 RVA: 0x000CC7C5 File Offset: 0x000CA9C5
		// (set) Token: 0x060030D5 RID: 12501 RVA: 0x000CC7CD File Offset: 0x000CA9CD
		int ILocatable<Settlement>.LocatorNodeIndex
		{
			get
			{
				return this._locatorNodeIndex;
			}
			set
			{
				this._locatorNodeIndex = value;
			}
		}

		// Token: 0x17000BA3 RID: 2979
		// (get) Token: 0x060030D6 RID: 12502 RVA: 0x000CC7D6 File Offset: 0x000CA9D6
		// (set) Token: 0x060030D7 RID: 12503 RVA: 0x000CC7DE File Offset: 0x000CA9DE
		[SaveableProperty(115)]
		public float NumberOfEnemiesSpottedAround { get; set; }

		// Token: 0x17000BA4 RID: 2980
		// (get) Token: 0x060030D8 RID: 12504 RVA: 0x000CC7E7 File Offset: 0x000CA9E7
		// (set) Token: 0x060030D9 RID: 12505 RVA: 0x000CC7EF File Offset: 0x000CA9EF
		[SaveableProperty(128)]
		public float NumberOfAlliesSpottedAround { get; set; }

		// Token: 0x17000BA5 RID: 2981
		// (get) Token: 0x060030DA RID: 12506 RVA: 0x000CC7F8 File Offset: 0x000CA9F8
		// (set) Token: 0x060030DB RID: 12507 RVA: 0x000CC800 File Offset: 0x000CAA00
		Settlement ILocatable<Settlement>.NextLocatable
		{
			get
			{
				return this._nextLocatable;
			}
			set
			{
				this._nextLocatable = value;
			}
		}

		// Token: 0x17000BA6 RID: 2982
		// (get) Token: 0x060030DC RID: 12508 RVA: 0x000CC809 File Offset: 0x000CAA09
		// (set) Token: 0x060030DD RID: 12509 RVA: 0x000CC811 File Offset: 0x000CAA11
		public float Prosperity
		{
			get
			{
				return this._prosperity;
			}
			set
			{
				this._prosperity = value;
				if (this._prosperity < 0f)
				{
					this._prosperity = 0f;
				}
			}
		}

		// Token: 0x17000BA7 RID: 2983
		// (get) Token: 0x060030DE RID: 12510 RVA: 0x000CC832 File Offset: 0x000CAA32
		public int RandomValue
		{
			get
			{
				return this.Party.RandomValue;
			}
		}

		// Token: 0x17000BA8 RID: 2984
		// (get) Token: 0x060030DF RID: 12511 RVA: 0x000CC83F File Offset: 0x000CAA3F
		public Vec2 GetPosition2D
		{
			get
			{
				return this.Position2D;
			}
		}

		// Token: 0x17000BA9 RID: 2985
		// (get) Token: 0x060030E0 RID: 12512 RVA: 0x000CC847 File Offset: 0x000CAA47
		// (set) Token: 0x060030E1 RID: 12513 RVA: 0x000CC884 File Offset: 0x000CAA84
		public float Militia
		{
			get
			{
				return (float)((this.MilitiaPartyComponent != null && this.MilitiaPartyComponent.MobileParty.IsActive) ? this.MilitiaPartyComponent.MobileParty.Party.NumberOfAllMembers : 0) + this._readyMilitia;
			}
			set
			{
				int num = ((this.MilitiaPartyComponent != null && this.MilitiaPartyComponent.MobileParty.IsActive) ? this.MilitiaPartyComponent.MobileParty.Party.NumberOfAllMembers : 0);
				this._readyMilitia = value - (float)num;
				if (this._readyMilitia < (float)(-(float)num))
				{
					this._readyMilitia = (float)(-(float)num);
				}
				if (this._readyMilitia < -1f || this._readyMilitia > 1f)
				{
					if (this.MilitiaPartyComponent != null)
					{
						this.TransferReadyMilitiasToMilitiaParty();
						return;
					}
					this.SpawnMilitiaParty();
				}
			}
		}

		// Token: 0x17000BAA RID: 2986
		// (get) Token: 0x060030E2 RID: 12514 RVA: 0x000CC911 File Offset: 0x000CAB11
		public MBReadOnlyList<float> SettlementWallSectionHitPointsRatioList
		{
			get
			{
				return this._settlementWallSectionHitPointsRatioList;
			}
		}

		// Token: 0x17000BAB RID: 2987
		// (get) Token: 0x060030E3 RID: 12515 RVA: 0x000CC91C File Offset: 0x000CAB1C
		public float SettlementTotalWallHitPoints
		{
			get
			{
				float num = 0f;
				foreach (float num2 in this._settlementWallSectionHitPointsRatioList)
				{
					num += num2;
				}
				return num * this.MaxHitPointsOfOneWallSection;
			}
		}

		// Token: 0x17000BAC RID: 2988
		// (get) Token: 0x060030E4 RID: 12516 RVA: 0x000CC97C File Offset: 0x000CAB7C
		public float MaxHitPointsOfOneWallSection
		{
			get
			{
				if (this.WallSectionCount == 0)
				{
					return 0f;
				}
				return this.MaxWallHitPoints / (float)this.WallSectionCount;
			}
		}

		// Token: 0x060030E5 RID: 12517 RVA: 0x000CC99A File Offset: 0x000CAB9A
		public void SetWallSectionHitPointsRatioAtIndex(int index, float hitPointsRatio)
		{
			this._settlementWallSectionHitPointsRatioList[index] = MBMath.ClampFloat(hitPointsRatio, 0f, 1f);
		}

		// Token: 0x17000BAD RID: 2989
		// (get) Token: 0x060030E6 RID: 12518 RVA: 0x000CC9B8 File Offset: 0x000CABB8
		// (set) Token: 0x060030E7 RID: 12519 RVA: 0x000CC9C0 File Offset: 0x000CABC0
		[SaveableProperty(121)]
		public float SettlementHitPoints { get; internal set; }

		// Token: 0x17000BAE RID: 2990
		// (get) Token: 0x060030E8 RID: 12520 RVA: 0x000CC9C9 File Offset: 0x000CABC9
		public float MaxWallHitPoints
		{
			get
			{
				return Campaign.Current.Models.WallHitPointCalculationModel.CalculateMaximumWallHitPoint(this.Town);
			}
		}

		// Token: 0x17000BAF RID: 2991
		// (get) Token: 0x060030E9 RID: 12521 RVA: 0x000CC9E5 File Offset: 0x000CABE5
		public MBReadOnlyList<MobileParty> Parties
		{
			get
			{
				return this._partiesCache;
			}
		}

		// Token: 0x17000BB0 RID: 2992
		// (get) Token: 0x060030EA RID: 12522 RVA: 0x000CC9ED File Offset: 0x000CABED
		public MBReadOnlyList<Hero> HeroesWithoutParty
		{
			get
			{
				return this._heroesWithoutPartyCache;
			}
		}

		// Token: 0x17000BB1 RID: 2993
		// (get) Token: 0x060030EB RID: 12523 RVA: 0x000CC9F5 File Offset: 0x000CABF5
		public MBReadOnlyList<Hero> Notables
		{
			get
			{
				return this._notablesCache;
			}
		}

		// Token: 0x17000BB2 RID: 2994
		// (get) Token: 0x060030EC RID: 12524 RVA: 0x000CC9FD File Offset: 0x000CABFD
		// (set) Token: 0x060030ED RID: 12525 RVA: 0x000CCA05 File Offset: 0x000CAC05
		[SaveableProperty(152)]
		public SettlementComponent SettlementComponent { get; private set; }

		// Token: 0x17000BB3 RID: 2995
		// (get) Token: 0x060030EE RID: 12526 RVA: 0x000CCA0E File Offset: 0x000CAC0E
		// (set) Token: 0x060030EF RID: 12527 RVA: 0x000CCA18 File Offset: 0x000CAC18
		public Vec2 GatePosition
		{
			get
			{
				return this._gatePosition;
			}
			private set
			{
				this._gatePosition = value;
				Campaign campaign = Campaign.Current;
				if (campaign.MapSceneWrapper != null)
				{
					this.CurrentNavigationFace = campaign.MapSceneWrapper.GetFaceIndex(this._gatePosition);
				}
			}
		}

		// Token: 0x17000BB4 RID: 2996
		// (get) Token: 0x060030F0 RID: 12528 RVA: 0x000CCA51 File Offset: 0x000CAC51
		// (set) Token: 0x060030F1 RID: 12529 RVA: 0x000CCA59 File Offset: 0x000CAC59
		public Vec2 Position2D
		{
			get
			{
				return this._position;
			}
			private set
			{
				this._position = value;
				Campaign.Current.SettlementLocator.UpdateLocator(this);
			}
		}

		// Token: 0x17000BB5 RID: 2997
		// (get) Token: 0x060030F2 RID: 12530 RVA: 0x000CCA73 File Offset: 0x000CAC73
		// (set) Token: 0x060030F3 RID: 12531 RVA: 0x000CCA7B File Offset: 0x000CAC7B
		public PathFaceRecord CurrentNavigationFace { get; private set; }

		// Token: 0x060030F4 RID: 12532 RVA: 0x000CCA84 File Offset: 0x000CAC84
		public Vec3 GetLogicalPosition()
		{
			float num = 0f;
			Campaign.Current.MapSceneWrapper.GetHeightAtPoint(this.Position2D, ref num);
			return new Vec3(this.Position2D.x, this.Position2D.y, num, -1f);
		}

		// Token: 0x17000BB6 RID: 2998
		// (get) Token: 0x060030F5 RID: 12533 RVA: 0x000CCAD0 File Offset: 0x000CACD0
		public IFaction MapFaction
		{
			get
			{
				Town town = this.Town;
				IFaction faction;
				if ((faction = ((town != null) ? town.MapFaction : null)) == null)
				{
					Village village = this.Village;
					if ((faction = ((village != null) ? village.Bound.MapFaction : null)) == null)
					{
						Hideout hideout = this.Hideout;
						faction = ((hideout != null) ? hideout.MapFaction : null) ?? null;
					}
				}
				return faction;
			}
		}

		// Token: 0x17000BB7 RID: 2999
		// (get) Token: 0x060030F6 RID: 12534 RVA: 0x000CCB25 File Offset: 0x000CAD25
		// (set) Token: 0x060030F7 RID: 12535 RVA: 0x000CCB2D File Offset: 0x000CAD2D
		public TextObject Name
		{
			get
			{
				return this._name;
			}
			set
			{
				this.SetName(value);
			}
		}

		// Token: 0x17000BB8 RID: 3000
		// (get) Token: 0x060030F8 RID: 12536 RVA: 0x000CCB36 File Offset: 0x000CAD36
		// (set) Token: 0x060030F9 RID: 12537 RVA: 0x000CCB3E File Offset: 0x000CAD3E
		public TextObject EncyclopediaText { get; private set; }

		// Token: 0x17000BB9 RID: 3001
		// (get) Token: 0x060030FA RID: 12538 RVA: 0x000CCB47 File Offset: 0x000CAD47
		public string EncyclopediaLink
		{
			get
			{
				return (Campaign.Current.EncyclopediaManager.GetIdentifier(typeof(Settlement)) + "-" + base.StringId) ?? "";
			}
		}

		// Token: 0x17000BBA RID: 3002
		// (get) Token: 0x060030FB RID: 12539 RVA: 0x000CCB7B File Offset: 0x000CAD7B
		public TextObject EncyclopediaLinkWithName
		{
			get
			{
				return HyperlinkTexts.GetSettlementHyperlinkText(this.EncyclopediaLink, this.Name);
			}
		}

		// Token: 0x17000BBB RID: 3003
		// (get) Token: 0x060030FC RID: 12540 RVA: 0x000CCB8E File Offset: 0x000CAD8E
		// (set) Token: 0x060030FD RID: 12541 RVA: 0x000CCB96 File Offset: 0x000CAD96
		[SaveableProperty(122)]
		public int GarrisonWagePaymentLimit { get; private set; }

		// Token: 0x060030FE RID: 12542 RVA: 0x000CCB9F File Offset: 0x000CAD9F
		public void SetGarrisonWagePaymentLimit(int limit)
		{
			this.GarrisonWagePaymentLimit = limit;
		}

		// Token: 0x17000BBC RID: 3004
		// (get) Token: 0x060030FF RID: 12543 RVA: 0x000CCBA8 File Offset: 0x000CADA8
		public ItemRoster ItemRoster
		{
			get
			{
				return this.Party.ItemRoster;
			}
		}

		// Token: 0x17000BBD RID: 3005
		// (get) Token: 0x06003100 RID: 12544 RVA: 0x000CCBB5 File Offset: 0x000CADB5
		public MBReadOnlyList<Village> BoundVillages
		{
			get
			{
				return this._boundVillages;
			}
		}

		// Token: 0x17000BBE RID: 3006
		// (get) Token: 0x06003101 RID: 12545 RVA: 0x000CCBBD File Offset: 0x000CADBD
		// (set) Token: 0x06003102 RID: 12546 RVA: 0x000CCBC8 File Offset: 0x000CADC8
		public MobileParty LastAttackerParty
		{
			get
			{
				return this._lastAttackerParty;
			}
			set
			{
				if (this._lastAttackerParty != value)
				{
					this._lastAttackerParty = value;
					if (value != null && (this.IsFortification || this.IsVillage))
					{
						foreach (Settlement settlement in Settlement.All)
						{
							if ((settlement.IsFortification || settlement.IsVillage) && settlement.LastAttackerParty == value)
							{
								settlement.LastAttackerParty = null;
							}
						}
					}
					this._lastAttackerParty = value;
				}
				this.PassedHoursAfterLastThreat = ((value != null) ? 24 : 0);
			}
		}

		// Token: 0x17000BBF RID: 3007
		// (get) Token: 0x06003103 RID: 12547 RVA: 0x000CCC6C File Offset: 0x000CAE6C
		// (set) Token: 0x06003104 RID: 12548 RVA: 0x000CCC74 File Offset: 0x000CAE74
		[SaveableProperty(149)]
		public SiegeEvent.SiegeEnginesContainer SiegeEngines { get; private set; }

		// Token: 0x17000BC0 RID: 3008
		// (get) Token: 0x06003105 RID: 12549 RVA: 0x000CCC7D File Offset: 0x000CAE7D
		public MBReadOnlyList<SiegeEvent.SiegeEngineMissile> SiegeEngineMissiles
		{
			get
			{
				return this._siegeEngineMissiles;
			}
		}

		// Token: 0x17000BC1 RID: 3009
		// (get) Token: 0x06003106 RID: 12550 RVA: 0x000CCC85 File Offset: 0x000CAE85
		public BattleSideEnum BattleSide
		{
			get
			{
				return BattleSideEnum.Defender;
			}
		}

		// Token: 0x17000BC2 RID: 3010
		// (get) Token: 0x06003107 RID: 12551 RVA: 0x000CCC88 File Offset: 0x000CAE88
		// (set) Token: 0x06003108 RID: 12552 RVA: 0x000CCC90 File Offset: 0x000CAE90
		[SaveableProperty(150)]
		public int NumberOfTroopsKilledOnSide { get; private set; }

		// Token: 0x17000BC3 RID: 3011
		// (get) Token: 0x06003109 RID: 12553 RVA: 0x000CCC99 File Offset: 0x000CAE99
		// (set) Token: 0x0600310A RID: 12554 RVA: 0x000CCCA1 File Offset: 0x000CAEA1
		[SaveableProperty(151)]
		public SiegeStrategy SiegeStrategy { get; private set; }

		// Token: 0x0600310B RID: 12555 RVA: 0x000CCCAA File Offset: 0x000CAEAA
		public IEnumerable<PartyBase> GetInvolvedPartiesForEventType(MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
		{
			return Campaign.Current.Models.EncounterModel.GetDefenderPartiesOfSettlement(this, mapEventType);
		}

		// Token: 0x0600310C RID: 12556 RVA: 0x000CCCC2 File Offset: 0x000CAEC2
		public PartyBase GetNextInvolvedPartyForEventType(ref int partyIndex, MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
		{
			return Campaign.Current.Models.EncounterModel.GetNextDefenderPartyOfSettlement(this, ref partyIndex, mapEventType);
		}

		// Token: 0x0600310D RID: 12557 RVA: 0x000CCCDC File Offset: 0x000CAEDC
		public bool HasInvolvedPartyForEventType(PartyBase party, MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
		{
			int num = -1;
			for (PartyBase partyBase = Campaign.Current.Models.EncounterModel.GetNextDefenderPartyOfSettlement(this, ref num, mapEventType); partyBase != null; partyBase = Campaign.Current.Models.EncounterModel.GetNextDefenderPartyOfSettlement(this, ref num, mapEventType))
			{
				if (partyBase == party)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600310E RID: 12558 RVA: 0x000CCD29 File Offset: 0x000CAF29
		internal void AddBoundVillageInternal(Village village)
		{
			this._boundVillages.Add(village);
		}

		// Token: 0x0600310F RID: 12559 RVA: 0x000CCD37 File Offset: 0x000CAF37
		internal void RemoveBoundVillageInternal(Village village)
		{
			this._boundVillages.Remove(village);
		}

		// Token: 0x17000BC4 RID: 3012
		// (get) Token: 0x06003110 RID: 12560 RVA: 0x000CCD46 File Offset: 0x000CAF46
		// (set) Token: 0x06003111 RID: 12561 RVA: 0x000CCD4E File Offset: 0x000CAF4E
		[SaveableProperty(133)]
		public List<Alley> Alleys { get; private set; }

		// Token: 0x06003112 RID: 12562 RVA: 0x000CCD57 File Offset: 0x000CAF57
		private void SetName(TextObject name)
		{
			this._name = name;
			this.SetNameAttributes();
		}

		// Token: 0x06003113 RID: 12563 RVA: 0x000CCD68 File Offset: 0x000CAF68
		private void SetNameAttributes()
		{
			this._name.SetTextVariable("IS_SETTLEMENT", 1);
			this._name.SetTextVariable("IS_CASTLE", this.IsCastle ? 1 : 0);
			this._name.SetTextVariable("IS_TOWN", this.IsTown ? 1 : 0);
			this._name.SetTextVariable("IS_HIDEOUT", this.IsHideout ? 1 : 0);
		}

		// Token: 0x06003114 RID: 12564 RVA: 0x000CCDE0 File Offset: 0x000CAFE0
		private void InitSettlement()
		{
			this._partiesCache = new MBList<MobileParty>();
			this._heroesWithoutPartyCache = new MBList<Hero>();
			this._notablesCache = new MBList<Hero>();
			this._boundVillages = new MBList<Village>();
			this.SettlementHitPoints = 1f;
			this.CurrentSiegeState = Settlement.SiegeState.OnTheWalls;
			float currentTime = Campaign.CurrentTime;
			this.LastVisitTimeOfOwner = currentTime;
		}

		// Token: 0x17000BC5 RID: 3013
		// (get) Token: 0x06003115 RID: 12565 RVA: 0x000CCE38 File Offset: 0x000CB038
		public bool IsTown
		{
			get
			{
				return this.Town != null && this.Town.IsTown;
			}
		}

		// Token: 0x17000BC6 RID: 3014
		// (get) Token: 0x06003116 RID: 12566 RVA: 0x000CCE4F File Offset: 0x000CB04F
		public bool IsCastle
		{
			get
			{
				return this.Town != null && this.Town.IsCastle;
			}
		}

		// Token: 0x17000BC7 RID: 3015
		// (get) Token: 0x06003117 RID: 12567 RVA: 0x000CCE66 File Offset: 0x000CB066
		public bool IsFortification
		{
			get
			{
				return this.IsTown || this.IsCastle;
			}
		}

		// Token: 0x17000BC8 RID: 3016
		// (get) Token: 0x06003118 RID: 12568 RVA: 0x000CCE78 File Offset: 0x000CB078
		public bool IsVillage
		{
			get
			{
				return this.Village != null;
			}
		}

		// Token: 0x17000BC9 RID: 3017
		// (get) Token: 0x06003119 RID: 12569 RVA: 0x000CCE83 File Offset: 0x000CB083
		public bool IsHideout
		{
			get
			{
				return this.Hideout != null;
			}
		}

		// Token: 0x17000BCA RID: 3018
		// (get) Token: 0x0600311A RID: 12570 RVA: 0x000CCE8E File Offset: 0x000CB08E
		public bool IsStarving
		{
			get
			{
				return this.Town != null && this.Town.FoodStocks <= 0f;
			}
		}

		// Token: 0x17000BCB RID: 3019
		// (get) Token: 0x0600311B RID: 12571 RVA: 0x000CCEAF File Offset: 0x000CB0AF
		public bool IsRaided
		{
			get
			{
				return this.IsVillage && this.Village.VillageState == Village.VillageStates.Looted;
			}
		}

		// Token: 0x17000BCC RID: 3020
		// (get) Token: 0x0600311C RID: 12572 RVA: 0x000CCECC File Offset: 0x000CB0CC
		public bool IsBooming
		{
			get
			{
				float num = 50f;
				if (this.IsTown || this.IsCastle)
				{
					num = this.Town.Loyalty;
				}
				else if (this.IsVillage)
				{
					num = this.Village.Bound.Town.Loyalty;
				}
				return num > 80f;
			}
		}

		// Token: 0x17000BCD RID: 3021
		// (get) Token: 0x0600311D RID: 12573 RVA: 0x000CCF23 File Offset: 0x000CB123
		public bool InRebelliousState
		{
			get
			{
				return (this.IsTown || this.IsCastle) && this.Town.InRebelliousState;
			}
		}

		// Token: 0x17000BCE RID: 3022
		// (get) Token: 0x0600311E RID: 12574 RVA: 0x000CCF42 File Offset: 0x000CB142
		public bool IsUnderRaid
		{
			get
			{
				return this.Party.MapEvent != null && this.Party.MapEvent.IsRaid;
			}
		}

		// Token: 0x17000BCF RID: 3023
		// (get) Token: 0x0600311F RID: 12575 RVA: 0x000CCF63 File Offset: 0x000CB163
		public bool IsUnderSiege
		{
			get
			{
				return this.SiegeEvent != null;
			}
		}

		// Token: 0x06003120 RID: 12576 RVA: 0x000CCF70 File Offset: 0x000CB170
		public bool IsUnderRebellionAttack()
		{
			if (this.Party.MapEvent != null && this.Party.MapEvent.IsSiegeAssault)
			{
				Hero owner = this.Party.MapEvent.AttackerSide.LeaderParty.MobileParty.Party.Owner;
				if (owner != null && owner.Clan.IsRebelClan)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06003121 RID: 12577 RVA: 0x000CCFD4 File Offset: 0x000CB1D4
		public Settlement()
			: this(new TextObject("{=!}unnamed", null), null, null)
		{
		}

		// Token: 0x06003122 RID: 12578 RVA: 0x000CCFEC File Offset: 0x000CB1EC
		public Settlement(TextObject name, LocationComplex locationComplex, PartyTemplateObject pt)
		{
			this._name = name;
			this._isVisible = true;
			this.IsActive = true;
			this.Party = new PartyBase(this);
			this.InitSettlement();
			this._position = Vec2.Zero;
			this.LocationComplex = locationComplex;
			this.Alleys = new List<Alley>();
			this.HasVisited = false;
			this.Stash = new ItemRoster();
		}

		// Token: 0x06003123 RID: 12579 RVA: 0x000CD060 File Offset: 0x000CB260
		public float GetSettlementValueForEnemyHero(Hero hero)
		{
			return Campaign.Current.Models.SettlementValueModel.CalculateSettlementValueForEnemyHero(this, hero);
		}

		// Token: 0x17000BD0 RID: 3024
		// (get) Token: 0x06003124 RID: 12580 RVA: 0x000CD078 File Offset: 0x000CB278
		// (set) Token: 0x06003125 RID: 12581 RVA: 0x000CD080 File Offset: 0x000CB280
		[SaveableProperty(138)]
		public LocationComplex LocationComplex { get; private set; }

		// Token: 0x17000BD1 RID: 3025
		// (get) Token: 0x06003126 RID: 12582 RVA: 0x000CD08C File Offset: 0x000CB28C
		public static Settlement CurrentSettlement
		{
			get
			{
				if (PlayerCaptivity.CaptorParty != null && PlayerCaptivity.CaptorParty.IsSettlement)
				{
					return PlayerCaptivity.CaptorParty.Settlement;
				}
				if (PlayerEncounter.EncounterSettlement != null)
				{
					return PlayerEncounter.EncounterSettlement;
				}
				if (MobileParty.MainParty.CurrentSettlement != null)
				{
					return MobileParty.MainParty.CurrentSettlement;
				}
				return null;
			}
		}

		// Token: 0x06003127 RID: 12583 RVA: 0x000CD0DC File Offset: 0x000CB2DC
		public float GetValue(Hero hero = null, bool countAlsoBoundedSettlements = true)
		{
			float num = 0f;
			if (this.IsVillage)
			{
				num = 100000f + this.Village.Hearth * 250f;
				num *= ((this.Village.VillageState == Village.VillageStates.Looted) ? 0.8f : ((this.Village.VillageState == Village.VillageStates.BeingRaided) ? 0.85f : (0.8f + (0.667f + 0.333f * this.Village.Settlement.SettlementHitPoints) * 0.2f)));
			}
			else if (this.IsCastle)
			{
				num = 250000f + this.Prosperity * 1000f;
			}
			else if (this.IsTown)
			{
				num = 750000f + this.Prosperity * 1000f;
			}
			float num2 = 1f;
			if (hero != null && hero.Clan.Settlements.Count > 0)
			{
				float num3 = MathF.Pow(Campaign.Current.Models.MapDistanceModel.GetDistance(hero.Clan.FactionMidSettlement, this) / Campaign.AverageDistanceBetweenTwoFortifications * 4f, 2f);
				num3 = MathF.Clamp(num3, 0f, 100f);
				num3 -= 16f;
				num2 *= (100f - num3) / 100f;
			}
			if (countAlsoBoundedSettlements)
			{
				foreach (Village village in this.BoundVillages)
				{
					num += village.Settlement.GetValue(hero, false);
				}
			}
			return num * num2;
		}

		// Token: 0x06003128 RID: 12584 RVA: 0x000CD274 File Offset: 0x000CB474
		public override TextObject GetName()
		{
			return this.Name;
		}

		// Token: 0x06003129 RID: 12585 RVA: 0x000CD27C File Offset: 0x000CB47C
		public float GetSettlementValueForFaction(IFaction faction)
		{
			return Campaign.Current.Models.SettlementValueModel.CalculateSettlementValueForFaction(this, faction);
		}

		// Token: 0x0600312A RID: 12586 RVA: 0x000CD294 File Offset: 0x000CB494
		public override string ToString()
		{
			return this.Name.ToString();
		}

		// Token: 0x0600312B RID: 12587 RVA: 0x000CD2A4 File Offset: 0x000CB4A4
		internal void AddMobileParty(MobileParty mobileParty)
		{
			if (!this._partiesCache.Contains(mobileParty))
			{
				this._partiesCache.Add(mobileParty);
				if (mobileParty.IsLordParty)
				{
					this._numberOfLordPartiesAt++;
					return;
				}
			}
			else
			{
				Debug.FailedAssert("mobileParty is already in mobileParties List!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Settlement.cs", "AddMobileParty", 672);
			}
		}

		// Token: 0x0600312C RID: 12588 RVA: 0x000CD2FC File Offset: 0x000CB4FC
		internal void RemoveMobileParty(MobileParty mobileParty)
		{
			if (this._partiesCache.Contains(mobileParty))
			{
				this._partiesCache.Remove(mobileParty);
				if (mobileParty.IsLordParty)
				{
					this._numberOfLordPartiesAt--;
					return;
				}
			}
			else
			{
				Debug.FailedAssert("mobileParty is not in mobileParties List", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Settlement.cs", "RemoveMobileParty", 691);
			}
		}

		// Token: 0x0600312D RID: 12589 RVA: 0x000CD354 File Offset: 0x000CB554
		internal void AddHeroWithoutParty(Hero individual)
		{
			if (!this._heroesWithoutPartyCache.Contains(individual))
			{
				this._heroesWithoutPartyCache.Add(individual);
				this.CollectNotablesToCache();
				return;
			}
			Debug.FailedAssert("Notable is already in Notable List!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Settlement.cs", "AddHeroWithoutParty", 710);
		}

		// Token: 0x0600312E RID: 12590 RVA: 0x000CD390 File Offset: 0x000CB590
		internal void RemoveHeroWithoutParty(Hero individual)
		{
			if (this._heroesWithoutPartyCache.Contains(individual))
			{
				this._heroesWithoutPartyCache.Remove(individual);
				this.CollectNotablesToCache();
				return;
			}
			Debug.FailedAssert("Notable is not in Notable List", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Settlement.cs", "RemoveHeroWithoutParty", 724);
		}

		// Token: 0x0600312F RID: 12591 RVA: 0x000CD3D0 File Offset: 0x000CB5D0
		private void CollectNotablesToCache()
		{
			this._notablesCache.Clear();
			foreach (Hero hero in this.HeroesWithoutParty)
			{
				if (hero.IsNotable)
				{
					this._notablesCache.Add(hero);
				}
			}
		}

		// Token: 0x06003130 RID: 12592 RVA: 0x000CD43C File Offset: 0x000CB63C
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			bool isInitialized = base.IsInitialized;
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(node.Attributes["name"].Value, null);
			this.Position2D = new Vec2((float)Convert.ToDouble(node.Attributes["posX"].Value), (float)Convert.ToDouble(node.Attributes["posY"].Value));
			this.GatePosition = this.Position2D;
			if (node.Attributes["gate_posX"] != null)
			{
				this.GatePosition = new Vec2((float)Convert.ToDouble(node.Attributes["gate_posX"].Value), (float)Convert.ToDouble(node.Attributes["gate_posY"].Value));
			}
			if (!isInitialized && node.Attributes["prosperity"] != null)
			{
				this.Prosperity = (float)Convert.ToDouble(node.Attributes["prosperity"].Value);
			}
			this.Culture = objectManager.ReadObjectReferenceFromXml<CultureObject>("culture", node);
			this.EncyclopediaText = ((node.Attributes["text"] != null) ? new TextObject(node.Attributes["text"].Value, null) : TextObject.Empty);
			if (Campaign.Current != null && Campaign.Current.MapSceneWrapper != null && !Campaign.Current.MapSceneWrapper.GetFaceIndex(this.Position2D).IsValid())
			{
				Debug.Print("Center position of settlement(" + this.GetName() + ") is invalid", 0, Debug.DebugColor.White, 17592186044416UL);
			}
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Name == "Components")
				{
					foreach (object obj2 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode2 = (XmlNode)obj2;
						this.SetSettlementComponent((SettlementComponent)objectManager.CreateObjectFromXmlNode(xmlNode2));
					}
				}
				if (xmlNode.Name == "Locations")
				{
					LocationComplexTemplate locationComplexTemplate = (LocationComplexTemplate)objectManager.ReadObjectReferenceFromXml("complex_template", typeof(LocationComplexTemplate), xmlNode);
					if (!isInitialized)
					{
						this.LocationComplex = new LocationComplex(locationComplexTemplate);
					}
					else
					{
						this.LocationComplex.Initialize(locationComplexTemplate);
					}
					foreach (object obj3 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode3 = (XmlNode)obj3;
						if (xmlNode3.Name == "Location")
						{
							Location locationWithId = this.LocationComplex.GetLocationWithId(xmlNode3.Attributes["id"].Value);
							if (xmlNode3.Attributes["max_prosperity"] != null)
							{
								locationWithId.ProsperityMax = int.Parse(xmlNode3.Attributes["max_prosperity"].Value);
							}
							bool flag = false;
							for (int i = 0; i < 4; i++)
							{
								string text = "scene_name" + ((i > 0) ? ("_" + i) : "");
								string text2 = ((xmlNode3.Attributes[text] != null) ? xmlNode3.Attributes[text].Value : "");
								flag = flag || !string.IsNullOrEmpty(text2);
								locationWithId.SetSceneName(i, text2);
							}
						}
					}
				}
				if (xmlNode.Name == "CommonAreas")
				{
					int num = 0;
					foreach (object obj4 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode4 = (XmlNode)obj4;
						if (xmlNode4.Name == "Area")
						{
							string value = xmlNode4.Attributes["name"].Value;
							string text3 = "alley_" + (num + 1);
							if (!isInitialized)
							{
								this.Alleys.Add(new Alley(this, text3, new TextObject(value, null)));
							}
							else
							{
								this.Alleys[num].Initialize(this, text3, new TextObject(value, null));
							}
							num++;
						}
					}
					foreach (Alley alley in this.Alleys)
					{
						foreach (Alley alley2 in this.Alleys)
						{
						}
					}
				}
			}
			if (!isInitialized)
			{
				Clan clan = objectManager.ReadObjectReferenceFromXml<Clan>("owner", node);
				if (clan != null && this.Town != null)
				{
					this.Town.OwnerClan = clan;
				}
			}
			this.SetNameAttributes();
		}

		// Token: 0x06003131 RID: 12593 RVA: 0x000CDA28 File Offset: 0x000CBC28
		public void OnFinishLoadState()
		{
			if (this.IsUnderSiege)
			{
				float num = 0f;
				Campaign.Current.MapSceneWrapper.GetHeightAtPoint(this.GatePosition, ref num);
				this.Party.Visuals.OnBesieged(new Vec3(this.GatePosition.x, this.GatePosition.y, num, -1f));
			}
			if (this.IsFortification)
			{
				this.WallSectionCount = this.Party.Visuals.GetBreacableWallFrameCount();
				using (List<Building>.Enumerator enumerator = this.Town.Buildings.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						Building building = enumerator.Current;
						if (building.BuildingType.IsDefaultProject && building.CurrentLevel != 1)
						{
							building.CurrentLevel = 1;
						}
					}
					goto IL_CD;
				}
			}
			this.WallSectionCount = 0;
			IL_CD:
			this.Party.UpdateVisibilityAndInspected(0f, false);
		}

		// Token: 0x06003132 RID: 12594 RVA: 0x000CDB24 File Offset: 0x000CBD24
		public void OnGameInitialized()
		{
			Campaign campaign = Campaign.Current;
			this.CurrentNavigationFace = campaign.MapSceneWrapper.GetFaceIndex(this.GatePosition);
		}

		// Token: 0x06003133 RID: 12595 RVA: 0x000CDB50 File Offset: 0x000CBD50
		public void OnGameCreated()
		{
			SettlementComponent settlementComponent = this.SettlementComponent;
			if (settlementComponent != null)
			{
				settlementComponent.OnInit();
			}
			this.CreateFigure();
			this.Party.Visuals.RefreshLevelMask(this.Party);
			if (this.IsFortification)
			{
				this.WallSectionCount = this.Party.Visuals.GetBreacableWallFrameCount();
			}
			else
			{
				this.WallSectionCount = 0;
			}
			for (int i = 0; i < this.WallSectionCount; i++)
			{
				this._settlementWallSectionHitPointsRatioList.Add(1f);
			}
		}

		// Token: 0x06003134 RID: 12596 RVA: 0x000CDBD2 File Offset: 0x000CBDD2
		public void OnSessionStart()
		{
			PartyBase party = this.Party;
			if (party == null)
			{
				return;
			}
			IPartyVisual visuals = party.Visuals;
			if (visuals == null)
			{
				return;
			}
			visuals.SetMapIconAsDirty();
		}

		// Token: 0x06003135 RID: 12597 RVA: 0x000CDBEE File Offset: 0x000CBDEE
		[LoadInitializationCallback]
		private void OnLoad()
		{
			((ILocatable<Settlement>)this).LocatorNodeIndex = -1;
			this._partiesCache = new MBList<MobileParty>();
			this._heroesWithoutPartyCache = new MBList<Hero>();
			this._notablesCache = new MBList<Hero>();
		}

		// Token: 0x06003136 RID: 12598 RVA: 0x000CDC18 File Offset: 0x000CBE18
		public static Settlement Find(string idString)
		{
			return MBObjectManager.Instance.GetObject<Settlement>(idString);
		}

		// Token: 0x06003137 RID: 12599 RVA: 0x000CDC25 File Offset: 0x000CBE25
		public static Settlement FindFirst(Func<Settlement, bool> predicate)
		{
			return Settlement.All.FirstOrDefault(predicate);
		}

		// Token: 0x06003138 RID: 12600 RVA: 0x000CDC32 File Offset: 0x000CBE32
		public static IEnumerable<Settlement> FindAll(Func<Settlement, bool> predicate)
		{
			return Settlement.All.Where(predicate);
		}

		// Token: 0x17000BD2 RID: 3026
		// (get) Token: 0x06003139 RID: 12601 RVA: 0x000CDC3F File Offset: 0x000CBE3F
		public static MBReadOnlyList<Settlement> All
		{
			get
			{
				return Campaign.Current.Settlements;
			}
		}

		// Token: 0x17000BD3 RID: 3027
		// (get) Token: 0x0600313A RID: 12602 RVA: 0x000CDC4B File Offset: 0x000CBE4B
		public static Settlement GetFirst
		{
			get
			{
				return Settlement.All.FirstOrDefault<Settlement>();
			}
		}

		// Token: 0x0600313B RID: 12603 RVA: 0x000CDC57 File Offset: 0x000CBE57
		public static LocatableSearchData<Settlement> StartFindingLocatablesAroundPosition(Vec2 position, float radius)
		{
			return Campaign.Current.SettlementLocator.StartFindingLocatablesAroundPosition(position, radius);
		}

		// Token: 0x0600313C RID: 12604 RVA: 0x000CDC6A File Offset: 0x000CBE6A
		public static Settlement FindNextLocatable(ref LocatableSearchData<Settlement> data)
		{
			return Campaign.Current.SettlementLocator.FindNextLocatable(ref data);
		}

		// Token: 0x0600313D RID: 12605 RVA: 0x000CDC7C File Offset: 0x000CBE7C
		public void OnPlayerEncounterFinish()
		{
			LocationComplex locationComplex = this.LocationComplex;
			if (locationComplex == null)
			{
				return;
			}
			locationComplex.ClearTempCharacters();
		}

		// Token: 0x0600313E RID: 12606 RVA: 0x000CDC8E File Offset: 0x000CBE8E
		TextObject ITrackableBase.GetName()
		{
			return this.Name;
		}

		// Token: 0x0600313F RID: 12607 RVA: 0x000CDC96 File Offset: 0x000CBE96
		public Vec3 GetPosition()
		{
			return this.GetLogicalPosition();
		}

		// Token: 0x06003140 RID: 12608 RVA: 0x000CDCA0 File Offset: 0x000CBEA0
		public float GetTrackDistanceToMainAgent()
		{
			return this.GetPosition().Distance(Hero.MainHero.GetPosition());
		}

		// Token: 0x06003141 RID: 12609 RVA: 0x000CDCC8 File Offset: 0x000CBEC8
		public bool CheckTracked(BasicCharacterObject basicCharacter)
		{
			return this.Notables.Any((Hero t) => t.CharacterObject == basicCharacter) || this.Party.PrisonRoster.GetTroopRoster().Any((TroopRosterElement t) => t.Character == basicCharacter) || this.Parties.Any((MobileParty p) => p.CheckTracked(basicCharacter));
		}

		// Token: 0x06003142 RID: 12610 RVA: 0x000CDD37 File Offset: 0x000CBF37
		private void CreateFigure()
		{
			if (this.SettlementComponent != null)
			{
				this.Party.Visuals.OnStartup(this.Party);
			}
		}

		// Token: 0x17000BD4 RID: 3028
		// (get) Token: 0x06003143 RID: 12611 RVA: 0x000CDD57 File Offset: 0x000CBF57
		// (set) Token: 0x06003144 RID: 12612 RVA: 0x000CDD5F File Offset: 0x000CBF5F
		[SaveableProperty(142)]
		public Settlement.SiegeState CurrentSiegeState { get; private set; }

		// Token: 0x17000BD5 RID: 3029
		// (get) Token: 0x06003145 RID: 12613 RVA: 0x000CDD68 File Offset: 0x000CBF68
		public Clan OwnerClan
		{
			get
			{
				if (this.Village != null)
				{
					return this.Village.Bound.OwnerClan;
				}
				if (this.Town != null)
				{
					return this.Town.OwnerClan;
				}
				if (this.IsHideout)
				{
					return this.Hideout.MapFaction as Clan;
				}
				return null;
			}
		}

		// Token: 0x17000BD6 RID: 3030
		// (get) Token: 0x06003146 RID: 12614 RVA: 0x000CDDBC File Offset: 0x000CBFBC
		public bool IsAlerted
		{
			get
			{
				return this.NumberOfEnemiesSpottedAround >= 1f;
			}
		}

		// Token: 0x06003147 RID: 12615 RVA: 0x000CDDCE File Offset: 0x000CBFCE
		public void SetNextSiegeState()
		{
			if (this.CurrentSiegeState == Settlement.SiegeState.InTheLordsHall)
			{
				return;
			}
			this.CurrentSiegeState++;
		}

		// Token: 0x06003148 RID: 12616 RVA: 0x000CDDE8 File Offset: 0x000CBFE8
		public void ResetSiegeState()
		{
			this.CurrentSiegeState = Settlement.SiegeState.OnTheWalls;
		}

		// Token: 0x06003149 RID: 12617 RVA: 0x000CDDF4 File Offset: 0x000CBFF4
		public void AddGarrisonParty(bool addInitialGarrison = false)
		{
			GarrisonPartyComponent.CreateGarrisonParty(string.Concat(new string[]
			{
				"garrison_party_",
				base.StringId,
				"_",
				this.OwnerClan.StringId,
				"_1"
			}), this, addInitialGarrison);
		}

		// Token: 0x0600314A RID: 12618 RVA: 0x000CDE44 File Offset: 0x000CC044
		protected override void AfterLoad()
		{
			if (this.SiegeEvent != null && this.SiegeEvent.BesiegerCamp.BesiegerParty == null)
			{
				this.SiegeEvent = null;
			}
			this._notablesCache = new MBList<Hero>();
			this.CollectNotablesToCache();
			this.Party.AfterLoad();
			foreach (Alley alley in this.Alleys)
			{
				alley.AfterLoad();
			}
		}

		// Token: 0x0600314B RID: 12619 RVA: 0x000CDED4 File Offset: 0x000CC0D4
		private void SpawnMilitiaParty()
		{
			MilitiaPartyComponent.CreateMilitiaParty("militias_of_" + base.StringId + "_aaa1", this);
			this.TransferReadyMilitiasToMilitiaParty();
		}

		// Token: 0x0600314C RID: 12620 RVA: 0x000CDEF8 File Offset: 0x000CC0F8
		private void TransferReadyMilitiasToMilitiaParty()
		{
			if (this._readyMilitia >= 1f)
			{
				int num = MathF.Floor(this._readyMilitia);
				this._readyMilitia -= (float)num;
				this.AddMilitiasToParty(this.MilitiaPartyComponent.MobileParty, num);
				return;
			}
			if ((int)this._readyMilitia < -1)
			{
				int num2 = MathF.Ceiling(this._readyMilitia);
				this._readyMilitia -= (float)num2;
				Settlement.RemoveMilitiasFromParty(this.MilitiaPartyComponent.MobileParty, -num2);
			}
		}

		// Token: 0x0600314D RID: 12621 RVA: 0x000CDF78 File Offset: 0x000CC178
		private void AddMilitiasToParty(MobileParty militaParty, int militiaToAdd)
		{
			float num;
			float num2;
			Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaSpawnRate(this, out num, out num2);
			this.AddTroopToMilitiaParty(militaParty, this.Culture.MeleeMilitiaTroop, this.Culture.MeleeEliteMilitiaTroop, num, ref militiaToAdd);
			this.AddTroopToMilitiaParty(militaParty, this.Culture.RangedMilitiaTroop, this.Culture.RangedEliteMilitiaTroop, 1f, ref militiaToAdd);
		}

		// Token: 0x0600314E RID: 12622 RVA: 0x000CDFE4 File Offset: 0x000CC1E4
		private void AddTroopToMilitiaParty(MobileParty militaParty, CharacterObject militiaTroop, CharacterObject eliteMilitiaTroop, float troopRatio, ref int numberToAddRemaining)
		{
			if (numberToAddRemaining > 0)
			{
				int num = MBRandom.RoundRandomized(troopRatio * (float)numberToAddRemaining);
				float num2 = Campaign.Current.Models.SettlementMilitiaModel.CalculateEliteMilitiaSpawnChance(this);
				for (int i = 0; i < num; i++)
				{
					if (MBRandom.RandomFloat < num2)
					{
						militaParty.MemberRoster.AddToCounts(eliteMilitiaTroop, 1, false, 0, 0, true, -1);
					}
					else
					{
						militaParty.MemberRoster.AddToCounts(militiaTroop, 1, false, 0, 0, true, -1);
					}
				}
				numberToAddRemaining -= num;
			}
		}

		// Token: 0x0600314F RID: 12623 RVA: 0x000CE060 File Offset: 0x000CC260
		private static void RemoveMilitiasFromParty(MobileParty militaParty, int numberToRemove)
		{
			if (militaParty.MemberRoster.TotalManCount <= numberToRemove)
			{
				militaParty.MemberRoster.Clear();
				return;
			}
			float num = (float)numberToRemove / (float)militaParty.MemberRoster.TotalManCount;
			int num2 = numberToRemove;
			for (int i = 0; i < militaParty.MemberRoster.Count; i++)
			{
				int num3 = MBRandom.RoundRandomized((float)militaParty.MemberRoster.GetElementNumber(i) * num);
				if (num3 > num2)
				{
					num3 = num2;
				}
				militaParty.MemberRoster.AddToCountsAtIndex(i, -num3, 0, 0, false);
				num2 -= num3;
				if (num2 <= 0)
				{
					break;
				}
			}
			militaParty.MemberRoster.RemoveZeroCounts();
		}

		// Token: 0x06003150 RID: 12624 RVA: 0x000CE0EF File Offset: 0x000CC2EF
		public void SetSiegeStrategy(SiegeStrategy strategy)
		{
			this.SiegeStrategy = strategy;
		}

		// Token: 0x06003151 RID: 12625 RVA: 0x000CE0F8 File Offset: 0x000CC2F8
		public void InitializeSiegeEventSide()
		{
			this.SiegeStrategy = DefaultSiegeStrategies.Custom;
			this.NumberOfTroopsKilledOnSide = 0;
			SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = null;
			this.SiegeEngines = new SiegeEvent.SiegeEnginesContainer(BattleSideEnum.Defender, siegeEngineConstructionProgress);
			this._siegeEngineMissiles = new MBList<SiegeEvent.SiegeEngineMissile>();
			this.SetPrebuiltSiegeEngines();
			float num = 0f;
			Campaign.Current.MapSceneWrapper.GetHeightAtPoint(this.GatePosition, ref num);
			this.Party.Visuals.OnBesieged(new Vec3(this.GatePosition.x, this.GatePosition.y, num, -1f));
		}

		// Token: 0x06003152 RID: 12626 RVA: 0x000CE186 File Offset: 0x000CC386
		public void OnTroopsKilledOnSide(int killCount)
		{
			this.NumberOfTroopsKilledOnSide += killCount;
		}

		// Token: 0x06003153 RID: 12627 RVA: 0x000CE196 File Offset: 0x000CC396
		public void AddSiegeEngineMissile(SiegeEvent.SiegeEngineMissile missile)
		{
			this._siegeEngineMissiles.Add(missile);
		}

		// Token: 0x06003154 RID: 12628 RVA: 0x000CE1A4 File Offset: 0x000CC3A4
		public void RemoveDeprecatedMissiles()
		{
			this._siegeEngineMissiles.RemoveAll((SiegeEvent.SiegeEngineMissile missile) => missile.CollisionTime.IsPast);
		}

		// Token: 0x06003155 RID: 12629 RVA: 0x000CE1D4 File Offset: 0x000CC3D4
		private void SetPrebuiltSiegeEngines()
		{
			foreach (SiegeEngineType siegeEngineType in Campaign.Current.Models.SiegeEventModel.GetPrebuiltSiegeEnginesOfSettlement(this))
			{
				float siegeEngineHitPoints = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitPoints(this.SiegeEvent, siegeEngineType, BattleSideEnum.Defender);
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = new SiegeEvent.SiegeEngineConstructionProgress(siegeEngineType, 1f, siegeEngineHitPoints);
				this.SiegeEngines.AddPrebuiltEngineToReserve(siegeEngineConstructionProgress);
				this.SiegeEvent.CreateSiegeObject(siegeEngineConstructionProgress, this.SiegeEvent.GetSiegeEventSide(BattleSideEnum.Defender));
			}
		}

		// Token: 0x06003156 RID: 12630 RVA: 0x000CE278 File Offset: 0x000CC478
		public void GetAttackTarget(ISiegeEventSide siegeEventSide, SiegeEngineType siegeEngine, int siegeEngineSlot, out SiegeBombardTargets targetType, out int targetIndex)
		{
			targetType = SiegeBombardTargets.None;
			targetIndex = -1;
			int num;
			float num2;
			this.SiegeEvent.FindAttackableRangedEngineWithHighestPriority(siegeEventSide, siegeEngineSlot, out num, out num2);
			if (num == -1)
			{
				return;
			}
			float num3 = num2;
			if (MBRandom.RandomFloat * num3 < num2)
			{
				targetIndex = num;
				targetType = SiegeBombardTargets.RangedEngines;
			}
		}

		// Token: 0x06003157 RID: 12631 RVA: 0x000CE2B8 File Offset: 0x000CC4B8
		public void FinalizeSiegeEvent()
		{
			this.ResetSiegeState();
			this.SiegeEvent = null;
			IPartyVisual visuals = this.Party.Visuals;
			if (visuals != null)
			{
				visuals.OnSiegeLifted();
			}
			IPartyVisual visuals2 = this.Party.Visuals;
			if (visuals2 != null)
			{
				visuals2.RefreshLevelMask(this.Party);
			}
			IPartyVisual visuals3 = this.Party.Visuals;
			if (visuals3 == null)
			{
				return;
			}
			visuals3.SetMapIconAsDirty();
		}

		// Token: 0x17000BD7 RID: 3031
		// (get) Token: 0x06003158 RID: 12632 RVA: 0x000CE319 File Offset: 0x000CC519
		bool IMapEntity.IsMobileEntity
		{
			get
			{
				return false;
			}
		}

		// Token: 0x17000BD8 RID: 3032
		// (get) Token: 0x06003159 RID: 12633 RVA: 0x000CE31C File Offset: 0x000CC51C
		IMapEntity IMapEntity.AttachedEntity
		{
			get
			{
				return null;
			}
		}

		// Token: 0x17000BD9 RID: 3033
		// (get) Token: 0x0600315A RID: 12634 RVA: 0x000CE31F File Offset: 0x000CC51F
		IPartyVisual IMapEntity.PartyVisual
		{
			get
			{
				return this.Party.Visuals;
			}
		}

		// Token: 0x17000BDA RID: 3034
		// (get) Token: 0x0600315B RID: 12635 RVA: 0x000CE32C File Offset: 0x000CC52C
		bool IMapEntity.ShowCircleAroundEntity
		{
			get
			{
				return true;
			}
		}

		// Token: 0x17000BDB RID: 3035
		// (get) Token: 0x0600315C RID: 12636 RVA: 0x000CE32F File Offset: 0x000CC52F
		Vec2 IMapEntity.InteractionPosition
		{
			get
			{
				return this.GatePosition;
			}
		}

		// Token: 0x0600315D RID: 12637 RVA: 0x000CE337 File Offset: 0x000CC537
		bool IMapEntity.OnMapClick(bool followModifierUsed)
		{
			if (this.IsVisible)
			{
				MobileParty.MainParty.Ai.SetMoveGoToSettlement(this);
				return true;
			}
			return false;
		}

		// Token: 0x0600315E RID: 12638 RVA: 0x000CE354 File Offset: 0x000CC554
		void IMapEntity.OnOpenEncyclopedia()
		{
			Campaign.Current.EncyclopediaManager.GoToLink(this.EncyclopediaLink);
		}

		// Token: 0x0600315F RID: 12639 RVA: 0x000CE36B File Offset: 0x000CC56B
		bool IMapEntity.IsMainEntity()
		{
			return false;
		}

		// Token: 0x06003160 RID: 12640 RVA: 0x000CE36E File Offset: 0x000CC56E
		void IMapEntity.OnHover()
		{
			InformationManager.ShowTooltip(typeof(Settlement), new object[] { this, false });
		}

		// Token: 0x06003161 RID: 12641 RVA: 0x000CE392 File Offset: 0x000CC592
		bool IMapEntity.IsEnemyOf(IFaction faction)
		{
			return FactionManager.IsAtWarAgainstFaction(this.MapFaction, faction);
		}

		// Token: 0x06003162 RID: 12642 RVA: 0x000CE3A0 File Offset: 0x000CC5A0
		bool IMapEntity.IsAllyOf(IFaction faction)
		{
			return FactionManager.IsAlliedWithFaction(this.MapFaction, faction);
		}

		// Token: 0x06003163 RID: 12643 RVA: 0x000CE3B0 File Offset: 0x000CC5B0
		public void OnPartyInteraction(MobileParty mobileParty)
		{
			if (mobileParty.ShortTermTargetSettlement != null && (mobileParty.ShortTermTargetSettlement.Party.SiegeEvent == null || mobileParty == MobileParty.MainParty || mobileParty.MapFaction == mobileParty.ShortTermTargetSettlement.SiegeEvent.BesiegerCamp.BesiegerParty.MapFaction) && (mobileParty.ShortTermTargetSettlement.Party.MapEvent == null || mobileParty == MobileParty.MainParty || mobileParty.MapFaction == mobileParty.ShortTermTargetSettlement.Party.MapEvent.AttackerSide.LeaderParty.MapFaction || (mobileParty.ShortTermTargetSettlement.Party.MapEvent.IsSallyOut && mobileParty.MapFaction == mobileParty.ShortTermTargetSettlement.Party.MapEvent.DefenderSide.LeaderParty.MapFaction)))
			{
				if (mobileParty == MobileParty.MainParty && (mobileParty.ShortTermTargetSettlement.Party.MapEvent == null || !mobileParty.ShortTermTargetSettlement.Party.MapEvent.IsRaid || mobileParty.ShortTermTargetSettlement.Party.MapEvent.DefenderSide.NumRemainingSimulationTroops > 0))
				{
					MapState mapState = Game.Current.GameStateManager.ActiveState as MapState;
					if (mapState != null)
					{
						mapState.OnMainPartyEncounter();
					}
				}
				if (mobileParty.ShortTermTargetSettlement.Party.MapEvent != null && mobileParty.ShortTermTargetSettlement.Party.MapEvent.IsRaid && mobileParty.DefaultBehavior == AiBehavior.RaidSettlement)
				{
					mobileParty.Ai.RethinkAtNextHourlyTick = true;
					mobileParty.Ai.SetMoveModeHold();
					return;
				}
				EncounterManager.StartSettlementEncounter(mobileParty, mobileParty.ShortTermTargetSettlement);
			}
		}

		// Token: 0x06003164 RID: 12644 RVA: 0x000CE54F File Offset: 0x000CC74F
		public void GetMountAndHarnessVisualIdsForPartyIcon(out string mountStringId, out string harnessStringId)
		{
			mountStringId = "";
			harnessStringId = "";
		}

		// Token: 0x06003165 RID: 12645 RVA: 0x000CE560 File Offset: 0x000CC760
		public void SetSettlementComponent(SettlementComponent settlementComponent)
		{
			settlementComponent.Owner = this.Party;
			this.SettlementComponent = settlementComponent;
			if (this.SettlementComponent is Town)
			{
				this.Town = this.SettlementComponent as Town;
				return;
			}
			if (this.SettlementComponent is Village)
			{
				this.Village = this.SettlementComponent as Village;
				return;
			}
			if (this.SettlementComponent is Hideout)
			{
				this.Hideout = this.SettlementComponent as Hideout;
			}
		}

		// Token: 0x04000FF4 RID: 4084
		[SaveableField(102)]
		public int NumberOfLordPartiesTargeting;

		// Token: 0x04000FF5 RID: 4085
		[CachedData]
		private int _numberOfLordPartiesAt;

		// Token: 0x04000FF6 RID: 4086
		[SaveableField(104)]
		public int CanBeClaimed;

		// Token: 0x04000FF7 RID: 4087
		[SaveableField(105)]
		public float ClaimValue;

		// Token: 0x04000FF8 RID: 4088
		[SaveableField(106)]
		public Hero ClaimedBy;

		// Token: 0x04000FF9 RID: 4089
		[SaveableField(107)]
		public bool HasVisited;

		// Token: 0x04000FFA RID: 4090
		[SaveableField(110)]
		public float LastVisitTimeOfOwner;

		// Token: 0x04000FFE RID: 4094
		[SaveableField(113)]
		private bool _isVisible;

		// Token: 0x04001001 RID: 4097
		[CachedData]
		private int _locatorNodeIndex;

		// Token: 0x04001004 RID: 4100
		[SaveableField(117)]
		private Settlement _nextLocatable;

		// Token: 0x04001005 RID: 4101
		[SaveableField(118)]
		private float _prosperity;

		// Token: 0x04001006 RID: 4102
		[SaveableField(119)]
		private float _readyMilitia;

		// Token: 0x04001007 RID: 4103
		[SaveableField(120)]
		private MBList<float> _settlementWallSectionHitPointsRatioList = new MBList<float>();

		// Token: 0x04001009 RID: 4105
		[CachedData]
		private MBList<MobileParty> _partiesCache;

		// Token: 0x0400100A RID: 4106
		[CachedData]
		private MBList<Hero> _heroesWithoutPartyCache;

		// Token: 0x0400100B RID: 4107
		[CachedData]
		private MBList<Hero> _notablesCache;

		// Token: 0x0400100D RID: 4109
		private Vec2 _gatePosition;

		// Token: 0x0400100E RID: 4110
		private Vec2 _position;

		// Token: 0x04001010 RID: 4112
		public CultureObject Culture;

		// Token: 0x04001011 RID: 4113
		private TextObject _name;

		// Token: 0x04001014 RID: 4116
		[SaveableField(129)]
		private MBList<Village> _boundVillages;

		// Token: 0x04001015 RID: 4117
		[SaveableField(131)]
		private MobileParty _lastAttackerParty;

		// Token: 0x04001016 RID: 4118
		[SaveableField(132)]
		public int PassedHoursAfterLastThreat;

		// Token: 0x04001017 RID: 4119
		[SaveableField(148)]
		private MBList<SiegeEvent.SiegeEngineMissile> _siegeEngineMissiles;

		// Token: 0x0400101C RID: 4124
		public Town Town;

		// Token: 0x0400101D RID: 4125
		public Village Village;

		// Token: 0x0400101E RID: 4126
		public Hideout Hideout;

		// Token: 0x04001021 RID: 4129
		[CachedData]
		public MilitiaPartyComponent MilitiaPartyComponent;

		// Token: 0x04001022 RID: 4130
		[SaveableField(145)]
		public readonly ItemRoster Stash;

		// Token: 0x02000691 RID: 1681
		public enum SiegeState
		{
			// Token: 0x04001B45 RID: 6981
			OnTheWalls,
			// Token: 0x04001B46 RID: 6982
			InTheLordsHall,
			// Token: 0x04001B47 RID: 6983
			Invalid
		}
	}
}
