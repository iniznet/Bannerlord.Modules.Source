using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements.Buildings;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.CampaignSystem.Siege;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;
using TaleWorlds.SaveSystem.Load;

namespace TaleWorlds.CampaignSystem.Settlements
{
	public sealed class Settlement : MBObjectBase, ILocatable<Settlement>, IMapPoint, ITrackableCampaignObject, ITrackableBase, ISiegeEventSide, IMapEntity, IRandomOwner
	{
		internal static void AutoGeneratedStaticCollectObjectsSettlement(object o, List<object> collectedObjects)
		{
			((Settlement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.ClaimedBy);
			collectedObjects.Add(this.Stash);
			collectedObjects.Add(this._nextLocatable);
			collectedObjects.Add(this._settlementWallSectionHitPointsRatioList);
			collectedObjects.Add(this._boundVillages);
			collectedObjects.Add(this._lastAttackerParty);
			collectedObjects.Add(this._siegeEngineMissiles);
			collectedObjects.Add(this.Party);
			collectedObjects.Add(this.SiegeEvent);
			collectedObjects.Add(this.SettlementComponent);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.LastThreatTime, collectedObjects);
			collectedObjects.Add(this.SiegeEngines);
			collectedObjects.Add(this.SiegeStrategy);
			collectedObjects.Add(this.Alleys);
			collectedObjects.Add(this.LocationComplex);
		}

		internal static object AutoGeneratedGetMemberValueParty(object o)
		{
			return ((Settlement)o).Party;
		}

		internal static object AutoGeneratedGetMemberValueBribePaid(object o)
		{
			return ((Settlement)o).BribePaid;
		}

		internal static object AutoGeneratedGetMemberValueSiegeEvent(object o)
		{
			return ((Settlement)o).SiegeEvent;
		}

		internal static object AutoGeneratedGetMemberValueIsActive(object o)
		{
			return ((Settlement)o).IsActive;
		}

		internal static object AutoGeneratedGetMemberValueNumberOfEnemiesSpottedAround(object o)
		{
			return ((Settlement)o).NumberOfEnemiesSpottedAround;
		}

		internal static object AutoGeneratedGetMemberValueNumberOfAlliesSpottedAround(object o)
		{
			return ((Settlement)o).NumberOfAlliesSpottedAround;
		}

		internal static object AutoGeneratedGetMemberValueSettlementHitPoints(object o)
		{
			return ((Settlement)o).SettlementHitPoints;
		}

		internal static object AutoGeneratedGetMemberValueSettlementComponent(object o)
		{
			return ((Settlement)o).SettlementComponent;
		}

		internal static object AutoGeneratedGetMemberValueGarrisonWagePaymentLimit(object o)
		{
			return ((Settlement)o).GarrisonWagePaymentLimit;
		}

		internal static object AutoGeneratedGetMemberValueLastThreatTime(object o)
		{
			return ((Settlement)o).LastThreatTime;
		}

		internal static object AutoGeneratedGetMemberValueSiegeEngines(object o)
		{
			return ((Settlement)o).SiegeEngines;
		}

		internal static object AutoGeneratedGetMemberValueNumberOfTroopsKilledOnSide(object o)
		{
			return ((Settlement)o).NumberOfTroopsKilledOnSide;
		}

		internal static object AutoGeneratedGetMemberValueSiegeStrategy(object o)
		{
			return ((Settlement)o).SiegeStrategy;
		}

		internal static object AutoGeneratedGetMemberValueAlleys(object o)
		{
			return ((Settlement)o).Alleys;
		}

		internal static object AutoGeneratedGetMemberValueLocationComplex(object o)
		{
			return ((Settlement)o).LocationComplex;
		}

		internal static object AutoGeneratedGetMemberValueCurrentSiegeState(object o)
		{
			return ((Settlement)o).CurrentSiegeState;
		}

		internal static object AutoGeneratedGetMemberValueNumberOfLordPartiesTargeting(object o)
		{
			return ((Settlement)o).NumberOfLordPartiesTargeting;
		}

		internal static object AutoGeneratedGetMemberValueCanBeClaimed(object o)
		{
			return ((Settlement)o).CanBeClaimed;
		}

		internal static object AutoGeneratedGetMemberValueClaimValue(object o)
		{
			return ((Settlement)o).ClaimValue;
		}

		internal static object AutoGeneratedGetMemberValueClaimedBy(object o)
		{
			return ((Settlement)o).ClaimedBy;
		}

		internal static object AutoGeneratedGetMemberValueHasVisited(object o)
		{
			return ((Settlement)o).HasVisited;
		}

		internal static object AutoGeneratedGetMemberValueLastVisitTimeOfOwner(object o)
		{
			return ((Settlement)o).LastVisitTimeOfOwner;
		}

		internal static object AutoGeneratedGetMemberValueStash(object o)
		{
			return ((Settlement)o).Stash;
		}

		internal static object AutoGeneratedGetMemberValue_isVisible(object o)
		{
			return ((Settlement)o)._isVisible;
		}

		internal static object AutoGeneratedGetMemberValue_nextLocatable(object o)
		{
			return ((Settlement)o)._nextLocatable;
		}

		internal static object AutoGeneratedGetMemberValue_readyMilitia(object o)
		{
			return ((Settlement)o)._readyMilitia;
		}

		internal static object AutoGeneratedGetMemberValue_settlementWallSectionHitPointsRatioList(object o)
		{
			return ((Settlement)o)._settlementWallSectionHitPointsRatioList;
		}

		internal static object AutoGeneratedGetMemberValue_boundVillages(object o)
		{
			return ((Settlement)o)._boundVillages;
		}

		internal static object AutoGeneratedGetMemberValue_lastAttackerParty(object o)
		{
			return ((Settlement)o)._lastAttackerParty;
		}

		internal static object AutoGeneratedGetMemberValue_siegeEngineMissiles(object o)
		{
			return ((Settlement)o)._siegeEngineMissiles;
		}

		[SaveableProperty(101)]
		public PartyBase Party { get; private set; }

		public int NumberOfLordPartiesAt
		{
			get
			{
				return this._numberOfLordPartiesAt;
			}
		}

		[SaveableProperty(116)]
		public int BribePaid { get; set; }

		[SaveableProperty(111)]
		public SiegeEvent SiegeEvent { get; set; }

		[SaveableProperty(112)]
		public bool IsActive { get; set; }

		public Hero Owner
		{
			get
			{
				return this.OwnerClan.Leader;
			}
		}

		public bool IsVisible
		{
			get
			{
				return this._isVisible;
			}
			set
			{
				if (this._isVisible != value)
				{
					this._isVisible = value;
					this.Party.OnVisibilityChanged(value);
				}
			}
		}

		[CachedData]
		public bool IsInspected { get; set; }

		public int WallSectionCount
		{
			get
			{
				if (!this.IsFortification)
				{
					return 0;
				}
				return 2;
			}
		}

		int ILocatable<Settlement>.LocatorNodeIndex
		{
			get
			{
				return this._locatorNodeIndex;
			}
			set
			{
				this._locatorNodeIndex = value;
			}
		}

		[SaveableProperty(115)]
		public float NumberOfEnemiesSpottedAround { get; set; }

		[SaveableProperty(128)]
		public float NumberOfAlliesSpottedAround { get; set; }

		Settlement ILocatable<Settlement>.NextLocatable
		{
			get
			{
				return this._nextLocatable;
			}
			set
			{
				this._nextLocatable = value;
			}
		}

		public int RandomValue
		{
			get
			{
				return this.Party.RandomValue;
			}
		}

		public Vec2 GetPosition2D
		{
			get
			{
				return this.Position2D;
			}
		}

		public float Militia
		{
			get
			{
				return (float)((this.MilitiaPartyComponent != null && this.MilitiaPartyComponent.MobileParty.IsActive) ? this.MilitiaPartyComponent.MobileParty.Party.NumberOfAllMembers : 0) + this._readyMilitia;
			}
			set
			{
				int num = ((this.MilitiaPartyComponent != null && this.MilitiaPartyComponent.MobileParty.IsActive) ? this.MilitiaPartyComponent.MobileParty.Party.NumberOfAllMembers : 0);
				this._readyMilitia = value - (float)num;
				if (this._readyMilitia < (float)(-(float)num))
				{
					this._readyMilitia = (float)(-(float)num);
				}
				if (this._readyMilitia < -1f || this._readyMilitia > 1f)
				{
					if (this.MilitiaPartyComponent != null)
					{
						this.TransferReadyMilitiasToMilitiaParty();
						return;
					}
					this.SpawnMilitiaParty();
				}
			}
		}

		public MBReadOnlyList<float> SettlementWallSectionHitPointsRatioList
		{
			get
			{
				return this._settlementWallSectionHitPointsRatioList;
			}
		}

		public float SettlementTotalWallHitPoints
		{
			get
			{
				float num = 0f;
				foreach (float num2 in this._settlementWallSectionHitPointsRatioList)
				{
					num += num2;
				}
				return num * this.MaxHitPointsOfOneWallSection;
			}
		}

		public float MaxHitPointsOfOneWallSection
		{
			get
			{
				if (this.WallSectionCount == 0)
				{
					return 0f;
				}
				return this.MaxWallHitPoints / (float)this.WallSectionCount;
			}
		}

		public void SetWallSectionHitPointsRatioAtIndex(int index, float hitPointsRatio)
		{
			this._settlementWallSectionHitPointsRatioList[index] = MBMath.ClampFloat(hitPointsRatio, 0f, 1f);
		}

		[SaveableProperty(121)]
		public float SettlementHitPoints { get; internal set; }

		public float MaxWallHitPoints
		{
			get
			{
				return Campaign.Current.Models.WallHitPointCalculationModel.CalculateMaximumWallHitPoint(this.Town);
			}
		}

		public MBReadOnlyList<MobileParty> Parties
		{
			get
			{
				return this._partiesCache;
			}
		}

		public MBReadOnlyList<Hero> HeroesWithoutParty
		{
			get
			{
				return this._heroesWithoutPartyCache;
			}
		}

		public MBReadOnlyList<Hero> Notables
		{
			get
			{
				return this._notablesCache;
			}
		}

		[SaveableProperty(152)]
		public SettlementComponent SettlementComponent { get; private set; }

		public Vec2 GatePosition
		{
			get
			{
				return this._gatePosition;
			}
			private set
			{
				this._gatePosition = value;
				Campaign campaign = Campaign.Current;
				if (campaign.MapSceneWrapper != null)
				{
					this.CurrentNavigationFace = campaign.MapSceneWrapper.GetFaceIndex(this._gatePosition);
				}
			}
		}

		public Vec2 Position2D
		{
			get
			{
				return this._position;
			}
			private set
			{
				this._position = value;
				Campaign.Current.SettlementLocator.UpdateLocator(this);
			}
		}

		public PathFaceRecord CurrentNavigationFace { get; private set; }

		public Vec3 GetLogicalPosition()
		{
			float num = 0f;
			Campaign.Current.MapSceneWrapper.GetHeightAtPoint(this.Position2D, ref num);
			return new Vec3(this.Position2D.x, this.Position2D.y, num, -1f);
		}

		public IFaction MapFaction
		{
			get
			{
				Town town = this.Town;
				IFaction faction;
				if ((faction = ((town != null) ? town.MapFaction : null)) == null)
				{
					Village village = this.Village;
					if ((faction = ((village != null) ? village.Bound.MapFaction : null)) == null)
					{
						Hideout hideout = this.Hideout;
						faction = ((hideout != null) ? hideout.MapFaction : null) ?? null;
					}
				}
				return faction;
			}
		}

		public TextObject Name
		{
			get
			{
				return this._name;
			}
			set
			{
				this.SetName(value);
			}
		}

		public TextObject EncyclopediaText { get; private set; }

		public string EncyclopediaLink
		{
			get
			{
				return (Campaign.Current.EncyclopediaManager.GetIdentifier(typeof(Settlement)) + "-" + base.StringId) ?? "";
			}
		}

		public TextObject EncyclopediaLinkWithName
		{
			get
			{
				return HyperlinkTexts.GetSettlementHyperlinkText(this.EncyclopediaLink, this.Name);
			}
		}

		[SaveableProperty(122)]
		public int GarrisonWagePaymentLimit { get; private set; }

		public void SetGarrisonWagePaymentLimit(int limit)
		{
			this.GarrisonWagePaymentLimit = limit;
		}

		public ItemRoster ItemRoster
		{
			get
			{
				return this.Party.ItemRoster;
			}
		}

		public MBReadOnlyList<Village> BoundVillages
		{
			get
			{
				return this._boundVillages;
			}
		}

		public MobileParty LastAttackerParty
		{
			get
			{
				return this._lastAttackerParty;
			}
			set
			{
				if (this._lastAttackerParty != value)
				{
					this._lastAttackerParty = value;
					if (value != null && (this.IsFortification || this.IsVillage))
					{
						foreach (Settlement settlement in Settlement.All)
						{
							if ((settlement.IsFortification || settlement.IsVillage) && settlement.LastAttackerParty == value)
							{
								settlement.LastAttackerParty = null;
							}
						}
					}
					this._lastAttackerParty = value;
					if (this._lastAttackerParty != null)
					{
						this.LastThreatTime = CampaignTime.Now;
					}
				}
			}
		}

		[SaveableProperty(137)]
		public CampaignTime LastThreatTime { get; private set; }

		[SaveableProperty(149)]
		public SiegeEvent.SiegeEnginesContainer SiegeEngines { get; private set; }

		public MBReadOnlyList<SiegeEvent.SiegeEngineMissile> SiegeEngineMissiles
		{
			get
			{
				return this._siegeEngineMissiles;
			}
		}

		public BattleSideEnum BattleSide
		{
			get
			{
				return BattleSideEnum.Defender;
			}
		}

		[SaveableProperty(150)]
		public int NumberOfTroopsKilledOnSide { get; private set; }

		[SaveableProperty(151)]
		public SiegeStrategy SiegeStrategy { get; private set; }

		public IEnumerable<PartyBase> GetInvolvedPartiesForEventType(MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
		{
			return Campaign.Current.Models.EncounterModel.GetDefenderPartiesOfSettlement(this, mapEventType);
		}

		public PartyBase GetNextInvolvedPartyForEventType(ref int partyIndex, MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
		{
			return Campaign.Current.Models.EncounterModel.GetNextDefenderPartyOfSettlement(this, ref partyIndex, mapEventType);
		}

		public bool HasInvolvedPartyForEventType(PartyBase party, MapEvent.BattleTypes mapEventType = MapEvent.BattleTypes.Siege)
		{
			int num = -1;
			for (PartyBase partyBase = Campaign.Current.Models.EncounterModel.GetNextDefenderPartyOfSettlement(this, ref num, mapEventType); partyBase != null; partyBase = Campaign.Current.Models.EncounterModel.GetNextDefenderPartyOfSettlement(this, ref num, mapEventType))
			{
				if (partyBase == party)
				{
					return true;
				}
			}
			return false;
		}

		internal void AddBoundVillageInternal(Village village)
		{
			this._boundVillages.Add(village);
		}

		internal void RemoveBoundVillageInternal(Village village)
		{
			this._boundVillages.Remove(village);
		}

		[SaveableProperty(133)]
		public List<Alley> Alleys { get; private set; }

		private void SetName(TextObject name)
		{
			this._name = name;
			this.SetNameAttributes();
		}

		private void SetNameAttributes()
		{
			this._name.SetTextVariable("IS_SETTLEMENT", 1);
			this._name.SetTextVariable("IS_CASTLE", this.IsCastle ? 1 : 0);
			this._name.SetTextVariable("IS_TOWN", this.IsTown ? 1 : 0);
			this._name.SetTextVariable("IS_HIDEOUT", this.IsHideout ? 1 : 0);
		}

		private void InitSettlement()
		{
			this._partiesCache = new MBList<MobileParty>();
			this._heroesWithoutPartyCache = new MBList<Hero>();
			this._notablesCache = new MBList<Hero>();
			this._boundVillages = new MBList<Village>();
			this.SettlementHitPoints = 1f;
			this.CurrentSiegeState = Settlement.SiegeState.OnTheWalls;
			float currentTime = Campaign.CurrentTime;
			this.LastVisitTimeOfOwner = currentTime;
		}

		public bool IsTown
		{
			get
			{
				return this.Town != null && this.Town.IsTown;
			}
		}

		public bool IsCastle
		{
			get
			{
				return this.Town != null && this.Town.IsCastle;
			}
		}

		public bool IsFortification
		{
			get
			{
				return this.IsTown || this.IsCastle;
			}
		}

		public bool IsVillage
		{
			get
			{
				return this.Village != null;
			}
		}

		public bool IsHideout
		{
			get
			{
				return this.Hideout != null;
			}
		}

		public bool IsStarving
		{
			get
			{
				return this.Town != null && this.Town.FoodStocks <= 0f;
			}
		}

		public bool IsRaided
		{
			get
			{
				return this.IsVillage && this.Village.VillageState == Village.VillageStates.Looted;
			}
		}

		public bool InRebelliousState
		{
			get
			{
				return (this.IsTown || this.IsCastle) && this.Town.InRebelliousState;
			}
		}

		public bool IsUnderRaid
		{
			get
			{
				return this.Party.MapEvent != null && this.Party.MapEvent.IsRaid;
			}
		}

		public bool IsUnderSiege
		{
			get
			{
				return this.SiegeEvent != null;
			}
		}

		public bool IsUnderRebellionAttack()
		{
			if (this.Party.MapEvent != null && this.Party.MapEvent.IsSiegeAssault)
			{
				Hero owner = this.Party.MapEvent.AttackerSide.LeaderParty.MobileParty.Party.Owner;
				if (owner != null && owner.Clan.IsRebelClan)
				{
					return true;
				}
			}
			return false;
		}

		public Settlement()
			: this(new TextObject("{=!}unnamed", null), null, null)
		{
		}

		public Settlement(TextObject name, LocationComplex locationComplex, PartyTemplateObject pt)
		{
			this._name = name;
			this._isVisible = true;
			this.IsActive = true;
			this.Party = new PartyBase(this);
			this.InitSettlement();
			this._position = Vec2.Zero;
			this.LocationComplex = locationComplex;
			this.Alleys = new List<Alley>();
			this.HasVisited = false;
			this.Stash = new ItemRoster();
		}

		public float GetSettlementValueForEnemyHero(Hero hero)
		{
			return Campaign.Current.Models.SettlementValueModel.CalculateSettlementValueForEnemyHero(this, hero);
		}

		[SaveableProperty(138)]
		public LocationComplex LocationComplex { get; private set; }

		public static Settlement CurrentSettlement
		{
			get
			{
				if (PlayerCaptivity.CaptorParty != null && PlayerCaptivity.CaptorParty.IsSettlement)
				{
					return PlayerCaptivity.CaptorParty.Settlement;
				}
				if (PlayerEncounter.EncounterSettlement != null)
				{
					return PlayerEncounter.EncounterSettlement;
				}
				if (MobileParty.MainParty.CurrentSettlement != null)
				{
					return MobileParty.MainParty.CurrentSettlement;
				}
				return null;
			}
		}

		public float GetValue(Hero hero = null, bool countAlsoBoundedSettlements = true)
		{
			float num = 0f;
			if (this.IsVillage)
			{
				num = 100000f + this.Village.Hearth * 250f;
				num *= ((this.Village.VillageState == Village.VillageStates.Looted) ? 0.8f : ((this.Village.VillageState == Village.VillageStates.BeingRaided) ? 0.85f : (0.8f + (0.667f + 0.333f * this.Village.Settlement.SettlementHitPoints) * 0.2f)));
			}
			else if (this.IsCastle)
			{
				num = 250000f + this.Town.Prosperity * 1000f;
			}
			else if (this.IsTown)
			{
				num = 750000f + this.Town.Prosperity * 1000f;
			}
			float num2 = 1f;
			if (hero != null && hero.Clan.Settlements.Count > 0)
			{
				float num3 = MathF.Pow(Campaign.Current.Models.MapDistanceModel.GetDistance(hero.Clan.FactionMidSettlement, this) / Campaign.AverageDistanceBetweenTwoFortifications * 4f, 2f);
				num3 = MathF.Clamp(num3, 0f, 100f);
				num3 -= 16f;
				num2 *= (100f - num3) / 100f;
			}
			if (countAlsoBoundedSettlements)
			{
				foreach (Village village in this.BoundVillages)
				{
					num += village.Settlement.GetValue(hero, false);
				}
			}
			return num * num2;
		}

		public override TextObject GetName()
		{
			return this.Name;
		}

		public float GetSettlementValueForFaction(IFaction faction)
		{
			return Campaign.Current.Models.SettlementValueModel.CalculateSettlementValueForFaction(this, faction);
		}

		public override string ToString()
		{
			return this.Name.ToString();
		}

		internal void AddMobileParty(MobileParty mobileParty)
		{
			if (!this._partiesCache.Contains(mobileParty))
			{
				this._partiesCache.Add(mobileParty);
				if (mobileParty.IsLordParty)
				{
					this._numberOfLordPartiesAt++;
					return;
				}
			}
			else
			{
				Debug.FailedAssert("mobileParty is already in mobileParties List!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Settlement.cs", "AddMobileParty", 648);
			}
		}

		internal void RemoveMobileParty(MobileParty mobileParty)
		{
			if (this._partiesCache.Contains(mobileParty))
			{
				this._partiesCache.Remove(mobileParty);
				if (mobileParty.IsLordParty)
				{
					this._numberOfLordPartiesAt--;
					return;
				}
			}
			else
			{
				Debug.FailedAssert("mobileParty is not in mobileParties List", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Settlement.cs", "RemoveMobileParty", 667);
			}
		}

		internal void AddHeroWithoutParty(Hero individual)
		{
			if (!this._heroesWithoutPartyCache.Contains(individual))
			{
				this._heroesWithoutPartyCache.Add(individual);
				this.CollectNotablesToCache();
				return;
			}
			Debug.FailedAssert("Notable is already in Notable List!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Settlement.cs", "AddHeroWithoutParty", 686);
		}

		internal void RemoveHeroWithoutParty(Hero individual)
		{
			if (this._heroesWithoutPartyCache.Contains(individual))
			{
				this._heroesWithoutPartyCache.Remove(individual);
				this.CollectNotablesToCache();
				return;
			}
			Debug.FailedAssert("Notable is not in Notable List", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Settlement.cs", "RemoveHeroWithoutParty", 700);
		}

		private void CollectNotablesToCache()
		{
			this._notablesCache.Clear();
			foreach (Hero hero in this.HeroesWithoutParty)
			{
				if (hero.IsNotable)
				{
					this._notablesCache.Add(hero);
				}
			}
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			bool isInitialized = base.IsInitialized;
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(node.Attributes["name"].Value, null);
			this.Position2D = new Vec2((float)Convert.ToDouble(node.Attributes["posX"].Value), (float)Convert.ToDouble(node.Attributes["posY"].Value));
			this.GatePosition = this.Position2D;
			if (node.Attributes["gate_posX"] != null)
			{
				this.GatePosition = new Vec2((float)Convert.ToDouble(node.Attributes["gate_posX"].Value), (float)Convert.ToDouble(node.Attributes["gate_posY"].Value));
			}
			this.Culture = objectManager.ReadObjectReferenceFromXml<CultureObject>("culture", node);
			this.EncyclopediaText = ((node.Attributes["text"] != null) ? new TextObject(node.Attributes["text"].Value, null) : TextObject.Empty);
			if (Campaign.Current != null && Campaign.Current.MapSceneWrapper != null && !Campaign.Current.MapSceneWrapper.GetFaceIndex(this.Position2D).IsValid())
			{
				Debug.Print("Center position of settlement(" + this.GetName() + ") is invalid", 0, Debug.DebugColor.White, 17592186044416UL);
			}
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Name == "Components")
				{
					foreach (object obj2 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode2 = (XmlNode)obj2;
						this.SetSettlementComponent((SettlementComponent)objectManager.CreateObjectFromXmlNode(xmlNode2));
					}
				}
				if (xmlNode.Name == "Locations")
				{
					LocationComplexTemplate locationComplexTemplate = (LocationComplexTemplate)objectManager.ReadObjectReferenceFromXml("complex_template", typeof(LocationComplexTemplate), xmlNode);
					if (!isInitialized)
					{
						this.LocationComplex = new LocationComplex(locationComplexTemplate);
					}
					else
					{
						this.LocationComplex.Initialize(locationComplexTemplate);
					}
					foreach (object obj3 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode3 = (XmlNode)obj3;
						if (xmlNode3.Name == "Location")
						{
							Location locationWithId = this.LocationComplex.GetLocationWithId(xmlNode3.Attributes["id"].Value);
							if (xmlNode3.Attributes["max_prosperity"] != null)
							{
								locationWithId.ProsperityMax = int.Parse(xmlNode3.Attributes["max_prosperity"].Value);
							}
							bool flag = false;
							for (int i = 0; i < 4; i++)
							{
								string text = "scene_name" + ((i > 0) ? ("_" + i) : "");
								string text2 = ((xmlNode3.Attributes[text] != null) ? xmlNode3.Attributes[text].Value : "");
								flag = flag || !string.IsNullOrEmpty(text2);
								locationWithId.SetSceneName(i, text2);
							}
						}
					}
				}
				if (xmlNode.Name == "CommonAreas")
				{
					int num = 0;
					foreach (object obj4 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode4 = (XmlNode)obj4;
						if (xmlNode4.Name == "Area")
						{
							string value = xmlNode4.Attributes["name"].Value;
							string text3 = "alley_" + (num + 1);
							if (!isInitialized)
							{
								this.Alleys.Add(new Alley(this, text3, new TextObject(value, null)));
							}
							else
							{
								this.Alleys[num].Initialize(this, text3, new TextObject(value, null));
							}
							num++;
						}
					}
					foreach (Alley alley in this.Alleys)
					{
						foreach (Alley alley2 in this.Alleys)
						{
						}
					}
				}
			}
			if (!isInitialized)
			{
				Clan clan = objectManager.ReadObjectReferenceFromXml<Clan>("owner", node);
				if (clan != null && this.Town != null)
				{
					this.Town.OwnerClan = clan;
				}
			}
			this.SetNameAttributes();
		}

		public void OnFinishLoadState()
		{
			if (this.IsFortification)
			{
				foreach (Building building in this.Town.Buildings)
				{
					if (building.BuildingType.IsDefaultProject && building.CurrentLevel != 1)
					{
						building.CurrentLevel = 1;
					}
				}
			}
			this.Party.UpdateVisibilityAndInspected(0f);
		}

		public void OnGameInitialized()
		{
			Campaign campaign = Campaign.Current;
			this.CurrentNavigationFace = campaign.MapSceneWrapper.GetFaceIndex(this.GatePosition);
		}

		public void OnGameCreated()
		{
			SettlementComponent settlementComponent = this.SettlementComponent;
			if (settlementComponent != null)
			{
				settlementComponent.OnInit();
			}
			this.CreateFigure();
			this.Party.SetLevelMaskIsDirty();
			for (int i = 0; i < this.WallSectionCount; i++)
			{
				this._settlementWallSectionHitPointsRatioList.Add(1f);
			}
		}

		public void OnSessionStart()
		{
			PartyBase party = this.Party;
			if (party == null)
			{
				return;
			}
			party.SetVisualAsDirty();
		}

		[LoadInitializationCallback]
		private void OnLoad()
		{
			((ILocatable<Settlement>)this).LocatorNodeIndex = -1;
			this._partiesCache = new MBList<MobileParty>();
			this._heroesWithoutPartyCache = new MBList<Hero>();
			this._notablesCache = new MBList<Hero>();
		}

		[LateLoadInitializationCallback]
		private void OnLateLoad(MetaData metaData, ObjectLoadData objectLoadData)
		{
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.2.0", 24202))
			{
				this._oldProsperityObsolete = (float)objectLoadData.GetMemberValueBySaveId(118);
			}
		}

		public static Settlement Find(string idString)
		{
			return MBObjectManager.Instance.GetObject<Settlement>(idString);
		}

		public static Settlement FindFirst(Func<Settlement, bool> predicate)
		{
			return Settlement.All.FirstOrDefault(predicate);
		}

		public static IEnumerable<Settlement> FindAll(Func<Settlement, bool> predicate)
		{
			return Settlement.All.Where(predicate);
		}

		public static MBReadOnlyList<Settlement> All
		{
			get
			{
				return Campaign.Current.Settlements;
			}
		}

		public static Settlement GetFirst
		{
			get
			{
				return Settlement.All.FirstOrDefault<Settlement>();
			}
		}

		public static LocatableSearchData<Settlement> StartFindingLocatablesAroundPosition(Vec2 position, float radius)
		{
			return Campaign.Current.SettlementLocator.StartFindingLocatablesAroundPosition(position, radius);
		}

		public static Settlement FindNextLocatable(ref LocatableSearchData<Settlement> data)
		{
			return Campaign.Current.SettlementLocator.FindNextLocatable(ref data);
		}

		public void OnPlayerEncounterFinish()
		{
			LocationComplex locationComplex = this.LocationComplex;
			if (locationComplex == null)
			{
				return;
			}
			locationComplex.ClearTempCharacters();
		}

		TextObject ITrackableBase.GetName()
		{
			return this.Name;
		}

		public Vec3 GetPosition()
		{
			return this.GetLogicalPosition();
		}

		public float GetTrackDistanceToMainAgent()
		{
			return this.GetPosition().Distance(Hero.MainHero.GetPosition());
		}

		public bool CheckTracked(BasicCharacterObject basicCharacter)
		{
			return this.Notables.Any((Hero t) => t.CharacterObject == basicCharacter) || this.Party.PrisonRoster.GetTroopRoster().Any((TroopRosterElement t) => t.Character == basicCharacter) || this.Parties.Any((MobileParty p) => p.CheckTracked(basicCharacter));
		}

		private void CreateFigure()
		{
		}

		[SaveableProperty(142)]
		public Settlement.SiegeState CurrentSiegeState { get; private set; }

		public Clan OwnerClan
		{
			get
			{
				if (this.Village != null)
				{
					return this.Village.Bound.OwnerClan;
				}
				if (this.Town != null)
				{
					return this.Town.OwnerClan;
				}
				if (this.IsHideout)
				{
					return this.Hideout.MapFaction as Clan;
				}
				return null;
			}
		}

		public bool IsAlerted
		{
			get
			{
				return this.NumberOfEnemiesSpottedAround >= 1f;
			}
		}

		public void SetNextSiegeState()
		{
			if (this.CurrentSiegeState == Settlement.SiegeState.InTheLordsHall)
			{
				return;
			}
			this.CurrentSiegeState++;
		}

		public void ResetSiegeState()
		{
			this.CurrentSiegeState = Settlement.SiegeState.OnTheWalls;
		}

		public void AddGarrisonParty(bool addInitialGarrison = false)
		{
			GarrisonPartyComponent.CreateGarrisonParty(string.Concat(new string[]
			{
				"garrison_party_",
				base.StringId,
				"_",
				this.OwnerClan.StringId,
				"_1"
			}), this, addInitialGarrison);
		}

		protected override void AfterLoad()
		{
			if (this.SiegeEvent != null && this.SiegeEvent.BesiegerCamp.LeaderParty == null)
			{
				this.SiegeEvent.FinalizeSiegeEvent();
			}
			this._notablesCache = new MBList<Hero>();
			this.CollectNotablesToCache();
			this.Party.AfterLoad();
			foreach (Alley alley in this.Alleys)
			{
				alley.AfterLoad();
			}
			if (this.Town != null && this._oldProsperityObsolete > 0f)
			{
				this.Town.Prosperity = this._oldProsperityObsolete;
			}
		}

		private void SpawnMilitiaParty()
		{
			MilitiaPartyComponent.CreateMilitiaParty("militias_of_" + base.StringId + "_aaa1", this);
			this.TransferReadyMilitiasToMilitiaParty();
		}

		private void TransferReadyMilitiasToMilitiaParty()
		{
			if (this._readyMilitia >= 1f)
			{
				int num = MathF.Floor(this._readyMilitia);
				this._readyMilitia -= (float)num;
				this.AddMilitiasToParty(this.MilitiaPartyComponent.MobileParty, num);
				return;
			}
			if ((int)this._readyMilitia < -1)
			{
				int num2 = MathF.Ceiling(this._readyMilitia);
				this._readyMilitia -= (float)num2;
				Settlement.RemoveMilitiasFromParty(this.MilitiaPartyComponent.MobileParty, -num2);
			}
		}

		private void AddMilitiasToParty(MobileParty militaParty, int militiaToAdd)
		{
			float num;
			float num2;
			Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaSpawnRate(this, out num, out num2);
			this.AddTroopToMilitiaParty(militaParty, this.Culture.MeleeMilitiaTroop, this.Culture.MeleeEliteMilitiaTroop, num, ref militiaToAdd);
			this.AddTroopToMilitiaParty(militaParty, this.Culture.RangedMilitiaTroop, this.Culture.RangedEliteMilitiaTroop, 1f, ref militiaToAdd);
		}

		private void AddTroopToMilitiaParty(MobileParty militaParty, CharacterObject militiaTroop, CharacterObject eliteMilitiaTroop, float troopRatio, ref int numberToAddRemaining)
		{
			if (numberToAddRemaining > 0)
			{
				int num = MBRandom.RoundRandomized(troopRatio * (float)numberToAddRemaining);
				float num2 = Campaign.Current.Models.SettlementMilitiaModel.CalculateEliteMilitiaSpawnChance(this);
				for (int i = 0; i < num; i++)
				{
					if (MBRandom.RandomFloat < num2)
					{
						militaParty.MemberRoster.AddToCounts(eliteMilitiaTroop, 1, false, 0, 0, true, -1);
					}
					else
					{
						militaParty.MemberRoster.AddToCounts(militiaTroop, 1, false, 0, 0, true, -1);
					}
				}
				numberToAddRemaining -= num;
			}
		}

		private static void RemoveMilitiasFromParty(MobileParty militaParty, int numberToRemove)
		{
			if (militaParty.MemberRoster.TotalManCount <= numberToRemove)
			{
				militaParty.MemberRoster.Clear();
				return;
			}
			float num = (float)numberToRemove / (float)militaParty.MemberRoster.TotalManCount;
			int num2 = numberToRemove;
			for (int i = 0; i < militaParty.MemberRoster.Count; i++)
			{
				int num3 = MBRandom.RoundRandomized((float)militaParty.MemberRoster.GetElementNumber(i) * num);
				if (num3 > num2)
				{
					num3 = num2;
				}
				militaParty.MemberRoster.AddToCountsAtIndex(i, -num3, 0, 0, false);
				num2 -= num3;
				if (num2 <= 0)
				{
					break;
				}
			}
			militaParty.MemberRoster.RemoveZeroCounts();
		}

		public void SetSiegeStrategy(SiegeStrategy strategy)
		{
			this.SiegeStrategy = strategy;
		}

		public void InitializeSiegeEventSide()
		{
			this.SiegeStrategy = DefaultSiegeStrategies.Custom;
			this.NumberOfTroopsKilledOnSide = 0;
			SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = null;
			this.SiegeEngines = new SiegeEvent.SiegeEnginesContainer(BattleSideEnum.Defender, siegeEngineConstructionProgress);
			this._siegeEngineMissiles = new MBList<SiegeEvent.SiegeEngineMissile>();
			this.SetPrebuiltSiegeEngines();
		}

		public void OnTroopsKilledOnSide(int killCount)
		{
			this.NumberOfTroopsKilledOnSide += killCount;
		}

		public void AddSiegeEngineMissile(SiegeEvent.SiegeEngineMissile missile)
		{
			this._siegeEngineMissiles.Add(missile);
		}

		public void RemoveDeprecatedMissiles()
		{
			this._siegeEngineMissiles.RemoveAll((SiegeEvent.SiegeEngineMissile missile) => missile.CollisionTime.IsPast);
		}

		private void SetPrebuiltSiegeEngines()
		{
			foreach (SiegeEngineType siegeEngineType in Campaign.Current.Models.SiegeEventModel.GetPrebuiltSiegeEnginesOfSettlement(this))
			{
				float siegeEngineHitPoints = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitPoints(this.SiegeEvent, siegeEngineType, BattleSideEnum.Defender);
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = new SiegeEvent.SiegeEngineConstructionProgress(siegeEngineType, 1f, siegeEngineHitPoints);
				this.SiegeEngines.AddPrebuiltEngineToReserve(siegeEngineConstructionProgress);
				this.SiegeEvent.CreateSiegeObject(siegeEngineConstructionProgress, this.SiegeEvent.GetSiegeEventSide(BattleSideEnum.Defender));
			}
		}

		public void GetAttackTarget(ISiegeEventSide siegeEventSide, SiegeEngineType siegeEngine, int siegeEngineSlot, out SiegeBombardTargets targetType, out int targetIndex)
		{
			targetType = SiegeBombardTargets.None;
			targetIndex = -1;
			int num;
			float num2;
			this.SiegeEvent.FindAttackableRangedEngineWithHighestPriority(siegeEventSide, siegeEngineSlot, out num, out num2);
			if (num == -1)
			{
				return;
			}
			float num3 = num2;
			if (MBRandom.RandomFloat * num3 < num2)
			{
				targetIndex = num;
				targetType = SiegeBombardTargets.RangedEngines;
			}
		}

		public void FinalizeSiegeEvent()
		{
			this.ResetSiegeState();
			this.SiegeEvent = null;
			this.Party.SetLevelMaskIsDirty();
			this.Party.SetVisualAsDirty();
		}

		bool IMapEntity.IsMobileEntity
		{
			get
			{
				return false;
			}
		}

		bool IMapEntity.ShowCircleAroundEntity
		{
			get
			{
				return true;
			}
		}

		Vec2 IMapEntity.InteractionPosition
		{
			get
			{
				return this.GatePosition;
			}
		}

		bool IMapEntity.OnMapClick(bool followModifierUsed)
		{
			if (this.IsVisible)
			{
				MobileParty.MainParty.Ai.SetMoveGoToSettlement(this);
				return true;
			}
			return false;
		}

		void IMapEntity.OnOpenEncyclopedia()
		{
			Campaign.Current.EncyclopediaManager.GoToLink(this.EncyclopediaLink);
		}

		void IMapEntity.OnHover()
		{
			InformationManager.ShowTooltip(typeof(Settlement), new object[] { this, false });
		}

		bool IMapEntity.IsEnemyOf(IFaction faction)
		{
			return FactionManager.IsAtWarAgainstFaction(this.MapFaction, faction);
		}

		bool IMapEntity.IsAllyOf(IFaction faction)
		{
			return FactionManager.IsAlliedWithFaction(this.MapFaction, faction);
		}

		public void OnPartyInteraction(MobileParty mobileParty)
		{
			if (mobileParty.ShortTermTargetSettlement != null && (mobileParty.ShortTermTargetSettlement.Party.SiegeEvent == null || mobileParty == MobileParty.MainParty || mobileParty.MapFaction == mobileParty.ShortTermTargetSettlement.SiegeEvent.BesiegerCamp.LeaderParty.MapFaction) && (mobileParty.ShortTermTargetSettlement.Party.MapEvent == null || mobileParty == MobileParty.MainParty || mobileParty.MapFaction == mobileParty.ShortTermTargetSettlement.Party.MapEvent.AttackerSide.LeaderParty.MapFaction || (mobileParty.ShortTermTargetSettlement.Party.MapEvent.IsSallyOut && mobileParty.MapFaction == mobileParty.ShortTermTargetSettlement.Party.MapEvent.DefenderSide.LeaderParty.MapFaction)))
			{
				if (mobileParty == MobileParty.MainParty && (mobileParty.ShortTermTargetSettlement.Party.MapEvent == null || !mobileParty.ShortTermTargetSettlement.Party.MapEvent.IsRaid || mobileParty.ShortTermTargetSettlement.Party.MapEvent.DefenderSide.NumRemainingSimulationTroops > 0))
				{
					MapState mapState = Game.Current.GameStateManager.ActiveState as MapState;
					if (mapState != null)
					{
						mapState.OnMainPartyEncounter();
					}
				}
				if (mobileParty.ShortTermTargetSettlement.Party.MapEvent != null && mobileParty.ShortTermTargetSettlement.Party.MapEvent.IsRaid && mobileParty.DefaultBehavior == AiBehavior.RaidSettlement)
				{
					mobileParty.Ai.RethinkAtNextHourlyTick = true;
					mobileParty.Ai.SetMoveModeHold();
					return;
				}
				EncounterManager.StartSettlementEncounter(mobileParty, mobileParty.ShortTermTargetSettlement);
			}
		}

		public void GetMountAndHarnessVisualIdsForPartyIcon(out string mountStringId, out string harnessStringId)
		{
			mountStringId = "";
			harnessStringId = "";
		}

		public void SetSettlementComponent(SettlementComponent settlementComponent)
		{
			settlementComponent.Owner = this.Party;
			this.SettlementComponent = settlementComponent;
			if (this.SettlementComponent is Town)
			{
				this.Town = this.SettlementComponent as Town;
				return;
			}
			if (this.SettlementComponent is Village)
			{
				this.Village = this.SettlementComponent as Village;
				return;
			}
			if (this.SettlementComponent is Hideout)
			{
				this.Hideout = this.SettlementComponent as Hideout;
			}
		}

		[SaveableField(102)]
		public int NumberOfLordPartiesTargeting;

		[CachedData]
		private int _numberOfLordPartiesAt;

		[SaveableField(104)]
		public int CanBeClaimed;

		[SaveableField(105)]
		public float ClaimValue;

		[SaveableField(106)]
		public Hero ClaimedBy;

		[SaveableField(107)]
		public bool HasVisited;

		[SaveableField(110)]
		public float LastVisitTimeOfOwner;

		[SaveableField(113)]
		private bool _isVisible;

		[CachedData]
		private int _locatorNodeIndex;

		[SaveableField(117)]
		private Settlement _nextLocatable;

		[CachedData]
		private float _oldProsperityObsolete = -1f;

		[SaveableField(119)]
		private float _readyMilitia;

		[SaveableField(120)]
		private MBList<float> _settlementWallSectionHitPointsRatioList = new MBList<float>();

		[CachedData]
		private MBList<MobileParty> _partiesCache;

		[CachedData]
		private MBList<Hero> _heroesWithoutPartyCache;

		[CachedData]
		private MBList<Hero> _notablesCache;

		private Vec2 _gatePosition;

		private Vec2 _position;

		public CultureObject Culture;

		private TextObject _name;

		[SaveableField(129)]
		private MBList<Village> _boundVillages;

		[SaveableField(131)]
		private MobileParty _lastAttackerParty;

		[SaveableField(148)]
		private MBList<SiegeEvent.SiegeEngineMissile> _siegeEngineMissiles;

		public Town Town;

		public Village Village;

		public Hideout Hideout;

		[CachedData]
		public MilitiaPartyComponent MilitiaPartyComponent;

		[SaveableField(145)]
		public readonly ItemRoster Stash;

		public enum SiegeState
		{
			OnTheWalls,
			InTheLordsHall,
			Invalid
		}
	}
}
