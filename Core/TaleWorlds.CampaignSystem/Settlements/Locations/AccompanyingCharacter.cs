using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Locations
{
	public class AccompanyingCharacter
	{
		internal static void AutoGeneratedStaticCollectObjectsAccompanyingCharacter(object o, List<object> collectedObjects)
		{
			((AccompanyingCharacter)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._disallowedLocations);
		}

		internal static object AutoGeneratedGetMemberValueIsFollowingPlayerAtMissionStart(object o)
		{
			return ((AccompanyingCharacter)o).IsFollowingPlayerAtMissionStart;
		}

		internal static object AutoGeneratedGetMemberValue_disallowedLocations(object o)
		{
			return ((AccompanyingCharacter)o)._disallowedLocations;
		}

		[SaveableProperty(1)]
		public bool IsFollowingPlayerAtMissionStart { get; private set; }

		public AccompanyingCharacter(LocationCharacter locationCharacter, bool isFollowingPlayerAtMissionStart)
		{
			this._disallowedLocations = new List<Location>();
			this.LocationCharacter = locationCharacter;
			this.IsFollowingPlayerAtMissionStart = isFollowingPlayerAtMissionStart;
		}

		public bool CanEnterLocation(Location location)
		{
			return !this._disallowedLocations.Contains(location);
		}

		public void AllowEntranceToLocations(Func<Location, bool> predicate)
		{
			foreach (Location location in LocationComplex.Current.GetListOfLocations())
			{
				if (predicate(location) && this._disallowedLocations.Contains(location))
				{
					this._disallowedLocations.Remove(location);
				}
			}
		}

		public void DisallowEntranceToLocations(Func<Location, bool> predicate)
		{
			foreach (Location location in LocationComplex.Current.GetListOfLocations())
			{
				if (predicate(location) && !this._disallowedLocations.Contains(location))
				{
					this._disallowedLocations.Add(location);
				}
			}
		}

		public void AllowEntranceToAllLocations()
		{
			this._disallowedLocations.Clear();
		}

		public void DisallowEntranceToAllLocations()
		{
			this.AllowEntranceToAllLocations();
			this._disallowedLocations.AddRange(LocationComplex.Current.GetListOfLocations());
		}

		public LocationCharacter LocationCharacter;

		[SaveableField(2)]
		private List<Location> _disallowedLocations;
	}
}
