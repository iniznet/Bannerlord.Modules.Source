using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Locations
{
	public class Location
	{
		internal static void AutoGeneratedStaticCollectObjectsLocation(object o, List<object> collectedObjects)
		{
			((Location)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._overriddenName);
			collectedObjects.Add(this._overriddenDoorName);
			collectedObjects.Add(this.SpecialItems);
		}

		internal static object AutoGeneratedGetMemberValueStringId(object o)
		{
			return ((Location)o).StringId;
		}

		internal static object AutoGeneratedGetMemberValueSpecialItems(object o)
		{
			return ((Location)o).SpecialItems;
		}

		internal static object AutoGeneratedGetMemberValueIsReserved(object o)
		{
			return ((Location)o).IsReserved;
		}

		internal static object AutoGeneratedGetMemberValue_overriddenName(object o)
		{
			return ((Location)o)._overriddenName;
		}

		internal static object AutoGeneratedGetMemberValue_overriddenDoorName(object o)
		{
			return ((Location)o)._overriddenDoorName;
		}

		[SaveableProperty(10)]
		public string StringId { get; private set; }

		[SaveableProperty(20)]
		public List<ItemObject> SpecialItems { get; private set; }

		[SaveableProperty(30)]
		public bool IsReserved { get; private set; }

		public List<Location> LocationsOfPassages { get; private set; }

		public TextObject Name
		{
			get
			{
				if (!TextObject.IsNullOrEmpty(this._overriddenName))
				{
					return this._overriddenName;
				}
				return this._name;
			}
		}

		public TextObject DoorName
		{
			get
			{
				if (!this._overriddenDoorName.Equals(TextObject.Empty))
				{
					return this._overriddenDoorName;
				}
				return this._doorName;
			}
		}

		public bool IsIndoor { get; private set; }

		public bool CanBeReserved { get; private set; }

		public bool IsInitialized { get; private set; }

		public int CharacterCount
		{
			get
			{
				return this._characterList.Count;
			}
		}

		public Location(string stringId, TextObject name, TextObject doorName, int prosperityMax, bool isIndoor, bool canBeReserved, string playerCanEnter, string playerCanSee, string aiCanExit, string aiCanEnter, string[] sceneNames, LocationComplex locationComplex)
		{
			this.ProsperityMax = prosperityMax;
			this._characterList = new List<LocationCharacter>();
			this.LocationsOfPassages = new List<Location>();
			this.SpecialItems = new List<ItemObject>();
			this.StringId = stringId;
			this._name = name;
			this._doorName = doorName;
			this.IsIndoor = isIndoor;
			this.CanBeReserved = canBeReserved;
			this.IsReserved = false;
			this._aiCanEnter = aiCanEnter;
			this._playerCanEnter = playerCanEnter;
			this._playerCanSee = playerCanSee;
			this._aiCanExit = aiCanExit;
			this._ownerComplex = locationComplex;
			this._overriddenName = TextObject.Empty;
			this._overriddenDoorName = TextObject.Empty;
			this._sceneNames = new string[4];
			for (int i = 0; i < 4; i++)
			{
				this._sceneNames[i] = sceneNames[i];
			}
		}

		public Location(Location location, LocationComplex locationComplex)
			: this(location.StringId, location.Name, location.DoorName, location.ProsperityMax, location.IsIndoor, location.CanBeReserved, location._playerCanEnter, location._playerCanSee, location._aiCanExit, location._aiCanEnter, location._sceneNames, locationComplex)
		{
		}

		public void Initialize(Location locationTemplate, LocationComplex ownerComplex)
		{
			this.ProsperityMax = locationTemplate.ProsperityMax;
			this.LocationsOfPassages = new List<Location>();
			this._name = locationTemplate.Name;
			this._doorName = locationTemplate.DoorName;
			this.IsIndoor = locationTemplate.IsIndoor;
			this.CanBeReserved = locationTemplate.CanBeReserved;
			this._aiCanEnter = locationTemplate._aiCanEnter;
			this._playerCanEnter = locationTemplate._playerCanEnter;
			this._playerCanSee = locationTemplate._playerCanSee;
			this._aiCanExit = locationTemplate._aiCanExit;
			this._ownerComplex = ownerComplex;
			this._characterList = new List<LocationCharacter>();
			this._sceneNames = new string[4];
			this.IsInitialized = true;
			for (int i = 0; i < 4; i++)
			{
				this._sceneNames[i] = locationTemplate._sceneNames[i];
			}
		}

		public bool CanAIExit(LocationCharacter character)
		{
			if (this._aiCanExitDelegate == null)
			{
				this._aiCanExitDelegate = this.DeserializeDelegate(this._aiCanExit);
			}
			return this._aiCanExitDelegate(character, this);
		}

		public bool CanAIEnter(LocationCharacter character)
		{
			if (this._aiCanEnterDelegate == null)
			{
				this._aiCanEnterDelegate = this.DeserializeDelegate(this._aiCanEnter);
			}
			return this._aiCanEnterDelegate(character, this);
		}

		public bool CanPlayerEnter()
		{
			if (this._playerCanEnterDelegate == null)
			{
				this._playerCanEnterDelegate = this.DeserializeDelegate(this._playerCanEnter);
			}
			return this._playerCanEnterDelegate(null, this);
		}

		public bool CanPlayerSee()
		{
			if (this._playerCanSeeDelegate == null)
			{
				this._playerCanSeeDelegate = this.DeserializeDelegate(this._playerCanSee);
			}
			return this._playerCanSeeDelegate(null, this);
		}

		public void ReserveLocation(TextObject locationName, TextObject doorName)
		{
			if (this.CanBeReserved)
			{
				this.IsReserved = true;
				this._overriddenName = locationName;
				this._overriddenDoorName = doorName;
			}
		}

		public void RemoveReservation()
		{
			if (this.CanBeReserved)
			{
				this.IsReserved = false;
				this._overriddenName = TextObject.Empty;
				this._overriddenDoorName = TextObject.Empty;
			}
		}

		public void SetOwnerComplex(LocationComplex locationComplex)
		{
			this._ownerComplex = locationComplex;
		}

		public void AddCharacter(LocationCharacter locationCharacter)
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			if (locationCharacter.Character.IsHero)
			{
				this._ownerComplex.RemoveCharacterIfExists(locationCharacter.Character.HeroObject);
			}
			this._characterList.Add(locationCharacter);
		}

		public void AddLocationCharacters(CreateLocationCharacterDelegate createDelegate, CultureObject culture, LocationCharacter.CharacterRelations relation, int count)
		{
			for (int i = 0; i < count; i++)
			{
				LocationCharacter locationCharacter = createDelegate(culture, relation);
				this.AddCharacter(locationCharacter);
			}
		}

		public void AddSpecialItem(ItemObject itemObject)
		{
			this.SpecialItems.Add(itemObject);
		}

		public string GetSceneName(int upgradeLevel)
		{
			string text = this._sceneNames[upgradeLevel];
			if (string.IsNullOrEmpty(text))
			{
				text = this._sceneNames[0];
			}
			return text;
		}

		public void SetSceneName(int upgradeLevel, string sceneName)
		{
			this._sceneNames[upgradeLevel] = sceneName;
		}

		public int GetSceneCount()
		{
			int num = 0;
			string[] sceneNames = this._sceneNames;
			for (int i = 0; i < sceneNames.Length; i++)
			{
				if (!string.IsNullOrEmpty(sceneNames[i]))
				{
					num++;
				}
			}
			return num;
		}

		public void RemoveAllHeroCharactersFromPrison()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			this._characterList.RemoveAll((LocationCharacter x) => x.Character.HeroObject != null && x.Character.HeroObject != Hero.MainHero);
		}

		public void RemoveAllCharacters()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			this._characterList.Clear();
		}

		public void RemoveAllCharacters(Predicate<LocationCharacter> predicate)
		{
			this._characterList.RemoveAll(predicate);
		}

		public void RemoveLocationCharacter(LocationCharacter locationCharacter)
		{
			this._characterList.Remove(locationCharacter);
		}

		public void RemoveCharacter(Hero hero)
		{
			LocationCharacter locationCharacter = this._characterList.First((LocationCharacter x) => x.Character.HeroObject == hero);
			this.RemoveLocationCharacter(locationCharacter);
		}

		public bool ContainsCharacter(LocationCharacter locationCharacter)
		{
			return this._characterList.Contains(locationCharacter);
		}

		public bool ContainsCharacter(Hero hero)
		{
			return this._characterList != null && this._characterList.Any((LocationCharacter x) => x.Character == hero.CharacterObject);
		}

		public void AddPassageToLocation(Location passageToLocation)
		{
			this.LocationsOfPassages.Add(passageToLocation);
		}

		public IEnumerable<LocationCharacter> GetCharacterList()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			foreach (LocationCharacter locationCharacter in this._characterList)
			{
				yield return locationCharacter;
			}
			List<LocationCharacter>.Enumerator enumerator = default(List<LocationCharacter>.Enumerator);
			yield break;
			yield break;
		}

		public Location GetPassageToLocation(string locationId)
		{
			return this.LocationsOfPassages.FirstOrDefault((Location location) => locationId == location.StringId);
		}

		public void OnAIChangeLocation(Location previousLocation)
		{
			if (this.IsIndoor && CampaignMission.Current != null && this != CampaignMission.Current.Location && CampaignMission.Current.Mode == MissionMode.Stealth)
			{
				this._playerCanEnterDelegate = new CanUseDoor(LocationComplex.CanNever);
			}
		}

		public LocationCharacter GetLocationCharacter(Hero hero)
		{
			return this._characterList.Find((LocationCharacter x) => x.Character == hero.CharacterObject);
		}

		public LocationCharacter GetLocationCharacter(IAgentOriginBase agentOrigin)
		{
			foreach (LocationCharacter locationCharacter in this._characterList)
			{
				if (locationCharacter.AgentOrigin == agentOrigin)
				{
					return locationCharacter;
				}
			}
			return null;
		}

		private CanUseDoor DeserializeDelegate(string text)
		{
			int num = text.LastIndexOf('.');
			string text2 = ((num >= 0) ? text.Substring(0, num) : typeof(LocationComplex).FullName);
			string text3 = text.Substring(num + 1, text.Length - 1 - num);
			CanUseDoor canUseDoor = null;
			Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
			for (int i = 0; i < assemblies.Length; i++)
			{
				Type type = assemblies[i].GetType(text2);
				if (type != null)
				{
					MethodInfo method = type.GetMethod(text3);
					if (method != null)
					{
						canUseDoor = Delegate.CreateDelegate(typeof(CanUseDoor), null, method) as CanUseDoor;
						break;
					}
				}
			}
			return canUseDoor;
		}

		[SaveableField(40)]
		private TextObject _overriddenName;

		[SaveableField(50)]
		private TextObject _overriddenDoorName;

		private List<LocationCharacter> _characterList;

		private LocationComplex _ownerComplex;

		private TextObject _name;

		private TextObject _doorName;

		public int ProsperityMax;

		private string[] _sceneNames;

		private string _aiCanExit;

		private string _aiCanEnter;

		private string _playerCanEnter;

		private string _playerCanSee;

		private CanUseDoor _aiCanExitDelegate;

		private CanUseDoor _aiCanEnterDelegate;

		private CanUseDoor _playerCanEnterDelegate;

		private CanUseDoor _playerCanSeeDelegate;
	}
}
