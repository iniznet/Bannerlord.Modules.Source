using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Locations
{
	// Token: 0x0200036A RID: 874
	public class Location
	{
		// Token: 0x060032E4 RID: 13028 RVA: 0x000D290E File Offset: 0x000D0B0E
		internal static void AutoGeneratedStaticCollectObjectsLocation(object o, List<object> collectedObjects)
		{
			((Location)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060032E5 RID: 13029 RVA: 0x000D291C File Offset: 0x000D0B1C
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._overriddenName);
			collectedObjects.Add(this._overriddenDoorName);
			collectedObjects.Add(this.SpecialItems);
		}

		// Token: 0x060032E6 RID: 13030 RVA: 0x000D2942 File Offset: 0x000D0B42
		internal static object AutoGeneratedGetMemberValueStringId(object o)
		{
			return ((Location)o).StringId;
		}

		// Token: 0x060032E7 RID: 13031 RVA: 0x000D294F File Offset: 0x000D0B4F
		internal static object AutoGeneratedGetMemberValueSpecialItems(object o)
		{
			return ((Location)o).SpecialItems;
		}

		// Token: 0x060032E8 RID: 13032 RVA: 0x000D295C File Offset: 0x000D0B5C
		internal static object AutoGeneratedGetMemberValueIsReserved(object o)
		{
			return ((Location)o).IsReserved;
		}

		// Token: 0x060032E9 RID: 13033 RVA: 0x000D296E File Offset: 0x000D0B6E
		internal static object AutoGeneratedGetMemberValue_overriddenName(object o)
		{
			return ((Location)o)._overriddenName;
		}

		// Token: 0x060032EA RID: 13034 RVA: 0x000D297B File Offset: 0x000D0B7B
		internal static object AutoGeneratedGetMemberValue_overriddenDoorName(object o)
		{
			return ((Location)o)._overriddenDoorName;
		}

		// Token: 0x17000C75 RID: 3189
		// (get) Token: 0x060032EB RID: 13035 RVA: 0x000D2988 File Offset: 0x000D0B88
		// (set) Token: 0x060032EC RID: 13036 RVA: 0x000D2990 File Offset: 0x000D0B90
		[SaveableProperty(10)]
		public string StringId { get; private set; }

		// Token: 0x17000C76 RID: 3190
		// (get) Token: 0x060032ED RID: 13037 RVA: 0x000D2999 File Offset: 0x000D0B99
		// (set) Token: 0x060032EE RID: 13038 RVA: 0x000D29A1 File Offset: 0x000D0BA1
		[SaveableProperty(20)]
		public List<ItemObject> SpecialItems { get; private set; }

		// Token: 0x17000C77 RID: 3191
		// (get) Token: 0x060032EF RID: 13039 RVA: 0x000D29AA File Offset: 0x000D0BAA
		// (set) Token: 0x060032F0 RID: 13040 RVA: 0x000D29B2 File Offset: 0x000D0BB2
		[SaveableProperty(30)]
		public bool IsReserved { get; private set; }

		// Token: 0x17000C78 RID: 3192
		// (get) Token: 0x060032F1 RID: 13041 RVA: 0x000D29BB File Offset: 0x000D0BBB
		// (set) Token: 0x060032F2 RID: 13042 RVA: 0x000D29C3 File Offset: 0x000D0BC3
		public List<Location> LocationsOfPassages { get; private set; }

		// Token: 0x17000C79 RID: 3193
		// (get) Token: 0x060032F3 RID: 13043 RVA: 0x000D29CC File Offset: 0x000D0BCC
		public TextObject Name
		{
			get
			{
				if (!TextObject.IsNullOrEmpty(this._overriddenName))
				{
					return this._overriddenName;
				}
				return this._name;
			}
		}

		// Token: 0x17000C7A RID: 3194
		// (get) Token: 0x060032F4 RID: 13044 RVA: 0x000D29E8 File Offset: 0x000D0BE8
		public TextObject DoorName
		{
			get
			{
				if (!this._overriddenDoorName.Equals(TextObject.Empty))
				{
					return this._overriddenDoorName;
				}
				return this._doorName;
			}
		}

		// Token: 0x17000C7B RID: 3195
		// (get) Token: 0x060032F5 RID: 13045 RVA: 0x000D2A09 File Offset: 0x000D0C09
		// (set) Token: 0x060032F6 RID: 13046 RVA: 0x000D2A11 File Offset: 0x000D0C11
		public bool IsIndoor { get; private set; }

		// Token: 0x17000C7C RID: 3196
		// (get) Token: 0x060032F7 RID: 13047 RVA: 0x000D2A1A File Offset: 0x000D0C1A
		// (set) Token: 0x060032F8 RID: 13048 RVA: 0x000D2A22 File Offset: 0x000D0C22
		public bool CanBeReserved { get; private set; }

		// Token: 0x17000C7D RID: 3197
		// (get) Token: 0x060032F9 RID: 13049 RVA: 0x000D2A2B File Offset: 0x000D0C2B
		// (set) Token: 0x060032FA RID: 13050 RVA: 0x000D2A33 File Offset: 0x000D0C33
		public bool IsInitialized { get; private set; }

		// Token: 0x17000C7E RID: 3198
		// (get) Token: 0x060032FB RID: 13051 RVA: 0x000D2A3C File Offset: 0x000D0C3C
		public int CharacterCount
		{
			get
			{
				return this._characterList.Count;
			}
		}

		// Token: 0x060032FC RID: 13052 RVA: 0x000D2A4C File Offset: 0x000D0C4C
		public Location(string stringId, TextObject name, TextObject doorName, int prosperityMax, bool isIndoor, bool canBeReserved, string playerCanEnter, string playerCanSee, string aiCanExit, string aiCanEnter, string[] sceneNames, LocationComplex locationComplex)
		{
			this.ProsperityMax = prosperityMax;
			this._characterList = new List<LocationCharacter>();
			this.LocationsOfPassages = new List<Location>();
			this.SpecialItems = new List<ItemObject>();
			this.StringId = stringId;
			this._name = name;
			this._doorName = doorName;
			this.IsIndoor = isIndoor;
			this.CanBeReserved = canBeReserved;
			this.IsReserved = false;
			this._aiCanEnter = aiCanEnter;
			this._playerCanEnter = playerCanEnter;
			this._playerCanSee = playerCanSee;
			this._aiCanExit = aiCanExit;
			this._ownerComplex = locationComplex;
			this._overriddenName = TextObject.Empty;
			this._overriddenDoorName = TextObject.Empty;
			this._sceneNames = new string[4];
			for (int i = 0; i < 4; i++)
			{
				this._sceneNames[i] = sceneNames[i];
			}
		}

		// Token: 0x060032FD RID: 13053 RVA: 0x000D2B18 File Offset: 0x000D0D18
		public Location(Location location, LocationComplex locationComplex)
			: this(location.StringId, location.Name, location.DoorName, location.ProsperityMax, location.IsIndoor, location.CanBeReserved, location._playerCanEnter, location._playerCanSee, location._aiCanExit, location._aiCanEnter, location._sceneNames, locationComplex)
		{
		}

		// Token: 0x060032FE RID: 13054 RVA: 0x000D2B70 File Offset: 0x000D0D70
		public void Initialize(Location locationTemplate, LocationComplex ownerComplex)
		{
			this.ProsperityMax = locationTemplate.ProsperityMax;
			this.LocationsOfPassages = new List<Location>();
			this._name = locationTemplate.Name;
			this._doorName = locationTemplate.DoorName;
			this.IsIndoor = locationTemplate.IsIndoor;
			this.CanBeReserved = locationTemplate.CanBeReserved;
			this._aiCanEnter = locationTemplate._aiCanEnter;
			this._playerCanEnter = locationTemplate._playerCanEnter;
			this._playerCanSee = locationTemplate._playerCanSee;
			this._aiCanExit = locationTemplate._aiCanExit;
			this._ownerComplex = ownerComplex;
			this._characterList = new List<LocationCharacter>();
			this._sceneNames = new string[4];
			this.IsInitialized = true;
			for (int i = 0; i < 4; i++)
			{
				this._sceneNames[i] = locationTemplate._sceneNames[i];
			}
		}

		// Token: 0x060032FF RID: 13055 RVA: 0x000D2C35 File Offset: 0x000D0E35
		public bool CanAIExit(LocationCharacter character)
		{
			if (this._aiCanExitDelegate == null)
			{
				this._aiCanExitDelegate = this.DeserializeDelegate(this._aiCanExit);
			}
			return this._aiCanExitDelegate(character, this);
		}

		// Token: 0x06003300 RID: 13056 RVA: 0x000D2C5E File Offset: 0x000D0E5E
		public bool CanAIEnter(LocationCharacter character)
		{
			if (this._aiCanEnterDelegate == null)
			{
				this._aiCanEnterDelegate = this.DeserializeDelegate(this._aiCanEnter);
			}
			return this._aiCanEnterDelegate(character, this);
		}

		// Token: 0x06003301 RID: 13057 RVA: 0x000D2C87 File Offset: 0x000D0E87
		public bool CanPlayerEnter()
		{
			if (this._playerCanEnterDelegate == null)
			{
				this._playerCanEnterDelegate = this.DeserializeDelegate(this._playerCanEnter);
			}
			return this._playerCanEnterDelegate(null, this);
		}

		// Token: 0x06003302 RID: 13058 RVA: 0x000D2CB0 File Offset: 0x000D0EB0
		public bool CanPlayerSee()
		{
			if (this._playerCanSeeDelegate == null)
			{
				this._playerCanSeeDelegate = this.DeserializeDelegate(this._playerCanSee);
			}
			return this._playerCanSeeDelegate(null, this);
		}

		// Token: 0x06003303 RID: 13059 RVA: 0x000D2CD9 File Offset: 0x000D0ED9
		public void ReserveLocation(TextObject locationName, TextObject doorName)
		{
			if (this.CanBeReserved)
			{
				this.IsReserved = true;
				this._overriddenName = locationName;
				this._overriddenDoorName = doorName;
			}
		}

		// Token: 0x06003304 RID: 13060 RVA: 0x000D2CF8 File Offset: 0x000D0EF8
		public void RemoveReservation()
		{
			if (this.CanBeReserved)
			{
				this.IsReserved = false;
				this._overriddenName = TextObject.Empty;
				this._overriddenDoorName = TextObject.Empty;
			}
		}

		// Token: 0x06003305 RID: 13061 RVA: 0x000D2D1F File Offset: 0x000D0F1F
		public void SetOwnerComplex(LocationComplex locationComplex)
		{
			this._ownerComplex = locationComplex;
		}

		// Token: 0x06003306 RID: 13062 RVA: 0x000D2D28 File Offset: 0x000D0F28
		public void AddCharacter(LocationCharacter locationCharacter)
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			if (locationCharacter.Character.IsHero)
			{
				this._ownerComplex.RemoveCharacterIfExists(locationCharacter.Character.HeroObject);
			}
			this._characterList.Add(locationCharacter);
		}

		// Token: 0x06003307 RID: 13063 RVA: 0x000D2D78 File Offset: 0x000D0F78
		public void AddLocationCharacters(CreateLocationCharacterDelegate createDelegate, CultureObject culture, LocationCharacter.CharacterRelations relation, int count)
		{
			for (int i = 0; i < count; i++)
			{
				LocationCharacter locationCharacter = createDelegate(culture, relation);
				this.AddCharacter(locationCharacter);
			}
		}

		// Token: 0x06003308 RID: 13064 RVA: 0x000D2DA2 File Offset: 0x000D0FA2
		public void AddSpecialItem(ItemObject itemObject)
		{
			this.SpecialItems.Add(itemObject);
		}

		// Token: 0x06003309 RID: 13065 RVA: 0x000D2DB0 File Offset: 0x000D0FB0
		public string GetSceneName(int upgradeLevel)
		{
			string text = this._sceneNames[upgradeLevel];
			if (string.IsNullOrEmpty(text))
			{
				text = this._sceneNames[0];
			}
			return text;
		}

		// Token: 0x0600330A RID: 13066 RVA: 0x000D2DD8 File Offset: 0x000D0FD8
		public void SetSceneName(int upgradeLevel, string sceneName)
		{
			this._sceneNames[upgradeLevel] = sceneName;
		}

		// Token: 0x0600330B RID: 13067 RVA: 0x000D2DE4 File Offset: 0x000D0FE4
		public int GetSceneCount()
		{
			int num = 0;
			string[] sceneNames = this._sceneNames;
			for (int i = 0; i < sceneNames.Length; i++)
			{
				if (!string.IsNullOrEmpty(sceneNames[i]))
				{
					num++;
				}
			}
			return num;
		}

		// Token: 0x0600330C RID: 13068 RVA: 0x000D2E17 File Offset: 0x000D1017
		public void RemoveAllHeroCharactersFromPrison()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			this._characterList.RemoveAll((LocationCharacter x) => x.Character.HeroObject != null && x.Character.HeroObject != Hero.MainHero);
		}

		// Token: 0x0600330D RID: 13069 RVA: 0x000D2E57 File Offset: 0x000D1057
		public void RemoveAllCharacters()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			this._characterList.Clear();
		}

		// Token: 0x0600330E RID: 13070 RVA: 0x000D2E77 File Offset: 0x000D1077
		public void RemoveAllCharacters(Predicate<LocationCharacter> predicate)
		{
			this._characterList.RemoveAll(predicate);
		}

		// Token: 0x0600330F RID: 13071 RVA: 0x000D2E86 File Offset: 0x000D1086
		public void RemoveLocationCharacter(LocationCharacter locationCharacter)
		{
			this._characterList.Remove(locationCharacter);
		}

		// Token: 0x06003310 RID: 13072 RVA: 0x000D2E98 File Offset: 0x000D1098
		public void RemoveCharacter(Hero hero)
		{
			LocationCharacter locationCharacter = this._characterList.First((LocationCharacter x) => x.Character.HeroObject == hero);
			this.RemoveLocationCharacter(locationCharacter);
		}

		// Token: 0x06003311 RID: 13073 RVA: 0x000D2ED1 File Offset: 0x000D10D1
		public bool ContainsCharacter(LocationCharacter locationCharacter)
		{
			return this._characterList.Contains(locationCharacter);
		}

		// Token: 0x06003312 RID: 13074 RVA: 0x000D2EE0 File Offset: 0x000D10E0
		public bool ContainsCharacter(Hero hero)
		{
			return this._characterList != null && this._characterList.Any((LocationCharacter x) => x.Character == hero.CharacterObject);
		}

		// Token: 0x06003313 RID: 13075 RVA: 0x000D2F1B File Offset: 0x000D111B
		public void AddPassageToLocation(Location passageToLocation)
		{
			this.LocationsOfPassages.Add(passageToLocation);
		}

		// Token: 0x06003314 RID: 13076 RVA: 0x000D2F29 File Offset: 0x000D1129
		public IEnumerable<LocationCharacter> GetCharacterList()
		{
			if (this._characterList == null)
			{
				this._characterList = new List<LocationCharacter>();
			}
			foreach (LocationCharacter locationCharacter in this._characterList)
			{
				yield return locationCharacter;
			}
			List<LocationCharacter>.Enumerator enumerator = default(List<LocationCharacter>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x06003315 RID: 13077 RVA: 0x000D2F3C File Offset: 0x000D113C
		public Location GetPassageToLocation(string locationId)
		{
			return this.LocationsOfPassages.FirstOrDefault((Location location) => locationId == location.StringId);
		}

		// Token: 0x06003316 RID: 13078 RVA: 0x000D2F6D File Offset: 0x000D116D
		public void OnAIChangeLocation(Location previousLocation)
		{
			if (this.IsIndoor && CampaignMission.Current != null && this != CampaignMission.Current.Location && CampaignMission.Current.Mode == MissionMode.Stealth)
			{
				this._playerCanEnterDelegate = new CanUseDoor(LocationComplex.CanNever);
			}
		}

		// Token: 0x06003317 RID: 13079 RVA: 0x000D2FAC File Offset: 0x000D11AC
		public LocationCharacter GetLocationCharacter(Hero hero)
		{
			return this._characterList.Find((LocationCharacter x) => x.Character == hero.CharacterObject);
		}

		// Token: 0x06003318 RID: 13080 RVA: 0x000D2FE0 File Offset: 0x000D11E0
		public LocationCharacter GetLocationCharacter(IAgentOriginBase agentOrigin)
		{
			foreach (LocationCharacter locationCharacter in this._characterList)
			{
				if (locationCharacter.AgentOrigin == agentOrigin)
				{
					return locationCharacter;
				}
			}
			return null;
		}

		// Token: 0x06003319 RID: 13081 RVA: 0x000D303C File Offset: 0x000D123C
		private CanUseDoor DeserializeDelegate(string text)
		{
			int num = text.LastIndexOf('.');
			string text2 = ((num >= 0) ? text.Substring(0, num) : typeof(LocationComplex).FullName);
			string text3 = text.Substring(num + 1, text.Length - 1 - num);
			CanUseDoor canUseDoor = null;
			Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
			for (int i = 0; i < assemblies.Length; i++)
			{
				Type type = assemblies[i].GetType(text2);
				if (type != null)
				{
					MethodInfo method = type.GetMethod(text3);
					if (method != null)
					{
						canUseDoor = Delegate.CreateDelegate(typeof(CanUseDoor), null, method) as CanUseDoor;
						break;
					}
				}
			}
			return canUseDoor;
		}

		// Token: 0x0400108D RID: 4237
		[SaveableField(40)]
		private TextObject _overriddenName;

		// Token: 0x0400108E RID: 4238
		[SaveableField(50)]
		private TextObject _overriddenDoorName;

		// Token: 0x0400108F RID: 4239
		private List<LocationCharacter> _characterList;

		// Token: 0x04001090 RID: 4240
		private LocationComplex _ownerComplex;

		// Token: 0x04001092 RID: 4242
		private TextObject _name;

		// Token: 0x04001093 RID: 4243
		private TextObject _doorName;

		// Token: 0x04001096 RID: 4246
		public int ProsperityMax;

		// Token: 0x04001097 RID: 4247
		private string[] _sceneNames;

		// Token: 0x04001098 RID: 4248
		private string _aiCanExit;

		// Token: 0x04001099 RID: 4249
		private string _aiCanEnter;

		// Token: 0x0400109A RID: 4250
		private string _playerCanEnter;

		// Token: 0x0400109B RID: 4251
		private string _playerCanSee;

		// Token: 0x0400109C RID: 4252
		private CanUseDoor _aiCanExitDelegate;

		// Token: 0x0400109D RID: 4253
		private CanUseDoor _aiCanEnterDelegate;

		// Token: 0x0400109E RID: 4254
		private CanUseDoor _playerCanEnterDelegate;

		// Token: 0x0400109F RID: 4255
		private CanUseDoor _playerCanSeeDelegate;
	}
}
