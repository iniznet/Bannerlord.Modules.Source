using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Workshops
{
	public class Workshop : SettlementArea
	{
		internal static void AutoGeneratedStaticCollectObjectsWorkshop(object o, List<object> collectedObjects)
		{
			((Workshop)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._settlement);
			collectedObjects.Add(this._owner);
			collectedObjects.Add(this._customName);
			collectedObjects.Add(this._productionProgress);
			collectedObjects.Add(this.WorkshopType);
			collectedObjects.Add(this.InsideParty);
		}

		internal static object AutoGeneratedGetMemberValueWorkshopType(object o)
		{
			return ((Workshop)o).WorkshopType;
		}

		internal static object AutoGeneratedGetMemberValueConstructionTimeRemained(object o)
		{
			return ((Workshop)o).ConstructionTimeRemained;
		}

		internal static object AutoGeneratedGetMemberValueInsideParty(object o)
		{
			return ((Workshop)o).InsideParty;
		}

		internal static object AutoGeneratedGetMemberValueNotRunnedDays(object o)
		{
			return ((Workshop)o).NotRunnedDays;
		}

		internal static object AutoGeneratedGetMemberValueCapital(object o)
		{
			return ((Workshop)o).Capital;
		}

		internal static object AutoGeneratedGetMemberValueInitialCapital(object o)
		{
			return ((Workshop)o).InitialCapital;
		}

		internal static object AutoGeneratedGetMemberValueLevel(object o)
		{
			return ((Workshop)o).Level;
		}

		internal static object AutoGeneratedGetMemberValueUpgradable(object o)
		{
			return ((Workshop)o).Upgradable;
		}

		internal static object AutoGeneratedGetMemberValue_settlement(object o)
		{
			return ((Workshop)o)._settlement;
		}

		internal static object AutoGeneratedGetMemberValue_tag(object o)
		{
			return ((Workshop)o)._tag;
		}

		internal static object AutoGeneratedGetMemberValue_owner(object o)
		{
			return ((Workshop)o)._owner;
		}

		internal static object AutoGeneratedGetMemberValue_customName(object o)
		{
			return ((Workshop)o)._customName;
		}

		internal static object AutoGeneratedGetMemberValue_productionProgress(object o)
		{
			return ((Workshop)o)._productionProgress;
		}

		public override Settlement Settlement
		{
			get
			{
				return this._settlement;
			}
		}

		public override string Tag
		{
			get
			{
				return this._tag;
			}
		}

		public override Hero Owner
		{
			get
			{
				return this._owner;
			}
		}

		public override TextObject Name
		{
			get
			{
				TextObject textObject;
				if ((textObject = this._customName) == null)
				{
					WorkshopType workshopType = this.WorkshopType;
					textObject = ((workshopType != null) ? workshopType.Name : null) ?? new TextObject("{=xWoXL2FG}Empty Workshop", null);
				}
				return textObject;
			}
		}

		[SaveableProperty(105)]
		public WorkshopType WorkshopType { get; private set; }

		[SaveableProperty(106)]
		public int ConstructionTimeRemained { get; private set; }

		[SaveableProperty(107)]
		public MobileParty InsideParty { get; private set; }

		public int ProfitMade
		{
			get
			{
				return MathF.Max(this.Capital - this.InitialCapital, 0);
			}
		}

		public int Expense
		{
			get
			{
				return Campaign.Current.Models.WorkshopModel.GetDailyExpense(this.Level);
			}
		}

		[SaveableProperty(110)]
		public int NotRunnedDays { get; private set; }

		[SaveableProperty(111)]
		public int Capital { get; private set; }

		[SaveableProperty(112)]
		public int InitialCapital { get; private set; }

		[SaveableProperty(113)]
		public int Level { get; private set; }

		[SaveableProperty(114)]
		public bool Upgradable { get; private set; }

		public bool CanBeUpgraded
		{
			get
			{
				return this.Upgradable && this.Level < Campaign.Current.Models.WorkshopModel.MaxWorkshopLevel;
			}
		}

		public bool CanBeDowngraded
		{
			get
			{
				return this.Level > 1;
			}
		}

		public bool IsRunning
		{
			get
			{
				return this.WorkshopType != null && this.ConstructionTimeRemained == 0;
			}
		}

		public Workshop(Settlement settlement, string tag)
		{
			this._customName = null;
			this._settlement = settlement;
			this._tag = tag;
			this.ConstructionTimeRemained = 0;
			this.Capital = 0;
			this.InitialCapital = 0;
			this.Level = 1;
			this.Upgradable = false;
		}

		public override int GetHashCode()
		{
			return this.Settlement.GetHashCode() + this._tag.GetHashCode();
		}

		public void SetWorkshop(Hero newOwner, WorkshopType workshopType, int capital, bool upgradable = true, int constructionTimeRemained = 0, int level = 1, TextObject customName = null)
		{
			Hero owner = this._owner;
			WorkshopType workshopType2 = this.WorkshopType;
			this.WorkshopType = workshopType;
			this._customName = customName;
			Hero owner2 = this._owner;
			if (owner2 != null)
			{
				owner2.RemoveOwnedWorkshop(this);
			}
			this._owner = newOwner;
			Hero owner3 = this._owner;
			if (owner3 != null)
			{
				owner3.AddOwnedWorkshop(this);
			}
			this._productionProgress = new float[workshopType.Productions.Count];
			this.Upgradable = upgradable;
			this.ConstructionTimeRemained = constructionTimeRemained;
			this.Capital = capital;
			this.InitialCapital = capital;
			this.Level = level;
			CampaignEventDispatcher.Instance.OnWorkshopChanged(this, owner, workshopType2);
		}

		public void OnPartyEnters(MobileParty mobileParty)
		{
			this.InsideParty = mobileParty;
		}

		public void ResetNotRunnedDays()
		{
			this.NotRunnedDays = 0;
		}

		public void IncreaseNotRunnedDays()
		{
			int notRunnedDays = this.NotRunnedDays;
			this.NotRunnedDays = notRunnedDays + 1;
		}

		public void SetProgress(int i, float value)
		{
			this._productionProgress[i] = value;
		}

		internal void AfterLoad()
		{
			if (this._productionProgress.Length != this.WorkshopType.Productions.Count)
			{
				this._productionProgress = new float[this.WorkshopType.Productions.Count];
			}
		}

		public void ApplyDailyConstruction()
		{
			int constructionTimeRemained = this.ConstructionTimeRemained;
			this.ConstructionTimeRemained = constructionTimeRemained - 1;
		}

		public void ChangeGold(int goldChange)
		{
			this.Capital += goldChange;
		}

		public void Upgrade()
		{
			int upgradeCost = Campaign.Current.Models.WorkshopModel.GetUpgradeCost(this.Level);
			this.Capital = MathF.Max(0, this.Capital - upgradeCost);
			int level = this.Level;
			this.Level = level + 1;
		}

		public void Downgrade()
		{
			int level = this.Level;
			this.Level = level - 1;
			this.Capital += Campaign.Current.Models.WorkshopModel.GetUpgradeCost(this.Level) / 2;
		}

		public float GetProductionProgress(int index)
		{
			return this._productionProgress[index];
		}

		[SaveableField(100)]
		private readonly Settlement _settlement;

		[SaveableField(101)]
		private readonly string _tag;

		[SaveableField(102)]
		private Hero _owner;

		[SaveableField(103)]
		private TextObject _customName;

		[SaveableField(104)]
		private float[] _productionProgress;
	}
}
