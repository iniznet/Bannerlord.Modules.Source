using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem.Settlements.Workshops
{
	// Token: 0x02000369 RID: 873
	public sealed class WorkshopType : MBObjectBase
	{
		// Token: 0x060032C0 RID: 12992 RVA: 0x000D22A8 File Offset: 0x000D04A8
		internal static void AutoGeneratedStaticCollectObjectsWorkshopType(object o, List<object> collectedObjects)
		{
			((WorkshopType)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060032C1 RID: 12993 RVA: 0x000D22B6 File Offset: 0x000D04B6
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x17000C66 RID: 3174
		// (get) Token: 0x060032C2 RID: 12994 RVA: 0x000D22BF File Offset: 0x000D04BF
		// (set) Token: 0x060032C3 RID: 12995 RVA: 0x000D22C7 File Offset: 0x000D04C7
		public int EquipmentCost { get; private set; }

		// Token: 0x17000C67 RID: 3175
		// (get) Token: 0x060032C4 RID: 12996 RVA: 0x000D22D0 File Offset: 0x000D04D0
		// (set) Token: 0x060032C5 RID: 12997 RVA: 0x000D22D8 File Offset: 0x000D04D8
		public int Frequency { get; private set; }

		// Token: 0x17000C68 RID: 3176
		// (get) Token: 0x060032C6 RID: 12998 RVA: 0x000D22E1 File Offset: 0x000D04E1
		// (set) Token: 0x060032C7 RID: 12999 RVA: 0x000D22E9 File Offset: 0x000D04E9
		public TextObject Name { get; private set; }

		// Token: 0x17000C69 RID: 3177
		// (get) Token: 0x060032C8 RID: 13000 RVA: 0x000D22F2 File Offset: 0x000D04F2
		// (set) Token: 0x060032C9 RID: 13001 RVA: 0x000D22FA File Offset: 0x000D04FA
		public TextObject JobName { get; private set; }

		// Token: 0x17000C6A RID: 3178
		// (get) Token: 0x060032CA RID: 13002 RVA: 0x000D2303 File Offset: 0x000D0503
		// (set) Token: 0x060032CB RID: 13003 RVA: 0x000D230B File Offset: 0x000D050B
		public bool IsHidden { get; private set; }

		// Token: 0x17000C6B RID: 3179
		// (get) Token: 0x060032CC RID: 13004 RVA: 0x000D2314 File Offset: 0x000D0514
		// (set) Token: 0x060032CD RID: 13005 RVA: 0x000D231C File Offset: 0x000D051C
		public string SignMeshName { get; private set; }

		// Token: 0x17000C6C RID: 3180
		// (get) Token: 0x060032CE RID: 13006 RVA: 0x000D2325 File Offset: 0x000D0525
		// (set) Token: 0x060032CF RID: 13007 RVA: 0x000D232D File Offset: 0x000D052D
		public string PropMeshName1 { get; private set; }

		// Token: 0x17000C6D RID: 3181
		// (get) Token: 0x060032D0 RID: 13008 RVA: 0x000D2336 File Offset: 0x000D0536
		// (set) Token: 0x060032D1 RID: 13009 RVA: 0x000D233E File Offset: 0x000D053E
		public string PropMeshName2 { get; private set; }

		// Token: 0x17000C6E RID: 3182
		// (get) Token: 0x060032D2 RID: 13010 RVA: 0x000D2347 File Offset: 0x000D0547
		// (set) Token: 0x060032D3 RID: 13011 RVA: 0x000D234F File Offset: 0x000D054F
		public List<string> PropMeshName3List { get; private set; }

		// Token: 0x17000C6F RID: 3183
		// (get) Token: 0x060032D4 RID: 13012 RVA: 0x000D2358 File Offset: 0x000D0558
		// (set) Token: 0x060032D5 RID: 13013 RVA: 0x000D2360 File Offset: 0x000D0560
		public string PropMeshName4 { get; private set; }

		// Token: 0x17000C70 RID: 3184
		// (get) Token: 0x060032D6 RID: 13014 RVA: 0x000D2369 File Offset: 0x000D0569
		// (set) Token: 0x060032D7 RID: 13015 RVA: 0x000D2371 File Offset: 0x000D0571
		public string PropMeshName5 { get; private set; }

		// Token: 0x17000C71 RID: 3185
		// (get) Token: 0x060032D8 RID: 13016 RVA: 0x000D237A File Offset: 0x000D057A
		// (set) Token: 0x060032D9 RID: 13017 RVA: 0x000D2382 File Offset: 0x000D0582
		public string PropMeshName6 { get; private set; }

		// Token: 0x17000C72 RID: 3186
		// (get) Token: 0x060032DA RID: 13018 RVA: 0x000D238B File Offset: 0x000D058B
		// (set) Token: 0x060032DB RID: 13019 RVA: 0x000D2393 File Offset: 0x000D0593
		public TextObject Description { get; private set; }

		// Token: 0x17000C73 RID: 3187
		// (get) Token: 0x060032DC RID: 13020 RVA: 0x000D239C File Offset: 0x000D059C
		public MBReadOnlyList<WorkshopType.Production> Productions
		{
			get
			{
				return this._productions;
			}
		}

		// Token: 0x060032DE RID: 13022 RVA: 0x000D23AC File Offset: 0x000D05AC
		public override string ToString()
		{
			return this.Name.ToString();
		}

		// Token: 0x060032DF RID: 13023 RVA: 0x000D23B9 File Offset: 0x000D05B9
		public override void Initialize()
		{
			base.Initialize();
			this._productions = new MBList<WorkshopType.Production>(0);
		}

		// Token: 0x060032E0 RID: 13024 RVA: 0x000D23D0 File Offset: 0x000D05D0
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(node.Attributes["name"].Value, null);
			this.JobName = new TextObject(node.Attributes["jobname"].Value, null);
			this.Description = new TextObject(node.Attributes["description"].Value, null);
			this.EquipmentCost = int.Parse(node.Attributes["equipment_cost"].Value);
			this.Frequency = ((node.Attributes["frequency"] != null) ? int.Parse(node.Attributes["frequency"].Value) : 1);
			this.IsHidden = node.Attributes["isHidden"] != null && bool.Parse(node.Attributes["isHidden"].Value);
			this._productions = new MBList<WorkshopType.Production>();
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Name == "Production")
				{
					objectManager.CreateObjectFromXmlNode(xmlNode);
					float num = ((xmlNode.Attributes["conversion_speed"] != null) ? float.Parse(xmlNode.Attributes["conversion_speed"].Value) : 0f);
					WorkshopType.Production production = new WorkshopType.Production(num);
					foreach (object obj2 in xmlNode)
					{
						XmlNode xmlNode2 = (XmlNode)obj2;
						if (xmlNode2.Name == "Inputs")
						{
							foreach (object obj3 in xmlNode2)
							{
								XmlNode xmlNode3 = (XmlNode)obj3;
								if (xmlNode3.Attributes != null && xmlNode3.Attributes.Count > 0)
								{
									string value = xmlNode3.Attributes[0].Value;
									if (!string.IsNullOrEmpty(value))
									{
										ItemCategory @object = objectManager.GetObject<ItemCategory>(value);
										int num2 = ((xmlNode3.Attributes["input_count"] != null) ? int.Parse(xmlNode3.Attributes["input_count"].Value) : 1);
										if (@object != null)
										{
											production.AddInput(@object, num2);
										}
										else
										{
											Debug.Print("While reading Workshop Node: " + node.ToString() + " Unable to Find Item Category:" + value, 0, Debug.DebugColor.White, 17592186044416UL);
										}
									}
									else
									{
										Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Settlements\\Workshops\\WorkshopType.cs", "Deserialize", 146);
									}
								}
							}
						}
						if (xmlNode2.Name == "Outputs")
						{
							foreach (object obj4 in xmlNode2)
							{
								XmlNode xmlNode4 = (XmlNode)obj4;
								if (xmlNode4.Attributes.Count > 0)
								{
									objectManager.CreateObjectFromXmlNode(xmlNode4);
									ItemCategory itemCategory = objectManager.ReadObjectReferenceFromXml<ItemCategory>("output", xmlNode4);
									int num3 = ((xmlNode4.Attributes["output_count"] != null) ? int.Parse(xmlNode4.Attributes["output_count"].Value) : 1);
									production.AddOutput(itemCategory, num3);
								}
							}
						}
					}
					this._productions.Add(production);
				}
				else if (xmlNode.Name == "Meshes")
				{
					this.SignMeshName = XmlHelper.ReadString(xmlNode, "sign_mesh_name");
					this.PropMeshName1 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_1");
					this.PropMeshName2 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_2");
					this.PropMeshName3List = new List<string>();
					for (int i = 1; i < 4; i++)
					{
						string text = "shop_prop_mesh_name_3_" + i;
						if (xmlNode.Attributes[text] != null)
						{
							this.PropMeshName3List.Add(xmlNode.Attributes[text].Value);
						}
					}
					this.PropMeshName4 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_4");
					this.PropMeshName5 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_5");
					this.PropMeshName6 = XmlHelper.ReadString(xmlNode, "shop_prop_mesh_name_6");
				}
			}
			this._productions.Capacity = this._productions.Count;
		}

		// Token: 0x060032E1 RID: 13025 RVA: 0x000D28E8 File Offset: 0x000D0AE8
		public static WorkshopType Find(string idString)
		{
			return MBObjectManager.Instance.GetObject<WorkshopType>(idString);
		}

		// Token: 0x060032E2 RID: 13026 RVA: 0x000D28F5 File Offset: 0x000D0AF5
		public static WorkshopType FindFirst(Func<WorkshopType, bool> predicate)
		{
			return WorkshopType.All.FirstOrDefault(predicate);
		}

		// Token: 0x17000C74 RID: 3188
		// (get) Token: 0x060032E3 RID: 13027 RVA: 0x000D2902 File Offset: 0x000D0B02
		public static MBReadOnlyList<WorkshopType> All
		{
			get
			{
				return Campaign.Current.Workshops;
			}
		}

		// Token: 0x04001089 RID: 4233
		private MBList<WorkshopType.Production> _productions;

		// Token: 0x0200069C RID: 1692
		public struct Production
		{
			// Token: 0x060053A1 RID: 21409 RVA: 0x001697CD File Offset: 0x001679CD
			public Production(float conversionSpeed)
			{
				this._inputs = new MBList<ValueTuple<ItemCategory, int>>();
				this._outputs = new MBList<ValueTuple<ItemCategory, int>>();
				this._conversionSpeed = conversionSpeed;
			}

			// Token: 0x060053A2 RID: 21410 RVA: 0x001697EC File Offset: 0x001679EC
			public void AddInput(ItemCategory item, int count = 1)
			{
				this._inputs.Add(new ValueTuple<ItemCategory, int>(item, count));
			}

			// Token: 0x060053A3 RID: 21411 RVA: 0x00169800 File Offset: 0x00167A00
			public void AddOutput(ItemCategory outputCategory, int outputCount)
			{
				this._outputs.Add(new ValueTuple<ItemCategory, int>(outputCategory, outputCount));
			}

			// Token: 0x1700134B RID: 4939
			// (get) Token: 0x060053A4 RID: 21412 RVA: 0x00169814 File Offset: 0x00167A14
			public MBReadOnlyList<ValueTuple<ItemCategory, int>> Inputs
			{
				get
				{
					return this._inputs;
				}
			}

			// Token: 0x1700134C RID: 4940
			// (get) Token: 0x060053A5 RID: 21413 RVA: 0x0016981C File Offset: 0x00167A1C
			public MBReadOnlyList<ValueTuple<ItemCategory, int>> Outputs
			{
				get
				{
					return this._outputs;
				}
			}

			// Token: 0x1700134D RID: 4941
			// (get) Token: 0x060053A6 RID: 21414 RVA: 0x00169824 File Offset: 0x00167A24
			public float ConversionSpeed
			{
				get
				{
					return this._conversionSpeed;
				}
			}

			// Token: 0x04001B6E RID: 7022
			private MBList<ValueTuple<ItemCategory, int>> _inputs;

			// Token: 0x04001B6F RID: 7023
			private MBList<ValueTuple<ItemCategory, int>> _outputs;

			// Token: 0x04001B70 RID: 7024
			private float _conversionSpeed;
		}
	}
}
