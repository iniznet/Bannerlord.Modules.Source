using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	// Token: 0x02000361 RID: 865
	public class Village : SettlementComponent
	{
		// Token: 0x060031F4 RID: 12788 RVA: 0x000D007B File Offset: 0x000CE27B
		internal static void AutoGeneratedStaticCollectObjectsVillage(object o, List<object> collectedObjects)
		{
			((Village)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060031F5 RID: 12789 RVA: 0x000D0089 File Offset: 0x000CE289
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._bound);
			collectedObjects.Add(this._marketData);
		}

		// Token: 0x060031F6 RID: 12790 RVA: 0x000D00AA File Offset: 0x000CE2AA
		internal static object AutoGeneratedGetMemberValueLastDemandSatisfiedTime(object o)
		{
			return ((Village)o).LastDemandSatisfiedTime;
		}

		// Token: 0x060031F7 RID: 12791 RVA: 0x000D00BC File Offset: 0x000CE2BC
		internal static object AutoGeneratedGetMemberValueHearth(object o)
		{
			return ((Village)o).Hearth;
		}

		// Token: 0x060031F8 RID: 12792 RVA: 0x000D00CE File Offset: 0x000CE2CE
		internal static object AutoGeneratedGetMemberValueTradeTaxAccumulated(object o)
		{
			return ((Village)o).TradeTaxAccumulated;
		}

		// Token: 0x060031F9 RID: 12793 RVA: 0x000D00E0 File Offset: 0x000CE2E0
		internal static object AutoGeneratedGetMemberValue_villageState(object o)
		{
			return ((Village)o)._villageState;
		}

		// Token: 0x060031FA RID: 12794 RVA: 0x000D00F2 File Offset: 0x000CE2F2
		internal static object AutoGeneratedGetMemberValue_bound(object o)
		{
			return ((Village)o)._bound;
		}

		// Token: 0x060031FB RID: 12795 RVA: 0x000D00FF File Offset: 0x000CE2FF
		internal static object AutoGeneratedGetMemberValue_marketData(object o)
		{
			return ((Village)o)._marketData;
		}

		// Token: 0x17000C15 RID: 3093
		// (get) Token: 0x060031FC RID: 12796 RVA: 0x000D010C File Offset: 0x000CE30C
		public static MBReadOnlyList<Village> All
		{
			get
			{
				return Campaign.Current.AllVillages;
			}
		}

		// Token: 0x060031FD RID: 12797 RVA: 0x000D0118 File Offset: 0x000CE318
		public IEnumerable<PartyBase> GetDefenderParties(MapEvent.BattleTypes battleType)
		{
			yield return base.Settlement.Party;
			foreach (MobileParty mobileParty in base.Settlement.Parties)
			{
				if (mobileParty.MapFaction == base.Settlement.MapFaction && !mobileParty.IsCaravan)
				{
					yield return mobileParty.Party;
				}
			}
			List<MobileParty>.Enumerator enumerator = default(List<MobileParty>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x060031FE RID: 12798 RVA: 0x000D0128 File Offset: 0x000CE328
		public PartyBase GetNextDefenderParty(ref int partyIndex, MapEvent.BattleTypes battleType)
		{
			partyIndex++;
			if (partyIndex == 0)
			{
				return base.Settlement.Party;
			}
			for (int i = partyIndex - 1; i < base.Settlement.Parties.Count; i++)
			{
				MobileParty mobileParty = base.Settlement.Parties[i];
				if (mobileParty.MapFaction == base.Settlement.MapFaction && !mobileParty.IsCaravan)
				{
					partyIndex = i + 1;
					return mobileParty.Party;
				}
			}
			return null;
		}

		// Token: 0x17000C16 RID: 3094
		// (get) Token: 0x060031FF RID: 12799 RVA: 0x000D01A3 File Offset: 0x000CE3A3
		// (set) Token: 0x06003200 RID: 12800 RVA: 0x000D01AC File Offset: 0x000CE3AC
		public Village.VillageStates VillageState
		{
			get
			{
				return this._villageState;
			}
			set
			{
				if (this._villageState != value)
				{
					this._villageState = value;
					switch (this._villageState)
					{
					case Village.VillageStates.Normal:
						CampaignEventDispatcher.Instance.OnVillageBecomeNormal(this);
						return;
					case Village.VillageStates.BeingRaided:
						CampaignEventDispatcher.Instance.OnVillageBeingRaided(this);
						return;
					case Village.VillageStates.ForcedForVolunteers:
					case Village.VillageStates.ForcedForSupplies:
						break;
					case Village.VillageStates.Looted:
						CampaignEventDispatcher.Instance.OnVillageLooted(this);
						break;
					default:
						return;
					}
				}
			}
		}

		// Token: 0x17000C17 RID: 3095
		// (get) Token: 0x06003201 RID: 12801 RVA: 0x000D020E File Offset: 0x000CE40E
		public bool IsDeserted
		{
			get
			{
				return this._villageState == Village.VillageStates.Looted;
			}
		}

		// Token: 0x17000C18 RID: 3096
		// (get) Token: 0x06003202 RID: 12802 RVA: 0x000D0219 File Offset: 0x000CE419
		// (set) Token: 0x06003203 RID: 12803 RVA: 0x000D0221 File Offset: 0x000CE421
		[SaveableProperty(105)]
		public float LastDemandSatisfiedTime { get; private set; }

		// Token: 0x17000C19 RID: 3097
		// (get) Token: 0x06003204 RID: 12804 RVA: 0x000D022A File Offset: 0x000CE42A
		// (set) Token: 0x06003205 RID: 12805 RVA: 0x000D0232 File Offset: 0x000CE432
		public Settlement Bound
		{
			get
			{
				return this._bound;
			}
			private set
			{
				if (this._bound != value)
				{
					Settlement bound = this._bound;
					if (bound != null)
					{
						bound.RemoveBoundVillageInternal(this);
					}
					this._bound = value;
					Settlement bound2 = this._bound;
					if (bound2 == null)
					{
						return;
					}
					bound2.AddBoundVillageInternal(this);
				}
			}
		}

		// Token: 0x17000C1A RID: 3098
		// (get) Token: 0x06003206 RID: 12806 RVA: 0x000D0267 File Offset: 0x000CE467
		// (set) Token: 0x06003207 RID: 12807 RVA: 0x000D0284 File Offset: 0x000CE484
		public Settlement TradeBound
		{
			get
			{
				if (!this._bound.IsTown)
				{
					return this._tradeBound;
				}
				return this._bound;
			}
			internal set
			{
				if (this._tradeBound != value && !this._bound.IsTown)
				{
					Settlement tradeBound = this._tradeBound;
					if (tradeBound != null)
					{
						tradeBound.Town.RemoveTradeBoundVillageInternal(this);
					}
					this._tradeBound = value;
					Settlement tradeBound2 = this._tradeBound;
					if (tradeBound2 == null)
					{
						return;
					}
					tradeBound2.Town.SetTradeBoundVillageInternal(this);
				}
			}
		}

		// Token: 0x17000C1B RID: 3099
		// (get) Token: 0x06003208 RID: 12808 RVA: 0x000D02DB File Offset: 0x000CE4DB
		public VillageMarketData MarketData
		{
			get
			{
				return this._marketData;
			}
		}

		// Token: 0x17000C1C RID: 3100
		// (get) Token: 0x06003209 RID: 12809 RVA: 0x000D02E3 File Offset: 0x000CE4E3
		// (set) Token: 0x0600320A RID: 12810 RVA: 0x000D02EB File Offset: 0x000CE4EB
		[SaveableProperty(108)]
		public float Hearth { get; set; }

		// Token: 0x17000C1D RID: 3101
		// (get) Token: 0x0600320B RID: 12811 RVA: 0x000D02F4 File Offset: 0x000CE4F4
		// (set) Token: 0x0600320C RID: 12812 RVA: 0x000D02FC File Offset: 0x000CE4FC
		[SaveableProperty(110)]
		public int TradeTaxAccumulated { get; set; }

		// Token: 0x0600320D RID: 12813 RVA: 0x000D0305 File Offset: 0x000CE505
		public Village()
		{
			this.LastDemandSatisfiedTime = -1f;
			this._marketData = new VillageMarketData(this);
		}

		// Token: 0x0600320E RID: 12814 RVA: 0x000D0324 File Offset: 0x000CE524
		public void DailyTick()
		{
			int hearthLevel = this.GetHearthLevel();
			this.Hearth += this.HearthChange;
			if (hearthLevel != this.GetHearthLevel())
			{
				base.Settlement.Party.Visuals.RefreshLevelMask(base.Settlement.Party);
			}
			if (this.Hearth < 10f)
			{
				this.Hearth = 10f;
			}
			base.Owner.Settlement.Militia += this.MilitiaChange;
			if (base.Gold > 1000)
			{
				base.ChangeGold(1000 - base.Gold);
			}
		}

		// Token: 0x0600320F RID: 12815 RVA: 0x000D03C6 File Offset: 0x000CE5C6
		public override void OnInit()
		{
			ChangeVillageStateAction.ApplyBySettingToNormal(base.Settlement);
			base.ChangeGold(1000);
		}

		// Token: 0x06003210 RID: 12816 RVA: 0x000D03E0 File Offset: 0x000CE5E0
		public int GetWerehouseCapacity()
		{
			float num = Campaign.Current.Models.VillageProductionCalculatorModel.CalculateDailyFoodProductionAmount(this);
			foreach (ValueTuple<ItemObject, float> valueTuple in this.VillageType.Productions)
			{
				float num2 = Campaign.Current.Models.VillageProductionCalculatorModel.CalculateDailyProductionAmount(this, valueTuple.Item1);
				num += num2;
			}
			return MathF.Ceiling(MathF.Max(1f, num) * 5f);
		}

		// Token: 0x06003211 RID: 12817 RVA: 0x000D0480 File Offset: 0x000CE680
		public override int GetItemPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false)
		{
			if (this.TradeBound == null)
			{
				return 1;
			}
			return this.TradeBound.Town.MarketData.GetPrice(item, tradingParty, isSelling, null);
		}

		// Token: 0x06003212 RID: 12818 RVA: 0x000D04A5 File Offset: 0x000CE6A5
		public override int GetItemPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false)
		{
			if (this.TradeBound == null)
			{
				return 1;
			}
			return this.TradeBound.Town.MarketData.GetPrice(itemRosterElement, tradingParty, isSelling, null);
		}

		// Token: 0x06003213 RID: 12819 RVA: 0x000D04CA File Offset: 0x000CE6CA
		public override string ToString()
		{
			return base.Name.ToString();
		}

		// Token: 0x06003214 RID: 12820 RVA: 0x000D04D8 File Offset: 0x000CE6D8
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			bool isInitialized = base.IsInitialized;
			base.Deserialize(objectManager, node);
			base.BackgroundCropPosition = float.Parse(node.Attributes["background_crop_position"].Value);
			base.BackgroundMeshName = node.Attributes["background_mesh"].Value;
			base.CastleBackgroundMeshName = node.Attributes["castle_background_mesh"].Value;
			base.WaitMeshName = node.Attributes["wait_mesh"].Value;
			if (!isInitialized)
			{
				this.Hearth = (float)int.Parse(node.Attributes["hearth"].Value);
			}
			this.VillageType = (VillageType)objectManager.ReadObjectReferenceFromXml("village_type", typeof(VillageType), node);
			if (!isInitialized)
			{
				this.Bound = (Settlement)objectManager.ReadObjectReferenceFromXml("bound", typeof(Settlement), node);
				if (this.Bound.IsTown)
				{
					this.Bound.Town.SetTradeBoundVillageInternal(this);
				}
			}
		}

		// Token: 0x06003215 RID: 12821 RVA: 0x000D05EC File Offset: 0x000CE7EC
		public bool IsProducing(ItemObject item)
		{
			using (List<ValueTuple<ItemObject, float>>.Enumerator enumerator = this.VillageType.Productions.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					if (enumerator.Current.Item1 == item)
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x17000C1E RID: 3102
		// (get) Token: 0x06003216 RID: 12822 RVA: 0x000D064C File Offset: 0x000CE84C
		public float HearthChange
		{
			get
			{
				return Campaign.Current.Models.SettlementProsperityModel.CalculateHearthChange(this, false).ResultNumber;
			}
		}

		// Token: 0x17000C1F RID: 3103
		// (get) Token: 0x06003217 RID: 12823 RVA: 0x000D0677 File Offset: 0x000CE877
		public float Militia
		{
			get
			{
				return base.Owner.Settlement.Militia;
			}
		}

		// Token: 0x17000C20 RID: 3104
		// (get) Token: 0x06003218 RID: 12824 RVA: 0x000D068C File Offset: 0x000CE88C
		public float MilitiaChange
		{
			get
			{
				return Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement, false).ResultNumber;
			}
		}

		// Token: 0x17000C21 RID: 3105
		// (get) Token: 0x06003219 RID: 12825 RVA: 0x000D06C1 File Offset: 0x000CE8C1
		public ExplainedNumber MilitiaChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementMilitiaModel.CalculateMilitiaChange(base.Owner.Settlement, true);
			}
		}

		// Token: 0x17000C22 RID: 3106
		// (get) Token: 0x0600321A RID: 12826 RVA: 0x000D06E3 File Offset: 0x000CE8E3
		public ExplainedNumber HearthChangeExplanation
		{
			get
			{
				return Campaign.Current.Models.SettlementProsperityModel.CalculateHearthChange(this, true);
			}
		}

		// Token: 0x0600321B RID: 12827 RVA: 0x000D06FB File Offset: 0x000CE8FB
		public int GetHearthLevel()
		{
			if (this.Hearth >= 600f)
			{
				return 2;
			}
			if (this.Hearth >= 200f)
			{
				return 1;
			}
			return 0;
		}

		// Token: 0x0600321C RID: 12828 RVA: 0x000D071C File Offset: 0x000CE91C
		public override SettlementComponent.ProsperityLevel GetProsperityLevel()
		{
			if (this.GetHearthLevel() >= 2)
			{
				return SettlementComponent.ProsperityLevel.High;
			}
			if (this.GetHearthLevel() >= 1)
			{
				return SettlementComponent.ProsperityLevel.Mid;
			}
			return SettlementComponent.ProsperityLevel.Low;
		}

		// Token: 0x0600321D RID: 12829 RVA: 0x000D0735 File Offset: 0x000CE935
		protected override void OnInventoryUpdated(ItemRosterElement item, int count)
		{
		}

		// Token: 0x04001041 RID: 4161
		public const int MidHearthThreshold = 600;

		// Token: 0x04001042 RID: 4162
		public const int LowHearthThreshold = 200;

		// Token: 0x04001043 RID: 4163
		private const int InitialVillageGold = 1000;

		// Token: 0x04001044 RID: 4164
		public const int NumberOfDaysToFillVillageStocks = 5;

		// Token: 0x04001045 RID: 4165
		[CachedData]
		public VillagerPartyComponent VillagerPartyComponent;

		// Token: 0x04001046 RID: 4166
		[SaveableField(104)]
		private Village.VillageStates _villageState;

		// Token: 0x04001048 RID: 4168
		[SaveableField(106)]
		private Settlement _bound;

		// Token: 0x04001049 RID: 4169
		public VillageType VillageType;

		// Token: 0x0400104A RID: 4170
		private Settlement _tradeBound;

		// Token: 0x0400104B RID: 4171
		[SaveableField(107)]
		private VillageMarketData _marketData;

		// Token: 0x02000699 RID: 1689
		public enum VillageStates
		{
			// Token: 0x04001B62 RID: 7010
			Normal,
			// Token: 0x04001B63 RID: 7011
			BeingRaided,
			// Token: 0x04001B64 RID: 7012
			ForcedForVolunteers,
			// Token: 0x04001B65 RID: 7013
			ForcedForSupplies,
			// Token: 0x04001B66 RID: 7014
			Looted
		}
	}
}
