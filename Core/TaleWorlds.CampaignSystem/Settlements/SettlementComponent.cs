using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	// Token: 0x0200035E RID: 862
	public abstract class SettlementComponent : MBObjectBase
	{
		// Token: 0x0600316C RID: 12652 RVA: 0x000CE5E6 File Offset: 0x000CC7E6
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600316D RID: 12653 RVA: 0x000CE5EF File Offset: 0x000CC7EF
		internal static object AutoGeneratedGetMemberValueGold(object o)
		{
			return ((SettlementComponent)o).Gold;
		}

		// Token: 0x0600316E RID: 12654 RVA: 0x000CE601 File Offset: 0x000CC801
		internal static object AutoGeneratedGetMemberValueIsOwnerUnassigned(object o)
		{
			return ((SettlementComponent)o).IsOwnerUnassigned;
		}

		// Token: 0x0600316F RID: 12655 RVA: 0x000CE613 File Offset: 0x000CC813
		internal static object AutoGeneratedGetMemberValueIsTaken(object o)
		{
			return ((SettlementComponent)o).IsTaken;
		}

		// Token: 0x17000BE0 RID: 3040
		// (get) Token: 0x06003170 RID: 12656 RVA: 0x000CE625 File Offset: 0x000CC825
		// (set) Token: 0x06003171 RID: 12657 RVA: 0x000CE62D File Offset: 0x000CC82D
		[SaveableProperty(50)]
		public int Gold { get; private set; }

		// Token: 0x06003172 RID: 12658 RVA: 0x000CE636 File Offset: 0x000CC836
		public virtual SettlementComponent.ProsperityLevel GetProsperityLevel()
		{
			return SettlementComponent.ProsperityLevel.Mid;
		}

		// Token: 0x17000BE1 RID: 3041
		// (get) Token: 0x06003173 RID: 12659 RVA: 0x000CE639 File Offset: 0x000CC839
		// (set) Token: 0x06003174 RID: 12660 RVA: 0x000CE641 File Offset: 0x000CC841
		public float BackgroundCropPosition { get; protected set; }

		// Token: 0x17000BE2 RID: 3042
		// (get) Token: 0x06003175 RID: 12661 RVA: 0x000CE64A File Offset: 0x000CC84A
		// (set) Token: 0x06003176 RID: 12662 RVA: 0x000CE652 File Offset: 0x000CC852
		public string BackgroundMeshName { get; protected set; }

		// Token: 0x17000BE3 RID: 3043
		// (get) Token: 0x06003177 RID: 12663 RVA: 0x000CE65B File Offset: 0x000CC85B
		// (set) Token: 0x06003178 RID: 12664 RVA: 0x000CE663 File Offset: 0x000CC863
		public string WaitMeshName { get; protected set; }

		// Token: 0x17000BE4 RID: 3044
		// (get) Token: 0x06003179 RID: 12665 RVA: 0x000CE66C File Offset: 0x000CC86C
		// (set) Token: 0x0600317A RID: 12666 RVA: 0x000CE674 File Offset: 0x000CC874
		public string CastleBackgroundMeshName { get; protected set; }

		// Token: 0x17000BE5 RID: 3045
		// (get) Token: 0x0600317B RID: 12667 RVA: 0x000CE67D File Offset: 0x000CC87D
		// (set) Token: 0x0600317C RID: 12668 RVA: 0x000CE688 File Offset: 0x000CC888
		public PartyBase Owner
		{
			get
			{
				return this._owner;
			}
			internal set
			{
				if (this._owner != value)
				{
					if (this._owner != null)
					{
						this._owner.ItemRoster.RosterUpdatedEvent -= this.OnInventoryUpdated;
					}
					this._owner = value;
					if (this._owner != null)
					{
						this._owner.ItemRoster.RosterUpdatedEvent += this.OnInventoryUpdated;
					}
				}
			}
		}

		// Token: 0x17000BE6 RID: 3046
		// (get) Token: 0x0600317D RID: 12669 RVA: 0x000CE6EF File Offset: 0x000CC8EF
		public Settlement Settlement
		{
			get
			{
				return this._owner.Settlement;
			}
		}

		// Token: 0x0600317E RID: 12670
		protected abstract void OnInventoryUpdated(ItemRosterElement item, int count);

		// Token: 0x17000BE7 RID: 3047
		// (get) Token: 0x0600317F RID: 12671 RVA: 0x000CE6FC File Offset: 0x000CC8FC
		public TextObject Name
		{
			get
			{
				return this.Owner.Name;
			}
		}

		// Token: 0x17000BE8 RID: 3048
		// (get) Token: 0x06003181 RID: 12673 RVA: 0x000CE711 File Offset: 0x000CC911
		// (set) Token: 0x06003182 RID: 12674 RVA: 0x000CE719 File Offset: 0x000CC919
		[SaveableProperty(80)]
		public bool IsOwnerUnassigned { get; set; }

		// Token: 0x06003183 RID: 12675 RVA: 0x000CE722 File Offset: 0x000CC922
		public virtual void OnPartyEntered(MobileParty mobileParty)
		{
		}

		// Token: 0x06003184 RID: 12676 RVA: 0x000CE724 File Offset: 0x000CC924
		public virtual void OnPartyLeft(MobileParty mobileParty)
		{
		}

		// Token: 0x06003185 RID: 12677 RVA: 0x000CE726 File Offset: 0x000CC926
		public virtual void OnInit()
		{
		}

		// Token: 0x06003186 RID: 12678 RVA: 0x000CE728 File Offset: 0x000CC928
		public void ChangeGold(int changeAmount)
		{
			this.Gold += changeAmount;
			if (this.Gold < 0)
			{
				this.Gold = 0;
			}
		}

		// Token: 0x06003187 RID: 12679 RVA: 0x000CE748 File Offset: 0x000CC948
		public int GetNumberOfTroops()
		{
			int num = 0;
			foreach (MobileParty mobileParty in this.Owner.Settlement.Parties)
			{
				if (mobileParty.IsMilitia || mobileParty.IsGarrison)
				{
					num += mobileParty.Party.NumberOfAllMembers;
				}
			}
			return num;
		}

		// Token: 0x06003188 RID: 12680 RVA: 0x000CE7C0 File Offset: 0x000CC9C0
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
		}

		// Token: 0x06003189 RID: 12681 RVA: 0x000CE7CA File Offset: 0x000CC9CA
		public virtual int GetItemPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false)
		{
			return 0;
		}

		// Token: 0x0600318A RID: 12682 RVA: 0x000CE7CD File Offset: 0x000CC9CD
		public virtual int GetItemPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false)
		{
			return 0;
		}

		// Token: 0x17000BE9 RID: 3049
		// (get) Token: 0x0600318B RID: 12683 RVA: 0x000CE7D0 File Offset: 0x000CC9D0
		public virtual bool IsTown
		{
			get
			{
				return false;
			}
		}

		// Token: 0x17000BEA RID: 3050
		// (get) Token: 0x0600318C RID: 12684 RVA: 0x000CE7D3 File Offset: 0x000CC9D3
		public virtual bool IsCastle
		{
			get
			{
				return false;
			}
		}

		// Token: 0x0600318D RID: 12685 RVA: 0x000CE7D6 File Offset: 0x000CC9D6
		public virtual void OnRelatedPartyRemoved(MobileParty mobileParty)
		{
		}

		// Token: 0x0600318E RID: 12686 RVA: 0x000CE7D8 File Offset: 0x000CC9D8
		public List<CharacterObject> GetPrisonerHeroes()
		{
			List<PartyBase> list = new List<PartyBase> { this.Owner };
			foreach (MobileParty mobileParty in this.Owner.Settlement.Parties)
			{
				if (mobileParty.IsGarrison)
				{
					list.Add(mobileParty.Party);
				}
			}
			List<CharacterObject> list2 = new List<CharacterObject>();
			foreach (PartyBase partyBase in list)
			{
				for (int i = 0; i < partyBase.PrisonRoster.Count; i++)
				{
					for (int j = 0; j < partyBase.PrisonRoster.GetElementNumber(i); j++)
					{
						CharacterObject character = partyBase.PrisonRoster.GetElementCopyAtIndex(i).Character;
						if (character.IsHero)
						{
							list2.Add(character);
						}
					}
				}
			}
			return list2;
		}

		// Token: 0x04001024 RID: 4132
		[SaveableField(57)]
		public bool IsTaken;

		// Token: 0x04001029 RID: 4137
		private PartyBase _owner;

		// Token: 0x02000694 RID: 1684
		public enum ProsperityLevel
		{
			// Token: 0x04001B4C RID: 6988
			Low,
			// Token: 0x04001B4D RID: 6989
			Mid,
			// Token: 0x04001B4E RID: 6990
			High,
			// Token: 0x04001B4F RID: 6991
			NumberOfLevels
		}
	}
}
