using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Settlements
{
	// Token: 0x0200035B RID: 859
	public class TownMarketData : IMarketData
	{
		// Token: 0x0600308E RID: 12430 RVA: 0x000CC09A File Offset: 0x000CA29A
		internal static void AutoGeneratedStaticCollectObjectsTownMarketData(object o, List<object> collectedObjects)
		{
			((TownMarketData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600308F RID: 12431 RVA: 0x000CC0A8 File Offset: 0x000CA2A8
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._itemDict);
			collectedObjects.Add(this._town);
		}

		// Token: 0x06003090 RID: 12432 RVA: 0x000CC0C2 File Offset: 0x000CA2C2
		internal static object AutoGeneratedGetMemberValue_itemDict(object o)
		{
			return ((TownMarketData)o)._itemDict;
		}

		// Token: 0x06003091 RID: 12433 RVA: 0x000CC0CF File Offset: 0x000CA2CF
		internal static object AutoGeneratedGetMemberValue_town(object o)
		{
			return ((TownMarketData)o)._town;
		}

		// Token: 0x06003092 RID: 12434 RVA: 0x000CC0DC File Offset: 0x000CA2DC
		public TownMarketData(Town town)
		{
			this._town = town;
		}

		// Token: 0x06003093 RID: 12435 RVA: 0x000CC0F8 File Offset: 0x000CA2F8
		public ItemData GetCategoryData(ItemCategory itemCategory)
		{
			ItemData itemData;
			if (!this._itemDict.TryGetValue(itemCategory, out itemData))
			{
				itemData = default(ItemData);
			}
			return itemData;
		}

		// Token: 0x06003094 RID: 12436 RVA: 0x000CC120 File Offset: 0x000CA320
		public int GetItemCountOfCategory(ItemCategory itemCategory)
		{
			ItemData itemData;
			if (!this._itemDict.TryGetValue(itemCategory, out itemData))
			{
				return 0;
			}
			return itemData.InStore;
		}

		// Token: 0x06003095 RID: 12437 RVA: 0x000CC145 File Offset: 0x000CA345
		private void SetItemData(ItemCategory itemCategory, ItemData itemData)
		{
			this._itemDict[itemCategory] = itemData;
		}

		// Token: 0x06003096 RID: 12438 RVA: 0x000CC154 File Offset: 0x000CA354
		public void OnTownInventoryUpdated(ItemRosterElement item, int count)
		{
			if (item.EquipmentElement.Item == null)
			{
				this.ClearStores();
				return;
			}
			this.AddNumberInStore(item.EquipmentElement.Item.GetItemCategory(), count, item.EquipmentElement.Item.Value);
		}

		// Token: 0x06003097 RID: 12439 RVA: 0x000CC1A8 File Offset: 0x000CA3A8
		public void AddDemand(ItemCategory itemCategory, float demandAmount)
		{
			SettlementEconomyModel settlementConsumptionModel = Campaign.Current.Models.SettlementConsumptionModel;
			this.SetItemData(itemCategory, this.GetCategoryData(itemCategory).AddDemand(settlementConsumptionModel.GetDemandChangeFromValue(demandAmount)));
		}

		// Token: 0x06003098 RID: 12440 RVA: 0x000CC1E4 File Offset: 0x000CA3E4
		public void AddSupply(ItemCategory itemCategory, float supplyAmount)
		{
			this.SetItemData(itemCategory, this.GetCategoryData(itemCategory).AddSupply(supplyAmount));
		}

		// Token: 0x06003099 RID: 12441 RVA: 0x000CC208 File Offset: 0x000CA408
		public void AddNumberInStore(ItemCategory itemCategory, int number, int value)
		{
			this.SetItemData(itemCategory, this.GetCategoryData(itemCategory).AddInStore(number, value));
		}

		// Token: 0x0600309A RID: 12442 RVA: 0x000CC230 File Offset: 0x000CA430
		public void SetSupplyDemand(ItemCategory itemCategory, float supply, float demand)
		{
			ItemData categoryData = this.GetCategoryData(itemCategory);
			this.SetItemData(itemCategory, new ItemData(supply, demand, categoryData.InStore, categoryData.InStoreValue));
		}

		// Token: 0x0600309B RID: 12443 RVA: 0x000CC260 File Offset: 0x000CA460
		public void SetDemand(ItemCategory itemCategory, float demand)
		{
			ItemData categoryData = this.GetCategoryData(itemCategory);
			this.SetItemData(itemCategory, new ItemData(categoryData.Supply, demand, categoryData.InStore, categoryData.InStoreValue));
		}

		// Token: 0x0600309C RID: 12444 RVA: 0x000CC294 File Offset: 0x000CA494
		public float GetDemand(ItemCategory itemCategory)
		{
			return this.GetCategoryData(itemCategory).Demand;
		}

		// Token: 0x0600309D RID: 12445 RVA: 0x000CC2A2 File Offset: 0x000CA4A2
		public float GetSupply(ItemCategory itemCategory)
		{
			return this.GetCategoryData(itemCategory).Supply;
		}

		// Token: 0x0600309E RID: 12446 RVA: 0x000CC2B0 File Offset: 0x000CA4B0
		public float GetPriceFactor(ItemCategory itemCategory)
		{
			ItemData categoryData = this.GetCategoryData(itemCategory);
			return Campaign.Current.Models.TradeItemPriceFactorModel.GetBasePriceFactor(itemCategory, (float)categoryData.InStoreValue, categoryData.Supply, categoryData.Demand, false, 0);
		}

		// Token: 0x0600309F RID: 12447 RVA: 0x000CC2EF File Offset: 0x000CA4EF
		public int GetPrice(ItemObject item, MobileParty tradingParty = null, bool isSelling = false, PartyBase merchantParty = null)
		{
			return this.GetPrice(new EquipmentElement(item, null, null, false), tradingParty, isSelling, null);
		}

		// Token: 0x060030A0 RID: 12448 RVA: 0x000CC304 File Offset: 0x000CA504
		public int GetPrice(EquipmentElement itemRosterElement, MobileParty tradingParty = null, bool isSelling = false, PartyBase merchantParty = null)
		{
			ItemData categoryData = this.GetCategoryData(itemRosterElement.Item.GetItemCategory());
			return Campaign.Current.Models.TradeItemPriceFactorModel.GetPrice(itemRosterElement, tradingParty, merchantParty, isSelling, (float)categoryData.InStoreValue, categoryData.Supply, categoryData.Demand);
		}

		// Token: 0x060030A1 RID: 12449 RVA: 0x000CC350 File Offset: 0x000CA550
		public void UpdateStores()
		{
			this.ClearStores();
			ItemRoster itemRoster = this._town.Owner.ItemRoster;
			for (int i = 0; i < itemRoster.Count; i++)
			{
				ItemRosterElement itemRosterElement = itemRoster[i];
				if (itemRosterElement.EquipmentElement.Item.ItemCategory != null)
				{
					ItemData categoryData = this.GetCategoryData(itemRosterElement.EquipmentElement.Item.GetItemCategory());
					this.SetItemData(itemRosterElement.EquipmentElement.Item.GetItemCategory(), categoryData.AddInStore(itemRosterElement.Amount, itemRosterElement.EquipmentElement.Item.Value));
				}
			}
		}

		// Token: 0x060030A2 RID: 12450 RVA: 0x000CC400 File Offset: 0x000CA600
		private void ClearStores()
		{
			foreach (ItemCategory itemCategory in ItemCategories.All)
			{
				ItemData categoryData = this.GetCategoryData(itemCategory);
				this.SetItemData(itemCategory, new ItemData(categoryData.Supply, categoryData.Demand, 0, 0));
			}
		}

		// Token: 0x04000FF1 RID: 4081
		[SaveableField(1)]
		private Dictionary<ItemCategory, ItemData> _itemDict = new Dictionary<ItemCategory, ItemData>();

		// Token: 0x04000FF2 RID: 4082
		[SaveableField(2)]
		private Town _town;
	}
}
