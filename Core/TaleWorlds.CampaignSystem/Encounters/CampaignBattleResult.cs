using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Encounters
{
	public class CampaignBattleResult
	{
		internal static void AutoGeneratedStaticCollectObjectsCampaignBattleResult(object o, List<object> collectedObjects)
		{
			((CampaignBattleResult)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		internal static object AutoGeneratedGetMemberValuePlayerVictory(object o)
		{
			return ((CampaignBattleResult)o).PlayerVictory;
		}

		internal static object AutoGeneratedGetMemberValuePlayerDefeat(object o)
		{
			return ((CampaignBattleResult)o).PlayerDefeat;
		}

		internal static object AutoGeneratedGetMemberValueEnemyPulledBack(object o)
		{
			return ((CampaignBattleResult)o).EnemyPulledBack;
		}

		internal static object AutoGeneratedGetMemberValueEnemyRetreated(object o)
		{
			return ((CampaignBattleResult)o).EnemyRetreated;
		}

		[SaveableProperty(0)]
		public bool PlayerVictory { get; private set; }

		[SaveableProperty(1)]
		public bool PlayerDefeat { get; private set; }

		[SaveableProperty(2)]
		public bool EnemyPulledBack { get; private set; }

		[SaveableProperty(3)]
		public bool EnemyRetreated { get; private set; }

		public bool BattleResolved
		{
			get
			{
				return this.PlayerVictory || this.PlayerDefeat;
			}
		}

		public static CampaignBattleResult GetResult(BattleState winnerSide, bool enemyRetreated = false)
		{
			if (PlayerEncounter.Current != null)
			{
				CampaignBattleResult campaignBattleResult = new CampaignBattleResult();
				if ((winnerSide == BattleState.AttackerVictory && PlayerEncounter.Current.PlayerSide == BattleSideEnum.Attacker) || (winnerSide == BattleState.DefenderVictory && PlayerEncounter.Current.PlayerSide == BattleSideEnum.Defender))
				{
					campaignBattleResult.PlayerVictory = true;
				}
				else if ((winnerSide == BattleState.AttackerVictory && PlayerEncounter.Current.PlayerSide == BattleSideEnum.Defender) || (winnerSide == BattleState.DefenderVictory && PlayerEncounter.Current.PlayerSide == BattleSideEnum.Attacker))
				{
					campaignBattleResult.PlayerDefeat = true;
				}
				else if (winnerSide == BattleState.DefenderPullBack && PlayerEncounter.Current.PlayerSide == BattleSideEnum.Attacker)
				{
					campaignBattleResult.EnemyPulledBack = true;
				}
				campaignBattleResult.EnemyRetreated = enemyRetreated;
				return campaignBattleResult;
			}
			return null;
		}
	}
}
