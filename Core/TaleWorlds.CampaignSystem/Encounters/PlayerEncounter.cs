using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Inventory;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Siege;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Encounters
{
	public class PlayerEncounter
	{
		internal static void AutoGeneratedStaticCollectObjectsPlayerEncounter(object o, List<object> collectedObjects)
		{
			((PlayerEncounter)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._campaignBattleResult);
			collectedObjects.Add(this._mapEvent);
			collectedObjects.Add(this._encounteredParty);
			collectedObjects.Add(this._attackerParty);
			collectedObjects.Add(this._defenderParty);
			collectedObjects.Add(this._helpedHeroes);
			collectedObjects.Add(this._capturedHeroes);
			collectedObjects.Add(this._freedHeroes);
			collectedObjects.Add(this._alternativeRosterToReceiveLootItems);
			collectedObjects.Add(this._alternativeRosterToReceiveLootPrisoners);
			collectedObjects.Add(this._alternativeRosterToReceiveLootMembers);
			collectedObjects.Add(this.EncounterSettlementAux);
		}

		internal static object AutoGeneratedGetMemberValueOpponentSide(object o)
		{
			return ((PlayerEncounter)o).OpponentSide;
		}

		internal static object AutoGeneratedGetMemberValuePlayerSide(object o)
		{
			return ((PlayerEncounter)o).PlayerSide;
		}

		internal static object AutoGeneratedGetMemberValueIsJoinedBattle(object o)
		{
			return ((PlayerEncounter)o).IsJoinedBattle;
		}

		internal static object AutoGeneratedGetMemberValueEncounterSettlementAux(object o)
		{
			return ((PlayerEncounter)o).EncounterSettlementAux;
		}

		internal static object AutoGeneratedGetMemberValueIsPlayerWaiting(object o)
		{
			return ((PlayerEncounter)o).IsPlayerWaiting;
		}

		internal static object AutoGeneratedGetMemberValueFirstInit(object o)
		{
			return ((PlayerEncounter)o).FirstInit;
		}

		internal static object AutoGeneratedGetMemberValueIsEnemy(object o)
		{
			return ((PlayerEncounter)o).IsEnemy;
		}

		internal static object AutoGeneratedGetMemberValuePlayerPartyInitialStrength(object o)
		{
			return ((PlayerEncounter)o).PlayerPartyInitialStrength;
		}

		internal static object AutoGeneratedGetMemberValuePartiesStrengthRatioBeforePlayerJoin(object o)
		{
			return ((PlayerEncounter)o).PartiesStrengthRatioBeforePlayerJoin;
		}

		internal static object AutoGeneratedGetMemberValueForceRaid(object o)
		{
			return ((PlayerEncounter)o).ForceRaid;
		}

		internal static object AutoGeneratedGetMemberValueForceSallyOut(object o)
		{
			return ((PlayerEncounter)o).ForceSallyOut;
		}

		internal static object AutoGeneratedGetMemberValueForceVolunteers(object o)
		{
			return ((PlayerEncounter)o).ForceVolunteers;
		}

		internal static object AutoGeneratedGetMemberValueForceSupplies(object o)
		{
			return ((PlayerEncounter)o).ForceSupplies;
		}

		internal static object AutoGeneratedGetMemberValue_campaignBattleResult(object o)
		{
			return ((PlayerEncounter)o)._campaignBattleResult;
		}

		internal static object AutoGeneratedGetMemberValue_isSiegeInterruptedByEnemyDefection(object o)
		{
			return ((PlayerEncounter)o)._isSiegeInterruptedByEnemyDefection;
		}

		internal static object AutoGeneratedGetMemberValue_isPlayerEncounterInterruptedByPeace(object o)
		{
			return ((PlayerEncounter)o)._isPlayerEncounterInterruptedByPeace;
		}

		internal static object AutoGeneratedGetMemberValue_mapEvent(object o)
		{
			return ((PlayerEncounter)o)._mapEvent;
		}

		internal static object AutoGeneratedGetMemberValue_mapEventState(object o)
		{
			return ((PlayerEncounter)o)._mapEventState;
		}

		internal static object AutoGeneratedGetMemberValue_encounteredParty(object o)
		{
			return ((PlayerEncounter)o)._encounteredParty;
		}

		internal static object AutoGeneratedGetMemberValue_attackerParty(object o)
		{
			return ((PlayerEncounter)o)._attackerParty;
		}

		internal static object AutoGeneratedGetMemberValue_defenderParty(object o)
		{
			return ((PlayerEncounter)o)._defenderParty;
		}

		internal static object AutoGeneratedGetMemberValue_helpedHeroes(object o)
		{
			return ((PlayerEncounter)o)._helpedHeroes;
		}

		internal static object AutoGeneratedGetMemberValue_capturedHeroes(object o)
		{
			return ((PlayerEncounter)o)._capturedHeroes;
		}

		internal static object AutoGeneratedGetMemberValue_freedHeroes(object o)
		{
			return ((PlayerEncounter)o)._freedHeroes;
		}

		internal static object AutoGeneratedGetMemberValue_leaveEncounter(object o)
		{
			return ((PlayerEncounter)o)._leaveEncounter;
		}

		internal static object AutoGeneratedGetMemberValue_playerSurrender(object o)
		{
			return ((PlayerEncounter)o)._playerSurrender;
		}

		internal static object AutoGeneratedGetMemberValue_enemySurrender(object o)
		{
			return ((PlayerEncounter)o)._enemySurrender;
		}

		internal static object AutoGeneratedGetMemberValue_battleChallenge(object o)
		{
			return ((PlayerEncounter)o)._battleChallenge;
		}

		internal static object AutoGeneratedGetMemberValue_meetingDone(object o)
		{
			return ((PlayerEncounter)o)._meetingDone;
		}

		internal static object AutoGeneratedGetMemberValue_stateHandled(object o)
		{
			return ((PlayerEncounter)o)._stateHandled;
		}

		internal static object AutoGeneratedGetMemberValue_alternativeRosterToReceiveLootItems(object o)
		{
			return ((PlayerEncounter)o)._alternativeRosterToReceiveLootItems;
		}

		internal static object AutoGeneratedGetMemberValue_alternativeRosterToReceiveLootPrisoners(object o)
		{
			return ((PlayerEncounter)o)._alternativeRosterToReceiveLootPrisoners;
		}

		internal static object AutoGeneratedGetMemberValue_alternativeRosterToReceiveLootMembers(object o)
		{
			return ((PlayerEncounter)o)._alternativeRosterToReceiveLootMembers;
		}

		internal static object AutoGeneratedGetMemberValue_doesBattleContinue(object o)
		{
			return ((PlayerEncounter)o)._doesBattleContinue;
		}

		internal static object AutoGeneratedGetMemberValue_isSallyOutAmbush(object o)
		{
			return ((PlayerEncounter)o)._isSallyOutAmbush;
		}

		public static PlayerEncounter Current
		{
			get
			{
				return Campaign.Current.PlayerEncounter;
			}
		}

		public static LocationEncounter LocationEncounter
		{
			get
			{
				return Campaign.Current.LocationEncounter;
			}
			set
			{
				Campaign.Current.LocationEncounter = value;
			}
		}

		public static MapEvent Battle
		{
			get
			{
				if (PlayerEncounter.Current == null)
				{
					return null;
				}
				return PlayerEncounter.Current._mapEvent;
			}
		}

		public static PartyBase EncounteredParty
		{
			get
			{
				if (PlayerEncounter.Current != null)
				{
					return PlayerEncounter.Current._encounteredParty;
				}
				return null;
			}
		}

		public static MobileParty EncounteredMobileParty
		{
			get
			{
				PartyBase encounteredParty = PlayerEncounter.EncounteredParty;
				if (encounteredParty == null)
				{
					return null;
				}
				return encounteredParty.MobileParty;
			}
		}

		public static MapEvent EncounteredBattle
		{
			get
			{
				if (PlayerEncounter.Current._encounteredParty.MapEvent != null)
				{
					return PlayerEncounter.Current._encounteredParty.MapEvent;
				}
				if (PlayerEncounter.Current._encounteredParty.IsSettlement)
				{
					SiegeEvent siegeEvent = PlayerEncounter.Current._encounteredParty.SiegeEvent;
					if (((siegeEvent != null) ? siegeEvent.BesiegerCamp.LeaderParty.MapEvent : null) != null)
					{
						return PlayerEncounter.Current._encounteredParty.SiegeEvent.BesiegerCamp.LeaderParty.MapEvent;
					}
				}
				return null;
			}
		}

		public static BattleState BattleState
		{
			get
			{
				return PlayerEncounter.Current._mapEvent.BattleState;
			}
		}

		public static BattleSideEnum WinningSide
		{
			get
			{
				return PlayerEncounter.Current._mapEvent.WinningSide;
			}
		}

		public static bool BattleChallenge
		{
			get
			{
				return PlayerEncounter.Current._battleChallenge;
			}
			set
			{
				PlayerEncounter.Current._battleChallenge = value;
			}
		}

		public static bool PlayerIsDefender
		{
			get
			{
				return PlayerEncounter.Current.PlayerSide == BattleSideEnum.Defender;
			}
		}

		public static bool PlayerIsAttacker
		{
			get
			{
				return PlayerEncounter.Current.PlayerSide == BattleSideEnum.Attacker;
			}
		}

		public static bool LeaveEncounter
		{
			get
			{
				return PlayerEncounter.Current._leaveEncounter;
			}
			set
			{
				PlayerEncounter.Current._leaveEncounter = value;
			}
		}

		public static bool MeetingDone
		{
			get
			{
				return PlayerEncounter.Current._meetingDone;
			}
		}

		public static bool PlayerSurrender
		{
			get
			{
				return PlayerEncounter.Current._playerSurrender;
			}
			set
			{
				if (value)
				{
					PlayerEncounter.Current.PlayerSurrenderInternal();
				}
			}
		}

		public static bool EnemySurrender
		{
			get
			{
				return PlayerEncounter.Current._enemySurrender;
			}
			set
			{
				if (value)
				{
					PlayerEncounter.Current.EnemySurrenderInternal();
				}
			}
		}

		public static bool IsActive
		{
			get
			{
				return PlayerEncounter.Current != null;
			}
		}

		[SaveableProperty(2)]
		public BattleSideEnum OpponentSide { get; private set; }

		[SaveableProperty(3)]
		public BattleSideEnum PlayerSide { get; private set; }

		[SaveableProperty(6)]
		public bool IsJoinedBattle { get; private set; }

		public static bool InsideSettlement
		{
			get
			{
				return MobileParty.MainParty.IsActive && MobileParty.MainParty.CurrentSettlement != null;
			}
		}

		public static CampaignBattleResult CampaignBattleResult
		{
			get
			{
				return PlayerEncounter.Current._campaignBattleResult;
			}
			set
			{
				PlayerEncounter.Current._campaignBattleResult = value;
			}
		}

		public bool IsPlayerEncounterInterruptedByPeace
		{
			get
			{
				return this._isPlayerEncounterInterruptedByPeace;
			}
		}

		public static BattleSimulation CurrentBattleSimulation
		{
			get
			{
				if (PlayerEncounter.Current == null)
				{
					return null;
				}
				return PlayerEncounter.Current.BattleSimulation;
			}
		}

		public PlayerEncounterState EncounterState
		{
			get
			{
				return this._mapEventState;
			}
			private set
			{
				this._mapEventState = value;
			}
		}

		public ItemRoster RosterToReceiveLootItems
		{
			get
			{
				if (this._alternativeRosterToReceiveLootItems == null)
				{
					this._alternativeRosterToReceiveLootItems = new ItemRoster();
				}
				return this._alternativeRosterToReceiveLootItems;
			}
		}

		public TroopRoster RosterToReceiveLootPrisoners
		{
			get
			{
				if (this._alternativeRosterToReceiveLootPrisoners == null)
				{
					this._alternativeRosterToReceiveLootPrisoners = TroopRoster.CreateDummyTroopRoster();
				}
				return this._alternativeRosterToReceiveLootPrisoners;
			}
		}

		public TroopRoster RosterToReceiveLootMembers
		{
			get
			{
				if (this._alternativeRosterToReceiveLootMembers == null)
				{
					this._alternativeRosterToReceiveLootMembers = TroopRoster.CreateDummyTroopRoster();
				}
				return this._alternativeRosterToReceiveLootMembers;
			}
		}

		public static Settlement EncounterSettlement
		{
			get
			{
				PlayerEncounter playerEncounter = PlayerEncounter.Current;
				if (playerEncounter == null)
				{
					return null;
				}
				return playerEncounter.EncounterSettlementAux;
			}
		}

		[SaveableProperty(28)]
		public Settlement EncounterSettlementAux { get; private set; }

		[SaveableProperty(50)]
		public bool IsPlayerWaiting { get; set; }

		private PlayerEncounter()
		{
		}

		public void OnLoad()
		{
			if (PlayerEncounter.InsideSettlement && PlayerEncounter.Battle == null)
			{
				PlayerEncounter.CreateLocationEncounter(MobileParty.MainParty.CurrentSettlement);
				return;
			}
			if (PlayerEncounter.Current != null && PlayerEncounter.EncounterSettlement != null && PlayerEncounter.EncounterSettlement.IsVillage && PlayerEncounter.Current.IsPlayerWaiting)
			{
				PlayerEncounter.CreateLocationEncounter(this.EncounterSettlementAux);
			}
		}

		public static void RestartPlayerEncounter(PartyBase defenderParty, PartyBase attackerParty, bool forcePlayerOutFromSettlement = true)
		{
			if (PlayerEncounter.Current != null)
			{
				PlayerEncounter.Finish(forcePlayerOutFromSettlement);
			}
			PlayerEncounter.Start();
			PlayerEncounter.Current.SetupFields(attackerParty, defenderParty);
		}

		internal static void SimulateBattle()
		{
			PlayerEncounter.Battle.SimulatePlayerEncounterBattle();
		}

		internal void Init(PartyBase attackerParty, PartyBase defenderParty, Settlement settlement = null)
		{
			this.EncounterSettlementAux = ((settlement != null) ? settlement : (defenderParty.IsSettlement ? defenderParty.Settlement : attackerParty.Settlement));
			PlayerEncounter.EncounteredPartySurrendered = false;
			this.PlayerPartyInitialStrength = PartyBase.MainParty.TotalStrength;
			this.SetupFields(attackerParty, defenderParty);
			if (defenderParty.MapEvent != null && attackerParty != MobileParty.MainParty.Party && defenderParty != MobileParty.MainParty.Party)
			{
				this._mapEvent = defenderParty.MapEvent;
				if (this._mapEvent.CanPartyJoinBattle(PartyBase.MainParty, BattleSideEnum.Defender))
				{
					MobileParty.MainParty.Party.MapEventSide = this._mapEvent.DefenderSide;
				}
				else if (this._mapEvent.CanPartyJoinBattle(PartyBase.MainParty, BattleSideEnum.Attacker))
				{
					MobileParty.MainParty.Party.MapEventSide = this._mapEvent.AttackerSide;
				}
			}
			bool flag = false;
			bool flag2 = false;
			string encounterMenu = Campaign.Current.Models.EncounterGameMenuModel.GetEncounterMenu(attackerParty, defenderParty, out flag2, out flag);
			if (!string.IsNullOrEmpty(encounterMenu))
			{
				if (flag2)
				{
					PlayerEncounter.StartBattle();
				}
				if (flag)
				{
					if (MobileParty.MainParty.MapEvent == null)
					{
						if (defenderParty.MapEvent != null)
						{
							if (defenderParty.MapEvent.CanPartyJoinBattle(PartyBase.MainParty, BattleSideEnum.Attacker))
							{
								PlayerEncounter.JoinBattle(BattleSideEnum.Attacker);
							}
							else if (defenderParty.MapEvent.CanPartyJoinBattle(PartyBase.MainParty, BattleSideEnum.Defender))
							{
								PlayerEncounter.JoinBattle(BattleSideEnum.Defender);
							}
							else
							{
								Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "Init", 465);
							}
						}
						else
						{
							Debug.FailedAssert("If there is no map event we should create one in order to join battle", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "Init", 470);
						}
					}
					this.CheckNearbyPartiesToJoinPlayerMapEvent();
				}
				if (attackerParty == PartyBase.MainParty && defenderParty.IsSettlement && !defenderParty.Settlement.IsUnderRaid && !defenderParty.Settlement.IsUnderSiege)
				{
					PlayerEncounter.EnterSettlement();
				}
				GameMenu.ActivateGameMenu(encounterMenu);
				return;
			}
			if (attackerParty == PartyBase.MainParty && defenderParty.IsSettlement && !defenderParty.Settlement.IsUnderRaid && !defenderParty.Settlement.IsUnderSiege)
			{
				PlayerEncounter.EnterSettlement();
			}
		}

		public static void Init()
		{
			if (PlayerEncounter.Current == null)
			{
				PlayerEncounter.Start();
			}
			PlayerEncounter.Current.InitAux();
		}

		private void InitAux()
		{
			if (MobileParty.MainParty.MapEvent != null)
			{
				this._mapEvent = MobileParty.MainParty.MapEvent;
				this.SetupFields(this._mapEvent.AttackerSide.LeaderParty, this._mapEvent.DefenderSide.LeaderParty);
				this.CheckNearbyPartiesToJoinPlayerMapEvent();
			}
		}

		public void SetupFields(PartyBase attackerParty, PartyBase defenderParty)
		{
			this._attackerParty = attackerParty;
			this._defenderParty = defenderParty;
			MobileParty mobileParty = ((defenderParty.IsMobile && defenderParty != PartyBase.MainParty && defenderParty.MobileParty != MobileParty.MainParty.AttachedTo) ? defenderParty.MobileParty : ((attackerParty.IsMobile && attackerParty != PartyBase.MainParty && attackerParty.MobileParty != MobileParty.MainParty.AttachedTo) ? attackerParty.MobileParty : null));
			if (this._defenderParty.IsSettlement)
			{
				this.EncounterSettlementAux = defenderParty.Settlement;
			}
			else if (this._attackerParty.IsSettlement)
			{
				this.EncounterSettlementAux = this._attackerParty.Settlement;
			}
			else if (mobileParty.BesiegerCamp != null)
			{
				this.EncounterSettlementAux = mobileParty.BesiegerCamp.SiegeEvent.BesiegedSettlement;
			}
			PartyBase partyBase;
			if (mobileParty == null)
			{
				Settlement encounterSettlementAux = this.EncounterSettlementAux;
				partyBase = ((encounterSettlementAux != null) ? encounterSettlementAux.Party : null);
			}
			else
			{
				partyBase = mobileParty.Party;
			}
			this._encounteredParty = partyBase;
			if (MapEvent.PlayerMapEvent != null)
			{
				this.PlayerSide = MapEvent.PlayerMapEvent.PlayerSide;
			}
			else if (defenderParty == PartyBase.MainParty || (defenderParty.MobileParty != null && defenderParty.MobileParty == MobileParty.MainParty.AttachedTo) || (defenderParty.IsSettlement && (defenderParty.Settlement.MapFaction == MobileParty.MainParty.MapFaction || MobileParty.MainParty.CurrentSettlement == defenderParty.Settlement)))
			{
				this.PlayerSide = BattleSideEnum.Defender;
			}
			else
			{
				this.PlayerSide = BattleSideEnum.Attacker;
			}
			this.OpponentSide = this.PlayerSide.GetOppositeSide();
			if (!this._encounteredParty.IsSettlement)
			{
				MobileParty.MainParty.Ai.SetMoveModeHold();
			}
		}

		internal void OnPartyJoinEncounter(MobileParty newParty)
		{
			if (PlayerEncounter.Battle != null)
			{
				if (PlayerEncounter.Battle.CanPartyJoinBattle(PartyBase.MainParty, PartyBase.MainParty.Side))
				{
					newParty.Party.MapEventSide = PartyBase.MainParty.MapEventSide;
					return;
				}
				if (newParty == MobileParty.MainParty && PlayerEncounter.Battle.IsRaid && PlayerEncounter.Battle.AttackerSide.LeaderParty != MobileParty.MainParty.Party && PlayerEncounter.Battle.DefenderSide.TroopCount == 0)
				{
					return;
				}
				MobileParty.MainParty.Ai.SetMoveModeHold();
				string newPartyJoinMenu = Campaign.Current.Models.EncounterGameMenuModel.GetNewPartyJoinMenu(newParty);
				if (PlayerEncounter.Battle.CanPartyJoinBattle(PartyBase.MainParty, PartyBase.MainParty.OpponentSide))
				{
					newParty.Party.MapEventSide = PartyBase.MainParty.MapEventSide.OtherSide;
				}
				if (!string.IsNullOrEmpty(newPartyJoinMenu))
				{
					GameMenu.SwitchToMenu(newPartyJoinMenu);
				}
			}
		}

		private void CheckNearbyPartiesToJoinPlayerMapEvent()
		{
			if (this._mapEvent == null || this._mapEvent.IsRaid || this._mapEvent.IsSiegeAssault || this._mapEvent.IsForcingSupplies || this._mapEvent.IsForcingVolunteers)
			{
				return;
			}
			if (this._mapEvent.MapEventSettlement != null && this._mapEvent.MapEventSettlement.IsHideout)
			{
				return;
			}
			List<MobileParty> list = new List<MobileParty>();
			List<MobileParty> list2 = new List<MobileParty>();
			foreach (MapEventParty mapEventParty in this._mapEvent.PartiesOnSide(this.PlayerSide))
			{
				if (mapEventParty.Party.IsMobile)
				{
					list.Add(mapEventParty.Party.MobileParty);
				}
			}
			foreach (MapEventParty mapEventParty2 in this._mapEvent.PartiesOnSide(this.PlayerSide.GetOppositeSide()))
			{
				if (mapEventParty2.Party.IsMobile)
				{
					list2.Add(mapEventParty2.Party.MobileParty);
				}
			}
			PlayerEncounter.Current.FindNonAttachedNpcPartiesWhoWillJoinEvent(ref list, ref list2);
			foreach (MobileParty mobileParty in list)
			{
				this._mapEvent.GetMapEventSide(this.PlayerSide).AddNearbyPartyToPlayerMapEvent(mobileParty);
			}
			foreach (MobileParty mobileParty2 in list2)
			{
				this._mapEvent.GetMapEventSide(this.PlayerSide.GetOppositeSide()).AddNearbyPartyToPlayerMapEvent(mobileParty2);
			}
		}

		private static TerrainType GetTerrainByCount(List<TerrainType> terrainTypeSamples, TerrainType currentPositionTerrainType)
		{
			for (int i = 0; i < terrainTypeSamples.Count; i++)
			{
				if (terrainTypeSamples[i] == TerrainType.Snow)
				{
					terrainTypeSamples[i] = TerrainType.Plain;
				}
			}
			if (currentPositionTerrainType == TerrainType.Plain || currentPositionTerrainType == TerrainType.Desert || currentPositionTerrainType == TerrainType.Swamp || currentPositionTerrainType == TerrainType.Steppe)
			{
				int num = (int)((float)terrainTypeSamples.Count * 0.33f);
				for (int j = 0; j < num; j++)
				{
					terrainTypeSamples.Add(currentPositionTerrainType);
				}
			}
			Dictionary<TerrainType, int> dictionary = new Dictionary<TerrainType, int>();
			foreach (TerrainType terrainType in terrainTypeSamples)
			{
				if (!dictionary.ContainsKey(terrainType))
				{
					dictionary.Add(terrainType, 1);
				}
				else
				{
					Dictionary<TerrainType, int> dictionary2 = dictionary;
					TerrainType terrainType2 = terrainType;
					int num2 = dictionary2[terrainType2];
					dictionary2[terrainType2] = num2 + 1;
				}
			}
			KeyValuePair<TerrainType, int> keyValuePair = new KeyValuePair<TerrainType, int>(TerrainType.Plain, 0);
			foreach (KeyValuePair<TerrainType, int> keyValuePair2 in dictionary)
			{
				if ((keyValuePair2.Key == TerrainType.Plain || keyValuePair2.Key == TerrainType.Desert || keyValuePair2.Key == TerrainType.Swamp || keyValuePair2.Key == TerrainType.Steppe) && keyValuePair2.Value > keyValuePair.Value)
				{
					keyValuePair = keyValuePair2;
				}
			}
			return keyValuePair.Key;
		}

		private static List<TerrainType> GetSceneProperties(List<TerrainType> terrainTypeSamples, int forestCount, out ForestDensity forestDensity)
		{
			forestDensity = ForestDensity.None;
			float num = (float)forestCount / (float)terrainTypeSamples.Count;
			if (num > 0.1f && num < 0.5f)
			{
				forestDensity = ForestDensity.Low;
			}
			else if (num >= 0.5f)
			{
				forestDensity = ForestDensity.High;
			}
			List<TerrainType> list = new List<TerrainType>();
			foreach (TerrainType terrainType in terrainTypeSamples)
			{
				if (!list.Contains(terrainType))
				{
					list.Add(terrainType);
				}
			}
			return list;
		}

		public static string GetBattleSceneForMapPatch(MapPatchData mapPatch)
		{
			MBList<SingleplayerBattleSceneData> mblist = GameSceneDataManager.Instance.SingleplayerBattleScenes.Where((SingleplayerBattleSceneData scene) => scene.MapIndices.Contains(mapPatch.sceneIndex)).ToMBList<SingleplayerBattleSceneData>();
			string text;
			if (mblist.IsEmpty<SingleplayerBattleSceneData>())
			{
				Debug.FailedAssert("Battle scene for map patch with scene index " + mapPatch.sceneIndex + " does not exist. Picking a random scene", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "GetBattleSceneForMapPatch", 739);
				text = GameSceneDataManager.Instance.SingleplayerBattleScenes.GetRandomElement<SingleplayerBattleSceneData>().SceneID;
			}
			else if (mblist.Count > 1)
			{
				Debug.FailedAssert("Multiple battle scenes for map patch with scene index " + mapPatch.sceneIndex + " are defined. Picking a matching scene randomly", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "GetBattleSceneForMapPatch", 744);
				text = mblist.GetRandomElement<SingleplayerBattleSceneData>().SceneID;
			}
			else
			{
				text = mblist[0].SceneID;
			}
			return text;
		}

		public static string GetConversationSceneForMapPosition(Vec2 position2D)
		{
			TerrainType terrainType;
			List<TerrainType> environmentTerrainTypesCount = Campaign.Current.MapSceneWrapper.GetEnvironmentTerrainTypesCount(position2D, out terrainType);
			int num = 0;
			foreach (TerrainType terrainType2 in environmentTerrainTypesCount)
			{
				num += ((terrainType2 == TerrainType.Forest) ? 1 : 0);
			}
			TerrainType terrainByCount = PlayerEncounter.GetTerrainByCount(environmentTerrainTypesCount, terrainType);
			ForestDensity forestDensity;
			List<TerrainType> sceneProperties = PlayerEncounter.GetSceneProperties(environmentTerrainTypesCount, num, out forestDensity);
			int num2 = 0;
			Dictionary<ConversationSceneData, int> dictionary = new Dictionary<ConversationSceneData, int>();
			foreach (ConversationSceneData conversationSceneData in GameSceneDataManager.Instance.ConversationScenes)
			{
				if (conversationSceneData.Terrain == terrainByCount)
				{
					int num3 = 0;
					if ((forestDensity == ForestDensity.None && conversationSceneData.ForestDensity == ForestDensity.None) || (forestDensity != ForestDensity.None && conversationSceneData.ForestDensity > ForestDensity.None))
					{
						num3++;
					}
					int num4 = 2 - MathF.Abs(forestDensity - conversationSceneData.ForestDensity);
					num3 += num4;
					foreach (TerrainType terrainType3 in sceneProperties)
					{
						if (conversationSceneData.TerrainTypes.Contains(terrainType3))
						{
							num3 += 3;
						}
					}
					dictionary.Add(conversationSceneData, num3);
					if (num3 > num2)
					{
						num2 = num3;
					}
				}
			}
			MBList<ConversationSceneData> mblist = new MBList<ConversationSceneData>();
			foreach (KeyValuePair<ConversationSceneData, int> keyValuePair in dictionary)
			{
				if (keyValuePair.Value == num2)
				{
					mblist.Add(keyValuePair.Key);
				}
			}
			return ((mblist.Count > 0) ? mblist.GetRandomElement<ConversationSceneData>() : GameSceneDataManager.Instance.ConversationScenes.GetRandomElement<ConversationSceneData>()).SceneID;
		}

		private MapEvent StartBattleInternal()
		{
			if (this._mapEvent == null)
			{
				if (this.ForceRaid)
				{
					this._mapEvent = RaidEventComponent.CreateRaidEvent(this._attackerParty, this._defenderParty).MapEvent;
				}
				else if (this.ForceSallyOut)
				{
					this._mapEvent = Campaign.Current.MapEventManager.StartSallyOutMapEvent(this._attackerParty, this._defenderParty);
				}
				else if (this.ForceVolunteers)
				{
					this._mapEvent = ForceVolunteersEventComponent.CreateForceSuppliesEvent(this._attackerParty, this._defenderParty).MapEvent;
				}
				else if (this.ForceSupplies)
				{
					this._mapEvent = ForceSuppliesEventComponent.CreateForceSuppliesEvent(this._attackerParty, this._defenderParty).MapEvent;
				}
				else if (this._defenderParty.IsSettlement)
				{
					if (this._defenderParty.Settlement.IsFortification)
					{
						this._mapEvent = Campaign.Current.MapEventManager.StartSiegeMapEvent(this._attackerParty, this._defenderParty);
					}
					else if (this._defenderParty.Settlement.IsVillage)
					{
						this._mapEvent = RaidEventComponent.CreateRaidEvent(this._attackerParty, this._defenderParty).MapEvent;
					}
					else if (this._defenderParty.Settlement.IsHideout)
					{
						this._mapEvent = HideoutEventComponent.CreateHideoutEvent(this._attackerParty, this._defenderParty).MapEvent;
					}
					else
					{
						Debug.FailedAssert("Proper mapEvent type could not be set for the battle.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "StartBattleInternal", 864);
					}
				}
				else if (this._isSallyOutAmbush)
				{
					this._mapEvent = SiegeAmbushEventComponent.CreateSiegeAmbushEvent(this._attackerParty, this._defenderParty).MapEvent;
				}
				else if (this._attackerParty.IsMobile && this._attackerParty.MobileParty.CurrentSettlement != null && this._attackerParty.MobileParty.CurrentSettlement.SiegeEvent != null)
				{
					this._mapEvent = Campaign.Current.MapEventManager.StartSallyOutMapEvent(this._attackerParty, this._defenderParty);
				}
				else if (this._defenderParty.IsMobile && this._defenderParty.MobileParty.BesiegedSettlement != null)
				{
					this._mapEvent = Campaign.Current.MapEventManager.StartSiegeOutsideMapEvent(this._attackerParty, this._defenderParty);
				}
				else
				{
					this._mapEvent = FieldBattleEventComponent.CreateFieldBattleEvent(this._attackerParty, this._defenderParty).MapEvent;
				}
			}
			this.CheckNearbyPartiesToJoinPlayerMapEvent();
			return this._mapEvent;
		}

		public static MapEvent StartBattle()
		{
			return PlayerEncounter.Current.StartBattleInternal();
		}

		private void JoinBattleInternal(BattleSideEnum side)
		{
			this.PlayerSide = side;
			if (side == BattleSideEnum.Defender)
			{
				this.OpponentSide = BattleSideEnum.Attacker;
			}
			else if (side == BattleSideEnum.Attacker)
			{
				this.OpponentSide = BattleSideEnum.Defender;
			}
			if (PlayerEncounter.EncounteredBattle != null)
			{
				this._mapEvent = PlayerEncounter.EncounteredBattle;
				this._encounteredParty = ((this.PlayerSide == BattleSideEnum.Attacker) ? PlayerEncounter.EncounteredBattle.DefenderSide.LeaderParty : PlayerEncounter.EncounteredBattle.AttackerSide.LeaderParty);
				this.PartiesStrengthRatioBeforePlayerJoin = this.CalculateStrengthOfParties();
				PartyBase.MainParty.MapEventSide = PlayerEncounter.EncounteredBattle.GetMapEventSide(side);
				this.EncounterSettlementAux = this._mapEvent.MapEventSettlement;
				if (PlayerEncounter.EncounteredBattle.IsSiegeAssault && this.PlayerSide == BattleSideEnum.Attacker)
				{
					MobileParty.MainParty.BesiegerCamp = this._encounteredParty.SiegeEvent.BesiegerCamp;
				}
				this.IsJoinedBattle = true;
				this.CheckNearbyPartiesToJoinPlayerMapEvent();
				return;
			}
			PlayerEncounter.Finish(PlayerEncounter.InsideSettlement);
		}

		private float CalculateStrengthOfParties()
		{
			float num = 0f;
			float num2 = 0f;
			foreach (MapEventParty mapEventParty in this._mapEvent.DefenderSide.Parties)
			{
				num += mapEventParty.Party.TotalStrength;
			}
			foreach (MapEventParty mapEventParty2 in this._mapEvent.AttackerSide.Parties)
			{
				num2 += mapEventParty2.Party.TotalStrength;
			}
			return num / num2;
		}

		public static void JoinBattle(BattleSideEnum side)
		{
			PlayerEncounter.Current.JoinBattleInternal(side);
		}

		private void PlayerSurrenderInternal()
		{
			this._playerSurrender = true;
			if (PlayerEncounter.Battle == null)
			{
				PlayerEncounter.StartBattle();
			}
			this._mapEvent.DoSurrender(PartyBase.MainParty.Side);
			MobileParty.MainParty.BesiegerCamp = null;
		}

		private void EnemySurrenderInternal()
		{
			this._enemySurrender = true;
			this._mapEvent.DoSurrender(PartyBase.MainParty.OpponentSide);
		}

		public static void Start()
		{
			Campaign.Current.PlayerEncounter = new PlayerEncounter();
		}

		public static void ProtectPlayerSide(float hoursToProtect = 1f)
		{
			MobileParty.MainParty.TeleportPartyToSafePosition(3.3f, 3f);
			MobileParty.MainParty.IgnoreForHours(hoursToProtect);
		}

		public static void Finish(bool forcePlayerOutFromSettlement = true)
		{
			if (MobileParty.MainParty.Army == null || MobileParty.MainParty.Army.LeaderParty == PlayerEncounter.EncounteredMobileParty)
			{
				Campaign.Current.TimeControlMode = CampaignTimeControlMode.Stop;
			}
			if (Campaign.Current.CurrentMenuContext != null)
			{
				GameMenu.ExitToLast();
			}
			if (PlayerEncounter.Current != null)
			{
				bool flag = PlayerSiege.PlayerSiegeEvent != null && PlayerSiege.PlayerSide == BattleSideEnum.Attacker && MobileParty.MainParty.MapEvent != null && !MobileParty.MainParty.MapEvent.IsSiegeAssault && MobileParty.MainParty.MapEvent.HasWinner && MobileParty.MainParty.MapEvent.PlayerSide == BattleSideEnum.Defender && MobileParty.MainParty.BesiegedSettlement != null;
				if ((flag || PlayerEncounter.Current._isSiegeInterruptedByEnemyDefection) && Hero.MainHero.PartyBelongedToAsPrisoner == null && !PlayerEncounter.Current._leaveEncounter && PlayerEncounter.Current._encounteredParty.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					GameMenu.ActivateGameMenu("continue_siege_after_attack");
					if (PlayerEncounter.Current._isSiegeInterruptedByEnemyDefection)
					{
						PlayerEncounter.Current._isSiegeInterruptedByEnemyDefection = false;
					}
				}
				if (PlayerEncounter.Current._isPlayerEncounterInterruptedByPeace)
				{
					GameMenu.ActivateGameMenu("hostile_action_end_by_peace");
					PlayerEncounter.Current._isPlayerEncounterInterruptedByPeace = false;
				}
				if ((flag || PlayerEncounter.Current._isSiegeInterruptedByEnemyDefection) && Hero.MainHero.PartyBelongedToAsPrisoner != null && PlayerEncounter.Current._leaveEncounter)
				{
					MobileParty.MainParty.BesiegerCamp = null;
				}
				PlayerEncounter.Current.FirstInit = true;
				Settlement encounterSettlement = PlayerEncounter.EncounterSettlement;
				if (encounterSettlement != null)
				{
					encounterSettlement.OnPlayerEncounterFinish();
				}
				PlayerEncounter.Current.FinalizeBattle();
				PlayerEncounter.Current.FinishEncounterInternal();
				if (PlayerEncounter.CurrentBattleSimulation != null)
				{
					MapState mapState = Game.Current.GameStateManager.LastOrDefault<MapState>();
					if (mapState != null && mapState.IsSimulationActive)
					{
						mapState.EndBattleSimulation();
					}
					PlayerEncounter.Current.BattleSimulation = null;
				}
				if (PlayerEncounter.InsideSettlement && MobileParty.MainParty.AttachedTo == null && forcePlayerOutFromSettlement)
				{
					PlayerEncounter.LeaveSettlement();
				}
			}
			Campaign.Current.PlayerEncounter = null;
			Campaign.Current.LocationEncounter = null;
			MobileParty.MainParty.Ai.SetMoveModeHold();
		}

		private void FinishEncounterInternal()
		{
			if (this._encounteredParty != null && this._encounteredParty.IsMobile && MobileParty.MainParty.AttachedTo == null && FactionManager.IsAtWarAgainstFaction(this._encounteredParty.MapFaction, PartyBase.MainParty.MapFaction) && this._encounteredParty.MobileParty.IsActive)
			{
				MobileParty.MainParty.TeleportPartyToSafePosition(0.3f, 0.1f);
				this._encounteredParty.MobileParty.Ai.SetDoNotAttackMainParty(2);
			}
		}

		private void UpdateInternal()
		{
			this._mapEvent = MapEvent.PlayerMapEvent;
			if (PlayerEncounter.EncounteredPartySurrendered && this.EncounterState == PlayerEncounterState.Begin)
			{
				this.EncounterState = PlayerEncounterState.Wait;
			}
			this._stateHandled = false;
			while (!this._stateHandled)
			{
				if (PlayerEncounter.Current._leaveEncounter)
				{
					PlayerEncounter.Finish(true);
					this._stateHandled = true;
				}
				if (!this._stateHandled)
				{
					switch (this.EncounterState)
					{
					case PlayerEncounterState.Begin:
						this.DoBegin();
						break;
					case PlayerEncounterState.Wait:
						this.DoWait();
						break;
					case PlayerEncounterState.PrepareResults:
						this.DoPrepareResults();
						break;
					case PlayerEncounterState.ApplyResults:
						this.DoApplyResults();
						break;
					case PlayerEncounterState.PlayerVictory:
						this.DoPlayerVictory();
						break;
					case PlayerEncounterState.PlayerTotalDefeat:
						this.DoPlayerDefeat();
						break;
					case PlayerEncounterState.CaptureHeroes:
						this.DoCaptureHeroes();
						break;
					case PlayerEncounterState.FreeHeroes:
						this.DoFreeHeroes();
						break;
					case PlayerEncounterState.LootParty:
						this.DoLootParty();
						break;
					case PlayerEncounterState.LootInventory:
						this.DoLootInventory();
						break;
					case PlayerEncounterState.End:
						this.DoEnd();
						break;
					default:
						Debug.FailedAssert("[DEBUG]Invalid map event state: " + this._mapEventState, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "UpdateInternal", 1142);
						break;
					}
				}
			}
		}

		private void EndBattleByCheatInternal(bool playerWon)
		{
			if (playerWon)
			{
				foreach (MapEventParty mapEventParty in this._mapEvent.PartiesOnSide(this.OpponentSide))
				{
					for (int i = 0; i < mapEventParty.Party.MemberRoster.Count; i++)
					{
						int elementNumber = mapEventParty.Party.MemberRoster.GetElementNumber(i);
						int elementWoundedNumber = mapEventParty.Party.MemberRoster.GetElementWoundedNumber(i);
						int num = elementNumber - elementWoundedNumber;
						int num2 = elementWoundedNumber + MBRandom.RandomInt(num);
						num2 = ((num2 <= 0 && elementNumber >= 0) ? 1 : num2);
						mapEventParty.Party.MemberRoster.SetElementNumber(i, num2);
						mapEventParty.Party.MemberRoster.SetElementWoundedNumber(i, num2);
					}
				}
			}
		}

		public static void EndBattleByCheat(bool playerWon)
		{
			PlayerEncounter.Current.EndBattleByCheatInternal(playerWon);
		}

		public static void Update()
		{
			PlayerEncounter.Current.UpdateInternal();
		}

		private void DoBegin()
		{
			this.EncounterState = PlayerEncounterState.Wait;
			this._stateHandled = true;
		}

		public static void DoMeeting()
		{
			PlayerEncounter.Current.DoMeetingInternal();
		}

		public static void SetMeetingDone()
		{
			PlayerEncounter.Current._meetingDone = true;
		}

		private void DoMeetingInternal()
		{
			PartyBase partyBase = this._encounteredParty;
			if (partyBase.IsSettlement)
			{
				foreach (MapEventParty mapEventParty in MobileParty.MainParty.MapEvent.DefenderSide.Parties)
				{
					if (!mapEventParty.Party.IsSettlement)
					{
						partyBase = mapEventParty.Party;
						break;
					}
				}
			}
			this.EncounterState = PlayerEncounterState.Begin;
			this._stateHandled = true;
			if (PlayerEncounter.PlayerIsAttacker && this._defenderParty.IsMobile && this._defenderParty.MobileParty.Army != null && this._defenderParty.MobileParty.Army.LeaderParty == this._defenderParty.MobileParty && (this._defenderParty.SiegeEvent != null || (!this._defenderParty.MobileParty.MapFaction.IsAtWarWith(MobileParty.MainParty.MapFaction) && !this._defenderParty.MobileParty.Army.LeaderParty.AttachedParties.Contains(MobileParty.MainParty))))
			{
				GameMenu.SwitchToMenu("army_encounter");
				return;
			}
			Campaign.Current.CurrentConversationContext = ConversationContext.PartyEncounter;
			this._meetingDone = true;
			CharacterObject conversationCharacterPartyLeader = ConversationHelper.GetConversationCharacterPartyLeader(partyBase);
			ConversationCharacterData conversationCharacterData = new ConversationCharacterData(CharacterObject.PlayerCharacter, PartyBase.MainParty, true, false, false, false, false, false);
			ConversationCharacterData conversationCharacterData2 = new ConversationCharacterData(conversationCharacterPartyLeader, partyBase, true, false, false, false, false, false);
			CampaignMapConversation.OpenConversation(conversationCharacterData, conversationCharacterData2);
		}

		private void ContinueBattle()
		{
			Debug.Print("[PlayerEncounter.ContinueBattle Start]", 0, Debug.DebugColor.White, 17592186044416UL);
			MapEventSide mapEventSide = this._mapEvent.GetMapEventSide(this._mapEvent.PlayerSide);
			MapEventSide otherSide = mapEventSide.OtherSide;
			this._mapEvent.RecalculateStrengthOfSides();
			float num = this._mapEvent.StrengthOfSide[(int)mapEventSide.MissionSide];
			float num2 = this._mapEvent.StrengthOfSide[(int)otherSide.MissionSide];
			float num3 = num / (num + num2);
			Debug.Print("playerSideStrength: " + num, 0, Debug.DebugColor.White, 17592186044416UL);
			Debug.Print("otherSideStrength: " + num2, 0, Debug.DebugColor.White, 17592186044416UL);
			Debug.Print("playerSideStrengthRatio: " + num3, 0, Debug.DebugColor.White, 17592186044416UL);
			if (num3 >= 0.95f && otherSide.GetTotalHealthyHeroCountOfSide() <= 0)
			{
				Debug.Print("Player side wins according to the strength ratio.", 0, Debug.DebugColor.White, 17592186044416UL);
				MapEvent mapEvent = this._mapEvent;
				if (mapEvent != null)
				{
					mapEvent.SetOverrideWinner(this._mapEvent.PlayerSide);
				}
				PlayerEncounter.EnemySurrender = true;
				this.EncounterState = PlayerEncounterState.PrepareResults;
			}
			else if (num3 < 0.05f && mapEventSide.GetTotalHealthyHeroCountOfSide() <= 0)
			{
				Debug.Print("Other side wins according to the strength ratio.", 0, Debug.DebugColor.White, 17592186044416UL);
				MapEvent mapEvent2 = this._mapEvent;
				if (mapEvent2 != null)
				{
					mapEvent2.SetOverrideWinner(otherSide.MissionSide);
				}
				this.EncounterState = PlayerEncounterState.PrepareResults;
			}
			else
			{
				Debug.Print("Battle continues.", 0, Debug.DebugColor.White, 17592186044416UL);
				Debug.Print("Other side strength by party:", 0, Debug.DebugColor.White, 17592186044416UL);
				foreach (MapEventParty mapEventParty in otherSide.Parties)
				{
					Debug.Print(string.Concat(new object[]
					{
						"party: ",
						mapEventParty.Party.Id,
						": ",
						mapEventParty.Party.Name,
						", strength: ",
						mapEventParty.Party.TotalStrength,
						", healthy count: ",
						mapEventParty.Party.MemberRoster.TotalHealthyCount,
						", wounded count: ",
						mapEventParty.Party.MemberRoster.TotalWounded
					}), 0, Debug.DebugColor.White, 17592186044416UL);
				}
				this._mapEvent.AttackerSide.CommitXpGains();
				this._mapEvent.DefenderSide.CommitXpGains();
				this._mapEvent.ApplyRenownAndInfluenceChanges();
				this._mapEvent.SetOverrideWinner(BattleSideEnum.None);
				if (this._mapEvent.IsSiegeAssault && otherSide == this._mapEvent.AttackerSide)
				{
					CampaignBattleResult campaignBattleResult = this._campaignBattleResult;
					if (campaignBattleResult != null && campaignBattleResult.EnemyRetreated)
					{
						List<MapEventParty> list = this._mapEvent.AttackerSide.Parties.ToList<MapEventParty>();
						this._mapEvent.FinishBattleAndKeepSiegeEvent();
						this._mapEvent = null;
						foreach (MapEventParty mapEventParty2 in list)
						{
							mapEventParty2.Party.SetVisualAsDirty();
							if (mapEventParty2.Party.IsMobile)
							{
								mapEventParty2.Party.MobileParty.Ai.SetMoveBesiegeSettlement(Settlement.CurrentSettlement);
								mapEventParty2.Party.MobileParty.Ai.RecalculateShortTermAi();
							}
						}
						GameMenu.ActivateGameMenu("menu_siege_strategies");
					}
				}
				this._campaignBattleResult = null;
				this._stateHandled = true;
			}
			Debug.Print("[PlayerEncounter.ContinueBattle End]", 0, Debug.DebugColor.White, 17592186044416UL);
		}

		private void DoWait()
		{
			MBTextManager.SetTextVariable("PARTY", MapEvent.PlayerMapEvent.GetLeaderParty(PartyBase.MainParty.OpponentSide).Name, false);
			if (!PlayerEncounter.EncounteredPartySurrendered)
			{
				MBTextManager.SetTextVariable("ENCOUNTER_TEXT", GameTexts.FindText("str_you_have_encountered_PARTY", null), true);
			}
			else
			{
				MBTextManager.SetTextVariable("ENCOUNTER_TEXT", GameTexts.FindText("str_you_have_encountered_PARTY_they_surrendered", null), true);
			}
			if (this.CheckIfBattleShouldContinueAfterBattleMission())
			{
				this.ContinueBattle();
				return;
			}
			if (this._mapEvent != null && this._mapEvent.IsSiegeAssault)
			{
				this._mapEvent.CheckIfOneSideHasLost();
				this._campaignBattleResult = CampaignBattleResult.GetResult(this._mapEvent.BattleState, false);
			}
			if (this._campaignBattleResult != null && this._campaignBattleResult.BattleResolved)
			{
				if (this._campaignBattleResult.PlayerVictory)
				{
					MapEvent mapEvent = this._mapEvent;
					if (mapEvent != null)
					{
						mapEvent.SetOverrideWinner(PartyBase.MainParty.Side);
					}
				}
				else
				{
					bool flag = true;
					if (this._mapEvent != null && this._mapEvent.IsHideoutBattle)
					{
						this._mapEvent.MapEventSettlement.Hideout.UpdateNextPossibleAttackTime();
						if (this._mapEvent.GetMapEventSide(this.PlayerSide).RecalculateMemberCountOfSide() > 0)
						{
							flag = false;
						}
					}
					if (flag)
					{
						MapEvent mapEvent2 = this._mapEvent;
						if (mapEvent2 != null)
						{
							mapEvent2.SetOverrideWinner(PartyBase.MainParty.OpponentSide);
						}
					}
				}
				this.EncounterState = PlayerEncounterState.PrepareResults;
				return;
			}
			if (this.BattleSimulation != null && (PlayerEncounter.BattleState == BattleState.AttackerVictory || PlayerEncounter.BattleState == BattleState.DefenderVictory))
			{
				if (this._mapEvent.WinningSide == this.PlayerSide)
				{
					PlayerEncounter.EnemySurrender = true;
				}
				else
				{
					bool totalManCount = MobileParty.MainParty.MemberRoster.TotalManCount != 0;
					int totalWounded = MobileParty.MainParty.MemberRoster.TotalWounded;
					if ((totalManCount ? 1 : 0) - totalWounded == 0)
					{
						PlayerEncounter.PlayerSurrender = true;
					}
				}
				this.EncounterState = PlayerEncounterState.PrepareResults;
				return;
			}
			if (this.BattleSimulation != null && this.BattleSimulation.IsSimulationFinished)
			{
				MapEvent mapEvent3 = this._mapEvent;
				if (((mapEvent3 != null) ? mapEvent3.MapEventSettlement : null) != null && PlayerEncounter.BattleState == BattleState.None && this._mapEvent.IsSiegeAssault && PlayerSiege.PlayerSiegeEvent != null)
				{
					this._stateHandled = true;
					PlayerSiege.PlayerSiegeEvent.BreakSiegeEngine(PlayerSiege.PlayerSiegeEvent.GetSiegeEventSide(this._mapEvent.PlayerSide), DefaultSiegeEngineTypes.Preparations);
					return;
				}
			}
			if (this._mapEvent != null && (!this._mapEvent.IsRaid || PlayerEncounter.PlayerSurrender) && this._mapEvent.HasWinner)
			{
				this.EncounterState = PlayerEncounterState.PrepareResults;
				return;
			}
			this._stateHandled = true;
			if (this.IsJoinedBattle && Campaign.Current.CurrentMenuContext != null && Campaign.Current.CurrentMenuContext.GameMenu.StringId == "join_encounter")
			{
				PlayerEncounter.LeaveBattle();
			}
			if (this._mapEvent != null && this._mapEvent.IsHideoutBattle)
			{
				this._mapEvent.MapEventSettlement.Hideout.UpdateNextPossibleAttackTime();
			}
		}

		public static bool CheckIfLeadingAvaliable()
		{
			bool flag = Hero.MainHero.PartyBelongedTo != null && !Hero.MainHero.IsWounded;
			bool flag2 = Hero.MainHero.PartyBelongedTo != null && Hero.MainHero.PartyBelongedTo.Army != null && Hero.MainHero.PartyBelongedTo.Army.ArmyOwner != Hero.MainHero;
			bool flag3 = false;
			foreach (MapEventParty mapEventParty in MobileParty.MainParty.MapEvent.PartiesOnSide(MobileParty.MainParty.MapEvent.PlayerSide))
			{
				if (mapEventParty.Party != MobileParty.MainParty.Party && mapEventParty.Party.LeaderHero != null && mapEventParty.Party.LeaderHero.Clan.Renown > Clan.PlayerClan.Renown)
				{
					flag3 = true;
					break;
				}
			}
			return flag && (flag2 || flag3);
		}

		public static Hero GetLeadingHero()
		{
			if (Hero.MainHero.PartyBelongedTo != null && Hero.MainHero.PartyBelongedTo.Army != null)
			{
				return MobileParty.MainParty.Army.ArmyOwner;
			}
			foreach (MapEventParty mapEventParty in MobileParty.MainParty.MapEvent.PartiesOnSide(MobileParty.MainParty.MapEvent.PlayerSide))
			{
				if (mapEventParty.Party != MobileParty.MainParty.Party && mapEventParty.Party.LeaderHero != null && mapEventParty.Party.LeaderHero.Clan.Renown > Clan.PlayerClan.Renown)
				{
					return mapEventParty.Party.LeaderHero;
				}
			}
			return Hero.MainHero;
		}

		private void DoPrepareResults()
		{
			this._mapEvent.CalculateBattleResults(false);
			this.EncounterState = PlayerEncounterState.ApplyResults;
		}

		public static void SetPlayerVictorious()
		{
			PlayerEncounter.Current.SetPlayerVictoriousInternal();
		}

		public void SetIsSallyOutAmbush(bool value)
		{
			if (PlayerEncounter.Current._isSallyOutAmbush && !value)
			{
				this._campaignBattleResult = null;
			}
			PlayerEncounter.Current._isSallyOutAmbush = value;
		}

		public void SetPlayerSiegeInterruptedByEnemyDefection()
		{
			PlayerEncounter.Current._isSiegeInterruptedByEnemyDefection = true;
		}

		public void SetPlayerEncounterInterruptedByPeace()
		{
			PlayerEncounter.Current._isPlayerEncounterInterruptedByPeace = true;
			if (this._mapEvent != null)
			{
				this._mapEvent.DiplomaticallyFinished = true;
			}
		}

		public void ResetPlayerEncounterInterruptedByPeace()
		{
			PlayerEncounter.Current._isPlayerEncounterInterruptedByPeace = false;
		}

		private void SetPlayerVictoriousInternal()
		{
			if (this.PlayerSide == BattleSideEnum.Attacker || this.PlayerSide == BattleSideEnum.Defender)
			{
				this._mapEvent.SetOverrideWinner(this.PlayerSide);
			}
		}

		public static void SetPlayerSiegeContinueWithDefenderPullBack()
		{
			PlayerEncounter.Current._mapEvent.SetDefenderPulledBack();
		}

		private void DoApplyResults()
		{
			CampaignEventDispatcher.Instance.OnPlayerBattleEnd(this._mapEvent);
			this._mapEvent.ApplyBattleResults();
			if (this._mapEvent.WinningSide == PartyBase.MainParty.Side)
			{
				this.EncounterState = PlayerEncounterState.PlayerVictory;
				return;
			}
			if (this._mapEvent.DefeatedSide == PartyBase.MainParty.Side)
			{
				this.EncounterState = PlayerEncounterState.PlayerTotalDefeat;
				return;
			}
			this.EncounterState = PlayerEncounterState.End;
		}

		public static void StartAttackMission()
		{
			PlayerEncounter.Current._campaignBattleResult = new CampaignBattleResult();
		}

		private void DoPlayerVictory()
		{
			if (this._helpedHeroes == null)
			{
				this._helpedHeroes = new List<Hero>();
				foreach (PartyBase partyBase in MapEvent.PlayerMapEvent.InvolvedParties)
				{
					if (partyBase != PartyBase.MainParty && partyBase.Side == PartyBase.MainParty.Side && partyBase.Owner != null && partyBase.Owner != Hero.MainHero && partyBase.LeaderHero != null && (MapEvent.PlayerMapEvent.AttackerSide.LeaderParty == partyBase || MapEvent.PlayerMapEvent.DefenderSide.LeaderParty == partyBase) && partyBase.MobileParty != null && (partyBase.MobileParty.Army == null || partyBase.MobileParty.Army != MobileParty.MainParty.Army) && Campaign.Current.Models.BattleRewardModel.GetPlayerGainedRelationAmount(MapEvent.PlayerMapEvent, partyBase.LeaderHero) > 0)
					{
						this._helpedHeroes.Add(partyBase.LeaderHero);
					}
				}
				return;
			}
			if (this._helpedHeroes.Count > 0)
			{
				if (this._helpedHeroes[0].DeathMark == KillCharacterAction.KillCharacterActionDetail.None)
				{
					Campaign.Current.CurrentConversationContext = ConversationContext.PartyEncounter;
					ConversationCharacterData conversationCharacterData = new ConversationCharacterData(CharacterObject.PlayerCharacter, PartyBase.MainParty, false, false, false, false, false, false);
					ConversationCharacterData conversationCharacterData2 = new ConversationCharacterData(this._helpedHeroes[0].CharacterObject, this._helpedHeroes[0].PartyBelongedTo.Party, false, false, false, false, false, false);
					CampaignMapConversation.OpenConversation(conversationCharacterData, conversationCharacterData2);
				}
				this._helpedHeroes.RemoveAt(0);
				this._stateHandled = true;
				return;
			}
			this.EncounterState = PlayerEncounterState.CaptureHeroes;
		}

		private void DoPlayerDefeat()
		{
			bool playerSurrender = PlayerEncounter.PlayerSurrender;
			PlayerEncounter.Finish(true);
			if (MobileParty.MainParty.BesiegerCamp != null)
			{
				if (MobileParty.MainParty.BesiegerCamp != null)
				{
					MobileParty.MainParty.BesiegerCamp = null;
				}
				else
				{
					PlayerSiege.ClosePlayerSiege();
				}
			}
			if (Hero.MainHero.DeathMark != KillCharacterAction.KillCharacterActionDetail.DiedInBattle)
			{
				GameMenu.ActivateGameMenu(playerSurrender ? "taken_prisoner" : "defeated_and_taken_prisoner");
			}
			this._stateHandled = true;
		}

		private void DoCaptureHeroes()
		{
			TroopRoster prisonerRosterReceivingLootShare = this._mapEvent.GetPrisonerRosterReceivingLootShare(PartyBase.MainParty);
			if (this._capturedHeroes == null)
			{
				this._capturedHeroes = prisonerRosterReceivingLootShare.RemoveIf((TroopRosterElement lordElement) => lordElement.Character.IsHero).ToList<TroopRosterElement>();
			}
			if (this._capturedHeroes.Count > 0)
			{
				TroopRosterElement troopRosterElement = this._capturedHeroes[this._capturedHeroes.Count - 1];
				Campaign.Current.CurrentConversationContext = ConversationContext.CapturedLord;
				ConversationCharacterData conversationCharacterData = new ConversationCharacterData(CharacterObject.PlayerCharacter, PartyBase.MainParty, false, false, false, false, false, false);
				ConversationCharacterData conversationCharacterData2 = new ConversationCharacterData(troopRosterElement.Character, null, true, true, true, false, false, false);
				if (PlayerEncounter.InsideSettlement && Settlement.CurrentSettlement.IsHideout)
				{
					CampaignMission.OpenConversationMission(conversationCharacterData, conversationCharacterData2, "", "");
				}
				else
				{
					CampaignMapConversation.OpenConversation(conversationCharacterData, conversationCharacterData2);
				}
				Campaign.Current.ConversationManager.ConversationEndOneShot += delegate
				{
					this._capturedHeroes.RemoveRange(this._capturedHeroes.Count - 1, 1);
				};
				this._stateHandled = true;
				return;
			}
			this.EncounterState = PlayerEncounterState.FreeHeroes;
		}

		private void DoFreeHeroes()
		{
			TroopRoster memberRosterReceivingLootShare = this._mapEvent.GetMemberRosterReceivingLootShare(PartyBase.MainParty);
			if (this._freedHeroes == null)
			{
				this._freedHeroes = memberRosterReceivingLootShare.RemoveIf((TroopRosterElement lordElement) => lordElement.Character.IsHero).ToList<TroopRosterElement>();
			}
			if (this._freedHeroes.Count > 0)
			{
				TroopRosterElement troopRosterElement = this._freedHeroes[this._freedHeroes.Count - 1];
				Campaign.Current.CurrentConversationContext = ConversationContext.FreedHero;
				ConversationCharacterData conversationCharacterData = new ConversationCharacterData(CharacterObject.PlayerCharacter, PartyBase.MainParty, false, false, false, false, false, false);
				ConversationCharacterData conversationCharacterData2 = new ConversationCharacterData(troopRosterElement.Character, null, true, true, false, false, false, false);
				CampaignMapConversation.OpenConversation(conversationCharacterData, conversationCharacterData2);
				Campaign.Current.ConversationManager.ConversationEndOneShot += delegate
				{
					this._freedHeroes.RemoveRange(this._freedHeroes.Count - 1, 1);
				};
				this._stateHandled = true;
				return;
			}
			this.EncounterState = PlayerEncounterState.LootParty;
		}

		private void DoLootInventory()
		{
			ItemRoster itemRosterReceivingLootShare = this._mapEvent.GetItemRosterReceivingLootShare(PartyBase.MainParty);
			if (itemRosterReceivingLootShare.Count > 0)
			{
				InventoryManager.OpenScreenAsLoot(new Dictionary<PartyBase, ItemRoster> { 
				{
					PartyBase.MainParty,
					itemRosterReceivingLootShare
				} });
				this._stateHandled = true;
			}
			this.EncounterState = PlayerEncounterState.End;
		}

		private void DoLootParty()
		{
			TroopRoster memberRosterReceivingLootShare = this._mapEvent.GetMemberRosterReceivingLootShare(PartyBase.MainParty);
			TroopRoster prisonerRosterReceivingLootShare = this._mapEvent.GetPrisonerRosterReceivingLootShare(PartyBase.MainParty);
			if (memberRosterReceivingLootShare.Count > 0 || prisonerRosterReceivingLootShare.Count > 0)
			{
				PartyScreenManager.OpenScreenAsLoot(memberRosterReceivingLootShare, prisonerRosterReceivingLootShare, TextObject.Empty, memberRosterReceivingLootShare.TotalManCount + prisonerRosterReceivingLootShare.TotalManCount, null);
				this._stateHandled = true;
			}
			this.EncounterState = PlayerEncounterState.LootInventory;
		}

		public static void SacrificeTroops(int num, out TroopRoster losses, out ItemRoster lostBaggage)
		{
			PlayerEncounter.Current.SacrificeTroopsImp(num, out losses, out lostBaggage);
		}

		private void SacrificeTroopsImp(int num, out TroopRoster losses, out ItemRoster lostBaggage)
		{
			losses = new TroopRoster(null);
			lostBaggage = new ItemRoster();
			this._mapEvent.GetMapEventSide(this.PlayerSide).MakeReadyForSimulation(null, -1);
			this.RemoveRandomTroops(num, losses);
			this.RemoveRandomItems(lostBaggage);
		}

		private void RemoveRandomItems(ItemRoster lostBaggage)
		{
			foreach (ItemRosterElement itemRosterElement in new ItemRoster(PartyBase.MainParty.ItemRoster))
			{
				if (!itemRosterElement.EquipmentElement.Item.NotMerchandise)
				{
					int num = MBRandom.RoundRandomized((float)itemRosterElement.Amount * 0.15f);
					PartyBase.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -num);
					lostBaggage.AddToCounts(itemRosterElement.EquipmentElement, num);
				}
			}
		}

		public void RemoveRandomTroops(int num, TroopRoster sacrifiedTroops)
		{
			int num2 = MobileParty.MainParty.Party.NumberOfRegularMembers;
			if (MobileParty.MainParty.Army != null)
			{
				foreach (MobileParty mobileParty in MobileParty.MainParty.Army.LeaderParty.AttachedParties)
				{
					num2 += mobileParty.Party.NumberOfRegularMembers;
				}
			}
			float num3 = (float)num / (float)num2;
			this.SacrifaceTroopsWithRatio(MobileParty.MainParty, num3, sacrifiedTroops);
			if (MobileParty.MainParty.Army != null)
			{
				foreach (MobileParty mobileParty2 in MobileParty.MainParty.Army.LeaderParty.AttachedParties)
				{
					this.SacrifaceTroopsWithRatio(mobileParty2, num3, sacrifiedTroops);
				}
			}
		}

		private void SacrifaceTroopsWithRatio(MobileParty mobileParty, float sacrifaceRatio, TroopRoster sacrifiedTroops)
		{
			int num = MBRandom.RoundRandomized((float)mobileParty.Party.NumberOfRegularMembers * sacrifaceRatio);
			for (int i = 0; i < num; i++)
			{
				float num2 = 100f;
				TroopRosterElement troopRosterElement = mobileParty.Party.MemberRoster.GetTroopRoster().FirstOrDefault<TroopRosterElement>();
				foreach (TroopRosterElement troopRosterElement2 in mobileParty.Party.MemberRoster.GetTroopRoster())
				{
					float num3 = (float)troopRosterElement2.Character.Level - ((troopRosterElement2.WoundedNumber > 0) ? 0.5f : 0f) - MBRandom.RandomFloat * 0.5f;
					if (!troopRosterElement2.Character.IsHero && num3 < num2 && troopRosterElement2.Number > 0)
					{
						num2 = num3;
						troopRosterElement = troopRosterElement2;
					}
				}
				mobileParty.MemberRoster.AddToCounts(troopRosterElement.Character, -1, false, (troopRosterElement.WoundedNumber > 0) ? (-1) : 0, 0, true, -1);
				sacrifiedTroops.AddToCounts(troopRosterElement.Character, 1, false, 0, 0, true, -1);
			}
		}

		private void DoEnd()
		{
			MapEvent mapEvent = this._mapEvent;
			object obj = mapEvent != null && mapEvent.IsSiegeAssault;
			bool isHideoutBattle = this._mapEvent.IsHideoutBattle;
			object obj2 = obj;
			bool flag = obj2 != null && MobileParty.MainParty.MapEvent != null && MobileParty.MainParty.MapEvent == this._mapEvent;
			bool flag2 = MobileParty.MainParty.MapEvent != null && this.PlayerSide == BattleSideEnum.Attacker;
			bool isRaid = this._mapEvent.IsRaid;
			bool isForcingVolunteers = this._mapEvent.IsForcingVolunteers;
			bool isForcingSupplies = this._mapEvent.IsForcingSupplies;
			bool flag3 = this.BattleSimulation != null && this._mapEvent.WinningSide != this.PlayerSide;
			Settlement mapEventSettlement = this._mapEvent.MapEventSettlement;
			BattleState battleState = this._mapEvent.BattleState;
			this._stateHandled = true;
			if (!flag3)
			{
				PlayerEncounter.Finish(true);
			}
			else
			{
				PlayerEncounter.Battle.ResetBattleResults();
			}
			if (obj2 != null)
			{
				if (mapEventSettlement != null)
				{
					if (flag)
					{
						if (flag2)
						{
							EncounterManager.StartSettlementEncounter((MobileParty.MainParty.Army != null) ? MobileParty.MainParty.Army.LeaderParty : MobileParty.MainParty, mapEventSettlement);
							GameMenu.SwitchToMenu("menu_settlement_taken");
							return;
						}
					}
					else if (PlayerEncounter.InsideSettlement)
					{
						PlayerEncounter.LeaveSettlement();
						return;
					}
				}
			}
			else if (isRaid || isForcingVolunteers || isForcingSupplies)
			{
				if ((!this._attackerParty.IsMobile || this._attackerParty.MobileParty.Army == null || this._attackerParty.MobileParty.Army.LeaderParty == this._attackerParty.MobileParty) && flag2 && this._attackerParty == MobileParty.MainParty.Party)
				{
					EncounterManager.StartSettlementEncounter(MobileParty.MainParty, mapEventSettlement);
					PlayerEncounter.Current.ForceSupplies = isForcingSupplies;
					PlayerEncounter.Current.ForceVolunteers = isForcingVolunteers;
					PlayerEncounter.Current.ForceRaid = isRaid;
					BeHostileAction.ApplyEncounterHostileAction(PartyBase.MainParty, Settlement.CurrentSettlement.Party);
					if (isForcingSupplies)
					{
						GameMenu.SwitchToMenu("force_supplies_village");
						return;
					}
					if (isForcingVolunteers)
					{
						GameMenu.SwitchToMenu("force_volunteers_village");
						return;
					}
					if (isRaid)
					{
						if (PlayerEncounter.InsideSettlement)
						{
							LeaveSettlementAction.ApplyForParty(MobileParty.MainParty);
						}
						PlayerEncounter.StartBattle();
						GameMenu.SwitchToMenu("raiding_village");
						PlayerEncounter.Current.ForceRaid = false;
						PlayerEncounter.Current.ForceVolunteers = false;
						PlayerEncounter.Current.ForceSupplies = false;
						return;
					}
				}
			}
			else if (isHideoutBattle)
			{
				if (mapEventSettlement != null)
				{
					if (battleState == BattleState.AttackerVictory)
					{
						if (mapEventSettlement.Parties.Count > 0)
						{
							foreach (MobileParty mobileParty in new List<MobileParty>(mapEventSettlement.Parties))
							{
								LeaveSettlementAction.ApplyForParty(mobileParty);
								mobileParty.Ai.SetDoNotAttackMainParty(3);
							}
						}
						mapEventSettlement.Hideout.IsSpotted = false;
						mapEventSettlement.IsVisible = false;
						return;
					}
					if (battleState == BattleState.None)
					{
						EncounterManager.StartSettlementEncounter(MobileParty.MainParty, mapEventSettlement);
						GameMenu.SwitchToMenu("hideout_after_defeated_and_saved");
						return;
					}
				}
			}
			else if (flag3)
			{
				this.EncounterState = PlayerEncounterState.Begin;
				GameMenu.SwitchToMenu("encounter");
			}
		}

		public bool CheckIfBattleShouldContinueAfterBattleMission()
		{
			if (this._doesBattleContinue || this._campaignBattleResult != null)
			{
				this._doesBattleContinue = this._mapEvent.CheckIfBattleShouldContinueAfterBattleMission(this._campaignBattleResult);
			}
			return this._doesBattleContinue;
		}

		public void FinalizeBattle()
		{
			if (this._mapEvent != null)
			{
				if (this._mapEvent.HasWinner || this._mapEvent.DiplomaticallyFinished || this._mapEvent.IsSiegeAmbush || (this._mapEvent.IsRaid && this._mapEvent.MapEventSettlement.SettlementHitPoints.ApproximatelyEqualsTo(0f, 1E-05f)))
				{
					MobileParty mobileParty = this._mapEvent.AttackerSide.LeaderParty.MobileParty;
					bool flag = this._mapEvent.IsRaid && this._mapEvent.BattleState == BattleState.AttackerVictory && !this._mapEvent.MapEventSettlement.SettlementHitPoints.ApproximatelyEqualsTo(0f, 1E-05f);
					Settlement mapEventSettlement = this._mapEvent.MapEventSettlement;
					this._mapEvent.FinalizeEvent();
					this._mapEvent = null;
					if (mobileParty != MobileParty.MainParty && flag)
					{
						mobileParty.Ai.SetMoveRaidSettlement(mapEventSettlement);
						mobileParty.Ai.RecalculateShortTermAi();
						return;
					}
				}
				else
				{
					PlayerEncounter.LeaveBattle();
				}
			}
		}

		public void FindNonAttachedNpcPartiesWhoWillJoinEvent(ref List<MobileParty> partiesToJoinPlayerSide, ref List<MobileParty> partiesToJoinEnemySide)
		{
			LocatableSearchData<MobileParty> locatableSearchData = MobileParty.StartFindingLocatablesAroundPosition(MobileParty.MainParty.Position2D, 4f);
			MobileParty mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
			List<MobileParty> list = new List<MobileParty>();
			List<MobileParty> list2 = new List<MobileParty>();
			while (mobileParty != null)
			{
				if (mobileParty != MobileParty.MainParty && mobileParty.MapEvent == null && mobileParty.SiegeEvent == null && mobileParty.CurrentSettlement == null && mobileParty.AttachedTo == null && (mobileParty.IsLordParty || mobileParty.IsBandit || mobileParty.ShouldJoinPlayerBattles))
				{
					if (!mobileParty.MapFaction.IsAtWarWith(MobileParty.MainParty.MapFaction) && mobileParty.MapFaction.IsAtWarWith(PlayerEncounter.EncounteredParty.MapFaction))
					{
						list.Add(mobileParty);
					}
					if (mobileParty.MapFaction.IsAtWarWith(MobileParty.MainParty.MapFaction) && !mobileParty.MapFaction.IsAtWarWith(PlayerEncounter.EncounteredParty.MapFaction))
					{
						list2.Add(mobileParty);
					}
				}
				mobileParty = MobileParty.FindNextLocatable(ref locatableSearchData);
			}
			if (!list2.AnyQ((MobileParty t) => t.ShouldBeIgnored))
			{
				if (!partiesToJoinEnemySide.AnyQ((MobileParty t) => t.ShouldBeIgnored))
				{
					goto IL_160;
				}
			}
			Debug.Print("Ally parties wont join player encounter since there is an ignored party in enemy side", 0, Debug.DebugColor.White, 17592186044416UL);
			list.Clear();
			IL_160:
			if (!list.AnyQ((MobileParty t) => t.ShouldBeIgnored))
			{
				if (!partiesToJoinPlayerSide.AnyQ((MobileParty t) => t != MobileParty.MainParty && t.ShouldBeIgnored))
				{
					goto IL_1CB;
				}
			}
			Debug.Print("Enemy parties wont join player encounter since there is an ignored party in ally side", 0, Debug.DebugColor.White, 17592186044416UL);
			list2.Clear();
			IL_1CB:
			partiesToJoinPlayerSide.AddRange(list.Except(partiesToJoinPlayerSide));
			partiesToJoinEnemySide.AddRange(list2.Except(partiesToJoinEnemySide));
		}

		public void FindAllNpcPartiesWhoWillJoinEvent(ref List<MobileParty> partiesToJoinPlayerSide, ref List<MobileParty> partiesToJoinEnemySide)
		{
			this.FindNonAttachedNpcPartiesWhoWillJoinEvent(ref partiesToJoinPlayerSide, ref partiesToJoinEnemySide);
			foreach (MobileParty mobileParty in partiesToJoinPlayerSide.ToList<MobileParty>())
			{
				partiesToJoinPlayerSide.AddRange(mobileParty.AttachedParties.Except(partiesToJoinPlayerSide));
			}
			foreach (MobileParty mobileParty2 in partiesToJoinEnemySide.ToList<MobileParty>())
			{
				partiesToJoinEnemySide.AddRange(mobileParty2.AttachedParties.Except(partiesToJoinEnemySide));
			}
		}

		public static void EnterSettlement()
		{
			Settlement encounterSettlement = PlayerEncounter.EncounterSettlement;
			PlayerEncounter.CreateLocationEncounter(encounterSettlement);
			EnterSettlementAction.ApplyForParty(MobileParty.MainParty, encounterSettlement);
		}

		private static void CreateLocationEncounter(Settlement settlement)
		{
			if (settlement.IsTown)
			{
				PlayerEncounter.LocationEncounter = new TownEncounter(settlement);
				return;
			}
			if (settlement.IsVillage)
			{
				PlayerEncounter.LocationEncounter = new VillageEncounter(settlement);
				return;
			}
			if (settlement.IsCastle)
			{
				PlayerEncounter.LocationEncounter = new CastleEncounter(settlement);
			}
		}

		public static void LeaveBattle()
		{
			MapEvent playerMapEvent = MapEvent.PlayerMapEvent;
			bool flag = false;
			if (playerMapEvent != null)
			{
				int numberOfInvolvedMen = playerMapEvent.GetNumberOfInvolvedMen(PartyBase.MainParty.Side);
				Army playerArmy = MobileParty.MainParty.Army;
				if ((PartyBase.MainParty.MapEventSide.LeaderParty != PartyBase.MainParty && PartyBase.MainParty.MapEventSide.Parties.Any(delegate(MapEventParty p)
				{
					if (!p.IsNpcParty)
					{
						return false;
					}
					if (playerArmy != null)
					{
						MobileParty mobileParty = p.Party.MobileParty;
						return ((mobileParty != null) ? mobileParty.Army : null) != playerArmy;
					}
					return true;
				})) || (PartyBase.MainParty.MapEvent.IsSallyOut && Campaign.Current.Models.EncounterModel.GetLeaderOfMapEvent(PartyBase.MainParty.MapEvent, PartyBase.MainParty.MapEventSide.MissionSide) != Hero.MainHero))
				{
					PartyBase.MainParty.MapEventSide = null;
				}
				else
				{
					playerMapEvent.FinalizeEvent();
				}
				flag = numberOfInvolvedMen > PartyBase.MainParty.NumberOfHealthyMembers && playerMapEvent.AttackerSide.LeaderParty != PartyBase.MainParty && playerMapEvent.DefenderSide.LeaderParty != PartyBase.MainParty;
			}
			if (PlayerEncounter.CurrentBattleSimulation != null)
			{
				MapState mapState = Game.Current.GameStateManager.LastOrDefault<MapState>();
				if (mapState != null && mapState.IsSimulationActive)
				{
					mapState.EndBattleSimulation();
				}
				PlayerEncounter.Current.BattleSimulation = null;
				PlayerEncounter.Current._mapEvent.BattleObserver = null;
			}
			PlayerEncounter.Current.IsJoinedBattle = false;
			PlayerEncounter.Current._mapEvent = null;
			if (flag && !playerMapEvent.HasWinner)
			{
				MapEvent mapEvent = playerMapEvent;
				BattleSimulation battleSimulation = PlayerEncounter.Current.BattleSimulation;
				mapEvent.SimulateBattleSetup((battleSimulation != null) ? battleSimulation.SelectedTroops : null);
			}
		}

		public static void LeaveSettlement()
		{
			LeaveSettlementAction.ApplyForParty(MobileParty.MainParty);
			PlayerEncounter.LocationEncounter = null;
			PartyBase.MainParty.SetVisualAsDirty();
		}

		public static void InitSimulation(FlattenedTroopRoster selectedTroopsForPlayerSide, FlattenedTroopRoster selectedTroopsForOtherSide)
		{
			if (PlayerEncounter.Current == null)
			{
				return;
			}
			PlayerEncounter.Current.BattleSimulation = new BattleSimulation(selectedTroopsForPlayerSide, selectedTroopsForOtherSide);
		}

		public void InterruptEncounter(string encounterInterrupedType)
		{
			GameState activeState = Game.Current.GameStateManager.ActiveState;
			if (MapEvent.PlayerMapEvent != null)
			{
				PlayerEncounter.LeaveBattle();
			}
			GameMenu.ActivateGameMenu(encounterInterrupedType);
		}

		public static void StartSiegeAmbushMission()
		{
			Settlement mapEventSettlement = PlayerEncounter.Battle.MapEventSettlement;
			SiegeEvent playerSiegeEvent = PlayerSiege.PlayerSiegeEvent;
			Settlement.SiegeState currentSiegeState = mapEventSettlement.CurrentSiegeState;
			if (currentSiegeState == Settlement.SiegeState.OnTheWalls)
			{
				List<MissionSiegeWeapon> preparedAndActiveSiegeEngines = playerSiegeEvent.GetPreparedAndActiveSiegeEngines(playerSiegeEvent.GetSiegeEventSide(BattleSideEnum.Attacker));
				List<MissionSiegeWeapon> preparedAndActiveSiegeEngines2 = playerSiegeEvent.GetPreparedAndActiveSiegeEngines(playerSiegeEvent.GetSiegeEventSide(BattleSideEnum.Defender));
				bool flag = preparedAndActiveSiegeEngines.Exists((MissionSiegeWeapon data) => data.Type == DefaultSiegeEngineTypes.SiegeTower);
				int wallLevel = mapEventSettlement.Town.GetWallLevel();
				CampaignMission.OpenSiegeMissionWithDeployment(mapEventSettlement.LocationComplex.GetLocationWithId("center").GetSceneName(wallLevel), mapEventSettlement.SettlementWallSectionHitPointsRatioList.ToArray(), flag, preparedAndActiveSiegeEngines, preparedAndActiveSiegeEngines2, PlayerEncounter.Current.PlayerSide == BattleSideEnum.Attacker, wallLevel, true, false);
				return;
			}
			if (currentSiegeState - Settlement.SiegeState.InTheLordsHall > 1)
			{
				return;
			}
			Debug.FailedAssert("Siege state is invalid!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "StartSiegeAmbushMission", 2250);
		}

		public static void StartVillageBattleMission()
		{
			Settlement mapEventSettlement = PlayerEncounter.Battle.MapEventSettlement;
			int num = (mapEventSettlement.IsTown ? mapEventSettlement.Town.GetWallLevel() : 1);
			CampaignMission.OpenBattleMission(mapEventSettlement.LocationComplex.GetScene("village_center", num), true);
		}

		public static void StartCombatMissionWithDialogueInTownCenter(CharacterObject characterToTalkTo)
		{
			int wallLevel = Settlement.CurrentSettlement.Town.GetWallLevel();
			CampaignMission.OpenCombatMissionWithDialogue(Settlement.CurrentSettlement.LocationComplex.GetScene("center", wallLevel), characterToTalkTo, wallLevel);
		}

		public static void StartHostileAction()
		{
			PlayerEncounter.Current.StartHostileActionInternal();
		}

		private void StartHostileActionInternal()
		{
			if (this._mapEvent != null)
			{
				if (PlayerEncounter.InsideSettlement)
				{
					PlayerEncounter.LeaveSettlement();
				}
				PlayerEncounter.Update();
			}
		}

		public void FinishRaid()
		{
			Settlement mapEventSettlement = PlayerEncounter.Battle.MapEventSettlement;
			bool diplomaticallyFinished = PlayerEncounter.Battle.DiplomaticallyFinished;
			PartyBase leaderParty = PlayerEncounter.Battle.AttackerSide.LeaderParty;
			PlayerEncounter.Finish(true);
			if (!diplomaticallyFinished)
			{
				if (leaderParty == MobileParty.MainParty.Party)
				{
					GameMenu.ActivateGameMenu("village_player_raid_ended");
					return;
				}
				GameMenu.ActivateGameMenu("village_raid_ended_leaded_by_someone_else");
			}
		}

		public static void GetBattleRewards(out float renownChange, out float influenceChange, out float moraleChange, out float goldChange, out float playerEarnedLootPercentage, ref ExplainedNumber renownExplainedNumber, ref ExplainedNumber influenceExplainedNumber, ref ExplainedNumber moraleExplainedNumber)
		{
			if (PlayerEncounter.Current == null)
			{
				renownChange = 0f;
				influenceChange = 0f;
				moraleChange = 0f;
				goldChange = 0f;
				playerEarnedLootPercentage = 0f;
				return;
			}
			PlayerEncounter.Current.GetBattleRewardsInternal(out renownChange, out influenceChange, out moraleChange, out goldChange, out playerEarnedLootPercentage, ref renownExplainedNumber, ref influenceExplainedNumber, ref moraleExplainedNumber);
		}

		private void GetBattleRewardsInternal(out float renownChange, out float influenceChange, out float moraleChange, out float goldChange, out float playerEarnedLootPercentage, ref ExplainedNumber renownExplainedNumber, ref ExplainedNumber influenceExplainedNumber, ref ExplainedNumber moraleExplainedNumber)
		{
			MapEventResultExplainer battleResultExplainers = this._mapEvent.BattleResultExplainers;
			this._mapEvent.GetBattleRewards(PartyBase.MainParty, out renownChange, out influenceChange, out moraleChange, out goldChange, out playerEarnedLootPercentage);
			if (battleResultExplainers != null)
			{
				renownExplainedNumber = battleResultExplainers.RenownExplainedNumber;
				influenceExplainedNumber = battleResultExplainers.InfluenceExplainedNumber;
				moraleExplainedNumber = battleResultExplainers.MoraleExplainedNumber;
			}
		}

		public float GetPlayerStrengthRatioInEncounter()
		{
			List<MobileParty> list = new List<MobileParty> { MobileParty.MainParty };
			List<MobileParty> list2 = new List<MobileParty> { MobileParty.ConversationParty };
			this.FindAllNpcPartiesWhoWillJoinEvent(ref list, ref list2);
			float num = 0f;
			float num2 = 0f;
			foreach (MobileParty mobileParty in list)
			{
				if (mobileParty != null)
				{
					num += mobileParty.Party.TotalStrength;
				}
				else
				{
					Debug.FailedAssert("Player side party null", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "GetPlayerStrengthRatioInEncounter", 2362);
				}
			}
			foreach (MobileParty mobileParty2 in list2)
			{
				if (mobileParty2 != null)
				{
					num2 += mobileParty2.Party.TotalStrength;
				}
				else
				{
					Debug.FailedAssert("Opponent side party null", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Encounters\\PlayerEncounter.cs", "GetPlayerStrengthRatioInEncounter", 2374);
				}
			}
			if (num2 <= 0f)
			{
				num2 = 1E-05f;
			}
			return num / num2;
		}

		[SaveableField(0)]
		public static bool EncounteredPartySurrendered;

		[SaveableField(1)]
		public bool FirstInit = true;

		public const float JoiningRadius = 3f;

		[SaveableField(5)]
		public bool IsEnemy;

		[SaveableField(7)]
		public float PlayerPartyInitialStrength;

		[SaveableField(8)]
		private CampaignBattleResult _campaignBattleResult;

		[SaveableField(9)]
		public float PartiesStrengthRatioBeforePlayerJoin;

		[SaveableField(10)]
		public bool ForceRaid;

		[SaveableField(11)]
		public bool ForceSallyOut;

		[SaveableField(32)]
		public bool ForceVolunteers;

		[SaveableField(33)]
		public bool ForceSupplies;

		[SaveableField(34)]
		private bool _isSiegeInterruptedByEnemyDefection;

		[SaveableField(35)]
		private bool _isPlayerEncounterInterruptedByPeace;

		public BattleSimulation BattleSimulation;

		[SaveableField(13)]
		private MapEvent _mapEvent;

		[SaveableField(14)]
		private PlayerEncounterState _mapEventState;

		[SaveableField(15)]
		private PartyBase _encounteredParty;

		[SaveableField(16)]
		private PartyBase _attackerParty;

		[SaveableField(17)]
		private PartyBase _defenderParty;

		[SaveableField(18)]
		private List<Hero> _helpedHeroes;

		[SaveableField(19)]
		private List<TroopRosterElement> _capturedHeroes;

		[SaveableField(20)]
		private List<TroopRosterElement> _freedHeroes;

		[SaveableField(22)]
		private bool _leaveEncounter;

		[SaveableField(23)]
		private bool _playerSurrender;

		[SaveableField(24)]
		private bool _enemySurrender;

		[SaveableField(25)]
		private bool _battleChallenge;

		[SaveableField(26)]
		private bool _meetingDone;

		[SaveableField(27)]
		private bool _stateHandled;

		[SaveableField(36)]
		private ItemRoster _alternativeRosterToReceiveLootItems;

		[SaveableField(37)]
		private TroopRoster _alternativeRosterToReceiveLootPrisoners;

		[SaveableField(38)]
		private TroopRoster _alternativeRosterToReceiveLootMembers;

		[SaveableField(51)]
		private bool _doesBattleContinue;

		[SaveableField(52)]
		private bool _isSallyOutAmbush;
	}
}
