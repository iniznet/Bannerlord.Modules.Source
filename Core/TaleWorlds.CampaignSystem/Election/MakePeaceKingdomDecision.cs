using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.BarterSystem.Barterables;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.MapNotificationTypes;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	public class MakePeaceKingdomDecision : KingdomDecision
	{
		internal static void AutoGeneratedStaticCollectObjectsMakePeaceKingdomDecision(object o, List<object> collectedObjects)
		{
			((MakePeaceKingdomDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.FactionToMakePeaceWith);
		}

		internal static object AutoGeneratedGetMemberValueFactionToMakePeaceWith(object o)
		{
			return ((MakePeaceKingdomDecision)o).FactionToMakePeaceWith;
		}

		internal static object AutoGeneratedGetMemberValueDailyTributeToBePaid(object o)
		{
			return ((MakePeaceKingdomDecision)o).DailyTributeToBePaid;
		}

		internal static object AutoGeneratedGetMemberValue_applyResults(object o)
		{
			return ((MakePeaceKingdomDecision)o)._applyResults;
		}

		public MakePeaceKingdomDecision(Clan proposerClan, IFaction kingdomToMakePeaceWith, int dailyTributeToBePaid = 0, bool applyResults = true)
			: base(proposerClan)
		{
			this.FactionToMakePeaceWith = kingdomToMakePeaceWith;
			this.DailyTributeToBePaid = dailyTributeToBePaid;
			this._applyResults = applyResults;
		}

		public override bool IsAllowed()
		{
			TextObject textObject;
			return Campaign.Current.Models.KingdomDecisionPermissionModel.IsPeaceDecisionAllowedBetweenKingdoms(base.Kingdom, this.FactionToMakePeaceWith as Kingdom, out textObject);
		}

		public override int GetProposalInfluenceCost()
		{
			return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfProposingPeace();
		}

		public override TextObject GetGeneralTitle()
		{
			TextObject textObject = new TextObject("{=v3xdiFfD}Make Peace With {KINGDOM_NAME}", null);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToMakePeaceWith.Name);
			return textObject;
		}

		public override TextObject GetSupportTitle()
		{
			TextObject textObject;
			if (this.DailyTributeToBePaid == 0)
			{
				textObject = new TextObject("{=0aXG8dvJ}Make peace with the {KINGDOM_NAME}. No tribute will be paid.", null);
			}
			else if (this.DailyTributeToBePaid > 0)
			{
				textObject = new TextObject("{=2b1xZGaQ}Make peace with the {KINGDOM_NAME}. Our kingdom will pay {T} tribute daily.", null);
			}
			else
			{
				textObject = new TextObject("{=NjPMRWbW}Make peace with the {KINGDOM_NAME}. Our kingdom will receive {T} tribute daily.", null);
			}
			textObject.SetTextVariable("T", MathF.Abs(this.DailyTributeToBePaid));
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToMakePeaceWith.InformalName);
			return textObject;
		}

		public override TextObject GetChooseTitle()
		{
			TextObject textObject = new TextObject("{=4GgfFDWG}Making peace with the {KINGDOM_NAME}", null);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToMakePeaceWith.InformalName);
			return textObject;
		}

		public override TextObject GetSupportDescription()
		{
			TextObject textObject = TextObject.Empty;
			if (this.DailyTributeToBePaid != 0)
			{
				textObject = new TextObject("{=BlVjIlZF}{FACTION_LEADER} will decide if the {KINGDOM_CONSIDERING_PEACE_NAME} will make peace with the {KINGDOM_NAME} by paying {TRIBUTE_PERCENTAGE} percent of the kingdom's income as tribute. You can pick your stance regarding this decision.", null);
				textObject.SetTextVariable("T", this.DailyTributeToBePaid);
			}
			else
			{
				textObject = new TextObject("{=awoeb3br}{FACTION_LEADER} will decide if the {KINGDOM_CONSIDERING_PEACE_NAME} will make peace with the {KINGDOM_NAME}. You can pick your stance regarding this decision.", null);
			}
			textObject.SetTextVariable("FACTION_LEADER", this.DetermineChooser().Leader.Name);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToMakePeaceWith.InformalName);
			textObject.SetTextVariable("KINGDOM_CONSIDERING_PEACE_NAME", base.Kingdom.InformalName);
			return textObject;
		}

		public override TextObject GetChooseDescription()
		{
			TextObject textObject = TextObject.Empty;
			if (this.DailyTributeToBePaid != 0)
			{
				textObject = new TextObject("{=n4I3pWOn}As the ruler, you must decide if peace will be made with the {KINGDOM_NAME} by paying {TRIBUTE_PERCENTAGE} percent of the kingdom's income as tribute.", null);
				textObject.SetTextVariable("TRIBUTE_PERCENTAGE", this.DailyTributeToBePaid);
			}
			else
			{
				textObject = new TextObject("{=KFHj7ckm}As the ruler, you must decide if peace will be made with the {KINGDOM_NAME}", null);
			}
			textObject.SetTextVariable("IS_FEMALE", this.DetermineChooser().Leader.IsFemale ? 1 : 0);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToMakePeaceWith.InformalName);
			return textObject;
		}

		public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
		{
			yield return new MakePeaceKingdomDecision.MakePeaceDecisionOutcome(true, base.Kingdom, this.FactionToMakePeaceWith);
			yield return new MakePeaceKingdomDecision.MakePeaceDecisionOutcome(false, base.Kingdom, this.FactionToMakePeaceWith);
			yield break;
		}

		public override Clan DetermineChooser()
		{
			return base.Kingdom.RulingClan;
		}

		protected override bool ShouldBeCancelledInternal()
		{
			return !base.Kingdom.IsAtWarWith(this.FactionToMakePeaceWith);
		}

		public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			foreach (DecisionOutcome decisionOutcome in possibleOutcomes)
			{
				if (((MakePeaceKingdomDecision.MakePeaceDecisionOutcome)decisionOutcome).ShouldPeaceBeDeclared)
				{
					decisionOutcome.SetSponsor(base.ProposerClan);
				}
				else
				{
					base.AssignDefaultSponsor(decisionOutcome);
				}
			}
		}

		public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
		{
			if (this._applyResults && ((MakePeaceKingdomDecision.MakePeaceDecisionOutcome)chosenOutcome).ShouldPeaceBeDeclared)
			{
				MakePeaceAction.ApplyByKingdomDecision(base.Kingdom, this.FactionToMakePeaceWith, this.DailyTributeToBePaid);
			}
		}

		public override bool OnShowDecision()
		{
			if (this.FactionToMakePeaceWith == Clan.PlayerClan.Kingdom && !Hero.MainHero.Clan.IsUnderMercenaryService)
			{
				if (!Hero.MainHero.IsPrisoner)
				{
					TextObject textObject = new TextObject("{=1V8f9vRM}A courier bearing a peace offer from the {PROPOSER_HERO_FACTION} has arrived at the court of your realm.", null);
					textObject.SetTextVariable("PROPOSER_HERO_FACTION", base.ProposerClan.Leader.MapFaction.InformalName);
					Campaign.Current.CampaignInformationManager.NewMapNoticeAdded(new PeaceOfferMapNotification(base.ProposerClan.MapFaction, this.DailyTributeToBePaid, textObject));
				}
				return false;
			}
			return true;
		}

		public override TextObject GetSecondaryEffects()
		{
			return new TextObject("{=!}All supporters gains some relation with each other.", null);
		}

		public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
		{
			bool applyResults = this._applyResults;
		}

		public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false)
		{
			TextObject textObject;
			if (((MakePeaceKingdomDecision.MakePeaceDecisionOutcome)chosenOutcome).ShouldPeaceBeDeclared)
			{
				if (base.IsSingleClanDecision())
				{
					textObject = new TextObject("{=CswzBb02}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided to make peace with the {KINGDOM}.", null);
				}
				else if (supportStatus == KingdomDecision.SupportStatus.Majority)
				{
					textObject = new TextObject("{=17A2DDgD}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided to make peace with the {KINGDOM} with the support of {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council.", null);
				}
				else if (supportStatus == KingdomDecision.SupportStatus.Minority)
				{
					textObject = new TextObject("{=JDfnPFsW}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided to make peace with the {KINGDOM} despite the opposition of {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council.", null);
				}
				else
				{
					textObject = new TextObject("{=aEt1kqxm}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided to make peace with the {KINGDOM}, with his {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council evenly divided on the matter.", null);
				}
			}
			else if (base.IsSingleClanDecision())
			{
				textObject = new TextObject("{=wsDNxArW}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has chosen not to make peace with the {KINGDOM}.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Majority)
			{
				textObject = new TextObject("{=mRrYn2qm}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has chosen not to make peace with the {KINGDOM} with the support of {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Minority)
			{
				textObject = new TextObject("{=Ing5gFbO}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has chosen not to make peace with the {KINGDOM} over the objections of {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council.", null);
			}
			else
			{
				textObject = new TextObject("{=AThZtg7U}{PEACEMAKER_RULER.NAME} of the {KINGDOM_CONSIDERING_PEACE} has decided against making peace with the {KINGDOM}, with his {?PEACEMAKER_RULER.GENDER}her{?}his{\\?} council evenly divided on the matter.", null);
			}
			StringHelpers.SetCharacterProperties("PEACEMAKER_RULER", base.Kingdom.Leader.CharacterObject, textObject, false);
			textObject.SetTextVariable("KINGDOM_CONSIDERING_PEACE", base.Kingdom.InformalName);
			textObject.SetTextVariable("KINGDOM", this.FactionToMakePeaceWith.InformalName);
			return textObject;
		}

		public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return possibleOutcomes.FirstOrDefault((DecisionOutcome t) => ((MakePeaceKingdomDecision.MakePeaceDecisionOutcome)t).ShouldPeaceBeDeclared);
		}

		public float CalculateSupport(Clan clan)
		{
			return this.DetermineSupport(clan, new MakePeaceKingdomDecision.MakePeaceDecisionOutcome(true, base.Kingdom, this.FactionToMakePeaceWith));
		}

		public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
		{
			MakePeaceKingdomDecision.MakePeaceDecisionOutcome makePeaceDecisionOutcome = (MakePeaceKingdomDecision.MakePeaceDecisionOutcome)possibleOutcome;
			float valueForFaction = (float)new PeaceBarterable(base.Kingdom, this.FactionToMakePeaceWith, CampaignTime.Years(1f)).GetValueForFaction(clan);
			float num = ((clan.Leader != null) ? ((clan.Leader.Gold < 50000) ? (1f + 0.5f * ((50000f - (float)clan.Leader.Gold) / 50000f)) : ((clan.Leader.Gold > 200000) ? MathF.Max(0.66f, MathF.Pow(200000f / (float)clan.Leader.Gold, 0.4f)) : 1f)) : 1f);
			int traitLevel = clan.Leader.GetTraitLevel(DefaultTraits.Generosity);
			float num2 = ((this.DailyTributeToBePaid > 0) ? (1f - 0.1f * (float)MathF.Max(-2, MathF.Min(2, traitLevel))) : 1f);
			float num3 = (valueForFaction - (float)((int)((float)Campaign.Current.Models.DiplomacyModel.GetValueOfDailyTribute(this.DailyTributeToBePaid) * num * num2))) * Campaign.Current.Models.DiplomacyModel.DenarsToInfluence();
			if (makePeaceDecisionOutcome.ShouldPeaceBeDeclared)
			{
				float num4 = num3;
				int num5 = clan.Leader.GetTraitLevel(DefaultTraits.Mercy) * 10;
				return num4 + (float)num5;
			}
			float num6 = -num3;
			int num7 = -clan.Leader.GetTraitLevel(DefaultTraits.Mercy) * 10;
			return num6 + (float)num7;
		}

		[SaveableField(101)]
		public readonly IFaction FactionToMakePeaceWith;

		[SaveableField(103)]
		private readonly bool _applyResults;

		[SaveableField(110)]
		public readonly int DailyTributeToBePaid;

		public class MakePeaceDecisionOutcome : DecisionOutcome
		{
			internal static void AutoGeneratedStaticCollectObjectsMakePeaceDecisionOutcome(object o, List<object> collectedObjects)
			{
				((MakePeaceKingdomDecision.MakePeaceDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this.Kingdom);
				collectedObjects.Add(this.FactionToMakePeaceWith);
			}

			internal static object AutoGeneratedGetMemberValueShouldPeaceBeDeclared(object o)
			{
				return ((MakePeaceKingdomDecision.MakePeaceDecisionOutcome)o).ShouldPeaceBeDeclared;
			}

			internal static object AutoGeneratedGetMemberValueKingdom(object o)
			{
				return ((MakePeaceKingdomDecision.MakePeaceDecisionOutcome)o).Kingdom;
			}

			internal static object AutoGeneratedGetMemberValueFactionToMakePeaceWith(object o)
			{
				return ((MakePeaceKingdomDecision.MakePeaceDecisionOutcome)o).FactionToMakePeaceWith;
			}

			public MakePeaceDecisionOutcome(bool shouldPeaceBeDeclared, Kingdom kingdom, IFaction factionToMakePeaceWith)
			{
				this.ShouldPeaceBeDeclared = shouldPeaceBeDeclared;
				this.Kingdom = kingdom;
				this.FactionToMakePeaceWith = factionToMakePeaceWith;
			}

			public override TextObject GetDecisionTitle()
			{
				TextObject textObject = new TextObject("{=kakxnaN5}{?SUPPORT}Yes{?}No{\\?}", null);
				textObject.SetTextVariable("SUPPORT", this.ShouldPeaceBeDeclared ? 1 : 0);
				return textObject;
			}

			public override TextObject GetDecisionDescription()
			{
				if (base.SponsorClan != null && this.Kingdom != null && this.FactionToMakePeaceWith != null && base.SponsorClan != Clan.PlayerClan)
				{
					TextObject empty = TextObject.Empty;
					if (this.ShouldPeaceBeDeclared)
					{
						Campaign.Current.Models.DiplomacyModel.GetScoreOfDeclaringPeace(this.Kingdom, this.FactionToMakePeaceWith, base.SponsorClan, out empty);
					}
					if (empty != TextObject.Empty)
					{
						return empty;
					}
				}
				if (this.ShouldPeaceBeDeclared)
				{
					return new TextObject("{=THz06NQD}It is time to make peace", null);
				}
				return new TextObject("{=jQpeuHIE}We oppose making peace at this time", null);
			}

			public override string GetDecisionLink()
			{
				return null;
			}

			public override ImageIdentifier GetDecisionImageIdentifier()
			{
				return null;
			}

			[SaveableField(100)]
			public readonly bool ShouldPeaceBeDeclared;

			[SaveableField(110)]
			public readonly Kingdom Kingdom;

			[SaveableField(120)]
			public readonly IFaction FactionToMakePeaceWith;
		}
	}
}
