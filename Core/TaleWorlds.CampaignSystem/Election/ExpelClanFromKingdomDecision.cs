using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	// Token: 0x02000272 RID: 626
	public class ExpelClanFromKingdomDecision : KingdomDecision
	{
		// Token: 0x0600202D RID: 8237 RVA: 0x000894E0 File Offset: 0x000876E0
		internal static void AutoGeneratedStaticCollectObjectsExpelClanFromKingdomDecision(object o, List<object> collectedObjects)
		{
			((ExpelClanFromKingdomDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600202E RID: 8238 RVA: 0x000894EE File Offset: 0x000876EE
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.ClanToExpel);
			collectedObjects.Add(this.OldKingdom);
		}

		// Token: 0x0600202F RID: 8239 RVA: 0x0008950F File Offset: 0x0008770F
		internal static object AutoGeneratedGetMemberValueClanToExpel(object o)
		{
			return ((ExpelClanFromKingdomDecision)o).ClanToExpel;
		}

		// Token: 0x06002030 RID: 8240 RVA: 0x0008951C File Offset: 0x0008771C
		internal static object AutoGeneratedGetMemberValueOldKingdom(object o)
		{
			return ((ExpelClanFromKingdomDecision)o).OldKingdom;
		}

		// Token: 0x06002031 RID: 8241 RVA: 0x00089529 File Offset: 0x00087729
		public ExpelClanFromKingdomDecision(Clan proposerClan, Clan clan)
			: base(proposerClan)
		{
			this.ClanToExpel = clan;
			this.OldKingdom = clan.Kingdom;
		}

		// Token: 0x06002032 RID: 8242 RVA: 0x00089545 File Offset: 0x00087745
		public override bool IsAllowed()
		{
			return Campaign.Current.Models.KingdomDecisionPermissionModel.IsExpulsionDecisionAllowed(this.ClanToExpel);
		}

		// Token: 0x06002033 RID: 8243 RVA: 0x00089561 File Offset: 0x00087761
		public override int GetProposalInfluenceCost()
		{
			return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfExpellingClan();
		}

		// Token: 0x06002034 RID: 8244 RVA: 0x00089577 File Offset: 0x00087777
		public override TextObject GetGeneralTitle()
		{
			TextObject textObject = new TextObject("{=pF92DagG}Expel {CLAN_NAME} from {KINGDOM_NAME}", null);
			textObject.SetTextVariable("CLAN_NAME", this.ClanToExpel.Name);
			textObject.SetTextVariable("KINGDOM_NAME", this.OldKingdom.Name);
			return textObject;
		}

		// Token: 0x06002035 RID: 8245 RVA: 0x000895B2 File Offset: 0x000877B2
		public override TextObject GetSupportTitle()
		{
			TextObject textObject = new TextObject("{=ZwpWX8Zx}Vote for expelling {CLAN_NAME} from the kingdom", null);
			textObject.SetTextVariable("CLAN_NAME", this.ClanToExpel.Name);
			return textObject;
		}

		// Token: 0x06002036 RID: 8246 RVA: 0x000895D6 File Offset: 0x000877D6
		public override TextObject GetChooseTitle()
		{
			TextObject textObject = new TextObject("{=pF92DagG}Expel {CLAN_NAME} from {KINGDOM_NAME}", null);
			textObject.SetTextVariable("CLAN_NAME", this.ClanToExpel.Name);
			textObject.SetTextVariable("KINGDOM_NAME", this.OldKingdom.Name);
			return textObject;
		}

		// Token: 0x06002037 RID: 8247 RVA: 0x00089614 File Offset: 0x00087814
		public override TextObject GetSupportDescription()
		{
			TextObject textObject = new TextObject("{=eTr0XHas}{FACTION_LEADER} will decide if {CLAN_NAME} will be expelled from {KINGDOM_NAME}. You can pick your stance regarding this decision.", null);
			textObject.SetTextVariable("FACTION_LEADER", this.DetermineChooser().Leader.Name);
			textObject.SetTextVariable("CLAN_NAME", this.ClanToExpel.Name);
			textObject.SetTextVariable("KINGDOM_NAME", this.OldKingdom.Name);
			return textObject;
		}

		// Token: 0x06002038 RID: 8248 RVA: 0x00089678 File Offset: 0x00087878
		public override TextObject GetChooseDescription()
		{
			TextObject textObject = new TextObject("{=J8brFxIW}As {?IS_FEMALE}queen{?}king{\\?} you must decide if {CLAN_NAME} will be expelled from kingdom.", null);
			textObject.SetTextVariable("IS_FEMALE", this.DetermineChooser().Leader.IsFemale ? 1 : 0);
			textObject.SetTextVariable("CLAN_NAME", this.ClanToExpel.Name);
			return textObject;
		}

		// Token: 0x06002039 RID: 8249 RVA: 0x000896C9 File Offset: 0x000878C9
		public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
		{
			yield return new ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome(true);
			yield return new ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome(false);
			yield break;
		}

		// Token: 0x0600203A RID: 8250 RVA: 0x000896D2 File Offset: 0x000878D2
		public override Clan DetermineChooser()
		{
			return this.OldKingdom.RulingClan;
		}

		// Token: 0x0600203B RID: 8251 RVA: 0x000896DF File Offset: 0x000878DF
		protected override bool ShouldBeCancelledInternal()
		{
			return !base.Kingdom.Clans.Contains(this.ClanToExpel);
		}

		// Token: 0x0600203C RID: 8252 RVA: 0x000896FC File Offset: 0x000878FC
		public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
		{
			bool shouldBeExpelled = ((ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome)possibleOutcome).ShouldBeExpelled;
			float num = 3.5f;
			float num2 = (float)FactionManager.GetRelationBetweenClans(this.ClanToExpel, clan) * num;
			float num3 = 0f;
			float num4 = 0f;
			float num5 = 0f;
			float num6 = 10000f;
			foreach (Settlement settlement in this.ClanToExpel.Settlements)
			{
				num3 += settlement.GetSettlementValueForFaction(this.OldKingdom) * 0.005f;
			}
			if (clan.Leader.GetTraitLevel(DefaultTraits.Calculating) > 0)
			{
				num5 = this.ClanToExpel.Influence * 0.05f + this.ClanToExpel.Renown * 0.02f;
			}
			if (clan.Leader.GetTraitLevel(DefaultTraits.Commander) > 0)
			{
				foreach (WarPartyComponent warPartyComponent in this.ClanToExpel.WarPartyComponents)
				{
					num4 += (float)warPartyComponent.MobileParty.MemberRoster.TotalManCount * 0.01f;
				}
			}
			float num7 = num6 + num2 + num3 + num4 + num5;
			float num8;
			if (shouldBeExpelled)
			{
				num8 = -num7;
			}
			else
			{
				num8 = num7;
			}
			return num8;
		}

		// Token: 0x0600203D RID: 8253 RVA: 0x00089878 File Offset: 0x00087A78
		public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			foreach (DecisionOutcome decisionOutcome in possibleOutcomes)
			{
				if (((ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome)decisionOutcome).ShouldBeExpelled)
				{
					decisionOutcome.SetSponsor(base.ProposerClan);
				}
				else
				{
					base.AssignDefaultSponsor(decisionOutcome);
				}
			}
		}

		// Token: 0x0600203E RID: 8254 RVA: 0x000898E4 File Offset: 0x00087AE4
		public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
		{
			if (((ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome)chosenOutcome).ShouldBeExpelled)
			{
				int relationCostOfExpellingClanFromKingdom = Campaign.Current.Models.DiplomacyModel.GetRelationCostOfExpellingClanFromKingdom();
				foreach (Supporter supporter in chosenOutcome.SupporterList)
				{
					if (((ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome)chosenOutcome).ShouldBeExpelled && this.ClanToExpel.Leader != supporter.Clan.Leader)
					{
						ChangeRelationAction.ApplyRelationChangeBetweenHeroes(this.ClanToExpel.Leader, supporter.Clan.Leader, relationCostOfExpellingClanFromKingdom, true);
					}
				}
				ChangeKingdomAction.ApplyByLeaveKingdom(this.ClanToExpel, true);
			}
		}

		// Token: 0x0600203F RID: 8255 RVA: 0x000899A4 File Offset: 0x00087BA4
		public override TextObject GetSecondaryEffects()
		{
			return new TextObject("{=fJY9uosa}All supporters gain some relations with each other and lose a large amount of relations with the expelled clan.", null);
		}

		// Token: 0x06002040 RID: 8256 RVA: 0x000899B1 File Offset: 0x00087BB1
		public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
		{
		}

		// Token: 0x06002041 RID: 8257 RVA: 0x000899B4 File Offset: 0x00087BB4
		public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false)
		{
			TextObject textObject;
			if (((ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome)chosenOutcome).ShouldBeExpelled)
			{
				if (base.IsSingleClanDecision())
				{
					textObject = new TextObject("{=h5eTEYON}{RULER.NAME} has expelled the {CLAN} clan from the {KINGDOM}.", null);
				}
				else if (supportStatus == KingdomDecision.SupportStatus.Majority)
				{
					textObject = new TextObject("{=rd229FYG}{RULER.NAME} has expelled the {CLAN} clan from the {KINGDOM} with the support of {?RULER.GENDER}her{?}his{\\?} council.", null);
				}
				else if (supportStatus == KingdomDecision.SupportStatus.Minority)
				{
					textObject = new TextObject("{=G3qGLAeQ}{RULER.NAME} has expelled the {CLAN} clan from the {KINGDOM} against the wishes of {?RULER.GENDER}her{?}his{\\?} council.", null);
				}
				else
				{
					textObject = new TextObject("{=m6OVl6Dg}{RULER.NAME} has expelled the {CLAN} clan from the {KINGDOM}, with {?RULER.GENDER}her{?}his{\\?} council evenly split on the matter.", null);
				}
			}
			else if (base.IsSingleClanDecision())
			{
				textObject = new TextObject("{=mvkKP6OE}{RULER.NAME} chose not to expel the {CLAN} clan from the {KINGDOM}.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Majority)
			{
				textObject = new TextObject("{=yBL3TzXw}{RULER.NAME} chose not to expel the {CLAN} clan from the {KINGDOM} with the support of {?RULER.GENDER}her{?}his{\\?} council.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Minority)
			{
				textObject = new TextObject("{=940TwBPs}{RULER.NAME} chose not to expel the {CLAN} clan from the {KINGDOM} over the objections of {?RULER.GENDER}her{?}his{\\?} council.", null);
			}
			else
			{
				textObject = new TextObject("{=Oe1NdVLe}{RULER.NAME} chose not to expel the {CLAN} clan from the {KINGDOM} with {?RULER.GENDER}her{?}his{\\?} council evenly split on the matter.", null);
			}
			textObject.SetTextVariable("CLAN", this.ClanToExpel.Name);
			textObject.SetTextVariable("KINGDOM", this.OldKingdom.Name);
			StringHelpers.SetCharacterProperties("RULER", this.OldKingdom.Leader.CharacterObject, textObject, false);
			return textObject;
		}

		// Token: 0x06002042 RID: 8258 RVA: 0x00089AA8 File Offset: 0x00087CA8
		public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return possibleOutcomes.FirstOrDefault((DecisionOutcome t) => ((ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome)t).ShouldBeExpelled);
		}

		// Token: 0x04000A3E RID: 2622
		private const float ClanFiefModifier = 0.005f;

		// Token: 0x04000A3F RID: 2623
		[SaveableField(100)]
		public readonly Clan ClanToExpel;

		// Token: 0x04000A40 RID: 2624
		[SaveableField(102)]
		public readonly Kingdom OldKingdom;

		// Token: 0x02000576 RID: 1398
		public class ExpelClanDecisionOutcome : DecisionOutcome
		{
			// Token: 0x060043DB RID: 17371 RVA: 0x00138594 File Offset: 0x00136794
			internal static void AutoGeneratedStaticCollectObjectsExpelClanDecisionOutcome(object o, List<object> collectedObjects)
			{
				((ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060043DC RID: 17372 RVA: 0x001385A2 File Offset: 0x001367A2
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060043DD RID: 17373 RVA: 0x001385AB File Offset: 0x001367AB
			internal static object AutoGeneratedGetMemberValueShouldBeExpelled(object o)
			{
				return ((ExpelClanFromKingdomDecision.ExpelClanDecisionOutcome)o).ShouldBeExpelled;
			}

			// Token: 0x060043DE RID: 17374 RVA: 0x001385BD File Offset: 0x001367BD
			public ExpelClanDecisionOutcome(bool shouldBeExpelled)
			{
				this.ShouldBeExpelled = shouldBeExpelled;
			}

			// Token: 0x060043DF RID: 17375 RVA: 0x001385CC File Offset: 0x001367CC
			public override TextObject GetDecisionTitle()
			{
				TextObject textObject = new TextObject("{=kakxnaN5}{?SUPPORT}Yes{?}No{\\?}", null);
				textObject.SetTextVariable("SUPPORT", this.ShouldBeExpelled ? 1 : 0);
				return textObject;
			}

			// Token: 0x060043E0 RID: 17376 RVA: 0x001385F1 File Offset: 0x001367F1
			public override TextObject GetDecisionDescription()
			{
				if (this.ShouldBeExpelled)
				{
					return new TextObject("{=s8z5Ugvm}The clan should be expelled", null);
				}
				return new TextObject("{=b2InhEeP}We oppose expelling the clan", null);
			}

			// Token: 0x060043E1 RID: 17377 RVA: 0x00138612 File Offset: 0x00136812
			public override string GetDecisionLink()
			{
				return null;
			}

			// Token: 0x060043E2 RID: 17378 RVA: 0x00138615 File Offset: 0x00136815
			public override ImageIdentifier GetDecisionImageIdentifier()
			{
				return null;
			}

			// Token: 0x040016EE RID: 5870
			[SaveableField(100)]
			public readonly bool ShouldBeExpelled;
		}
	}
}
