using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	// Token: 0x02000273 RID: 627
	public abstract class KingdomDecision
	{
		// Token: 0x06002043 RID: 8259 RVA: 0x00089ACF File Offset: 0x00087CCF
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._kingdom);
			collectedObjects.Add(this.ProposerClan);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.TriggerTime, collectedObjects);
		}

		// Token: 0x06002044 RID: 8260 RVA: 0x00089AFA File Offset: 0x00087CFA
		internal static object AutoGeneratedGetMemberValueProposerClan(object o)
		{
			return ((KingdomDecision)o).ProposerClan;
		}

		// Token: 0x06002045 RID: 8261 RVA: 0x00089B07 File Offset: 0x00087D07
		internal static object AutoGeneratedGetMemberValueTriggerTime(object o)
		{
			return ((KingdomDecision)o).TriggerTime;
		}

		// Token: 0x06002046 RID: 8262 RVA: 0x00089B19 File Offset: 0x00087D19
		internal static object AutoGeneratedGetMemberValue_isEnforced(object o)
		{
			return ((KingdomDecision)o)._isEnforced;
		}

		// Token: 0x06002047 RID: 8263 RVA: 0x00089B2B File Offset: 0x00087D2B
		internal static object AutoGeneratedGetMemberValue_playerExamined(object o)
		{
			return ((KingdomDecision)o)._playerExamined;
		}

		// Token: 0x06002048 RID: 8264 RVA: 0x00089B3D File Offset: 0x00087D3D
		internal static object AutoGeneratedGetMemberValue_kingdom(object o)
		{
			return ((KingdomDecision)o)._kingdom;
		}

		// Token: 0x17000835 RID: 2101
		// (get) Token: 0x06002049 RID: 8265 RVA: 0x00089B4A File Offset: 0x00087D4A
		public Kingdom Kingdom
		{
			get
			{
				return this._kingdom ?? this.ProposerClan.Kingdom;
			}
		}

		// Token: 0x17000836 RID: 2102
		// (get) Token: 0x0600204A RID: 8266 RVA: 0x00089B61 File Offset: 0x00087D61
		// (set) Token: 0x0600204B RID: 8267 RVA: 0x00089B69 File Offset: 0x00087D69
		[SaveableProperty(4)]
		public Clan ProposerClan { get; private set; }

		// Token: 0x17000837 RID: 2103
		// (get) Token: 0x0600204C RID: 8268 RVA: 0x00089B72 File Offset: 0x00087D72
		// (set) Token: 0x0600204D RID: 8269 RVA: 0x00089B7A File Offset: 0x00087D7A
		public bool IsEnforced
		{
			get
			{
				return this._isEnforced;
			}
			set
			{
				this._isEnforced = value;
			}
		}

		// Token: 0x17000838 RID: 2104
		// (get) Token: 0x0600204E RID: 8270 RVA: 0x00089B83 File Offset: 0x00087D83
		// (set) Token: 0x0600204F RID: 8271 RVA: 0x00089B8B File Offset: 0x00087D8B
		public bool PlayerExamined
		{
			get
			{
				return this._playerExamined;
			}
			set
			{
				this._playerExamined = value;
			}
		}

		// Token: 0x17000839 RID: 2105
		// (get) Token: 0x06002050 RID: 8272 RVA: 0x00089B94 File Offset: 0x00087D94
		// (set) Token: 0x06002051 RID: 8273 RVA: 0x00089BA6 File Offset: 0x00087DA6
		public bool NotifyPlayer
		{
			get
			{
				return this._notifyPlayer || this.IsEnforced;
			}
			set
			{
				this._notifyPlayer = value;
			}
		}

		// Token: 0x1700083A RID: 2106
		// (get) Token: 0x06002052 RID: 8274 RVA: 0x00089BAF File Offset: 0x00087DAF
		public bool IsPlayerParticipant
		{
			get
			{
				return this.Kingdom == Clan.PlayerClan.Kingdom && !Clan.PlayerClan.IsUnderMercenaryService;
			}
		}

		// Token: 0x1700083B RID: 2107
		// (get) Token: 0x06002053 RID: 8275 RVA: 0x00089BD2 File Offset: 0x00087DD2
		// (set) Token: 0x06002054 RID: 8276 RVA: 0x00089BDA File Offset: 0x00087DDA
		[SaveableProperty(3)]
		public CampaignTime TriggerTime { get; protected set; }

		// Token: 0x06002055 RID: 8277 RVA: 0x00089BE3 File Offset: 0x00087DE3
		protected KingdomDecision(Clan proposerClan)
		{
			this.ProposerClan = proposerClan;
			this._kingdom = proposerClan.Kingdom;
			this.TriggerTime = CampaignTime.HoursFromNow((float)this.HoursToWait);
		}

		// Token: 0x1700083C RID: 2108
		// (get) Token: 0x06002056 RID: 8278 RVA: 0x00089C1B File Offset: 0x00087E1B
		public virtual bool IsKingsVoteAllowed
		{
			get
			{
				return true;
			}
		}

		// Token: 0x06002057 RID: 8279
		public abstract bool IsAllowed();

		// Token: 0x06002058 RID: 8280 RVA: 0x00089C20 File Offset: 0x00087E20
		public int GetInfluenceCost(Clan sponsorClan)
		{
			int proposalInfluenceCost = this.GetProposalInfluenceCost();
			if (sponsorClan != Clan.PlayerClan)
			{
				return proposalInfluenceCost;
			}
			return proposalInfluenceCost;
		}

		// Token: 0x06002059 RID: 8281
		public abstract int GetProposalInfluenceCost();

		// Token: 0x0600205A RID: 8282
		public abstract TextObject GetGeneralTitle();

		// Token: 0x0600205B RID: 8283
		public abstract TextObject GetSupportTitle();

		// Token: 0x0600205C RID: 8284
		public abstract TextObject GetChooseTitle();

		// Token: 0x0600205D RID: 8285
		public abstract TextObject GetSupportDescription();

		// Token: 0x0600205E RID: 8286
		public abstract TextObject GetChooseDescription();

		// Token: 0x0600205F RID: 8287 RVA: 0x00089C3F File Offset: 0x00087E3F
		public virtual float CalculateMeritOfOutcome(DecisionOutcome candidateOutcome)
		{
			return 1f;
		}

		// Token: 0x06002060 RID: 8288
		public abstract IEnumerable<DecisionOutcome> DetermineInitialCandidates();

		// Token: 0x06002061 RID: 8289 RVA: 0x00089C48 File Offset: 0x00087E48
		public MBList<DecisionOutcome> NarrowDownCandidates(MBList<DecisionOutcome> initialCandidates, int maxCandidateCount)
		{
			foreach (DecisionOutcome decisionOutcome in initialCandidates)
			{
				decisionOutcome.InitialMerit = this.CalculateMeritOfOutcome(decisionOutcome);
			}
			return this.SortDecisionOutcomes(initialCandidates).Take(maxCandidateCount).ToMBList<DecisionOutcome>();
		}

		// Token: 0x06002062 RID: 8290
		public abstract Clan DetermineChooser();

		// Token: 0x06002063 RID: 8291 RVA: 0x00089CB0 File Offset: 0x00087EB0
		public IEnumerable<Supporter> DetermineSupporters()
		{
			foreach (Clan clan in this.Kingdom.Clans)
			{
				if (!clan.IsUnderMercenaryService)
				{
					yield return new Supporter(clan);
				}
			}
			List<Clan>.Enumerator enumerator = default(List<Clan>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x06002064 RID: 8292 RVA: 0x00089CC0 File Offset: 0x00087EC0
		protected virtual bool ShouldBeCancelledInternal()
		{
			return false;
		}

		// Token: 0x06002065 RID: 8293 RVA: 0x00089CC3 File Offset: 0x00087EC3
		protected virtual bool CanProposerClanChangeOpinion()
		{
			return false;
		}

		// Token: 0x06002066 RID: 8294 RVA: 0x00089CC8 File Offset: 0x00087EC8
		public bool ShouldBeCancelled()
		{
			if (!this.IsAllowed())
			{
				return true;
			}
			if (this.ShouldBeCancelledInternal())
			{
				return true;
			}
			if (this.ProposerClan == Clan.PlayerClan)
			{
				return false;
			}
			MBList<DecisionOutcome> mblist = this.NarrowDownCandidates(this.DetermineInitialCandidates().ToMBList<DecisionOutcome>(), 3);
			DecisionOutcome queriedDecisionOutcome = this.GetQueriedDecisionOutcome(mblist);
			this.DetermineSponsors(mblist);
			Supporter.SupportWeights supportWeights;
			DecisionOutcome decisionOutcome = this.DetermineSupportOption(new Supporter(this.ProposerClan), mblist, out supportWeights, true);
			bool flag = this.ProposerClan.Influence < (float)this.GetInfluenceCostOfSupport(this.ProposerClan, Supporter.SupportWeights.SlightlyFavor) * 1.5f;
			bool flag2 = mblist.Any((DecisionOutcome t) => t.SponsorClan != null && t.SponsorClan.IsEliminated);
			bool flag3 = supportWeights == Supporter.SupportWeights.StayNeutral || decisionOutcome == null;
			bool flag4 = decisionOutcome != queriedDecisionOutcome || (decisionOutcome == queriedDecisionOutcome && flag3);
			return flag2 || (mblist.Any((DecisionOutcome t) => t.SponsorClan == this.ProposerClan) && !flag && ((!this.CanProposerClanChangeOpinion() && flag4) || (this.CanProposerClanChangeOpinion() && flag3)));
		}

		// Token: 0x1700083D RID: 2109
		// (get) Token: 0x06002067 RID: 8295 RVA: 0x00089DCC File Offset: 0x00087FCC
		protected virtual int HoursToWait
		{
			get
			{
				return 48;
			}
		}

		// Token: 0x1700083E RID: 2110
		// (get) Token: 0x06002068 RID: 8296 RVA: 0x00089DD0 File Offset: 0x00087FD0
		public bool NeedsPlayerResolution
		{
			get
			{
				return this.Kingdom == Clan.PlayerClan.Kingdom && (this.IsEnforced || (this.TriggerTime.IsPast && this.Kingdom.RulingClan == Clan.PlayerClan));
			}
		}

		// Token: 0x06002069 RID: 8297 RVA: 0x00089E20 File Offset: 0x00088020
		public DecisionOutcome DetermineSupportOption(Supporter supporter, MBReadOnlyList<DecisionOutcome> possibleOutcomes, out Supporter.SupportWeights supportWeightOfSelectedOutcome, bool calculateRelationshipEffect)
		{
			Supporter.SupportWeights supportWeights = Supporter.SupportWeights.Choose;
			DecisionOutcome decisionOutcome = null;
			DecisionOutcome decisionOutcome2 = null;
			float num = float.MinValue;
			float num2 = 0f;
			int num3 = 0;
			Clan clan = supporter.Clan;
			foreach (DecisionOutcome decisionOutcome3 in possibleOutcomes)
			{
				float num4 = this.DetermineSupport(supporter.Clan, decisionOutcome3);
				if (num4 > num)
				{
					decisionOutcome = decisionOutcome3;
					num = num4;
				}
				if (num4 < num2)
				{
					decisionOutcome2 = decisionOutcome3;
					num2 = num4;
				}
				num3++;
			}
			if (decisionOutcome != null)
			{
				float num5 = num;
				if (decisionOutcome2 != null)
				{
					num5 -= 0.5f * num2;
				}
				float num6 = num5;
				if (clan.Influence < num6 * 2f)
				{
					num6 *= 0.5f;
					if (num6 > clan.Influence * 0.7f)
					{
						num6 = clan.Influence * 0.7f;
					}
				}
				else if (clan.Influence > num6 * 10f)
				{
					num6 *= 1.5f;
				}
				if (decisionOutcome.Likelihood > 0.65f)
				{
					num6 *= 1.6f * (1.2f - decisionOutcome.Likelihood);
				}
				if (calculateRelationshipEffect && decisionOutcome.SponsorClan != null)
				{
					int num7 = (int)(100f - MathF.Clamp((float)clan.Leader.GetRelation(decisionOutcome.SponsorClan.Leader), -100f, 100f));
					float num8 = MathF.Lerp(0.2f, 1.8f, 1f - (float)num7 / 200f, 1E-05f);
					num6 *= num8;
				}
				if (num6 > (float)this.GetInfluenceCostOfSupport(supporter.Clan, Supporter.SupportWeights.FullyPush))
				{
					supportWeights = Supporter.SupportWeights.FullyPush;
				}
				else if (num6 > (float)this.GetInfluenceCostOfSupport(supporter.Clan, Supporter.SupportWeights.StronglyFavor))
				{
					supportWeights = Supporter.SupportWeights.StronglyFavor;
				}
				else if (num6 > (float)this.GetInfluenceCostOfSupport(supporter.Clan, Supporter.SupportWeights.SlightlyFavor))
				{
					supportWeights = Supporter.SupportWeights.SlightlyFavor;
				}
			}
			while (supportWeights >= Supporter.SupportWeights.SlightlyFavor && supporter.Clan != null && supporter.Clan.Influence < (float)this.GetInfluenceCostOfSupport(supporter.Clan, supportWeights))
			{
				supportWeights--;
			}
			supportWeightOfSelectedOutcome = supportWeights;
			if (supportWeights == Supporter.SupportWeights.StayNeutral || supportWeights == Supporter.SupportWeights.Choose)
			{
				return null;
			}
			return decisionOutcome;
		}

		// Token: 0x0600206A RID: 8298
		public abstract float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome);

		// Token: 0x0600206B RID: 8299
		public abstract void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes);

		// Token: 0x0600206C RID: 8300 RVA: 0x0008A030 File Offset: 0x00088230
		protected void AssignDefaultSponsor(DecisionOutcome outcome)
		{
			if (outcome.SupporterList.Count > 0)
			{
				Supporter.SupportWeights maxWeight = outcome.SupporterList.Max((Supporter t) => t.SupportWeight);
				Supporter supporter = outcome.SupporterList.First((Supporter t) => t.SupportWeight == maxWeight);
				outcome.SetSponsor(supporter.Clan);
			}
		}

		// Token: 0x0600206D RID: 8301
		public abstract void ApplyChosenOutcome(DecisionOutcome chosenOutcome);

		// Token: 0x0600206E RID: 8302 RVA: 0x0008A0A8 File Offset: 0x000882A8
		public int GetInfluenceCost(DecisionOutcome decisionOutcome, Clan clan, Supporter.SupportWeights supportWeight)
		{
			int num = 0;
			switch (supportWeight)
			{
			case Supporter.SupportWeights.Choose:
				num = 0;
				break;
			case Supporter.SupportWeights.StayNeutral:
				num = 0;
				break;
			case Supporter.SupportWeights.SlightlyFavor:
				num = this.GetInfluenceCostOfSupport(clan, Supporter.SupportWeights.SlightlyFavor);
				break;
			case Supporter.SupportWeights.StronglyFavor:
				num = this.GetInfluenceCostOfSupport(clan, Supporter.SupportWeights.StronglyFavor);
				break;
			case Supporter.SupportWeights.FullyPush:
				num = this.GetInfluenceCostOfSupport(clan, Supporter.SupportWeights.FullyPush);
				break;
			default:
				Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Election\\KingdomDecision.cs", "GetInfluenceCost", 329);
				break;
			}
			return num;
		}

		// Token: 0x0600206F RID: 8303
		public abstract TextObject GetSecondaryEffects();

		// Token: 0x06002070 RID: 8304
		public abstract void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome);

		// Token: 0x06002071 RID: 8305
		public abstract TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false);

		// Token: 0x06002072 RID: 8306 RVA: 0x0008A116 File Offset: 0x00088316
		public MBList<DecisionOutcome> SortDecisionOutcomes(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return possibleOutcomes.OrderByDescending((DecisionOutcome k) => k.InitialMerit).ToMBList<DecisionOutcome>();
		}

		// Token: 0x06002073 RID: 8307
		public abstract DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes);

		// Token: 0x06002074 RID: 8308 RVA: 0x0008A142 File Offset: 0x00088342
		public bool IsSingleClanDecision()
		{
			return this.Kingdom.Clans.Count == 1;
		}

		// Token: 0x06002075 RID: 8309 RVA: 0x0008A158 File Offset: 0x00088358
		public virtual float CalculateRelationshipEffectWithSponsor(Clan clan)
		{
			float num = 0.8f;
			return (float)clan.Leader.GetRelation(this.ProposerClan.Leader) * num;
		}

		// Token: 0x06002076 RID: 8310 RVA: 0x0008A184 File Offset: 0x00088384
		public int GetInfluenceCostOfSupport(Clan clan, Supporter.SupportWeights supportWeight)
		{
			float influenceCostOfSupportInternal = (float)this.GetInfluenceCostOfSupportInternal(supportWeight);
			float num = 1f;
			if (clan.Leader.GetPerkValue(DefaultPerks.Charm.FlexibleEthics))
			{
				num += DefaultPerks.Charm.FlexibleEthics.PrimaryBonus;
			}
			return (int)(influenceCostOfSupportInternal * num);
		}

		// Token: 0x06002077 RID: 8311 RVA: 0x0008A1C1 File Offset: 0x000883C1
		protected virtual int GetInfluenceCostOfSupportInternal(Supporter.SupportWeights supportWeight)
		{
			switch (supportWeight)
			{
			case Supporter.SupportWeights.Choose:
			case Supporter.SupportWeights.StayNeutral:
				return 0;
			case Supporter.SupportWeights.SlightlyFavor:
				return 20;
			case Supporter.SupportWeights.StronglyFavor:
				return 60;
			case Supporter.SupportWeights.FullyPush:
				return 150;
			default:
				throw new ArgumentOutOfRangeException("supportWeight", supportWeight, null);
			}
		}

		// Token: 0x06002078 RID: 8312 RVA: 0x0008A1FE File Offset: 0x000883FE
		public virtual bool OnShowDecision()
		{
			return true;
		}

		// Token: 0x04000A42 RID: 2626
		[SaveableField(0)]
		private static bool _notificationsEnabled = true;

		// Token: 0x04000A43 RID: 2627
		[SaveableField(1)]
		private bool _isEnforced;

		// Token: 0x04000A44 RID: 2628
		[SaveableField(2)]
		private bool _playerExamined;

		// Token: 0x04000A45 RID: 2629
		private bool _notifyPlayer = KingdomDecision._notificationsEnabled;

		// Token: 0x04000A47 RID: 2631
		[SaveableField(10)]
		private Kingdom _kingdom;

		// Token: 0x04000A48 RID: 2632
		public KingdomDecision.SupportStatus SupportStatusOfFinalDecision;

		// Token: 0x02000579 RID: 1401
		public enum SupportStatus
		{
			// Token: 0x040016F5 RID: 5877
			Equal,
			// Token: 0x040016F6 RID: 5878
			Majority,
			// Token: 0x040016F7 RID: 5879
			Minority
		}
	}
}
