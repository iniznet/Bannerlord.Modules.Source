using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	// Token: 0x02000274 RID: 628
	public class KingdomPolicyDecision : KingdomDecision
	{
		// Token: 0x0600207B RID: 8315 RVA: 0x0008A219 File Offset: 0x00088419
		internal static void AutoGeneratedStaticCollectObjectsKingdomPolicyDecision(object o, List<object> collectedObjects)
		{
			((KingdomPolicyDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600207C RID: 8316 RVA: 0x0008A227 File Offset: 0x00088427
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Policy);
			collectedObjects.Add(this._kingdomPolicies);
		}

		// Token: 0x0600207D RID: 8317 RVA: 0x0008A248 File Offset: 0x00088448
		internal static object AutoGeneratedGetMemberValuePolicy(object o)
		{
			return ((KingdomPolicyDecision)o).Policy;
		}

		// Token: 0x0600207E RID: 8318 RVA: 0x0008A255 File Offset: 0x00088455
		internal static object AutoGeneratedGetMemberValue_isInvertedDecision(object o)
		{
			return ((KingdomPolicyDecision)o)._isInvertedDecision;
		}

		// Token: 0x0600207F RID: 8319 RVA: 0x0008A267 File Offset: 0x00088467
		internal static object AutoGeneratedGetMemberValue_kingdomPolicies(object o)
		{
			return ((KingdomPolicyDecision)o)._kingdomPolicies;
		}

		// Token: 0x06002080 RID: 8320 RVA: 0x0008A274 File Offset: 0x00088474
		public KingdomPolicyDecision(Clan proposerClan, PolicyObject policy, bool isInvertedDecision = false)
			: base(proposerClan)
		{
			this.Policy = policy;
			this._isInvertedDecision = isInvertedDecision;
			this._kingdomPolicies = new List<PolicyObject>(base.Kingdom.ActivePolicies);
		}

		// Token: 0x06002081 RID: 8321 RVA: 0x0008A2A1 File Offset: 0x000884A1
		public override bool IsAllowed()
		{
			return Campaign.Current.Models.KingdomDecisionPermissionModel.IsPolicyDecisionAllowed(this.Policy);
		}

		// Token: 0x06002082 RID: 8322 RVA: 0x0008A2BD File Offset: 0x000884BD
		public override int GetProposalInfluenceCost()
		{
			return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfPolicyProposalAndDisavowal();
		}

		// Token: 0x06002083 RID: 8323 RVA: 0x0008A2D3 File Offset: 0x000884D3
		public override TextObject GetGeneralTitle()
		{
			return this.Policy.Name;
		}

		// Token: 0x06002084 RID: 8324 RVA: 0x0008A2E0 File Offset: 0x000884E0
		public override TextObject GetSupportTitle()
		{
			TextObject textObject;
			if (this._isInvertedDecision)
			{
				textObject = new TextObject("{=XGcST2dB}Vote to disavow {POLICY_NAME}", null);
			}
			else
			{
				textObject = new TextObject("{=iiH5gKzE}Vote for {POLICY_NAME}", null);
			}
			textObject.SetTextVariable("POLICY_NAME", this.Policy.Name);
			return textObject;
		}

		// Token: 0x06002085 RID: 8325 RVA: 0x0008A32C File Offset: 0x0008852C
		public override TextObject GetChooseTitle()
		{
			TextObject textObject;
			if (this._isInvertedDecision)
			{
				textObject = new TextObject("{=9DaDtQbo}Disavow {POLICY_NAME}", null);
			}
			else
			{
				textObject = new TextObject("{=!}{POLICY_NAME}", null);
			}
			textObject.SetTextVariable("POLICY_NAME", this.Policy.Name);
			return textObject;
		}

		// Token: 0x06002086 RID: 8326 RVA: 0x0008A378 File Offset: 0x00088578
		public override TextObject GetSupportDescription()
		{
			TextObject textObject;
			if (this._isInvertedDecision)
			{
				textObject = new TextObject("{=ZPv3uCOb}{FACTION_LEADER} proposes disavowing the policy of {POLICY_NAME}. You can pick your stance regarding this decision.", null);
			}
			else
			{
				textObject = new TextObject("{=jFOva44m}{FACTION_LEADER} proposes the policy of {POLICY_NAME}. You can pick your stance regarding this decision.", null);
			}
			textObject.SetTextVariable("FACTION_LEADER", this.DetermineChooser().Leader.Name);
			textObject.SetTextVariable("POLICY_NAME", this.Policy.Name);
			return textObject;
		}

		// Token: 0x06002087 RID: 8327 RVA: 0x0008A3E0 File Offset: 0x000885E0
		public override TextObject GetChooseDescription()
		{
			TextObject textObject;
			if (this._isInvertedDecision)
			{
				textObject = new TextObject("{=1AU2jnNV}As {?IS_FEMALE}queen{?}king{\\?} you must decide whether to disavow the policy of {POLICY_NAME}.", null);
			}
			else
			{
				textObject = new TextObject("{=0EqPRs21}As {?IS_FEMALE}queen{?}king{\\?} you must decide whether to enforce the policy of {POLICY_NAME}.", null);
			}
			textObject.SetTextVariable("IS_FEMALE", this.DetermineChooser().Leader.IsFemale ? 1 : 0);
			textObject.SetTextVariable("POLICY_NAME", this.Policy.Name);
			return textObject;
		}

		// Token: 0x06002088 RID: 8328 RVA: 0x0008A44B File Offset: 0x0008864B
		public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
		{
			yield return new KingdomPolicyDecision.PolicyDecisionOutcome(true);
			yield return new KingdomPolicyDecision.PolicyDecisionOutcome(false);
			yield break;
		}

		// Token: 0x06002089 RID: 8329 RVA: 0x0008A454 File Offset: 0x00088654
		public override Clan DetermineChooser()
		{
			return base.Kingdom.RulingClan;
		}

		// Token: 0x0600208A RID: 8330 RVA: 0x0008A461 File Offset: 0x00088661
		public float CalculateSupport(Clan clan)
		{
			return this.DetermineSupport(clan, new KingdomPolicyDecision.PolicyDecisionOutcome(true));
		}

		// Token: 0x0600208B RID: 8331 RVA: 0x0008A470 File Offset: 0x00088670
		protected override bool ShouldBeCancelledInternal()
		{
			if (!this._isInvertedDecision)
			{
				return base.Kingdom.ActivePolicies.Contains(this.Policy);
			}
			return !base.Kingdom.ActivePolicies.Contains(this.Policy);
		}

		// Token: 0x0600208C RID: 8332 RVA: 0x0008A4AC File Offset: 0x000886AC
		public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
		{
			KingdomPolicyDecision.PolicyDecisionOutcome policyDecisionOutcome = possibleOutcome as KingdomPolicyDecision.PolicyDecisionOutcome;
			float num = 0.1f;
			float num2 = 0.1f;
			float num3 = 0.1f;
			if (clan.Kingdom != null && clan.Kingdom.RulingClan == clan)
			{
				num2 += 1f;
				num3 -= 1.5f;
				num -= 0.4f;
			}
			else if (clan.IsMinorFaction)
			{
				num += 1f;
				num3 -= 1.5f;
				num2 -= 0.3f;
			}
			else if (clan.Tier >= 3)
			{
				num -= 1.3f;
				num3 += (float)clan.Tier * 0.2f;
				num2 -= 1.3f;
			}
			else if (clan.Tier == 2)
			{
				num2 -= 0.1f;
				num3 += 0.4f;
				num -= 0.5f;
			}
			CultureObject culture = clan.Culture;
			num += 0.6f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Egalitarian) - 0.9f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic);
			num3 += 0.6f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic) - 0.9f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Egalitarian) - 0.5f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Authoritarian);
			num2 += 0.8f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Authoritarian) - 1.3f * (float)clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic);
			float num4 = this.Policy.EgalitarianWeight * num + this.Policy.OligarchicWeight * num3 + this.Policy.AuthoritarianWeight * num2;
			if (this._isInvertedDecision)
			{
				num4 = -num4;
			}
			float num5;
			if (policyDecisionOutcome.ShouldDecisionBeEnforced)
			{
				num5 = 60f;
			}
			else
			{
				num5 = -100f;
			}
			return num4 * num5;
		}

		// Token: 0x0600208D RID: 8333 RVA: 0x0008A67C File Offset: 0x0008887C
		public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			foreach (DecisionOutcome decisionOutcome in possibleOutcomes)
			{
				if (((KingdomPolicyDecision.PolicyDecisionOutcome)decisionOutcome).ShouldDecisionBeEnforced)
				{
					decisionOutcome.SetSponsor(base.ProposerClan);
				}
				else
				{
					base.AssignDefaultSponsor(decisionOutcome);
				}
			}
		}

		// Token: 0x0600208E RID: 8334 RVA: 0x0008A6E8 File Offset: 0x000888E8
		public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
		{
			bool shouldDecisionBeEnforced = ((KingdomPolicyDecision.PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced;
			if (shouldDecisionBeEnforced && !this._isInvertedDecision)
			{
				base.Kingdom.AddPolicy(this.Policy);
				return;
			}
			if (shouldDecisionBeEnforced && this._isInvertedDecision)
			{
				base.Kingdom.RemovePolicy(this.Policy);
			}
		}

		// Token: 0x0600208F RID: 8335 RVA: 0x0008A73C File Offset: 0x0008893C
		public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false)
		{
			TextObject textObject;
			if ((((KingdomPolicyDecision.PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced && !this._isInvertedDecision) || (!((KingdomPolicyDecision.PolicyDecisionOutcome)chosenOutcome).ShouldDecisionBeEnforced && this._isInvertedDecision))
			{
				if (!this._kingdomPolicies.Contains(this.Policy))
				{
					textObject = new TextObject("{=Lbs2bNlg}The {KINGDOM} will start {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}", null);
				}
				else
				{
					textObject = new TextObject("{=jnYwiCAz}The {KINGDOM} will continue {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}", null);
				}
			}
			else if (this._kingdomPolicies.Contains(this.Policy))
			{
				textObject = new TextObject("{=2BVDp7Tg}The {KINGDOM} will stop {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}", null);
			}
			else
			{
				textObject = new TextObject("{=faUooB7V}The {KINGDOM} will not be {POLICY_DESCRIPTION} ({POLICY}). {POLICY_SUPPORT}", null);
			}
			textObject.SetTextVariable("KINGDOM", base.Kingdom.InformalName);
			textObject.SetTextVariable("POLICY", this.Policy.Name);
			textObject.SetTextVariable("POLICY_DESCRIPTION", this.Policy.LogEntryDescription);
			if (isShortVersion || base.IsSingleClanDecision())
			{
				textObject.SetTextVariable("POLICY_SUPPORT", TextObject.Empty);
			}
			else
			{
				textObject.SetTextVariable("POLICY_SUPPORT", "{=bqEO389P}This decision caused a split in the council.");
				if (supportStatus == KingdomDecision.SupportStatus.Majority)
				{
					textObject.SetTextVariable("POLICY_SUPPORT", "{=3W67kdtc}This decision had the support of the council.");
				}
				if (supportStatus == KingdomDecision.SupportStatus.Minority)
				{
					textObject.SetTextVariable("POLICY_SUPPORT", "{=b6MgRYlM}This decision was opposed by most of the council.");
				}
			}
			return textObject;
		}

		// Token: 0x06002090 RID: 8336 RVA: 0x0008A86E File Offset: 0x00088A6E
		public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return possibleOutcomes.FirstOrDefault((DecisionOutcome t) => ((KingdomPolicyDecision.PolicyDecisionOutcome)t).ShouldDecisionBeEnforced);
		}

		// Token: 0x06002091 RID: 8337 RVA: 0x0008A895 File Offset: 0x00088A95
		public override TextObject GetSecondaryEffects()
		{
			return this.Policy.SecondaryEffects;
		}

		// Token: 0x06002092 RID: 8338 RVA: 0x0008A8A2 File Offset: 0x00088AA2
		public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
		{
		}

		// Token: 0x04000A49 RID: 2633
		[SaveableField(200)]
		public readonly PolicyObject Policy;

		// Token: 0x04000A4A RID: 2634
		[SaveableField(203)]
		private bool _isInvertedDecision;

		// Token: 0x04000A4B RID: 2635
		[SaveableField(202)]
		private List<PolicyObject> _kingdomPolicies;

		// Token: 0x0200057D RID: 1405
		public class PolicyDecisionOutcome : DecisionOutcome
		{
			// Token: 0x060043FE RID: 17406 RVA: 0x001388FA File Offset: 0x00136AFA
			internal static void AutoGeneratedStaticCollectObjectsPolicyDecisionOutcome(object o, List<object> collectedObjects)
			{
				((KingdomPolicyDecision.PolicyDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060043FF RID: 17407 RVA: 0x00138908 File Offset: 0x00136B08
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004400 RID: 17408 RVA: 0x00138911 File Offset: 0x00136B11
			internal static object AutoGeneratedGetMemberValueShouldDecisionBeEnforced(object o)
			{
				return ((KingdomPolicyDecision.PolicyDecisionOutcome)o).ShouldDecisionBeEnforced;
			}

			// Token: 0x17000DBA RID: 3514
			// (get) Token: 0x06004401 RID: 17409 RVA: 0x00138923 File Offset: 0x00136B23
			// (set) Token: 0x06004402 RID: 17410 RVA: 0x0013892B File Offset: 0x00136B2B
			[SaveableProperty(200)]
			public bool ShouldDecisionBeEnforced { get; private set; }

			// Token: 0x06004403 RID: 17411 RVA: 0x00138934 File Offset: 0x00136B34
			public override TextObject GetDecisionTitle()
			{
				TextObject textObject = new TextObject("{=kakxnaN5}{?SUPPORT}Yes{?}No{\\?}", null);
				textObject.SetTextVariable("SUPPORT", this.ShouldDecisionBeEnforced ? 1 : 0);
				return textObject;
			}

			// Token: 0x06004404 RID: 17412 RVA: 0x00138959 File Offset: 0x00136B59
			public override TextObject GetDecisionDescription()
			{
				if (this.ShouldDecisionBeEnforced)
				{
					return new TextObject("{=pWyxaauF}We support this proposal", null);
				}
				return new TextObject("{=BktSNgY4}We oppose this proposal", null);
			}

			// Token: 0x06004405 RID: 17413 RVA: 0x0013897A File Offset: 0x00136B7A
			public override string GetDecisionLink()
			{
				return null;
			}

			// Token: 0x06004406 RID: 17414 RVA: 0x0013897D File Offset: 0x00136B7D
			public override ImageIdentifier GetDecisionImageIdentifier()
			{
				return null;
			}

			// Token: 0x06004407 RID: 17415 RVA: 0x00138980 File Offset: 0x00136B80
			public PolicyDecisionOutcome(bool shouldBeEnforced)
			{
				this.ShouldDecisionBeEnforced = shouldBeEnforced;
			}
		}
	}
}
