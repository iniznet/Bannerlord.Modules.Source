using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	public abstract class DecisionOutcome
	{
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.SupporterList);
			collectedObjects.Add(this._sponsorClan);
		}

		internal static object AutoGeneratedGetMemberValueInitialMerit(object o)
		{
			return ((DecisionOutcome)o).InitialMerit;
		}

		internal static object AutoGeneratedGetMemberValueSupporterList(object o)
		{
			return ((DecisionOutcome)o).SupporterList;
		}

		internal static object AutoGeneratedGetMemberValue_sponsorClan(object o)
		{
			return ((DecisionOutcome)o)._sponsorClan;
		}

		public float Support
		{
			get
			{
				float num = 0f;
				using (List<Supporter>.Enumerator enumerator = this.SupporterList.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						switch (enumerator.Current.SupportWeight)
						{
						case Supporter.SupportWeights.SlightlyFavor:
							num += 0.2f;
							break;
						case Supporter.SupportWeights.StronglyFavor:
							num += 0.4f;
							break;
						case Supporter.SupportWeights.FullyPush:
							num += 1f;
							break;
						}
					}
				}
				return num;
			}
		}

		public float Merit
		{
			get
			{
				return this.InitialMerit * (1f + this.Support);
			}
		}

		public Clan SponsorClan
		{
			get
			{
				return this._sponsorClan;
			}
		}

		public float InitialSupport { get; internal set; }

		public float Likelihood { get; internal set; }

		public float TotalSupportPoints { get; internal set; }

		public float WinChance { get; internal set; }

		public abstract TextObject GetDecisionTitle();

		public abstract TextObject GetDecisionDescription();

		public abstract string GetDecisionLink();

		public abstract ImageIdentifier GetDecisionImageIdentifier();

		public void AddSupport(Supporter supporter)
		{
			this.SupporterList.Add(supporter);
		}

		public void ResetSupport(Supporter supporter)
		{
			if (this.SupporterList.Contains(supporter))
			{
				this.SupporterList.Remove(supporter);
			}
		}

		public void SetSponsor(Clan sponsorClan)
		{
			this._sponsorClan = sponsorClan;
		}

		[SaveableField(0)]
		public float InitialMerit;

		[SaveableField(1)]
		public List<Supporter> SupporterList = new List<Supporter>();

		[SaveableField(2)]
		private Clan _sponsorClan;
	}
}
