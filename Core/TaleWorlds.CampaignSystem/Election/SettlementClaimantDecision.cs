using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	// Token: 0x02000275 RID: 629
	public class SettlementClaimantDecision : KingdomDecision
	{
		// Token: 0x06002093 RID: 8339 RVA: 0x0008A8A4 File Offset: 0x00088AA4
		internal static void AutoGeneratedStaticCollectObjectsSettlementClaimantDecision(object o, List<object> collectedObjects)
		{
			((SettlementClaimantDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002094 RID: 8340 RVA: 0x0008A8B2 File Offset: 0x00088AB2
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Settlement);
			collectedObjects.Add(this.ClanToExclude);
			collectedObjects.Add(this._capturerHero);
		}

		// Token: 0x06002095 RID: 8341 RVA: 0x0008A8DF File Offset: 0x00088ADF
		internal static object AutoGeneratedGetMemberValueSettlement(object o)
		{
			return ((SettlementClaimantDecision)o).Settlement;
		}

		// Token: 0x06002096 RID: 8342 RVA: 0x0008A8EC File Offset: 0x00088AEC
		internal static object AutoGeneratedGetMemberValueClanToExclude(object o)
		{
			return ((SettlementClaimantDecision)o).ClanToExclude;
		}

		// Token: 0x06002097 RID: 8343 RVA: 0x0008A8F9 File Offset: 0x00088AF9
		internal static object AutoGeneratedGetMemberValue_capturerHero(object o)
		{
			return ((SettlementClaimantDecision)o)._capturerHero;
		}

		// Token: 0x06002098 RID: 8344 RVA: 0x0008A906 File Offset: 0x00088B06
		public SettlementClaimantDecision(Clan proposerClan, Settlement settlement, Hero capturerHero, Clan clanToExclude)
			: base(proposerClan)
		{
			this.Settlement = settlement;
			this._capturerHero = capturerHero;
			this.ClanToExclude = clanToExclude;
		}

		// Token: 0x06002099 RID: 8345 RVA: 0x0008A925 File Offset: 0x00088B25
		public override bool IsAllowed()
		{
			return Campaign.Current.Models.KingdomDecisionPermissionModel.IsAnnexationDecisionAllowed(this.Settlement);
		}

		// Token: 0x0600209A RID: 8346 RVA: 0x0008A941 File Offset: 0x00088B41
		public override int GetProposalInfluenceCost()
		{
			return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfAnnexation(base.Kingdom);
		}

		// Token: 0x0600209B RID: 8347 RVA: 0x0008A95D File Offset: 0x00088B5D
		public override TextObject GetSupportTitle()
		{
			TextObject textObject = new TextObject("{=Of7XnP5c}Vote for the new owner of {SETTLEMENT_NAME}", null);
			textObject.SetTextVariable("SETTLEMENT_NAME", this.Settlement.Name);
			return textObject;
		}

		// Token: 0x0600209C RID: 8348 RVA: 0x0008A981 File Offset: 0x00088B81
		public override TextObject GetGeneralTitle()
		{
			TextObject textObject = new TextObject("{=2qZ81jPG}Owner of {SETTLEMENT_NAME}", null);
			textObject.SetTextVariable("SETTLEMENT_NAME", this.Settlement.Name);
			return textObject;
		}

		// Token: 0x0600209D RID: 8349 RVA: 0x0008A9A5 File Offset: 0x00088BA5
		public override TextObject GetSupportDescription()
		{
			TextObject textObject = new TextObject("{=J4UMplzb}{FACTION_LEADER} will decide who will own {SETTLEMENT_NAME}. You can give your support to one of the candidates.", null);
			textObject.SetTextVariable("FACTION_LEADER", this.DetermineChooser().Leader.Name);
			textObject.SetTextVariable("SETTLEMENT_NAME", this.Settlement.Name);
			return textObject;
		}

		// Token: 0x0600209E RID: 8350 RVA: 0x0008A9E5 File Offset: 0x00088BE5
		public override TextObject GetChooseTitle()
		{
			TextObject textObject = new TextObject("{=2qZ81jPG}Owner of {SETTLEMENT_NAME}", null);
			textObject.SetTextVariable("SETTLEMENT_NAME", this.Settlement.Name);
			return textObject;
		}

		// Token: 0x0600209F RID: 8351 RVA: 0x0008AA0C File Offset: 0x00088C0C
		public override TextObject GetChooseDescription()
		{
			TextObject textObject = new TextObject("{=xzq78nVm}As {?IS_FEMALE}queen{?}king{\\?} you must decide who will own {SETTLEMENT_NAME}.", null);
			textObject.SetTextVariable("IS_FEMALE", this.DetermineChooser().Leader.IsFemale ? 1 : 0);
			textObject.SetTextVariable("SETTLEMENT_NAME", this.Settlement.Name);
			return textObject;
		}

		// Token: 0x060020A0 RID: 8352 RVA: 0x0008AA5D File Offset: 0x00088C5D
		protected override bool ShouldBeCancelledInternal()
		{
			return this.Settlement.MapFaction != base.Kingdom;
		}

		// Token: 0x060020A1 RID: 8353 RVA: 0x0008AA75 File Offset: 0x00088C75
		protected override bool CanProposerClanChangeOpinion()
		{
			return true;
		}

		// Token: 0x060020A2 RID: 8354 RVA: 0x0008AA78 File Offset: 0x00088C78
		public override float CalculateMeritOfOutcome(DecisionOutcome candidateOutcome)
		{
			SettlementClaimantDecision.ClanAsDecisionOutcome clanAsDecisionOutcome = (SettlementClaimantDecision.ClanAsDecisionOutcome)candidateOutcome;
			Clan clan = clanAsDecisionOutcome.Clan;
			float num = 0f;
			int num2 = 0;
			float num3 = Campaign.MapDiagonal + 1f;
			float num4 = Campaign.MapDiagonal + 1f;
			foreach (Settlement settlement in Settlement.All)
			{
				if (settlement.OwnerClan == clanAsDecisionOutcome.Clan && settlement.IsFortification && this.Settlement != settlement)
				{
					num += settlement.GetSettlementValueForFaction(clanAsDecisionOutcome.Clan.Kingdom);
					float num5;
					if (Campaign.Current.Models.MapDistanceModel.GetDistance(settlement, this.Settlement, num4, out num5))
					{
						if (num5 < num3)
						{
							num4 = num3;
							num3 = num5;
						}
						else if (num5 < num4)
						{
							num4 = num5;
						}
					}
					num2++;
				}
			}
			float num6 = Campaign.AverageDistanceBetweenTwoFortifications * 1.5f;
			float num7 = num6 * 0.25f;
			float num8 = num6;
			if (num4 < Campaign.MapDiagonal)
			{
				num8 = (num4 + num3) / 2f;
			}
			else if (num3 < Campaign.MapDiagonal)
			{
				num8 = num3;
			}
			float num9 = MathF.Pow(num6 / MathF.Max(num7, MathF.Min(400f, num8)), 0.5f);
			float num10 = clan.TotalStrength;
			if (this.Settlement.OwnerClan == clan && this.Settlement.Town != null && this.Settlement.Town.GarrisonParty != null)
			{
				num10 -= this.Settlement.Town.GarrisonParty.Party.TotalStrength;
				if (num10 < 0f)
				{
					num10 = 0f;
				}
			}
			float settlementValueForFaction = this.Settlement.GetSettlementValueForFaction(clanAsDecisionOutcome.Clan.Kingdom);
			bool flag = clanAsDecisionOutcome.Clan.Leader == clanAsDecisionOutcome.Clan.Kingdom.Leader;
			float num11 = ((num2 == 0) ? 30f : 0f);
			float num12 = (flag ? 60f : 0f);
			float num13 = ((this.Settlement.Town != null && this.Settlement.Town.LastCapturedBy == clanAsDecisionOutcome.Clan) ? 30f : 0f);
			float num14 = ((clanAsDecisionOutcome.Clan.Leader == Hero.MainHero) ? 30f : 0f);
			float num15 = ((clanAsDecisionOutcome.Clan.Leader.Gold < 30000) ? MathF.Min(30f, 30f - (float)clanAsDecisionOutcome.Clan.Leader.Gold / 1000f) : 0f);
			return ((float)clan.Tier * 30f + num10 / 10f + num11 + num13 + num12 + num15 + num14) / (num + settlementValueForFaction) * num9 * 200000f;
		}

		// Token: 0x060020A3 RID: 8355 RVA: 0x0008AD58 File Offset: 0x00088F58
		public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
		{
			Kingdom kingdom = (Kingdom)this.Settlement.MapFaction;
			List<SettlementClaimantDecision.ClanAsDecisionOutcome> list = new List<SettlementClaimantDecision.ClanAsDecisionOutcome>();
			foreach (Clan clan in kingdom.Clans)
			{
				if (clan != this.ClanToExclude && !clan.IsUnderMercenaryService && !clan.IsEliminated && !clan.Leader.IsDead)
				{
					list.Add(new SettlementClaimantDecision.ClanAsDecisionOutcome(clan));
				}
			}
			return list;
		}

		// Token: 0x060020A4 RID: 8356 RVA: 0x0008ADEC File Offset: 0x00088FEC
		public override Clan DetermineChooser()
		{
			return ((Kingdom)this.Settlement.MapFaction).RulingClan;
		}

		// Token: 0x060020A5 RID: 8357 RVA: 0x0008AE04 File Offset: 0x00089004
		public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
		{
			SettlementClaimantDecision.ClanAsDecisionOutcome clanAsDecisionOutcome = (SettlementClaimantDecision.ClanAsDecisionOutcome)possibleOutcome;
			float num = clanAsDecisionOutcome.InitialMerit;
			int traitLevel = clan.Leader.GetTraitLevel(DefaultTraits.Honor);
			num *= MathF.Clamp(1f + (float)traitLevel, 0f, 2f);
			if (clanAsDecisionOutcome.Clan == clan)
			{
				float settlementValueForFaction = this.Settlement.GetSettlementValueForFaction(clan);
				num += 0.2f * settlementValueForFaction * Campaign.Current.Models.DiplomacyModel.DenarsToInfluence();
			}
			else
			{
				float num2 = ((clanAsDecisionOutcome.Clan != clan) ? ((float)FactionManager.GetRelationBetweenClans(clanAsDecisionOutcome.Clan, clan)) : 100f);
				int traitLevel2 = clan.Leader.GetTraitLevel(DefaultTraits.Calculating);
				num *= MathF.Clamp(1f + (float)traitLevel2, 0f, 2f);
				float num3 = num2 * 0.2f * (float)traitLevel2;
				num += num3;
			}
			int traitLevel3 = clan.Leader.GetTraitLevel(DefaultTraits.Calculating);
			float num4 = ((traitLevel3 > 0) ? (0.4f - (float)MathF.Min(2, traitLevel3) * 0.1f) : (0.4f + (float)MathF.Min(2, MathF.Abs(traitLevel3)) * 0.1f));
			float num5 = 1f - num4 * 1.5f;
			num *= num5;
			float num6 = ((clan == clanAsDecisionOutcome.Clan) ? 2f : 1f);
			return num * num6;
		}

		// Token: 0x060020A6 RID: 8358 RVA: 0x0008AF5C File Offset: 0x0008915C
		public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			foreach (DecisionOutcome decisionOutcome in possibleOutcomes)
			{
				decisionOutcome.SetSponsor(((SettlementClaimantDecision.ClanAsDecisionOutcome)decisionOutcome).Clan);
			}
		}

		// Token: 0x060020A7 RID: 8359 RVA: 0x0008AFB4 File Offset: 0x000891B4
		public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
		{
			ChangeOwnerOfSettlementAction.ApplyByKingDecision(((SettlementClaimantDecision.ClanAsDecisionOutcome)chosenOutcome).Clan.Leader, this.Settlement);
		}

		// Token: 0x060020A8 RID: 8360 RVA: 0x0008AFD1 File Offset: 0x000891D1
		protected override int GetInfluenceCostOfSupportInternal(Supporter.SupportWeights supportWeight)
		{
			switch (supportWeight)
			{
			case Supporter.SupportWeights.Choose:
			case Supporter.SupportWeights.StayNeutral:
				return 0;
			case Supporter.SupportWeights.SlightlyFavor:
				return 20;
			case Supporter.SupportWeights.StronglyFavor:
				return 60;
			case Supporter.SupportWeights.FullyPush:
				return 100;
			default:
				throw new ArgumentOutOfRangeException("supportWeight", supportWeight, null);
			}
		}

		// Token: 0x060020A9 RID: 8361 RVA: 0x0008B00B File Offset: 0x0008920B
		public override TextObject GetSecondaryEffects()
		{
			return new TextObject("{=bHNU9uz2}All supporters gains some relation with the supported candidate clan and might lose with the others.", null);
		}

		// Token: 0x060020AA RID: 8362 RVA: 0x0008B018 File Offset: 0x00089218
		public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
		{
		}

		// Token: 0x060020AB RID: 8363 RVA: 0x0008B01C File Offset: 0x0008921C
		public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false)
		{
			TextObject textObject = TextObject.Empty;
			bool flag = ((SettlementClaimantDecision.ClanAsDecisionOutcome)chosenOutcome).Clan.Leader == this.Settlement.MapFaction.Leader;
			if (supportStatus == KingdomDecision.SupportStatus.Majority && flag)
			{
				textObject = new TextObject("{=Zckbdm4Z}{RULER.NAME} of the {KINGDOM} takes {SETTLEMENT} as {?RULER.GENDER}her{?}his{\\?} fief with {?RULER.GENDER}her{?}his{\\?} council's support.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Minority && flag)
			{
				textObject = new TextObject("{=qa4FlTWS}{RULER.NAME} of the {KINGDOM} takes {SETTLEMENT} as {?RULER.GENDER}her{?}his{\\?} fief despite {?RULER.GENDER}her{?}his{\\?} council's opposition.", null);
			}
			else if (flag)
			{
				textObject = new TextObject("{=5bBAOHmC}{RULER.NAME} of the {KINGDOM} takes {SETTLEMENT} as {?RULER.GENDER}her{?}his{\\?} fief, with {?RULER.GENDER}her{?}his{\\?} council evenly split.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Majority)
			{
				textObject = new TextObject("{=0nhqJewP}{RULER.NAME} of the {KINGDOM} grants {SETTLEMENT} to {LEADER.NAME} with {?RULER.GENDER}her{?}his{\\?} council's support.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Minority)
			{
				textObject = new TextObject("{=Ktpia7Pa}{RULER.NAME} of the {KINGDOM} grants {SETTLEMENT} to {LEADER.NAME} despite {?RULER.GENDER}her{?}his{\\?} council's opposition.", null);
			}
			else
			{
				textObject = new TextObject("{=l5H9x7Lo}{RULER.NAME} of the {KINGDOM} grants {SETTLEMENT} to {LEADER.NAME}, with {?RULER.GENDER}her{?}his{\\?} council evenly split.", null);
			}
			textObject.SetTextVariable("SETTLEMENT", this.Settlement.Name);
			StringHelpers.SetCharacterProperties("LEADER", ((SettlementClaimantDecision.ClanAsDecisionOutcome)chosenOutcome).Clan.Leader.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("RULER", this.Settlement.MapFaction.Leader.CharacterObject, textObject, false);
			textObject.SetTextVariable("KINGDOM", this.Settlement.MapFaction.InformalName);
			textObject.SetTextVariable("CLAN", ((SettlementClaimantDecision.ClanAsDecisionOutcome)chosenOutcome).Clan.Name);
			return textObject;
		}

		// Token: 0x060020AC RID: 8364 RVA: 0x0008B153 File Offset: 0x00089353
		public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return possibleOutcomes.OrderByDescending((DecisionOutcome t) => t.Merit).FirstOrDefault<DecisionOutcome>();
		}

		// Token: 0x04000A4C RID: 2636
		[SaveableField(300)]
		public readonly Settlement Settlement;

		// Token: 0x04000A4D RID: 2637
		[SaveableField(301)]
		public readonly Clan ClanToExclude;

		// Token: 0x04000A4E RID: 2638
		[SaveableField(302)]
		private readonly Hero _capturerHero;

		// Token: 0x02000580 RID: 1408
		public class ClanAsDecisionOutcome : DecisionOutcome
		{
			// Token: 0x06004413 RID: 17427 RVA: 0x00138A8C File Offset: 0x00136C8C
			internal static void AutoGeneratedStaticCollectObjectsClanAsDecisionOutcome(object o, List<object> collectedObjects)
			{
				((SettlementClaimantDecision.ClanAsDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004414 RID: 17428 RVA: 0x00138A9A File Offset: 0x00136C9A
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this.Clan);
			}

			// Token: 0x06004415 RID: 17429 RVA: 0x00138AAF File Offset: 0x00136CAF
			internal static object AutoGeneratedGetMemberValueClan(object o)
			{
				return ((SettlementClaimantDecision.ClanAsDecisionOutcome)o).Clan;
			}

			// Token: 0x06004416 RID: 17430 RVA: 0x00138ABC File Offset: 0x00136CBC
			public override TextObject GetDecisionTitle()
			{
				return this.Clan.Leader.Name;
			}

			// Token: 0x06004417 RID: 17431 RVA: 0x00138AD0 File Offset: 0x00136CD0
			public override TextObject GetDecisionDescription()
			{
				TextObject textObject = new TextObject("{=QKIxepj5}The lordship of this fief should go to the {RECIPIENT.CLAN}", null);
				StringHelpers.SetCharacterProperties("RECIPIENT", this.Clan.Leader.CharacterObject, textObject, true);
				return textObject;
			}

			// Token: 0x06004418 RID: 17432 RVA: 0x00138B07 File Offset: 0x00136D07
			public override string GetDecisionLink()
			{
				return this.Clan.Leader.EncyclopediaLink.ToString();
			}

			// Token: 0x06004419 RID: 17433 RVA: 0x00138B1E File Offset: 0x00136D1E
			public override ImageIdentifier GetDecisionImageIdentifier()
			{
				return new ImageIdentifier(CharacterCode.CreateFrom(this.Clan.Leader.CharacterObject));
			}

			// Token: 0x0600441A RID: 17434 RVA: 0x00138B3A File Offset: 0x00136D3A
			public ClanAsDecisionOutcome(Clan clan)
			{
				this.Clan = clan;
			}

			// Token: 0x04001708 RID: 5896
			[SaveableField(300)]
			public readonly Clan Clan;
		}
	}
}
