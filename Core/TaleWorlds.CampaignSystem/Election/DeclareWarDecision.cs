using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.BarterSystem.Barterables;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	public class DeclareWarDecision : KingdomDecision
	{
		internal static void AutoGeneratedStaticCollectObjectsDeclareWarDecision(object o, List<object> collectedObjects)
		{
			((DeclareWarDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.FactionToDeclareWarOn);
		}

		internal static object AutoGeneratedGetMemberValueFactionToDeclareWarOn(object o)
		{
			return ((DeclareWarDecision)o).FactionToDeclareWarOn;
		}

		public DeclareWarDecision(Clan proposerClan, IFaction factionToDeclareWarOn)
			: base(proposerClan)
		{
			this.FactionToDeclareWarOn = factionToDeclareWarOn;
		}

		public override bool IsAllowed()
		{
			TextObject textObject;
			return !this.FactionToDeclareWarOn.IsKingdomFaction || Campaign.Current.Models.KingdomDecisionPermissionModel.IsWarDecisionAllowedBetweenKingdoms(base.Kingdom, this.FactionToDeclareWarOn as Kingdom, out textObject);
		}

		public override int GetProposalInfluenceCost()
		{
			return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfProposingWar(base.ProposerClan);
		}

		public override TextObject GetGeneralTitle()
		{
			TextObject textObject = new TextObject("{=rtfoywJl}Declare war on the {KINGDOM_NAME}", null);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToDeclareWarOn.InformalName);
			return textObject;
		}

		public override TextObject GetSupportTitle()
		{
			TextObject textObject = new TextObject("{=xM97H0oR}Vote for declaring war on the {KINGDOM_NAME}.", null);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToDeclareWarOn.InformalName);
			return textObject;
		}

		public override TextObject GetChooseTitle()
		{
			TextObject textObject = new TextObject("{=aQAI99d4}Declaring War on the {KINGDOM_NAME}", null);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToDeclareWarOn.InformalName);
			return textObject;
		}

		public override TextObject GetSupportDescription()
		{
			TextObject textObject = new TextObject("{=KSrNutEO}{FACTION_LEADER} will decide if war will be declared on the {KINGDOM_NAME}. You can pick your stance regarding this decision.", null);
			textObject.SetTextVariable("FACTION_LEADER", this.DetermineChooser().Leader.Name);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToDeclareWarOn.InformalName);
			return textObject;
		}

		public override TextObject GetChooseDescription()
		{
			TextObject textObject = new TextObject("{=4JSzHkpt}As {?IS_FEMALE}queen{?}king{\\?}, you must decide if war will be declared on the {KINGDOM_NAME}", null);
			textObject.SetTextVariable("IS_FEMALE", this.DetermineChooser().Leader.IsFemale ? 1 : 0);
			textObject.SetTextVariable("KINGDOM_NAME", this.FactionToDeclareWarOn.InformalName);
			return textObject;
		}

		public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
		{
			yield return new DeclareWarDecision.DeclareWarDecisionOutcome(true, base.Kingdom, this.FactionToDeclareWarOn);
			yield return new DeclareWarDecision.DeclareWarDecisionOutcome(false, base.Kingdom, this.FactionToDeclareWarOn);
			yield break;
		}

		public override Clan DetermineChooser()
		{
			return base.Kingdom.RulingClan;
		}

		protected override bool ShouldBeCancelledInternal()
		{
			return base.Kingdom.IsAtWarWith(this.FactionToDeclareWarOn);
		}

		public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			foreach (DecisionOutcome decisionOutcome in possibleOutcomes)
			{
				if (((DeclareWarDecision.DeclareWarDecisionOutcome)decisionOutcome).ShouldWarBeDeclared)
				{
					decisionOutcome.SetSponsor(base.ProposerClan);
				}
				else
				{
					base.AssignDefaultSponsor(decisionOutcome);
				}
			}
		}

		public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
		{
			if (((DeclareWarDecision.DeclareWarDecisionOutcome)chosenOutcome).ShouldWarBeDeclared)
			{
				DeclareWarAction.ApplyByKingdomDecision(base.Kingdom, this.FactionToDeclareWarOn);
			}
		}

		public override TextObject GetSecondaryEffects()
		{
			return new TextObject("{=!}All supporters gains some relation with each other.", null);
		}

		public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
		{
		}

		public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false)
		{
			TextObject textObject;
			if (((DeclareWarDecision.DeclareWarDecisionOutcome)chosenOutcome).ShouldWarBeDeclared)
			{
				if (base.IsSingleClanDecision())
				{
					textObject = new TextObject("{=Shk9QCDg}{AGGRESSOR_RULER.NAME} of the {AGGRESSOR_KINGDOM} has declared war on the {KINGDOM}.", null);
				}
				else if (supportStatus == KingdomDecision.SupportStatus.Majority)
				{
					textObject = new TextObject("{=cRpsjvOM}{AGGRESSOR_RULER.NAME} of the {AGGRESSOR_KINGDOM} has declared war on the {KINGDOM} with the support of {?AGGRESSOR_RULER.GENDER}her{?}his{\\?} council.", null);
				}
				else if (supportStatus == KingdomDecision.SupportStatus.Minority)
				{
					textObject = new TextObject("{=DphlPaF9}{AGGRESSOR_RULER.NAME} of the {AGGRESSOR_KINGDOM} has declared war on the {KINGDOM} despite opposition from {?AGGRESSOR_RULER.GENDER}her{?}his{\\?} council.", null);
				}
				else
				{
					textObject = new TextObject("{=RH8mgLEk}{AGGRESSOR_RULER.NAME} of the {AGGRESSOR_KINGDOM} has declared war on the {KINGDOM} with support from half of {?AGGRESSOR_RULER.GENDER}her{?}his{\\?} council.", null);
				}
			}
			else if (base.IsSingleClanDecision())
			{
				textObject = new TextObject("{=9WDK03GW}{AGGRESSOR_RULER.NAME} of the {AGGRESSOR_KINGDOM} chose not to go to war with the {KINGDOM}.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Majority)
			{
				textObject = new TextObject("{=8RBZaQKk}{AGGRESSOR_RULER.NAME} of the {AGGRESSOR_KINGDOM} chose not to go to war with the {KINGDOM} with the support of {?AGGRESSOR_RULER.GENDER}her{?}his{\\?} council.", null);
			}
			else if (supportStatus == KingdomDecision.SupportStatus.Minority)
			{
				textObject = new TextObject("{=XaZyU3Cn}{AGGRESSOR_RULER.NAME} of the {AGGRESSOR_KINGDOM} chose not to go to war with the {KINGDOM} despite the wishes of {?AGGRESSOR_RULER.GENDER}her{?}his{\\?} council.", null);
			}
			else
			{
				textObject = new TextObject("{=5L0wDGhR}{AGGRESSOR_RULER.NAME} of the {AGGRESSOR_KINGDOM} chose not to go to war with the {KINGDOM}, with {?AGGRESSOR_RULER.GENDER}her{?}his{\\?} council evenly split.", null);
			}
			StringHelpers.SetCharacterProperties("AGGRESSOR_RULER", base.Kingdom.Leader.CharacterObject, textObject, false);
			textObject.SetTextVariable("AGGRESSOR_KINGDOM", base.Kingdom.EncyclopediaLinkWithName);
			textObject.SetTextVariable("KINGDOM", this.FactionToDeclareWarOn.InformalName);
			return textObject;
		}

		public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return possibleOutcomes.FirstOrDefault((DecisionOutcome t) => ((DeclareWarDecision.DeclareWarDecisionOutcome)t).ShouldWarBeDeclared);
		}

		public float CalculateSupport(Clan clan)
		{
			return this.DetermineSupport(clan, new DeclareWarDecision.DeclareWarDecisionOutcome(true, base.Kingdom, this.FactionToDeclareWarOn));
		}

		public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
		{
			Hero leader = clan.Leader;
			DeclareWarDecision.DeclareWarDecisionOutcome declareWarDecisionOutcome = (DeclareWarDecision.DeclareWarDecisionOutcome)possibleOutcome;
			float num = (float)new DeclareWarBarterable(base.Kingdom, this.FactionToDeclareWarOn).GetValueForFaction(clan) * Campaign.Current.Models.DiplomacyModel.DenarsToInfluence();
			if (declareWarDecisionOutcome.ShouldWarBeDeclared)
			{
				float num2 = num;
				int num3 = clan.Leader.GetTraitLevel(DefaultTraits.Valor) * 20 - clan.Leader.GetTraitLevel(DefaultTraits.Mercy) * 10;
				return num2 + (float)num3;
			}
			float num4 = -num;
			int num5 = -clan.Leader.GetTraitLevel(DefaultTraits.Valor) * 20 + clan.Leader.GetTraitLevel(DefaultTraits.Mercy) * 10;
			return num4 + (float)num5;
		}

		[SaveableField(101)]
		public readonly IFaction FactionToDeclareWarOn;

		public class DeclareWarDecisionOutcome : DecisionOutcome
		{
			internal static void AutoGeneratedStaticCollectObjectsDeclareWarDecisionOutcome(object o, List<object> collectedObjects)
			{
				((DeclareWarDecision.DeclareWarDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this.Kingdom);
				collectedObjects.Add(this.FactionToDeclareWarOn);
			}

			internal static object AutoGeneratedGetMemberValueShouldWarBeDeclared(object o)
			{
				return ((DeclareWarDecision.DeclareWarDecisionOutcome)o).ShouldWarBeDeclared;
			}

			internal static object AutoGeneratedGetMemberValueKingdom(object o)
			{
				return ((DeclareWarDecision.DeclareWarDecisionOutcome)o).Kingdom;
			}

			internal static object AutoGeneratedGetMemberValueFactionToDeclareWarOn(object o)
			{
				return ((DeclareWarDecision.DeclareWarDecisionOutcome)o).FactionToDeclareWarOn;
			}

			public DeclareWarDecisionOutcome(bool shouldWarBeDeclared, Kingdom kingdom, IFaction factionToDeclareWarOn)
			{
				this.ShouldWarBeDeclared = shouldWarBeDeclared;
				this.Kingdom = kingdom;
				this.FactionToDeclareWarOn = factionToDeclareWarOn;
			}

			public override TextObject GetDecisionTitle()
			{
				TextObject textObject = new TextObject("{=kakxnaN5}{?SUPPORT}Yes{?}No{\\?}", null);
				textObject.SetTextVariable("SUPPORT", this.ShouldWarBeDeclared ? 1 : 0);
				return textObject;
			}

			public override TextObject GetDecisionDescription()
			{
				if (base.SponsorClan != null && this.Kingdom != null && this.FactionToDeclareWarOn != null && base.SponsorClan != Clan.PlayerClan)
				{
					TextObject empty = TextObject.Empty;
					if (this.ShouldWarBeDeclared)
					{
						Campaign.Current.Models.DiplomacyModel.GetScoreOfDeclaringWar(this.Kingdom, this.FactionToDeclareWarOn, base.SponsorClan, out empty);
					}
					if (empty != TextObject.Empty)
					{
						return empty;
					}
				}
				if (this.ShouldWarBeDeclared)
				{
					return new TextObject("{=w9olmhv0}It is time to declare war", null);
				}
				return new TextObject("{=epnk9qIt}We oppose a declaration of war", null);
			}

			public override string GetDecisionLink()
			{
				return null;
			}

			public override ImageIdentifier GetDecisionImageIdentifier()
			{
				return null;
			}

			[SaveableField(100)]
			public readonly bool ShouldWarBeDeclared;

			[SaveableField(110)]
			public readonly Kingdom Kingdom;

			[SaveableField(120)]
			public readonly IFaction FactionToDeclareWarOn;
		}
	}
}
