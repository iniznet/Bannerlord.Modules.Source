using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Election
{
	// Token: 0x0200027A RID: 634
	public class KingSelectionKingdomDecision : KingdomDecision
	{
		// Token: 0x06002100 RID: 8448 RVA: 0x0008C38E File Offset: 0x0008A58E
		internal static void AutoGeneratedStaticCollectObjectsKingSelectionKingdomDecision(object o, List<object> collectedObjects)
		{
			((KingSelectionKingdomDecision)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002101 RID: 8449 RVA: 0x0008C39C File Offset: 0x0008A59C
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._clanToExclude);
		}

		// Token: 0x06002102 RID: 8450 RVA: 0x0008C3B1 File Offset: 0x0008A5B1
		internal static object AutoGeneratedGetMemberValue_clanToExclude(object o)
		{
			return ((KingSelectionKingdomDecision)o)._clanToExclude;
		}

		// Token: 0x06002103 RID: 8451 RVA: 0x0008C3BE File Offset: 0x0008A5BE
		public KingSelectionKingdomDecision(Clan proposerClan, Clan clanToExclude = null)
			: base(proposerClan)
		{
			this._clanToExclude = clanToExclude;
		}

		// Token: 0x06002104 RID: 8452 RVA: 0x0008C3CE File Offset: 0x0008A5CE
		public override bool IsAllowed()
		{
			return Campaign.Current.Models.KingdomDecisionPermissionModel.IsKingSelectionDecisionAllowed(base.Kingdom);
		}

		// Token: 0x06002105 RID: 8453 RVA: 0x0008C3EA File Offset: 0x0008A5EA
		public override int GetProposalInfluenceCost()
		{
			return Campaign.Current.Models.DiplomacyModel.GetInfluenceCostOfProposingWar(base.Kingdom);
		}

		// Token: 0x06002106 RID: 8454 RVA: 0x0008C406 File Offset: 0x0008A606
		public override TextObject GetGeneralTitle()
		{
			TextObject textObject = new TextObject("{=ZYSGp5vO}King of {KINGDOM_NAME}", null);
			textObject.SetTextVariable("KINGDOM_NAME", base.Kingdom.Name);
			return textObject;
		}

		// Token: 0x06002107 RID: 8455 RVA: 0x0008C42A File Offset: 0x0008A62A
		public override TextObject GetSupportTitle()
		{
			TextObject textObject = new TextObject("{=B0uKPW9S}Vote for the next ruler of {KINGDOM_NAME}", null);
			textObject.SetTextVariable("KINGDOM_NAME", base.Kingdom.Name);
			return textObject;
		}

		// Token: 0x06002108 RID: 8456 RVA: 0x0008C44E File Offset: 0x0008A64E
		public override TextObject GetChooseTitle()
		{
			TextObject textObject = new TextObject("{=L0Oxzkfw}Choose the next ruler of {KINGDOM_NAME}", null);
			textObject.SetTextVariable("KINGDOM_NAME", base.Kingdom.Name);
			return textObject;
		}

		// Token: 0x06002109 RID: 8457 RVA: 0x0008C472 File Offset: 0x0008A672
		public override TextObject GetSupportDescription()
		{
			TextObject textObject = new TextObject("{=XGuDyJMZ}{KINGDOM_NAME} will decide who will bear the crown as the next ruler. You can pick your stance regarding this decision.", null);
			textObject.SetTextVariable("KINGDOM_NAME", base.Kingdom.Name);
			return textObject;
		}

		// Token: 0x0600210A RID: 8458 RVA: 0x0008C496 File Offset: 0x0008A696
		public override TextObject GetChooseDescription()
		{
			TextObject textObject = new TextObject("{=L0Oxzkfw}Choose the next ruler of {KINGDOM_NAME}", null);
			textObject.SetTextVariable("KINGDOM_NAME", base.Kingdom.Name);
			return textObject;
		}

		// Token: 0x17000842 RID: 2114
		// (get) Token: 0x0600210B RID: 8459 RVA: 0x0008C4BA File Offset: 0x0008A6BA
		public override bool IsKingsVoteAllowed
		{
			get
			{
				return false;
			}
		}

		// Token: 0x0600210C RID: 8460 RVA: 0x0008C4BD File Offset: 0x0008A6BD
		protected override bool CanProposerClanChangeOpinion()
		{
			return true;
		}

		// Token: 0x0600210D RID: 8461 RVA: 0x0008C4C0 File Offset: 0x0008A6C0
		public override float CalculateMeritOfOutcome(DecisionOutcome candidateOutcome)
		{
			float num = 1f;
			foreach (Clan clan in base.Kingdom.Clans)
			{
				if (clan.Leader != Hero.MainHero)
				{
					num += this.CalculateMeritOfOutcomeForClan(clan, candidateOutcome);
				}
			}
			return num;
		}

		// Token: 0x0600210E RID: 8462 RVA: 0x0008C530 File Offset: 0x0008A730
		public float CalculateMeritOfOutcomeForClan(Clan clan, DecisionOutcome candidateOutcome)
		{
			float num = 0f;
			Hero king = ((KingSelectionKingdomDecision.KingSelectionDecisionOutcome)candidateOutcome).King;
			if (king.Clan == base.Kingdom.RulingClan)
			{
				if (clan.Leader.GetTraitLevel(DefaultTraits.Authoritarian) > 0)
				{
					num += 3f;
				}
				else if (clan.Leader.GetTraitLevel(DefaultTraits.Oligarchic) > 0)
				{
					num += 2f;
				}
				else
				{
					num += 1f;
				}
			}
			List<float> list = (from t in base.Kingdom.Clans
				select Campaign.Current.Models.DiplomacyModel.GetClanStrength(t) into t
				orderby t descending
				select t).ToList<float>();
			int num2 = 6;
			float num3 = (float)num2 / (list[0] - list[list.Count - 1]);
			float num4 = (float)num2 / 2f - num3 * list[0];
			float num5 = Campaign.Current.Models.DiplomacyModel.GetClanStrength(king.Clan) * num3 + num4;
			num += num5;
			return MathF.Clamp(num, -3f, 8f);
		}

		// Token: 0x0600210F RID: 8463 RVA: 0x0008C661 File Offset: 0x0008A861
		public override IEnumerable<DecisionOutcome> DetermineInitialCandidates()
		{
			Dictionary<Clan, float> dictionary = new Dictionary<Clan, float>();
			foreach (Clan clan in base.Kingdom.Clans)
			{
				if (Campaign.Current.Models.DiplomacyModel.IsClanEligibleToBecomeRuler(clan) && clan != this._clanToExclude)
				{
					dictionary.Add(clan, Campaign.Current.Models.DiplomacyModel.GetClanStrength(clan));
				}
			}
			IEnumerable<KeyValuePair<Clan, float>> enumerable = dictionary.OrderByDescending((KeyValuePair<Clan, float> t) => t.Value).Take(3);
			foreach (KeyValuePair<Clan, float> keyValuePair in enumerable)
			{
				yield return new KingSelectionKingdomDecision.KingSelectionDecisionOutcome(keyValuePair.Key.Leader);
			}
			IEnumerator<KeyValuePair<Clan, float>> enumerator2 = null;
			yield break;
			yield break;
		}

		// Token: 0x06002110 RID: 8464 RVA: 0x0008C671 File Offset: 0x0008A871
		public override Clan DetermineChooser()
		{
			return base.Kingdom.RulingClan;
		}

		// Token: 0x06002111 RID: 8465 RVA: 0x0008C67E File Offset: 0x0008A87E
		public override float DetermineSupport(Clan clan, DecisionOutcome possibleOutcome)
		{
			return this.CalculateMeritOfOutcomeForClan(clan, possibleOutcome) * 10f;
		}

		// Token: 0x06002112 RID: 8466 RVA: 0x0008C690 File Offset: 0x0008A890
		public override void DetermineSponsors(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			foreach (DecisionOutcome decisionOutcome in possibleOutcomes)
			{
				decisionOutcome.SetSponsor(((KingSelectionKingdomDecision.KingSelectionDecisionOutcome)decisionOutcome).King.Clan);
			}
		}

		// Token: 0x06002113 RID: 8467 RVA: 0x0008C6EC File Offset: 0x0008A8EC
		public override void ApplyChosenOutcome(DecisionOutcome chosenOutcome)
		{
			Hero king = ((KingSelectionKingdomDecision.KingSelectionDecisionOutcome)chosenOutcome).King;
			if (king != king.Clan.Leader)
			{
				ChangeClanLeaderAction.ApplyWithSelectedNewLeader(king.Clan, king);
			}
			ChangeRulingClanAction.Apply(base.Kingdom, king.Clan);
		}

		// Token: 0x06002114 RID: 8468 RVA: 0x0008C730 File Offset: 0x0008A930
		public override TextObject GetSecondaryEffects()
		{
			return new TextObject("{=!}All supporters gains some relation with each other.", null);
		}

		// Token: 0x06002115 RID: 8469 RVA: 0x0008C73D File Offset: 0x0008A93D
		public override void ApplySecondaryEffects(MBReadOnlyList<DecisionOutcome> possibleOutcomes, DecisionOutcome chosenOutcome)
		{
		}

		// Token: 0x06002116 RID: 8470 RVA: 0x0008C740 File Offset: 0x0008A940
		public override TextObject GetChosenOutcomeText(DecisionOutcome chosenOutcome, KingdomDecision.SupportStatus supportStatus, bool isShortVersion = false)
		{
			TextObject textObject = new TextObject("{=JQligd8z}The council of the {KINGDOM} has chosen {KING.NAME} as the new ruler.", null);
			textObject.SetTextVariable("KINGDOM", base.Kingdom.Name);
			StringHelpers.SetCharacterProperties("KING", ((KingSelectionKingdomDecision.KingSelectionDecisionOutcome)chosenOutcome).King.CharacterObject, textObject, false);
			return textObject;
		}

		// Token: 0x06002117 RID: 8471 RVA: 0x0008C78E File Offset: 0x0008A98E
		public override DecisionOutcome GetQueriedDecisionOutcome(MBReadOnlyList<DecisionOutcome> possibleOutcomes)
		{
			return possibleOutcomes.OrderByDescending((DecisionOutcome k) => k.Merit).FirstOrDefault<DecisionOutcome>();
		}

		// Token: 0x04000A58 RID: 2648
		[SaveableField(1)]
		private Clan _clanToExclude;

		// Token: 0x0200058C RID: 1420
		public class KingSelectionDecisionOutcome : DecisionOutcome
		{
			// Token: 0x0600445B RID: 17499 RVA: 0x001391A8 File Offset: 0x001373A8
			internal static void AutoGeneratedStaticCollectObjectsKingSelectionDecisionOutcome(object o, List<object> collectedObjects)
			{
				((KingSelectionKingdomDecision.KingSelectionDecisionOutcome)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x0600445C RID: 17500 RVA: 0x001391B6 File Offset: 0x001373B6
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this.King);
			}

			// Token: 0x0600445D RID: 17501 RVA: 0x001391CB File Offset: 0x001373CB
			internal static object AutoGeneratedGetMemberValueKing(object o)
			{
				return ((KingSelectionKingdomDecision.KingSelectionDecisionOutcome)o).King;
			}

			// Token: 0x0600445E RID: 17502 RVA: 0x001391D8 File Offset: 0x001373D8
			public KingSelectionDecisionOutcome(Hero king)
			{
				this.King = king;
			}

			// Token: 0x0600445F RID: 17503 RVA: 0x001391E8 File Offset: 0x001373E8
			public override TextObject GetDecisionTitle()
			{
				TextObject textObject = new TextObject("{=4G3Aeqna}{KING.NAME}", null);
				StringHelpers.SetCharacterProperties("KING", this.King.CharacterObject, textObject, false);
				return textObject;
			}

			// Token: 0x06004460 RID: 17504 RVA: 0x0013921C File Offset: 0x0013741C
			public override TextObject GetDecisionDescription()
			{
				TextObject textObject = new TextObject("{=FTjKWm8s}{KING.NAME} should rule us", null);
				StringHelpers.SetCharacterProperties("KING", this.King.CharacterObject, textObject, false);
				return textObject;
			}

			// Token: 0x06004461 RID: 17505 RVA: 0x0013924E File Offset: 0x0013744E
			public override string GetDecisionLink()
			{
				return null;
			}

			// Token: 0x06004462 RID: 17506 RVA: 0x00139251 File Offset: 0x00137451
			public override ImageIdentifier GetDecisionImageIdentifier()
			{
				return null;
			}

			// Token: 0x04001729 RID: 5929
			[SaveableField(100)]
			public readonly Hero King;
		}
	}
}
