using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem
{
	public sealed class CultureObject : BasicCultureObject
	{
		internal static void AutoGeneratedStaticCollectObjectsCultureObject(object o, List<object> collectedObjects)
		{
			((CultureObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public CultureTrait[] Traits { get; private set; }

		public bool HasTrait(CultureTrait trait)
		{
			return this.Traits.Contains(trait);
		}

		public bool HasFeat(FeatObject feat)
		{
			return this._cultureFeats.Contains(feat);
		}

		public IEnumerable<FeatObject> GetCulturalFeats(Func<FeatObject, bool> predicate = null)
		{
			foreach (FeatObject featObject in this._cultureFeats)
			{
				if (predicate == null || predicate(featObject))
				{
					yield return featObject;
				}
			}
			List<FeatObject>.Enumerator enumerator = default(List<FeatObject>.Enumerator);
			yield break;
			yield break;
		}

		public string BodyPropertiesValue { get; private set; }

		public CharacterObject BasicTroop { get; private set; }

		public CharacterObject EliteBasicTroop { get; private set; }

		public CharacterObject MeleeMilitiaTroop { get; private set; }

		public CharacterObject MeleeEliteMilitiaTroop { get; private set; }

		public CharacterObject RangedEliteMilitiaTroop { get; private set; }

		public CharacterObject RangedMilitiaTroop { get; private set; }

		public CharacterObject TournamentMaster { get; private set; }

		public CharacterObject Villager { get; private set; }

		public CharacterObject CaravanMaster { get; private set; }

		public CharacterObject ArmedTrader { get; private set; }

		public CharacterObject CaravanGuard { get; private set; }

		public CharacterObject DuelPreset { get; private set; }

		public CharacterObject PrisonGuard { get; private set; }

		public CharacterObject Guard { get; private set; }

		public CharacterObject Steward { get; private set; }

		public CharacterObject Blacksmith { get; private set; }

		public CharacterObject Weaponsmith { get; private set; }

		public CharacterObject Townswoman { get; private set; }

		public CharacterObject TownswomanInfant { get; private set; }

		public CharacterObject TownswomanChild { get; private set; }

		public CharacterObject TownswomanTeenager { get; private set; }

		public CharacterObject VillageWoman { get; private set; }

		public CharacterObject VillagerMaleChild { get; private set; }

		public CharacterObject VillagerMaleTeenager { get; private set; }

		public CharacterObject VillagerFemaleChild { get; private set; }

		public CharacterObject VillagerFemaleTeenager { get; private set; }

		public CharacterObject Townsman { get; private set; }

		public CharacterObject TownsmanInfant { get; private set; }

		public CharacterObject TownsmanChild { get; private set; }

		public CharacterObject TownsmanTeenager { get; private set; }

		public CharacterObject RansomBroker { get; private set; }

		public CharacterObject GangleaderBodyguard { get; private set; }

		public CharacterObject MerchantNotary { get; private set; }

		public CharacterObject ArtisanNotary { get; private set; }

		public CharacterObject PreacherNotary { get; private set; }

		public CharacterObject RuralNotableNotary { get; private set; }

		public CharacterObject ShopWorker { get; private set; }

		public CharacterObject Tavernkeeper { get; private set; }

		public CharacterObject TavernGamehost { get; private set; }

		public CharacterObject Musician { get; private set; }

		public CharacterObject TavernWench { get; private set; }

		public CharacterObject Armorer { get; private set; }

		public CharacterObject HorseMerchant { get; private set; }

		public CharacterObject Barber { get; private set; }

		public CharacterObject Merchant { get; private set; }

		public CharacterObject Beggar { get; private set; }

		public CharacterObject FemaleBeggar { get; private set; }

		public CharacterObject FemaleDancer { get; private set; }

		public CharacterObject MilitiaArcher { get; private set; }

		public CharacterObject MilitiaVeteranArcher { get; private set; }

		public CharacterObject MilitiaSpearman { get; private set; }

		public CharacterObject MilitiaVeteranSpearman { get; private set; }

		public CharacterObject GearPracticeDummy { get; private set; }

		public CharacterObject WeaponPracticeStage1 { get; private set; }

		public CharacterObject WeaponPracticeStage2 { get; private set; }

		public CharacterObject WeaponPracticeStage3 { get; private set; }

		public CharacterObject GearDummy { get; private set; }

		public MBEquipmentRoster DefaultBattleEquipmentRoster { get; private set; }

		public MBEquipmentRoster DefaultCivilianEquipmentRoster { get; private set; }

		public CharacterObject BanditChief { get; private set; }

		public CharacterObject BanditRaider { get; private set; }

		public CharacterObject BanditBandit { get; private set; }

		public CharacterObject BanditBoss { get; private set; }

		public TextObject EncyclopediaText { get; private set; }

		public PartyTemplateObject DefaultPartyTemplate { get; private set; }

		public PartyTemplateObject VillagerPartyTemplate { get; private set; }

		public PartyTemplateObject MilitiaPartyTemplate { get; private set; }

		public PartyTemplateObject RebelsPartyTemplate { get; private set; }

		public PartyTemplateObject CaravanPartyTemplate { get; private set; }

		public PartyTemplateObject EliteCaravanPartyTemplate { get; private set; }

		public PartyTemplateObject BanditBossPartyTemplate { get; private set; }

		public PartyTemplateObject VassalRewardTroopsPartyTemplate { get; private set; }

		public MBReadOnlyList<ItemObject> VassalRewardItems { get; private set; }

		public MBReadOnlyList<ItemObject> BannerBearerReplacementWeapons { get; private set; }

		public MBReadOnlyList<TextObject> MaleNameList
		{
			get
			{
				return this._maleNameList;
			}
		}

		public MBReadOnlyList<TextObject> FemaleNameList
		{
			get
			{
				return this._femaleNameList;
			}
		}

		public MBReadOnlyList<TextObject> ClanNameList
		{
			get
			{
				return this._clanNameList;
			}
		}

		public MBReadOnlyList<FeatObject> CultureFeats
		{
			get
			{
				return this._cultureFeats;
			}
		}

		public MBReadOnlyList<PolicyObject> DefaultPolicyList
		{
			get
			{
				return this._defaultPolicyList;
			}
		}

		public MBReadOnlyList<int> PossibleClanBannerIconsIDs { get; private set; }

		public MBReadOnlyList<CharacterObject> NotableAndWandererTemplates { get; private set; }

		public MBReadOnlyList<CharacterObject> RebelliousHeroTemplates { get; private set; }

		public MBReadOnlyList<CharacterObject> LordTemplates { get; private set; }

		public MBReadOnlyList<CharacterObject> TournamentTeamTemplatesForOneParticipant { get; private set; }

		public MBReadOnlyList<CharacterObject> TournamentTeamTemplatesForTwoParticipant { get; private set; }

		public MBReadOnlyList<CharacterObject> TournamentTeamTemplatesForFourParticipant { get; private set; }

		public MBReadOnlyList<CharacterObject> BasicMercenaryTroops { get; private set; }

		public int TownEdgeNumber { get; set; }

		public int MilitiaBonus { get; set; }

		public int ProsperityBonus { get; set; }

		public CultureObject.BoardGameType BoardGame { get; private set; }

		public override string ToString()
		{
			return base.Name.ToString();
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.TownEdgeNumber = ((node.Attributes["town_edge_number"] == null) ? 0 : Convert.ToInt32(node.Attributes["town_edge_number"].Value));
			this.MilitiaBonus = ((node.Attributes["militia_bonus"] == null) ? 0 : Convert.ToInt32(node.Attributes["militia_bonus"].Value));
			this.ProsperityBonus = ((node.Attributes["prosperity_bonus"] == null) ? 0 : Convert.ToInt32(node.Attributes["prosperity_bonus"].Value));
			this.DefaultPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("default_party_template", node);
			this.VillagerPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("villager_party_template", node);
			this.MilitiaPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("militia_party_template", node);
			this.RebelsPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("rebels_party_template", node);
			this.CaravanPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("caravan_party_template", node);
			this.EliteCaravanPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("elite_caravan_party_template", node);
			this.BanditBossPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("bandit_boss_party_template", node);
			this.VassalRewardTroopsPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("vassal_reward_party_template", node);
			this.EliteBasicTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("elite_basic_troop", node);
			this.MeleeEliteMilitiaTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("melee_elite_militia_troop", node);
			this.RangedEliteMilitiaTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("ranged_elite_militia_troop", node);
			this.MeleeMilitiaTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("melee_militia_troop", node);
			this.RangedMilitiaTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("ranged_militia_troop", node);
			this.BasicTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("basic_troop", node);
			this.DefaultBattleEquipmentRoster = objectManager.ReadObjectReferenceFromXml<MBEquipmentRoster>("default_battle_equipment_roster", node);
			this.DefaultCivilianEquipmentRoster = objectManager.ReadObjectReferenceFromXml<MBEquipmentRoster>("default_civilian_equipment_roster", node);
			this.TournamentMaster = objectManager.ReadObjectReferenceFromXml<CharacterObject>("tournament_master", node);
			this.Villager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager", node);
			this.CaravanMaster = objectManager.ReadObjectReferenceFromXml<CharacterObject>("caravan_master", node);
			this.ArmedTrader = objectManager.ReadObjectReferenceFromXml<CharacterObject>("armed_trader", node);
			this.CaravanGuard = objectManager.ReadObjectReferenceFromXml<CharacterObject>("caravan_guard", node);
			this.DuelPreset = objectManager.ReadObjectReferenceFromXml<CharacterObject>("duel_preset", node);
			this.PrisonGuard = objectManager.ReadObjectReferenceFromXml<CharacterObject>("prison_guard", node);
			this.Guard = objectManager.ReadObjectReferenceFromXml<CharacterObject>("guard", node);
			this.Blacksmith = objectManager.ReadObjectReferenceFromXml<CharacterObject>("blacksmith", node);
			this.Weaponsmith = objectManager.ReadObjectReferenceFromXml<CharacterObject>("weaponsmith", node);
			this.Townswoman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townswoman", node);
			this.TownswomanInfant = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townswoman_infant", node);
			this.TownswomanChild = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townswoman_child", node);
			this.TownswomanTeenager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townswoman_teenager", node);
			this.Townsman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townsman", node);
			this.TownsmanInfant = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townsman_infant", node);
			this.TownsmanChild = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townsman_child", node);
			this.TownsmanTeenager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townsman_teenager", node);
			this.VillageWoman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("village_woman", node);
			this.VillagerMaleChild = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager_male_child", node);
			this.VillagerMaleTeenager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager_male_teenager", node);
			this.VillagerFemaleChild = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager_female_child", node);
			this.VillagerFemaleTeenager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager_female_teenager", node);
			this.RansomBroker = objectManager.ReadObjectReferenceFromXml<CharacterObject>("ransom_broker", node);
			this.GangleaderBodyguard = objectManager.ReadObjectReferenceFromXml<CharacterObject>("gangleader_bodyguard", node);
			this.MerchantNotary = objectManager.ReadObjectReferenceFromXml<CharacterObject>("merchant_notary", node);
			this.ArtisanNotary = objectManager.ReadObjectReferenceFromXml<CharacterObject>("artisan_notary", node);
			this.PreacherNotary = objectManager.ReadObjectReferenceFromXml<CharacterObject>("preacher_notary", node);
			this.RuralNotableNotary = objectManager.ReadObjectReferenceFromXml<CharacterObject>("rural_notable_notary", node);
			this.ShopWorker = objectManager.ReadObjectReferenceFromXml<CharacterObject>("shop_worker", node);
			this.Tavernkeeper = objectManager.ReadObjectReferenceFromXml<CharacterObject>("tavernkeeper", node);
			this.TavernGamehost = objectManager.ReadObjectReferenceFromXml<CharacterObject>("taverngamehost", node);
			this.Musician = objectManager.ReadObjectReferenceFromXml<CharacterObject>("musician", node);
			this.TavernWench = objectManager.ReadObjectReferenceFromXml<CharacterObject>("tavern_wench", node);
			this.Armorer = objectManager.ReadObjectReferenceFromXml<CharacterObject>("armorer", node);
			this.HorseMerchant = objectManager.ReadObjectReferenceFromXml<CharacterObject>("horseMerchant", node);
			this.Barber = objectManager.ReadObjectReferenceFromXml<CharacterObject>("barber", node);
			this.Merchant = objectManager.ReadObjectReferenceFromXml<CharacterObject>("merchant", node);
			this.Beggar = objectManager.ReadObjectReferenceFromXml<CharacterObject>("beggar", node);
			this.FemaleBeggar = objectManager.ReadObjectReferenceFromXml<CharacterObject>("female_beggar", node);
			this.FemaleDancer = objectManager.ReadObjectReferenceFromXml<CharacterObject>("female_dancer", node);
			this.MilitiaArcher = objectManager.ReadObjectReferenceFromXml<CharacterObject>("militia_archer", node);
			this.MilitiaVeteranArcher = objectManager.ReadObjectReferenceFromXml<CharacterObject>("militia_veteran_archer", node);
			this.MilitiaSpearman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("militia_spearman      ", node);
			this.MilitiaVeteranSpearman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("militia_veteran_spearman", node);
			this.GearPracticeDummy = objectManager.ReadObjectReferenceFromXml<CharacterObject>("gear_practice_dummy     ", node);
			this.WeaponPracticeStage1 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("weapon_practice_stage_1", node);
			this.WeaponPracticeStage2 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("weapon_practice_stage_2", node);
			this.WeaponPracticeStage3 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("weapon_practice_stage_3", node);
			this.GearDummy = objectManager.ReadObjectReferenceFromXml<CharacterObject>("gear_dummy", node);
			this.BanditBandit = objectManager.ReadObjectReferenceFromXml<CharacterObject>("bandit_bandit", node);
			this.BanditRaider = objectManager.ReadObjectReferenceFromXml<CharacterObject>("bandit_raider", node);
			this.BanditChief = objectManager.ReadObjectReferenceFromXml<CharacterObject>("bandit_chief", node);
			this.BanditBoss = objectManager.ReadObjectReferenceFromXml<CharacterObject>("bandit_boss", node);
			this.EncyclopediaText = ((node.Attributes["text"] != null) ? new TextObject(node.Attributes["text"].Value, null) : TextObject.Empty);
			CultureObject.BoardGameType boardGameType;
			if (node.Attributes["board_game_type"] != null && Enum.TryParse<CultureObject.BoardGameType>(node.Attributes["board_game_type"].Value, out boardGameType))
			{
				this.BoardGame = boardGameType;
			}
			XmlNodeList childNodes = node.ChildNodes;
			this._defaultPolicyList = new MBList<PolicyObject>();
			this._maleNameList = new MBList<TextObject>();
			this._femaleNameList = new MBList<TextObject>();
			this._clanNameList = new MBList<TextObject>();
			this._cultureFeats = new MBList<FeatObject>();
			MBList<int> mblist = new MBList<int>();
			MBList<CharacterObject> mblist2 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist3 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist4 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist5 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist6 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist7 = new MBList<CharacterObject>();
			MBList<ItemObject> mblist8 = new MBList<ItemObject>();
			MBList<ItemObject> mblist9 = new MBList<ItemObject>();
			MBList<CharacterObject> mblist10 = new MBList<CharacterObject>();
			foreach (object obj in childNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Name == "default_policies")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj2 = enumerator2.Current;
							XmlNode xmlNode2 = (XmlNode)obj2;
							PolicyObject @object = objectManager.GetObject<PolicyObject>(xmlNode2.Attributes["id"].Value);
							this._defaultPolicyList.Add(@object);
						}
						continue;
					}
				}
				if (xmlNode.Name == "male_names")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj3 = enumerator2.Current;
							XmlNode xmlNode3 = (XmlNode)obj3;
							this._maleNameList.Add(new TextObject(xmlNode3.Attributes["name"].Value, null));
						}
						continue;
					}
				}
				if (xmlNode.Name == "female_names")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj4 = enumerator2.Current;
							XmlNode xmlNode4 = (XmlNode)obj4;
							this._femaleNameList.Add(new TextObject(xmlNode4.Attributes["name"].Value, null));
						}
						continue;
					}
				}
				if (xmlNode.Name == "clan_names")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj5 = enumerator2.Current;
							XmlNode xmlNode5 = (XmlNode)obj5;
							this._clanNameList.Add(new TextObject(xmlNode5.Attributes["name"].Value, null));
						}
						continue;
					}
				}
				if (xmlNode.Name == "cultural_feats")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj6 = enumerator2.Current;
							string value = ((XmlNode)obj6).Attributes["id"].Value;
							FeatObject object2 = MBObjectManager.Instance.GetObject<FeatObject>(value);
							if (!this._cultureFeats.Contains(object2))
							{
								this._cultureFeats.Add(object2);
							}
							else
							{
								Debug.FailedAssert("Feat object already exists!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\CultureObject.cs", "Deserialize", 375);
							}
						}
						continue;
					}
				}
				if (xmlNode.Name == "possible_clan_banner_icon_ids")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj7 = enumerator2.Current;
							int num;
							int.TryParse(((XmlNode)obj7).Attributes["id"].Value, out num);
							mblist.Add(num);
						}
						continue;
					}
				}
				if (xmlNode.Name == "notable_and_wanderer_templates")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj8 = enumerator2.Current;
							XmlNode xmlNode6 = (XmlNode)obj8;
							CharacterObject characterObject = objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode6);
							mblist2.Add(characterObject);
						}
						continue;
					}
				}
				if (xmlNode.Name == "lord_templates")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj9 = enumerator2.Current;
							XmlNode xmlNode7 = (XmlNode)obj9;
							CharacterObject characterObject2 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode7);
							mblist4.Add(characterObject2);
						}
						continue;
					}
				}
				if (xmlNode.Name == "rebellion_hero_templates")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj10 = enumerator2.Current;
							XmlNode xmlNode8 = (XmlNode)obj10;
							CharacterObject characterObject3 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode8);
							mblist3.Add(characterObject3);
						}
						continue;
					}
				}
				if (xmlNode.Name == "tournament_team_templates_one_participant")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj11 = enumerator2.Current;
							XmlNode xmlNode9 = (XmlNode)obj11;
							mblist5.Add(objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode9));
						}
						continue;
					}
				}
				if (xmlNode.Name == "tournament_team_templates_two_participant")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj12 = enumerator2.Current;
							XmlNode xmlNode10 = (XmlNode)obj12;
							mblist6.Add(objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode10));
						}
						continue;
					}
				}
				if (xmlNode.Name == "tournament_team_templates_four_participant")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj13 = enumerator2.Current;
							XmlNode xmlNode11 = (XmlNode)obj13;
							mblist7.Add(objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode11));
						}
						continue;
					}
				}
				if (xmlNode.Name == "vassal_reward_items")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj14 = enumerator2.Current;
							XmlNode xmlNode12 = (XmlNode)obj14;
							mblist8.Add(objectManager.ReadObjectReferenceFromXml<ItemObject>("id", xmlNode12));
						}
						continue;
					}
				}
				if (xmlNode.Name == "basic_mercenary_troops")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj15 = enumerator2.Current;
							XmlNode xmlNode13 = (XmlNode)obj15;
							mblist10.Add(objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode13));
						}
						continue;
					}
				}
				if (xmlNode.Name == "banner_bearer_replacement_weapons")
				{
					foreach (object obj16 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode14 = (XmlNode)obj16;
						mblist9.Add(objectManager.ReadObjectReferenceFromXml<ItemObject>("id", xmlNode14));
					}
				}
			}
			this.PossibleClanBannerIconsIDs = mblist;
			this.NotableAndWandererTemplates = mblist2;
			this.RebelliousHeroTemplates = mblist3;
			this.LordTemplates = mblist4;
			this.TournamentTeamTemplatesForOneParticipant = mblist5;
			this.TournamentTeamTemplatesForTwoParticipant = mblist6;
			this.TournamentTeamTemplatesForFourParticipant = mblist7;
			mblist8.RemoveAll((ItemObject x) => !x.IsReady);
			this.VassalRewardItems = mblist8;
			this.BasicMercenaryTroops = mblist10;
			mblist9.RemoveAll((ItemObject x) => !x.IsReady);
			this.BannerBearerReplacementWeapons = mblist9;
		}

		public override TextObject GetName()
		{
			return base.Name;
		}

		private MBList<TextObject> _maleNameList;

		private MBList<TextObject> _femaleNameList;

		private MBList<TextObject> _clanNameList;

		private MBList<FeatObject> _cultureFeats;

		private MBList<PolicyObject> _defaultPolicyList;

		public enum BoardGameType
		{
			None = -1,
			Seega,
			Puluc,
			Konane,
			MuTorere,
			Tablut,
			BaghChal,
			Total
		}
	}
}
