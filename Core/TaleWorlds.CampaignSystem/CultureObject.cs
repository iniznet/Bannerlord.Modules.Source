using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x0200005B RID: 91
	public sealed class CultureObject : BasicCultureObject
	{
		// Token: 0x06000A4F RID: 2639 RVA: 0x000392F2 File Offset: 0x000374F2
		internal static void AutoGeneratedStaticCollectObjectsCultureObject(object o, List<object> collectedObjects)
		{
			((CultureObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000A50 RID: 2640 RVA: 0x00039300 File Offset: 0x00037500
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x17000237 RID: 567
		// (get) Token: 0x06000A51 RID: 2641 RVA: 0x00039309 File Offset: 0x00037509
		// (set) Token: 0x06000A52 RID: 2642 RVA: 0x00039311 File Offset: 0x00037511
		public CultureTrait[] Traits { get; private set; }

		// Token: 0x06000A53 RID: 2643 RVA: 0x0003931A File Offset: 0x0003751A
		public bool HasTrait(CultureTrait trait)
		{
			return this.Traits.Contains(trait);
		}

		// Token: 0x06000A54 RID: 2644 RVA: 0x00039328 File Offset: 0x00037528
		public bool HasFeat(FeatObject feat)
		{
			return this._cultureFeats.Contains(feat);
		}

		// Token: 0x06000A55 RID: 2645 RVA: 0x00039336 File Offset: 0x00037536
		public IEnumerable<FeatObject> GetCulturalFeats(Func<FeatObject, bool> predicate = null)
		{
			foreach (FeatObject featObject in this._cultureFeats)
			{
				if (predicate == null || predicate(featObject))
				{
					yield return featObject;
				}
			}
			List<FeatObject>.Enumerator enumerator = default(List<FeatObject>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x17000238 RID: 568
		// (get) Token: 0x06000A56 RID: 2646 RVA: 0x0003934D File Offset: 0x0003754D
		// (set) Token: 0x06000A57 RID: 2647 RVA: 0x00039355 File Offset: 0x00037555
		public string BodyPropertiesValue { get; private set; }

		// Token: 0x17000239 RID: 569
		// (get) Token: 0x06000A58 RID: 2648 RVA: 0x0003935E File Offset: 0x0003755E
		// (set) Token: 0x06000A59 RID: 2649 RVA: 0x00039366 File Offset: 0x00037566
		public CharacterObject BasicTroop { get; private set; }

		// Token: 0x1700023A RID: 570
		// (get) Token: 0x06000A5A RID: 2650 RVA: 0x0003936F File Offset: 0x0003756F
		// (set) Token: 0x06000A5B RID: 2651 RVA: 0x00039377 File Offset: 0x00037577
		public CharacterObject EliteBasicTroop { get; private set; }

		// Token: 0x1700023B RID: 571
		// (get) Token: 0x06000A5C RID: 2652 RVA: 0x00039380 File Offset: 0x00037580
		// (set) Token: 0x06000A5D RID: 2653 RVA: 0x00039388 File Offset: 0x00037588
		public CharacterObject MeleeMilitiaTroop { get; private set; }

		// Token: 0x1700023C RID: 572
		// (get) Token: 0x06000A5E RID: 2654 RVA: 0x00039391 File Offset: 0x00037591
		// (set) Token: 0x06000A5F RID: 2655 RVA: 0x00039399 File Offset: 0x00037599
		public CharacterObject MeleeEliteMilitiaTroop { get; private set; }

		// Token: 0x1700023D RID: 573
		// (get) Token: 0x06000A60 RID: 2656 RVA: 0x000393A2 File Offset: 0x000375A2
		// (set) Token: 0x06000A61 RID: 2657 RVA: 0x000393AA File Offset: 0x000375AA
		public CharacterObject RangedEliteMilitiaTroop { get; private set; }

		// Token: 0x1700023E RID: 574
		// (get) Token: 0x06000A62 RID: 2658 RVA: 0x000393B3 File Offset: 0x000375B3
		// (set) Token: 0x06000A63 RID: 2659 RVA: 0x000393BB File Offset: 0x000375BB
		public CharacterObject RangedMilitiaTroop { get; private set; }

		// Token: 0x1700023F RID: 575
		// (get) Token: 0x06000A64 RID: 2660 RVA: 0x000393C4 File Offset: 0x000375C4
		// (set) Token: 0x06000A65 RID: 2661 RVA: 0x000393CC File Offset: 0x000375CC
		public CharacterObject TournamentMaster { get; private set; }

		// Token: 0x17000240 RID: 576
		// (get) Token: 0x06000A66 RID: 2662 RVA: 0x000393D5 File Offset: 0x000375D5
		// (set) Token: 0x06000A67 RID: 2663 RVA: 0x000393DD File Offset: 0x000375DD
		public CharacterObject Villager { get; private set; }

		// Token: 0x17000241 RID: 577
		// (get) Token: 0x06000A68 RID: 2664 RVA: 0x000393E6 File Offset: 0x000375E6
		// (set) Token: 0x06000A69 RID: 2665 RVA: 0x000393EE File Offset: 0x000375EE
		public CharacterObject CaravanMaster { get; private set; }

		// Token: 0x17000242 RID: 578
		// (get) Token: 0x06000A6A RID: 2666 RVA: 0x000393F7 File Offset: 0x000375F7
		// (set) Token: 0x06000A6B RID: 2667 RVA: 0x000393FF File Offset: 0x000375FF
		public CharacterObject ArmedTrader { get; private set; }

		// Token: 0x17000243 RID: 579
		// (get) Token: 0x06000A6C RID: 2668 RVA: 0x00039408 File Offset: 0x00037608
		// (set) Token: 0x06000A6D RID: 2669 RVA: 0x00039410 File Offset: 0x00037610
		public CharacterObject CaravanGuard { get; private set; }

		// Token: 0x17000244 RID: 580
		// (get) Token: 0x06000A6E RID: 2670 RVA: 0x00039419 File Offset: 0x00037619
		// (set) Token: 0x06000A6F RID: 2671 RVA: 0x00039421 File Offset: 0x00037621
		public CharacterObject DuelPreset { get; private set; }

		// Token: 0x17000245 RID: 581
		// (get) Token: 0x06000A70 RID: 2672 RVA: 0x0003942A File Offset: 0x0003762A
		// (set) Token: 0x06000A71 RID: 2673 RVA: 0x00039432 File Offset: 0x00037632
		public CharacterObject PrisonGuard { get; private set; }

		// Token: 0x17000246 RID: 582
		// (get) Token: 0x06000A72 RID: 2674 RVA: 0x0003943B File Offset: 0x0003763B
		// (set) Token: 0x06000A73 RID: 2675 RVA: 0x00039443 File Offset: 0x00037643
		public CharacterObject Guard { get; private set; }

		// Token: 0x17000247 RID: 583
		// (get) Token: 0x06000A74 RID: 2676 RVA: 0x0003944C File Offset: 0x0003764C
		// (set) Token: 0x06000A75 RID: 2677 RVA: 0x00039454 File Offset: 0x00037654
		public CharacterObject Steward { get; private set; }

		// Token: 0x17000248 RID: 584
		// (get) Token: 0x06000A76 RID: 2678 RVA: 0x0003945D File Offset: 0x0003765D
		// (set) Token: 0x06000A77 RID: 2679 RVA: 0x00039465 File Offset: 0x00037665
		public CharacterObject Blacksmith { get; private set; }

		// Token: 0x17000249 RID: 585
		// (get) Token: 0x06000A78 RID: 2680 RVA: 0x0003946E File Offset: 0x0003766E
		// (set) Token: 0x06000A79 RID: 2681 RVA: 0x00039476 File Offset: 0x00037676
		public CharacterObject Weaponsmith { get; private set; }

		// Token: 0x1700024A RID: 586
		// (get) Token: 0x06000A7A RID: 2682 RVA: 0x0003947F File Offset: 0x0003767F
		// (set) Token: 0x06000A7B RID: 2683 RVA: 0x00039487 File Offset: 0x00037687
		public CharacterObject Townswoman { get; private set; }

		// Token: 0x1700024B RID: 587
		// (get) Token: 0x06000A7C RID: 2684 RVA: 0x00039490 File Offset: 0x00037690
		// (set) Token: 0x06000A7D RID: 2685 RVA: 0x00039498 File Offset: 0x00037698
		public CharacterObject TownswomanInfant { get; private set; }

		// Token: 0x1700024C RID: 588
		// (get) Token: 0x06000A7E RID: 2686 RVA: 0x000394A1 File Offset: 0x000376A1
		// (set) Token: 0x06000A7F RID: 2687 RVA: 0x000394A9 File Offset: 0x000376A9
		public CharacterObject TownswomanChild { get; private set; }

		// Token: 0x1700024D RID: 589
		// (get) Token: 0x06000A80 RID: 2688 RVA: 0x000394B2 File Offset: 0x000376B2
		// (set) Token: 0x06000A81 RID: 2689 RVA: 0x000394BA File Offset: 0x000376BA
		public CharacterObject TownswomanTeenager { get; private set; }

		// Token: 0x1700024E RID: 590
		// (get) Token: 0x06000A82 RID: 2690 RVA: 0x000394C3 File Offset: 0x000376C3
		// (set) Token: 0x06000A83 RID: 2691 RVA: 0x000394CB File Offset: 0x000376CB
		public CharacterObject VillageWoman { get; private set; }

		// Token: 0x1700024F RID: 591
		// (get) Token: 0x06000A84 RID: 2692 RVA: 0x000394D4 File Offset: 0x000376D4
		// (set) Token: 0x06000A85 RID: 2693 RVA: 0x000394DC File Offset: 0x000376DC
		public CharacterObject VillagerMaleChild { get; private set; }

		// Token: 0x17000250 RID: 592
		// (get) Token: 0x06000A86 RID: 2694 RVA: 0x000394E5 File Offset: 0x000376E5
		// (set) Token: 0x06000A87 RID: 2695 RVA: 0x000394ED File Offset: 0x000376ED
		public CharacterObject VillagerMaleTeenager { get; private set; }

		// Token: 0x17000251 RID: 593
		// (get) Token: 0x06000A88 RID: 2696 RVA: 0x000394F6 File Offset: 0x000376F6
		// (set) Token: 0x06000A89 RID: 2697 RVA: 0x000394FE File Offset: 0x000376FE
		public CharacterObject VillagerFemaleChild { get; private set; }

		// Token: 0x17000252 RID: 594
		// (get) Token: 0x06000A8A RID: 2698 RVA: 0x00039507 File Offset: 0x00037707
		// (set) Token: 0x06000A8B RID: 2699 RVA: 0x0003950F File Offset: 0x0003770F
		public CharacterObject VillagerFemaleTeenager { get; private set; }

		// Token: 0x17000253 RID: 595
		// (get) Token: 0x06000A8C RID: 2700 RVA: 0x00039518 File Offset: 0x00037718
		// (set) Token: 0x06000A8D RID: 2701 RVA: 0x00039520 File Offset: 0x00037720
		public CharacterObject Townsman { get; private set; }

		// Token: 0x17000254 RID: 596
		// (get) Token: 0x06000A8E RID: 2702 RVA: 0x00039529 File Offset: 0x00037729
		// (set) Token: 0x06000A8F RID: 2703 RVA: 0x00039531 File Offset: 0x00037731
		public CharacterObject TownsmanInfant { get; private set; }

		// Token: 0x17000255 RID: 597
		// (get) Token: 0x06000A90 RID: 2704 RVA: 0x0003953A File Offset: 0x0003773A
		// (set) Token: 0x06000A91 RID: 2705 RVA: 0x00039542 File Offset: 0x00037742
		public CharacterObject TownsmanChild { get; private set; }

		// Token: 0x17000256 RID: 598
		// (get) Token: 0x06000A92 RID: 2706 RVA: 0x0003954B File Offset: 0x0003774B
		// (set) Token: 0x06000A93 RID: 2707 RVA: 0x00039553 File Offset: 0x00037753
		public CharacterObject TownsmanTeenager { get; private set; }

		// Token: 0x17000257 RID: 599
		// (get) Token: 0x06000A94 RID: 2708 RVA: 0x0003955C File Offset: 0x0003775C
		// (set) Token: 0x06000A95 RID: 2709 RVA: 0x00039564 File Offset: 0x00037764
		public CharacterObject RansomBroker { get; private set; }

		// Token: 0x17000258 RID: 600
		// (get) Token: 0x06000A96 RID: 2710 RVA: 0x0003956D File Offset: 0x0003776D
		// (set) Token: 0x06000A97 RID: 2711 RVA: 0x00039575 File Offset: 0x00037775
		public CharacterObject GangleaderBodyguard { get; private set; }

		// Token: 0x17000259 RID: 601
		// (get) Token: 0x06000A98 RID: 2712 RVA: 0x0003957E File Offset: 0x0003777E
		// (set) Token: 0x06000A99 RID: 2713 RVA: 0x00039586 File Offset: 0x00037786
		public CharacterObject MerchantNotary { get; private set; }

		// Token: 0x1700025A RID: 602
		// (get) Token: 0x06000A9A RID: 2714 RVA: 0x0003958F File Offset: 0x0003778F
		// (set) Token: 0x06000A9B RID: 2715 RVA: 0x00039597 File Offset: 0x00037797
		public CharacterObject ArtisanNotary { get; private set; }

		// Token: 0x1700025B RID: 603
		// (get) Token: 0x06000A9C RID: 2716 RVA: 0x000395A0 File Offset: 0x000377A0
		// (set) Token: 0x06000A9D RID: 2717 RVA: 0x000395A8 File Offset: 0x000377A8
		public CharacterObject PreacherNotary { get; private set; }

		// Token: 0x1700025C RID: 604
		// (get) Token: 0x06000A9E RID: 2718 RVA: 0x000395B1 File Offset: 0x000377B1
		// (set) Token: 0x06000A9F RID: 2719 RVA: 0x000395B9 File Offset: 0x000377B9
		public CharacterObject RuralNotableNotary { get; private set; }

		// Token: 0x1700025D RID: 605
		// (get) Token: 0x06000AA0 RID: 2720 RVA: 0x000395C2 File Offset: 0x000377C2
		// (set) Token: 0x06000AA1 RID: 2721 RVA: 0x000395CA File Offset: 0x000377CA
		public CharacterObject ShopWorker { get; private set; }

		// Token: 0x1700025E RID: 606
		// (get) Token: 0x06000AA2 RID: 2722 RVA: 0x000395D3 File Offset: 0x000377D3
		// (set) Token: 0x06000AA3 RID: 2723 RVA: 0x000395DB File Offset: 0x000377DB
		public CharacterObject Tavernkeeper { get; private set; }

		// Token: 0x1700025F RID: 607
		// (get) Token: 0x06000AA4 RID: 2724 RVA: 0x000395E4 File Offset: 0x000377E4
		// (set) Token: 0x06000AA5 RID: 2725 RVA: 0x000395EC File Offset: 0x000377EC
		public CharacterObject TavernGamehost { get; private set; }

		// Token: 0x17000260 RID: 608
		// (get) Token: 0x06000AA6 RID: 2726 RVA: 0x000395F5 File Offset: 0x000377F5
		// (set) Token: 0x06000AA7 RID: 2727 RVA: 0x000395FD File Offset: 0x000377FD
		public CharacterObject Musician { get; private set; }

		// Token: 0x17000261 RID: 609
		// (get) Token: 0x06000AA8 RID: 2728 RVA: 0x00039606 File Offset: 0x00037806
		// (set) Token: 0x06000AA9 RID: 2729 RVA: 0x0003960E File Offset: 0x0003780E
		public CharacterObject TavernWench { get; private set; }

		// Token: 0x17000262 RID: 610
		// (get) Token: 0x06000AAA RID: 2730 RVA: 0x00039617 File Offset: 0x00037817
		// (set) Token: 0x06000AAB RID: 2731 RVA: 0x0003961F File Offset: 0x0003781F
		public CharacterObject Armorer { get; private set; }

		// Token: 0x17000263 RID: 611
		// (get) Token: 0x06000AAC RID: 2732 RVA: 0x00039628 File Offset: 0x00037828
		// (set) Token: 0x06000AAD RID: 2733 RVA: 0x00039630 File Offset: 0x00037830
		public CharacterObject HorseMerchant { get; private set; }

		// Token: 0x17000264 RID: 612
		// (get) Token: 0x06000AAE RID: 2734 RVA: 0x00039639 File Offset: 0x00037839
		// (set) Token: 0x06000AAF RID: 2735 RVA: 0x00039641 File Offset: 0x00037841
		public CharacterObject Barber { get; private set; }

		// Token: 0x17000265 RID: 613
		// (get) Token: 0x06000AB0 RID: 2736 RVA: 0x0003964A File Offset: 0x0003784A
		// (set) Token: 0x06000AB1 RID: 2737 RVA: 0x00039652 File Offset: 0x00037852
		public CharacterObject Merchant { get; private set; }

		// Token: 0x17000266 RID: 614
		// (get) Token: 0x06000AB2 RID: 2738 RVA: 0x0003965B File Offset: 0x0003785B
		// (set) Token: 0x06000AB3 RID: 2739 RVA: 0x00039663 File Offset: 0x00037863
		public CharacterObject Beggar { get; private set; }

		// Token: 0x17000267 RID: 615
		// (get) Token: 0x06000AB4 RID: 2740 RVA: 0x0003966C File Offset: 0x0003786C
		// (set) Token: 0x06000AB5 RID: 2741 RVA: 0x00039674 File Offset: 0x00037874
		public CharacterObject FemaleBeggar { get; private set; }

		// Token: 0x17000268 RID: 616
		// (get) Token: 0x06000AB6 RID: 2742 RVA: 0x0003967D File Offset: 0x0003787D
		// (set) Token: 0x06000AB7 RID: 2743 RVA: 0x00039685 File Offset: 0x00037885
		public CharacterObject FemaleDancer { get; private set; }

		// Token: 0x17000269 RID: 617
		// (get) Token: 0x06000AB8 RID: 2744 RVA: 0x0003968E File Offset: 0x0003788E
		// (set) Token: 0x06000AB9 RID: 2745 RVA: 0x00039696 File Offset: 0x00037896
		public CharacterObject MilitiaArcher { get; private set; }

		// Token: 0x1700026A RID: 618
		// (get) Token: 0x06000ABA RID: 2746 RVA: 0x0003969F File Offset: 0x0003789F
		// (set) Token: 0x06000ABB RID: 2747 RVA: 0x000396A7 File Offset: 0x000378A7
		public CharacterObject MilitiaVeteranArcher { get; private set; }

		// Token: 0x1700026B RID: 619
		// (get) Token: 0x06000ABC RID: 2748 RVA: 0x000396B0 File Offset: 0x000378B0
		// (set) Token: 0x06000ABD RID: 2749 RVA: 0x000396B8 File Offset: 0x000378B8
		public CharacterObject MilitiaSpearman { get; private set; }

		// Token: 0x1700026C RID: 620
		// (get) Token: 0x06000ABE RID: 2750 RVA: 0x000396C1 File Offset: 0x000378C1
		// (set) Token: 0x06000ABF RID: 2751 RVA: 0x000396C9 File Offset: 0x000378C9
		public CharacterObject MilitiaVeteranSpearman { get; private set; }

		// Token: 0x1700026D RID: 621
		// (get) Token: 0x06000AC0 RID: 2752 RVA: 0x000396D2 File Offset: 0x000378D2
		// (set) Token: 0x06000AC1 RID: 2753 RVA: 0x000396DA File Offset: 0x000378DA
		public CharacterObject GearPracticeDummy { get; private set; }

		// Token: 0x1700026E RID: 622
		// (get) Token: 0x06000AC2 RID: 2754 RVA: 0x000396E3 File Offset: 0x000378E3
		// (set) Token: 0x06000AC3 RID: 2755 RVA: 0x000396EB File Offset: 0x000378EB
		public CharacterObject WeaponPracticeStage1 { get; private set; }

		// Token: 0x1700026F RID: 623
		// (get) Token: 0x06000AC4 RID: 2756 RVA: 0x000396F4 File Offset: 0x000378F4
		// (set) Token: 0x06000AC5 RID: 2757 RVA: 0x000396FC File Offset: 0x000378FC
		public CharacterObject WeaponPracticeStage2 { get; private set; }

		// Token: 0x17000270 RID: 624
		// (get) Token: 0x06000AC6 RID: 2758 RVA: 0x00039705 File Offset: 0x00037905
		// (set) Token: 0x06000AC7 RID: 2759 RVA: 0x0003970D File Offset: 0x0003790D
		public CharacterObject WeaponPracticeStage3 { get; private set; }

		// Token: 0x17000271 RID: 625
		// (get) Token: 0x06000AC8 RID: 2760 RVA: 0x00039716 File Offset: 0x00037916
		// (set) Token: 0x06000AC9 RID: 2761 RVA: 0x0003971E File Offset: 0x0003791E
		public CharacterObject GearDummy { get; private set; }

		// Token: 0x17000272 RID: 626
		// (get) Token: 0x06000ACA RID: 2762 RVA: 0x00039727 File Offset: 0x00037927
		// (set) Token: 0x06000ACB RID: 2763 RVA: 0x0003972F File Offset: 0x0003792F
		public MBEquipmentRoster DefaultBattleEquipmentRoster { get; private set; }

		// Token: 0x17000273 RID: 627
		// (get) Token: 0x06000ACC RID: 2764 RVA: 0x00039738 File Offset: 0x00037938
		// (set) Token: 0x06000ACD RID: 2765 RVA: 0x00039740 File Offset: 0x00037940
		public MBEquipmentRoster DefaultCivilianEquipmentRoster { get; private set; }

		// Token: 0x17000274 RID: 628
		// (get) Token: 0x06000ACE RID: 2766 RVA: 0x00039749 File Offset: 0x00037949
		// (set) Token: 0x06000ACF RID: 2767 RVA: 0x00039751 File Offset: 0x00037951
		public CharacterObject BanditChief { get; private set; }

		// Token: 0x17000275 RID: 629
		// (get) Token: 0x06000AD0 RID: 2768 RVA: 0x0003975A File Offset: 0x0003795A
		// (set) Token: 0x06000AD1 RID: 2769 RVA: 0x00039762 File Offset: 0x00037962
		public CharacterObject BanditRaider { get; private set; }

		// Token: 0x17000276 RID: 630
		// (get) Token: 0x06000AD2 RID: 2770 RVA: 0x0003976B File Offset: 0x0003796B
		// (set) Token: 0x06000AD3 RID: 2771 RVA: 0x00039773 File Offset: 0x00037973
		public CharacterObject BanditBandit { get; private set; }

		// Token: 0x17000277 RID: 631
		// (get) Token: 0x06000AD4 RID: 2772 RVA: 0x0003977C File Offset: 0x0003797C
		// (set) Token: 0x06000AD5 RID: 2773 RVA: 0x00039784 File Offset: 0x00037984
		public CharacterObject BanditBoss { get; private set; }

		// Token: 0x17000278 RID: 632
		// (get) Token: 0x06000AD6 RID: 2774 RVA: 0x0003978D File Offset: 0x0003798D
		// (set) Token: 0x06000AD7 RID: 2775 RVA: 0x00039795 File Offset: 0x00037995
		public TextObject EncyclopediaText { get; private set; }

		// Token: 0x17000279 RID: 633
		// (get) Token: 0x06000AD8 RID: 2776 RVA: 0x0003979E File Offset: 0x0003799E
		// (set) Token: 0x06000AD9 RID: 2777 RVA: 0x000397A6 File Offset: 0x000379A6
		public PartyTemplateObject DefaultPartyTemplate { get; private set; }

		// Token: 0x1700027A RID: 634
		// (get) Token: 0x06000ADA RID: 2778 RVA: 0x000397AF File Offset: 0x000379AF
		// (set) Token: 0x06000ADB RID: 2779 RVA: 0x000397B7 File Offset: 0x000379B7
		public PartyTemplateObject VillagerPartyTemplate { get; private set; }

		// Token: 0x1700027B RID: 635
		// (get) Token: 0x06000ADC RID: 2780 RVA: 0x000397C0 File Offset: 0x000379C0
		// (set) Token: 0x06000ADD RID: 2781 RVA: 0x000397C8 File Offset: 0x000379C8
		public PartyTemplateObject MilitiaPartyTemplate { get; private set; }

		// Token: 0x1700027C RID: 636
		// (get) Token: 0x06000ADE RID: 2782 RVA: 0x000397D1 File Offset: 0x000379D1
		// (set) Token: 0x06000ADF RID: 2783 RVA: 0x000397D9 File Offset: 0x000379D9
		public PartyTemplateObject RebelsPartyTemplate { get; private set; }

		// Token: 0x1700027D RID: 637
		// (get) Token: 0x06000AE0 RID: 2784 RVA: 0x000397E2 File Offset: 0x000379E2
		// (set) Token: 0x06000AE1 RID: 2785 RVA: 0x000397EA File Offset: 0x000379EA
		public PartyTemplateObject CaravanPartyTemplate { get; private set; }

		// Token: 0x1700027E RID: 638
		// (get) Token: 0x06000AE2 RID: 2786 RVA: 0x000397F3 File Offset: 0x000379F3
		// (set) Token: 0x06000AE3 RID: 2787 RVA: 0x000397FB File Offset: 0x000379FB
		public PartyTemplateObject EliteCaravanPartyTemplate { get; private set; }

		// Token: 0x1700027F RID: 639
		// (get) Token: 0x06000AE4 RID: 2788 RVA: 0x00039804 File Offset: 0x00037A04
		// (set) Token: 0x06000AE5 RID: 2789 RVA: 0x0003980C File Offset: 0x00037A0C
		public PartyTemplateObject BanditBossPartyTemplate { get; private set; }

		// Token: 0x17000280 RID: 640
		// (get) Token: 0x06000AE6 RID: 2790 RVA: 0x00039815 File Offset: 0x00037A15
		// (set) Token: 0x06000AE7 RID: 2791 RVA: 0x0003981D File Offset: 0x00037A1D
		public PartyTemplateObject VassalRewardTroopsPartyTemplate { get; private set; }

		// Token: 0x17000281 RID: 641
		// (get) Token: 0x06000AE8 RID: 2792 RVA: 0x00039826 File Offset: 0x00037A26
		// (set) Token: 0x06000AE9 RID: 2793 RVA: 0x0003982E File Offset: 0x00037A2E
		public MBReadOnlyList<ItemObject> VassalRewardItems { get; private set; }

		// Token: 0x17000282 RID: 642
		// (get) Token: 0x06000AEA RID: 2794 RVA: 0x00039837 File Offset: 0x00037A37
		// (set) Token: 0x06000AEB RID: 2795 RVA: 0x0003983F File Offset: 0x00037A3F
		public MBReadOnlyList<ItemObject> BannerBearerReplacementWeapons { get; private set; }

		// Token: 0x17000283 RID: 643
		// (get) Token: 0x06000AEC RID: 2796 RVA: 0x00039848 File Offset: 0x00037A48
		public MBReadOnlyList<TextObject> MaleNameList
		{
			get
			{
				return this._maleNameList;
			}
		}

		// Token: 0x17000284 RID: 644
		// (get) Token: 0x06000AED RID: 2797 RVA: 0x00039850 File Offset: 0x00037A50
		public MBReadOnlyList<TextObject> FemaleNameList
		{
			get
			{
				return this._femaleNameList;
			}
		}

		// Token: 0x17000285 RID: 645
		// (get) Token: 0x06000AEE RID: 2798 RVA: 0x00039858 File Offset: 0x00037A58
		public MBReadOnlyList<TextObject> ClanNameList
		{
			get
			{
				return this._clanNameList;
			}
		}

		// Token: 0x17000286 RID: 646
		// (get) Token: 0x06000AEF RID: 2799 RVA: 0x00039860 File Offset: 0x00037A60
		public MBReadOnlyList<FeatObject> CultureFeats
		{
			get
			{
				return this._cultureFeats;
			}
		}

		// Token: 0x17000287 RID: 647
		// (get) Token: 0x06000AF0 RID: 2800 RVA: 0x00039868 File Offset: 0x00037A68
		public MBReadOnlyList<PolicyObject> DefaultPolicyList
		{
			get
			{
				return this._defaultPolicyList;
			}
		}

		// Token: 0x17000288 RID: 648
		// (get) Token: 0x06000AF1 RID: 2801 RVA: 0x00039870 File Offset: 0x00037A70
		// (set) Token: 0x06000AF2 RID: 2802 RVA: 0x00039878 File Offset: 0x00037A78
		public MBReadOnlyList<int> PossibleClanBannerIconsIDs { get; private set; }

		// Token: 0x17000289 RID: 649
		// (get) Token: 0x06000AF3 RID: 2803 RVA: 0x00039881 File Offset: 0x00037A81
		// (set) Token: 0x06000AF4 RID: 2804 RVA: 0x00039889 File Offset: 0x00037A89
		public MBReadOnlyList<CharacterObject> NotableAndWandererTemplates { get; private set; }

		// Token: 0x1700028A RID: 650
		// (get) Token: 0x06000AF5 RID: 2805 RVA: 0x00039892 File Offset: 0x00037A92
		// (set) Token: 0x06000AF6 RID: 2806 RVA: 0x0003989A File Offset: 0x00037A9A
		public MBReadOnlyList<CharacterObject> RebelliousHeroTemplates { get; private set; }

		// Token: 0x1700028B RID: 651
		// (get) Token: 0x06000AF7 RID: 2807 RVA: 0x000398A3 File Offset: 0x00037AA3
		// (set) Token: 0x06000AF8 RID: 2808 RVA: 0x000398AB File Offset: 0x00037AAB
		public MBReadOnlyList<CharacterObject> LordTemplates { get; private set; }

		// Token: 0x1700028C RID: 652
		// (get) Token: 0x06000AF9 RID: 2809 RVA: 0x000398B4 File Offset: 0x00037AB4
		// (set) Token: 0x06000AFA RID: 2810 RVA: 0x000398BC File Offset: 0x00037ABC
		public MBReadOnlyList<CharacterObject> TournamentTeamTemplatesForOneParticipant { get; private set; }

		// Token: 0x1700028D RID: 653
		// (get) Token: 0x06000AFB RID: 2811 RVA: 0x000398C5 File Offset: 0x00037AC5
		// (set) Token: 0x06000AFC RID: 2812 RVA: 0x000398CD File Offset: 0x00037ACD
		public MBReadOnlyList<CharacterObject> TournamentTeamTemplatesForTwoParticipant { get; private set; }

		// Token: 0x1700028E RID: 654
		// (get) Token: 0x06000AFD RID: 2813 RVA: 0x000398D6 File Offset: 0x00037AD6
		// (set) Token: 0x06000AFE RID: 2814 RVA: 0x000398DE File Offset: 0x00037ADE
		public MBReadOnlyList<CharacterObject> TournamentTeamTemplatesForFourParticipant { get; private set; }

		// Token: 0x1700028F RID: 655
		// (get) Token: 0x06000AFF RID: 2815 RVA: 0x000398E7 File Offset: 0x00037AE7
		// (set) Token: 0x06000B00 RID: 2816 RVA: 0x000398EF File Offset: 0x00037AEF
		public MBReadOnlyList<CharacterObject> BasicMercenaryTroops { get; private set; }

		// Token: 0x17000290 RID: 656
		// (get) Token: 0x06000B01 RID: 2817 RVA: 0x000398F8 File Offset: 0x00037AF8
		// (set) Token: 0x06000B02 RID: 2818 RVA: 0x00039900 File Offset: 0x00037B00
		public int TownEdgeNumber { get; set; }

		// Token: 0x17000291 RID: 657
		// (get) Token: 0x06000B03 RID: 2819 RVA: 0x00039909 File Offset: 0x00037B09
		// (set) Token: 0x06000B04 RID: 2820 RVA: 0x00039911 File Offset: 0x00037B11
		public int MilitiaBonus { get; set; }

		// Token: 0x17000292 RID: 658
		// (get) Token: 0x06000B05 RID: 2821 RVA: 0x0003991A File Offset: 0x00037B1A
		// (set) Token: 0x06000B06 RID: 2822 RVA: 0x00039922 File Offset: 0x00037B22
		public int ProsperityBonus { get; set; }

		// Token: 0x17000293 RID: 659
		// (get) Token: 0x06000B07 RID: 2823 RVA: 0x0003992B File Offset: 0x00037B2B
		// (set) Token: 0x06000B08 RID: 2824 RVA: 0x00039933 File Offset: 0x00037B33
		public CultureObject.BoardGameType BoardGame { get; private set; }

		// Token: 0x06000B09 RID: 2825 RVA: 0x0003993C File Offset: 0x00037B3C
		public override string ToString()
		{
			return base.Name.ToString();
		}

		// Token: 0x06000B0A RID: 2826 RVA: 0x0003994C File Offset: 0x00037B4C
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.TownEdgeNumber = ((node.Attributes["town_edge_number"] == null) ? 0 : Convert.ToInt32(node.Attributes["town_edge_number"].Value));
			this.MilitiaBonus = ((node.Attributes["militia_bonus"] == null) ? 0 : Convert.ToInt32(node.Attributes["militia_bonus"].Value));
			this.ProsperityBonus = ((node.Attributes["prosperity_bonus"] == null) ? 0 : Convert.ToInt32(node.Attributes["prosperity_bonus"].Value));
			this.DefaultPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("default_party_template", node);
			this.VillagerPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("villager_party_template", node);
			this.MilitiaPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("militia_party_template", node);
			this.RebelsPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("rebels_party_template", node);
			this.CaravanPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("caravan_party_template", node);
			this.EliteCaravanPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("elite_caravan_party_template", node);
			this.BanditBossPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("bandit_boss_party_template", node);
			this.VassalRewardTroopsPartyTemplate = objectManager.ReadObjectReferenceFromXml<PartyTemplateObject>("vassal_reward_party_template", node);
			this.EliteBasicTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("elite_basic_troop", node);
			this.MeleeEliteMilitiaTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("melee_elite_militia_troop", node);
			this.RangedEliteMilitiaTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("ranged_elite_militia_troop", node);
			this.MeleeMilitiaTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("melee_militia_troop", node);
			this.RangedMilitiaTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("ranged_militia_troop", node);
			this.BasicTroop = objectManager.ReadObjectReferenceFromXml<CharacterObject>("basic_troop", node);
			this.DefaultBattleEquipmentRoster = objectManager.ReadObjectReferenceFromXml<MBEquipmentRoster>("default_battle_equipment_roster", node);
			this.DefaultCivilianEquipmentRoster = objectManager.ReadObjectReferenceFromXml<MBEquipmentRoster>("default_civilian_equipment_roster", node);
			this.TournamentMaster = objectManager.ReadObjectReferenceFromXml<CharacterObject>("tournament_master", node);
			this.Villager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager", node);
			this.CaravanMaster = objectManager.ReadObjectReferenceFromXml<CharacterObject>("caravan_master", node);
			this.ArmedTrader = objectManager.ReadObjectReferenceFromXml<CharacterObject>("armed_trader", node);
			this.CaravanGuard = objectManager.ReadObjectReferenceFromXml<CharacterObject>("caravan_guard", node);
			this.DuelPreset = objectManager.ReadObjectReferenceFromXml<CharacterObject>("duel_preset", node);
			this.PrisonGuard = objectManager.ReadObjectReferenceFromXml<CharacterObject>("prison_guard", node);
			this.Guard = objectManager.ReadObjectReferenceFromXml<CharacterObject>("guard", node);
			this.Blacksmith = objectManager.ReadObjectReferenceFromXml<CharacterObject>("blacksmith", node);
			this.Weaponsmith = objectManager.ReadObjectReferenceFromXml<CharacterObject>("weaponsmith", node);
			this.Townswoman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townswoman", node);
			this.TownswomanInfant = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townswoman_infant", node);
			this.TownswomanChild = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townswoman_child", node);
			this.TownswomanTeenager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townswoman_teenager", node);
			this.Townsman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townsman", node);
			this.TownsmanInfant = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townsman_infant", node);
			this.TownsmanChild = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townsman_child", node);
			this.TownsmanTeenager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("townsman_teenager", node);
			this.VillageWoman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("village_woman", node);
			this.VillagerMaleChild = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager_male_child", node);
			this.VillagerMaleTeenager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager_male_teenager", node);
			this.VillagerFemaleChild = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager_female_child", node);
			this.VillagerFemaleTeenager = objectManager.ReadObjectReferenceFromXml<CharacterObject>("villager_female_teenager", node);
			this.RansomBroker = objectManager.ReadObjectReferenceFromXml<CharacterObject>("ransom_broker", node);
			this.GangleaderBodyguard = objectManager.ReadObjectReferenceFromXml<CharacterObject>("gangleader_bodyguard", node);
			this.MerchantNotary = objectManager.ReadObjectReferenceFromXml<CharacterObject>("merchant_notary", node);
			this.ArtisanNotary = objectManager.ReadObjectReferenceFromXml<CharacterObject>("artisan_notary", node);
			this.PreacherNotary = objectManager.ReadObjectReferenceFromXml<CharacterObject>("preacher_notary", node);
			this.RuralNotableNotary = objectManager.ReadObjectReferenceFromXml<CharacterObject>("rural_notable_notary", node);
			this.ShopWorker = objectManager.ReadObjectReferenceFromXml<CharacterObject>("shop_worker", node);
			this.Tavernkeeper = objectManager.ReadObjectReferenceFromXml<CharacterObject>("tavernkeeper", node);
			this.TavernGamehost = objectManager.ReadObjectReferenceFromXml<CharacterObject>("taverngamehost", node);
			this.Musician = objectManager.ReadObjectReferenceFromXml<CharacterObject>("musician", node);
			this.TavernWench = objectManager.ReadObjectReferenceFromXml<CharacterObject>("tavern_wench", node);
			this.Armorer = objectManager.ReadObjectReferenceFromXml<CharacterObject>("armorer", node);
			this.HorseMerchant = objectManager.ReadObjectReferenceFromXml<CharacterObject>("horseMerchant", node);
			this.Barber = objectManager.ReadObjectReferenceFromXml<CharacterObject>("barber", node);
			this.Merchant = objectManager.ReadObjectReferenceFromXml<CharacterObject>("merchant", node);
			this.Beggar = objectManager.ReadObjectReferenceFromXml<CharacterObject>("beggar", node);
			this.FemaleBeggar = objectManager.ReadObjectReferenceFromXml<CharacterObject>("female_beggar", node);
			this.FemaleDancer = objectManager.ReadObjectReferenceFromXml<CharacterObject>("female_dancer", node);
			this.MilitiaArcher = objectManager.ReadObjectReferenceFromXml<CharacterObject>("militia_archer", node);
			this.MilitiaVeteranArcher = objectManager.ReadObjectReferenceFromXml<CharacterObject>("militia_veteran_archer", node);
			this.MilitiaSpearman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("militia_spearman      ", node);
			this.MilitiaVeteranSpearman = objectManager.ReadObjectReferenceFromXml<CharacterObject>("militia_veteran_spearman", node);
			this.GearPracticeDummy = objectManager.ReadObjectReferenceFromXml<CharacterObject>("gear_practice_dummy     ", node);
			this.WeaponPracticeStage1 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("weapon_practice_stage_1", node);
			this.WeaponPracticeStage2 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("weapon_practice_stage_2", node);
			this.WeaponPracticeStage3 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("weapon_practice_stage_3", node);
			this.GearDummy = objectManager.ReadObjectReferenceFromXml<CharacterObject>("gear_dummy", node);
			this.BanditBandit = objectManager.ReadObjectReferenceFromXml<CharacterObject>("bandit_bandit", node);
			this.BanditRaider = objectManager.ReadObjectReferenceFromXml<CharacterObject>("bandit_raider", node);
			this.BanditChief = objectManager.ReadObjectReferenceFromXml<CharacterObject>("bandit_chief", node);
			this.BanditBoss = objectManager.ReadObjectReferenceFromXml<CharacterObject>("bandit_boss", node);
			this.EncyclopediaText = ((node.Attributes["text"] != null) ? new TextObject(node.Attributes["text"].Value, null) : TextObject.Empty);
			CultureObject.BoardGameType boardGameType;
			if (node.Attributes["board_game_type"] != null && Enum.TryParse<CultureObject.BoardGameType>(node.Attributes["board_game_type"].Value, out boardGameType))
			{
				this.BoardGame = boardGameType;
			}
			XmlNodeList childNodes = node.ChildNodes;
			this._defaultPolicyList = new MBList<PolicyObject>();
			this._maleNameList = new MBList<TextObject>();
			this._femaleNameList = new MBList<TextObject>();
			this._clanNameList = new MBList<TextObject>();
			this._cultureFeats = new MBList<FeatObject>();
			MBList<int> mblist = new MBList<int>();
			MBList<CharacterObject> mblist2 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist3 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist4 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist5 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist6 = new MBList<CharacterObject>();
			MBList<CharacterObject> mblist7 = new MBList<CharacterObject>();
			MBList<ItemObject> mblist8 = new MBList<ItemObject>();
			MBList<ItemObject> mblist9 = new MBList<ItemObject>();
			MBList<CharacterObject> mblist10 = new MBList<CharacterObject>();
			foreach (object obj in childNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Name == "default_policies")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj2 = enumerator2.Current;
							XmlNode xmlNode2 = (XmlNode)obj2;
							PolicyObject @object = objectManager.GetObject<PolicyObject>(xmlNode2.Attributes["id"].Value);
							this._defaultPolicyList.Add(@object);
						}
						continue;
					}
				}
				if (xmlNode.Name == "male_names")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj3 = enumerator2.Current;
							XmlNode xmlNode3 = (XmlNode)obj3;
							this._maleNameList.Add(new TextObject(xmlNode3.Attributes["name"].Value, null));
						}
						continue;
					}
				}
				if (xmlNode.Name == "female_names")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj4 = enumerator2.Current;
							XmlNode xmlNode4 = (XmlNode)obj4;
							this._femaleNameList.Add(new TextObject(xmlNode4.Attributes["name"].Value, null));
						}
						continue;
					}
				}
				if (xmlNode.Name == "clan_names")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj5 = enumerator2.Current;
							XmlNode xmlNode5 = (XmlNode)obj5;
							this._clanNameList.Add(new TextObject(xmlNode5.Attributes["name"].Value, null));
						}
						continue;
					}
				}
				if (xmlNode.Name == "cultural_feats")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj6 = enumerator2.Current;
							string value = ((XmlNode)obj6).Attributes["id"].Value;
							FeatObject object2 = MBObjectManager.Instance.GetObject<FeatObject>(value);
							if (!this._cultureFeats.Contains(object2))
							{
								this._cultureFeats.Add(object2);
							}
							else
							{
								Debug.FailedAssert("Feat object already exists!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\CultureObject.cs", "Deserialize", 375);
							}
						}
						continue;
					}
				}
				if (xmlNode.Name == "possible_clan_banner_icon_ids")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj7 = enumerator2.Current;
							int num;
							int.TryParse(((XmlNode)obj7).Attributes["id"].Value, out num);
							mblist.Add(num);
						}
						continue;
					}
				}
				if (xmlNode.Name == "notable_and_wanderer_templates")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj8 = enumerator2.Current;
							XmlNode xmlNode6 = (XmlNode)obj8;
							CharacterObject characterObject = objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode6);
							mblist2.Add(characterObject);
						}
						continue;
					}
				}
				if (xmlNode.Name == "lord_templates")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj9 = enumerator2.Current;
							XmlNode xmlNode7 = (XmlNode)obj9;
							CharacterObject characterObject2 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode7);
							mblist4.Add(characterObject2);
						}
						continue;
					}
				}
				if (xmlNode.Name == "rebellion_hero_templates")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj10 = enumerator2.Current;
							XmlNode xmlNode8 = (XmlNode)obj10;
							CharacterObject characterObject3 = objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode8);
							mblist3.Add(characterObject3);
						}
						continue;
					}
				}
				if (xmlNode.Name == "tournament_team_templates_one_participant")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj11 = enumerator2.Current;
							XmlNode xmlNode9 = (XmlNode)obj11;
							mblist5.Add(objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode9));
						}
						continue;
					}
				}
				if (xmlNode.Name == "tournament_team_templates_two_participant")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj12 = enumerator2.Current;
							XmlNode xmlNode10 = (XmlNode)obj12;
							mblist6.Add(objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode10));
						}
						continue;
					}
				}
				if (xmlNode.Name == "tournament_team_templates_four_participant")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj13 = enumerator2.Current;
							XmlNode xmlNode11 = (XmlNode)obj13;
							mblist7.Add(objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode11));
						}
						continue;
					}
				}
				if (xmlNode.Name == "vassal_reward_items")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj14 = enumerator2.Current;
							XmlNode xmlNode12 = (XmlNode)obj14;
							mblist8.Add(objectManager.ReadObjectReferenceFromXml<ItemObject>("id", xmlNode12));
						}
						continue;
					}
				}
				if (xmlNode.Name == "basic_mercenary_troops")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj15 = enumerator2.Current;
							XmlNode xmlNode13 = (XmlNode)obj15;
							mblist10.Add(objectManager.ReadObjectReferenceFromXml<CharacterObject>("name", xmlNode13));
						}
						continue;
					}
				}
				if (xmlNode.Name == "banner_bearer_replacement_weapons")
				{
					foreach (object obj16 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode14 = (XmlNode)obj16;
						mblist9.Add(objectManager.ReadObjectReferenceFromXml<ItemObject>("id", xmlNode14));
					}
				}
			}
			this.PossibleClanBannerIconsIDs = mblist;
			this.NotableAndWandererTemplates = mblist2;
			this.RebelliousHeroTemplates = mblist3;
			this.LordTemplates = mblist4;
			this.TournamentTeamTemplatesForOneParticipant = mblist5;
			this.TournamentTeamTemplatesForTwoParticipant = mblist6;
			this.TournamentTeamTemplatesForFourParticipant = mblist7;
			mblist8.RemoveAll((ItemObject x) => !x.IsReady);
			this.VassalRewardItems = mblist8;
			this.BasicMercenaryTroops = mblist10;
			mblist9.RemoveAll((ItemObject x) => !x.IsReady);
			this.BannerBearerReplacementWeapons = mblist9;
		}

		// Token: 0x06000B0B RID: 2827 RVA: 0x0003A8FC File Offset: 0x00038AFC
		public override TextObject GetName()
		{
			return base.Name;
		}

		// Token: 0x0400034E RID: 846
		private MBList<TextObject> _maleNameList;

		// Token: 0x0400034F RID: 847
		private MBList<TextObject> _femaleNameList;

		// Token: 0x04000350 RID: 848
		private MBList<TextObject> _clanNameList;

		// Token: 0x04000351 RID: 849
		private MBList<FeatObject> _cultureFeats;

		// Token: 0x04000352 RID: 850
		private MBList<PolicyObject> _defaultPolicyList;

		// Token: 0x020004A5 RID: 1189
		public enum BoardGameType
		{
			// Token: 0x0400140E RID: 5134
			None = -1,
			// Token: 0x0400140F RID: 5135
			Seega,
			// Token: 0x04001410 RID: 5136
			Puluc,
			// Token: 0x04001411 RID: 5137
			Konane,
			// Token: 0x04001412 RID: 5138
			MuTorere,
			// Token: 0x04001413 RID: 5139
			Tablut,
			// Token: 0x04001414 RID: 5140
			BaghChal,
			// Token: 0x04001415 RID: 5141
			Total
		}
	}
}
