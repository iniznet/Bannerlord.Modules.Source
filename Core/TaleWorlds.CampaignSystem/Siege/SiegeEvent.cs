using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Siege
{
	// Token: 0x02000285 RID: 645
	public class SiegeEvent
	{
		// Token: 0x060021DE RID: 8670 RVA: 0x0008FA90 File Offset: 0x0008DC90
		internal static void AutoGeneratedStaticCollectObjectsSiegeEvent(object o, List<object> collectedObjects)
		{
			((SiegeEvent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060021DF RID: 8671 RVA: 0x0008FA9E File Offset: 0x0008DC9E
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.BesiegedSettlement);
			collectedObjects.Add(this.BesiegerCamp);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.SiegeStartTime, collectedObjects);
		}

		// Token: 0x060021E0 RID: 8672 RVA: 0x0008FAC9 File Offset: 0x0008DCC9
		internal static object AutoGeneratedGetMemberValueSiegeStartTime(object o)
		{
			return ((SiegeEvent)o).SiegeStartTime;
		}

		// Token: 0x060021E1 RID: 8673 RVA: 0x0008FADB File Offset: 0x0008DCDB
		internal static object AutoGeneratedGetMemberValueBesiegedSettlement(object o)
		{
			return ((SiegeEvent)o).BesiegedSettlement;
		}

		// Token: 0x060021E2 RID: 8674 RVA: 0x0008FAE8 File Offset: 0x0008DCE8
		internal static object AutoGeneratedGetMemberValueBesiegerCamp(object o)
		{
			return ((SiegeEvent)o).BesiegerCamp;
		}

		// Token: 0x060021E3 RID: 8675 RVA: 0x0008FAF5 File Offset: 0x0008DCF5
		internal static object AutoGeneratedGetMemberValue_isBesiegerDefeated(object o)
		{
			return ((SiegeEvent)o)._isBesiegerDefeated;
		}

		// Token: 0x1700086B RID: 2155
		// (get) Token: 0x060021E4 RID: 8676 RVA: 0x0008FB08 File Offset: 0x0008DD08
		public int SiegeWallSeed
		{
			get
			{
				return Common.GetDJB2("" + this.SiegeStartTime.NumTicks + "*" + this.BesiegedSettlement.StringId + "*" + (int)this.BesiegedSettlement.SettlementTotalWallHitPoints);
			}
		}

		// Token: 0x1700086C RID: 2156
		// (get) Token: 0x060021E5 RID: 8677 RVA: 0x0008FB74 File Offset: 0x0008DD74
		public int SiegePeopleSeed
		{
			get
			{
				return Common.GetDJB2("" + this.SiegeStartTime.NumTicks + "*" + this.BesiegedSettlement.StringId + "*" + this.BesiegerCamp.NumberOfTroopsKilledOnSide + "#" + this.BesiegedSettlement.NumberOfTroopsKilledOnSide);
			}
		}

		// Token: 0x1700086D RID: 2157
		// (get) Token: 0x060021E6 RID: 8678 RVA: 0x0008FBFB File Offset: 0x0008DDFB
		// (set) Token: 0x060021E7 RID: 8679 RVA: 0x0008FC03 File Offset: 0x0008DE03
		[SaveableProperty(5)]
		public CampaignTime SiegeStartTime { get; private set; }

		// Token: 0x1700086E RID: 2158
		// (get) Token: 0x060021E8 RID: 8680 RVA: 0x0008FC0C File Offset: 0x0008DE0C
		public bool IsPlayerSiegeEvent
		{
			get
			{
				return this.BesiegerCamp.BesiegerParty.IsMainParty || PlayerSiege.PlayerSiegeEvent == this;
			}
		}

		// Token: 0x060021E9 RID: 8681 RVA: 0x0008FC2C File Offset: 0x0008DE2C
		public List<PartyBase> GetInvolvedPartiesForEventType(MapEvent.BattleTypes battleType)
		{
			List<PartyBase> list = new List<PartyBase>();
			foreach (PartyBase partyBase in this.BesiegerCamp.GetInvolvedPartiesForEventType(battleType))
			{
				list.Add(partyBase);
			}
			foreach (PartyBase partyBase2 in this.BesiegedSettlement.GetInvolvedPartiesForEventType(battleType))
			{
				list.Add(partyBase2);
			}
			return list;
		}

		// Token: 0x060021EA RID: 8682 RVA: 0x0008FCC8 File Offset: 0x0008DEC8
		public MapEvent.BattleTypes GetCurrentBattleType()
		{
			BesiegerCamp besiegerCamp = this.BesiegerCamp;
			bool flag;
			if (besiegerCamp == null)
			{
				flag = null != null;
			}
			else
			{
				MobileParty besiegerParty = besiegerCamp.BesiegerParty;
				flag = ((besiegerParty != null) ? besiegerParty.MapEvent : null) != null;
			}
			if (flag)
			{
				return this.BesiegerCamp.BesiegerParty.MapEvent.EventType;
			}
			return MapEvent.BattleTypes.Siege;
		}

		// Token: 0x060021EB RID: 8683 RVA: 0x0008FD04 File Offset: 0x0008DF04
		public SiegeEvent(Settlement settlement, MobileParty besiegerParty)
		{
			this.BesiegedSettlement = settlement;
			this.BesiegedSettlement.SiegeEvent = this;
			this.BesiegerCamp = new BesiegerCamp(this);
			besiegerParty.BesiegerCamp = this.BesiegerCamp;
			if (besiegerParty.LeaderHero != null && settlement.OwnerClan != null && settlement.OwnerClan != Clan.PlayerClan)
			{
				ChangeRelationAction.ApplyRelationChangeBetweenHeroes(settlement.OwnerClan.Leader, besiegerParty.LeaderHero, -5, besiegerParty.LeaderHero == Hero.MainHero);
			}
			this.BesiegerCamp.InitializeSiegeEventSide();
			this.BesiegedSettlement.InitializeSiegeEventSide();
			this.SiegeStartTime = CampaignTime.Now;
			foreach (MobileParty mobileParty in MobileParty.All)
			{
				if (mobileParty.DefaultBehavior == AiBehavior.GoToSettlement && mobileParty.TargetSettlement == settlement && mobileParty.CurrentSettlement != settlement)
				{
					mobileParty.Ai.SetMoveModeHold();
				}
			}
			foreach (MobileParty mobileParty2 in settlement.Parties)
			{
				if (mobileParty2.MapFaction == settlement.MapFaction && !mobileParty2.IsMilitia && !mobileParty2.IsGarrison && (mobileParty2.DefaultBehavior != AiBehavior.GoToSettlement || mobileParty2.TargetSettlement != settlement) && mobileParty2.DefaultBehavior != AiBehavior.Hold)
				{
					mobileParty2.Ai.SetMoveGoToSettlement(mobileParty2.CurrentSettlement);
				}
			}
			this.BesiegedSettlement.Party.Visuals.RefreshLevelMask(this.BesiegedSettlement.Party);
			CampaignEventDispatcher.Instance.OnSiegeEventStarted(this);
		}

		// Token: 0x1700086F RID: 2159
		// (get) Token: 0x060021EC RID: 8684 RVA: 0x0008FEB8 File Offset: 0x0008E0B8
		public bool ReadyToBeRemoved
		{
			get
			{
				return this.BesiegedSettlement.Party.SiegeEvent == null;
			}
		}

		// Token: 0x060021ED RID: 8685 RVA: 0x0008FED0 File Offset: 0x0008E0D0
		public ISiegeEventSide GetSiegeEventSide(BattleSideEnum side)
		{
			if (side != BattleSideEnum.Attacker)
			{
				return this.BesiegedSettlement;
			}
			return this.BesiegerCamp;
		}

		// Token: 0x060021EE RID: 8686 RVA: 0x0008FEF4 File Offset: 0x0008E0F4
		public bool CanPartyJoinSide(PartyBase party, BattleSideEnum side)
		{
			IFaction mapFaction = party.MapFaction;
			BattleSideEnum battleSideEnum = BattleSideEnum.None;
			if (side != BattleSideEnum.Defender)
			{
				if (side == BattleSideEnum.Attacker)
				{
					battleSideEnum = BattleSideEnum.Defender;
				}
			}
			else
			{
				battleSideEnum = BattleSideEnum.Attacker;
			}
			return !FactionManager.IsAtWarAgainstFaction(this.GetSiegeEventSide(side).GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).First<PartyBase>()
				.MapFaction, mapFaction) && FactionManager.IsAtWarAgainstFaction(this.GetSiegeEventSide(battleSideEnum).GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).First<PartyBase>()
				.MapFaction, mapFaction);
		}

		// Token: 0x060021EF RID: 8687 RVA: 0x0008FF58 File Offset: 0x0008E158
		public void Tick(float dt)
		{
			if (CampaignTime.DeltaTime == CampaignTime.Zero)
			{
				return;
			}
			if (this.BesiegerCamp.BesiegerParty.MapEvent != null || this.BesiegedSettlement.Party.MapEvent != null)
			{
				return;
			}
			this.TickSiegeEventSide(this.BesiegerCamp);
			this.TickSiegeEventSide(this.BesiegedSettlement);
			this.BesiegerCamp.Tick(dt);
		}

		// Token: 0x060021F0 RID: 8688 RVA: 0x0008FFC0 File Offset: 0x0008E1C0
		private void TickSiegeEventSide(ISiegeEventSide siegeEventSide)
		{
			this.AdvanceStrategy(siegeEventSide);
			this.ConstructionTick(siegeEventSide);
			this.BombardTick(siegeEventSide);
		}

		// Token: 0x060021F1 RID: 8689 RVA: 0x0008FFD7 File Offset: 0x0008E1D7
		public void OnBeforeSiegeEventEnd(BattleState winnerSide, MapEvent.BattleTypes battleType)
		{
			if (battleType == MapEvent.BattleTypes.SallyOut)
			{
				this._isBesiegerDefeated = winnerSide == BattleState.AttackerVictory;
				return;
			}
			if (battleType == MapEvent.BattleTypes.Siege || battleType == MapEvent.BattleTypes.SiegeOutside)
			{
				this._isBesiegerDefeated = winnerSide == BattleState.DefenderVictory;
			}
		}

		// Token: 0x060021F2 RID: 8690 RVA: 0x0008FFFC File Offset: 0x0008E1FC
		public void FinalizeSiegeEvent()
		{
			ISiegeEventVisual siegeEventVisual = this.SiegeEventVisual;
			if (siegeEventVisual != null)
			{
				siegeEventVisual.OnSiegeEventEnd();
			}
			CampaignEventDispatcher.Instance.OnSiegeEventEnded(this);
			if (PlayerSiege.PlayerSiegeEvent == this)
			{
				PlayerSiege.OnSiegeEventFinalized(this._isBesiegerDefeated);
			}
			else if (PlayerSiege.PlayerSiegeEvent == null && MobileParty.MainParty.CurrentSettlement != null && MobileParty.MainParty.CurrentSettlement.SiegeEvent == this && !Hero.MainHero.IsPrisoner)
			{
				GameMenu.SwitchToMenu(this._isBesiegerDefeated ? "siege_attacker_defeated" : "siege_attacker_left");
			}
			this.BesiegerCamp.FinalizeSiegeEvent();
			this.BesiegedSettlement.FinalizeSiegeEvent();
			if (this.BesiegedSettlement.Party.MapEvent != null && !this.BesiegedSettlement.Party.MapEvent.IsSallyOut)
			{
				this.BesiegedSettlement.Party.MapEvent.FinalizeEvent();
			}
			if (this.BesiegedSettlement.Town != null && this.BesiegedSettlement.Town.GarrisonParty != null && this.BesiegedSettlement.Town.GarrisonParty.DefaultBehavior == AiBehavior.EngageParty)
			{
				this.BesiegedSettlement.Town.GarrisonParty.Ai.SetMoveModeHold();
			}
			if (this == PlayerSiege.PlayerSiegeEvent)
			{
				PlayerSiege.ClosePlayerSiege();
			}
		}

		// Token: 0x060021F3 RID: 8691 RVA: 0x00090136 File Offset: 0x0008E336
		public void SiegeTestPreparation()
		{
		}

		// Token: 0x060021F4 RID: 8692 RVA: 0x00090138 File Offset: 0x0008E338
		public bool IsPartyInvolved(PartyBase party)
		{
			return this.GetInvolvedPartiesForEventType(this.GetCurrentBattleType()).Contains(party);
		}

		// Token: 0x060021F5 RID: 8693 RVA: 0x0009014C File Offset: 0x0008E34C
		public void DoSiegeAction(ISiegeEventSide siegeEventSide, SiegeStrategyActionModel.SiegeAction siegeAction, SiegeEngineType siegeEngineType, int deploymentIndex, int reserveIndex)
		{
			SiegeEvent.SiegeEnginesContainer siegeEngines = siegeEventSide.SiegeEngines;
			switch (siegeAction)
			{
			case SiegeStrategyActionModel.SiegeAction.ConstructNewSiegeEngine:
			{
				float siegeEngineHitPoints = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitPoints(siegeEventSide.SiegeEvent, siegeEngineType, siegeEventSide.BattleSide);
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = new SiegeEvent.SiegeEngineConstructionProgress(siegeEngineType, 0f, siegeEngineHitPoints);
				siegeEngines.DeploySiegeEngineAtIndex(siegeEngineConstructionProgress, deploymentIndex);
				this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
				return;
			}
			case SiegeStrategyActionModel.SiegeAction.DeploySiegeEngineFromReserve:
			{
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 = siegeEngines.ReservedSiegeEngines[reserveIndex];
				siegeEngines.DeploySiegeEngineAtIndex(siegeEngineConstructionProgress2, deploymentIndex);
				this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
				return;
			}
			case SiegeStrategyActionModel.SiegeAction.MoveSiegeEngineToReserve:
				siegeEngines.RemoveDeployedSiegeEngine(deploymentIndex, siegeEngineType.IsRanged, true);
				this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
				return;
			case SiegeStrategyActionModel.SiegeAction.RemoveDeployedSiegeEngine:
				siegeEngines.RemoveDeployedSiegeEngine(deploymentIndex, siegeEngineType.IsRanged, false);
				this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
				return;
			case SiegeStrategyActionModel.SiegeAction.Hold:
				return;
			default:
				throw new ArgumentOutOfRangeException();
			}
		}

		// Token: 0x060021F6 RID: 8694 RVA: 0x0009024C File Offset: 0x0008E44C
		public void AdvanceStrategy(ISiegeEventSide siegeEventSide)
		{
			SiegeStrategyActionModel.SiegeAction siegeAction;
			SiegeEngineType siegeEngineType;
			int num;
			int num2;
			Campaign.Current.Models.SiegeStrategyActionModel.GetLogicalActionForStrategy(siegeEventSide, out siegeAction, out siegeEngineType, out num, out num2);
			this.DoSiegeAction(siegeEventSide, siegeAction, siegeEngineType, num, num2);
		}

		// Token: 0x060021F7 RID: 8695 RVA: 0x00090284 File Offset: 0x0008E484
		public void BreakSiegeEngine(ISiegeEventSide siegeEventSide, SiegeEngineType siegeEngineType)
		{
			if (siegeEngineType == DefaultSiegeEngineTypes.Preparations)
			{
				if (siegeEventSide.BattleSide == BattleSideEnum.Attacker)
				{
					siegeEventSide.SiegeEngines.SiegePreparations.SetProgress(0f);
				}
				return;
			}
			if (siegeEngineType.IsRanged)
			{
				for (int i = siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines.Length - 1; i >= 0; i--)
				{
					SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines[i];
					if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.SiegeEngine == siegeEngineType && siegeEngineConstructionProgress.IsConstructed)
					{
						siegeEventSide.SiegeEngines.RemoveDeployedSiegeEngine(i, true, false);
						this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
						return;
					}
				}
				return;
			}
			for (int j = siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines.Length - 1; j >= 0; j--)
			{
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 = siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines[j];
				if (siegeEngineConstructionProgress2 != null && siegeEngineConstructionProgress2.SiegeEngine == siegeEngineType)
				{
					siegeEventSide.SiegeEngines.RemoveDeployedSiegeEngine(j, false, false);
					this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
					return;
				}
			}
		}

		// Token: 0x060021F8 RID: 8696 RVA: 0x0009037C File Offset: 0x0008E57C
		public Dictionary<SiegeEngineType, int> GetPreparedSiegeEnginesAsDictionary(ISiegeEventSide siegeEventSide)
		{
			Dictionary<SiegeEngineType, int> dictionary = new Dictionary<SiegeEngineType, int>();
			foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress in siegeEventSide.SiegeEngines.AllSiegeEngines())
			{
				if (siegeEngineConstructionProgress.IsConstructed && siegeEngineConstructionProgress.Hitpoints > 0f && siegeEngineConstructionProgress.SiegeEngine != DefaultSiegeEngineTypes.Preparations)
				{
					if (dictionary.ContainsKey(siegeEngineConstructionProgress.SiegeEngine))
					{
						Dictionary<SiegeEngineType, int> dictionary2 = dictionary;
						SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
						dictionary2[siegeEngine]++;
					}
					else
					{
						dictionary.Add(siegeEngineConstructionProgress.SiegeEngine, 1);
					}
				}
			}
			return dictionary;
		}

		// Token: 0x060021F9 RID: 8697 RVA: 0x0009042C File Offset: 0x0008E62C
		public List<MissionSiegeWeapon> GetPreparedAndActiveSiegeEngines(ISiegeEventSide siegeEventSide)
		{
			List<MissionSiegeWeapon> list = new List<MissionSiegeWeapon>();
			MBReadOnlyList<SiegeEvent.SiegeEngineConstructionProgress> deployedSiegeEngines = siegeEventSide.SiegeEngines.DeployedSiegeEngines;
			for (int i = 0; i < deployedSiegeEngines.Count; i++)
			{
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = deployedSiegeEngines[i];
				if (siegeEngineConstructionProgress.IsConstructed && siegeEngineConstructionProgress.Hitpoints > 0f && siegeEngineConstructionProgress.SiegeEngine != DefaultSiegeEngineTypes.Preparations)
				{
					list.Add(MissionSiegeWeapon.CreateCampaignWeapon(siegeEngineConstructionProgress.SiegeEngine, i, siegeEngineConstructionProgress.Hitpoints, siegeEngineConstructionProgress.MaxHitPoints));
				}
			}
			return list;
		}

		// Token: 0x060021FA RID: 8698 RVA: 0x000904A5 File Offset: 0x0008E6A5
		public void SetSiegeEngineStatesAfterSiegeMission(IEnumerable<IMissionSiegeWeapon> attackerMissionSiegeEngineData, IEnumerable<IMissionSiegeWeapon> defenderMissionSiegeEngineData)
		{
			this.SetSiegeEngineStatesForSiegeSide(this.BesiegerCamp, attackerMissionSiegeEngineData);
			this.SetSiegeEngineStatesForSiegeSide(this.BesiegedSettlement, defenderMissionSiegeEngineData);
		}

		// Token: 0x060021FB RID: 8699 RVA: 0x000904C4 File Offset: 0x0008E6C4
		private void SetSiegeEngineStatesForSiegeSide(ISiegeEventSide side, IEnumerable<IMissionSiegeWeapon> missionSiegeEngineData)
		{
			if (missionSiegeEngineData != null && missionSiegeEngineData.Any<IMissionSiegeWeapon>())
			{
				int num = missionSiegeEngineData.Count<IMissionSiegeWeapon>() - 1;
				for (int i = side.SiegeEngines.DeployedSiegeEngines.Count - 1; i >= 0; i--)
				{
					SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = side.SiegeEngines.DeployedSiegeEngines.ElementAt(i);
					if (siegeEngineConstructionProgress.IsConstructed)
					{
						IMissionSiegeWeapon missionSiegeWeapon = missionSiegeEngineData.ElementAt(num);
						num--;
						if ((siegeEngineConstructionProgress.SiegeEngine.IsRanged || PlayerEncounter.Current.IsSallyOutAmbush) && missionSiegeWeapon.Health > 0f)
						{
							siegeEngineConstructionProgress.SetHitpoints(missionSiegeWeapon.Health);
						}
						else if (!PlayerEncounter.Current.IsSallyOutAmbush || missionSiegeWeapon.Health <= 0f)
						{
							this.BreakSiegeEngine(side, siegeEngineConstructionProgress.SiegeEngine);
						}
					}
				}
			}
		}

		// Token: 0x060021FC RID: 8700 RVA: 0x00090590 File Offset: 0x0008E790
		public void CreateSiegeObject(SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress, ISiegeEventSide siegeSide)
		{
			if (siegeEngineConstructionProgress.SiegeEngine.IsRanged)
			{
				siegeEngineConstructionProgress.SetRangedSiegeEngine(new SiegeEvent.RangedSiegeEngine(siegeEngineConstructionProgress.SiegeEngine, siegeSide));
			}
			SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
			CampaignEventDispatcher.Instance.SiegeEngineBuilt(this, siegeSide.BattleSide, siegeEngine);
			this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
		}

		// Token: 0x060021FD RID: 8701 RVA: 0x000905EA File Offset: 0x0008E7EA
		public override string ToString()
		{
			return "Siege of " + this.BesiegedSettlement.Name;
		}

		// Token: 0x060021FE RID: 8702 RVA: 0x00090604 File Offset: 0x0008E804
		public void ConstructionTick(ISiegeEventSide siegeEventSide)
		{
			SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = null;
			if (siegeEventSide.SiegeEngines.SiegePreparations != null && !siegeEventSide.SiegeEngines.SiegePreparations.IsConstructed)
			{
				siegeEngineConstructionProgress = siegeEventSide.SiegeEngines.SiegePreparations;
			}
			else
			{
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
				{
					if (siegeEngineConstructionProgress2.IsActive && !siegeEngineConstructionProgress2.IsConstructed && !siegeEngineConstructionProgress2.IsBeingRedeployed)
					{
						siegeEngineConstructionProgress = siegeEngineConstructionProgress2;
						break;
					}
				}
			}
			if (siegeEngineConstructionProgress != null)
			{
				float num = (float)((double)Campaign.Current.Models.SiegeEventModel.GetConstructionProgressPerHour(siegeEngineConstructionProgress.SiegeEngine, this, siegeEventSide) * CampaignTime.DeltaTime.ToHours);
				siegeEngineConstructionProgress.SetProgress(MBMath.ClampFloat(siegeEngineConstructionProgress.Progress + num, 0f, 1f));
				if (siegeEngineConstructionProgress.IsConstructed)
				{
					this.CreateSiegeObject(siegeEngineConstructionProgress, siegeEventSide);
				}
			}
			float num2 = 2f;
			foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress3 in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
			{
				if (siegeEngineConstructionProgress3.IsActive && siegeEngineConstructionProgress3.IsConstructed && siegeEngineConstructionProgress3.IsBeingRedeployed)
				{
					float num3 = (float)((double)(1f / num2) * CampaignTime.DeltaTime.ToHours);
					siegeEngineConstructionProgress3.SetRedeploymentProgress(MBMath.ClampFloat(siegeEngineConstructionProgress3.RedeploymentProgress + num3, 0f, 1f));
				}
			}
			if (siegeEventSide.SiegeEngines.ClearRemovedEnginesIfNecessary())
			{
				this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
			}
		}

		// Token: 0x060021FF RID: 8703 RVA: 0x000907C0 File Offset: 0x0008E9C0
		public void BombardTick(ISiegeEventSide siegeEventSide)
		{
			if (CampaignTime.DeltaTime == CampaignTime.Zero)
			{
				return;
			}
			SiegeEvent.SiegeEnginesContainer siegeEngines = this.GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide()).SiegeEngines;
			for (int i = 0; i < siegeEventSide.SiegeEngineMissiles.Count; i++)
			{
				SiegeEvent.SiegeEngineMissile siegeEngineMissile = siegeEventSide.SiegeEngineMissiles[i];
				if (siegeEngineMissile.CollisionTime.IsPast && siegeEngineMissile.HitSuccessful)
				{
					SiegeBombardTargets targetType = siegeEngineMissile.TargetType;
					if (targetType != SiegeBombardTargets.Wall)
					{
						if (targetType != SiegeBombardTargets.RangedEngines)
						{
							Debug.FailedAssert("Invalid target type on hit", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Siege\\SiegeEvent.cs", "BombardTick", 982);
						}
						else
						{
							SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = siegeEngines.DeployedRangedSiegeEngines[siegeEngineMissile.TargetSlotIndex];
							SiegeEvent.SiegeEngineConstructionProgress targetSiegeEngine = siegeEngineMissile.TargetSiegeEngine;
							if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.IsConstructed && !siegeEngineConstructionProgress.IsBeingRedeployed && siegeEngineConstructionProgress.Hitpoints > 0f)
							{
								this.BombardHitEngine(siegeEventSide, siegeEngineMissile.ShooterSiegeEngineType, siegeEngineConstructionProgress);
							}
							else if (targetSiegeEngine != null && targetSiegeEngine != siegeEngineConstructionProgress && ((siegeEngines.DeployedRangedSiegeEngines.Contains(targetSiegeEngine) && targetSiegeEngine.IsConstructed && !targetSiegeEngine.IsBeingRedeployed) || siegeEngines.ReservedSiegeEngines.Contains(targetSiegeEngine)))
							{
								this.BombardHitEngine(siegeEventSide, siegeEngineMissile.ShooterSiegeEngineType, targetSiegeEngine);
							}
						}
					}
					else
					{
						this.BesiegerCamp.BombardHitWalls(siegeEngineMissile.ShooterSiegeEngineType, siegeEngineMissile.TargetSlotIndex);
					}
				}
			}
			siegeEventSide.RemoveDeprecatedMissiles();
			foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
			{
				if (siegeEngineConstructionProgress2.IsConstructed && !siegeEngineConstructionProgress2.IsBeingRedeployed && siegeEngineConstructionProgress2.IsActive)
				{
					SiegeEvent.SiegeEngineConstructionProgress attackerSiegeEngine = siegeEngineConstructionProgress2;
					SiegeEngineType siegeEngine = siegeEngineConstructionProgress2.SiegeEngine;
					SiegeEvent.RangedSiegeEngine rangedSiegeEngine = siegeEngineConstructionProgress2.RangedSiegeEngine;
					if (siegeEngine.IsRanged && rangedSiegeEngine != null && rangedSiegeEngine.IsReadyToFire)
					{
						rangedSiegeEngine.Reload();
						if (attackerSiegeEngine.Hitpoints > 0f)
						{
							int num = (siegeEngine.IsRanged ? siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines.FindIndex((SiegeEvent.SiegeEngineConstructionProgress engine) => engine == attackerSiegeEngine) : siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines.FindIndex((SiegeEvent.SiegeEngineConstructionProgress engine) => engine == attackerSiegeEngine));
							SiegeBombardTargets siegeBombardTargets;
							int num2;
							siegeEventSide.GetAttackTarget(siegeEventSide, attackerSiegeEngine.SiegeEngine, num, out siegeBombardTargets, out num2);
							if (siegeBombardTargets != SiegeBombardTargets.None)
							{
								rangedSiegeEngine.OnFireDecisionTaken(this, siegeEventSide.BattleSide, num2, siegeBombardTargets);
								float siegeEngineHitChance = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitChance(siegeEngine, siegeEventSide.BattleSide, siegeBombardTargets, this.BesiegedSettlement.Town);
								bool flag = MBRandom.RandomFloat < siegeEngineHitChance;
								SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress3 = null;
								if (siegeBombardTargets == SiegeBombardTargets.RangedEngines)
								{
									siegeEngineConstructionProgress3 = siegeEngines.DeployedRangedSiegeEngines[num2];
								}
								SiegeEvent.SiegeEngineMissile siegeEngineMissile2 = new SiegeEvent.SiegeEngineMissile(siegeEngine, num, siegeBombardTargets, num2, siegeEngineConstructionProgress3, rangedSiegeEngine.NextProjectileCollisionTime, CampaignTime.Now, flag);
								siegeEventSide.AddSiegeEngineMissile(siegeEngineMissile2);
							}
							else
							{
								rangedSiegeEngine.Hold();
							}
						}
					}
				}
			}
		}

		// Token: 0x06002200 RID: 8704 RVA: 0x00090AF8 File Offset: 0x0008ECF8
		private float GetDistanceBetweenTwoRangedEngine(int attackerSlotIndex, int defenderSlotIndex)
		{
			return (float)MathF.Abs(attackerSlotIndex - defenderSlotIndex) * 1f + 3f;
		}

		// Token: 0x06002201 RID: 8705 RVA: 0x00090B0F File Offset: 0x0008ED0F
		private float PriorityCalculationForEngines(float distance)
		{
			return 7f - distance;
		}

		// Token: 0x06002202 RID: 8706 RVA: 0x00090B18 File Offset: 0x0008ED18
		public void FindAttackableRangedEngineWithHighestPriority(ISiegeEventSide siegeEventSide, int attackerSlotIndex, out int targetIndex, out float targetPriority)
		{
			targetIndex = -1;
			targetPriority = 0f;
			float num = 9999f;
			SiegeEvent.SiegeEngineConstructionProgress[] deployedRangedSiegeEngines = this.GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide()).SiegeEngines.DeployedRangedSiegeEngines;
			for (int i = 0; i < deployedRangedSiegeEngines.Length; i++)
			{
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = deployedRangedSiegeEngines[i];
				if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.IsConstructed && !siegeEngineConstructionProgress.IsBeingRedeployed && siegeEngineConstructionProgress.Hitpoints > 0f)
				{
					float distanceBetweenTwoRangedEngine = this.GetDistanceBetweenTwoRangedEngine(attackerSlotIndex, i);
					float num2 = this.PriorityCalculationForEngines(distanceBetweenTwoRangedEngine);
					if (num2 > targetPriority || (MathF.Abs(num2 - targetPriority) < 0.0001f && num > distanceBetweenTwoRangedEngine))
					{
						targetIndex = i;
						targetPriority = num2;
						num = distanceBetweenTwoRangedEngine;
					}
				}
			}
		}

		// Token: 0x06002203 RID: 8707 RVA: 0x00090BC8 File Offset: 0x0008EDC8
		private void OnSiegeEngineDestroyed(ISiegeEventSide siegeEventSide, SiegeEvent.SiegeEngineConstructionProgress siegeEngine)
		{
			int num = siegeEventSide.SiegeEngines.FindDeploymentIndexOfDeployedEngine(siegeEngine);
			if (num == -1)
			{
				siegeEventSide.SiegeEngines.RemovedSiegeEngineFromReservedSiegeEngines(siegeEngine);
			}
			else
			{
				this.DoSiegeAction(siegeEventSide, SiegeStrategyActionModel.SiegeAction.RemoveDeployedSiegeEngine, siegeEngine.SiegeEngine, num, -1);
			}
			this.BesiegedSettlement.Party.Visuals.SetMapIconAsDirty();
			CampaignEventDispatcher.Instance.OnSiegeEngineDestroyed(this.BesiegerCamp.BesiegerParty, this.BesiegedSettlement, siegeEventSide.BattleSide, siegeEngine.SiegeEngine);
		}

		// Token: 0x06002204 RID: 8708 RVA: 0x00090C44 File Offset: 0x0008EE44
		private void BombardHitEngine(ISiegeEventSide siegeEventSide, SiegeEngineType attackerEngineType, SiegeEvent.SiegeEngineConstructionProgress damagedEngine)
		{
			ISiegeEventSide siegeEventSide2 = this.GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide());
			float siegeEngineDamage = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineDamage(this, siegeEventSide.BattleSide, attackerEngineType, SiegeBombardTargets.RangedEngines);
			damagedEngine.SetHitpoints(damagedEngine.Hitpoints - siegeEngineDamage);
			CampaignEventDispatcher.Instance.OnSiegeBombardmentHit(this.BesiegerCamp.BesiegerParty, this.BesiegedSettlement, siegeEventSide.BattleSide, attackerEngineType, SiegeBombardTargets.RangedEngines);
			if (damagedEngine.Hitpoints <= 0f)
			{
				this.OnSiegeEngineDestroyed(siegeEventSide2, damagedEngine);
			}
			Debug.Print(string.Concat(new object[]
			{
				this.BesiegedSettlement.Name,
				" - ",
				siegeEventSide.BattleSide.ToString(),
				" ",
				attackerEngineType.Name,
				" hit the enemy ranged siege engine(",
				damagedEngine.SiegeEngine.Name,
				") for ",
				siegeEngineDamage
			}), 0, Debug.DebugColor.Purple, 137438953472UL);
		}

		// Token: 0x04000A8B RID: 2699
		[SaveableField(6)]
		public readonly Settlement BesiegedSettlement;

		// Token: 0x04000A8C RID: 2700
		[SaveableField(10)]
		public readonly BesiegerCamp BesiegerCamp;

		// Token: 0x04000A8D RID: 2701
		[SaveableField(144)]
		private bool _isBesiegerDefeated;

		// Token: 0x04000A8E RID: 2702
		public ISiegeEventVisual SiegeEventVisual;

		// Token: 0x02000599 RID: 1433
		public class RangedSiegeEngine
		{
			// Token: 0x06004494 RID: 17556 RVA: 0x001396B2 File Offset: 0x001378B2
			internal static void AutoGeneratedStaticCollectObjectsRangedSiegeEngine(object o, List<object> collectedObjects)
			{
				((SiegeEvent.RangedSiegeEngine)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004495 RID: 17557 RVA: 0x001396C0 File Offset: 0x001378C0
			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.EngineType);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.NextTimeEngineCanBombard, collectedObjects);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.LastBombardTime, collectedObjects);
			}

			// Token: 0x06004496 RID: 17558 RVA: 0x001396F0 File Offset: 0x001378F0
			internal static object AutoGeneratedGetMemberValueNextTimeEngineCanBombard(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).NextTimeEngineCanBombard;
			}

			// Token: 0x06004497 RID: 17559 RVA: 0x00139702 File Offset: 0x00137902
			internal static object AutoGeneratedGetMemberValueAlreadyFired(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).AlreadyFired;
			}

			// Token: 0x06004498 RID: 17560 RVA: 0x00139714 File Offset: 0x00137914
			internal static object AutoGeneratedGetMemberValueCurrentTargetType(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).CurrentTargetType;
			}

			// Token: 0x06004499 RID: 17561 RVA: 0x00139726 File Offset: 0x00137926
			internal static object AutoGeneratedGetMemberValueCurrentTargetIndex(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).CurrentTargetIndex;
			}

			// Token: 0x0600449A RID: 17562 RVA: 0x00139738 File Offset: 0x00137938
			internal static object AutoGeneratedGetMemberValuePreviousDamagedTargetType(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).PreviousDamagedTargetType;
			}

			// Token: 0x0600449B RID: 17563 RVA: 0x0013974A File Offset: 0x0013794A
			internal static object AutoGeneratedGetMemberValuePreviousTargetIndex(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).PreviousTargetIndex;
			}

			// Token: 0x0600449C RID: 17564 RVA: 0x0013975C File Offset: 0x0013795C
			internal static object AutoGeneratedGetMemberValueLastBombardTime(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).LastBombardTime;
			}

			// Token: 0x0600449D RID: 17565 RVA: 0x0013976E File Offset: 0x0013796E
			internal static object AutoGeneratedGetMemberValueEngineType(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).EngineType;
			}

			// Token: 0x17000DC5 RID: 3525
			// (get) Token: 0x0600449E RID: 17566 RVA: 0x0013977B File Offset: 0x0013797B
			// (set) Token: 0x0600449F RID: 17567 RVA: 0x00139783 File Offset: 0x00137983
			[SaveableProperty(2)]
			public CampaignTime NextTimeEngineCanBombard { get; private set; }

			// Token: 0x17000DC6 RID: 3526
			// (get) Token: 0x060044A0 RID: 17568 RVA: 0x0013978C File Offset: 0x0013798C
			// (set) Token: 0x060044A1 RID: 17569 RVA: 0x00139794 File Offset: 0x00137994
			[SaveableProperty(3)]
			public bool AlreadyFired { get; private set; }

			// Token: 0x17000DC7 RID: 3527
			// (get) Token: 0x060044A2 RID: 17570 RVA: 0x0013979D File Offset: 0x0013799D
			// (set) Token: 0x060044A3 RID: 17571 RVA: 0x001397A5 File Offset: 0x001379A5
			[SaveableProperty(4)]
			public SiegeBombardTargets CurrentTargetType { get; private set; }

			// Token: 0x17000DC8 RID: 3528
			// (get) Token: 0x060044A4 RID: 17572 RVA: 0x001397AE File Offset: 0x001379AE
			// (set) Token: 0x060044A5 RID: 17573 RVA: 0x001397B6 File Offset: 0x001379B6
			[SaveableProperty(5)]
			public int CurrentTargetIndex { get; private set; }

			// Token: 0x17000DC9 RID: 3529
			// (get) Token: 0x060044A6 RID: 17574 RVA: 0x001397BF File Offset: 0x001379BF
			// (set) Token: 0x060044A7 RID: 17575 RVA: 0x001397C7 File Offset: 0x001379C7
			[SaveableProperty(6)]
			public SiegeBombardTargets PreviousDamagedTargetType { get; private set; }

			// Token: 0x17000DCA RID: 3530
			// (get) Token: 0x060044A8 RID: 17576 RVA: 0x001397D0 File Offset: 0x001379D0
			// (set) Token: 0x060044A9 RID: 17577 RVA: 0x001397D8 File Offset: 0x001379D8
			[SaveableProperty(7)]
			public int PreviousTargetIndex { get; private set; }

			// Token: 0x17000DCB RID: 3531
			// (get) Token: 0x060044AA RID: 17578 RVA: 0x001397E1 File Offset: 0x001379E1
			// (set) Token: 0x060044AB RID: 17579 RVA: 0x001397E9 File Offset: 0x001379E9
			[SaveableProperty(8)]
			public CampaignTime LastBombardTime { get; private set; }

			// Token: 0x17000DCC RID: 3532
			// (get) Token: 0x060044AC RID: 17580 RVA: 0x001397F4 File Offset: 0x001379F4
			public CampaignTime NextProjectileCollisionTime
			{
				get
				{
					if (this.LastBombardTime.IsFuture)
					{
						return CampaignTime.Never;
					}
					return this.NextTimeEngineCanBombard;
				}
			}

			// Token: 0x17000DCD RID: 3533
			// (get) Token: 0x060044AD RID: 17581 RVA: 0x00139820 File Offset: 0x00137A20
			public bool IsReadyToFire
			{
				get
				{
					return this.NextTimeEngineCanBombard.IsPast;
				}
			}

			// Token: 0x060044AE RID: 17582 RVA: 0x0013983C File Offset: 0x00137A3C
			public RangedSiegeEngine(SiegeEngineType engineType, ISiegeEventSide siegeSide)
			{
				this.EngineType = engineType;
				this.CurrentTargetType = SiegeBombardTargets.None;
				this.CurrentTargetIndex = -1;
				this.PreviousDamagedTargetType = SiegeBombardTargets.None;
				this.PreviousTargetIndex = -1;
				this.AlreadyFired = false;
				this.LastBombardTime = CampaignTime.Never;
				this.CalculateNextFireTime(siegeSide.SiegeEvent, siegeSide.BattleSide);
			}

			// Token: 0x060044AF RID: 17583 RVA: 0x00139896 File Offset: 0x00137A96
			public void Hold()
			{
				this.CurrentTargetType = SiegeBombardTargets.None;
				this.CurrentTargetIndex = -1;
			}

			// Token: 0x060044B0 RID: 17584 RVA: 0x001398A6 File Offset: 0x00137AA6
			public void Reload()
			{
				this.AlreadyFired = false;
			}

			// Token: 0x060044B1 RID: 17585 RVA: 0x001398B0 File Offset: 0x00137AB0
			public void OnFireDecisionTaken(SiegeEvent siegeEvent, BattleSideEnum battleSide, int targetSlotIndex, SiegeBombardTargets targetType)
			{
				this.PreviousDamagedTargetType = this.CurrentTargetType;
				this.PreviousTargetIndex = this.CurrentTargetIndex;
				this.CurrentTargetIndex = targetSlotIndex;
				this.CurrentTargetType = targetType;
				this.AlreadyFired = true;
				this.LastBombardTime = CampaignTime.Now;
				this.CalculateNextFireTime(siegeEvent, battleSide);
			}

			// Token: 0x060044B2 RID: 17586 RVA: 0x00139900 File Offset: 0x00137B00
			private void CalculateNextFireTime(SiegeEvent siegeEvent, BattleSideEnum battleSide)
			{
				CampaignTime campaignTime = CampaignTime.Minutes((long)Campaign.Current.Models.SiegeEventModel.GetRangedSiegeEngineReloadTime(siegeEvent, battleSide, this.EngineType));
				this.NextTimeEngineCanBombard = CampaignTime.Now + campaignTime;
			}

			// Token: 0x04001755 RID: 5973
			[SaveableField(1)]
			public readonly SiegeEngineType EngineType;
		}

		// Token: 0x0200059A RID: 1434
		public class SiegeEngineConstructionProgress
		{
			// Token: 0x060044B3 RID: 17587 RVA: 0x00139941 File Offset: 0x00137B41
			internal static void AutoGeneratedStaticCollectObjectsSiegeEngineConstructionProgress(object o, List<object> collectedObjects)
			{
				((SiegeEvent.SiegeEngineConstructionProgress)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060044B4 RID: 17588 RVA: 0x0013994F File Offset: 0x00137B4F
			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.SiegeEngine);
				collectedObjects.Add(this.RangedSiegeEngine);
			}

			// Token: 0x060044B5 RID: 17589 RVA: 0x00139969 File Offset: 0x00137B69
			internal static object AutoGeneratedGetMemberValueIsActive(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).IsActive;
			}

			// Token: 0x060044B6 RID: 17590 RVA: 0x0013997B File Offset: 0x00137B7B
			internal static object AutoGeneratedGetMemberValueHitpoints(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).Hitpoints;
			}

			// Token: 0x060044B7 RID: 17591 RVA: 0x0013998D File Offset: 0x00137B8D
			internal static object AutoGeneratedGetMemberValueProgress(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).Progress;
			}

			// Token: 0x060044B8 RID: 17592 RVA: 0x0013999F File Offset: 0x00137B9F
			internal static object AutoGeneratedGetMemberValueRangedSiegeEngine(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).RangedSiegeEngine;
			}

			// Token: 0x060044B9 RID: 17593 RVA: 0x001399AC File Offset: 0x00137BAC
			internal static object AutoGeneratedGetMemberValueRedeploymentProgress(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).RedeploymentProgress;
			}

			// Token: 0x060044BA RID: 17594 RVA: 0x001399BE File Offset: 0x00137BBE
			internal static object AutoGeneratedGetMemberValueMaxHitPoints(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).MaxHitPoints;
			}

			// Token: 0x060044BB RID: 17595 RVA: 0x001399D0 File Offset: 0x00137BD0
			internal static object AutoGeneratedGetMemberValueSiegeEngine(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).SiegeEngine;
			}

			// Token: 0x17000DCE RID: 3534
			// (get) Token: 0x060044BC RID: 17596 RVA: 0x001399DD File Offset: 0x00137BDD
			// (set) Token: 0x060044BD RID: 17597 RVA: 0x001399E5 File Offset: 0x00137BE5
			[SaveableProperty(2)]
			public bool IsActive { get; private set; }

			// Token: 0x17000DCF RID: 3535
			// (get) Token: 0x060044BE RID: 17598 RVA: 0x001399EE File Offset: 0x00137BEE
			// (set) Token: 0x060044BF RID: 17599 RVA: 0x001399F6 File Offset: 0x00137BF6
			[SaveableProperty(3)]
			public float Hitpoints { get; private set; }

			// Token: 0x17000DD0 RID: 3536
			// (get) Token: 0x060044C0 RID: 17600 RVA: 0x001399FF File Offset: 0x00137BFF
			// (set) Token: 0x060044C1 RID: 17601 RVA: 0x00139A07 File Offset: 0x00137C07
			[SaveableProperty(4)]
			public float Progress { get; private set; }

			// Token: 0x17000DD1 RID: 3537
			// (get) Token: 0x060044C2 RID: 17602 RVA: 0x00139A10 File Offset: 0x00137C10
			// (set) Token: 0x060044C3 RID: 17603 RVA: 0x00139A18 File Offset: 0x00137C18
			[SaveableProperty(5)]
			public SiegeEvent.RangedSiegeEngine RangedSiegeEngine { get; private set; }

			// Token: 0x17000DD2 RID: 3538
			// (get) Token: 0x060044C4 RID: 17604 RVA: 0x00139A21 File Offset: 0x00137C21
			// (set) Token: 0x060044C5 RID: 17605 RVA: 0x00139A29 File Offset: 0x00137C29
			[SaveableProperty(6)]
			public float RedeploymentProgress { get; private set; }

			// Token: 0x17000DD3 RID: 3539
			// (get) Token: 0x060044C6 RID: 17606 RVA: 0x00139A32 File Offset: 0x00137C32
			// (set) Token: 0x060044C7 RID: 17607 RVA: 0x00139A3A File Offset: 0x00137C3A
			[SaveableProperty(7)]
			public float MaxHitPoints { get; private set; }

			// Token: 0x17000DD4 RID: 3540
			// (get) Token: 0x060044C8 RID: 17608 RVA: 0x00139A43 File Offset: 0x00137C43
			public bool IsConstructed
			{
				get
				{
					return this.Progress >= 1f;
				}
			}

			// Token: 0x17000DD5 RID: 3541
			// (get) Token: 0x060044C9 RID: 17609 RVA: 0x00139A55 File Offset: 0x00137C55
			public bool IsBeingRedeployed
			{
				get
				{
					return this.RedeploymentProgress < 1f;
				}
			}

			// Token: 0x060044CA RID: 17610 RVA: 0x00139A64 File Offset: 0x00137C64
			public SiegeEngineConstructionProgress(SiegeEngineType siegeEngine, float progress, float maxHitPoints)
			{
				this.SiegeEngine = siegeEngine;
				this.Progress = progress;
				this.RedeploymentProgress = 1f;
				this.IsActive = false;
				this.RangedSiegeEngine = null;
				this.MaxHitPoints = maxHitPoints;
				this.Hitpoints = this.MaxHitPoints;
			}

			// Token: 0x060044CB RID: 17611 RVA: 0x00139AB1 File Offset: 0x00137CB1
			public void Activate(bool isActive)
			{
				this.IsActive = isActive;
			}

			// Token: 0x060044CC RID: 17612 RVA: 0x00139ABA File Offset: 0x00137CBA
			public void SetRedeploymentProgress(float redeploymentProgress)
			{
				this.RedeploymentProgress = redeploymentProgress;
			}

			// Token: 0x060044CD RID: 17613 RVA: 0x00139AC3 File Offset: 0x00137CC3
			public void SetHitpoints(float hitPoints)
			{
				this.Hitpoints = hitPoints;
			}

			// Token: 0x060044CE RID: 17614 RVA: 0x00139ACC File Offset: 0x00137CCC
			public void SetProgress(float progress)
			{
				this.Progress = progress;
			}

			// Token: 0x060044CF RID: 17615 RVA: 0x00139AD5 File Offset: 0x00137CD5
			public void SetRangedSiegeEngine(SiegeEvent.RangedSiegeEngine rangedSiegeEngine)
			{
				this.RangedSiegeEngine = rangedSiegeEngine;
			}

			// Token: 0x0400175D RID: 5981
			[SaveableField(1)]
			public readonly SiegeEngineType SiegeEngine;
		}

		// Token: 0x0200059B RID: 1435
		public class SiegeEnginesContainer
		{
			// Token: 0x060044D0 RID: 17616 RVA: 0x00139ADE File Offset: 0x00137CDE
			internal static void AutoGeneratedStaticCollectObjectsSiegeEnginesContainer(object o, List<object> collectedObjects)
			{
				((SiegeEvent.SiegeEnginesContainer)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060044D1 RID: 17617 RVA: 0x00139AEC File Offset: 0x00137CEC
			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.SiegePreparations);
				collectedObjects.Add(this.DeployedRangedSiegeEngines);
				collectedObjects.Add(this.DeployedMeleeSiegeEngines);
				collectedObjects.Add(this._deployedSiegeEngines);
				collectedObjects.Add(this._reservedSiegeEngines);
				collectedObjects.Add(this._deployedSiegeEngineTypesCount);
				collectedObjects.Add(this._reservedSiegeEngineTypesCount);
				collectedObjects.Add(this._removedSiegeEngines);
			}

			// Token: 0x060044D2 RID: 17618 RVA: 0x00139B59 File Offset: 0x00137D59
			internal static object AutoGeneratedGetMemberValueSiegePreparations(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o).SiegePreparations;
			}

			// Token: 0x060044D3 RID: 17619 RVA: 0x00139B66 File Offset: 0x00137D66
			internal static object AutoGeneratedGetMemberValueDeployedRangedSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o).DeployedRangedSiegeEngines;
			}

			// Token: 0x060044D4 RID: 17620 RVA: 0x00139B73 File Offset: 0x00137D73
			internal static object AutoGeneratedGetMemberValueDeployedMeleeSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o).DeployedMeleeSiegeEngines;
			}

			// Token: 0x060044D5 RID: 17621 RVA: 0x00139B80 File Offset: 0x00137D80
			internal static object AutoGeneratedGetMemberValue_deployedSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._deployedSiegeEngines;
			}

			// Token: 0x060044D6 RID: 17622 RVA: 0x00139B8D File Offset: 0x00137D8D
			internal static object AutoGeneratedGetMemberValue_reservedSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._reservedSiegeEngines;
			}

			// Token: 0x060044D7 RID: 17623 RVA: 0x00139B9A File Offset: 0x00137D9A
			internal static object AutoGeneratedGetMemberValue_deployedSiegeEngineTypesCount(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._deployedSiegeEngineTypesCount;
			}

			// Token: 0x060044D8 RID: 17624 RVA: 0x00139BA7 File Offset: 0x00137DA7
			internal static object AutoGeneratedGetMemberValue_reservedSiegeEngineTypesCount(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._reservedSiegeEngineTypesCount;
			}

			// Token: 0x060044D9 RID: 17625 RVA: 0x00139BB4 File Offset: 0x00137DB4
			internal static object AutoGeneratedGetMemberValue_removedSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._removedSiegeEngines;
			}

			// Token: 0x17000DD6 RID: 3542
			// (get) Token: 0x060044DA RID: 17626 RVA: 0x00139BC1 File Offset: 0x00137DC1
			public MBReadOnlyList<SiegeEvent.SiegeEngineConstructionProgress> DeployedSiegeEngines
			{
				get
				{
					return this._deployedSiegeEngines;
				}
			}

			// Token: 0x17000DD7 RID: 3543
			// (get) Token: 0x060044DB RID: 17627 RVA: 0x00139BC9 File Offset: 0x00137DC9
			public MBReadOnlyList<SiegeEvent.SiegeEngineConstructionProgress> ReservedSiegeEngines
			{
				get
				{
					return this._reservedSiegeEngines;
				}
			}

			// Token: 0x17000DD8 RID: 3544
			// (get) Token: 0x060044DC RID: 17628 RVA: 0x00139BD1 File Offset: 0x00137DD1
			// (set) Token: 0x060044DD RID: 17629 RVA: 0x00139BD9 File Offset: 0x00137DD9
			public MBReadOnlyDictionary<SiegeEngineType, int> DeployedSiegeEngineTypesCount { get; private set; }

			// Token: 0x17000DD9 RID: 3545
			// (get) Token: 0x060044DE RID: 17630 RVA: 0x00139BE2 File Offset: 0x00137DE2
			// (set) Token: 0x060044DF RID: 17631 RVA: 0x00139BEA File Offset: 0x00137DEA
			public MBReadOnlyDictionary<SiegeEngineType, int> ReservedSiegeEngineTypesCount { get; private set; }

			// Token: 0x17000DDA RID: 3546
			// (get) Token: 0x060044E0 RID: 17632 RVA: 0x00139BF3 File Offset: 0x00137DF3
			public MBReadOnlyList<SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine> RemovedSiegeEngines
			{
				get
				{
					return this._removedSiegeEngines;
				}
			}

			// Token: 0x060044E1 RID: 17633 RVA: 0x00139BFB File Offset: 0x00137DFB
			[LoadInitializationCallback]
			private void OnLoad(MetaData metaData)
			{
				this.DeployedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(this._deployedSiegeEngineTypesCount);
				this.ReservedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(this._reservedSiegeEngineTypesCount);
				this.RefreshDeployedCounts();
				this.RefreshReservedCounts();
			}

			// Token: 0x060044E2 RID: 17634 RVA: 0x00139C2B File Offset: 0x00137E2B
			public IEnumerable<SiegeEvent.SiegeEngineConstructionProgress> AllSiegeEngines()
			{
				if (this.SiegePreparations != null)
				{
					yield return this.SiegePreparations;
				}
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress in this._deployedSiegeEngines)
				{
					yield return siegeEngineConstructionProgress;
				}
				List<SiegeEvent.SiegeEngineConstructionProgress>.Enumerator enumerator = default(List<SiegeEvent.SiegeEngineConstructionProgress>.Enumerator);
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 in this._reservedSiegeEngines)
				{
					yield return siegeEngineConstructionProgress2;
				}
				enumerator = default(List<SiegeEvent.SiegeEngineConstructionProgress>.Enumerator);
				yield break;
				yield break;
			}

			// Token: 0x060044E3 RID: 17635 RVA: 0x00139C3C File Offset: 0x00137E3C
			public SiegeEnginesContainer(BattleSideEnum side, SiegeEvent.SiegeEngineConstructionProgress siegePreparations)
			{
				this.SiegePreparations = siegePreparations;
				if (side != BattleSideEnum.Defender)
				{
					if (side == BattleSideEnum.Attacker)
					{
						this._deployedSiegeEngines = new MBList<SiegeEvent.SiegeEngineConstructionProgress>(4);
						this.DeployedRangedSiegeEngines = new SiegeEvent.SiegeEngineConstructionProgress[4];
						this.DeployedMeleeSiegeEngines = new SiegeEvent.SiegeEngineConstructionProgress[3];
					}
					else
					{
						Debug.FailedAssert("Invalid side", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Siege\\SiegeEvent.cs", ".ctor", 254);
					}
				}
				else
				{
					this._deployedSiegeEngines = new MBList<SiegeEvent.SiegeEngineConstructionProgress>(4);
					this.DeployedRangedSiegeEngines = new SiegeEvent.SiegeEngineConstructionProgress[4];
					this.DeployedMeleeSiegeEngines = new SiegeEvent.SiegeEngineConstructionProgress[0];
				}
				this._deployedSiegeEngineTypesCount = new Dictionary<SiegeEngineType, int>();
				this.DeployedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(this._deployedSiegeEngineTypesCount);
				this._reservedSiegeEngines = new MBList<SiegeEvent.SiegeEngineConstructionProgress>();
				this._reservedSiegeEngineTypesCount = new Dictionary<SiegeEngineType, int>();
				this.ReservedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(this._reservedSiegeEngineTypesCount);
				this._removedSiegeEngines = new MBList<SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine>();
			}

			// Token: 0x060044E4 RID: 17636 RVA: 0x00139D10 File Offset: 0x00137F10
			public void AddPrebuiltEngineToReserve(SiegeEvent.SiegeEngineConstructionProgress siegeEngine)
			{
				this._reservedSiegeEngines.Add(siegeEngine);
				siegeEngine.SetProgress(1f);
				siegeEngine.SetRedeploymentProgress(0f);
				this.RefreshReservedCounts();
			}

			// Token: 0x060044E5 RID: 17637 RVA: 0x00139D3C File Offset: 0x00137F3C
			public void DeploySiegeEngineAtIndex(SiegeEvent.SiegeEngineConstructionProgress siegeEngine, int index)
			{
				SiegeEvent.SiegeEngineConstructionProgress[] array = (siegeEngine.SiegeEngine.IsRanged ? this.DeployedRangedSiegeEngines : this.DeployedMeleeSiegeEngines);
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = array[index];
				if (siegeEngineConstructionProgress != null)
				{
					siegeEngineConstructionProgress.Activate(false);
					this._deployedSiegeEngines.Remove(siegeEngineConstructionProgress);
					this._reservedSiegeEngines.Add(siegeEngineConstructionProgress);
					siegeEngineConstructionProgress.SetRedeploymentProgress(0f);
				}
				siegeEngine.Activate(true);
				this._reservedSiegeEngines.Remove(siegeEngine);
				this.RefreshReservedCounts();
				array[index] = siegeEngine;
				this._deployedSiegeEngines.Add(siegeEngine);
				this.RefreshDeployedCounts();
			}

			// Token: 0x060044E6 RID: 17638 RVA: 0x00139DC8 File Offset: 0x00137FC8
			public void RemoveDeployedSiegeEngine(int index, bool isRanged, bool moveToReserve)
			{
				SiegeEvent.SiegeEngineConstructionProgress[] array = (isRanged ? this.DeployedRangedSiegeEngines : this.DeployedMeleeSiegeEngines);
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = array[index];
				if (siegeEngineConstructionProgress != null)
				{
					siegeEngineConstructionProgress.Activate(false);
					if (moveToReserve)
					{
						this._reservedSiegeEngines.Add(siegeEngineConstructionProgress);
						this.RefreshReservedCounts();
						siegeEngineConstructionProgress.SetRedeploymentProgress(0f);
					}
					this._deployedSiegeEngines.Remove(siegeEngineConstructionProgress);
					this.RefreshDeployedCounts();
					array[index] = null;
				}
			}

			// Token: 0x060044E7 RID: 17639 RVA: 0x00139E2C File Offset: 0x0013802C
			public bool RemovedSiegeEngineFromReservedSiegeEngines(SiegeEvent.SiegeEngineConstructionProgress siegeEngine)
			{
				bool flag = this._reservedSiegeEngines.Remove(siegeEngine);
				if (flag)
				{
					this.RefreshReservedCounts();
				}
				return flag;
			}

			// Token: 0x060044E8 RID: 17640 RVA: 0x00139E44 File Offset: 0x00138044
			public int FindDeploymentIndexOfDeployedEngine(SiegeEvent.SiegeEngineConstructionProgress deployedEngine)
			{
				if (deployedEngine.SiegeEngine.IsRanged)
				{
					return this.DeployedRangedSiegeEngines.FindIndex((SiegeEvent.SiegeEngineConstructionProgress engine) => engine == deployedEngine);
				}
				return this.DeployedMeleeSiegeEngines.FindIndex((SiegeEvent.SiegeEngineConstructionProgress engine) => engine == deployedEngine);
			}

			// Token: 0x060044E9 RID: 17641 RVA: 0x00139E9F File Offset: 0x0013809F
			public bool ClearRemovedEnginesIfNecessary()
			{
				return this._removedSiegeEngines.RemoveAll((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine engine) => !engine.RemovalTime.IsFuture) > 0;
			}

			// Token: 0x060044EA RID: 17642 RVA: 0x00139ED0 File Offset: 0x001380D0
			private void RefreshDeployedCounts()
			{
				this._deployedSiegeEngineTypesCount.Clear();
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress in this.DeployedSiegeEngines)
				{
					SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
					int num;
					if (this._deployedSiegeEngineTypesCount.TryGetValue(siegeEngine, out num))
					{
						this._deployedSiegeEngineTypesCount[siegeEngine] = num + 1;
					}
					else
					{
						this._deployedSiegeEngineTypesCount.Add(siegeEngine, 1);
					}
				}
			}

			// Token: 0x060044EB RID: 17643 RVA: 0x00139F5C File Offset: 0x0013815C
			private void RefreshReservedCounts()
			{
				this._reservedSiegeEngineTypesCount.Clear();
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress in this.ReservedSiegeEngines)
				{
					SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
					int num;
					if (this._reservedSiegeEngineTypesCount.TryGetValue(siegeEngine, out num))
					{
						this._reservedSiegeEngineTypesCount[siegeEngine] = num + 1;
					}
					else
					{
						this._reservedSiegeEngineTypesCount.Add(siegeEngine, 1);
					}
				}
			}

			// Token: 0x04001764 RID: 5988
			public const int MaximumAttackerMeleeSiegeEngineCount = 3;

			// Token: 0x04001765 RID: 5989
			public const int MaximumAttackerRangedSiegeEngineCount = 4;

			// Token: 0x04001766 RID: 5990
			public const int MaximumDefenderMeleeSiegeEngineCount = 0;

			// Token: 0x04001767 RID: 5991
			public const int MaximumDefenderRangedSiegeEngineCount = 4;

			// Token: 0x04001768 RID: 5992
			[SaveableField(1)]
			public readonly SiegeEvent.SiegeEngineConstructionProgress SiegePreparations;

			// Token: 0x04001769 RID: 5993
			[SaveableField(2)]
			private readonly MBList<SiegeEvent.SiegeEngineConstructionProgress> _deployedSiegeEngines;

			// Token: 0x0400176A RID: 5994
			[SaveableField(3)]
			private readonly MBList<SiegeEvent.SiegeEngineConstructionProgress> _reservedSiegeEngines;

			// Token: 0x0400176B RID: 5995
			[SaveableField(4)]
			public readonly SiegeEvent.SiegeEngineConstructionProgress[] DeployedRangedSiegeEngines;

			// Token: 0x0400176C RID: 5996
			[SaveableField(5)]
			public readonly SiegeEvent.SiegeEngineConstructionProgress[] DeployedMeleeSiegeEngines;

			// Token: 0x0400176E RID: 5998
			[SaveableField(6)]
			private readonly Dictionary<SiegeEngineType, int> _deployedSiegeEngineTypesCount;

			// Token: 0x04001770 RID: 6000
			[SaveableField(7)]
			private readonly Dictionary<SiegeEngineType, int> _reservedSiegeEngineTypesCount;

			// Token: 0x04001771 RID: 6001
			[SaveableField(8)]
			private readonly MBList<SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine> _removedSiegeEngines;

			// Token: 0x02000787 RID: 1927
			public class RemovedSiegeEngine
			{
				// Token: 0x060056EA RID: 22250 RVA: 0x0016EDD9 File Offset: 0x0016CFD9
				internal static void AutoGeneratedStaticCollectObjectsRemovedSiegeEngine(object o, List<object> collectedObjects)
				{
					((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
				}

				// Token: 0x060056EB RID: 22251 RVA: 0x0016EDE7 File Offset: 0x0016CFE7
				protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
				{
					collectedObjects.Add(this.SiegeEngine);
					CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.RemovalTime, collectedObjects);
				}

				// Token: 0x060056EC RID: 22252 RVA: 0x0016EE06 File Offset: 0x0016D006
				internal static object AutoGeneratedGetMemberValueSiegeEngine(object o)
				{
					return ((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine)o).SiegeEngine;
				}

				// Token: 0x060056ED RID: 22253 RVA: 0x0016EE13 File Offset: 0x0016D013
				internal static object AutoGeneratedGetMemberValueRemovalTime(object o)
				{
					return ((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine)o).RemovalTime;
				}

				// Token: 0x060056EE RID: 22254 RVA: 0x0016EE25 File Offset: 0x0016D025
				internal static object AutoGeneratedGetMemberValueSlotIndex(object o)
				{
					return ((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine)o).SlotIndex;
				}

				// Token: 0x060056EF RID: 22255 RVA: 0x0016EE37 File Offset: 0x0016D037
				public RemovedSiegeEngine(SiegeEvent.SiegeEngineConstructionProgress siegeEngine, CampaignTime removalTime, int slotIndex)
				{
					this.SiegeEngine = siegeEngine;
					this.RemovalTime = removalTime;
					this.SlotIndex = slotIndex;
				}

				// Token: 0x04001EAF RID: 7855
				[SaveableField(1)]
				public readonly SiegeEvent.SiegeEngineConstructionProgress SiegeEngine;

				// Token: 0x04001EB0 RID: 7856
				[SaveableField(2)]
				public readonly CampaignTime RemovalTime;

				// Token: 0x04001EB1 RID: 7857
				[SaveableField(3)]
				public readonly int SlotIndex;
			}
		}

		// Token: 0x0200059C RID: 1436
		public class SiegeEngineMissile
		{
			// Token: 0x060044EC RID: 17644 RVA: 0x00139FE8 File Offset: 0x001381E8
			internal static void AutoGeneratedStaticCollectObjectsSiegeEngineMissile(object o, List<object> collectedObjects)
			{
				((SiegeEvent.SiegeEngineMissile)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060044ED RID: 17645 RVA: 0x00139FF6 File Offset: 0x001381F6
			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.ShooterSiegeEngineType);
				collectedObjects.Add(this.TargetSiegeEngine);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.CollisionTime, collectedObjects);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.FireDecisionTime, collectedObjects);
			}

			// Token: 0x060044EE RID: 17646 RVA: 0x0013A032 File Offset: 0x00138232
			internal static object AutoGeneratedGetMemberValueShooterSiegeEngineType(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).ShooterSiegeEngineType;
			}

			// Token: 0x060044EF RID: 17647 RVA: 0x0013A03F File Offset: 0x0013823F
			internal static object AutoGeneratedGetMemberValueShooterSlotIndex(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).ShooterSlotIndex;
			}

			// Token: 0x060044F0 RID: 17648 RVA: 0x0013A051 File Offset: 0x00138251
			internal static object AutoGeneratedGetMemberValueTargetType(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).TargetType;
			}

			// Token: 0x060044F1 RID: 17649 RVA: 0x0013A063 File Offset: 0x00138263
			internal static object AutoGeneratedGetMemberValueTargetSlotIndex(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).TargetSlotIndex;
			}

			// Token: 0x060044F2 RID: 17650 RVA: 0x0013A075 File Offset: 0x00138275
			internal static object AutoGeneratedGetMemberValueTargetSiegeEngine(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).TargetSiegeEngine;
			}

			// Token: 0x060044F3 RID: 17651 RVA: 0x0013A082 File Offset: 0x00138282
			internal static object AutoGeneratedGetMemberValueHitSuccessful(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).HitSuccessful;
			}

			// Token: 0x060044F4 RID: 17652 RVA: 0x0013A094 File Offset: 0x00138294
			internal static object AutoGeneratedGetMemberValueCollisionTime(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).CollisionTime;
			}

			// Token: 0x060044F5 RID: 17653 RVA: 0x0013A0A6 File Offset: 0x001382A6
			internal static object AutoGeneratedGetMemberValueFireDecisionTime(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).FireDecisionTime;
			}

			// Token: 0x060044F6 RID: 17654 RVA: 0x0013A0B8 File Offset: 0x001382B8
			public SiegeEngineMissile(SiegeEngineType shooterSiegeEngineType, int shooterSlotIndex, SiegeBombardTargets targetType, int targetSlotIndex, SiegeEvent.SiegeEngineConstructionProgress targetSiegeEngine, CampaignTime collisionTime, CampaignTime fireTime, bool hitSuccessful)
			{
				this.ShooterSiegeEngineType = shooterSiegeEngineType;
				this.ShooterSlotIndex = shooterSlotIndex;
				this.TargetType = targetType;
				this.TargetSlotIndex = targetSlotIndex;
				this.TargetSiegeEngine = targetSiegeEngine;
				this.CollisionTime = collisionTime;
				this.FireDecisionTime = fireTime;
				this.HitSuccessful = hitSuccessful;
			}

			// Token: 0x04001772 RID: 6002
			[SaveableField(1)]
			public readonly SiegeEngineType ShooterSiegeEngineType;

			// Token: 0x04001773 RID: 6003
			[SaveableField(2)]
			public readonly int ShooterSlotIndex;

			// Token: 0x04001774 RID: 6004
			[SaveableField(3)]
			public readonly SiegeBombardTargets TargetType;

			// Token: 0x04001775 RID: 6005
			[SaveableField(4)]
			public readonly int TargetSlotIndex;

			// Token: 0x04001776 RID: 6006
			[SaveableField(5)]
			public readonly SiegeEvent.SiegeEngineConstructionProgress TargetSiegeEngine;

			// Token: 0x04001777 RID: 6007
			[SaveableField(6)]
			public readonly bool HitSuccessful;

			// Token: 0x04001778 RID: 6008
			[SaveableField(7)]
			public readonly CampaignTime CollisionTime;

			// Token: 0x04001779 RID: 6009
			[SaveableField(8)]
			public readonly CampaignTime FireDecisionTime;
		}
	}
}
