using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Siege
{
	public class SiegeEvent
	{
		internal static void AutoGeneratedStaticCollectObjectsSiegeEvent(object o, List<object> collectedObjects)
		{
			((SiegeEvent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.BesiegedSettlement);
			collectedObjects.Add(this.BesiegerCamp);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.SiegeStartTime, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueSiegeStartTime(object o)
		{
			return ((SiegeEvent)o).SiegeStartTime;
		}

		internal static object AutoGeneratedGetMemberValueBesiegedSettlement(object o)
		{
			return ((SiegeEvent)o).BesiegedSettlement;
		}

		internal static object AutoGeneratedGetMemberValueBesiegerCamp(object o)
		{
			return ((SiegeEvent)o).BesiegerCamp;
		}

		internal static object AutoGeneratedGetMemberValue_isBesiegerDefeated(object o)
		{
			return ((SiegeEvent)o)._isBesiegerDefeated;
		}

		public int SiegeWallSeed
		{
			get
			{
				return Common.GetDJB2("" + this.SiegeStartTime.NumTicks + "*" + this.BesiegedSettlement.StringId + "*" + (int)this.BesiegedSettlement.SettlementTotalWallHitPoints);
			}
		}

		public int SiegePeopleSeed
		{
			get
			{
				return Common.GetDJB2("" + this.SiegeStartTime.NumTicks + "*" + this.BesiegedSettlement.StringId + "*" + this.BesiegerCamp.NumberOfTroopsKilledOnSide + "#" + this.BesiegedSettlement.NumberOfTroopsKilledOnSide);
			}
		}

		[SaveableProperty(5)]
		public CampaignTime SiegeStartTime { get; private set; }

		public bool IsPlayerSiegeEvent
		{
			get
			{
				return this.BesiegerCamp.LeaderParty.IsMainParty || PlayerSiege.PlayerSiegeEvent == this;
			}
		}

		public List<PartyBase> GetInvolvedPartiesForEventType(MapEvent.BattleTypes battleType)
		{
			List<PartyBase> list = new List<PartyBase>();
			foreach (PartyBase partyBase in this.BesiegerCamp.GetInvolvedPartiesForEventType(battleType))
			{
				list.Add(partyBase);
			}
			foreach (PartyBase partyBase2 in this.BesiegedSettlement.GetInvolvedPartiesForEventType(battleType))
			{
				list.Add(partyBase2);
			}
			return list;
		}

		public MapEvent.BattleTypes GetCurrentBattleType()
		{
			BesiegerCamp besiegerCamp = this.BesiegerCamp;
			bool flag;
			if (besiegerCamp == null)
			{
				flag = null != null;
			}
			else
			{
				MobileParty leaderParty = besiegerCamp.LeaderParty;
				flag = ((leaderParty != null) ? leaderParty.MapEvent : null) != null;
			}
			if (flag)
			{
				return this.BesiegerCamp.LeaderParty.MapEvent.EventType;
			}
			return MapEvent.BattleTypes.Siege;
		}

		public SiegeEvent(Settlement settlement, MobileParty besiegerParty)
		{
			this.BesiegedSettlement = settlement;
			this.BesiegedSettlement.SiegeEvent = this;
			this.BesiegerCamp = new BesiegerCamp(this);
			besiegerParty.BesiegerCamp = this.BesiegerCamp;
			if (besiegerParty.LeaderHero != null && settlement.OwnerClan != null && settlement.OwnerClan != Clan.PlayerClan)
			{
				ChangeRelationAction.ApplyRelationChangeBetweenHeroes(settlement.OwnerClan.Leader, besiegerParty.LeaderHero, -5, besiegerParty.LeaderHero == Hero.MainHero);
			}
			this.BesiegerCamp.InitializeSiegeEventSide();
			this.BesiegedSettlement.InitializeSiegeEventSide();
			this.SiegeStartTime = CampaignTime.Now;
			foreach (MobileParty mobileParty in MobileParty.All)
			{
				if (mobileParty.DefaultBehavior == AiBehavior.GoToSettlement && mobileParty.TargetSettlement == settlement && mobileParty.CurrentSettlement != settlement)
				{
					mobileParty.Ai.SetMoveModeHold();
				}
			}
			foreach (MobileParty mobileParty2 in settlement.Parties)
			{
				if (mobileParty2.MapFaction == settlement.MapFaction && !mobileParty2.IsMilitia && !mobileParty2.IsGarrison && (mobileParty2.DefaultBehavior != AiBehavior.GoToSettlement || mobileParty2.TargetSettlement != settlement) && mobileParty2.DefaultBehavior != AiBehavior.Hold)
				{
					mobileParty2.Ai.SetMoveGoToSettlement(mobileParty2.CurrentSettlement);
				}
			}
			this.BesiegedSettlement.Party.SetLevelMaskIsDirty();
			CampaignEventDispatcher.Instance.OnSiegeEventStarted(this);
		}

		public bool ReadyToBeRemoved
		{
			get
			{
				return this.BesiegedSettlement.Party.SiegeEvent == null;
			}
		}

		public ISiegeEventSide GetSiegeEventSide(BattleSideEnum side)
		{
			if (side != BattleSideEnum.Attacker)
			{
				return this.BesiegedSettlement;
			}
			return this.BesiegerCamp;
		}

		public bool CanPartyJoinSide(PartyBase party, BattleSideEnum side)
		{
			IFaction mapFaction = party.MapFaction;
			BattleSideEnum battleSideEnum = BattleSideEnum.None;
			if (side != BattleSideEnum.Defender)
			{
				if (side == BattleSideEnum.Attacker)
				{
					battleSideEnum = BattleSideEnum.Defender;
				}
			}
			else
			{
				battleSideEnum = BattleSideEnum.Attacker;
			}
			return !FactionManager.IsAtWarAgainstFaction(this.GetSiegeEventSide(side).GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).First<PartyBase>()
				.MapFaction, mapFaction) && FactionManager.IsAtWarAgainstFaction(this.GetSiegeEventSide(battleSideEnum).GetInvolvedPartiesForEventType(MapEvent.BattleTypes.Siege).First<PartyBase>()
				.MapFaction, mapFaction);
		}

		public void Tick(float dt)
		{
			if (CampaignTime.DeltaTime == CampaignTime.Zero)
			{
				return;
			}
			if (this.BesiegerCamp.LeaderParty.MapEvent != null || this.BesiegedSettlement.Party.MapEvent != null)
			{
				return;
			}
			this.TickSiegeEventSide(this.BesiegerCamp);
			this.TickSiegeEventSide(this.BesiegedSettlement);
		}

		private void TickSiegeEventSide(ISiegeEventSide siegeEventSide)
		{
			this.AdvanceStrategy(siegeEventSide);
			this.ConstructionTick(siegeEventSide);
			this.BombardTick(siegeEventSide);
		}

		public void OnBeforeSiegeEventEnd(BattleState winnerSide, MapEvent.BattleTypes battleType)
		{
			if (battleType == MapEvent.BattleTypes.SallyOut)
			{
				this._isBesiegerDefeated = winnerSide == BattleState.AttackerVictory;
				return;
			}
			if (battleType == MapEvent.BattleTypes.Siege || battleType == MapEvent.BattleTypes.SiegeOutside)
			{
				this._isBesiegerDefeated = winnerSide == BattleState.DefenderVictory;
			}
		}

		public void FinalizeSiegeEvent()
		{
			CampaignEventDispatcher.Instance.OnSiegeEventEnded(this);
			if (PlayerSiege.PlayerSiegeEvent == this)
			{
				PlayerSiege.OnSiegeEventFinalized(this._isBesiegerDefeated);
			}
			else if (PlayerSiege.PlayerSiegeEvent == null && MobileParty.MainParty.CurrentSettlement != null && MobileParty.MainParty.CurrentSettlement.SiegeEvent == this && !Hero.MainHero.IsPrisoner)
			{
				GameMenu.SwitchToMenu(this._isBesiegerDefeated ? "siege_attacker_defeated" : "siege_attacker_left");
			}
			this.BesiegerCamp.FinalizeSiegeEvent();
			this.BesiegedSettlement.FinalizeSiegeEvent();
			if (this.BesiegedSettlement.Party.MapEvent != null && !this.BesiegedSettlement.Party.MapEvent.IsSallyOut)
			{
				this.BesiegedSettlement.Party.MapEvent.FinalizeEvent();
			}
			if (this.BesiegedSettlement.Town != null && this.BesiegedSettlement.Town.GarrisonParty != null && this.BesiegedSettlement.Town.GarrisonParty.DefaultBehavior == AiBehavior.EngageParty)
			{
				this.BesiegedSettlement.Town.GarrisonParty.Ai.SetMoveModeHold();
			}
			if (this == PlayerSiege.PlayerSiegeEvent)
			{
				PlayerSiege.ClosePlayerSiege();
			}
		}

		public bool IsPartyInvolved(PartyBase party)
		{
			return this.GetInvolvedPartiesForEventType(this.GetCurrentBattleType()).Contains(party);
		}

		public void DoSiegeAction(ISiegeEventSide siegeEventSide, SiegeStrategyActionModel.SiegeAction siegeAction, SiegeEngineType siegeEngineType, int deploymentIndex, int reserveIndex)
		{
			SiegeEvent.SiegeEnginesContainer siegeEngines = siegeEventSide.SiegeEngines;
			switch (siegeAction)
			{
			case SiegeStrategyActionModel.SiegeAction.ConstructNewSiegeEngine:
			{
				float siegeEngineHitPoints = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitPoints(siegeEventSide.SiegeEvent, siegeEngineType, siegeEventSide.BattleSide);
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = new SiegeEvent.SiegeEngineConstructionProgress(siegeEngineType, 0f, siegeEngineHitPoints);
				siegeEngines.DeploySiegeEngineAtIndex(siegeEngineConstructionProgress, deploymentIndex);
				this.BesiegedSettlement.Party.SetVisualAsDirty();
				return;
			}
			case SiegeStrategyActionModel.SiegeAction.DeploySiegeEngineFromReserve:
			{
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 = siegeEngines.ReservedSiegeEngines[reserveIndex];
				siegeEngines.DeploySiegeEngineAtIndex(siegeEngineConstructionProgress2, deploymentIndex);
				this.BesiegedSettlement.Party.SetVisualAsDirty();
				return;
			}
			case SiegeStrategyActionModel.SiegeAction.MoveSiegeEngineToReserve:
				siegeEngines.RemoveDeployedSiegeEngine(deploymentIndex, siegeEngineType.IsRanged, true);
				this.BesiegedSettlement.Party.SetVisualAsDirty();
				return;
			case SiegeStrategyActionModel.SiegeAction.RemoveDeployedSiegeEngine:
				siegeEngines.RemoveDeployedSiegeEngine(deploymentIndex, siegeEngineType.IsRanged, false);
				this.BesiegedSettlement.Party.SetVisualAsDirty();
				return;
			case SiegeStrategyActionModel.SiegeAction.Hold:
				return;
			default:
				throw new ArgumentOutOfRangeException();
			}
		}

		public void AdvanceStrategy(ISiegeEventSide siegeEventSide)
		{
			SiegeStrategyActionModel.SiegeAction siegeAction;
			SiegeEngineType siegeEngineType;
			int num;
			int num2;
			Campaign.Current.Models.SiegeStrategyActionModel.GetLogicalActionForStrategy(siegeEventSide, out siegeAction, out siegeEngineType, out num, out num2);
			this.DoSiegeAction(siegeEventSide, siegeAction, siegeEngineType, num, num2);
		}

		public void BreakSiegeEngine(ISiegeEventSide siegeEventSide, SiegeEngineType siegeEngineType)
		{
			if (siegeEngineType == DefaultSiegeEngineTypes.Preparations)
			{
				if (siegeEventSide.BattleSide == BattleSideEnum.Attacker)
				{
					siegeEventSide.SiegeEngines.SiegePreparations.SetProgress(0f);
				}
				return;
			}
			if (siegeEngineType.IsRanged)
			{
				for (int i = siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines.Length - 1; i >= 0; i--)
				{
					SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines[i];
					if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.SiegeEngine == siegeEngineType && siegeEngineConstructionProgress.IsConstructed)
					{
						siegeEventSide.SiegeEngines.RemoveDeployedSiegeEngine(i, true, false);
						this.BesiegedSettlement.Party.SetVisualAsDirty();
						return;
					}
				}
				return;
			}
			for (int j = siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines.Length - 1; j >= 0; j--)
			{
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 = siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines[j];
				if (siegeEngineConstructionProgress2 != null && siegeEngineConstructionProgress2.SiegeEngine == siegeEngineType)
				{
					siegeEventSide.SiegeEngines.RemoveDeployedSiegeEngine(j, false, false);
					this.BesiegedSettlement.Party.SetVisualAsDirty();
					return;
				}
			}
		}

		public Dictionary<SiegeEngineType, int> GetPreparedSiegeEnginesAsDictionary(ISiegeEventSide siegeEventSide)
		{
			Dictionary<SiegeEngineType, int> dictionary = new Dictionary<SiegeEngineType, int>();
			foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress in siegeEventSide.SiegeEngines.AllSiegeEngines())
			{
				if (siegeEngineConstructionProgress.IsConstructed && siegeEngineConstructionProgress.Hitpoints > 0f && siegeEngineConstructionProgress.SiegeEngine != DefaultSiegeEngineTypes.Preparations)
				{
					if (dictionary.ContainsKey(siegeEngineConstructionProgress.SiegeEngine))
					{
						Dictionary<SiegeEngineType, int> dictionary2 = dictionary;
						SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
						dictionary2[siegeEngine]++;
					}
					else
					{
						dictionary.Add(siegeEngineConstructionProgress.SiegeEngine, 1);
					}
				}
			}
			return dictionary;
		}

		public List<MissionSiegeWeapon> GetPreparedAndActiveSiegeEngines(ISiegeEventSide siegeEventSide)
		{
			List<MissionSiegeWeapon> list = new List<MissionSiegeWeapon>();
			MBReadOnlyList<SiegeEvent.SiegeEngineConstructionProgress> deployedSiegeEngines = siegeEventSide.SiegeEngines.DeployedSiegeEngines;
			for (int i = 0; i < deployedSiegeEngines.Count; i++)
			{
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = deployedSiegeEngines[i];
				if (siegeEngineConstructionProgress.IsConstructed && siegeEngineConstructionProgress.Hitpoints > 0f && siegeEngineConstructionProgress.SiegeEngine != DefaultSiegeEngineTypes.Preparations)
				{
					list.Add(MissionSiegeWeapon.CreateCampaignWeapon(siegeEngineConstructionProgress.SiegeEngine, i, siegeEngineConstructionProgress.Hitpoints, siegeEngineConstructionProgress.MaxHitPoints));
				}
			}
			return list;
		}

		public void SetSiegeEngineStatesAfterSiegeMission(IEnumerable<IMissionSiegeWeapon> attackerMissionSiegeEngineData, IEnumerable<IMissionSiegeWeapon> defenderMissionSiegeEngineData)
		{
			this.SetSiegeEngineStatesForSiegeSide(this.BesiegerCamp, attackerMissionSiegeEngineData);
			this.SetSiegeEngineStatesForSiegeSide(this.BesiegedSettlement, defenderMissionSiegeEngineData);
		}

		private void SetSiegeEngineStatesForSiegeSide(ISiegeEventSide side, IEnumerable<IMissionSiegeWeapon> missionSiegeEngineData)
		{
			if (missionSiegeEngineData != null && missionSiegeEngineData.Any<IMissionSiegeWeapon>())
			{
				int num = missionSiegeEngineData.Count<IMissionSiegeWeapon>() - 1;
				MapEvent battle = PlayerEncounter.Battle;
				bool flag = battle != null && battle.IsSiegeAmbush;
				for (int i = side.SiegeEngines.DeployedSiegeEngines.Count - 1; i >= 0; i--)
				{
					SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = side.SiegeEngines.DeployedSiegeEngines.ElementAt(i);
					if (siegeEngineConstructionProgress.IsConstructed && !siegeEngineConstructionProgress.IsBeingRedeployed)
					{
						IMissionSiegeWeapon missionSiegeWeapon = missionSiegeEngineData.ElementAt(num);
						num--;
						if ((siegeEngineConstructionProgress.SiegeEngine.IsRanged || flag) && missionSiegeWeapon.Health > 0f)
						{
							siegeEngineConstructionProgress.SetHitpoints(missionSiegeWeapon.Health);
						}
						else if (!flag || missionSiegeWeapon.Health <= 0f)
						{
							this.BreakSiegeEngine(side, siegeEngineConstructionProgress.SiegeEngine);
						}
					}
				}
			}
		}

		public void CreateSiegeObject(SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress, ISiegeEventSide siegeSide)
		{
			if (siegeEngineConstructionProgress.SiegeEngine.IsRanged)
			{
				siegeEngineConstructionProgress.SetRangedSiegeEngine(new SiegeEvent.RangedSiegeEngine(siegeEngineConstructionProgress.SiegeEngine, siegeSide));
			}
			SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
			CampaignEventDispatcher.Instance.SiegeEngineBuilt(this, siegeSide.BattleSide, siegeEngine);
			this.BesiegedSettlement.Party.SetVisualAsDirty();
		}

		public override string ToString()
		{
			return "Siege of " + this.BesiegedSettlement.Name;
		}

		public void ConstructionTick(ISiegeEventSide siegeEventSide)
		{
			SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = null;
			if (siegeEventSide.SiegeEngines.SiegePreparations != null && !siegeEventSide.SiegeEngines.SiegePreparations.IsConstructed)
			{
				siegeEngineConstructionProgress = siegeEventSide.SiegeEngines.SiegePreparations;
			}
			else
			{
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
				{
					if (siegeEngineConstructionProgress2.IsActive && !siegeEngineConstructionProgress2.IsConstructed && !siegeEngineConstructionProgress2.IsBeingRedeployed)
					{
						siegeEngineConstructionProgress = siegeEngineConstructionProgress2;
						break;
					}
				}
			}
			if (siegeEngineConstructionProgress != null)
			{
				float num = (float)((double)Campaign.Current.Models.SiegeEventModel.GetConstructionProgressPerHour(siegeEngineConstructionProgress.SiegeEngine, this, siegeEventSide) * CampaignTime.DeltaTime.ToHours);
				siegeEngineConstructionProgress.SetProgress(MBMath.ClampFloat(siegeEngineConstructionProgress.Progress + num, 0f, 1f));
				if (siegeEngineConstructionProgress.IsConstructed)
				{
					this.CreateSiegeObject(siegeEngineConstructionProgress, siegeEventSide);
				}
			}
			float num2 = 2f;
			foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress3 in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
			{
				if (siegeEngineConstructionProgress3.IsActive && siegeEngineConstructionProgress3.IsConstructed && siegeEngineConstructionProgress3.IsBeingRedeployed)
				{
					float num3 = (float)((double)(1f / num2) * CampaignTime.DeltaTime.ToHours);
					siegeEngineConstructionProgress3.SetRedeploymentProgress(MBMath.ClampFloat(siegeEngineConstructionProgress3.RedeploymentProgress + num3, 0f, 1f));
				}
			}
			if (siegeEventSide.SiegeEngines.ClearRemovedEnginesIfNecessary())
			{
				this.BesiegedSettlement.Party.SetVisualAsDirty();
			}
		}

		public void BombardTick(ISiegeEventSide siegeEventSide)
		{
			if (CampaignTime.DeltaTime == CampaignTime.Zero)
			{
				return;
			}
			SiegeEvent.SiegeEnginesContainer siegeEngines = this.GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide()).SiegeEngines;
			for (int i = 0; i < siegeEventSide.SiegeEngineMissiles.Count; i++)
			{
				SiegeEvent.SiegeEngineMissile siegeEngineMissile = siegeEventSide.SiegeEngineMissiles[i];
				if (siegeEngineMissile.CollisionTime.IsPast && siegeEngineMissile.HitSuccessful)
				{
					SiegeBombardTargets targetType = siegeEngineMissile.TargetType;
					if (targetType != SiegeBombardTargets.Wall)
					{
						if (targetType != SiegeBombardTargets.RangedEngines)
						{
							Debug.FailedAssert("Invalid target type on hit", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Siege\\SiegeEvent.cs", "BombardTick", 937);
						}
						else
						{
							SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = siegeEngines.DeployedRangedSiegeEngines[siegeEngineMissile.TargetSlotIndex];
							SiegeEvent.SiegeEngineConstructionProgress targetSiegeEngine = siegeEngineMissile.TargetSiegeEngine;
							if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.IsConstructed && !siegeEngineConstructionProgress.IsBeingRedeployed && siegeEngineConstructionProgress.Hitpoints > 0f)
							{
								this.BombardHitEngine(siegeEventSide, siegeEngineMissile.ShooterSiegeEngineType, siegeEngineConstructionProgress);
							}
							else if (targetSiegeEngine != null && targetSiegeEngine != siegeEngineConstructionProgress && ((siegeEngines.DeployedRangedSiegeEngines.Contains(targetSiegeEngine) && targetSiegeEngine.IsConstructed && !targetSiegeEngine.IsBeingRedeployed) || siegeEngines.ReservedSiegeEngines.Contains(targetSiegeEngine)))
							{
								this.BombardHitEngine(siegeEventSide, siegeEngineMissile.ShooterSiegeEngineType, targetSiegeEngine);
							}
						}
					}
					else
					{
						this.BesiegerCamp.BombardHitWalls(siegeEngineMissile.ShooterSiegeEngineType, siegeEngineMissile.TargetSlotIndex);
					}
				}
			}
			siegeEventSide.RemoveDeprecatedMissiles();
			foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 in siegeEventSide.SiegeEngines.DeployedSiegeEngines)
			{
				if (siegeEngineConstructionProgress2.IsConstructed && !siegeEngineConstructionProgress2.IsBeingRedeployed && siegeEngineConstructionProgress2.IsActive)
				{
					SiegeEvent.SiegeEngineConstructionProgress attackerSiegeEngine = siegeEngineConstructionProgress2;
					SiegeEngineType siegeEngine = siegeEngineConstructionProgress2.SiegeEngine;
					SiegeEvent.RangedSiegeEngine rangedSiegeEngine = siegeEngineConstructionProgress2.RangedSiegeEngine;
					if (siegeEngine.IsRanged && rangedSiegeEngine != null && rangedSiegeEngine.IsReadyToFire)
					{
						rangedSiegeEngine.Reload();
						if (attackerSiegeEngine.Hitpoints > 0f)
						{
							int num = (siegeEngine.IsRanged ? siegeEventSide.SiegeEngines.DeployedRangedSiegeEngines.FindIndex((SiegeEvent.SiegeEngineConstructionProgress engine) => engine == attackerSiegeEngine) : siegeEventSide.SiegeEngines.DeployedMeleeSiegeEngines.FindIndex((SiegeEvent.SiegeEngineConstructionProgress engine) => engine == attackerSiegeEngine));
							SiegeBombardTargets siegeBombardTargets;
							int num2;
							siegeEventSide.GetAttackTarget(siegeEventSide, attackerSiegeEngine.SiegeEngine, num, out siegeBombardTargets, out num2);
							if (siegeBombardTargets != SiegeBombardTargets.None)
							{
								rangedSiegeEngine.OnFireDecisionTaken(this, siegeEventSide.BattleSide, num2, siegeBombardTargets);
								float siegeEngineHitChance = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineHitChance(siegeEngine, siegeEventSide.BattleSide, siegeBombardTargets, this.BesiegedSettlement.Town);
								bool flag = MBRandom.RandomFloat < siegeEngineHitChance;
								SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress3 = null;
								if (siegeBombardTargets == SiegeBombardTargets.RangedEngines)
								{
									siegeEngineConstructionProgress3 = siegeEngines.DeployedRangedSiegeEngines[num2];
								}
								SiegeEvent.SiegeEngineMissile siegeEngineMissile2 = new SiegeEvent.SiegeEngineMissile(siegeEngine, num, siegeBombardTargets, num2, siegeEngineConstructionProgress3, rangedSiegeEngine.NextProjectileCollisionTime, CampaignTime.Now, flag);
								siegeEventSide.AddSiegeEngineMissile(siegeEngineMissile2);
							}
							else
							{
								rangedSiegeEngine.Hold();
							}
						}
					}
				}
			}
		}

		private float GetDistanceBetweenTwoRangedEngine(int attackerSlotIndex, int defenderSlotIndex)
		{
			return (float)MathF.Abs(attackerSlotIndex - defenderSlotIndex) * 1f + 3f;
		}

		private float PriorityCalculationForEngines(float distance)
		{
			return 7f - distance;
		}

		public void FindAttackableRangedEngineWithHighestPriority(ISiegeEventSide siegeEventSide, int attackerSlotIndex, out int targetIndex, out float targetPriority)
		{
			targetIndex = -1;
			targetPriority = 0f;
			float num = 9999f;
			SiegeEvent.SiegeEngineConstructionProgress[] deployedRangedSiegeEngines = this.GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide()).SiegeEngines.DeployedRangedSiegeEngines;
			for (int i = 0; i < deployedRangedSiegeEngines.Length; i++)
			{
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = deployedRangedSiegeEngines[i];
				if (siegeEngineConstructionProgress != null && siegeEngineConstructionProgress.IsConstructed && !siegeEngineConstructionProgress.IsBeingRedeployed && siegeEngineConstructionProgress.Hitpoints > 0f)
				{
					float distanceBetweenTwoRangedEngine = this.GetDistanceBetweenTwoRangedEngine(attackerSlotIndex, i);
					float num2 = this.PriorityCalculationForEngines(distanceBetweenTwoRangedEngine);
					if (num2 > targetPriority || (MathF.Abs(num2 - targetPriority) < 0.0001f && num > distanceBetweenTwoRangedEngine))
					{
						targetIndex = i;
						targetPriority = num2;
						num = distanceBetweenTwoRangedEngine;
					}
				}
			}
		}

		private void OnSiegeEngineDestroyed(ISiegeEventSide siegeEventSide, SiegeEvent.SiegeEngineConstructionProgress siegeEngine)
		{
			int num = siegeEventSide.SiegeEngines.FindDeploymentIndexOfDeployedEngine(siegeEngine);
			if (num == -1)
			{
				siegeEventSide.SiegeEngines.RemovedSiegeEngineFromReservedSiegeEngines(siegeEngine);
			}
			else
			{
				this.DoSiegeAction(siegeEventSide, SiegeStrategyActionModel.SiegeAction.RemoveDeployedSiegeEngine, siegeEngine.SiegeEngine, num, -1);
			}
			this.BesiegedSettlement.Party.SetVisualAsDirty();
			CampaignEventDispatcher.Instance.OnSiegeEngineDestroyed(this.BesiegerCamp.LeaderParty, this.BesiegedSettlement, siegeEventSide.BattleSide, siegeEngine.SiegeEngine);
		}

		private void BombardHitEngine(ISiegeEventSide siegeEventSide, SiegeEngineType attackerEngineType, SiegeEvent.SiegeEngineConstructionProgress damagedEngine)
		{
			ISiegeEventSide siegeEventSide2 = this.GetSiegeEventSide(siegeEventSide.BattleSide.GetOppositeSide());
			float siegeEngineDamage = Campaign.Current.Models.SiegeEventModel.GetSiegeEngineDamage(this, siegeEventSide.BattleSide, attackerEngineType, SiegeBombardTargets.RangedEngines);
			damagedEngine.SetHitpoints(damagedEngine.Hitpoints - siegeEngineDamage);
			CampaignEventDispatcher.Instance.OnSiegeBombardmentHit(this.BesiegerCamp.LeaderParty, this.BesiegedSettlement, siegeEventSide.BattleSide, attackerEngineType, SiegeBombardTargets.RangedEngines);
			if (damagedEngine.Hitpoints <= 0f)
			{
				this.OnSiegeEngineDestroyed(siegeEventSide2, damagedEngine);
			}
			if (this.IsPlayerSiegeEvent)
			{
				Debug.Print(string.Concat(new object[]
				{
					this.BesiegedSettlement.Name,
					" - ",
					siegeEventSide.BattleSide.ToString(),
					" ",
					attackerEngineType.Name,
					" hit the enemy ranged siege engine(",
					damagedEngine.SiegeEngine.Name,
					") for ",
					siegeEngineDamage
				}), 0, Debug.DebugColor.Purple, 137438953472UL);
			}
		}

		[SaveableField(6)]
		public readonly Settlement BesiegedSettlement;

		[SaveableField(10)]
		public readonly BesiegerCamp BesiegerCamp;

		[SaveableField(144)]
		private bool _isBesiegerDefeated;

		public class RangedSiegeEngine
		{
			internal static void AutoGeneratedStaticCollectObjectsRangedSiegeEngine(object o, List<object> collectedObjects)
			{
				((SiegeEvent.RangedSiegeEngine)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.EngineType);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.NextTimeEngineCanBombard, collectedObjects);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.LastBombardTime, collectedObjects);
			}

			internal static object AutoGeneratedGetMemberValueNextTimeEngineCanBombard(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).NextTimeEngineCanBombard;
			}

			internal static object AutoGeneratedGetMemberValueAlreadyFired(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).AlreadyFired;
			}

			internal static object AutoGeneratedGetMemberValueCurrentTargetType(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).CurrentTargetType;
			}

			internal static object AutoGeneratedGetMemberValueCurrentTargetIndex(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).CurrentTargetIndex;
			}

			internal static object AutoGeneratedGetMemberValuePreviousDamagedTargetType(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).PreviousDamagedTargetType;
			}

			internal static object AutoGeneratedGetMemberValuePreviousTargetIndex(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).PreviousTargetIndex;
			}

			internal static object AutoGeneratedGetMemberValueLastBombardTime(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).LastBombardTime;
			}

			internal static object AutoGeneratedGetMemberValueEngineType(object o)
			{
				return ((SiegeEvent.RangedSiegeEngine)o).EngineType;
			}

			[SaveableProperty(2)]
			public CampaignTime NextTimeEngineCanBombard { get; private set; }

			[SaveableProperty(3)]
			public bool AlreadyFired { get; private set; }

			[SaveableProperty(4)]
			public SiegeBombardTargets CurrentTargetType { get; private set; }

			[SaveableProperty(5)]
			public int CurrentTargetIndex { get; private set; }

			[SaveableProperty(6)]
			public SiegeBombardTargets PreviousDamagedTargetType { get; private set; }

			[SaveableProperty(7)]
			public int PreviousTargetIndex { get; private set; }

			[SaveableProperty(8)]
			public CampaignTime LastBombardTime { get; private set; }

			public CampaignTime NextProjectileCollisionTime
			{
				get
				{
					if (this.LastBombardTime.IsFuture)
					{
						return CampaignTime.Never;
					}
					return this.NextTimeEngineCanBombard;
				}
			}

			public bool IsReadyToFire
			{
				get
				{
					return this.NextTimeEngineCanBombard.IsPast;
				}
			}

			public RangedSiegeEngine(SiegeEngineType engineType, ISiegeEventSide siegeSide)
			{
				this.EngineType = engineType;
				this.CurrentTargetType = SiegeBombardTargets.None;
				this.CurrentTargetIndex = -1;
				this.PreviousDamagedTargetType = SiegeBombardTargets.None;
				this.PreviousTargetIndex = -1;
				this.AlreadyFired = false;
				this.LastBombardTime = CampaignTime.Never;
				this.CalculateNextFireTime(siegeSide.SiegeEvent, siegeSide.BattleSide);
			}

			public void Hold()
			{
				this.CurrentTargetType = SiegeBombardTargets.None;
				this.CurrentTargetIndex = -1;
			}

			public void Reload()
			{
				this.AlreadyFired = false;
			}

			public void OnFireDecisionTaken(SiegeEvent siegeEvent, BattleSideEnum battleSide, int targetSlotIndex, SiegeBombardTargets targetType)
			{
				this.PreviousDamagedTargetType = this.CurrentTargetType;
				this.PreviousTargetIndex = this.CurrentTargetIndex;
				this.CurrentTargetIndex = targetSlotIndex;
				this.CurrentTargetType = targetType;
				this.AlreadyFired = true;
				this.LastBombardTime = CampaignTime.Now;
				this.CalculateNextFireTime(siegeEvent, battleSide);
			}

			private void CalculateNextFireTime(SiegeEvent siegeEvent, BattleSideEnum battleSide)
			{
				CampaignTime campaignTime = CampaignTime.Minutes((long)Campaign.Current.Models.SiegeEventModel.GetRangedSiegeEngineReloadTime(siegeEvent, battleSide, this.EngineType));
				this.NextTimeEngineCanBombard = CampaignTime.Now + campaignTime;
			}

			[SaveableField(1)]
			public readonly SiegeEngineType EngineType;
		}

		public class SiegeEngineConstructionProgress
		{
			internal static void AutoGeneratedStaticCollectObjectsSiegeEngineConstructionProgress(object o, List<object> collectedObjects)
			{
				((SiegeEvent.SiegeEngineConstructionProgress)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.SiegeEngine);
				collectedObjects.Add(this.RangedSiegeEngine);
			}

			internal static object AutoGeneratedGetMemberValueIsActive(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).IsActive;
			}

			internal static object AutoGeneratedGetMemberValueHitpoints(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).Hitpoints;
			}

			internal static object AutoGeneratedGetMemberValueProgress(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).Progress;
			}

			internal static object AutoGeneratedGetMemberValueRangedSiegeEngine(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).RangedSiegeEngine;
			}

			internal static object AutoGeneratedGetMemberValueRedeploymentProgress(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).RedeploymentProgress;
			}

			internal static object AutoGeneratedGetMemberValueMaxHitPoints(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).MaxHitPoints;
			}

			internal static object AutoGeneratedGetMemberValueSiegeEngine(object o)
			{
				return ((SiegeEvent.SiegeEngineConstructionProgress)o).SiegeEngine;
			}

			[SaveableProperty(2)]
			public bool IsActive { get; private set; }

			[SaveableProperty(3)]
			public float Hitpoints { get; private set; }

			[SaveableProperty(4)]
			public float Progress { get; private set; }

			[SaveableProperty(5)]
			public SiegeEvent.RangedSiegeEngine RangedSiegeEngine { get; private set; }

			[SaveableProperty(6)]
			public float RedeploymentProgress { get; private set; }

			[SaveableProperty(7)]
			public float MaxHitPoints { get; private set; }

			public bool IsConstructed
			{
				get
				{
					return this.Progress >= 1f;
				}
			}

			public bool IsBeingRedeployed
			{
				get
				{
					return this.RedeploymentProgress < 1f;
				}
			}

			public SiegeEngineConstructionProgress(SiegeEngineType siegeEngine, float progress, float maxHitPoints)
			{
				this.SiegeEngine = siegeEngine;
				this.Progress = progress;
				this.RedeploymentProgress = 1f;
				this.IsActive = false;
				this.RangedSiegeEngine = null;
				this.MaxHitPoints = maxHitPoints;
				this.Hitpoints = this.MaxHitPoints;
			}

			public void Activate(bool isActive)
			{
				this.IsActive = isActive;
			}

			public void SetRedeploymentProgress(float redeploymentProgress)
			{
				this.RedeploymentProgress = redeploymentProgress;
			}

			public void SetHitpoints(float hitPoints)
			{
				this.Hitpoints = hitPoints;
			}

			public void SetProgress(float progress)
			{
				this.Progress = progress;
			}

			public void SetRangedSiegeEngine(SiegeEvent.RangedSiegeEngine rangedSiegeEngine)
			{
				this.RangedSiegeEngine = rangedSiegeEngine;
			}

			[SaveableField(1)]
			public readonly SiegeEngineType SiegeEngine;
		}

		public class SiegeEnginesContainer
		{
			internal static void AutoGeneratedStaticCollectObjectsSiegeEnginesContainer(object o, List<object> collectedObjects)
			{
				((SiegeEvent.SiegeEnginesContainer)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.SiegePreparations);
				collectedObjects.Add(this.DeployedRangedSiegeEngines);
				collectedObjects.Add(this.DeployedMeleeSiegeEngines);
				collectedObjects.Add(this._deployedSiegeEngines);
				collectedObjects.Add(this._reservedSiegeEngines);
				collectedObjects.Add(this._deployedSiegeEngineTypesCount);
				collectedObjects.Add(this._reservedSiegeEngineTypesCount);
				collectedObjects.Add(this._removedSiegeEngines);
			}

			internal static object AutoGeneratedGetMemberValueSiegePreparations(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o).SiegePreparations;
			}

			internal static object AutoGeneratedGetMemberValueDeployedRangedSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o).DeployedRangedSiegeEngines;
			}

			internal static object AutoGeneratedGetMemberValueDeployedMeleeSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o).DeployedMeleeSiegeEngines;
			}

			internal static object AutoGeneratedGetMemberValue_deployedSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._deployedSiegeEngines;
			}

			internal static object AutoGeneratedGetMemberValue_reservedSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._reservedSiegeEngines;
			}

			internal static object AutoGeneratedGetMemberValue_deployedSiegeEngineTypesCount(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._deployedSiegeEngineTypesCount;
			}

			internal static object AutoGeneratedGetMemberValue_reservedSiegeEngineTypesCount(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._reservedSiegeEngineTypesCount;
			}

			internal static object AutoGeneratedGetMemberValue_removedSiegeEngines(object o)
			{
				return ((SiegeEvent.SiegeEnginesContainer)o)._removedSiegeEngines;
			}

			public MBReadOnlyList<SiegeEvent.SiegeEngineConstructionProgress> DeployedSiegeEngines
			{
				get
				{
					return this._deployedSiegeEngines;
				}
			}

			public MBReadOnlyList<SiegeEvent.SiegeEngineConstructionProgress> ReservedSiegeEngines
			{
				get
				{
					return this._reservedSiegeEngines;
				}
			}

			public MBReadOnlyDictionary<SiegeEngineType, int> DeployedSiegeEngineTypesCount { get; private set; }

			public MBReadOnlyDictionary<SiegeEngineType, int> ReservedSiegeEngineTypesCount { get; private set; }

			public MBReadOnlyList<SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine> RemovedSiegeEngines
			{
				get
				{
					return this._removedSiegeEngines;
				}
			}

			[LoadInitializationCallback]
			private void OnLoad(MetaData metaData)
			{
				this.DeployedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(this._deployedSiegeEngineTypesCount);
				this.ReservedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(this._reservedSiegeEngineTypesCount);
				this.RefreshDeployedCounts();
				this.RefreshReservedCounts();
			}

			public IEnumerable<SiegeEvent.SiegeEngineConstructionProgress> AllSiegeEngines()
			{
				if (this.SiegePreparations != null)
				{
					yield return this.SiegePreparations;
				}
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress in this._deployedSiegeEngines)
				{
					yield return siegeEngineConstructionProgress;
				}
				List<SiegeEvent.SiegeEngineConstructionProgress>.Enumerator enumerator = default(List<SiegeEvent.SiegeEngineConstructionProgress>.Enumerator);
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress2 in this._reservedSiegeEngines)
				{
					yield return siegeEngineConstructionProgress2;
				}
				enumerator = default(List<SiegeEvent.SiegeEngineConstructionProgress>.Enumerator);
				yield break;
				yield break;
			}

			public SiegeEnginesContainer(BattleSideEnum side, SiegeEvent.SiegeEngineConstructionProgress siegePreparations)
			{
				this.SiegePreparations = siegePreparations;
				if (side != BattleSideEnum.Defender)
				{
					if (side == BattleSideEnum.Attacker)
					{
						this._deployedSiegeEngines = new MBList<SiegeEvent.SiegeEngineConstructionProgress>(4);
						this.DeployedRangedSiegeEngines = new SiegeEvent.SiegeEngineConstructionProgress[4];
						this.DeployedMeleeSiegeEngines = new SiegeEvent.SiegeEngineConstructionProgress[3];
					}
					else
					{
						Debug.FailedAssert("Invalid side", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Siege\\SiegeEvent.cs", ".ctor", 254);
					}
				}
				else
				{
					this._deployedSiegeEngines = new MBList<SiegeEvent.SiegeEngineConstructionProgress>(4);
					this.DeployedRangedSiegeEngines = new SiegeEvent.SiegeEngineConstructionProgress[4];
					this.DeployedMeleeSiegeEngines = new SiegeEvent.SiegeEngineConstructionProgress[0];
				}
				this._deployedSiegeEngineTypesCount = new Dictionary<SiegeEngineType, int>();
				this.DeployedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(this._deployedSiegeEngineTypesCount);
				this._reservedSiegeEngines = new MBList<SiegeEvent.SiegeEngineConstructionProgress>();
				this._reservedSiegeEngineTypesCount = new Dictionary<SiegeEngineType, int>();
				this.ReservedSiegeEngineTypesCount = new MBReadOnlyDictionary<SiegeEngineType, int>(this._reservedSiegeEngineTypesCount);
				this._removedSiegeEngines = new MBList<SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine>();
			}

			public void AddPrebuiltEngineToReserve(SiegeEvent.SiegeEngineConstructionProgress siegeEngine)
			{
				this._reservedSiegeEngines.Add(siegeEngine);
				siegeEngine.SetProgress(1f);
				siegeEngine.SetRedeploymentProgress(0f);
				this.RefreshReservedCounts();
			}

			public void DeploySiegeEngineAtIndex(SiegeEvent.SiegeEngineConstructionProgress siegeEngine, int index)
			{
				SiegeEvent.SiegeEngineConstructionProgress[] array = (siegeEngine.SiegeEngine.IsRanged ? this.DeployedRangedSiegeEngines : this.DeployedMeleeSiegeEngines);
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = array[index];
				if (siegeEngineConstructionProgress != null)
				{
					siegeEngineConstructionProgress.Activate(false);
					this._deployedSiegeEngines.Remove(siegeEngineConstructionProgress);
					this._reservedSiegeEngines.Add(siegeEngineConstructionProgress);
					siegeEngineConstructionProgress.SetRedeploymentProgress(0f);
				}
				siegeEngine.Activate(true);
				this._reservedSiegeEngines.Remove(siegeEngine);
				this.RefreshReservedCounts();
				array[index] = siegeEngine;
				this._deployedSiegeEngines.Add(siegeEngine);
				this.RefreshDeployedCounts();
			}

			public void RemoveDeployedSiegeEngine(int index, bool isRanged, bool moveToReserve)
			{
				SiegeEvent.SiegeEngineConstructionProgress[] array = (isRanged ? this.DeployedRangedSiegeEngines : this.DeployedMeleeSiegeEngines);
				SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress = array[index];
				if (siegeEngineConstructionProgress != null)
				{
					siegeEngineConstructionProgress.Activate(false);
					if (moveToReserve)
					{
						this._reservedSiegeEngines.Add(siegeEngineConstructionProgress);
						this.RefreshReservedCounts();
						siegeEngineConstructionProgress.SetRedeploymentProgress(0f);
					}
					this._deployedSiegeEngines.Remove(siegeEngineConstructionProgress);
					this.RefreshDeployedCounts();
					array[index] = null;
				}
			}

			public bool RemovedSiegeEngineFromReservedSiegeEngines(SiegeEvent.SiegeEngineConstructionProgress siegeEngine)
			{
				bool flag = this._reservedSiegeEngines.Remove(siegeEngine);
				if (flag)
				{
					this.RefreshReservedCounts();
				}
				return flag;
			}

			public int FindDeploymentIndexOfDeployedEngine(SiegeEvent.SiegeEngineConstructionProgress deployedEngine)
			{
				if (deployedEngine.SiegeEngine.IsRanged)
				{
					return this.DeployedRangedSiegeEngines.FindIndex((SiegeEvent.SiegeEngineConstructionProgress engine) => engine == deployedEngine);
				}
				return this.DeployedMeleeSiegeEngines.FindIndex((SiegeEvent.SiegeEngineConstructionProgress engine) => engine == deployedEngine);
			}

			public bool ClearRemovedEnginesIfNecessary()
			{
				return this._removedSiegeEngines.RemoveAll((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine engine) => !engine.RemovalTime.IsFuture) > 0;
			}

			private void RefreshDeployedCounts()
			{
				this._deployedSiegeEngineTypesCount.Clear();
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress in this.DeployedSiegeEngines)
				{
					SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
					int num;
					if (this._deployedSiegeEngineTypesCount.TryGetValue(siegeEngine, out num))
					{
						this._deployedSiegeEngineTypesCount[siegeEngine] = num + 1;
					}
					else
					{
						this._deployedSiegeEngineTypesCount.Add(siegeEngine, 1);
					}
				}
			}

			private void RefreshReservedCounts()
			{
				this._reservedSiegeEngineTypesCount.Clear();
				foreach (SiegeEvent.SiegeEngineConstructionProgress siegeEngineConstructionProgress in this.ReservedSiegeEngines)
				{
					SiegeEngineType siegeEngine = siegeEngineConstructionProgress.SiegeEngine;
					int num;
					if (this._reservedSiegeEngineTypesCount.TryGetValue(siegeEngine, out num))
					{
						this._reservedSiegeEngineTypesCount[siegeEngine] = num + 1;
					}
					else
					{
						this._reservedSiegeEngineTypesCount.Add(siegeEngine, 1);
					}
				}
			}

			public const int MaximumAttackerMeleeSiegeEngineCount = 3;

			public const int MaximumAttackerRangedSiegeEngineCount = 4;

			public const int MaximumDefenderMeleeSiegeEngineCount = 0;

			public const int MaximumDefenderRangedSiegeEngineCount = 4;

			[SaveableField(1)]
			public readonly SiegeEvent.SiegeEngineConstructionProgress SiegePreparations;

			[SaveableField(2)]
			private readonly MBList<SiegeEvent.SiegeEngineConstructionProgress> _deployedSiegeEngines;

			[SaveableField(3)]
			private readonly MBList<SiegeEvent.SiegeEngineConstructionProgress> _reservedSiegeEngines;

			[SaveableField(4)]
			public readonly SiegeEvent.SiegeEngineConstructionProgress[] DeployedRangedSiegeEngines;

			[SaveableField(5)]
			public readonly SiegeEvent.SiegeEngineConstructionProgress[] DeployedMeleeSiegeEngines;

			[SaveableField(6)]
			private readonly Dictionary<SiegeEngineType, int> _deployedSiegeEngineTypesCount;

			[SaveableField(7)]
			private readonly Dictionary<SiegeEngineType, int> _reservedSiegeEngineTypesCount;

			[SaveableField(8)]
			private readonly MBList<SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine> _removedSiegeEngines;

			public class RemovedSiegeEngine
			{
				internal static void AutoGeneratedStaticCollectObjectsRemovedSiegeEngine(object o, List<object> collectedObjects)
				{
					((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
				}

				protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
				{
					collectedObjects.Add(this.SiegeEngine);
					CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.RemovalTime, collectedObjects);
				}

				internal static object AutoGeneratedGetMemberValueSiegeEngine(object o)
				{
					return ((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine)o).SiegeEngine;
				}

				internal static object AutoGeneratedGetMemberValueRemovalTime(object o)
				{
					return ((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine)o).RemovalTime;
				}

				internal static object AutoGeneratedGetMemberValueSlotIndex(object o)
				{
					return ((SiegeEvent.SiegeEnginesContainer.RemovedSiegeEngine)o).SlotIndex;
				}

				public RemovedSiegeEngine(SiegeEvent.SiegeEngineConstructionProgress siegeEngine, CampaignTime removalTime, int slotIndex)
				{
					this.SiegeEngine = siegeEngine;
					this.RemovalTime = removalTime;
					this.SlotIndex = slotIndex;
				}

				[SaveableField(1)]
				public readonly SiegeEvent.SiegeEngineConstructionProgress SiegeEngine;

				[SaveableField(2)]
				public readonly CampaignTime RemovalTime;

				[SaveableField(3)]
				public readonly int SlotIndex;
			}
		}

		public class SiegeEngineMissile
		{
			internal static void AutoGeneratedStaticCollectObjectsSiegeEngineMissile(object o, List<object> collectedObjects)
			{
				((SiegeEvent.SiegeEngineMissile)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.ShooterSiegeEngineType);
				collectedObjects.Add(this.TargetSiegeEngine);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.CollisionTime, collectedObjects);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.FireDecisionTime, collectedObjects);
			}

			internal static object AutoGeneratedGetMemberValueShooterSiegeEngineType(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).ShooterSiegeEngineType;
			}

			internal static object AutoGeneratedGetMemberValueShooterSlotIndex(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).ShooterSlotIndex;
			}

			internal static object AutoGeneratedGetMemberValueTargetType(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).TargetType;
			}

			internal static object AutoGeneratedGetMemberValueTargetSlotIndex(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).TargetSlotIndex;
			}

			internal static object AutoGeneratedGetMemberValueTargetSiegeEngine(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).TargetSiegeEngine;
			}

			internal static object AutoGeneratedGetMemberValueHitSuccessful(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).HitSuccessful;
			}

			internal static object AutoGeneratedGetMemberValueCollisionTime(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).CollisionTime;
			}

			internal static object AutoGeneratedGetMemberValueFireDecisionTime(object o)
			{
				return ((SiegeEvent.SiegeEngineMissile)o).FireDecisionTime;
			}

			public SiegeEngineMissile(SiegeEngineType shooterSiegeEngineType, int shooterSlotIndex, SiegeBombardTargets targetType, int targetSlotIndex, SiegeEvent.SiegeEngineConstructionProgress targetSiegeEngine, CampaignTime collisionTime, CampaignTime fireTime, bool hitSuccessful)
			{
				this.ShooterSiegeEngineType = shooterSiegeEngineType;
				this.ShooterSlotIndex = shooterSlotIndex;
				this.TargetType = targetType;
				this.TargetSlotIndex = targetSlotIndex;
				this.TargetSiegeEngine = targetSiegeEngine;
				this.CollisionTime = collisionTime;
				this.FireDecisionTime = fireTime;
				this.HitSuccessful = hitSuccessful;
			}

			[SaveableField(1)]
			public readonly SiegeEngineType ShooterSiegeEngineType;

			[SaveableField(2)]
			public readonly int ShooterSlotIndex;

			[SaveableField(3)]
			public readonly SiegeBombardTargets TargetType;

			[SaveableField(4)]
			public readonly int TargetSlotIndex;

			[SaveableField(5)]
			public readonly SiegeEvent.SiegeEngineConstructionProgress TargetSiegeEngine;

			[SaveableField(6)]
			public readonly bool HitSuccessful;

			[SaveableField(7)]
			public readonly CampaignTime CollisionTime;

			[SaveableField(8)]
			public readonly CampaignTime FireDecisionTime;
		}
	}
}
