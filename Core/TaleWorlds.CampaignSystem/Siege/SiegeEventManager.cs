using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Siege
{
	public class SiegeEventManager
	{
		internal static void AutoGeneratedStaticCollectObjectsSiegeEventManager(object o, List<object> collectedObjects)
		{
			((SiegeEventManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._siegeEvents);
		}

		internal static object AutoGeneratedGetMemberValue_siegeEvents(object o)
		{
			return ((SiegeEventManager)o)._siegeEvents;
		}

		public SiegeEventManager()
		{
			this._siegeEvents = new List<SiegeEvent>();
		}

		public SiegeEvent StartSiegeEvent(Settlement settlement, MobileParty besiegerParty)
		{
			SiegeEvent siegeEvent = new SiegeEvent(settlement, besiegerParty);
			this._siegeEvents.Add(siegeEvent);
			settlement.Party.Visuals.SetMapIconAsDirty();
			return siegeEvent;
		}

		public void Tick(float dt)
		{
			for (int i = 0; i < this._siegeEvents.Count; i++)
			{
				if (this._siegeEvents[i].SiegeEventVisual != null)
				{
					this._siegeEvents[i].SiegeEventVisual.Tick();
				}
				if (this._siegeEvents[i].ReadyToBeRemoved)
				{
					this._siegeEvents[i] = this._siegeEvents[this._siegeEvents.Count - 1];
					this._siegeEvents.RemoveAt(this._siegeEvents.Count - 1);
					i--;
				}
				else
				{
					this._siegeEvents[i].Tick(dt);
				}
			}
		}

		[SaveableField(1)]
		private List<SiegeEvent> _siegeEvents;
	}
}
