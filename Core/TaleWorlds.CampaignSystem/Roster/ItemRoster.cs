using System;
using System.Collections;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Roster
{
	public class ItemRoster : IReadOnlyList<ItemRosterElement>, IEnumerable<ItemRosterElement>, IEnumerable, IReadOnlyCollection<ItemRosterElement>, ISerializableObject
	{
		internal static void AutoGeneratedStaticCollectObjectsItemRoster(object o, List<object> collectedObjects)
		{
			((ItemRoster)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._data);
		}

		internal static object AutoGeneratedGetMemberValue_data(object o)
		{
			return ((ItemRoster)o)._data;
		}

		internal static object AutoGeneratedGetMemberValue_count(object o)
		{
			return ((ItemRoster)o)._count;
		}

		public ItemRosterElement this[int index]
		{
			get
			{
				return this._data[index];
			}
		}

		public int Count
		{
			get
			{
				return this._count;
			}
		}

		public ItemRoster()
		{
			this._data = new ItemRosterElement[4];
			this._count = 0;
		}

		public ItemRoster(ItemRoster other)
		{
			this._data = new ItemRosterElement[other.Count];
			this._count = 0;
			this.Add(other);
			this.CalculateCachedStats();
		}

		[CachedData]
		public int VersionNo { get; private set; }

		private void EnsureLength(int length)
		{
			if (length > 0 && (this._data == null || length > this._data.Length))
			{
				int num = 4;
				if (this._data != null)
				{
					num = this._data.Length * 2;
				}
				ItemRosterElement[] array = new ItemRosterElement[num];
				for (int i = 0; i < this._count; i++)
				{
					array[i] = this._data[i];
				}
				this._data = array;
			}
		}

		public int FindIndexOfItem(ItemObject item)
		{
			for (int i = 0; i < this._count; i++)
			{
				if (this._data[i].EquipmentElement.Item == item)
				{
					return i;
				}
			}
			return -1;
		}

		public int FindIndex(Predicate<ItemObject> predicate)
		{
			for (int i = 0; i < this._count; i++)
			{
				if (predicate(this._data[i].EquipmentElement.Item))
				{
					return i;
				}
			}
			return -1;
		}

		public int FindIndexFirstAfterXthElement(Predicate<ItemObject> predicate, int x)
		{
			for (int i = 0; i < x + this._count; i++)
			{
				if (predicate(this._data[i % this._count].EquipmentElement.Item))
				{
					return i;
				}
			}
			return -1;
		}

		public int FindIndexOfElement(EquipmentElement rosterElement)
		{
			for (int i = 0; i < this._count; i++)
			{
				if (rosterElement.IsEqualTo(this._data[i].EquipmentElement))
				{
					return i;
				}
			}
			return -1;
		}

		private int AddNewElement(ItemRosterElement rosterElement, bool insertAtFront = false)
		{
			int num = this._count + 1;
			this.EnsureLength(num);
			int num2 = this._count;
			this.OnRosterUpdated(ref rosterElement, rosterElement.Amount);
			if (insertAtFront)
			{
				for (int i = this._count; i > 0; i--)
				{
					this._data[i] = this._data[i - 1];
				}
				num2 = 0;
			}
			this._data[num2] = rosterElement;
			this._count = num;
			this.UpdateVersion();
			return num2;
		}

		public int AddToCounts(ItemObject item, int number)
		{
			if (number == 0)
			{
				return -1;
			}
			return this.AddToCounts(new EquipmentElement(item, null, null, false), number);
		}

		public int AddToCounts(EquipmentElement rosterElement, int number)
		{
			if (number == 0)
			{
				return -1;
			}
			int num = this.FindIndexOfElement(rosterElement);
			if (num < 0)
			{
				if (number < 0)
				{
					Debug.FailedAssert("Trying to delete an element from Item Roster that does not exist!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "AddToCounts", 174);
					return -1;
				}
				num = this.AddNewElement(new ItemRosterElement(rosterElement, 0), false);
			}
			this.OnRosterUpdated(ref this._data[num], number);
			ItemRosterElement[] data = this._data;
			int num2 = num;
			data[num2].Amount = data[num2].Amount + number;
			if (this._data[num].Amount <= 0)
			{
				this._data[num] = this._data[this._count - 1];
				this._data[this._count - 1] = ItemRosterElement.Invalid;
				this._count--;
			}
			this.UpdateVersion();
			return num;
		}

		public ItemRosterElement GetElementCopyAtIndex(int index)
		{
			if (index < this._count && index >= 0)
			{
				return this._data[index];
			}
			Debug.FailedAssert("GetElementCopyAtIndex can't find the element in ItemRoster", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "GetElementCopyAtIndex", 206);
			return ItemRosterElement.Invalid;
		}

		public ItemObject GetItemAtIndex(int index)
		{
			if (index < this._count && index >= 0)
			{
				return this._data[index].EquipmentElement.Item;
			}
			Debug.FailedAssert("Given index for GetItemAtIndex is not valid in ItemRoster", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "GetItemAtIndex", 217);
			return null;
		}

		public int GetElementNumber(int index)
		{
			if (index < this._count && index >= 0)
			{
				return this._data[index].Amount;
			}
			Debug.FailedAssert("Given index for GetElementNumber is not valid in ItemRoster", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "GetElementNumber", 228);
			return 0;
		}

		public int GetElementUnitCost(int index)
		{
			if (index < this._count && index >= 0)
			{
				return this._data[index].EquipmentElement.ItemValue;
			}
			Debug.FailedAssert("Given index for GetElementUnitCost is not valid in ItemRoster", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\ItemRoster.cs", "GetElementUnitCost", 239);
			return 0;
		}

		public int GetItemNumber(ItemObject item)
		{
			int num = this.FindIndexOfItem(item);
			if (num >= 0)
			{
				return this._data[num].Amount;
			}
			return 0;
		}

		public void Clear()
		{
			for (int i = 0; i < this._count; i++)
			{
				this._data[i].Clear();
				this._data[i] = ItemRosterElement.Invalid;
			}
			this._count = 0;
			this.CalculateCachedStats();
			ItemRoster.RosterUpdatedEventDelegate rosterUpdatedEvent = this._rosterUpdatedEvent;
			if (rosterUpdatedEvent != null)
			{
				rosterUpdatedEvent(default(ItemRosterElement), 0);
			}
			this.UpdateVersion();
		}

		public static bool RostersAreIdentical(ItemRoster a, ItemRoster b)
		{
			if (a == b)
			{
				return true;
			}
			if (a == null || b == null)
			{
				return false;
			}
			if (a.Count != b.Count)
			{
				return false;
			}
			for (int i = 0; i < a.Count; i++)
			{
				ItemRosterElement elementCopyAtIndex = a.GetElementCopyAtIndex(i);
				int num = b.FindIndexOfItem(elementCopyAtIndex.EquipmentElement.Item);
				if (num == -1)
				{
					return false;
				}
				ItemRosterElement elementCopyAtIndex2 = b.GetElementCopyAtIndex(num);
				if (elementCopyAtIndex.EquipmentElement.Item != elementCopyAtIndex2.EquipmentElement.Item || elementCopyAtIndex.Amount != elementCopyAtIndex2.Amount || elementCopyAtIndex.EquipmentElement.ItemModifier != elementCopyAtIndex2.EquipmentElement.ItemModifier)
				{
					return false;
				}
			}
			return true;
		}

		public IEnumerator<ItemRosterElement> GetEnumerator()
		{
			int num;
			for (int i = 0; i < this.Count; i = num + 1)
			{
				yield return this._data[i];
				num = i;
			}
			yield break;
		}

		public int SelectRandomIndex(Func<ItemRosterElement, float> weightFunction)
		{
			List<ValueTuple<int, float>> list = new List<ValueTuple<int, float>>();
			float num = 0f;
			for (int i = 0; i < this.Count; i++)
			{
				float num2 = weightFunction(this._data[i]);
				if (num2 > 1E-05f)
				{
					list.Add(new ValueTuple<int, float>(i, num2));
					num += num2;
				}
			}
			if (list.Count > 0)
			{
				float num3 = MBRandom.RandomFloat * num;
				float num4 = 0f;
				for (int j = 0; j < list.Count; j++)
				{
					num4 += list[j].Item2;
					if (num4 >= num3)
					{
						return list[j].Item1;
					}
				}
				return list[list.Count - 1].Item1;
			}
			return -1;
		}

		IEnumerator IEnumerable.GetEnumerator()
		{
			return this.GetEnumerator();
		}

		public IEnumerable<ItemRosterElement> RemoveIf(Func<ItemRosterElement, int> match)
		{
			List<ItemRosterElement> list = new List<ItemRosterElement>();
			for (int i = 0; i < this._count; i++)
			{
				int num = match(this._data[i]);
				if (num > 0)
				{
					if (num > this._data[i].Amount)
					{
						num = this._data[i].Amount;
					}
					list.Add(new ItemRosterElement(this._data[i].EquipmentElement.Item, num, this._data[i].EquipmentElement.ItemModifier));
					this.AddToCounts(this._data[i].EquipmentElement, -num);
				}
			}
			return list;
		}

		public void Add(IEnumerable<ItemRosterElement> rosterElementList)
		{
			foreach (ItemRosterElement itemRosterElement in rosterElementList)
			{
				this.AddToCounts(itemRosterElement.EquipmentElement, itemRosterElement.Amount);
			}
		}

		public void Add(ItemRosterElement itemRosterElement)
		{
			this.AddToCounts(itemRosterElement.EquipmentElement, itemRosterElement.Amount);
		}

		public void Remove(ItemRosterElement itemRosterElement)
		{
			this.AddToCounts(itemRosterElement.EquipmentElement, -itemRosterElement.Amount);
		}

		void ISerializableObject.SerializeTo(IWriter writer)
		{
			writer.WriteInt(this.Count);
			if (this._data != null)
			{
				writer.WriteInt(this._data.Length);
				foreach (ItemRosterElement itemRosterElement in this._data)
				{
					writer.WriteSerializableObject(itemRosterElement);
				}
				return;
			}
			writer.WriteInt(0);
		}

		void ISerializableObject.DeserializeFrom(IReader reader)
		{
			this._count = reader.ReadInt();
			int num = reader.ReadInt();
			this._data = new ItemRosterElement[num];
			for (int i = 0; i < num; i++)
			{
				this._data[i] = (ItemRosterElement)reader.ReadSerializableObject();
			}
			this.CalculateCachedStats();
		}

		private event ItemRoster.RosterUpdatedEventDelegate _rosterUpdatedEvent;

		public event ItemRoster.RosterUpdatedEventDelegate RosterUpdatedEvent
		{
			add
			{
				this._rosterUpdatedEvent += value;
			}
			remove
			{
				this._rosterUpdatedEvent -= value;
			}
		}

		public void UpdateVersion()
		{
			int versionNo = this.VersionNo;
			this.VersionNo = versionNo + 1;
		}

		private void OnRosterUpdated(ref ItemRosterElement itemRosterElement, int count)
		{
			ItemObject item = itemRosterElement.EquipmentElement.Item;
			this.TotalValue += item.Value * count;
			if (item.IsTradeGood)
			{
				this.TradeGoodsTotalValue += item.Value * count;
			}
			if (item.HasHorseComponent)
			{
				if (item.HorseComponent.IsPackAnimal && itemRosterElement.EquipmentElement.ItemModifier == null)
				{
					this.NumberOfPackAnimals += count;
				}
				else if (item.HorseComponent.IsMount && itemRosterElement.EquipmentElement.ItemModifier == null)
				{
					this.NumberOfMounts += count;
				}
				else if (item.HorseComponent.IsLiveStock)
				{
					this.NumberOfLivestockAnimals += count;
					this.TotalFood += count * item.HorseComponent.MeatCount;
				}
			}
			else
			{
				if (item.IsFood)
				{
					this.TotalFood += count;
					if (itemRosterElement.Amount == 0 && count > 0)
					{
						int num = this.FoodVariety;
						this.FoodVariety = num + 1;
					}
					else if (itemRosterElement.Amount > 0 && itemRosterElement.Amount + count <= 0)
					{
						int num = this.FoodVariety;
						this.FoodVariety = num - 1;
					}
				}
				this.TotalWeight += item.Weight * (float)count;
			}
			ItemRoster.RosterUpdatedEventDelegate rosterUpdatedEvent = this._rosterUpdatedEvent;
			if (rosterUpdatedEvent == null)
			{
				return;
			}
			rosterUpdatedEvent(itemRosterElement, count);
		}

		[LoadInitializationCallback]
		public void OnLoadStarted(MetaData metaData)
		{
			ItemRoster.InstanceListForLoadGame.Add(this);
		}

		public static void CalculateCachedStatsOnLoad()
		{
			foreach (ItemRoster itemRoster in ItemRoster.InstanceListForLoadGame)
			{
				ItemRoster.ReplaceInvalidItemsWithTrash(itemRoster);
				ItemRoster.RemoveZeroCountsFromRoster(itemRoster);
				itemRoster.CalculateCachedStats();
			}
			ItemRoster.InstanceListForLoadGame.Clear();
		}

		private static void RemoveZeroCountsFromRoster(ItemRoster itemRoster)
		{
			int num = 0;
			int i = 0;
			if (itemRoster._count != 0 && itemRoster._count > itemRoster._data.Length)
			{
				itemRoster._count = itemRoster._data.Length;
			}
			while (i < itemRoster._count)
			{
				ItemRosterElement itemRosterElement = itemRoster._data[i];
				if (itemRosterElement.Amount > 0)
				{
					if (num != i)
					{
						itemRoster._data[num] = itemRosterElement;
					}
					num++;
				}
				i++;
			}
			for (int j = num; j < itemRoster._count; j++)
			{
				itemRoster._data[j].Clear();
				itemRoster._data[j] = ItemRosterElement.Invalid;
			}
			itemRoster._count = num;
		}

		private static void ReplaceInvalidItemsWithTrash(ItemRoster itemRoster)
		{
			if (itemRoster._data != null)
			{
				for (int i = itemRoster._data.Length - 1; i >= 0; i--)
				{
					ItemModifier itemModifier = itemRoster._data[i].EquipmentElement.ItemModifier;
					if (itemModifier != null && !itemModifier.IsReady)
					{
						itemRoster.AddToCounts(itemRoster._data[i].EquipmentElement.Item, itemRoster._data[i].Amount);
						itemRoster._data[i].Clear();
					}
					ItemObject item = itemRoster._data[i].EquipmentElement.Item;
					if (item != null && !item.IsReady)
					{
						ItemObject item2 = itemRoster._data[i].EquipmentElement.Item;
						itemRoster.AddToCounts(DefaultItems.Trash, itemRoster._data[i].Amount);
						itemRoster._data[i].Clear();
						if (MBObjectManager.Instance.GetObject(item2.Id) == item2)
						{
							MBObjectManager.Instance.UnregisterObject(item2);
						}
					}
				}
			}
		}

		private void CalculateCachedStats()
		{
			this.TotalWeight = 0f;
			this.NumberOfPackAnimals = 0;
			this.NumberOfMounts = 0;
			this.NumberOfLivestockAnimals = 0;
			this.TotalValue = 0;
			this.TradeGoodsTotalValue = 0;
			this.TotalFood = 0;
			this.FoodVariety = 0;
			for (int i = 0; i < this.Count; i++)
			{
				ItemObject item = this._data[i].EquipmentElement.Item;
				int amount = this._data[i].Amount;
				this.TotalValue += item.Value * amount;
				if (item.IsTradeGood)
				{
					this.TradeGoodsTotalValue += item.Value * amount;
				}
				if (item.HasHorseComponent)
				{
					if (item.HorseComponent.IsPackAnimal)
					{
						this.NumberOfPackAnimals += amount;
					}
					else if (item.HorseComponent.IsMount)
					{
						this.NumberOfMounts += amount;
					}
					else if (item.HorseComponent.IsLiveStock)
					{
						this.NumberOfLivestockAnimals += amount;
						this.TotalFood += amount * item.HorseComponent.MeatCount;
					}
				}
				else
				{
					if (item.IsFood)
					{
						this.TotalFood += amount;
						int foodVariety = this.FoodVariety;
						this.FoodVariety = foodVariety + 1;
					}
					this.TotalWeight += item.Weight * (float)amount;
				}
			}
		}

		[CachedData]
		public float TotalWeight { get; private set; }

		[CachedData]
		public int TotalFood { get; internal set; }

		[CachedData]
		public int FoodVariety { get; internal set; }

		[CachedData]
		public int TotalValue { get; internal set; }

		[CachedData]
		public int TradeGoodsTotalValue { get; internal set; }

		[CachedData]
		public int NumberOfPackAnimals { get; private set; }

		[CachedData]
		public int NumberOfLivestockAnimals { get; private set; }

		[CachedData]
		public int NumberOfMounts { get; private set; }

		[SaveableField(0)]
		private ItemRosterElement[] _data;

		[SaveableField(1)]
		private int _count;

		private static readonly List<ItemRoster> InstanceListForLoadGame = new List<ItemRoster>();

		public delegate void RosterUpdatedEventDelegate(ItemRosterElement item, int count);
	}
}
