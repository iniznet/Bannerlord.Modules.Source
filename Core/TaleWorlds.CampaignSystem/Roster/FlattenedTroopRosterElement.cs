using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Roster
{
	public struct FlattenedTroopRosterElement : ISavedStruct
	{
		public static void AutoGeneratedStaticCollectObjectsFlattenedTroopRosterElement(object o, List<object> collectedObjects)
		{
			((FlattenedTroopRosterElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._troop);
			UniqueTroopDescriptor.AutoGeneratedStaticCollectObjectsUniqueTroopDescriptor(this._uniqueNo, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueState(object o)
		{
			return ((FlattenedTroopRosterElement)o).State;
		}

		internal static object AutoGeneratedGetMemberValue_troop(object o)
		{
			return ((FlattenedTroopRosterElement)o)._troop;
		}

		internal static object AutoGeneratedGetMemberValue_xp(object o)
		{
			return ((FlattenedTroopRosterElement)o)._xp;
		}

		internal static object AutoGeneratedGetMemberValue_xpGain(object o)
		{
			return ((FlattenedTroopRosterElement)o)._xpGain;
		}

		internal static object AutoGeneratedGetMemberValue_uniqueNo(object o)
		{
			return ((FlattenedTroopRosterElement)o)._uniqueNo;
		}

		[SaveableProperty(5)]
		public RosterTroopState State { get; private set; }

		public FlattenedTroopRosterElement(CharacterObject troop, RosterTroopState state = RosterTroopState.Active, int xp = 0, UniqueTroopDescriptor uniqueNo = default(UniqueTroopDescriptor), int xpGain = 0)
		{
			this = default(FlattenedTroopRosterElement);
			this._troop = troop;
			this._xp = xp;
			this._xpGain = xpGain;
			this.State = state;
			this._uniqueNo = ((!uniqueNo.IsValid) ? new UniqueTroopDescriptor(Game.Current.NextUniqueTroopSeed) : uniqueNo);
		}

		public FlattenedTroopRosterElement(FlattenedTroopRosterElement rosterElement, RosterTroopState state)
		{
			this = new FlattenedTroopRosterElement(rosterElement);
			this.State = state;
		}

		private FlattenedTroopRosterElement(FlattenedTroopRosterElement rosterElement)
		{
			this = default(FlattenedTroopRosterElement);
			this._troop = rosterElement._troop;
			this._xp = rosterElement._xp;
			this._xpGain = rosterElement._xpGain;
			this._uniqueNo = rosterElement._uniqueNo;
			this.State = rosterElement.State;
		}

		public CharacterObject Troop
		{
			get
			{
				return this._troop;
			}
		}

		public bool IsWounded
		{
			get
			{
				if (this.Troop.IsHero)
				{
					return this.Troop.HeroObject.IsWounded;
				}
				return this.State == RosterTroopState.Wounded || this.State == RosterTroopState.WoundedInThisBattle;
			}
			set
			{
				this.State = (value ? RosterTroopState.Wounded : RosterTroopState.Active);
			}
		}

		public bool IsRouted
		{
			get
			{
				return this.State == RosterTroopState.Routed;
			}
			set
			{
				this.State = (value ? RosterTroopState.Routed : RosterTroopState.Active);
			}
		}

		public bool IsKilled
		{
			get
			{
				return this.State == RosterTroopState.Killed;
			}
			set
			{
				this.State = (value ? RosterTroopState.Killed : RosterTroopState.Active);
			}
		}

		public int Xp
		{
			get
			{
				return this._xp;
			}
		}

		public int XpGained
		{
			get
			{
				return this._xpGain;
			}
		}

		public UniqueTroopDescriptor Descriptor
		{
			get
			{
				return this._uniqueNo;
			}
		}

		public override string ToString()
		{
			return this.Troop.ToString();
		}

		bool ISavedStruct.IsDefault()
		{
			return this._troop == null && this._xp == 0 && this._xpGain == 0 && this.State == RosterTroopState.Active && this._uniqueNo == UniqueTroopDescriptor.Invalid;
		}

		public static readonly FlattenedTroopRosterElement DefaultFlattenedTroopRosterElement;

		[SaveableField(0)]
		private readonly CharacterObject _troop;

		[SaveableField(1)]
		private readonly int _xp;

		[SaveableField(3)]
		private readonly int _xpGain;

		[SaveableField(4)]
		private readonly UniqueTroopDescriptor _uniqueNo;
	}
}
