using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Roster
{
	// Token: 0x02000290 RID: 656
	public class TroopRoster : ISerializableObject
	{
		// Token: 0x060022B7 RID: 8887 RVA: 0x0009349C File Offset: 0x0009169C
		internal static void AutoGeneratedStaticCollectObjectsTroopRoster(object o, List<object> collectedObjects)
		{
			((TroopRoster)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060022B8 RID: 8888 RVA: 0x000934AA File Offset: 0x000916AA
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.data);
			collectedObjects.Add(this.OwnerParty);
		}

		// Token: 0x060022B9 RID: 8889 RVA: 0x000934C4 File Offset: 0x000916C4
		internal static object AutoGeneratedGetMemberValueOwnerParty(object o)
		{
			return ((TroopRoster)o).OwnerParty;
		}

		// Token: 0x060022BA RID: 8890 RVA: 0x000934D1 File Offset: 0x000916D1
		internal static object AutoGeneratedGetMemberValuedata(object o)
		{
			return ((TroopRoster)o).data;
		}

		// Token: 0x060022BB RID: 8891 RVA: 0x000934DE File Offset: 0x000916DE
		internal static object AutoGeneratedGetMemberValue_count(object o)
		{
			return ((TroopRoster)o)._count;
		}

		// Token: 0x060022BC RID: 8892 RVA: 0x000934F0 File Offset: 0x000916F0
		internal static object AutoGeneratedGetMemberValue_isPrisonRoster(object o)
		{
			return ((TroopRoster)o)._isPrisonRoster;
		}

		// Token: 0x1700089D RID: 2205
		// (get) Token: 0x060022BD RID: 8893 RVA: 0x00093502 File Offset: 0x00091702
		// (set) Token: 0x060022BE RID: 8894 RVA: 0x0009350A File Offset: 0x0009170A
		[CachedData]
		internal NumberChangedCallback NumberChangedCallback { get; set; }

		// Token: 0x1700089E RID: 2206
		// (get) Token: 0x060022BF RID: 8895 RVA: 0x00093513 File Offset: 0x00091713
		// (set) Token: 0x060022C0 RID: 8896 RVA: 0x0009351B File Offset: 0x0009171B
		[SaveableProperty(2)]
		internal PartyBase OwnerParty { get; private set; }

		// Token: 0x1700089F RID: 2207
		// (get) Token: 0x060022C1 RID: 8897 RVA: 0x00093524 File Offset: 0x00091724
		public int Count
		{
			get
			{
				return this._count;
			}
		}

		// Token: 0x170008A0 RID: 2208
		// (get) Token: 0x060022C2 RID: 8898 RVA: 0x0009352C File Offset: 0x0009172C
		// (set) Token: 0x060022C3 RID: 8899 RVA: 0x00093534 File Offset: 0x00091734
		[CachedData]
		public int VersionNo { get; private set; }

		// Token: 0x170008A1 RID: 2209
		// (get) Token: 0x060022C4 RID: 8900 RVA: 0x0009353D File Offset: 0x0009173D
		public int TotalRegulars
		{
			get
			{
				return this._totalRegulars;
			}
		}

		// Token: 0x170008A2 RID: 2210
		// (get) Token: 0x060022C5 RID: 8901 RVA: 0x00093545 File Offset: 0x00091745
		public int TotalWoundedRegulars
		{
			get
			{
				return this._totalWoundedRegulars;
			}
		}

		// Token: 0x170008A3 RID: 2211
		// (get) Token: 0x060022C6 RID: 8902 RVA: 0x0009354D File Offset: 0x0009174D
		public int TotalWoundedHeroes
		{
			get
			{
				return this._totalWoundedHeroes;
			}
		}

		// Token: 0x170008A4 RID: 2212
		// (get) Token: 0x060022C7 RID: 8903 RVA: 0x00093555 File Offset: 0x00091755
		public int TotalHeroes
		{
			get
			{
				return this._totalHeroes;
			}
		}

		// Token: 0x170008A5 RID: 2213
		// (get) Token: 0x060022C8 RID: 8904 RVA: 0x0009355D File Offset: 0x0009175D
		public int TotalWounded
		{
			get
			{
				return this._totalWoundedRegulars + this._totalWoundedHeroes;
			}
		}

		// Token: 0x170008A6 RID: 2214
		// (get) Token: 0x060022C9 RID: 8905 RVA: 0x0009356C File Offset: 0x0009176C
		public int TotalManCount
		{
			get
			{
				return this._totalRegulars + this._totalHeroes;
			}
		}

		// Token: 0x170008A7 RID: 2215
		// (get) Token: 0x060022CA RID: 8906 RVA: 0x0009357B File Offset: 0x0009177B
		public int TotalHealthyCount
		{
			get
			{
				return this._totalRegulars + this._totalHeroes - (this._totalWoundedRegulars + this._totalWoundedHeroes);
			}
		}

		// Token: 0x170008A8 RID: 2216
		// (get) Token: 0x060022CB RID: 8907 RVA: 0x00093598 File Offset: 0x00091798
		// (set) Token: 0x060022CC RID: 8908 RVA: 0x000935A0 File Offset: 0x000917A0
		public bool IsPrisonRoster
		{
			get
			{
				return this._isPrisonRoster;
			}
			set
			{
				this._isPrisonRoster = value;
			}
		}

		// Token: 0x060022CD RID: 8909 RVA: 0x000935A9 File Offset: 0x000917A9
		public TroopRoster(PartyBase ownerParty)
			: this()
		{
			this.OwnerParty = ownerParty;
		}

		// Token: 0x060022CE RID: 8910 RVA: 0x000935B8 File Offset: 0x000917B8
		private TroopRoster()
		{
			this.data = new TroopRosterElement[4];
			this._count = 0;
			this._troopRosterElements = new MBList<TroopRosterElement>();
			this.InitializeCachedData();
		}

		// Token: 0x060022CF RID: 8911 RVA: 0x000935E4 File Offset: 0x000917E4
		public static TroopRoster CreateDummyTroopRoster()
		{
			return new TroopRoster();
		}

		// Token: 0x060022D0 RID: 8912 RVA: 0x000935EB File Offset: 0x000917EB
		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		// Token: 0x060022D1 RID: 8913 RVA: 0x000935F3 File Offset: 0x000917F3
		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this._troopRosterElementsVersion = -1;
			this._troopRosterElements = new MBList<TroopRosterElement>();
			TroopRoster.InstanceListForLoadGame.Add(this);
		}

		// Token: 0x060022D2 RID: 8914 RVA: 0x00093614 File Offset: 0x00091814
		private void EnsureLength(int length)
		{
			if (length > 0 && (this.data == null || length > this.data.Length))
			{
				int num = 4;
				if (this.data != null)
				{
					num = this.data.Length * 2;
				}
				TroopRosterElement[] array = new TroopRosterElement[num];
				for (int i = 0; i < this._count; i++)
				{
					array[i] = this.data[i];
				}
				this.data = array;
			}
		}

		// Token: 0x060022D3 RID: 8915 RVA: 0x00093680 File Offset: 0x00091880
		public static void CalculateCachedStatsOnLoad()
		{
			foreach (TroopRoster troopRoster in TroopRoster.InstanceListForLoadGame)
			{
				troopRoster.InitializeCachedData();
			}
			TroopRoster.InstanceListForLoadGame.Clear();
		}

		// Token: 0x060022D4 RID: 8916 RVA: 0x000936DC File Offset: 0x000918DC
		private void InitializeCachedData()
		{
			this._isInitialized = true;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < this._count; i++)
			{
				TroopRosterElement troopRosterElement = this.data[i];
				if (troopRosterElement.Character.IsHero)
				{
					num++;
					if (troopRosterElement.Character.HeroObject.IsWounded)
					{
						num2++;
					}
				}
				else
				{
					num3 += this.data[i].Number;
					num4 += this.data[i].WoundedNumber;
				}
			}
			this._totalWoundedHeroes = num2;
			this._totalWoundedRegulars = num4;
			this._totalHeroes = num;
			this._totalRegulars = num3;
		}

		// Token: 0x060022D5 RID: 8917 RVA: 0x0009378D File Offset: 0x0009198D
		public FlattenedTroopRoster ToFlattenedRoster()
		{
			return new FlattenedTroopRoster(this.TotalManCount) { this.GetTroopRoster() };
		}

		// Token: 0x060022D6 RID: 8918 RVA: 0x000937A8 File Offset: 0x000919A8
		public void Add(IEnumerable<FlattenedTroopRosterElement> elementList)
		{
			foreach (FlattenedTroopRosterElement flattenedTroopRosterElement in elementList)
			{
				this.AddToCounts(flattenedTroopRosterElement.Troop, 1, false, flattenedTroopRosterElement.IsWounded ? 1 : 0, flattenedTroopRosterElement.Xp, true, -1);
			}
		}

		// Token: 0x060022D7 RID: 8919 RVA: 0x00093810 File Offset: 0x00091A10
		public void Add(TroopRoster troopRoster)
		{
			foreach (TroopRosterElement troopRosterElement in troopRoster.GetTroopRoster())
			{
				this.Add(troopRosterElement);
			}
		}

		// Token: 0x060022D8 RID: 8920 RVA: 0x00093864 File Offset: 0x00091A64
		public void Add(TroopRosterElement troopRosterElement)
		{
			this.AddToCounts(troopRosterElement.Character, troopRosterElement.Number, false, troopRosterElement.WoundedNumber, troopRosterElement.Xp, true, -1);
		}

		// Token: 0x060022D9 RID: 8921 RVA: 0x0009388C File Offset: 0x00091A8C
		public ICollection<TroopRosterElement> RemoveIf(Predicate<TroopRosterElement> match)
		{
			List<TroopRosterElement> list = new List<TroopRosterElement>();
			bool flag = false;
			for (int i = 0; i < this._count; i++)
			{
				if (match(this.data[i]))
				{
					TroopRosterElement elementCopyAtIndex = this.GetElementCopyAtIndex(i);
					list.Add(elementCopyAtIndex);
					this.AddToCountsAtIndex(i, -elementCopyAtIndex.Number, -elementCopyAtIndex.WoundedNumber, -elementCopyAtIndex.Xp, true);
					i--;
					flag = true;
				}
			}
			if (flag)
			{
				this.UpdateVersion();
			}
			return list;
		}

		// Token: 0x060022DA RID: 8922 RVA: 0x00093908 File Offset: 0x00091B08
		public int FindIndexOfTroop(CharacterObject character)
		{
			for (int i = 0; i < this._count; i++)
			{
				if (this.data[i].Character == character)
				{
					return i;
				}
			}
			return -1;
		}

		// Token: 0x060022DB RID: 8923 RVA: 0x00093940 File Offset: 0x00091B40
		public CharacterObject GetManAtIndexFromFlattenedRosterWithFilter(int indexOfTroop, bool includeHeroes = false, bool countOnlyHealthyOnes = false)
		{
			for (int i = 0; i < this._count; i++)
			{
				if (includeHeroes || !this.data[i].Character.IsHero)
				{
					indexOfTroop -= (countOnlyHealthyOnes ? (this.data[i].Number - this.data[i].WoundedNumber) : this.data[i].Number);
					if (indexOfTroop < 0)
					{
						return this.data[i].Character;
					}
				}
			}
			return null;
		}

		// Token: 0x060022DC RID: 8924 RVA: 0x000939D0 File Offset: 0x00091BD0
		private bool KillOneManRandomly(bool includeHeroes = false)
		{
			CharacterObject characterObject = null;
			int num = (includeHeroes ? (this.TotalManCount - this.TotalWounded) : (this._totalRegulars - this._totalWoundedRegulars));
			bool flag = num > 0;
			while (flag)
			{
				flag = false;
				int num2 = MBRandom.RandomInt(num);
				characterObject = this.GetManAtIndexFromFlattenedRosterWithFilter(num2, includeHeroes, true);
				if (characterObject == null || (!includeHeroes && characterObject.IsHero))
				{
					flag = true;
				}
			}
			if (characterObject != null)
			{
				if (characterObject.IsHero)
				{
					if (characterObject.HeroObject.IsWanderer)
					{
						MakeHeroFugitiveAction.Apply(characterObject.HeroObject);
					}
					else
					{
						characterObject.HeroObject.ChangeState(Hero.CharacterStates.Fugitive);
					}
				}
				this.AddToCounts(characterObject, -1, false, 0, 0, true, -1);
				return true;
			}
			return false;
		}

		// Token: 0x060022DD RID: 8925 RVA: 0x00093A70 File Offset: 0x00091C70
		public void KillNumberOfMenRandomly(int numberOfMen, bool includeHeroes)
		{
			bool flag = true;
			int num = 0;
			while (num < numberOfMen && flag)
			{
				flag = this.KillOneManRandomly(includeHeroes);
				num++;
			}
		}

		// Token: 0x060022DE RID: 8926 RVA: 0x00093A98 File Offset: 0x00091C98
		public void WoundNumberOfTroopsRandomly(int numberOfMen)
		{
			for (int i = 0; i < numberOfMen; i++)
			{
				CharacterObject characterObject = null;
				int num = this._totalRegulars - this._totalWoundedRegulars;
				bool flag = num > 0;
				while (flag)
				{
					flag = false;
					int num2 = MBRandom.RandomInt(num);
					characterObject = this.GetManAtIndexFromFlattenedRosterWithFilter(num2, true, false);
					if (characterObject == null || characterObject.IsHero)
					{
						flag = true;
					}
				}
				if (characterObject != null)
				{
					this.WoundTroop(characterObject, 1, default(UniqueTroopDescriptor));
				}
			}
		}

		// Token: 0x060022DF RID: 8927 RVA: 0x00093B04 File Offset: 0x00091D04
		public int AddToCountsAtIndex(int index, int countChange, int woundedCountChange = 0, int xpChange = 0, bool removeDepleted = true)
		{
			this.UpdateVersion();
			bool flag = false;
			CharacterObject character = this.data[index].Character;
			bool isHero = character.IsHero;
			TroopRosterElement[] array = this.data;
			int num = index;
			array[num].Number = array[num].Number + countChange;
			int num2 = this.data[index].WoundedNumber + woundedCountChange;
			if (num2 > this.data[index].Number)
			{
				woundedCountChange += this.data[index].Number - num2;
			}
			else if (num2 < 0)
			{
				Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRoster.cs", "AddToCountsAtIndex", 426);
			}
			TroopRosterElement[] array2 = this.data;
			int num3 = index;
			array2[num3].WoundedNumber = array2[num3].WoundedNumber + woundedCountChange;
			if (xpChange != 0)
			{
				TroopRosterElement[] array3 = this.data;
				int num4 = index;
				array3[num4].Xp = array3[num4].Xp + xpChange;
			}
			if (this.IsPrisonRoster)
			{
				this.ClampConformity(index);
			}
			else
			{
				this.ClampXp(index);
			}
			if (isHero)
			{
				this._totalHeroes += countChange;
				if (character.HeroObject.IsWounded)
				{
					this._totalWoundedHeroes += countChange;
				}
				if (countChange != 0)
				{
					flag = true;
				}
			}
			else
			{
				this._totalWoundedRegulars += woundedCountChange;
				this._totalRegulars += countChange;
			}
			if (removeDepleted && this.data[index].Number == 0)
			{
				this.RemoveRange(index, index + 1);
				index = -1;
			}
			if (this.OwnerParty != null && isHero)
			{
				if (countChange > 0)
				{
					if (!this.IsPrisonRoster)
					{
						this.OwnerParty.OnHeroAdded(character.HeroObject);
					}
					else
					{
						this.OwnerParty.OnHeroAddedAsPrisoner(character.HeroObject);
					}
				}
				else if (countChange < 0)
				{
					if (!this.IsPrisonRoster)
					{
						this.OwnerParty.OnHeroRemoved(character.HeroObject);
					}
					else
					{
						this.OwnerParty.OnHeroRemovedAsPrisoner(character.HeroObject);
					}
				}
			}
			if (countChange != 0 || woundedCountChange != 0)
			{
				this.OnNumberChanged(countChange != 0, woundedCountChange != 0, flag);
			}
			return index;
		}

		// Token: 0x060022E0 RID: 8928 RVA: 0x00093CF8 File Offset: 0x00091EF8
		private void RemoveRange(int p, int p2)
		{
			int num = p2 - p;
			for (int i = p2; i < this._count; i++)
			{
				this.data[i - num] = this.data[i];
			}
			for (int j = this._count - num; j < this._count; j++)
			{
				this.data[j].Clear();
			}
			this.UpdateVersion();
			this._count -= num;
		}

		// Token: 0x060022E1 RID: 8929 RVA: 0x00093D74 File Offset: 0x00091F74
		private int AddNewElement(CharacterObject character, bool insertAtFront = false, int insertionIndex = -1)
		{
			int num = this._count + 1;
			this.EnsureLength(num);
			int num2 = ((insertionIndex == -1) ? this._count : insertionIndex);
			if (insertAtFront)
			{
				num2 = 0;
			}
			if (this._count > num2)
			{
				for (int i = this._count; i > num2; i--)
				{
					this.data[i] = this.data[i - 1];
				}
			}
			this.data[num2] = new TroopRosterElement(character);
			this._count = num;
			this.UpdateVersion();
			return num2;
		}

		// Token: 0x060022E2 RID: 8930 RVA: 0x00093DF8 File Offset: 0x00091FF8
		[Conditional("DEBUG_MORE")]
		public void CheckValidity()
		{
			if (this.data == null)
			{
				return;
			}
			int num = 0;
			for (int i = 0; i < this.data.Length; i++)
			{
				TroopRosterElement troopRosterElement = this.data[i];
				if (troopRosterElement.Character != null)
				{
					int number = troopRosterElement.Number;
					int woundedNumber = troopRosterElement.WoundedNumber;
					num++;
				}
			}
		}

		// Token: 0x060022E3 RID: 8931 RVA: 0x00093E4C File Offset: 0x0009204C
		private void OnNumberChanged(bool numberChanged, bool woundedNumberChanged, bool heroCountChanged)
		{
			NumberChangedCallback numberChangedCallback = this.NumberChangedCallback;
			if (numberChangedCallback == null)
			{
				return;
			}
			numberChangedCallback(numberChanged, woundedNumberChanged, heroCountChanged);
		}

		// Token: 0x060022E4 RID: 8932 RVA: 0x00093E64 File Offset: 0x00092064
		public int AddToCounts(CharacterObject character, int count, bool insertAtFront = false, int woundedCount = 0, int xpChange = 0, bool removeDepleted = true, int index = -1)
		{
			int num = this.FindIndexOfTroop(character);
			if (num < 0)
			{
				if (index >= 0)
				{
					if (count + woundedCount <= 0)
					{
						Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRoster.cs", "AddToCounts", 600);
						return -1;
					}
					num = this.AddNewElement(character, insertAtFront, index);
				}
				else
				{
					if (count + woundedCount <= 0)
					{
						return -1;
					}
					num = this.AddNewElement(character, insertAtFront, -1);
				}
			}
			if (this.AddToCountsAtIndex(num, count, woundedCount, xpChange, removeDepleted) != -1)
			{
				return num;
			}
			return -1;
		}

		// Token: 0x060022E5 RID: 8933 RVA: 0x00093ED8 File Offset: 0x000920D8
		public int GetTroopCount(CharacterObject troop)
		{
			int num = this.FindIndexOfTroop(troop);
			if (num >= 0)
			{
				return this.data[num].Number;
			}
			return 0;
		}

		// Token: 0x060022E6 RID: 8934 RVA: 0x00093F04 File Offset: 0x00092104
		public void RemoveZeroCounts()
		{
			int num = 0;
			for (int i = 0; i < this._count; i++)
			{
				if (this.data[i].Number > 0)
				{
					if (num != i)
					{
						this.data[num] = this.data[i];
					}
					num++;
				}
			}
			for (int j = num; j < this._count; j++)
			{
				this.data[j].Clear();
			}
			this._count = num;
			this.UpdateVersion();
		}

		// Token: 0x060022E7 RID: 8935 RVA: 0x00093F87 File Offset: 0x00092187
		public TroopRosterElement GetElementCopyAtIndex(int index)
		{
			return this.data[index];
		}

		// Token: 0x060022E8 RID: 8936 RVA: 0x00093F95 File Offset: 0x00092195
		public void SetElementNumber(int index, int number)
		{
			if (index < this._count)
			{
				this.data[index].Number = number;
				this.UpdateVersion();
				return;
			}
			throw new IndexOutOfRangeException();
		}

		// Token: 0x060022E9 RID: 8937 RVA: 0x00093FBE File Offset: 0x000921BE
		public int GetElementNumber(int index)
		{
			if (index >= 0 && index < this._count)
			{
				return this.data[index].Number;
			}
			return 0;
		}

		// Token: 0x060022EA RID: 8938 RVA: 0x00093FE0 File Offset: 0x000921E0
		public int GetElementNumber(CharacterObject character)
		{
			return this.GetElementNumber(this.FindIndexOfTroop(character));
		}

		// Token: 0x060022EB RID: 8939 RVA: 0x00093FEF File Offset: 0x000921EF
		public void SetElementWoundedNumber(int index, int number)
		{
			if (index < this._count)
			{
				this.data[index].WoundedNumber = number;
				this.UpdateVersion();
				return;
			}
			throw new IndexOutOfRangeException();
		}

		// Token: 0x060022EC RID: 8940 RVA: 0x00094018 File Offset: 0x00092218
		public int GetElementWoundedNumber(int index)
		{
			if (index < this._count)
			{
				return this.data[index].WoundedNumber;
			}
			throw new IndexOutOfRangeException();
		}

		// Token: 0x060022ED RID: 8941 RVA: 0x0009403A File Offset: 0x0009223A
		public void SetElementXp(int index, int number)
		{
			if (index < this._count)
			{
				this.data[index].Xp = number;
				this.UpdateVersion();
				return;
			}
			throw new IndexOutOfRangeException();
		}

		// Token: 0x060022EE RID: 8942 RVA: 0x00094063 File Offset: 0x00092263
		public int GetElementXp(int index)
		{
			if (index < this._count && index >= 0)
			{
				return this.data[index].Xp;
			}
			return 0;
		}

		// Token: 0x060022EF RID: 8943 RVA: 0x00094085 File Offset: 0x00092285
		public int GetElementXp(CharacterObject character)
		{
			return this.GetElementXp(this.FindIndexOfTroop(character));
		}

		// Token: 0x060022F0 RID: 8944 RVA: 0x00094094 File Offset: 0x00092294
		public CharacterObject GetCharacterAtIndex(int index)
		{
			if (index < this._count)
			{
				return this.data[index].Character;
			}
			throw new IndexOutOfRangeException();
		}

		// Token: 0x060022F1 RID: 8945 RVA: 0x000940B8 File Offset: 0x000922B8
		public void FillMembersOfRoster(int neededNumber, CharacterObject basicTroop = null)
		{
			int num3;
			for (int num = (from element in this.GetTroopRoster()
				where !element.Character.IsHero
				select element).Sum((TroopRosterElement element) => element.Number); num != neededNumber; num += num3)
			{
				float num2 = MBRandom.RandomFloat * (float)num;
				CharacterObject characterObject = basicTroop;
				foreach (TroopRosterElement troopRosterElement in from element in this.GetTroopRoster()
					where !element.Character.IsHero
					select element)
				{
					num2 -= (float)troopRosterElement.Number;
					if (num2 < 0f)
					{
						characterObject = troopRosterElement.Character;
						break;
					}
				}
				num3 = ((num > neededNumber) ? (-1) : 1);
				this.AddToCounts(characterObject, num3, false, 0, 0, true, -1);
			}
		}

		// Token: 0x060022F2 RID: 8946 RVA: 0x000941C8 File Offset: 0x000923C8
		public void WoundMembersOfRoster(float woundedRatio)
		{
			for (int i = 0; i < this.data.Length; i++)
			{
				TroopRosterElement troopRosterElement = this.data[i];
				if (troopRosterElement.Character != null)
				{
					if (troopRosterElement.Character.IsHero && MBRandom.RandomFloat < woundedRatio)
					{
						this.data[i].Character.HeroObject.MakeWounded(null, KillCharacterAction.KillCharacterActionDetail.None);
					}
					else
					{
						int num = (int)((float)troopRosterElement.Number * woundedRatio);
						this.AddToCounts(this.data[i].Character, 0, false, num, 0, true, -1);
					}
				}
			}
		}

		// Token: 0x060022F3 RID: 8947 RVA: 0x0009425E File Offset: 0x0009245E
		public void Reset()
		{
			this.Clear();
			this.UpdateVersion();
		}

		// Token: 0x060022F4 RID: 8948 RVA: 0x0009426C File Offset: 0x0009246C
		public override bool Equals(object obj)
		{
			return this == obj;
		}

		// Token: 0x060022F5 RID: 8949 RVA: 0x00094274 File Offset: 0x00092474
		public static bool operator ==(TroopRoster a, TroopRoster b)
		{
			if (a == b)
			{
				return true;
			}
			if (a == null || b == null)
			{
				return false;
			}
			if (a.Count != b.Count)
			{
				return false;
			}
			for (int i = 0; i < a.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = a.GetElementCopyAtIndex(i);
				int num = b.FindIndexOfTroop(elementCopyAtIndex.Character);
				if (num == -1)
				{
					return false;
				}
				TroopRosterElement elementCopyAtIndex2 = b.GetElementCopyAtIndex(num);
				if (elementCopyAtIndex.Character != elementCopyAtIndex2.Character || elementCopyAtIndex.Number != elementCopyAtIndex2.Number)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x060022F6 RID: 8950 RVA: 0x000942F4 File Offset: 0x000924F4
		public static bool operator !=(TroopRoster a, TroopRoster b)
		{
			return !(a == b);
		}

		// Token: 0x060022F7 RID: 8951 RVA: 0x00094300 File Offset: 0x00092500
		public bool Contains(CharacterObject character)
		{
			for (int i = 0; i < this.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = this.GetElementCopyAtIndex(i);
				if (character == elementCopyAtIndex.Character)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060022F8 RID: 8952 RVA: 0x00094334 File Offset: 0x00092534
		public void ValidateTroopListCache()
		{
			if (this._troopRosterElementsVersion != this.VersionNo)
			{
				lock (this)
				{
					if (this._troopRosterElementsVersion != this.VersionNo)
					{
						this._troopRosterElements.Clear();
						this._troopRosterElements.Capacity = Math.Max(this._troopRosterElements.Capacity, this.Count);
						for (int i = 0; i < this.Count; i++)
						{
							this._troopRosterElements.Add(this.GetElementCopyAtIndex(i));
						}
						this._troopRosterElementsVersion = this.VersionNo;
					}
				}
			}
		}

		// Token: 0x060022F9 RID: 8953 RVA: 0x000943E4 File Offset: 0x000925E4
		public MBList<TroopRosterElement> GetTroopRoster()
		{
			this.ValidateTroopListCache();
			return this._troopRosterElements;
		}

		// Token: 0x060022FA RID: 8954 RVA: 0x000943F4 File Offset: 0x000925F4
		public void Clear()
		{
			for (int i = this._count - 1; i >= 0; i--)
			{
				this.AddToCountsAtIndex(i, -this.data[i].Number, -this.data[i].WoundedNumber, 0, true);
			}
			this.UpdateVersion();
		}

		// Token: 0x060022FB RID: 8955 RVA: 0x00094448 File Offset: 0x00092648
		private void ClampConformity(int index)
		{
			CharacterObject character = this.data[index].Character;
			if (!character.IsHero)
			{
				int num = this.data[index].Number * character.ConformityNeededToRecruitPrisoner;
				int xp = this.data[index].Xp;
				this.data[index].Xp = MBMath.ClampInt(xp, 0, num);
				return;
			}
			this.data[index].Xp = MathF.Max(this.data[index].Xp, 0);
		}

		// Token: 0x060022FC RID: 8956 RVA: 0x000944DC File Offset: 0x000926DC
		private void ClampXp(int index)
		{
			CharacterObject character = this.data[index].Character;
			if (!character.IsHero)
			{
				int num = 0;
				for (int i = 0; i < character.UpgradeTargets.Length; i++)
				{
					int upgradeXpCost = character.GetUpgradeXpCost(this.OwnerParty, i);
					if (num < upgradeXpCost)
					{
						num = upgradeXpCost;
					}
				}
				int num2 = MBMath.ClampInt(this.data[index].Xp, 0, this.data[index].Number * num);
				this.data[index].Xp = num2;
				return;
			}
			this.data[index].Xp = MathF.Max(this.data[index].Xp, 0);
		}

		// Token: 0x060022FD RID: 8957 RVA: 0x00094598 File Offset: 0x00092798
		public int AddXpToTroop(int xpAmount, CharacterObject attackerTroop)
		{
			int num = this.FindIndexOfTroop(attackerTroop);
			if (num >= 0)
			{
				return this.AddXpToTroopAtIndex(xpAmount, num);
			}
			return 0;
		}

		// Token: 0x060022FE RID: 8958 RVA: 0x000945BC File Offset: 0x000927BC
		public int AddXpToTroopAtIndex(int xpAmount, int index)
		{
			int xp = this.data[index].Xp;
			TroopRosterElement[] array = this.data;
			array[index].Xp = array[index].Xp + xpAmount;
			if (this.IsPrisonRoster)
			{
				this.ClampConformity(index);
			}
			else
			{
				this.ClampXp(index);
			}
			return this.data[index].Xp - xp;
		}

		// Token: 0x060022FF RID: 8959 RVA: 0x00094620 File Offset: 0x00092820
		public void RemoveTroop(CharacterObject troop, int numberToRemove = 1, UniqueTroopDescriptor troopSeed = default(UniqueTroopDescriptor), int xp = 0)
		{
			int num = this.FindIndexOfTroop(troop);
			bool flag = true;
			if (PlayerEncounter.CurrentBattleSimulation != null && !troop.IsHero)
			{
				flag = false;
			}
			this.AddToCountsAtIndex(num, -numberToRemove, 0, troop.IsHero ? 0 : (-xp), flag);
		}

		// Token: 0x06002300 RID: 8960 RVA: 0x00094664 File Offset: 0x00092864
		public void WoundTroop(CharacterObject troop, int numberToWound = 1, UniqueTroopDescriptor troopSeed = default(UniqueTroopDescriptor))
		{
			int num = this.FindIndexOfTroop(troop);
			this.AddToCountsAtIndex(num, 0, numberToWound, 0, true);
		}

		// Token: 0x06002301 RID: 8961 RVA: 0x00094688 File Offset: 0x00092888
		public void SlideTroops(int firstTroopIndex, int newIndex)
		{
			if (firstTroopIndex == -1 || newIndex == -1 || firstTroopIndex == newIndex)
			{
				return;
			}
			if (newIndex >= this.data.Length)
			{
				this.EnsureLength(newIndex + 1);
			}
			TroopRosterElement troopRosterElement = this.data[firstTroopIndex];
			TroopRosterElement troopRosterElement2 = this.data[newIndex];
			if (firstTroopIndex > newIndex)
			{
				for (int i = firstTroopIndex - 1; i > newIndex; i--)
				{
					this.data[i + 1] = this.data[i];
				}
				this.data[newIndex] = troopRosterElement;
				this.data[newIndex + 1] = troopRosterElement2;
			}
			else
			{
				for (int j = firstTroopIndex + 1; j < newIndex; j++)
				{
					this.data[j - 1] = this.data[j];
				}
				this.data[newIndex] = troopRosterElement;
				this.data[newIndex - 1] = troopRosterElement2;
			}
			this.UpdateVersion();
		}

		// Token: 0x06002302 RID: 8962 RVA: 0x00094764 File Offset: 0x00092964
		void ISerializableObject.SerializeTo(IWriter writer)
		{
			writer.WriteInt(this.Count);
			writer.WriteInt(this.VersionNo);
			if (this.data != null)
			{
				writer.WriteInt(this.data.Length);
				foreach (TroopRosterElement troopRosterElement in this.data)
				{
					writer.WriteSerializableObject(troopRosterElement);
				}
				return;
			}
			writer.WriteInt(0);
		}

		// Token: 0x06002303 RID: 8963 RVA: 0x000947D0 File Offset: 0x000929D0
		void ISerializableObject.DeserializeFrom(IReader reader)
		{
			this._count = reader.ReadInt();
			this.VersionNo = reader.ReadInt();
			int num = reader.ReadInt();
			this.data = new TroopRosterElement[num];
			for (int i = 0; i < num; i++)
			{
				this.data[i] = (TroopRosterElement)reader.ReadSerializableObject();
			}
		}

		// Token: 0x06002304 RID: 8964 RVA: 0x0009482C File Offset: 0x00092A2C
		public int Sum(Func<TroopRosterElement, int> selector)
		{
			int num = 0;
			for (int i = 0; i < this._count; i++)
			{
				num += selector(this.data[i]);
			}
			return num;
		}

		// Token: 0x06002305 RID: 8965 RVA: 0x00094862 File Offset: 0x00092A62
		public void OnHeroHealthStatusChanged(Hero hero)
		{
			this.UpdateVersion();
			this._totalWoundedHeroes += (hero.IsWounded ? 1 : (-1));
			this.OnNumberChanged(false, true, false);
		}

		// Token: 0x06002306 RID: 8966 RVA: 0x0009488C File Offset: 0x00092A8C
		internal void AddTroopTempXp(CharacterObject troop, int gainedXp)
		{
			int num = this.FindIndexOfTroop(troop);
			if (num >= 0)
			{
				TroopRosterElement[] array = this.data;
				int num2 = num;
				array[num2].TempXp = array[num2].TempXp + gainedXp;
			}
		}

		// Token: 0x06002307 RID: 8967 RVA: 0x000948C0 File Offset: 0x00092AC0
		public void ClearTempXp()
		{
			for (int i = 0; i < this._count; i++)
			{
				this.data[i].TempXp = 0;
			}
		}

		// Token: 0x06002308 RID: 8968 RVA: 0x000948F0 File Offset: 0x00092AF0
		public void UpdateVersion()
		{
			PartyBase ownerParty = this.OwnerParty;
			if (ownerParty != null)
			{
				MobileParty mobileParty = ownerParty.MobileParty;
				if (mobileParty != null)
				{
					mobileParty.UpdateVersionNo();
				}
			}
			int versionNo = this.VersionNo;
			this.VersionNo = versionNo + 1;
		}

		// Token: 0x06002309 RID: 8969 RVA: 0x0009492C File Offset: 0x00092B2C
		public TroopRoster CloneRosterData()
		{
			TroopRoster troopRoster = new TroopRoster();
			if (this.data != null)
			{
				for (int i = 0; i < this.data.Length; i++)
				{
					TroopRosterElement troopRosterElement = this.data[i];
					if (troopRosterElement.Character != null)
					{
						troopRoster.AddToCounts(this.data[i].Character, troopRosterElement.Number, false, troopRosterElement.WoundedNumber, 0, true, -1);
					}
				}
			}
			return troopRoster;
		}

		// Token: 0x04000AB8 RID: 2744
		private static readonly List<TroopRoster> InstanceListForLoadGame = new List<TroopRoster>();

		// Token: 0x04000ABA RID: 2746
		[SaveableField(0)]
		internal TroopRosterElement[] data;

		// Token: 0x04000ABB RID: 2747
		[SaveableField(1)]
		internal int _count;

		// Token: 0x04000ABE RID: 2750
		[CachedData]
		private int _totalRegulars;

		// Token: 0x04000ABF RID: 2751
		[CachedData]
		private int _totalWoundedRegulars;

		// Token: 0x04000AC0 RID: 2752
		[CachedData]
		private int _totalWoundedHeroes;

		// Token: 0x04000AC1 RID: 2753
		[CachedData]
		private int _totalHeroes;

		// Token: 0x04000AC2 RID: 2754
		[SaveableField(8)]
		private bool _isPrisonRoster;

		// Token: 0x04000AC3 RID: 2755
		[CachedData]
		private MBList<TroopRosterElement> _troopRosterElements;

		// Token: 0x04000AC4 RID: 2756
		[CachedData]
		private int _troopRosterElementsVersion;

		// Token: 0x04000AC5 RID: 2757
		[CachedData]
		private bool _isInitialized;
	}
}
