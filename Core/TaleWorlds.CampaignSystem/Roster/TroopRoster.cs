using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Roster
{
	public class TroopRoster : ISerializableObject
	{
		internal static void AutoGeneratedStaticCollectObjectsTroopRoster(object o, List<object> collectedObjects)
		{
			((TroopRoster)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.data);
			collectedObjects.Add(this.OwnerParty);
		}

		internal static object AutoGeneratedGetMemberValueOwnerParty(object o)
		{
			return ((TroopRoster)o).OwnerParty;
		}

		internal static object AutoGeneratedGetMemberValuedata(object o)
		{
			return ((TroopRoster)o).data;
		}

		internal static object AutoGeneratedGetMemberValue_count(object o)
		{
			return ((TroopRoster)o)._count;
		}

		internal static object AutoGeneratedGetMemberValue_isPrisonRoster(object o)
		{
			return ((TroopRoster)o)._isPrisonRoster;
		}

		[CachedData]
		internal NumberChangedCallback NumberChangedCallback { get; set; }

		[SaveableProperty(2)]
		internal PartyBase OwnerParty { get; private set; }

		public int Count
		{
			get
			{
				return this._count;
			}
		}

		[CachedData]
		public int VersionNo { get; private set; }

		public int TotalRegulars
		{
			get
			{
				return this._totalRegulars;
			}
		}

		public int TotalWoundedRegulars
		{
			get
			{
				return this._totalWoundedRegulars;
			}
		}

		public int TotalWoundedHeroes
		{
			get
			{
				return this._totalWoundedHeroes;
			}
		}

		public int TotalHeroes
		{
			get
			{
				return this._totalHeroes;
			}
		}

		public int TotalWounded
		{
			get
			{
				return this._totalWoundedRegulars + this._totalWoundedHeroes;
			}
		}

		public int TotalManCount
		{
			get
			{
				return this._totalRegulars + this._totalHeroes;
			}
		}

		public int TotalHealthyCount
		{
			get
			{
				return this._totalRegulars + this._totalHeroes - (this._totalWoundedRegulars + this._totalWoundedHeroes);
			}
		}

		public bool IsPrisonRoster
		{
			get
			{
				return this._isPrisonRoster;
			}
			set
			{
				this._isPrisonRoster = value;
			}
		}

		public TroopRoster(PartyBase ownerParty)
			: this()
		{
			this.OwnerParty = ownerParty;
		}

		private TroopRoster()
		{
			this.data = new TroopRosterElement[4];
			this._count = 0;
			this._troopRosterElements = new MBList<TroopRosterElement>();
			this.InitializeCachedData();
		}

		public static TroopRoster CreateDummyTroopRoster()
		{
			return new TroopRoster();
		}

		public override int GetHashCode()
		{
			return base.GetHashCode();
		}

		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this._troopRosterElementsVersion = -1;
			this._troopRosterElements = new MBList<TroopRosterElement>();
			TroopRoster.InstanceListForLoadGame.Add(this);
		}

		private void EnsureLength(int length)
		{
			if (length > 0 && (this.data == null || length > this.data.Length))
			{
				int num = 4;
				if (this.data != null)
				{
					num = this.data.Length * 2;
				}
				TroopRosterElement[] array = new TroopRosterElement[num];
				for (int i = 0; i < this._count; i++)
				{
					array[i] = this.data[i];
				}
				this.data = array;
			}
		}

		public static void CalculateCachedStatsOnLoad()
		{
			foreach (TroopRoster troopRoster in TroopRoster.InstanceListForLoadGame)
			{
				troopRoster.InitializeCachedData();
			}
			TroopRoster.InstanceListForLoadGame.Clear();
		}

		private void InitializeCachedData()
		{
			this._isInitialized = true;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			int num4 = 0;
			for (int i = 0; i < this._count; i++)
			{
				TroopRosterElement troopRosterElement = this.data[i];
				if (troopRosterElement.Character.IsHero)
				{
					num++;
					if (troopRosterElement.Character.HeroObject.IsWounded)
					{
						num2++;
					}
				}
				else
				{
					num3 += this.data[i].Number;
					num4 += this.data[i].WoundedNumber;
				}
			}
			this._totalWoundedHeroes = num2;
			this._totalWoundedRegulars = num4;
			this._totalHeroes = num;
			this._totalRegulars = num3;
		}

		public FlattenedTroopRoster ToFlattenedRoster()
		{
			return new FlattenedTroopRoster(this.TotalManCount) { this.GetTroopRoster() };
		}

		public void Add(IEnumerable<FlattenedTroopRosterElement> elementList)
		{
			foreach (FlattenedTroopRosterElement flattenedTroopRosterElement in elementList)
			{
				this.AddToCounts(flattenedTroopRosterElement.Troop, 1, false, flattenedTroopRosterElement.IsWounded ? 1 : 0, flattenedTroopRosterElement.Xp, true, -1);
			}
		}

		public void Add(TroopRoster troopRoster)
		{
			foreach (TroopRosterElement troopRosterElement in troopRoster.GetTroopRoster())
			{
				this.Add(troopRosterElement);
			}
		}

		public void Add(TroopRosterElement troopRosterElement)
		{
			this.AddToCounts(troopRosterElement.Character, troopRosterElement.Number, false, troopRosterElement.WoundedNumber, troopRosterElement.Xp, true, -1);
		}

		public ICollection<TroopRosterElement> RemoveIf(Predicate<TroopRosterElement> match)
		{
			List<TroopRosterElement> list = new List<TroopRosterElement>();
			bool flag = false;
			for (int i = 0; i < this._count; i++)
			{
				if (match(this.data[i]))
				{
					TroopRosterElement elementCopyAtIndex = this.GetElementCopyAtIndex(i);
					list.Add(elementCopyAtIndex);
					this.AddToCountsAtIndex(i, -elementCopyAtIndex.Number, -elementCopyAtIndex.WoundedNumber, -elementCopyAtIndex.Xp, true);
					i--;
					flag = true;
				}
			}
			if (flag)
			{
				this.UpdateVersion();
			}
			return list;
		}

		public int FindIndexOfTroop(CharacterObject character)
		{
			for (int i = 0; i < this._count; i++)
			{
				if (this.data[i].Character == character)
				{
					return i;
				}
			}
			return -1;
		}

		public CharacterObject GetManAtIndexFromFlattenedRosterWithFilter(int indexOfTroop, bool includeHeroes = false, bool countOnlyHealthyOnes = false)
		{
			for (int i = 0; i < this._count; i++)
			{
				if (includeHeroes || !this.data[i].Character.IsHero)
				{
					indexOfTroop -= (countOnlyHealthyOnes ? (this.data[i].Number - this.data[i].WoundedNumber) : this.data[i].Number);
					if (indexOfTroop < 0)
					{
						return this.data[i].Character;
					}
				}
			}
			return null;
		}

		private bool KillOneManRandomly(bool includeHeroes = false)
		{
			CharacterObject characterObject = null;
			int num = (includeHeroes ? (this.TotalManCount - this.TotalWounded) : (this._totalRegulars - this._totalWoundedRegulars));
			bool flag = num > 0;
			while (flag)
			{
				flag = false;
				int num2 = MBRandom.RandomInt(num);
				characterObject = this.GetManAtIndexFromFlattenedRosterWithFilter(num2, includeHeroes, true);
				if (characterObject == null || (!includeHeroes && characterObject.IsHero))
				{
					flag = true;
				}
			}
			if (characterObject != null)
			{
				if (characterObject.IsHero)
				{
					if (characterObject.HeroObject.IsWanderer)
					{
						MakeHeroFugitiveAction.Apply(characterObject.HeroObject);
					}
					else
					{
						characterObject.HeroObject.ChangeState(Hero.CharacterStates.Fugitive);
					}
				}
				this.AddToCounts(characterObject, -1, false, 0, 0, true, -1);
				return true;
			}
			return false;
		}

		public void KillNumberOfMenRandomly(int numberOfMen, bool includeHeroes)
		{
			bool flag = true;
			int num = 0;
			while (num < numberOfMen && flag)
			{
				flag = this.KillOneManRandomly(includeHeroes);
				num++;
			}
		}

		public void WoundNumberOfTroopsRandomly(int numberOfMen)
		{
			for (int i = 0; i < numberOfMen; i++)
			{
				CharacterObject characterObject = null;
				int num = this._totalRegulars - this._totalWoundedRegulars;
				bool flag = num > 0;
				while (flag)
				{
					flag = false;
					int num2 = MBRandom.RandomInt(num);
					characterObject = this.GetManAtIndexFromFlattenedRosterWithFilter(num2, true, false);
					if (characterObject == null || characterObject.IsHero)
					{
						flag = true;
					}
				}
				if (characterObject != null)
				{
					this.WoundTroop(characterObject, 1, default(UniqueTroopDescriptor));
				}
			}
		}

		public int AddToCountsAtIndex(int index, int countChange, int woundedCountChange = 0, int xpChange = 0, bool removeDepleted = true)
		{
			this.UpdateVersion();
			bool flag = false;
			CharacterObject character = this.data[index].Character;
			bool isHero = character.IsHero;
			TroopRosterElement[] array = this.data;
			int num = index;
			array[num].Number = array[num].Number + countChange;
			int num2 = this.data[index].WoundedNumber + woundedCountChange;
			if (num2 > this.data[index].Number)
			{
				woundedCountChange += this.data[index].Number - num2;
			}
			else if (num2 < 0)
			{
				Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRoster.cs", "AddToCountsAtIndex", 426);
			}
			TroopRosterElement[] array2 = this.data;
			int num3 = index;
			array2[num3].WoundedNumber = array2[num3].WoundedNumber + woundedCountChange;
			if (xpChange != 0)
			{
				TroopRosterElement[] array3 = this.data;
				int num4 = index;
				array3[num4].Xp = array3[num4].Xp + xpChange;
			}
			if (this.IsPrisonRoster)
			{
				this.ClampConformity(index);
			}
			else
			{
				this.ClampXp(index);
			}
			if (isHero)
			{
				this._totalHeroes += countChange;
				if (character.HeroObject.IsWounded)
				{
					this._totalWoundedHeroes += countChange;
				}
				if (countChange != 0)
				{
					flag = true;
				}
			}
			else
			{
				this._totalWoundedRegulars += woundedCountChange;
				this._totalRegulars += countChange;
			}
			if (removeDepleted && this.data[index].Number == 0)
			{
				this.RemoveRange(index, index + 1);
				index = -1;
			}
			if (this.OwnerParty != null && isHero)
			{
				if (countChange > 0)
				{
					if (!this.IsPrisonRoster)
					{
						this.OwnerParty.OnHeroAdded(character.HeroObject);
					}
					else
					{
						this.OwnerParty.OnHeroAddedAsPrisoner(character.HeroObject);
					}
				}
				else if (countChange < 0)
				{
					if (!this.IsPrisonRoster)
					{
						this.OwnerParty.OnHeroRemoved(character.HeroObject);
					}
					else
					{
						this.OwnerParty.OnHeroRemovedAsPrisoner(character.HeroObject);
					}
				}
			}
			if (countChange != 0 || woundedCountChange != 0)
			{
				this.OnNumberChanged(countChange != 0, woundedCountChange != 0, flag);
			}
			return index;
		}

		private void RemoveRange(int p, int p2)
		{
			int num = p2 - p;
			for (int i = p2; i < this._count; i++)
			{
				this.data[i - num] = this.data[i];
			}
			for (int j = this._count - num; j < this._count; j++)
			{
				this.data[j].Clear();
			}
			this.UpdateVersion();
			this._count -= num;
		}

		private int AddNewElement(CharacterObject character, bool insertAtFront = false, int insertionIndex = -1)
		{
			int num = this._count + 1;
			this.EnsureLength(num);
			int num2 = ((insertionIndex == -1) ? this._count : insertionIndex);
			if (insertAtFront)
			{
				num2 = 0;
			}
			if (this._count > num2)
			{
				for (int i = this._count; i > num2; i--)
				{
					this.data[i] = this.data[i - 1];
				}
			}
			this.data[num2] = new TroopRosterElement(character);
			this._count = num;
			this.UpdateVersion();
			return num2;
		}

		[Conditional("DEBUG_MORE")]
		public void CheckValidity()
		{
			if (this.data == null)
			{
				return;
			}
			int num = 0;
			for (int i = 0; i < this.data.Length; i++)
			{
				TroopRosterElement troopRosterElement = this.data[i];
				if (troopRosterElement.Character != null)
				{
					int number = troopRosterElement.Number;
					int woundedNumber = troopRosterElement.WoundedNumber;
					num++;
				}
			}
		}

		private void OnNumberChanged(bool numberChanged, bool woundedNumberChanged, bool heroCountChanged)
		{
			NumberChangedCallback numberChangedCallback = this.NumberChangedCallback;
			if (numberChangedCallback == null)
			{
				return;
			}
			numberChangedCallback(numberChanged, woundedNumberChanged, heroCountChanged);
		}

		public int AddToCounts(CharacterObject character, int count, bool insertAtFront = false, int woundedCount = 0, int xpChange = 0, bool removeDepleted = true, int index = -1)
		{
			int num = this.FindIndexOfTroop(character);
			if (num < 0)
			{
				if (index >= 0)
				{
					if (count + woundedCount <= 0)
					{
						Debug.FailedAssert("false", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Roster\\TroopRoster.cs", "AddToCounts", 600);
						return -1;
					}
					num = this.AddNewElement(character, insertAtFront, index);
				}
				else
				{
					if (count + woundedCount <= 0)
					{
						return -1;
					}
					num = this.AddNewElement(character, insertAtFront, -1);
				}
			}
			if (this.AddToCountsAtIndex(num, count, woundedCount, xpChange, removeDepleted) != -1)
			{
				return num;
			}
			return -1;
		}

		public int GetTroopCount(CharacterObject troop)
		{
			int num = this.FindIndexOfTroop(troop);
			if (num >= 0)
			{
				return this.data[num].Number;
			}
			return 0;
		}

		public void RemoveZeroCounts()
		{
			int num = 0;
			for (int i = 0; i < this._count; i++)
			{
				if (this.data[i].Number > 0)
				{
					if (num != i)
					{
						this.data[num] = this.data[i];
					}
					num++;
				}
			}
			for (int j = num; j < this._count; j++)
			{
				this.data[j].Clear();
			}
			this._count = num;
			this.UpdateVersion();
		}

		public TroopRosterElement GetElementCopyAtIndex(int index)
		{
			return this.data[index];
		}

		public void SetElementNumber(int index, int number)
		{
			if (index < this._count)
			{
				this.data[index].Number = number;
				this.UpdateVersion();
				return;
			}
			throw new IndexOutOfRangeException();
		}

		public int GetElementNumber(int index)
		{
			if (index >= 0 && index < this._count)
			{
				return this.data[index].Number;
			}
			return 0;
		}

		public int GetElementNumber(CharacterObject character)
		{
			return this.GetElementNumber(this.FindIndexOfTroop(character));
		}

		public void SetElementWoundedNumber(int index, int number)
		{
			if (index < this._count)
			{
				this.data[index].WoundedNumber = number;
				this.UpdateVersion();
				return;
			}
			throw new IndexOutOfRangeException();
		}

		public int GetElementWoundedNumber(int index)
		{
			if (index < this._count)
			{
				return this.data[index].WoundedNumber;
			}
			throw new IndexOutOfRangeException();
		}

		public void SetElementXp(int index, int number)
		{
			if (index < this._count)
			{
				this.data[index].Xp = number;
				this.UpdateVersion();
				return;
			}
			throw new IndexOutOfRangeException();
		}

		public int GetElementXp(int index)
		{
			if (index < this._count && index >= 0)
			{
				return this.data[index].Xp;
			}
			return 0;
		}

		public int GetElementXp(CharacterObject character)
		{
			return this.GetElementXp(this.FindIndexOfTroop(character));
		}

		public CharacterObject GetCharacterAtIndex(int index)
		{
			if (index < this._count)
			{
				return this.data[index].Character;
			}
			throw new IndexOutOfRangeException();
		}

		public void FillMembersOfRoster(int neededNumber, CharacterObject basicTroop = null)
		{
			int num3;
			for (int num = (from element in this.GetTroopRoster()
				where !element.Character.IsHero
				select element).Sum((TroopRosterElement element) => element.Number); num != neededNumber; num += num3)
			{
				float num2 = MBRandom.RandomFloat * (float)num;
				CharacterObject characterObject = basicTroop;
				foreach (TroopRosterElement troopRosterElement in from element in this.GetTroopRoster()
					where !element.Character.IsHero
					select element)
				{
					num2 -= (float)troopRosterElement.Number;
					if (num2 < 0f)
					{
						characterObject = troopRosterElement.Character;
						break;
					}
				}
				num3 = ((num > neededNumber) ? (-1) : 1);
				this.AddToCounts(characterObject, num3, false, 0, 0, true, -1);
			}
		}

		public void WoundMembersOfRoster(float woundedRatio)
		{
			for (int i = 0; i < this.data.Length; i++)
			{
				TroopRosterElement troopRosterElement = this.data[i];
				if (troopRosterElement.Character != null)
				{
					if (troopRosterElement.Character.IsHero && MBRandom.RandomFloat < woundedRatio)
					{
						this.data[i].Character.HeroObject.MakeWounded(null, KillCharacterAction.KillCharacterActionDetail.None);
					}
					else
					{
						int num = (int)((float)troopRosterElement.Number * woundedRatio);
						this.AddToCounts(this.data[i].Character, 0, false, num, 0, true, -1);
					}
				}
			}
		}

		public void Reset()
		{
			this.Clear();
			this.UpdateVersion();
		}

		public override bool Equals(object obj)
		{
			return this == obj;
		}

		public static bool operator ==(TroopRoster a, TroopRoster b)
		{
			if (a == b)
			{
				return true;
			}
			if (a == null || b == null)
			{
				return false;
			}
			if (a.Count != b.Count)
			{
				return false;
			}
			for (int i = 0; i < a.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = a.GetElementCopyAtIndex(i);
				int num = b.FindIndexOfTroop(elementCopyAtIndex.Character);
				if (num == -1)
				{
					return false;
				}
				TroopRosterElement elementCopyAtIndex2 = b.GetElementCopyAtIndex(num);
				if (elementCopyAtIndex.Character != elementCopyAtIndex2.Character || elementCopyAtIndex.Number != elementCopyAtIndex2.Number)
				{
					return false;
				}
			}
			return true;
		}

		public static bool operator !=(TroopRoster a, TroopRoster b)
		{
			return !(a == b);
		}

		public bool Contains(CharacterObject character)
		{
			for (int i = 0; i < this.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = this.GetElementCopyAtIndex(i);
				if (character == elementCopyAtIndex.Character)
				{
					return true;
				}
			}
			return false;
		}

		public void ValidateTroopListCache()
		{
			if (this._troopRosterElementsVersion != this.VersionNo)
			{
				lock (this)
				{
					if (this._troopRosterElementsVersion != this.VersionNo)
					{
						this._troopRosterElements.Clear();
						this._troopRosterElements.Capacity = Math.Max(this._troopRosterElements.Capacity, this.Count);
						for (int i = 0; i < this.Count; i++)
						{
							this._troopRosterElements.Add(this.GetElementCopyAtIndex(i));
						}
						this._troopRosterElementsVersion = this.VersionNo;
					}
				}
			}
		}

		public MBList<TroopRosterElement> GetTroopRoster()
		{
			this.ValidateTroopListCache();
			return this._troopRosterElements;
		}

		public void Clear()
		{
			for (int i = this._count - 1; i >= 0; i--)
			{
				this.AddToCountsAtIndex(i, -this.data[i].Number, -this.data[i].WoundedNumber, 0, true);
			}
			this.UpdateVersion();
		}

		private void ClampConformity(int index)
		{
			CharacterObject character = this.data[index].Character;
			if (!character.IsHero)
			{
				int num = this.data[index].Number * character.ConformityNeededToRecruitPrisoner;
				int xp = this.data[index].Xp;
				this.data[index].Xp = MBMath.ClampInt(xp, 0, num);
				return;
			}
			this.data[index].Xp = MathF.Max(this.data[index].Xp, 0);
		}

		private void ClampXp(int index)
		{
			CharacterObject character = this.data[index].Character;
			if (!character.IsHero)
			{
				int num = 0;
				for (int i = 0; i < character.UpgradeTargets.Length; i++)
				{
					int upgradeXpCost = character.GetUpgradeXpCost(this.OwnerParty, i);
					if (num < upgradeXpCost)
					{
						num = upgradeXpCost;
					}
				}
				int num2 = MBMath.ClampInt(this.data[index].Xp, 0, this.data[index].Number * num);
				this.data[index].Xp = num2;
				return;
			}
			this.data[index].Xp = MathF.Max(this.data[index].Xp, 0);
		}

		public int AddXpToTroop(int xpAmount, CharacterObject attackerTroop)
		{
			int num = this.FindIndexOfTroop(attackerTroop);
			if (num >= 0)
			{
				return this.AddXpToTroopAtIndex(xpAmount, num);
			}
			return 0;
		}

		public int AddXpToTroopAtIndex(int xpAmount, int index)
		{
			int xp = this.data[index].Xp;
			TroopRosterElement[] array = this.data;
			array[index].Xp = array[index].Xp + xpAmount;
			if (this.IsPrisonRoster)
			{
				this.ClampConformity(index);
			}
			else
			{
				this.ClampXp(index);
			}
			return this.data[index].Xp - xp;
		}

		public void RemoveTroop(CharacterObject troop, int numberToRemove = 1, UniqueTroopDescriptor troopSeed = default(UniqueTroopDescriptor), int xp = 0)
		{
			int num = this.FindIndexOfTroop(troop);
			bool flag = true;
			if (PlayerEncounter.CurrentBattleSimulation != null && !troop.IsHero)
			{
				flag = false;
			}
			this.AddToCountsAtIndex(num, -numberToRemove, 0, troop.IsHero ? 0 : (-xp), flag);
		}

		public void WoundTroop(CharacterObject troop, int numberToWound = 1, UniqueTroopDescriptor troopSeed = default(UniqueTroopDescriptor))
		{
			int num = this.FindIndexOfTroop(troop);
			this.AddToCountsAtIndex(num, 0, numberToWound, 0, true);
		}

		public void SlideTroops(int firstTroopIndex, int newIndex)
		{
			if (firstTroopIndex == -1 || newIndex == -1 || firstTroopIndex == newIndex)
			{
				return;
			}
			if (newIndex >= this.data.Length)
			{
				this.EnsureLength(newIndex + 1);
			}
			TroopRosterElement troopRosterElement = this.data[firstTroopIndex];
			TroopRosterElement troopRosterElement2 = this.data[newIndex];
			if (firstTroopIndex > newIndex)
			{
				for (int i = firstTroopIndex - 1; i > newIndex; i--)
				{
					this.data[i + 1] = this.data[i];
				}
				this.data[newIndex] = troopRosterElement;
				this.data[newIndex + 1] = troopRosterElement2;
			}
			else
			{
				for (int j = firstTroopIndex + 1; j < newIndex; j++)
				{
					this.data[j - 1] = this.data[j];
				}
				this.data[newIndex] = troopRosterElement;
				this.data[newIndex - 1] = troopRosterElement2;
			}
			this.UpdateVersion();
		}

		void ISerializableObject.SerializeTo(IWriter writer)
		{
			writer.WriteInt(this.Count);
			writer.WriteInt(this.VersionNo);
			if (this.data != null)
			{
				writer.WriteInt(this.data.Length);
				foreach (TroopRosterElement troopRosterElement in this.data)
				{
					writer.WriteSerializableObject(troopRosterElement);
				}
				return;
			}
			writer.WriteInt(0);
		}

		void ISerializableObject.DeserializeFrom(IReader reader)
		{
			this._count = reader.ReadInt();
			this.VersionNo = reader.ReadInt();
			int num = reader.ReadInt();
			this.data = new TroopRosterElement[num];
			for (int i = 0; i < num; i++)
			{
				this.data[i] = (TroopRosterElement)reader.ReadSerializableObject();
			}
		}

		public int Sum(Func<TroopRosterElement, int> selector)
		{
			int num = 0;
			for (int i = 0; i < this._count; i++)
			{
				num += selector(this.data[i]);
			}
			return num;
		}

		public void OnHeroHealthStatusChanged(Hero hero)
		{
			this.UpdateVersion();
			this._totalWoundedHeroes += (hero.IsWounded ? 1 : (-1));
			this.OnNumberChanged(false, true, false);
		}

		internal void AddTroopTempXp(CharacterObject troop, int gainedXp)
		{
			int num = this.FindIndexOfTroop(troop);
			if (num >= 0)
			{
				TroopRosterElement[] array = this.data;
				int num2 = num;
				array[num2].TempXp = array[num2].TempXp + gainedXp;
			}
		}

		public void ClearTempXp()
		{
			for (int i = 0; i < this._count; i++)
			{
				this.data[i].TempXp = 0;
			}
		}

		public void UpdateVersion()
		{
			PartyBase ownerParty = this.OwnerParty;
			if (ownerParty != null)
			{
				MobileParty mobileParty = ownerParty.MobileParty;
				if (mobileParty != null)
				{
					mobileParty.UpdateVersionNo();
				}
			}
			int versionNo = this.VersionNo;
			this.VersionNo = versionNo + 1;
		}

		public TroopRoster CloneRosterData()
		{
			TroopRoster troopRoster = new TroopRoster();
			if (this.data != null)
			{
				for (int i = 0; i < this.data.Length; i++)
				{
					TroopRosterElement troopRosterElement = this.data[i];
					if (troopRosterElement.Character != null)
					{
						troopRoster.AddToCounts(this.data[i].Character, troopRosterElement.Number, false, troopRosterElement.WoundedNumber, 0, true, -1);
					}
				}
			}
			return troopRoster;
		}

		private static readonly List<TroopRoster> InstanceListForLoadGame = new List<TroopRoster>();

		[SaveableField(0)]
		internal TroopRosterElement[] data;

		[SaveableField(1)]
		internal int _count;

		[CachedData]
		private int _totalRegulars;

		[CachedData]
		private int _totalWoundedRegulars;

		[CachedData]
		private int _totalWoundedHeroes;

		[CachedData]
		private int _totalHeroes;

		[SaveableField(8)]
		private bool _isPrisonRoster;

		[CachedData]
		private MBList<TroopRosterElement> _troopRosterElements;

		[CachedData]
		private int _troopRosterElementsVersion;

		[CachedData]
		private bool _isInitialized;
	}
}
