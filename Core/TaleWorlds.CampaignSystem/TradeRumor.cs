using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	public class TradeRumor
	{
		internal static void AutoGeneratedStaticCollectObjectsTradeRumor(object o, List<object> collectedObjects)
		{
			((TradeRumor)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.Settlement);
			collectedObjects.Add(this.ItemCategory);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.RumorEndTime, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueRumorEndTime(object o)
		{
			return ((TradeRumor)o).RumorEndTime;
		}

		internal static object AutoGeneratedGetMemberValueSettlement(object o)
		{
			return ((TradeRumor)o).Settlement;
		}

		internal static object AutoGeneratedGetMemberValueItemCategory(object o)
		{
			return ((TradeRumor)o).ItemCategory;
		}

		internal static object AutoGeneratedGetMemberValueBuyPrice(object o)
		{
			return ((TradeRumor)o).BuyPrice;
		}

		internal static object AutoGeneratedGetMemberValueSellPrice(object o)
		{
			return ((TradeRumor)o).SellPrice;
		}

		[SaveableProperty(4)]
		public CampaignTime RumorEndTime { get; private set; }

		public bool IsCompatable(ItemObject item)
		{
			return item == this.ItemCategory;
		}

		public bool IsExpired()
		{
			return this.RumorEndTime.IsPast;
		}

		public TradeRumor(Settlement settlement, ItemObject itemCategory, int buyPrice, int sellPrice, int rumorLife)
		{
			this.Settlement = settlement;
			this.ItemCategory = itemCategory;
			this.BuyPrice = buyPrice;
			this.SellPrice = sellPrice;
			this.RumorEndTime = CampaignTime.DaysFromNow((float)rumorLife);
		}

		[SaveableField(0)]
		public readonly Settlement Settlement;

		[SaveableField(1)]
		public readonly ItemObject ItemCategory;

		[SaveableField(2)]
		public readonly int BuyPrice;

		[SaveableField(3)]
		public readonly int SellPrice;
	}
}
