using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002DA RID: 730
	public class DeclareWarLogEntry : LogEntry, IEncyclopediaLog, IChatNotification, IWarLog
	{
		// Token: 0x06002A63 RID: 10851 RVA: 0x000B40A3 File Offset: 0x000B22A3
		internal static void AutoGeneratedStaticCollectObjectsDeclareWarLogEntry(object o, List<object> collectedObjects)
		{
			((DeclareWarLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002A64 RID: 10852 RVA: 0x000B40B1 File Offset: 0x000B22B1
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Faction1);
			collectedObjects.Add(this.Faction2);
		}

		// Token: 0x06002A65 RID: 10853 RVA: 0x000B40D2 File Offset: 0x000B22D2
		internal static object AutoGeneratedGetMemberValueFaction1(object o)
		{
			return ((DeclareWarLogEntry)o).Faction1;
		}

		// Token: 0x06002A66 RID: 10854 RVA: 0x000B40DF File Offset: 0x000B22DF
		internal static object AutoGeneratedGetMemberValueFaction2(object o)
		{
			return ((DeclareWarLogEntry)o).Faction2;
		}

		// Token: 0x17000A64 RID: 2660
		// (get) Token: 0x06002A67 RID: 10855 RVA: 0x000B40EC File Offset: 0x000B22EC
		public bool IsVisibleNotification
		{
			get
			{
				return true;
			}
		}

		// Token: 0x17000A65 RID: 2661
		// (get) Token: 0x06002A68 RID: 10856 RVA: 0x000B40EF File Offset: 0x000B22EF
		public override ChatNotificationType NotificationType
		{
			get
			{
				return base.AdversityNotification(this.Faction1, this.Faction2);
			}
		}

		// Token: 0x06002A69 RID: 10857 RVA: 0x000B4103 File Offset: 0x000B2303
		public DeclareWarLogEntry(IFaction faction1, IFaction faction2)
		{
			this.Faction1 = faction1;
			this.Faction2 = faction2;
		}

		// Token: 0x06002A6A RID: 10858 RVA: 0x000B411C File Offset: 0x000B231C
		public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
		{
			IFaction faction = stance.Faction1;
			IFaction faction2 = stance.Faction2;
			effector = faction;
			effected = faction2;
			return (faction == this.Faction1 && faction2 == this.Faction2) || (faction == this.Faction2 && faction2 == this.Faction1);
		}

		// Token: 0x06002A6B RID: 10859 RVA: 0x000B4168 File Offset: 0x000B2368
		public TextObject GetNotificationText()
		{
			TextObject textObject = GameTexts.FindText("str_factions_declare_war_news", null);
			textObject.SetTextVariable("RULER_NAME", this.Faction1.Leader.Name);
			textObject.SetTextVariable("FACTION1_NAME", this.Faction1.EncyclopediaLinkWithName);
			textObject.SetTextVariable("FACTION2_NAME", this.Faction2.EncyclopediaLinkWithName);
			return textObject;
		}

		// Token: 0x06002A6C RID: 10860 RVA: 0x000B41CC File Offset: 0x000B23CC
		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			score = ImportanceEnum.Zero;
			comment = "";
			if (this.Faction1.Leader.Clan.IsRebelClan && talkTroop.Clan == this.Faction1)
			{
				score = ImportanceEnum.MatterOfLifeAndDeath;
				if (findString)
				{
					comment = "str_comment_we_have_rebelled";
				}
			}
		}

		// Token: 0x06002A6D RID: 10861 RVA: 0x000B4218 File Offset: 0x000B2418
		public override int GetAsRumor(Settlement talkSettlement, ref TextObject comment)
		{
			int num = 0;
			if (this.Faction1 == talkSettlement.MapFaction)
			{
				comment = new TextObject("{=mrmxEklL}So looks like it's war with {ENEMY_NAME}. Well, I don't deny they deserve it, but it will fall hardest on the poor folk like us.", null);
				comment.SetTextVariable("ENEMY_NAME", FactionHelper.GetTermUsedByOtherFaction(this.Faction2, talkSettlement.MapFaction, false));
				return 10;
			}
			if (this.Faction2 == talkSettlement.MapFaction)
			{
				comment = new TextObject("{=SVebFiHQ}So looks like {ENEMY_NAME} want war with us. Well, I say we show the bastards who we are!", null);
				comment.SetTextVariable("ENEMY_NAME", FactionHelper.GetTermUsedByOtherFaction(this.Faction1, talkSettlement.MapFaction, false));
				return 10;
			}
			return num;
		}

		// Token: 0x06002A6E RID: 10862 RVA: 0x000B42A2 File Offset: 0x000B24A2
		public override string ToString()
		{
			return this.GetEncyclopediaText().ToString();
		}

		// Token: 0x06002A6F RID: 10863 RVA: 0x000B42AF File Offset: 0x000B24AF
		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.Faction1 || obj == this.Faction2;
		}

		// Token: 0x06002A70 RID: 10864 RVA: 0x000B42D0 File Offset: 0x000B24D0
		public TextObject GetEncyclopediaText()
		{
			TextObject textObject = GameTexts.FindText("str_factions_declare_war_news", null);
			textObject.SetTextVariable("RULER_NAME", this.Faction1.Leader.EncyclopediaLinkWithName);
			textObject.SetTextVariable("FACTION1_NAME", this.Faction1.EncyclopediaLinkWithName);
			textObject.SetTextVariable("FACTION2_NAME", this.Faction2.EncyclopediaLinkWithName);
			return textObject;
		}

		// Token: 0x04000CCD RID: 3277
		[SaveableField(190)]
		public readonly IFaction Faction1;

		// Token: 0x04000CCE RID: 3278
		[SaveableField(191)]
		public readonly IFaction Faction2;
	}
}
