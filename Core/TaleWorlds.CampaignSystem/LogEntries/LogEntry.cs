using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002C8 RID: 712
	public abstract class LogEntry
	{
		// Token: 0x0600296F RID: 10607 RVA: 0x000B15F1 File Offset: 0x000AF7F1
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.GameTime, collectedObjects);
		}

		// Token: 0x06002970 RID: 10608 RVA: 0x000B1604 File Offset: 0x000AF804
		internal static object AutoGeneratedGetMemberValueId(object o)
		{
			return ((LogEntry)o).Id;
		}

		// Token: 0x06002971 RID: 10609 RVA: 0x000B1616 File Offset: 0x000AF816
		internal static object AutoGeneratedGetMemberValueGameTime(object o)
		{
			return ((LogEntry)o).GameTime;
		}

		// Token: 0x17000A43 RID: 2627
		// (get) Token: 0x06002972 RID: 10610 RVA: 0x000B1628 File Offset: 0x000AF828
		// (set) Token: 0x06002973 RID: 10611 RVA: 0x000B1630 File Offset: 0x000AF830
		[SaveableProperty(0)]
		public long Id { get; private set; }

		// Token: 0x17000A44 RID: 2628
		// (get) Token: 0x06002974 RID: 10612 RVA: 0x000B1639 File Offset: 0x000AF839
		// (set) Token: 0x06002975 RID: 10613 RVA: 0x000B1641 File Offset: 0x000AF841
		[SaveableProperty(1)]
		public CampaignTime GameTime { get; private set; }

		// Token: 0x17000A45 RID: 2629
		// (get) Token: 0x06002976 RID: 10614 RVA: 0x000B164A File Offset: 0x000AF84A
		public virtual CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Days(7f);
			}
		}

		// Token: 0x17000A46 RID: 2630
		// (get) Token: 0x06002977 RID: 10615 RVA: 0x000B1656 File Offset: 0x000AF856
		public virtual ChatNotificationType NotificationType
		{
			get
			{
				return ChatNotificationType.Default;
			}
		}

		// Token: 0x06002978 RID: 10616 RVA: 0x000B165C File Offset: 0x000AF85C
		protected ChatNotificationType MilitaryNotification(IFaction benefiter, IFaction affected)
		{
			if (benefiter == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanPositive;
			}
			if (affected == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanNegative;
			}
			if (((benefiter != null) ? benefiter.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionPositive;
			}
			if (((affected != null) ? affected.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionNegative;
			}
			if (affected != null && affected.IsAtWarWith(Clan.PlayerClan.MapFaction))
			{
				return ChatNotificationType.PlayerFactionIndirectPositive;
			}
			if (benefiter != null && benefiter.IsAtWarWith(Clan.PlayerClan.MapFaction))
			{
				return ChatNotificationType.PlayerFactionIndirectNegative;
			}
			return ChatNotificationType.Neutral;
		}

		// Token: 0x06002979 RID: 10617 RVA: 0x000B16E4 File Offset: 0x000AF8E4
		protected ChatNotificationType DiplomaticNotification(IFaction faction1, IFaction faction2)
		{
			if (faction1 == Clan.PlayerClan || faction2 == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanPositive;
			}
			if (faction1 == Clan.PlayerClan.MapFaction || faction2 == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionPositive;
			}
			if (faction1 != null && Clan.PlayerClan.MapFaction.IsAtWarWith(faction1))
			{
				return ChatNotificationType.PlayerFactionIndirectNegative;
			}
			if (faction2 != null && Clan.PlayerClan.MapFaction.IsAtWarWith(faction2))
			{
				return ChatNotificationType.PlayerFactionIndirectNegative;
			}
			return ChatNotificationType.PlayerFactionIndirectPositive;
		}

		// Token: 0x0600297A RID: 10618 RVA: 0x000B1754 File Offset: 0x000AF954
		protected ChatNotificationType AdversityNotification(IFaction faction1, IFaction faction2)
		{
			if (faction1 == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanNegative;
			}
			if (faction2 == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanNegative;
			}
			if (((faction1 != null) ? faction1.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionNegative;
			}
			if (((faction2 != null) ? faction2.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionNegative;
			}
			return ChatNotificationType.Neutral;
		}

		// Token: 0x0600297B RID: 10619 RVA: 0x000B17AA File Offset: 0x000AF9AA
		protected ChatNotificationType PoliticalNotification(IFaction faction)
		{
			if (faction == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanPolitical;
			}
			if (((faction != null) ? faction.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionPolitical;
			}
			return ChatNotificationType.Political;
		}

		// Token: 0x0600297C RID: 10620 RVA: 0x000B17D4 File Offset: 0x000AF9D4
		protected ChatNotificationType CivilianNotification(IFaction faction)
		{
			if (faction == Clan.PlayerClan)
			{
				return ChatNotificationType.PlayerClanCivilian;
			}
			if (((faction != null) ? faction.MapFaction : null) == Clan.PlayerClan.MapFaction)
			{
				return ChatNotificationType.PlayerFactionCivilian;
			}
			return ChatNotificationType.Civilian;
		}

		// Token: 0x0600297D RID: 10621 RVA: 0x000B17FC File Offset: 0x000AF9FC
		public static void AddLogEntry(LogEntry logEntry)
		{
			logEntry.GameTime = CampaignTime.Now;
			LogEntryHistory logEntryHistory = Campaign.Current.LogEntryHistory;
			long num = logEntryHistory.LastAddedIndex + 1L;
			logEntryHistory.LastAddedIndex = num;
			logEntry.Id = num;
			Campaign.Current.LogEntryHistory.AddActionLog(logEntry, false);
		}

		// Token: 0x0600297E RID: 10622 RVA: 0x000B1848 File Offset: 0x000AFA48
		public static void AddLogEntry(LogEntry logEntry, CampaignTime gameTime)
		{
			logEntry.GameTime = gameTime;
			LogEntryHistory logEntryHistory = Campaign.Current.LogEntryHistory;
			long num = logEntryHistory.LastAddedIndex + 1L;
			logEntryHistory.LastAddedIndex = num;
			logEntry.Id = num;
			Campaign.Current.LogEntryHistory.AddActionLog(logEntry, true);
		}

		// Token: 0x0600297F RID: 10623 RVA: 0x000B188E File Offset: 0x000AFA8E
		public virtual ImportanceEnum GetImportanceForClan(Clan clan)
		{
			return ImportanceEnum.Zero;
		}

		// Token: 0x06002980 RID: 10624 RVA: 0x000B1891 File Offset: 0x000AFA91
		public virtual void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			comment = "";
			score = ImportanceEnum.Zero;
		}

		// Token: 0x06002981 RID: 10625 RVA: 0x000B189E File Offset: 0x000AFA9E
		public virtual int GetAsRumor(Settlement settlement, ref TextObject comment)
		{
			return 0;
		}

		// Token: 0x06002982 RID: 10626 RVA: 0x000B18A1 File Offset: 0x000AFAA1
		public virtual TextObject GetHistoricComment(Hero talkTroop)
		{
			return TextObject.Empty;
		}

		// Token: 0x06002983 RID: 10627 RVA: 0x000B18A8 File Offset: 0x000AFAA8
		public virtual int AsReasonForEnmity(Hero referenceHero1, Hero referenceHero2)
		{
			return 0;
		}

		// Token: 0x06002984 RID: 10628 RVA: 0x000B18AB File Offset: 0x000AFAAB
		public virtual int GetValueAsPoliticsAbuseOfPower(Hero referenceTroop, Hero liege)
		{
			return 0;
		}

		// Token: 0x06002985 RID: 10629 RVA: 0x000B18AE File Offset: 0x000AFAAE
		public virtual int GetValueAsPoliticsSlightedClan(Hero referenceTroop, Hero liege)
		{
			return 0;
		}

		// Token: 0x06002986 RID: 10630 RVA: 0x000B18B1 File Offset: 0x000AFAB1
		public virtual int GetValueAsPoliticsShowedWeakness(Hero referenceTroop, Hero liege)
		{
			return 0;
		}

		// Token: 0x04000C92 RID: 3218
		protected const uint NotificationDefaultTextColor = 0U;
	}
}
