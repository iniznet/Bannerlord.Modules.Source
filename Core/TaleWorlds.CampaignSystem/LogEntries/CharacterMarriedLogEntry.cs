using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class CharacterMarriedLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
	{
		internal static void AutoGeneratedStaticCollectObjectsCharacterMarriedLogEntry(object o, List<object> collectedObjects)
		{
			((CharacterMarriedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.MarriedHero);
			collectedObjects.Add(this.MarriedTo);
		}

		internal static object AutoGeneratedGetMemberValueMarriedHero(object o)
		{
			return ((CharacterMarriedLogEntry)o).MarriedHero;
		}

		internal static object AutoGeneratedGetMemberValueMarriedTo(object o)
		{
			return ((CharacterMarriedLogEntry)o).MarriedTo;
		}

		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(240f);
			}
		}

		public override ChatNotificationType NotificationType
		{
			get
			{
				return base.DiplomaticNotification(this.MarriedHero.Clan, this.MarriedTo.Clan);
			}
		}

		public bool IsVisibleNotification
		{
			get
			{
				return this.MarriedHero.CharacterObject.IsHero && this.MarriedTo.CharacterObject.IsHero;
			}
		}

		public CharacterMarriedLogEntry(Hero marriedHero, Hero marriedTo)
		{
			this.MarriedHero = marriedHero;
			this.MarriedTo = marriedTo;
		}

		public override string ToString()
		{
			return this.GetEncyclopediaText().ToString();
		}

		public TextObject GetNotificationText()
		{
			TextObject textObject = GameTexts.FindText("str_hero_married_hero", null);
			StringHelpers.SetCharacterProperties("MARRIED_TO", this.MarriedTo.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("MARRIED_HERO", this.MarriedHero.CharacterObject, textObject, false);
			return textObject;
		}

		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.MarriedHero || obj == this.MarriedTo;
		}

		public TextObject GetEncyclopediaText()
		{
			return this.GetNotificationText();
		}

		[SaveableField(130)]
		public readonly Hero MarriedHero;

		[SaveableField(131)]
		public readonly Hero MarriedTo;
	}
}
