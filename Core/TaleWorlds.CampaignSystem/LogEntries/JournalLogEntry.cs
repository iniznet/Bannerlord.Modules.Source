using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Issues;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class JournalLogEntry : LogEntry
	{
		internal static void AutoGeneratedStaticCollectObjectsJournalLogEntry(object o, List<object> collectedObjects)
		{
			((JournalLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Title);
			collectedObjects.Add(this.RelatedHero);
			collectedObjects.Add(this.Antagonist);
			collectedObjects.Add(this._entries);
			collectedObjects.Add(this._relatedObjectIds);
		}

		internal static object AutoGeneratedGetMemberValueTitle(object o)
		{
			return ((JournalLogEntry)o).Title;
		}

		internal static object AutoGeneratedGetMemberValueRelatedHero(object o)
		{
			return ((JournalLogEntry)o).RelatedHero;
		}

		internal static object AutoGeneratedGetMemberValueAntagonist(object o)
		{
			return ((JournalLogEntry)o).Antagonist;
		}

		internal static object AutoGeneratedGetMemberValueIsSpecial(object o)
		{
			return ((JournalLogEntry)o).IsSpecial;
		}

		internal static object AutoGeneratedGetMemberValue_entries(object o)
		{
			return ((JournalLogEntry)o)._entries;
		}

		internal static object AutoGeneratedGetMemberValue_lastIssueStatus(object o)
		{
			return ((JournalLogEntry)o)._lastIssueStatus;
		}

		internal static object AutoGeneratedGetMemberValue_questCompletionDetail(object o)
		{
			return ((JournalLogEntry)o)._questCompletionDetail;
		}

		internal static object AutoGeneratedGetMemberValue_relatedObjectIds(object o)
		{
			return ((JournalLogEntry)o)._relatedObjectIds;
		}

		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				if (!this.IsSpecial)
				{
					return CampaignTime.Years(1f);
				}
				return CampaignTime.Years(10000f);
			}
		}

		public JournalLogEntry(TextObject title, Hero relatedHero, Hero antagonist, bool isSpecial, params MBObjectBase[] relatedObjects)
		{
			this.Title = title;
			this.RelatedHero = relatedHero;
			this.Antagonist = antagonist;
			this._lastIssueStatus = IssueBase.IssueUpdateDetails.None;
			this._questCompletionDetail = QuestBase.QuestCompleteDetails.Invalid;
			this.IsSpecial = isSpecial;
			this._relatedObjectIds = new string[relatedObjects.Length];
			for (int i = 0; i < relatedObjects.Length; i++)
			{
				this._relatedObjectIds[i] = relatedObjects[i].StringId;
			}
		}

		public bool IsRelatedTo(MBObjectBase obj)
		{
			return this._relatedObjectIds.Contains(obj.StringId);
		}

		public IEnumerable<JournalLog> GetEntries()
		{
			foreach (JournalLog journalLog in this._entries)
			{
				yield return journalLog;
			}
			List<JournalLog>.Enumerator enumerator = default(List<JournalLog>.Enumerator);
			yield break;
			yield break;
		}

		public void Update(MBReadOnlyList<JournalLog> entries, IssueBase.IssueUpdateDetails issueStatus = IssueBase.IssueUpdateDetails.None)
		{
			this._entries = entries.ToList<JournalLog>();
			if (issueStatus != IssueBase.IssueUpdateDetails.None)
			{
				this._lastIssueStatus = issueStatus;
			}
		}

		public void Update(MBReadOnlyList<JournalLog> entries, QuestBase.QuestCompleteDetails questCompletionDetail)
		{
			this._entries = entries.ToList<JournalLog>();
			this._questCompletionDetail = questCompletionDetail;
		}

		public bool IsEndedUnsuccessfully()
		{
			if (this._lastIssueStatus != IssueBase.IssueUpdateDetails.None)
			{
				return this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueCancel || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFail || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueTimedOut || this._lastIssueStatus == IssueBase.IssueUpdateDetails.SentTroopsFailedQuest || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedWithBetrayal;
			}
			return this._questCompletionDetail == QuestBase.QuestCompleteDetails.Cancel || this._questCompletionDetail == QuestBase.QuestCompleteDetails.Fail || this._questCompletionDetail == QuestBase.QuestCompleteDetails.FailWithBetrayal || this._questCompletionDetail == QuestBase.QuestCompleteDetails.Timeout;
		}

		public bool IsEnded()
		{
			if (this._lastIssueStatus != IssueBase.IssueUpdateDetails.None)
			{
				return this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueCancel || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFail || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueTimedOut || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedWithBetrayal || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedByAILord || this._lastIssueStatus == IssueBase.IssueUpdateDetails.SentTroopsFinishedQuest || this._lastIssueStatus == IssueBase.IssueUpdateDetails.SentTroopsFailedQuest || this._lastIssueStatus == IssueBase.IssueUpdateDetails.IssueFinishedWithSuccess;
			}
			return this._questCompletionDetail > QuestBase.QuestCompleteDetails.Invalid;
		}

		public override string ToString()
		{
			return "Quest status change";
		}

		[SaveableField(10)]
		public readonly TextObject Title;

		[SaveableField(20)]
		public readonly Hero RelatedHero;

		[SaveableField(30)]
		public readonly Hero Antagonist;

		[SaveableField(40)]
		private List<JournalLog> _entries;

		[SaveableField(50)]
		public readonly bool IsSpecial;

		[SaveableField(61)]
		private IssueBase.IssueUpdateDetails _lastIssueStatus;

		[SaveableField(70)]
		private QuestBase.QuestCompleteDetails _questCompletionDetail;

		[SaveableField(80)]
		private readonly string[] _relatedObjectIds;
	}
}
