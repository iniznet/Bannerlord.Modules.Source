using System;
using System.Collections.Generic;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class MercenaryClanChangedKingdomLogEntry : LogEntry, IChatNotification, IWarLog
	{
		internal static void AutoGeneratedStaticCollectObjectsMercenaryClanChangedKingdomLogEntry(object o, List<object> collectedObjects)
		{
			((MercenaryClanChangedKingdomLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Clan);
			collectedObjects.Add(this.OldKingdom);
			collectedObjects.Add(this.NewKingdom);
		}

		internal static object AutoGeneratedGetMemberValueClan(object o)
		{
			return ((MercenaryClanChangedKingdomLogEntry)o).Clan;
		}

		internal static object AutoGeneratedGetMemberValueOldKingdom(object o)
		{
			return ((MercenaryClanChangedKingdomLogEntry)o).OldKingdom;
		}

		internal static object AutoGeneratedGetMemberValueNewKingdom(object o)
		{
			return ((MercenaryClanChangedKingdomLogEntry)o).NewKingdom;
		}

		public bool IsVisibleNotification
		{
			get
			{
				return true;
			}
		}

		public MercenaryClanChangedKingdomLogEntry(Clan clan, Kingdom oldKingdom, Kingdom newKingdom)
		{
			this.Clan = clan;
			this.OldKingdom = oldKingdom;
			this.NewKingdom = newKingdom;
		}

		public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
		{
			IFaction faction = stance.Faction1;
			IFaction faction2 = stance.Faction2;
			Kingdom newKingdom = this.NewKingdom;
			effector = ((newKingdom != null) ? newKingdom.MapFaction : null);
			Kingdom oldKingdom = this.OldKingdom;
			effected = ((oldKingdom != null) ? oldKingdom.MapFaction : null);
			return this.NewKingdom == faction2 || this.NewKingdom == faction;
		}

		public override string ToString()
		{
			return this.GetNotificationText().ToString();
		}

		public override ChatNotificationType NotificationType
		{
			get
			{
				return base.MilitaryNotification(this.NewKingdom, this.OldKingdom);
			}
		}

		public TextObject GetNotificationText()
		{
			if (this.OldKingdom == null && this.NewKingdom != null)
			{
				TextObject textObject = GameTexts.FindText("str_notification_mercenary_contract", null);
				textObject.SetTextVariable("CLAN", this.Clan.Name);
				textObject.SetTextVariable("KINGDOM", this.NewKingdom.InformalName);
				return textObject;
			}
			if (this.OldKingdom != null && this.NewKingdom == null)
			{
				TextObject textObject2 = GameTexts.FindText("str_notification_mercenary_contract_end", null);
				textObject2.SetTextVariable("CLAN", this.Clan.Name);
				textObject2.SetTextVariable("KINGDOM", this.OldKingdom.InformalName);
				return textObject2;
			}
			if (this.OldKingdom != null && this.NewKingdom != null)
			{
				TextObject textObject3 = GameTexts.FindText("str_notification_mercenary_contract", null);
				textObject3.SetTextVariable("CLAN", this.Clan.Name);
				textObject3.SetTextVariable("KINGDOM", this.NewKingdom.InformalName);
				return textObject3;
			}
			return TextObject.Empty;
		}

		[SaveableField(250)]
		public readonly Clan Clan;

		[SaveableField(251)]
		public readonly Kingdom OldKingdom;

		[SaveableField(252)]
		public readonly Kingdom NewKingdom;
	}
}
