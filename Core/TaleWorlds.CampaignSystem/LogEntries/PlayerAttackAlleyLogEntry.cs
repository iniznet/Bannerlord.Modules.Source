using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class PlayerAttackAlleyLogEntry : LogEntry
	{
		internal static void AutoGeneratedStaticCollectObjectsPlayerAttackAlleyLogEntry(object o, List<object> collectedObjects)
		{
			((PlayerAttackAlleyLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.CommonAreaOwner);
			collectedObjects.Add(this.Location);
		}

		internal static object AutoGeneratedGetMemberValueCommonAreaOwner(object o)
		{
			return ((PlayerAttackAlleyLogEntry)o).CommonAreaOwner;
		}

		internal static object AutoGeneratedGetMemberValueLocation(object o)
		{
			return ((PlayerAttackAlleyLogEntry)o).Location;
		}

		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(1f);
			}
		}

		public PlayerAttackAlleyLogEntry(Hero allyOwner, Settlement location)
		{
			this.CommonAreaOwner = allyOwner;
			this.Location = location;
		}

		public override ImportanceEnum GetImportanceForClan(Clan clan)
		{
			return ImportanceEnum.SlightlyImportant;
		}

		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			score = ImportanceEnum.Zero;
			comment = "";
			if (this.CommonAreaOwner == talkTroop)
			{
				score = ImportanceEnum.QuiteImportant;
				if (findString)
				{
					comment = "str_comment_common_area_fight_owner";
					return;
				}
			}
			else if (talkTroop.HomeSettlement == this.Location)
			{
				score = ImportanceEnum.ReasonablyImportant;
				if (findString)
				{
					MBTextManager.SetTextVariable("COMMON_AREA_OWNER", this.CommonAreaOwner.Name, false);
					comment = "str_comment_common_area_fight_other";
				}
			}
		}

		public override string ToString()
		{
			TextObject textObject = new TextObject("{=!}Player attacked to common area of {OWNER_HERO} in {SETTLEMENT}.", null);
			textObject.SetTextVariable("OWNER_HERO", this.CommonAreaOwner.Name);
			textObject.SetTextVariable("SETTLEMENT", this.Location.Name);
			return textObject.ToString();
		}

		[SaveableField(270)]
		public readonly Hero CommonAreaOwner;

		[SaveableField(271)]
		public readonly Settlement Location;
	}
}
