using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class RebellionStartedLogEntry : LogEntry, IChatNotification
	{
		internal static void AutoGeneratedStaticCollectObjectsRebellionStartedLogEntry(object o, List<object> collectedObjects)
		{
			((RebellionStartedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Settlement);
		}

		internal static object AutoGeneratedGetMemberValueSettlement(object o)
		{
			return ((RebellionStartedLogEntry)o).Settlement;
		}

		internal static object AutoGeneratedGetMemberValue_isVisibleNotification(object o)
		{
			return ((RebellionStartedLogEntry)o)._isVisibleNotification;
		}

		public bool IsVisibleNotification
		{
			get
			{
				return this._isVisibleNotification;
			}
		}

		public override ChatNotificationType NotificationType
		{
			get
			{
				return base.MilitaryNotification(null, this.Settlement.OwnerClan);
			}
		}

		public RebellionStartedLogEntry(Settlement settlement, Clan oldOwnerCLan)
		{
			this.Settlement = settlement;
			this._isVisibleNotification = oldOwnerCLan == Clan.PlayerClan || (oldOwnerCLan.Kingdom != null && oldOwnerCLan.Kingdom == Clan.PlayerClan.Kingdom);
		}

		public override string ToString()
		{
			return this.GetNotificationText().ToString();
		}

		public TextObject GetNotificationText()
		{
			TextObject textObject = new TextObject("{=fbsFZWhb}Rebels in {SETTLEMENT} have taken the ownership of the settlement.", null);
			textObject.SetTextVariable("SETTLEMENT", this.Settlement.Name);
			return textObject;
		}

		[SaveableField(310)]
		public readonly Settlement Settlement;

		[SaveableField(311)]
		private readonly bool _isVisibleNotification;
	}
}
