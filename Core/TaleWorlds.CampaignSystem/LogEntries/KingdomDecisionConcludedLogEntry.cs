using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Election;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class KingdomDecisionConcludedLogEntry : LogEntry, IChatNotification
	{
		internal static void AutoGeneratedStaticCollectObjectsKingdomDecisionConcludedLogEntry(object o, List<object> collectedObjects)
		{
			((KingdomDecisionConcludedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Kingdom);
			collectedObjects.Add(this._notificationText);
		}

		internal static object AutoGeneratedGetMemberValueKingdom(object o)
		{
			return ((KingdomDecisionConcludedLogEntry)o).Kingdom;
		}

		internal static object AutoGeneratedGetMemberValue_isVisibleNotification(object o)
		{
			return ((KingdomDecisionConcludedLogEntry)o)._isVisibleNotification;
		}

		internal static object AutoGeneratedGetMemberValue_notificationText(object o)
		{
			return ((KingdomDecisionConcludedLogEntry)o)._notificationText;
		}

		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(1f);
			}
		}

		public bool IsVisibleNotification
		{
			get
			{
				return this._isVisibleNotification;
			}
		}

		public override ChatNotificationType NotificationType
		{
			get
			{
				return base.PoliticalNotification(this.Kingdom);
			}
		}

		public KingdomDecisionConcludedLogEntry(KingdomDecision decision, DecisionOutcome chosenOutcome, bool isPlayerInvolved)
		{
			this.Kingdom = decision.Kingdom;
			this._isVisibleNotification = !isPlayerInvolved;
			this._notificationText = decision.GetChosenOutcomeText(chosenOutcome, decision.SupportStatusOfFinalDecision, true);
		}

		public override string ToString()
		{
			return this.GetNotificationText().ToString();
		}

		public TextObject GetNotificationText()
		{
			return this._notificationText;
		}

		[SaveableField(1)]
		public readonly Kingdom Kingdom;

		[SaveableField(3)]
		private readonly bool _isVisibleNotification;

		[SaveableField(4)]
		private readonly TextObject _notificationText;
	}
}
