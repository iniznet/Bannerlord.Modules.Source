using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class TakePrisonerLogEntry : LogEntry, IEncyclopediaLog, IChatNotification, IWarLog
	{
		internal static void AutoGeneratedStaticCollectObjectsTakePrisonerLogEntry(object o, List<object> collectedObjects)
		{
			((TakePrisonerLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.CapturerPartyMapFaction);
			collectedObjects.Add(this.Prisoner);
			collectedObjects.Add(this.CapturerSettlement);
			collectedObjects.Add(this.CapturerMobilePartyLeader);
			collectedObjects.Add(this.CapturerHero);
		}

		internal static object AutoGeneratedGetMemberValueCapturerPartyMapFaction(object o)
		{
			return ((TakePrisonerLogEntry)o).CapturerPartyMapFaction;
		}

		internal static object AutoGeneratedGetMemberValuePrisoner(object o)
		{
			return ((TakePrisonerLogEntry)o).Prisoner;
		}

		internal static object AutoGeneratedGetMemberValueCapturerSettlement(object o)
		{
			return ((TakePrisonerLogEntry)o).CapturerSettlement;
		}

		internal static object AutoGeneratedGetMemberValueCapturerMobilePartyLeader(object o)
		{
			return ((TakePrisonerLogEntry)o).CapturerMobilePartyLeader;
		}

		internal static object AutoGeneratedGetMemberValueCapturerHero(object o)
		{
			return ((TakePrisonerLogEntry)o).CapturerHero;
		}

		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(12f);
			}
		}

		public bool IsVisibleNotification
		{
			get
			{
				return true;
			}
		}

		public override ChatNotificationType NotificationType
		{
			get
			{
				Hero capturerHero = this.CapturerHero;
				IFaction faction = ((capturerHero != null) ? capturerHero.Clan : null);
				return base.MilitaryNotification(faction ?? this.CapturerPartyMapFaction, this.Prisoner.Clan);
			}
		}

		public TakePrisonerLogEntry(PartyBase capturerParty, Hero prisoner)
		{
			this.CapturerPartyMapFaction = capturerParty.MapFaction;
			this.CapturerHero = capturerParty.LeaderHero;
			MobileParty mobileParty = capturerParty.MobileParty;
			this.CapturerMobilePartyLeader = ((mobileParty != null) ? mobileParty.LeaderHero : null);
			this.CapturerSettlement = capturerParty.Settlement;
			this.Prisoner = prisoner;
		}

		public bool IsRelatedToWar(StanceLink stance, out IFaction effector, out IFaction effected)
		{
			IFaction faction = stance.Faction1;
			IFaction faction2 = stance.Faction2;
			effector = this.CapturerPartyMapFaction.MapFaction;
			effected = this.Prisoner.MapFaction;
			return (this.CapturerPartyMapFaction == faction && this.Prisoner.MapFaction == faction2) || (this.CapturerPartyMapFaction == faction2 && this.Prisoner.MapFaction == faction);
		}

		public override string ToString()
		{
			return this.GetNotificationText().ToString();
		}

		public TextObject GetNotificationText()
		{
			TextObject textObject = new TextObject("{=QRJQ9Wgv}{PRISONER_LORD.LINK}{?PRISONER_LORD_HAS_FACTION_LINK} of the {PRISONER_LORD_FACTION_LINK}{?}{\\?} has been taken prisoner by the {CAPTOR_FACTION}.", null);
			if (this.CapturerHero != null)
			{
				textObject = new TextObject("{=Ebb7aH3T}{PRISONER_LORD.LINK}{?PRISONER_LORD_HAS_FACTION_LINK} of the {PRISONER_LORD_FACTION_LINK}{?}{\\?} has been taken prisoner by {CAPTURER_LORD.LINK}{?CAPTURER_LORD_HAS_FACTION_LINK} of the {CAPTURER_LORD_FACTION_LINK}{?}{\\?}.", null);
				StringHelpers.SetCharacterProperties("CAPTURER_LORD", this.CapturerHero.CharacterObject, textObject, false);
				Clan clan = this.CapturerHero.Clan;
				if (clan != null && !clan.IsMinorFaction)
				{
					textObject.SetTextVariable("CAPTURER_LORD_FACTION_LINK", this.CapturerHero.MapFaction.EncyclopediaLinkWithName);
					textObject.SetTextVariable("CAPTURER_LORD_HAS_FACTION_LINK", 1);
				}
			}
			textObject.SetTextVariable("CAPTOR_FACTION", this.CapturerPartyMapFaction.InformalName);
			StringHelpers.SetCharacterProperties("PRISONER_LORD", this.Prisoner.CharacterObject, textObject, false);
			Clan clan2 = this.Prisoner.Clan;
			if (clan2 != null && !clan2.IsMinorFaction)
			{
				textObject.SetTextVariable("PRISONER_LORD_FACTION_LINK", this.Prisoner.MapFaction.EncyclopediaLinkWithName);
				textObject.SetTextVariable("PRISONER_LORD_HAS_FACTION_LINK", 1);
			}
			return textObject;
		}

		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.Prisoner || (this.CapturerSettlement != null && obj == this.CapturerSettlement) || (this.CapturerMobilePartyLeader != null && obj == this.CapturerMobilePartyLeader);
		}

		public TextObject GetEncyclopediaText()
		{
			return this.GetNotificationText();
		}

		[SaveableField(330)]
		public readonly IFaction CapturerPartyMapFaction;

		[SaveableField(331)]
		public readonly Hero Prisoner;

		[SaveableField(332)]
		public readonly Settlement CapturerSettlement;

		[SaveableField(333)]
		public readonly Hero CapturerMobilePartyLeader;

		[SaveableField(334)]
		public readonly Hero CapturerHero;
	}
}
