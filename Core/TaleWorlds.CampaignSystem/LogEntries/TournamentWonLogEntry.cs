using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class TournamentWonLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
	{
		internal static void AutoGeneratedStaticCollectObjectsTournamentWonLogEntry(object o, List<object> collectedObjects)
		{
			((TournamentWonLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._participants);
			collectedObjects.Add(this.Winner);
			collectedObjects.Add(this.Town);
		}

		internal static object AutoGeneratedGetMemberValueWinner(object o)
		{
			return ((TournamentWonLogEntry)o).Winner;
		}

		internal static object AutoGeneratedGetMemberValueTown(object o)
		{
			return ((TournamentWonLogEntry)o).Town;
		}

		internal static object AutoGeneratedGetMemberValue_participants(object o)
		{
			return ((TournamentWonLogEntry)o)._participants;
		}

		[SaveableProperty(931)]
		public Hero Winner { get; private set; }

		[SaveableProperty(932)]
		public Town Town { get; private set; }

		public bool IsVisibleNotification
		{
			get
			{
				return true;
			}
		}

		public override ChatNotificationType NotificationType
		{
			get
			{
				return base.CivilianNotification(this.Winner.Clan);
			}
		}

		public TournamentWonLogEntry(Hero winner, Town town, MBReadOnlyList<CharacterObject> gameParticipants)
		{
			this.Winner = winner;
			this.Town = town;
			Dictionary<Hero, short> dictionary = new Dictionary<Hero, short>();
			foreach (CharacterObject characterObject in gameParticipants)
			{
				if (characterObject.HeroObject != null && !dictionary.ContainsKey(characterObject.HeroObject))
				{
					dictionary.Add(characterObject.HeroObject, 1);
				}
			}
			this._participants = dictionary.GetReadOnlyDictionary<Hero, short>();
		}

		public override string ToString()
		{
			return "Tournament won";
		}

		public TextObject GetEncyclopediaText()
		{
			return this.GetNotificationText();
		}

		public TextObject GetNotificationText()
		{
			TextObject textObject = new TextObject("{=4ADQ7YZj}{PERSON.LINK} won the tournament at {TOWN}.", null);
			StringHelpers.SetCharacterProperties("PERSON", this.Winner.CharacterObject, textObject, false);
			textObject.SetTextVariable("TOWN", this.Town.Name);
			return textObject;
		}

		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.Winner || obj == this.Winner.Clan || obj == this.Town.Settlement;
		}

		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			short num;
			if (!this._participants.TryGetValue(talkTroop, out num))
			{
				num = -2;
			}
			short num2;
			if (!this._participants.TryGetValue(Hero.MainHero, out num2))
			{
				num2 = -2;
			}
			score = ImportanceEnum.Zero;
			comment = "";
			if (num > 0 && num2 > 0)
			{
				score = ImportanceEnum.SomewhatImportant;
				if (findString)
				{
					MBTextManager.SetTextVariable("TOURNAMENT_TOWN", this.Town.Name, false);
					MBTextManager.SetTextVariable("TOURNAMENT_WINNER", this.Winner.Name, false);
					if (this.Winner == Hero.MainHero)
					{
						comment = "str_comment_you_won_tournament_elsewhere";
						if (this.Town.Settlement == Settlement.CurrentSettlement)
						{
							comment = "str_comment_you_won_tournament_here";
							return;
						}
					}
					else if (this.Winner == talkTroop)
					{
						comment = "str_comment_i_won_tournament_elsewhere";
						if (this.Town.Settlement == Settlement.CurrentSettlement)
						{
							comment = "str_comment_i_won_tournament_here";
							return;
						}
					}
					else
					{
						comment = "str_comment_someone_else_won_tournament_elsewhere";
						if (this.Town.Settlement == Settlement.CurrentSettlement)
						{
							comment = "str_comment_someone_else_won_tournament_here";
						}
					}
				}
			}
		}

		[SaveableField(934)]
		private MBReadOnlyDictionary<Hero, short> _participants;
	}
}
