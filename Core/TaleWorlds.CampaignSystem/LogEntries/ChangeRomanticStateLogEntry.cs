using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002CF RID: 719
	public class ChangeRomanticStateLogEntry : LogEntry
	{
		// Token: 0x060029DB RID: 10715 RVA: 0x000B2850 File Offset: 0x000B0A50
		internal static void AutoGeneratedStaticCollectObjectsChangeRomanticStateLogEntry(object o, List<object> collectedObjects)
		{
			((ChangeRomanticStateLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060029DC RID: 10716 RVA: 0x000B285E File Offset: 0x000B0A5E
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Hero1);
			collectedObjects.Add(this.Hero2);
		}

		// Token: 0x060029DD RID: 10717 RVA: 0x000B287F File Offset: 0x000B0A7F
		internal static object AutoGeneratedGetMemberValueHero1(object o)
		{
			return ((ChangeRomanticStateLogEntry)o).Hero1;
		}

		// Token: 0x060029DE RID: 10718 RVA: 0x000B288C File Offset: 0x000B0A8C
		internal static object AutoGeneratedGetMemberValueHero2(object o)
		{
			return ((ChangeRomanticStateLogEntry)o).Hero2;
		}

		// Token: 0x060029DF RID: 10719 RVA: 0x000B2899 File Offset: 0x000B0A99
		internal static object AutoGeneratedGetMemberValueLevel(object o)
		{
			return ((ChangeRomanticStateLogEntry)o).Level;
		}

		// Token: 0x060029E0 RID: 10720 RVA: 0x000B28AB File Offset: 0x000B0AAB
		public ChangeRomanticStateLogEntry(Hero hero1, Hero hero2, Romance.RomanceLevelEnum level)
		{
			this.Hero1 = hero1;
			this.Hero2 = hero2;
			this.Level = level;
		}

		// Token: 0x060029E1 RID: 10721 RVA: 0x000B28C8 File Offset: 0x000B0AC8
		public override string ToString()
		{
			TextObject textObject = new TextObject("{=!}Relation between {HERO_1.NAME} and {HERO_2.NAME} : {RELATION}", null);
			textObject.SetTextVariable("RELATION", this.Level.ToString());
			StringHelpers.SetCharacterProperties("HERO_1", this.Hero1.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("HERO_2", this.Hero2.CharacterObject, textObject, false);
			return textObject.ToString();
		}

		// Token: 0x060029E2 RID: 10722 RVA: 0x000B2934 File Offset: 0x000B0B34
		public override ImportanceEnum GetImportanceForClan(Clan clan)
		{
			if (this.Hero1.Clan != clan && this.Hero2.Clan != clan)
			{
				return ImportanceEnum.Zero;
			}
			if (this.Level >= Romance.RomanceLevelEnum.CourtshipStarted)
			{
				return ImportanceEnum.ExtremelyImportant;
			}
			return ImportanceEnum.Important;
		}

		// Token: 0x060029E3 RID: 10723 RVA: 0x000B2960 File Offset: 0x000B0B60
		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			score = ImportanceEnum.Zero;
			comment = "";
			if (this.Hero1 == Hero.MainHero || this.Hero2 == Hero.MainHero)
			{
				Hero hero = this.Hero2;
				if (this.Hero2 == Hero.MainHero)
				{
					hero = this.Hero1;
				}
				hero.SetTextVariables();
				if ((this.Hero1 == Hero.OneToOneConversationHero || this.Hero2 == Hero.OneToOneConversationHero) && this.Level == Romance.RomanceLevelEnum.MatchMadeByFamily)
				{
					score = ImportanceEnum.MatterOfLifeAndDeath;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_match_made_by_family";
						return;
					}
				}
				else if (this.Level >= Romance.RomanceLevelEnum.Marriage && hero == Hero.OneToOneConversationHero)
				{
					score = ImportanceEnum.Important;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_congratulations_marriage_self";
						return;
					}
				}
				else if (this.Level >= Romance.RomanceLevelEnum.Marriage && hero != Hero.OneToOneConversationHero && hero.MapFaction == Hero.OneToOneConversationHero.MapFaction && Hero.OneToOneConversationHero.IsLord)
				{
					score = ImportanceEnum.Important;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_congratulations_marriage";
						return;
					}
				}
				else if (Hero.OneToOneConversationHero.Spouse == hero && this.Level >= Romance.RomanceLevelEnum.CourtshipStarted)
				{
					score = ImportanceEnum.MatterOfLifeAndDeath;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_stay_away_from_my_spouse";
						return;
					}
				}
				else if (Romance.GetRomanticLevel(hero, Hero.OneToOneConversationHero) >= Romance.RomanceLevelEnum.CourtshipStarted && this.Level >= Romance.RomanceLevelEnum.CourtshipStarted)
				{
					score = ImportanceEnum.MatterOfLifeAndDeath;
					if (findString)
					{
						comment = "str_comment_changeromanticstate_romantic_rival";
					}
				}
			}
		}

		// Token: 0x04000CAC RID: 3244
		[SaveableField(70)]
		public readonly Hero Hero1;

		// Token: 0x04000CAD RID: 3245
		[SaveableField(71)]
		public readonly Hero Hero2;

		// Token: 0x04000CAE RID: 3246
		[SaveableField(72)]
		public readonly Romance.RomanceLevelEnum Level;
	}
}
