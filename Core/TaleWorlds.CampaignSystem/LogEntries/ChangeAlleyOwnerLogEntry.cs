using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class ChangeAlleyOwnerLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
	{
		internal static void AutoGeneratedStaticCollectObjectsChangeAlleyOwnerLogEntry(object o, List<object> collectedObjects)
		{
			((ChangeAlleyOwnerLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Alley);
			collectedObjects.Add(this.NewOwner);
		}

		internal static object AutoGeneratedGetMemberValueAlley(object o)
		{
			return ((ChangeAlleyOwnerLogEntry)o).Alley;
		}

		internal static object AutoGeneratedGetMemberValueNewOwner(object o)
		{
			return ((ChangeAlleyOwnerLogEntry)o).NewOwner;
		}

		public bool IsVisibleNotification
		{
			get
			{
				return this.NewOwner != null && this.NewOwner == Hero.MainHero;
			}
		}

		public ChangeAlleyOwnerLogEntry(Alley alley, Hero newOwner, Hero oldOwner)
		{
			this.Alley = alley;
			this.NewOwner = newOwner;
		}

		public TextObject GetNotificationText()
		{
			return this.GetEncyclopediaText();
		}

		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			score = ImportanceEnum.Zero;
			comment = "";
		}

		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.Alley.Settlement || obj == this.NewOwner;
		}

		public TextObject GetEncyclopediaText()
		{
			TextObject textObject;
			if (this.NewOwner != null)
			{
				textObject = GameTexts.FindText("str_alley_owner_changed_news", null);
				StringHelpers.SetCharacterProperties("HERO", this.NewOwner.CharacterObject, textObject, false);
			}
			else
			{
				textObject = GameTexts.FindText("str_alley_cleared_news", null);
			}
			textObject.SetTextVariable("SETTLEMENT", this.Alley.Settlement.EncyclopediaLinkWithName);
			textObject.SetTextVariable("COMMON_AREA", this.Alley.Name);
			return textObject;
		}

		public override string ToString()
		{
			return this.GetEncyclopediaText().ToString();
		}

		[SaveableField(60)]
		public readonly Alley Alley;

		[SaveableField(61)]
		public readonly Hero NewOwner;
	}
}
