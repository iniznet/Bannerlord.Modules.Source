using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class CharacterInsultedLogEntry : LogEntry, IEncyclopediaLog, IChatNotification
	{
		internal static void AutoGeneratedStaticCollectObjectsCharacterInsultedLogEntry(object o, List<object> collectedObjects)
		{
			((CharacterInsultedLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Insultee);
			collectedObjects.Add(this.Insulter);
			collectedObjects.Add(this._overWhat);
		}

		internal static object AutoGeneratedGetMemberValueInsultee(object o)
		{
			return ((CharacterInsultedLogEntry)o).Insultee;
		}

		internal static object AutoGeneratedGetMemberValueInsulter(object o)
		{
			return ((CharacterInsultedLogEntry)o).Insulter;
		}

		internal static object AutoGeneratedGetMemberValue_overWhat(object o)
		{
			return ((CharacterInsultedLogEntry)o)._overWhat;
		}

		internal static object AutoGeneratedGetMemberValue_gameActionNote(object o)
		{
			return ((CharacterInsultedLogEntry)o)._gameActionNote;
		}

		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(240f);
			}
		}

		public override ChatNotificationType NotificationType
		{
			get
			{
				return base.CivilianNotification(this.Insulter.Clan);
			}
		}

		public bool IsVisibleNotification
		{
			get
			{
				if (this._overWhat != null)
				{
					return this._overWhat.IsHero;
				}
				return this.Insultee.CharacterObject.IsHero;
			}
		}

		public CharacterInsultedLogEntry(Hero insultee, Hero insulter, CharacterObject overWhat, ActionNotes note)
		{
			this.Insultee = insultee;
			this.Insulter = insulter;
			this._overWhat = overWhat;
			this._gameActionNote = note;
		}

		public override TextObject GetHistoricComment(Hero talkTroop)
		{
			MBTextManager.SetTextVariable("SIDE1TROOP", this.Insultee.Name, false);
			MBTextManager.SetTextVariable("SIDE2TROOP", this.Insulter.Name, false);
			if (talkTroop == this.Insultee)
			{
				return GameTexts.FindText("str_description_insultcharacter_I_insulted_y", null);
			}
			if (talkTroop == this.Insulter)
			{
				return GameTexts.FindText("str_description_insultcharacter_x_insulted_me", null);
			}
			if (talkTroop == null)
			{
				return GameTexts.FindText("str_description_insultcharacter_x_insulted_y", null);
			}
			MBTextManager.SetTextVariable("SIDE1TROOP", ConversationHelper.HeroRefersToHero(talkTroop, this.Insultee, true), false);
			MBTextManager.SetTextVariable("SIDE2TROOP", ConversationHelper.HeroRefersToHero(talkTroop, this.Insulter, false), false);
			if (this._gameActionNote == ActionNotes.CourtshipQuarrel)
			{
				Hero heroObject = this._overWhat.HeroObject;
				MBTextManager.SetTextVariable("SUBJECT", ConversationHelper.HeroRefersToHero(talkTroop, heroObject, false), false);
				return GameTexts.FindText("str_description_insultcharacter_x_insulted_y_courtship", null);
			}
			return GameTexts.FindText("str_description_insultcharacter_x_insulted_y", null);
		}

		public override int AsReasonForEnmity(Hero referenceHero1, Hero referenceHero2)
		{
			if (referenceHero1 == this.Insultee && referenceHero2 == this.Insulter)
			{
				return 5;
			}
			if (referenceHero2 == this.Insultee && referenceHero1 == this.Insulter)
			{
				return 5;
			}
			return 0;
		}

		public override string ToString()
		{
			return this.GetEncyclopediaText().ToString();
		}

		public TextObject GetNotificationText()
		{
			TextObject textObject = GameTexts.FindText("str_notification_quarrel", null);
			StringHelpers.SetCharacterProperties("LORD", this.Insultee.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("OTHER_LORD", this.Insulter.CharacterObject, textObject, false);
			return textObject;
		}

		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.Insultee || obj == this.Insulter;
		}

		public TextObject GetEncyclopediaText()
		{
			TextObject textObject = TextObject.Empty;
			if (this._gameActionNote == ActionNotes.CourtshipQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_courtship", null);
			}
			if (this._gameActionNote == ActionNotes.ValorStrategyQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_setback_valor", null);
			}
			if (this._gameActionNote == ActionNotes.CalculatingStrategyQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_setback_calculating", null);
			}
			if (this._gameActionNote == ActionNotes.ResponsibilityStrategyQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_setback_responsibility", null);
			}
			if (this._gameActionNote == ActionNotes.LandCheatingQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_land", null);
			}
			if (this._gameActionNote == ActionNotes.TroublemakerQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_troublemaker", null);
			}
			if (this._gameActionNote == ActionNotes.HereticQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_heretic", null);
			}
			if (this._gameActionNote == ActionNotes.RuthlessBusinessQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_ruthless_business", null);
			}
			if (this._gameActionNote == ActionNotes.DishonestBusinessQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_dishonest_business", null);
			}
			if (this._gameActionNote == ActionNotes.ExtortingQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_extorting", null);
			}
			if (this._gameActionNote == ActionNotes.VengeanceQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_vengeance", null);
			}
			if (this._gameActionNote == ActionNotes.FiefQuarrel)
			{
				textObject = GameTexts.FindText("str_insult_news_fief", null);
			}
			if (textObject != TextObject.Empty)
			{
				StringHelpers.SetCharacterProperties("INSULTER", this.Insultee.CharacterObject, textObject, false);
				StringHelpers.SetCharacterProperties("INSULTEE", this.Insulter.CharacterObject, textObject, false);
				return textObject;
			}
			textObject = new TextObject("{=v7sfiv5m}{INSULT_NEWS} {GAME_ACTION_NOTES}", null);
			textObject.SetTextVariable("INSULT_NEWS", GameTexts.FindText("str_insult_news", null));
			textObject.SetTextVariable("GAME_ACTION_NOTES", GameTexts.FindText("str_game_action_note", this._gameActionNote.ToString()));
			return textObject;
		}

		[SaveableField(110)]
		public readonly Hero Insultee;

		[SaveableField(111)]
		public readonly Hero Insulter;

		[SaveableField(112)]
		private readonly CharacterObject _overWhat;

		[SaveableField(113)]
		private readonly ActionNotes _gameActionNote;
	}
}
