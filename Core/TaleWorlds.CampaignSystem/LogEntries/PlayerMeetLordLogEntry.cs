using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	// Token: 0x020002E4 RID: 740
	public class PlayerMeetLordLogEntry : LogEntry, IEncyclopediaLog
	{
		// Token: 0x06002AD9 RID: 10969 RVA: 0x000B5960 File Offset: 0x000B3B60
		internal static void AutoGeneratedStaticCollectObjectsPlayerMeetLordLogEntry(object o, List<object> collectedObjects)
		{
			((PlayerMeetLordLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002ADA RID: 10970 RVA: 0x000B596E File Offset: 0x000B3B6E
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Hero);
		}

		// Token: 0x06002ADB RID: 10971 RVA: 0x000B5983 File Offset: 0x000B3B83
		internal static object AutoGeneratedGetMemberValueHero(object o)
		{
			return ((PlayerMeetLordLogEntry)o).Hero;
		}

		// Token: 0x17000A73 RID: 2675
		// (get) Token: 0x06002ADC RID: 10972 RVA: 0x000B5990 File Offset: 0x000B3B90
		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(1f);
			}
		}

		// Token: 0x06002ADD RID: 10973 RVA: 0x000B599C File Offset: 0x000B3B9C
		public PlayerMeetLordLogEntry(Hero hero)
		{
			this.Hero = hero;
		}

		// Token: 0x06002ADE RID: 10974 RVA: 0x000B59AB File Offset: 0x000B3BAB
		public override ImportanceEnum GetImportanceForClan(Clan clan)
		{
			return ImportanceEnum.SlightlyImportant;
		}

		// Token: 0x06002ADF RID: 10975 RVA: 0x000B59B0 File Offset: 0x000B3BB0
		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			score = ImportanceEnum.Zero;
			comment = "";
			if (Campaign.Current.ConversationManager.CurrentConversationIsFirst && this.Hero == talkTroop)
			{
				score = ImportanceEnum.SlightlyImportant;
				if (HeroHelper.UnderPlayerCommand(talkTroop))
				{
					score = ImportanceEnum.ExtremelyImportant;
				}
			}
			if (findString)
			{
				comment = "str_comment_intro";
				if (talkTroop.Clan != null && talkTroop.Clan.MapFaction != Hero.MainHero.MapFaction)
				{
					string text = "str_comment_special_clan_intro_" + talkTroop.Clan.StringId;
					TextObject textObject = new TextObject("", null);
					if (GameTexts.TryGetText(text, out textObject, null))
					{
						comment = text;
					}
				}
			}
		}

		// Token: 0x06002AE0 RID: 10976 RVA: 0x000B5A51 File Offset: 0x000B3C51
		public override string ToString()
		{
			return this.GetEncyclopediaText().ToString();
		}

		// Token: 0x06002AE1 RID: 10977 RVA: 0x000B5A5E File Offset: 0x000B3C5E
		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.Hero;
		}

		// Token: 0x06002AE2 RID: 10978 RVA: 0x000B5A70 File Offset: 0x000B3C70
		public TextObject GetEncyclopediaText()
		{
			TextObject textObject = GameTexts.FindText("str_action_meet_lord", null);
			StringHelpers.SetCharacterProperties("HERO_1", this.Hero.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("HERO_2", CharacterObject.PlayerCharacter, textObject, false);
			return textObject;
		}

		// Token: 0x04000CF3 RID: 3315
		[SaveableField(290)]
		public readonly Hero Hero;
	}
}
