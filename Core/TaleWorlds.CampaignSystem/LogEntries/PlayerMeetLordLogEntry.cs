using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class PlayerMeetLordLogEntry : LogEntry, IEncyclopediaLog
	{
		internal static void AutoGeneratedStaticCollectObjectsPlayerMeetLordLogEntry(object o, List<object> collectedObjects)
		{
			((PlayerMeetLordLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Hero);
		}

		internal static object AutoGeneratedGetMemberValueHero(object o)
		{
			return ((PlayerMeetLordLogEntry)o).Hero;
		}

		public override CampaignTime KeepInHistoryTime
		{
			get
			{
				return CampaignTime.Weeks(1f);
			}
		}

		public PlayerMeetLordLogEntry(Hero hero)
		{
			this.Hero = hero;
		}

		public override ImportanceEnum GetImportanceForClan(Clan clan)
		{
			return ImportanceEnum.SlightlyImportant;
		}

		public override void GetConversationScoreAndComment(Hero talkTroop, bool findString, out string comment, out ImportanceEnum score)
		{
			score = ImportanceEnum.Zero;
			comment = "";
			if (Campaign.Current.ConversationManager.CurrentConversationIsFirst && this.Hero == talkTroop)
			{
				score = ImportanceEnum.SlightlyImportant;
				if (HeroHelper.UnderPlayerCommand(talkTroop))
				{
					score = ImportanceEnum.ExtremelyImportant;
				}
			}
			if (findString)
			{
				comment = "str_comment_intro";
				if (talkTroop.Clan != null && talkTroop.Clan.MapFaction != Hero.MainHero.MapFaction)
				{
					string text = "str_comment_special_clan_intro_" + talkTroop.Clan.StringId;
					TextObject textObject = new TextObject("", null);
					if (GameTexts.TryGetText(text, out textObject, null))
					{
						comment = text;
					}
				}
			}
		}

		public override string ToString()
		{
			return this.GetEncyclopediaText().ToString();
		}

		public bool IsVisibleInEncyclopediaPageOf<T>(T obj) where T : MBObjectBase
		{
			return obj == this.Hero;
		}

		public TextObject GetEncyclopediaText()
		{
			TextObject textObject = GameTexts.FindText("str_action_meet_lord", null);
			StringHelpers.SetCharacterProperties("HERO_1", this.Hero.CharacterObject, textObject, false);
			StringHelpers.SetCharacterProperties("HERO_2", CharacterObject.PlayerCharacter, textObject, false);
			return textObject;
		}

		[SaveableField(290)]
		public readonly Hero Hero;
	}
}
