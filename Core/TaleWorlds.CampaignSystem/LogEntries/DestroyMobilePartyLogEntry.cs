using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.LogEntries
{
	public class DestroyMobilePartyLogEntry : LogEntry
	{
		internal static void AutoGeneratedStaticCollectObjectsDestroyMobilePartyLogEntry(object o, List<object> collectedObjects)
		{
			((DestroyMobilePartyLogEntry)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.Hero);
			collectedObjects.Add(this.Faction);
			collectedObjects.Add(this.DestroyerPartyFaction);
			collectedObjects.Add(this.DestroyerHero);
			collectedObjects.Add(this._destroyerPartyName);
		}

		internal static object AutoGeneratedGetMemberValueHero(object o)
		{
			return ((DestroyMobilePartyLogEntry)o).Hero;
		}

		internal static object AutoGeneratedGetMemberValueFaction(object o)
		{
			return ((DestroyMobilePartyLogEntry)o).Faction;
		}

		internal static object AutoGeneratedGetMemberValueDestroyerPartyFaction(object o)
		{
			return ((DestroyMobilePartyLogEntry)o).DestroyerPartyFaction;
		}

		internal static object AutoGeneratedGetMemberValueDestroyerHero(object o)
		{
			return ((DestroyMobilePartyLogEntry)o).DestroyerHero;
		}

		internal static object AutoGeneratedGetMemberValue_destroyerPartyName(object o)
		{
			return ((DestroyMobilePartyLogEntry)o)._destroyerPartyName;
		}

		public DestroyMobilePartyLogEntry(MobileParty mobileParty, PartyBase destroyerParty)
		{
			this.Hero = mobileParty.LeaderHero;
			this.Faction = mobileParty.MapFaction;
			this._destroyerPartyName = ((destroyerParty != null) ? destroyerParty.Name : null);
			this.DestroyerPartyFaction = ((destroyerParty != null) ? destroyerParty.MapFaction : null);
			this.DestroyerHero = ((destroyerParty != null) ? destroyerParty.LeaderHero : null);
		}

		public override int GetAsRumor(Settlement settlement, ref TextObject comment)
		{
			int num = 0;
			if (this.DestroyerPartyFaction == settlement.MapFaction && this.DestroyerHero != null && this.Hero != null)
			{
				comment = new TextObject("{=shihxzUN}Praise be... {LORD.LINK} met {OTHER_SIDE} and whipped them soundly. Maybe now there will be an end to this war.", null);
				StringHelpers.SetCharacterProperties("LORD", this.DestroyerHero.CharacterObject, comment, false);
				comment.SetTextVariable("OTHER_SIDE", FactionHelper.GetTermUsedByOtherFaction(this.Faction, settlement.MapFaction, false));
				return 4;
			}
			if (this.Faction == settlement.MapFaction && this.DestroyerHero != null && this.Hero != null)
			{
				comment = new TextObject("{=O4dWdKZd}Ach... So they say {LORD.LINK} got {?LORD.GENDER}his{?}her{\\?} arse handed to {?LORD.GENDER}him{?}her{\\?} by {OTHER_SIDE}. Grim times, friend.", null);
				StringHelpers.SetCharacterProperties("LORD", this.Hero.CharacterObject, comment, false);
				comment.SetTextVariable("OTHER_SIDE", FactionHelper.GetTermUsedByOtherFaction(this.DestroyerPartyFaction, settlement.MapFaction, false));
				return 4;
			}
			return num;
		}

		public override string ToString()
		{
			TextObject textObject = TextObject.Empty;
			if (this.Hero != null && this._destroyerPartyName != null)
			{
				textObject = new TextObject("{=i90Cmb5e}Party of {HERO.NAME} is destroyed by {DESTROYER_PARTY}", null);
				StringHelpers.SetCharacterProperties("HERO", this.Hero.CharacterObject, textObject, false);
				textObject.SetTextVariable("DESTROYER_PARTY", this._destroyerPartyName);
			}
			return textObject.ToString();
		}

		[SaveableField(210)]
		public readonly Hero Hero;

		[SaveableField(211)]
		public readonly IFaction Faction;

		[SaveableField(212)]
		public readonly IFaction DestroyerPartyFaction;

		[SaveableField(213)]
		public readonly Hero DestroyerHero;

		[SaveableField(214)]
		private readonly TextObject _destroyerPartyName;
	}
}
