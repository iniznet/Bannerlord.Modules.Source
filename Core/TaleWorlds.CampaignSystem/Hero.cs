using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Xml.Serialization;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Issues;
using TaleWorlds.CampaignSystem.LogEntries;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Workshops;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;
using TaleWorlds.SaveSystem.Load;

namespace TaleWorlds.CampaignSystem
{
	public sealed class Hero : MBObjectBase, ITrackableCampaignObject, ITrackableBase, IRandomOwner
	{
		internal static void AutoGeneratedStaticCollectObjectsHero(object o, List<object> collectedObjects)
		{
			((Hero)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.VolunteerTypes);
			collectedObjects.Add(this.Culture);
			collectedObjects.Add(this.SpecialItems);
			collectedObjects.Add(this._characterObject);
			collectedObjects.Add(this._firstName);
			collectedObjects.Add(this._name);
			collectedObjects.Add(this._heroTraits);
			collectedObjects.Add(this._heroPerks);
			collectedObjects.Add(this._heroSkills);
			collectedObjects.Add(this._characterAttributes);
			collectedObjects.Add(this._companionOf);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._birthDay, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._deathDay, collectedObjects);
			collectedObjects.Add(this._clan);
			collectedObjects.Add(this._supporterOf);
			collectedObjects.Add(this._governorOf);
			collectedObjects.Add(this._ownedWorkshops);
			collectedObjects.Add(this._partyBelongedTo);
			collectedObjects.Add(this._stayingInSettlement);
			collectedObjects.Add(this._bornSettlement);
			collectedObjects.Add(this._father);
			collectedObjects.Add(this._mother);
			collectedObjects.Add(this._exSpouses);
			collectedObjects.Add(this._spouse);
			collectedObjects.Add(this._children);
			collectedObjects.Add(this._heroDeveloper);
			StaticBodyProperties.AutoGeneratedStaticCollectObjectsStaticBodyProperties(this.StaticBodyProperties, collectedObjects);
			collectedObjects.Add(this.EncyclopediaText);
			collectedObjects.Add(this.BattleEquipment);
			collectedObjects.Add(this.CivilianEquipment);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.CaptivityStartTime, collectedObjects);
			collectedObjects.Add(this.DeathMarkKillerHero);
			collectedObjects.Add(this.LastKnownClosestSettlement);
			collectedObjects.Add(this.PartyBelongedToAsPrisoner);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.LastMeetingTimeWithPlayer, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueStaticBodyProperties(object o)
		{
			return ((Hero)o).StaticBodyProperties;
		}

		internal static object AutoGeneratedGetMemberValueWeight(object o)
		{
			return ((Hero)o).Weight;
		}

		internal static object AutoGeneratedGetMemberValueBuild(object o)
		{
			return ((Hero)o).Build;
		}

		internal static object AutoGeneratedGetMemberValueEncyclopediaText(object o)
		{
			return ((Hero)o).EncyclopediaText;
		}

		internal static object AutoGeneratedGetMemberValueIsFemale(object o)
		{
			return ((Hero)o).IsFemale;
		}

		internal static object AutoGeneratedGetMemberValueBattleEquipment(object o)
		{
			return ((Hero)o).BattleEquipment;
		}

		internal static object AutoGeneratedGetMemberValueCivilianEquipment(object o)
		{
			return ((Hero)o).CivilianEquipment;
		}

		internal static object AutoGeneratedGetMemberValueCaptivityStartTime(object o)
		{
			return ((Hero)o).CaptivityStartTime;
		}

		internal static object AutoGeneratedGetMemberValuePreferredUpgradeFormation(object o)
		{
			return ((Hero)o).PreferredUpgradeFormation;
		}

		internal static object AutoGeneratedGetMemberValueIsMinorFactionHero(object o)
		{
			return ((Hero)o).IsMinorFactionHero;
		}

		internal static object AutoGeneratedGetMemberValueOccupation(object o)
		{
			return ((Hero)o).Occupation;
		}

		internal static object AutoGeneratedGetMemberValueDeathMark(object o)
		{
			return ((Hero)o).DeathMark;
		}

		internal static object AutoGeneratedGetMemberValueDeathMarkKillerHero(object o)
		{
			return ((Hero)o).DeathMarkKillerHero;
		}

		internal static object AutoGeneratedGetMemberValueLastKnownClosestSettlement(object o)
		{
			return ((Hero)o).LastKnownClosestSettlement;
		}

		internal static object AutoGeneratedGetMemberValueLastExaminedLogEntryID(object o)
		{
			return ((Hero)o).LastExaminedLogEntryID;
		}

		internal static object AutoGeneratedGetMemberValuePartyBelongedToAsPrisoner(object o)
		{
			return ((Hero)o).PartyBelongedToAsPrisoner;
		}

		internal static object AutoGeneratedGetMemberValueLastMeetingTimeWithPlayer(object o)
		{
			return ((Hero)o).LastMeetingTimeWithPlayer;
		}

		internal static object AutoGeneratedGetMemberValueRandomValue(object o)
		{
			return ((Hero)o).RandomValue;
		}

		internal static object AutoGeneratedGetMemberValueLastTimeStampForActivity(object o)
		{
			return ((Hero)o).LastTimeStampForActivity;
		}

		internal static object AutoGeneratedGetMemberValueVolunteerTypes(object o)
		{
			return ((Hero)o).VolunteerTypes;
		}

		internal static object AutoGeneratedGetMemberValueHairTags(object o)
		{
			return ((Hero)o).HairTags;
		}

		internal static object AutoGeneratedGetMemberValueBeardTags(object o)
		{
			return ((Hero)o).BeardTags;
		}

		internal static object AutoGeneratedGetMemberValueTattooTags(object o)
		{
			return ((Hero)o).TattooTags;
		}

		internal static object AutoGeneratedGetMemberValueLevel(object o)
		{
			return ((Hero)o).Level;
		}

		internal static object AutoGeneratedGetMemberValueSpcDaysInLocation(object o)
		{
			return ((Hero)o).SpcDaysInLocation;
		}

		internal static object AutoGeneratedGetMemberValueCulture(object o)
		{
			return ((Hero)o).Culture;
		}

		internal static object AutoGeneratedGetMemberValueSpecialItems(object o)
		{
			return ((Hero)o).SpecialItems;
		}

		internal static object AutoGeneratedGetMemberValueIsPregnant(object o)
		{
			return ((Hero)o).IsPregnant;
		}

		internal static object AutoGeneratedGetMemberValue_passedTimeAtHomeSettlement(object o)
		{
			return ((Hero)o)._passedTimeAtHomeSettlement;
		}

		internal static object AutoGeneratedGetMemberValue_characterObject(object o)
		{
			return ((Hero)o)._characterObject;
		}

		internal static object AutoGeneratedGetMemberValue_firstName(object o)
		{
			return ((Hero)o)._firstName;
		}

		internal static object AutoGeneratedGetMemberValue_name(object o)
		{
			return ((Hero)o)._name;
		}

		internal static object AutoGeneratedGetMemberValue_heroState(object o)
		{
			return ((Hero)o)._heroState;
		}

		internal static object AutoGeneratedGetMemberValue_heroTraits(object o)
		{
			return ((Hero)o)._heroTraits;
		}

		internal static object AutoGeneratedGetMemberValue_heroPerks(object o)
		{
			return ((Hero)o)._heroPerks;
		}

		internal static object AutoGeneratedGetMemberValue_heroSkills(object o)
		{
			return ((Hero)o)._heroSkills;
		}

		internal static object AutoGeneratedGetMemberValue_characterAttributes(object o)
		{
			return ((Hero)o)._characterAttributes;
		}

		internal static object AutoGeneratedGetMemberValue_companionOf(object o)
		{
			return ((Hero)o)._companionOf;
		}

		internal static object AutoGeneratedGetMemberValue_health(object o)
		{
			return ((Hero)o)._health;
		}

		internal static object AutoGeneratedGetMemberValue_defaultAge(object o)
		{
			return ((Hero)o)._defaultAge;
		}

		internal static object AutoGeneratedGetMemberValue_birthDay(object o)
		{
			return ((Hero)o)._birthDay;
		}

		internal static object AutoGeneratedGetMemberValue_deathDay(object o)
		{
			return ((Hero)o)._deathDay;
		}

		internal static object AutoGeneratedGetMemberValue_power(object o)
		{
			return ((Hero)o)._power;
		}

		internal static object AutoGeneratedGetMemberValue_clan(object o)
		{
			return ((Hero)o)._clan;
		}

		internal static object AutoGeneratedGetMemberValue_supporterOf(object o)
		{
			return ((Hero)o)._supporterOf;
		}

		internal static object AutoGeneratedGetMemberValue_governorOf(object o)
		{
			return ((Hero)o)._governorOf;
		}

		internal static object AutoGeneratedGetMemberValue_ownedWorkshops(object o)
		{
			return ((Hero)o)._ownedWorkshops;
		}

		internal static object AutoGeneratedGetMemberValue_partyBelongedTo(object o)
		{
			return ((Hero)o)._partyBelongedTo;
		}

		internal static object AutoGeneratedGetMemberValue_stayingInSettlement(object o)
		{
			return ((Hero)o)._stayingInSettlement;
		}

		internal static object AutoGeneratedGetMemberValue_isKnownToPlayer(object o)
		{
			return ((Hero)o)._isKnownToPlayer;
		}

		internal static object AutoGeneratedGetMemberValue_hasMet(object o)
		{
			return ((Hero)o)._hasMet;
		}

		internal static object AutoGeneratedGetMemberValue_bornSettlement(object o)
		{
			return ((Hero)o)._bornSettlement;
		}

		internal static object AutoGeneratedGetMemberValue_gold(object o)
		{
			return ((Hero)o)._gold;
		}

		internal static object AutoGeneratedGetMemberValue_father(object o)
		{
			return ((Hero)o)._father;
		}

		internal static object AutoGeneratedGetMemberValue_mother(object o)
		{
			return ((Hero)o)._mother;
		}

		internal static object AutoGeneratedGetMemberValue_exSpouses(object o)
		{
			return ((Hero)o)._exSpouses;
		}

		internal static object AutoGeneratedGetMemberValue_spouse(object o)
		{
			return ((Hero)o)._spouse;
		}

		internal static object AutoGeneratedGetMemberValue_children(object o)
		{
			return ((Hero)o)._children;
		}

		internal static object AutoGeneratedGetMemberValue_heroDeveloper(object o)
		{
			return ((Hero)o)._heroDeveloper;
		}

		[SaveableProperty(100)]
		internal StaticBodyProperties StaticBodyProperties { get; set; }

		[SaveableProperty(111)]
		public float Weight { get; set; }

		[SaveableProperty(112)]
		public float Build { get; set; }

		public BodyProperties BodyProperties
		{
			get
			{
				return new BodyProperties(new DynamicBodyProperties(this.Age, this.Weight, this.Build), this.StaticBodyProperties);
			}
		}

		public float PassedTimeAtHomeSettlement
		{
			get
			{
				return this._passedTimeAtHomeSettlement;
			}
			set
			{
				this._passedTimeAtHomeSettlement = value;
			}
		}

		public bool CanHaveRecruits
		{
			get
			{
				return Campaign.Current.Models.VolunteerModel.CanHaveRecruits(this);
			}
		}

		public CharacterObject CharacterObject
		{
			get
			{
				return this._characterObject;
			}
		}

		public void SetCharacterObject(CharacterObject characterObject)
		{
			this._characterObject = characterObject;
			this.SetInitialValuesFromCharacter(this._characterObject);
		}

		public TextObject FirstName
		{
			get
			{
				return this._firstName;
			}
		}

		public TextObject Name
		{
			get
			{
				return this._name;
			}
		}

		public void SetName(TextObject fullName, TextObject firstName)
		{
			this._name = fullName;
			this._firstName = firstName;
			if (this.PartyBelongedTo != null && this.PartyBelongedTo.LeaderHero == this)
			{
				this.PartyBelongedTo.PartyComponent.ClearCachedName();
			}
		}

		[SaveableProperty(190)]
		public TextObject EncyclopediaText { get; set; }

		public string EncyclopediaLink
		{
			get
			{
				return (Campaign.Current.EncyclopediaManager.GetIdentifier(typeof(Hero)) + "-" + base.StringId) ?? "";
			}
		}

		public TextObject EncyclopediaLinkWithName
		{
			get
			{
				return HyperlinkTexts.GetHeroHyperlinkText(this.EncyclopediaLink, this.Name);
			}
		}

		[SaveableProperty(200)]
		public bool IsFemale { get; private set; }

		public void UpdatePlayerGender(bool isFemale)
		{
			this.IsFemale = isFemale;
		}

		[SaveableProperty(210)]
		public Equipment BattleEquipment { get; private set; }

		[SaveableProperty(220)]
		public Equipment CivilianEquipment { get; private set; }

		[SaveableProperty(240)]
		public CampaignTime CaptivityStartTime { get; set; }

		[SaveableProperty(800)]
		public FormationClass PreferredUpgradeFormation { get; set; }

		public Hero.CharacterStates HeroState
		{
			get
			{
				return this._heroState;
			}
			private set
			{
				this.ChangeState(value);
			}
		}

		public CharacterTraits GetHeroTraits()
		{
			return this._heroTraits;
		}

		[SaveableProperty(320)]
		public bool IsMinorFactionHero { get; set; }

		public IssueBase Issue { get; private set; }

		public void OnIssueCreatedForHero(IssueBase issue)
		{
			this.Issue = issue;
		}

		public void OnIssueDeactivatedForHero()
		{
			this.Issue = null;
		}

		public override string ToString()
		{
			return this.Name.ToString();
		}

		public bool CanBeCompanion
		{
			get
			{
				return this.IsWanderer && this.CompanionOf == null;
			}
		}

		public bool IsNoncombatant
		{
			get
			{
				return this.GetSkillValue(DefaultSkills.OneHanded) < 50 && this.GetSkillValue(DefaultSkills.TwoHanded) < 50 && this.GetSkillValue(DefaultSkills.Polearm) < 50 && this.GetSkillValue(DefaultSkills.Throwing) < 50 && this.GetSkillValue(DefaultSkills.Crossbow) < 50 && this.GetSkillValue(DefaultSkills.Bow) < 50;
			}
		}

		public Clan CompanionOf
		{
			get
			{
				return this._companionOf;
			}
			set
			{
				if (value == this._companionOf)
				{
					return;
				}
				this._homeSettlement = null;
				if (this._companionOf != null)
				{
					this._companionOf.OnCompanionRemoved(this);
				}
				this._companionOf = value;
				if (this._companionOf != null)
				{
					this._companionOf.OnCompanionAdded(this);
				}
			}
		}

		public IEnumerable<Hero> CompanionsInParty
		{
			get
			{
				if (this.PartyBelongedTo != null && this.Clan != null)
				{
					foreach (Hero hero in this.Clan.Companions)
					{
						if (hero.PartyBelongedTo == this.PartyBelongedTo)
						{
							yield return hero;
						}
					}
					List<Hero>.Enumerator enumerator = default(List<Hero>.Enumerator);
				}
				yield break;
				yield break;
			}
		}

		[SaveableProperty(780)]
		public Occupation Occupation { get; private set; }

		public CharacterObject Template
		{
			get
			{
				return this.CharacterObject.OriginalCharacter;
			}
		}

		public bool IsDead
		{
			get
			{
				return this.HeroState == Hero.CharacterStates.Dead;
			}
		}

		public bool IsFugitive
		{
			get
			{
				return this.HeroState == Hero.CharacterStates.Fugitive;
			}
		}

		public bool IsPrisoner
		{
			get
			{
				return this.HeroState == Hero.CharacterStates.Prisoner;
			}
		}

		public bool IsReleased
		{
			get
			{
				return this.HeroState == Hero.CharacterStates.Released;
			}
		}

		public bool IsActive
		{
			get
			{
				return this.HeroState == Hero.CharacterStates.Active;
			}
		}

		public bool IsNotSpawned
		{
			get
			{
				return this.HeroState == Hero.CharacterStates.NotSpawned;
			}
		}

		public bool IsDisabled
		{
			get
			{
				return this.HeroState == Hero.CharacterStates.Disabled;
			}
		}

		public bool IsTraveling
		{
			get
			{
				return this.HeroState == Hero.CharacterStates.Traveling;
			}
		}

		public bool IsAlive
		{
			get
			{
				return !this.IsDead;
			}
		}

		[SaveableProperty(400)]
		public KillCharacterAction.KillCharacterActionDetail DeathMark { get; private set; }

		[SaveableProperty(401)]
		public Hero DeathMarkKillerHero { get; private set; }

		[SaveableProperty(411)]
		public Settlement LastKnownClosestSettlement { get; private set; }

		public void UpdateLastKnownClosestSettlement(Settlement settlement)
		{
			this.LastKnownClosestSettlement = settlement;
		}

		public void SetNewOccupation(Occupation occupation)
		{
			Occupation occupation2 = this.Occupation;
			this.Occupation = occupation;
			CampaignEventDispatcher.Instance.OnHeroOccupationChanged(this, occupation2);
		}

		public bool IsWanderer
		{
			get
			{
				return this.Occupation == Occupation.Wanderer;
			}
		}

		public bool IsTemplate
		{
			get
			{
				return this.CharacterObject.IsTemplate;
			}
		}

		public bool IsWounded
		{
			get
			{
				return this.HitPoints <= 20;
			}
		}

		public bool IsPlayerCompanion
		{
			get
			{
				return this.CompanionOf == Clan.PlayerClan;
			}
		}

		public bool IsMerchant
		{
			get
			{
				return this.Occupation == Occupation.Merchant;
			}
		}

		public bool IsPreacher
		{
			get
			{
				return this.Occupation == Occupation.Preacher;
			}
		}

		public bool IsHeadman
		{
			get
			{
				return this.Occupation == Occupation.Headman;
			}
		}

		public bool IsGangLeader
		{
			get
			{
				return this.Occupation == Occupation.GangLeader;
			}
		}

		public bool IsArtisan
		{
			get
			{
				return this.Occupation == Occupation.Artisan;
			}
		}

		public bool IsRuralNotable
		{
			get
			{
				return this.Occupation == Occupation.RuralNotable;
			}
		}

		public bool IsUrbanNotable
		{
			get
			{
				return this.Occupation == Occupation.Merchant || this.Occupation == Occupation.Artisan || this.Occupation == Occupation.GangLeader;
			}
		}

		public bool IsSpecial
		{
			get
			{
				return this.Occupation == Occupation.Special;
			}
		}

		public bool IsRebel
		{
			get
			{
				return this.Clan != null && this.Clan.IsRebelClan;
			}
		}

		public bool IsCommander
		{
			get
			{
				return this.GetTraitLevel(DefaultTraits.Commander) > 0;
			}
		}

		public bool IsPartyLeader
		{
			get
			{
				return this.PartyBelongedTo != null && this.PartyBelongedTo.LeaderHero == this;
			}
		}

		public bool IsNotable
		{
			get
			{
				return this.IsArtisan || this.IsGangLeader || this.IsPreacher || this.IsMerchant || this.IsRuralNotable || this.IsHeadman;
			}
		}

		public bool IsLord
		{
			get
			{
				return this.Occupation == Occupation.Lord;
			}
		}

		public int MaxHitPoints
		{
			get
			{
				return this.CharacterObject.MaxHitPoints();
			}
		}

		public int HitPoints
		{
			get
			{
				return this._health;
			}
			set
			{
				if (this._health == value)
				{
					return;
				}
				int health = this._health;
				this._health = value;
				if (this._health < 0)
				{
					this._health = 1;
				}
				else if (this._health > this.CharacterObject.MaxHitPoints())
				{
					this._health = this.CharacterObject.MaxHitPoints();
				}
				if (health <= 20 != this._health <= 20)
				{
					if (this.PartyBelongedTo != null)
					{
						this.PartyBelongedTo.MemberRoster.OnHeroHealthStatusChanged(this);
					}
					if (this.PartyBelongedToAsPrisoner != null)
					{
						this.PartyBelongedToAsPrisoner.PrisonRoster.OnHeroHealthStatusChanged(this);
					}
				}
				if (health > 20 && this.IsWounded)
				{
					CampaignEventDispatcher.Instance.OnHeroWounded(this);
				}
			}
		}

		public CampaignTime BirthDay
		{
			get
			{
				if (CampaignOptions.IsLifeDeathCycleDisabled)
				{
					return CampaignTime.YearsFromNow(-this._defaultAge);
				}
				return this._birthDay;
			}
		}

		public CampaignTime DeathDay
		{
			get
			{
				if (CampaignOptions.IsLifeDeathCycleDisabled)
				{
					return CampaignTime.YearsFromNow(-this._defaultAge) + CampaignTime.Years(this._defaultAge);
				}
				return this._deathDay;
			}
			set
			{
				this._deathDay = value;
			}
		}

		public float Age
		{
			get
			{
				if (CampaignOptions.IsLifeDeathCycleDisabled)
				{
					return this._defaultAge;
				}
				if (this.IsAlive)
				{
					return this._birthDay.ElapsedYearsUntilNow;
				}
				return (float)(this.DeathDay - this._birthDay).ToYears;
			}
		}

		public void SetBirthDay(CampaignTime birthday)
		{
			this._birthDay = birthday;
			this._defaultAge = (birthday.IsNow ? 0.001f : this._birthDay.ElapsedYearsUntilNow);
		}

		public bool IsChild
		{
			get
			{
				return this.Age < (float)Campaign.Current.Models.AgeModel.HeroComesOfAge;
			}
		}

		public float Power
		{
			get
			{
				return this._power;
			}
		}

		public void AddPower(float value)
		{
			this._power += value;
		}

		public Banner ClanBanner
		{
			get
			{
				Clan clan = this.Clan;
				if (clan == null)
				{
					return null;
				}
				return clan.Banner;
			}
		}

		[SaveableProperty(481)]
		public long LastExaminedLogEntryID { get; set; }

		public Clan Clan
		{
			get
			{
				return this.CompanionOf ?? this._clan;
			}
			set
			{
				if (this._clan != value)
				{
					this._homeSettlement = null;
					if (this._clan != null)
					{
						this._clan.OnLordRemoved(this);
					}
					Clan clan = this._clan;
					this._clan = value;
					if (this._clan != null)
					{
						this._clan.OnLordAdded(this);
					}
					CampaignEventDispatcher.Instance.OnHeroChangedClan(this, clan);
				}
			}
		}

		public Clan SupporterOf
		{
			get
			{
				return this._supporterOf;
			}
			set
			{
				if (this._supporterOf != value)
				{
					if (this._supporterOf != null)
					{
						this._supporterOf.OnSupporterNotableRemoved(this);
					}
					this._supporterOf = value;
					if (this._supporterOf != null)
					{
						this._supporterOf.OnSupporterNotableAdded(this);
					}
				}
			}
		}

		public Town GovernorOf
		{
			get
			{
				return this._governorOf;
			}
			set
			{
				if (value != this._governorOf)
				{
					this._governorOf = value;
				}
			}
		}

		public IFaction MapFaction
		{
			get
			{
				if (this.Clan != null)
				{
					IFaction kingdom = this.Clan.Kingdom;
					return kingdom ?? this.Clan;
				}
				if (this.IsSpecial)
				{
					return null;
				}
				if (this.HomeSettlement != null)
				{
					return this.HomeSettlement.MapFaction;
				}
				if (this.PartyBelongedTo != null)
				{
					return this.PartyBelongedTo.MapFaction;
				}
				return null;
			}
		}

		public List<Alley> OwnedAlleys { get; private set; }

		public bool IsFactionLeader
		{
			get
			{
				return this.MapFaction != null && this.MapFaction.Leader == this;
			}
		}

		public List<CaravanPartyComponent> OwnedCaravans { get; private set; }

		public MobileParty PartyBelongedTo
		{
			get
			{
				return this._partyBelongedTo;
			}
			private set
			{
				this.SetPartyBelongedTo(value);
			}
		}

		[SaveableProperty(570)]
		public PartyBase PartyBelongedToAsPrisoner { get; private set; }

		public Settlement StayingInSettlement
		{
			get
			{
				return this._stayingInSettlement;
			}
			set
			{
				if (this._stayingInSettlement != value)
				{
					if (this._stayingInSettlement != null)
					{
						this._stayingInSettlement.RemoveHeroWithoutParty(this);
						this._stayingInSettlement = null;
					}
					if (value != null)
					{
						value.AddHeroWithoutParty(this);
					}
					this._stayingInSettlement = value;
				}
			}
		}

		public bool IsHumanPlayerCharacter
		{
			get
			{
				return this == Hero.MainHero;
			}
		}

		public bool IsKnownToPlayer
		{
			get
			{
				return this._isKnownToPlayer;
			}
			set
			{
				if (this._isKnownToPlayer != value)
				{
					this._isKnownToPlayer = value;
					CampaignEventDispatcher.Instance.OnPlayerLearnsAboutHero(this);
				}
			}
		}

		public bool HasMet
		{
			get
			{
				return this._hasMet;
			}
			private set
			{
				if (this._hasMet != value)
				{
					this._hasMet = value;
					CampaignEventDispatcher.Instance.OnPlayerMetHero(this);
				}
			}
		}

		public void SetHasMet()
		{
			this.HasMet = true;
			this.LastMeetingTimeWithPlayer = CampaignTime.Now;
		}

		[SaveableProperty(620)]
		public CampaignTime LastMeetingTimeWithPlayer { get; set; }

		public Settlement BornSettlement
		{
			get
			{
				return this._bornSettlement;
			}
			set
			{
				this._bornSettlement = value;
				this._homeSettlement = null;
			}
		}

		public Settlement HomeSettlement
		{
			get
			{
				if (this._homeSettlement == null)
				{
					this.UpdateHomeSettlement();
				}
				return this._homeSettlement;
			}
		}

		public void UpdateHomeSettlement()
		{
			if (this.GovernorOf != null)
			{
				this._homeSettlement = this.GovernorOf.Owner.Settlement;
				return;
			}
			if (this.Spouse != null && this.Spouse.GovernorOf != null)
			{
				this._homeSettlement = this.Spouse.GovernorOf.Owner.Settlement;
				return;
			}
			foreach (Hero hero in this.Children)
			{
				if (hero.GovernorOf != null && hero.Clan == this.Clan)
				{
					this._homeSettlement = hero.GovernorOf.Owner.Settlement;
					return;
				}
			}
			if (this.Father != null && this.Father.GovernorOf != null && this.Father.Clan == this.Clan)
			{
				this._homeSettlement = this.Father.GovernorOf.Owner.Settlement;
				return;
			}
			if (this.Mother != null && this.Mother.GovernorOf != null && this.Mother.Clan == this.Clan)
			{
				this._homeSettlement = this.Mother.GovernorOf.Owner.Settlement;
				return;
			}
			foreach (Hero hero2 in this.Siblings)
			{
				if (hero2.GovernorOf != null && hero2.Clan == this.Clan)
				{
					this._homeSettlement = hero2.GovernorOf.Owner.Settlement;
					return;
				}
			}
			if (this.Clan != null && !this.Clan.IsNeutralClan)
			{
				this._homeSettlement = this.Clan.HomeSettlement;
				return;
			}
			if (this.CompanionOf != null && CampaignData.NeutralFaction != this.CompanionOf)
			{
				this._homeSettlement = this.CompanionOf.HomeSettlement;
				return;
			}
			if (this.IsNotable && this.CurrentSettlement != null)
			{
				this._homeSettlement = this.CurrentSettlement;
				return;
			}
			this._homeSettlement = this._bornSettlement;
		}

		public Settlement CurrentSettlement
		{
			get
			{
				Settlement settlement = null;
				if (this.PartyBelongedTo != null)
				{
					settlement = this.PartyBelongedTo.CurrentSettlement;
				}
				else if (this.PartyBelongedToAsPrisoner != null)
				{
					settlement = (this.PartyBelongedToAsPrisoner.IsSettlement ? this.PartyBelongedToAsPrisoner.Settlement : (this.PartyBelongedToAsPrisoner.IsMobile ? this.PartyBelongedToAsPrisoner.MobileParty.CurrentSettlement : null));
				}
				else if (this.StayingInSettlement != null)
				{
					settlement = this.StayingInSettlement;
				}
				return settlement;
			}
		}

		public int Gold
		{
			get
			{
				return this._gold;
			}
			set
			{
				this._gold = MathF.Max(0, value);
			}
		}

		[SaveableProperty(660)]
		public int RandomValue { get; private set; } = MBRandom.RandomInt(1, int.MaxValue);

		public EquipmentElement BannerItem
		{
			get
			{
				return this.BattleEquipment[EquipmentIndex.ExtraWeaponSlot];
			}
			set
			{
				this.BattleEquipment[EquipmentIndex.ExtraWeaponSlot] = value;
			}
		}

		public float ProbabilityOfDeath
		{
			get
			{
				return Campaign.Current.Models.HeroDeathProbabilityCalculationModel.CalculateHeroDeathProbability(this);
			}
		}

		public Hero Father
		{
			get
			{
				return this._father;
			}
			set
			{
				this._father = value;
				if (this._father != null)
				{
					this._father._children.Add(this);
				}
			}
		}

		public Hero Mother
		{
			get
			{
				return this._mother;
			}
			set
			{
				this._mother = value;
				if (this._mother != null)
				{
					this._mother._children.Add(this);
				}
			}
		}

		public MBReadOnlyList<Hero> ExSpouses
		{
			get
			{
				return this._exSpouses;
			}
		}

		public Hero Spouse
		{
			get
			{
				return this._spouse;
			}
			set
			{
				if (this._spouse != value)
				{
					Hero spouse = this._spouse;
					this._spouse = value;
					if (spouse != null)
					{
						this._exSpouses.Add(spouse);
						spouse.Spouse = null;
					}
					if (this._spouse != null)
					{
						this._spouse.Spouse = this;
					}
				}
			}
		}

		public List<Hero> Children
		{
			get
			{
				return this._children;
			}
		}

		public IEnumerable<Hero> Siblings
		{
			get
			{
				if (this.Father != null)
				{
					foreach (Hero hero in this.Father._children)
					{
						if (hero != this)
						{
							yield return hero;
						}
					}
					List<Hero>.Enumerator enumerator = default(List<Hero>.Enumerator);
				}
				else if (this.Mother != null)
				{
					foreach (Hero hero2 in this.Mother._children)
					{
						if (hero2 != this)
						{
							yield return hero2;
						}
					}
					List<Hero>.Enumerator enumerator = default(List<Hero>.Enumerator);
				}
				yield break;
				yield break;
			}
		}

		public IHeroDeveloper HeroDeveloper
		{
			get
			{
				return this._heroDeveloper;
			}
		}

		public int GetSkillValue(SkillObject skill)
		{
			return this._heroSkills.GetPropertyValue(skill);
		}

		public void SetSkillValue(SkillObject skill, int value)
		{
			this._heroSkills.SetPropertyValue(skill, value);
		}

		public void ClearSkills()
		{
			this._heroSkills.ClearAllProperty();
		}

		public void AddSkillXp(SkillObject skill, float xpAmount)
		{
			IHeroDeveloper heroDeveloper = this._heroDeveloper;
			if (heroDeveloper == null)
			{
				return;
			}
			heroDeveloper.AddSkillXp(skill, xpAmount, true, true);
		}

		public int GetAttributeValue(CharacterAttribute charAttribute)
		{
			return this._characterAttributes.GetPropertyValue(charAttribute);
		}

		internal void SetAttributeValueInternal(CharacterAttribute charAttribute, int value)
		{
			int num = MBMath.ClampInt(value, 0, Campaign.Current.Models.CharacterDevelopmentModel.MaxAttribute);
			this._characterAttributes.SetPropertyValue(charAttribute, num);
		}

		public void ClearAttributes()
		{
			this._characterAttributes.ClearAllProperty();
		}

		public void SetTraitLevel(TraitObject trait, int value)
		{
			value = MBMath.ClampInt(value, trait.MinValue, trait.MaxValue);
			this._heroTraits.SetPropertyValue(trait, value);
		}

		public int GetTraitLevel(TraitObject trait)
		{
			return this._heroTraits.GetPropertyValue(trait);
		}

		public void ClearTraits()
		{
			this._heroTraits.ClearAllProperty();
		}

		internal void SetPerkValueInternal(PerkObject perk, bool value)
		{
			this._heroPerks.SetPropertyValue(perk, value ? 1 : 0);
			if (value)
			{
				CampaignEventDispatcher.Instance.OnPerkOpened(this, perk);
			}
		}

		public bool GetPerkValue(PerkObject perk)
		{
			return this._heroPerks.GetPropertyValue(perk) != 0;
		}

		public void ClearPerks()
		{
			this._heroPerks.ClearAllProperty();
			this.HitPoints = MathF.Min(this.HitPoints, this.MaxHitPoints);
		}

		public static Hero CreateHero(string stringID)
		{
			stringID = Campaign.Current.CampaignObjectManager.FindNextUniqueStringId<Hero>(stringID);
			Hero hero = new Hero(stringID);
			Campaign.Current.CampaignObjectManager.AddHero(hero);
			return hero;
		}

		public Hero(string stringID)
		{
			base.StringId = stringID;
			this.SetHeroDeveloper(new HeroDeveloper(this));
			this._exSpouses = new MBList<Hero>();
			this.Init();
		}

		public Hero()
		{
			this.SetHeroDeveloper(new HeroDeveloper(this));
			this._exSpouses = new MBList<Hero>();
			this.Init();
		}

		public void Init()
		{
			this.BattleEquipment = null;
			this.CivilianEquipment = null;
			this._gold = 0;
			this.OwnedCaravans = new List<CaravanPartyComponent>();
			this.OwnedAlleys = new List<Alley>();
			this.SpecialItems = new List<ItemObject>();
			this._health = 1;
			this._deathDay = CampaignTime.Never;
			this.HeroState = Hero.CharacterStates.NotSpawned;
			this._heroSkills = new CharacterSkills();
			this._heroTraits = new CharacterTraits();
			this._heroPerks = new CharacterPerks();
			this._characterAttributes = new CharacterAttributes();
			this.VolunteerTypes = new CharacterObject[6];
		}

		public void SetHeroDeveloper(IHeroDeveloper heroDeveloper)
		{
			this._heroDeveloper = heroDeveloper;
		}

		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData, ObjectLoadData objectLoadData)
		{
			this.OwnedCaravans = new List<CaravanPartyComponent>();
			this.OwnedAlleys = new List<Alley>();
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("e1.7.3.0", 17949))
			{
				this.PreferredUpgradeFormation = FormationClass.NumberOfAllFormations;
			}
			if (this._firstName == null)
			{
				this._firstName = this.Name;
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("e1.8.0.0", 17949))
			{
				object memberValueBySaveId;
				bool flag;
				bool flag2;
				if ((memberValueBySaveId = objectLoadData.GetMemberValueBySaveId(310)) is bool)
				{
					flag = (bool)memberValueBySaveId;
					flag2 = true;
				}
				else
				{
					flag2 = false;
				}
				this.IsNobleForOldSaves = flag2 && flag;
			}
		}

		protected override void PreAfterLoad()
		{
			Clan supporterOf = this._supporterOf;
			if (supporterOf != null)
			{
				supporterOf.OnSupporterNotableAdded(this);
			}
			if (this._companionOf != null)
			{
				this._companionOf.OnCompanionAdded(this);
			}
			else
			{
				Clan clan = this._clan;
				if (clan != null)
				{
					clan.OnLordAdded(this);
				}
			}
			if (this.CurrentSettlement != null && this.PartyBelongedTo == null && this.PartyBelongedToAsPrisoner == null)
			{
				this.CurrentSettlement.AddHeroWithoutParty(this);
			}
			if (MBSaveLoad.LastLoadedGameVersion <= ApplicationVersion.FromString("v1.1.0", 17949) && this.FirstName != null && this.Name != null && this != Hero.MainHero)
			{
				if (this.Name.Attributes == null || !this.Name.Attributes.ContainsKey("FIRSTNAME"))
				{
					this.Name.SetTextVariable("FIRSTNAME", this.FirstName);
				}
				if (this.Name.Attributes == null || !this.Name.Attributes.ContainsKey("FEMALE"))
				{
					this.Name.SetTextVariable("FEMALE", this.IsFemale ? 1 : 0);
				}
			}
		}

		protected override void AfterLoad()
		{
			this._heroPerks.ClearChangedPerks(this);
			this.HeroDeveloper.AfterLoad();
			if (this != Hero.MainHero && this.IsPrisoner && this != Hero.MainHero && this.IsPrisoner && this.PartyBelongedToAsPrisoner == null && this.CurrentSettlement != null)
			{
				this.PartyBelongedToAsPrisoner = this.CurrentSettlement.Party;
			}
			MobileParty mainParty = MobileParty.MainParty;
			if (this != Hero.MainHero && this.PartyBelongedTo == mainParty && !mainParty.MemberRoster.Contains(this.CharacterObject))
			{
				MakeHeroFugitiveAction.Apply(this);
			}
			if (mainParty.MemberRoster.Contains(this.CharacterObject) && this.PartyBelongedTo != mainParty)
			{
				mainParty.MemberRoster.RemoveTroop(this.CharacterObject, mainParty.MemberRoster.GetElementNumber(this.CharacterObject), default(UniqueTroopDescriptor), 0);
				if (!Campaign.Current.IssueManager.IssueSolvingCompanionList.Contains(this))
				{
					MobileParty partyBelongedTo = this.PartyBelongedTo;
					if (partyBelongedTo != null && !partyBelongedTo.IsCaravan)
					{
						MakeHeroFugitiveAction.Apply(this);
					}
				}
			}
			if (this.Spouse != null && (this.Spouse.Clan != this.Clan || this.Clan == CampaignData.NeutralFaction || this.Age < (float)Campaign.Current.Models.AgeModel.HeroComesOfAge))
			{
				Hero spouse = this.Spouse;
				this.Spouse = null;
				this._exSpouses.Remove(spouse);
				spouse._exSpouses.Remove(this);
				MBReadOnlyList<LogEntry> gameActionLogs = Campaign.Current.LogEntryHistory.GameActionLogs;
				for (int i = gameActionLogs.Count - 1; i >= 0; i--)
				{
					CharacterMarriedLogEntry characterMarriedLogEntry;
					if ((characterMarriedLogEntry = gameActionLogs[i] as CharacterMarriedLogEntry) != null && (characterMarriedLogEntry.IsVisibleInEncyclopediaPageOf<Hero>(this) || characterMarriedLogEntry.IsVisibleInEncyclopediaPageOf<Hero>(this)))
					{
						Campaign.Current.LogEntryHistory.DeleteLogAtIndex(i);
					}
				}
				Hero hero = this.Mother ?? this.Father;
				if (hero != null)
				{
					this.Clan = hero.Clan;
				}
				else if (this.Age < (float)Campaign.Current.Models.AgeModel.HeroComesOfAge)
				{
					KillCharacterAction.ApplyByRemove(this, false, true);
				}
				else
				{
					Clan clan = null;
					int num = int.MaxValue;
					for (int j = 0; j < Clan.All.Count<Clan>(); j++)
					{
						Clan clan2 = Clan.All[j];
						if (clan2 != Clan.PlayerClan && clan2 != CampaignData.NeutralFaction && !clan2.IsBanditFaction && !clan2.IsRebelClan && !clan2.IsEliminated && this.Culture == clan2.Culture && clan2.Heroes.Count < num)
						{
							num = clan2.Heroes.Count;
							clan = clan2;
						}
					}
					if (clan == null)
					{
						clan = Clan.All.GetRandomElementWithPredicate((Clan currentClan) => currentClan != Clan.PlayerClan && currentClan != CampaignData.NeutralFaction && !currentClan.IsBanditFaction && !currentClan.IsRebelClan && !currentClan.IsEliminated);
					}
					this.Clan = clan;
				}
			}
			if (MBSaveLoad.IsUpdatingGameVersion && MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.1.1", 17949) && !this.IsDead && this.CurrentSettlement == null && this.IsNotable && this.BornSettlement != null)
			{
				TeleportHeroAction.ApplyImmediateTeleportToSettlement(this, this.BornSettlement);
				if (!this.IsActive)
				{
					this.ChangeState(Hero.CharacterStates.Active);
				}
				this.UpdateHomeSettlement();
			}
		}

		public void ChangeState(Hero.CharacterStates newState)
		{
			Hero.CharacterStates heroState = this._heroState;
			this._heroState = newState;
			Campaign.Current.CampaignObjectManager.HeroStateChanged(this, heroState);
		}

		public bool IsHealthFull()
		{
			return this.HitPoints >= this.CharacterObject.MaxHitPoints();
		}

		private void HealByAmountInternal(int healingAmount, bool addXp = false)
		{
			if (!this.IsHealthFull())
			{
				int num = MathF.Min(healingAmount, this.CharacterObject.MaxHitPoints() - this.HitPoints);
				this.HitPoints += num;
				if (addXp)
				{
					SkillLevelingManager.OnHeroHealedWhileWaiting(this, num);
				}
			}
		}

		public void Heal(int healAmount, bool addXp = false)
		{
			int heroesEffectedHealingAmount = Campaign.Current.Models.PartyHealingModel.GetHeroesEffectedHealingAmount(this, (float)healAmount);
			this.HealByAmountInternal(heroesEffectedHealingAmount, addXp);
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			CharacterObject @object = MBObjectManager.Instance.GetObject<CharacterObject>(base.StringId);
			this.SetCharacterObject(@object);
			this.StaticBodyProperties = this.CharacterObject.GetBodyPropertiesMin(false).StaticProperties;
			DynamicBodyProperties dynamicBodyProperties = this.CharacterObject.GetBodyPropertiesMin(true).DynamicProperties;
			if (dynamicBodyProperties == DynamicBodyProperties.Invalid)
			{
				dynamicBodyProperties = DynamicBodyProperties.Default;
			}
			this.Weight = dynamicBodyProperties.Weight;
			this.Build = dynamicBodyProperties.Build;
			XmlAttribute xmlAttribute = node.Attributes["alive"];
			this._heroState = ((xmlAttribute != null && xmlAttribute.Value == "false") ? Hero.CharacterStates.Dead : Hero.CharacterStates.NotSpawned);
			if (this.IsDead)
			{
				HeroHelper.GetRandomDeathDayAndBirthDay((int)@object.Age, out this._birthDay, out this._deathDay);
			}
			this.CharacterObject.HeroObject = this;
			this.Father = objectManager.ReadObjectReferenceFromXml("father", typeof(Hero), node) as Hero;
			this.Mother = objectManager.ReadObjectReferenceFromXml("mother", typeof(Hero), node) as Hero;
			if (this.Spouse == null)
			{
				this.Spouse = objectManager.ReadObjectReferenceFromXml("spouse", typeof(Hero), node) as Hero;
			}
			Clan clan = objectManager.ReadObjectReferenceFromXml("faction", typeof(Clan), node) as Clan;
			if (clan.StringId != "neutral")
			{
				this.Clan = clan;
			}
			this.EncyclopediaText = ((node.Attributes["text"] != null) ? new TextObject(node.Attributes["text"].Value, null) : TextObject.Empty);
			XmlNode xmlNode = node.Attributes["preferred_upgrade_formation"];
			this.PreferredUpgradeFormation = FormationClass.NumberOfAllFormations;
			FormationClass formationClass;
			if (xmlNode != null && Enum.TryParse<FormationClass>(xmlNode.InnerText, true, out formationClass))
			{
				this.PreferredUpgradeFormation = formationClass;
			}
			ItemObject itemObject = ((node.Attributes["banner_item"] != null) ? MBObjectManager.Instance.GetObject<ItemObject>(node.Attributes["banner_item"].Value) : null);
			if (itemObject != null)
			{
				this.BannerItem = new EquipmentElement(itemObject, null, null, false);
			}
		}

		public bool CanLeadParty()
		{
			bool flag = true;
			CampaignEventDispatcher.Instance.CanHeroLeadParty(this, ref flag);
			return flag;
		}

		public static TextObject SetHeroEncyclopediaTextAndLinks(Hero o)
		{
			StringHelpers.SetCharacterProperties("LORD", o.CharacterObject, null, false);
			MBTextManager.SetTextVariable("TITLE", HeroHelper.GetTitleInIndefiniteCase(o), false);
			MBTextManager.SetTextVariable("REPUTATION", CharacterHelper.GetReputationDescription(o.CharacterObject), false);
			MBTextManager.SetTextVariable("FACTION_NAME", GameTexts.FindText("str_neutral_term_for_culture", o.MapFaction.IsMinorFaction ? o.Culture.StringId : o.MapFaction.Culture.StringId), false);
			if (o.MapFaction.Culture.StringId == "empire")
			{
				MBTextManager.SetTextVariable("FACTION_NAME", "{=empirefaction}Empire", false);
			}
			MBTextManager.SetTextVariable("CLAN_NAME", o.Clan.Name, false);
			if (o.Clan.IsMinorFaction || o.Clan.IsRebelClan)
			{
				if (o.Clan == Hero.MainHero.Clan)
				{
					MBTextManager.SetTextVariable("CLAN_DESCRIPTION", "{=REWGj2ge}a rising new clan", false);
				}
				else if (o.Clan.IsSect)
				{
					MBTextManager.SetTextVariable("CLAN_DESCRIPTION", "{=IlRC9Drl}a religious sect", false);
				}
				else if (o.Clan.IsClanTypeMercenary)
				{
					MBTextManager.SetTextVariable("CLAN_DESCRIPTION", "{=5cH6ssDI}a mercenary company", false);
				}
				else if (o.Clan.IsNomad)
				{
					MBTextManager.SetTextVariable("CLAN_DESCRIPTION", "{=nt1ra97u}a nomadic clan", false);
				}
				else if (o.Clan.IsMafia)
				{
					MBTextManager.SetTextVariable("CLAN_DESCRIPTION", "{=EmBEupR5}a secret society", false);
				}
				else
				{
					MBTextManager.SetTextVariable("CLAN_DESCRIPTION", "{=KZxKVby0}an organization", false);
				}
				if (o == Hero.MainHero && o.GetTraitLevel(DefaultTraits.Mercy) == 0 && o.GetTraitLevel(DefaultTraits.Honor) == 0 && o.GetTraitLevel(DefaultTraits.Generosity) == 0 && o.GetTraitLevel(DefaultTraits.Valor) == 0 && o.GetTraitLevel(DefaultTraits.Calculating) == 0)
				{
					return new TextObject("{=FHjM62IY}{LORD.FIRSTNAME} is a member of the {CLAN_NAME}, a rising new clan. {?LORD.GENDER}She{?}He{\\?} is still making {?LORD.GENDER}her{?}his{\\?} reputation.", null);
				}
				return new TextObject("{=9Obe3S6L}{LORD.FIRSTNAME} is a member of the {CLAN_NAME}, {CLAN_DESCRIPTION} from the lands of the {FACTION_NAME}. {?LORD.GENDER}She{?}He{\\?} has the reputation of being {REPUTATION}.", null);
			}
			else
			{
				List<Kingdom> list = Campaign.Current.Kingdoms.Where((Kingdom x) => x.Culture == o.MapFaction.Culture).ToList<Kingdom>();
				if (list.Count > 1)
				{
					MBTextManager.SetTextVariable("RULER", o.MapFaction.Leader.Name, false);
				}
				MBTextManager.SetTextVariable("CLAN_DESCRIPTION", "{=KzSeg8ks}a noble family", false);
				if (list.Count == 1)
				{
					if (o.Clan.Leader == o)
					{
						return new TextObject("{=6d4ZTvGv}{LORD.NAME} is {TITLE} of the {FACTION_NAME} and head of the {CLAN_NAME}, {CLAN_DESCRIPTION} of the realm. {?LORD.GENDER}She{?}He{\\?} has the reputation of being {REPUTATION}.", null);
					}
					return new TextObject("{=o5AUljbW}{LORD.NAME} is a member of the {CLAN_NAME}, {CLAN_DESCRIPTION} of the {FACTION_NAME}. {?LORD.GENDER}She{?}He{\\?} has the reputation of being {REPUTATION}.", null);
				}
				else
				{
					if (list.Count <= 1)
					{
						return new TextObject("{=!}Placeholder text", null);
					}
					if (o.Clan.Leader == o)
					{
						return new TextObject("{=JuPUG5wX}{LORD.NAME} is {TITLE} of the {FACTION_NAME} and head of the {CLAN_NAME}, {CLAN_DESCRIPTION} that is backing {RULER} in the civil war. {?LORD.GENDER}She{?}He{\\?} has the reputation of being {REPUTATION}.", null);
					}
					return new TextObject("{=0bPb5btR}{LORD.NAME} is a member of the {CLAN_NAME}, {CLAN_DESCRIPTION} of the {FACTION_NAME} that is backing {RULER} in the civil war. {?LORD.GENDER}She{?}He{\\?} has the reputation of being {REPUTATION}.", null);
				}
			}
		}

		public bool CanHeroEquipmentBeChanged()
		{
			bool flag = true;
			CampaignEventDispatcher.Instance.CanHeroEquipmentBeChanged(this, ref flag);
			return flag;
		}

		public bool CanMarry()
		{
			if (!Campaign.Current.Models.MarriageModel.IsSuitableForMarriage(this))
			{
				return false;
			}
			bool flag = true;
			CampaignEventDispatcher.Instance.CanHeroMarry(this, ref flag);
			return flag;
		}

		private void SetPartyBelongedTo(MobileParty party)
		{
			if (this._partyBelongedTo != party && this._partyBelongedTo != null && this._partyBelongedTo.LeaderHero == this)
			{
				this._partyBelongedTo.PartyComponent.ChangePartyLeader(null);
			}
			this._partyBelongedTo = party;
		}

		public bool CanBeGovernorOrHavePartyRole()
		{
			if (this.IsPrisoner)
			{
				return false;
			}
			bool flag = true;
			CampaignEventDispatcher.Instance.CanBeGovernorOrHavePartyRole(this, ref flag);
			return flag;
		}

		public bool CanDie(KillCharacterAction.KillCharacterActionDetail causeOfDeath)
		{
			if (CampaignOptions.IsLifeDeathCycleDisabled && causeOfDeath == KillCharacterAction.KillCharacterActionDetail.DiedOfOldAge)
			{
				return false;
			}
			bool flag = true;
			CampaignEventDispatcher.Instance.CanHeroDie(this, causeOfDeath, ref flag);
			return flag;
		}

		public bool CanBecomePrisoner()
		{
			if (this != Hero.MainHero)
			{
				return true;
			}
			bool flag = true;
			CampaignEventDispatcher.Instance.CanHeroBecomePrisoner(this, ref flag);
			return flag;
		}

		public bool CanMoveToSettlement()
		{
			bool flag = true;
			CampaignEventDispatcher.Instance.CanMoveToSettlement(this, ref flag);
			return flag;
		}

		public bool CanHaveQuestsOrIssues()
		{
			if (this.Issue != null)
			{
				return false;
			}
			bool flag = true;
			CampaignEventDispatcher.Instance.CanHaveQuestsOrIssues(this, ref flag);
			return flag;
		}

		public string AssignVoice()
		{
			float age = this.CharacterObject.Age;
			this.GetTraitLevel(DefaultTraits.Mercy);
			int traitLevel = this.GetTraitLevel(DefaultTraits.Generosity);
			this.GetTraitLevel(DefaultTraits.Valor);
			int traitLevel2 = this.GetTraitLevel(DefaultTraits.Calculating);
			int traitLevel3 = this.GetTraitLevel(DefaultTraits.Honor);
			int traitLevel4 = this.GetTraitLevel(DefaultTraits.Politician);
			int traitLevel5 = this.GetTraitLevel(DefaultTraits.Commander);
			string text = null;
			if (!(this.CharacterObject.Culture.StringId == "empire"))
			{
				if (this.CharacterObject.Culture.StringId == "vlandia")
				{
					Clan clan = this.Clan;
					if ((clan != null && clan.IsNoble) || this.IsMerchant)
					{
						goto IL_BE;
					}
				}
				if (this.CharacterObject.Culture.StringId == "empire" || this.CharacterObject.Culture.StringId == "vlandia")
				{
					text = "lowerwest";
					goto IL_18E;
				}
				if (this.CharacterObject.Culture.StringId == "sturgia" || this.CharacterObject.Culture.StringId == "battania")
				{
					text = "north";
					goto IL_18E;
				}
				if (this.CharacterObject.Culture.StringId == "aserai" || this.CharacterObject.Culture.StringId == "khuzait")
				{
					text = "east";
					goto IL_18E;
				}
				goto IL_18E;
			}
			IL_BE:
			text = "upperwest";
			IL_18E:
			string text2 = "earnest";
			if (traitLevel4 < 3 && traitLevel < 0)
			{
				text2 = "curt";
			}
			else if (traitLevel4 < 3 && traitLevel5 < 5)
			{
				text2 = "softspoken";
			}
			else if (traitLevel2 - traitLevel3 > -1)
			{
				text2 = "ironic";
			}
			return text2 + "_" + text;
		}

		public void AddInfluenceWithKingdom(float additionalInfluence)
		{
			float randomFloat = MBRandom.RandomFloat;
			ChangeClanInfluenceAction.Apply(this.Clan, (float)((int)additionalInfluence + ((randomFloat < additionalInfluence - (float)MathF.Floor(additionalInfluence)) ? 1 : 0)));
		}

		public float GetRelationWithPlayer()
		{
			return (float)Hero.MainHero.GetRelation(this);
		}

		public float GetUnmodifiedClanLeaderRelationshipWithPlayer()
		{
			return (float)Hero.MainHero.GetBaseHeroRelation(this);
		}

		public void SetTextVariables()
		{
			MBTextManager.SetTextVariable("SALUTATION_BY_PLAYER", (!CharacterObject.OneToOneConversationCharacter.IsFemale) ? GameTexts.FindText("str_my_lord", null) : GameTexts.FindText("str_my_lady", null), false);
			if (!TextObject.IsNullOrEmpty(this.FirstName))
			{
				MBTextManager.SetTextVariable("FIRST_NAME", this.FirstName, false);
			}
			else
			{
				MBTextManager.SetTextVariable("FIRST_NAME", this.Name, false);
			}
			MBTextManager.SetTextVariable("GENDER", this.IsFemale ? 1 : 0);
		}

		public void SetPersonalRelation(Hero otherHero, int value)
		{
			value = MBMath.ClampInt(value, Campaign.Current.Models.DiplomacyModel.MinRelationLimit, Campaign.Current.Models.DiplomacyModel.MaxRelationLimit);
			CharacterRelationManager.SetHeroRelation(this, otherHero, value);
		}

		public int GetRelation(Hero otherHero)
		{
			if (otherHero == this)
			{
				return 0;
			}
			return Campaign.Current.Models.DiplomacyModel.GetEffectiveRelation(this, otherHero);
		}

		public int GetBaseHeroRelation(Hero otherHero)
		{
			return Campaign.Current.Models.DiplomacyModel.GetBaseRelation(this, otherHero);
		}

		public bool IsEnemy(Hero otherHero)
		{
			return CharacterRelationManager.GetHeroRelation(this, otherHero) < Campaign.Current.Models.DiplomacyModel.MinNeutralRelationLimit;
		}

		public bool IsFriend(Hero otherHero)
		{
			return CharacterRelationManager.GetHeroRelation(this, otherHero) > Campaign.Current.Models.DiplomacyModel.MaxNeutralRelationLimit;
		}

		public bool IsNeutral(Hero otherHero)
		{
			return !this.IsFriend(otherHero) && !this.IsEnemy(otherHero);
		}

		public void ModifyHair(int hair, int beard, int tattoo)
		{
			BodyProperties bodyProperties = this.BodyProperties;
			FaceGen.SetHair(ref bodyProperties, hair, beard, tattoo);
			this.StaticBodyProperties = bodyProperties.StaticProperties;
		}

		public void ModifyPlayersFamilyAppearance(StaticBodyProperties staticBodyProperties)
		{
			this.StaticBodyProperties = staticBodyProperties;
		}

		public MBReadOnlyList<Workshop> OwnedWorkshops
		{
			get
			{
				return this._ownedWorkshops;
			}
		}

		public void AddOwnedWorkshop(Workshop workshop)
		{
			if (!this._ownedWorkshops.Contains(workshop))
			{
				this._ownedWorkshops.Add(workshop);
			}
		}

		public void RemoveOwnedWorkshop(Workshop workshop)
		{
			if (this._ownedWorkshops.Contains(workshop))
			{
				this._ownedWorkshops.Remove(workshop);
			}
		}

		public static Hero FindFirst(Func<Hero, bool> predicate)
		{
			CharacterObject characterObject = Campaign.Current.Characters.FirstOrDefault((CharacterObject x) => x.IsHero && predicate(x.HeroObject));
			if (characterObject == null)
			{
				return null;
			}
			return characterObject.HeroObject;
		}

		public static IEnumerable<Hero> FindAll(Func<Hero, bool> predicate)
		{
			return from x in Campaign.Current.Characters
				where x.IsHero && predicate(x.HeroObject)
				select x.HeroObject;
		}

		public static MBReadOnlyList<Hero> AllAliveHeroes
		{
			get
			{
				return Campaign.Current.AliveHeroes;
			}
		}

		public static MBReadOnlyList<Hero> DeadOrDisabledHeroes
		{
			get
			{
				return Campaign.Current.DeadOrDisabledHeroes;
			}
		}

		public static Hero MainHero
		{
			get
			{
				return CharacterObject.PlayerCharacter.HeroObject;
			}
		}

		public static Hero OneToOneConversationHero
		{
			get
			{
				return Campaign.Current.ConversationManager.OneToOneConversationHero;
			}
		}

		public static bool IsMainHeroIll
		{
			get
			{
				return Campaign.Current.MainHeroIllDays != -1;
			}
		}

		public void MakeWounded(Hero killerHero = null, KillCharacterAction.KillCharacterActionDetail deathMarkDetail = KillCharacterAction.KillCharacterActionDetail.None)
		{
			this.DeathMark = deathMarkDetail;
			this.DeathMarkKillerHero = killerHero;
			this.HitPoints = 1;
		}

		public void AddDeathMark(Hero killerHero = null, KillCharacterAction.KillCharacterActionDetail deathMarkDetail = KillCharacterAction.KillCharacterActionDetail.None)
		{
			this.DeathMark = deathMarkDetail;
			this.DeathMarkKillerHero = killerHero;
		}

		internal void OnAddedToParty(MobileParty mobileParty)
		{
			this.PartyBelongedTo = mobileParty;
			this.StayingInSettlement = null;
		}

		internal void OnRemovedFromParty(MobileParty mobileParty)
		{
			this.PartyBelongedTo = null;
		}

		internal void OnAddedToPartyAsPrisoner(PartyBase party)
		{
			this.PartyBelongedToAsPrisoner = party;
			this.PartyBelongedTo = null;
		}

		internal void OnRemovedFromPartyAsPrisoner(PartyBase party)
		{
			this.PartyBelongedToAsPrisoner = null;
		}

		TextObject ITrackableBase.GetName()
		{
			return this.Name;
		}

		public Vec3 GetPosition()
		{
			Vec3 vec = Vec3.Zero;
			if (this.CurrentSettlement != null)
			{
				vec = this.CurrentSettlement.GetLogicalPosition();
			}
			else if (this.IsPrisoner && this.PartyBelongedToAsPrisoner != null)
			{
				vec = (this.PartyBelongedToAsPrisoner.IsSettlement ? this.PartyBelongedToAsPrisoner.Settlement.GetLogicalPosition() : this.PartyBelongedToAsPrisoner.MobileParty.GetLogicalPosition());
			}
			else if (this.PartyBelongedTo != null)
			{
				vec = this.PartyBelongedTo.GetLogicalPosition();
			}
			return vec;
		}

		public IMapPoint GetMapPoint()
		{
			if (this.CurrentSettlement != null)
			{
				return this.CurrentSettlement;
			}
			if (!this.IsPrisoner || this.PartyBelongedToAsPrisoner == null)
			{
				return this.PartyBelongedTo;
			}
			if (!this.PartyBelongedToAsPrisoner.IsSettlement)
			{
				return this.PartyBelongedToAsPrisoner.MobileParty;
			}
			return this.PartyBelongedToAsPrisoner.Settlement;
		}

		public float GetTrackDistanceToMainAgent()
		{
			return this.GetPosition().Distance(Hero.MainHero.GetPosition());
		}

		public bool CheckTracked(BasicCharacterObject basicCharacter)
		{
			return this.CharacterObject == basicCharacter;
		}

		private void SetInitialValuesFromCharacter(CharacterObject characterObject)
		{
			foreach (SkillObject skillObject in Skills.All)
			{
				this.SetSkillValue(skillObject, characterObject.GetSkillValue(skillObject));
			}
			foreach (TraitObject traitObject in TraitObject.All)
			{
				this.SetTraitLevel(traitObject, characterObject.GetTraitLevel(traitObject));
			}
			this.Level = characterObject.Level;
			this.SetName(characterObject.Name, characterObject.Name);
			this.Culture = characterObject.Culture;
			this.HairTags = characterObject.HairTags;
			this.BeardTags = characterObject.BeardTags;
			this.TattooTags = characterObject.TattooTags;
			this._defaultAge = characterObject.Age;
			this._birthDay = HeroHelper.GetRandomBirthDayForAge(this._defaultAge);
			this.HitPoints = characterObject.MaxHitPoints();
			this.IsFemale = characterObject.IsFemale;
			this.Occupation = this.CharacterObject.GetDefaultOccupation();
			List<Equipment> list = characterObject.AllEquipments.Where((Equipment t) => !t.IsEmpty() && !t.IsCivilian).ToList<Equipment>();
			List<Equipment> list2 = characterObject.AllEquipments.Where((Equipment t) => !t.IsEmpty() && t.IsCivilian).ToList<Equipment>();
			if (list.IsEmpty<Equipment>())
			{
				list.AddRange(CampaignData.NeutralFaction.Culture.DefaultBattleEquipmentRoster.AllEquipments);
			}
			if (list2.IsEmpty<Equipment>())
			{
				list2.AddRange(CampaignData.NeutralFaction.Culture.DefaultCivilianEquipmentRoster.AllEquipments);
			}
			if (!list.IsEmpty<Equipment>() && !list2.IsEmpty<Equipment>())
			{
				Equipment equipment = list[this.RandomInt(list.Count)];
				Equipment equipment2 = list2[this.RandomInt(list2.Count)];
				this.BattleEquipment = equipment.Clone(false);
				this.CivilianEquipment = equipment2.Clone(false);
			}
		}

		public void ResetEquipments()
		{
			this.BattleEquipment = this.Template.FirstBattleEquipment.Clone(false);
			this.CivilianEquipment = this.Template.FirstCivilianEquipment.Clone(false);
		}

		public void ChangeHeroGold(int changeAmount)
		{
			int num;
			if (changeAmount > 2147483647 - this._gold)
			{
				num = int.MaxValue;
			}
			else
			{
				num = this._gold + changeAmount;
			}
			this.Gold = num;
		}

		public void CheckInvalidEquipmentsAndReplaceIfNeeded()
		{
			for (int i = 0; i < 12; i++)
			{
				if (this.BattleEquipment[i].Item == DefaultItems.Trash)
				{
					this.HandleInvalidItem(true, i);
				}
				else if (this.BattleEquipment[i].Item != null)
				{
					if (!this.BattleEquipment[i].Item.IsReady)
					{
						if (MBObjectManager.Instance.GetObject(this.BattleEquipment[i].Item.Id) == this.BattleEquipment[i].Item)
						{
							MBObjectManager.Instance.UnregisterObject(this.BattleEquipment[i].Item);
						}
						this.HandleInvalidItem(true, i);
						MobileParty partyBelongedTo = this.PartyBelongedTo;
						if (partyBelongedTo != null)
						{
							partyBelongedTo.ItemRoster.AddToCounts(DefaultItems.Trash, 1);
						}
					}
					ItemModifier itemModifier = this.BattleEquipment[i].ItemModifier;
					if (itemModifier != null && !itemModifier.IsReady)
					{
						this.HandleInvalidModifier(true, i);
					}
				}
				if (this.CivilianEquipment[i].Item == DefaultItems.Trash)
				{
					this.HandleInvalidItem(false, i);
				}
				else if (this.CivilianEquipment[i].Item != null)
				{
					if (!this.CivilianEquipment[i].Item.IsReady)
					{
						if (MBObjectManager.Instance.GetObject(this.CivilianEquipment[i].Item.Id) == this.CivilianEquipment[i].Item)
						{
							MBObjectManager.Instance.UnregisterObject(this.CivilianEquipment[i].Item);
						}
						this.HandleInvalidItem(false, i);
						MobileParty partyBelongedTo2 = this.PartyBelongedTo;
						if (partyBelongedTo2 != null)
						{
							partyBelongedTo2.ItemRoster.AddToCounts(DefaultItems.Trash, 1);
						}
					}
					ItemModifier itemModifier2 = this.CivilianEquipment[i].ItemModifier;
					if (itemModifier2 != null && !itemModifier2.IsReady)
					{
						this.HandleInvalidModifier(false, i);
					}
				}
			}
		}

		private void HandleInvalidItem(bool isBattleEquipment, int i)
		{
			if (this.IsHumanPlayerCharacter)
			{
				if (isBattleEquipment)
				{
					this.BattleEquipment[i] = EquipmentElement.Invalid;
					return;
				}
				this.CivilianEquipment[i] = EquipmentElement.Invalid;
				return;
			}
			else
			{
				List<Equipment> list;
				if (!isBattleEquipment)
				{
					list = this.CharacterObject.CivilianEquipments.Where((Equipment t) => !t.IsEmpty()).ToList<Equipment>();
				}
				else
				{
					list = this.CharacterObject.BattleEquipments.Where((Equipment t) => !t.IsEmpty()).ToList<Equipment>();
				}
				List<Equipment> list2 = list;
				EquipmentElement equipmentElement = list2[this.RandomInt(list2.Count)][i];
				if (equipmentElement.IsEmpty || !equipmentElement.Item.IsReady)
				{
					equipmentElement = EquipmentElement.Invalid;
				}
				if (!isBattleEquipment)
				{
					EquipmentElement equipmentElement2 = this.CivilianEquipment[i];
				}
				else
				{
					EquipmentElement equipmentElement3 = this.BattleEquipment[i];
				}
				if (isBattleEquipment)
				{
					this.BattleEquipment[i] = equipmentElement;
					return;
				}
				this.CivilianEquipment[i] = equipmentElement;
				return;
			}
		}

		private void HandleInvalidModifier(bool isBattleEquipment, int i)
		{
			if (isBattleEquipment)
			{
				this.BattleEquipment[i] = new EquipmentElement(this.BattleEquipment[i].Item, null, null, false);
				return;
			}
			this.CivilianEquipment[i] = new EquipmentElement(this.CivilianEquipment[i].Item, null, null, false);
		}

		[SaveableField(120)]
		public int LastTimeStampForActivity;

		public const int MaximumNumberOfVolunteers = 6;

		[SaveableField(130)]
		public CharacterObject[] VolunteerTypes;

		[SaveableField(160)]
		private float _passedTimeAtHomeSettlement;

		[SaveableField(170)]
		private CharacterObject _characterObject;

		[SaveableField(180)]
		private TextObject _firstName;

		[SaveableField(181)]
		private TextObject _name;

		[SaveableField(201)]
		public string HairTags = "";

		[SaveableField(202)]
		public string BeardTags = "";

		[SaveableField(203)]
		public string TattooTags = "";

		[SaveableField(260)]
		private Hero.CharacterStates _heroState;

		[SaveableField(270)]
		private CharacterTraits _heroTraits;

		[SaveableField(280)]
		private CharacterPerks _heroPerks;

		[SaveableField(290)]
		private CharacterSkills _heroSkills;

		[SaveableField(301)]
		private CharacterAttributes _characterAttributes;

		internal bool IsNobleForOldSaves;

		[SaveableField(370)]
		public int Level;

		public const int HeroWoundedHealthLevel = 20;

		[SaveableField(380)]
		private Clan _companionOf;

		[SaveableField(420)]
		public int SpcDaysInLocation;

		[SaveableField(430)]
		private int _health;

		[SaveableField(441)]
		private float _defaultAge;

		[SaveableField(440)]
		private CampaignTime _birthDay;

		[SaveableField(450)]
		private CampaignTime _deathDay;

		[SaveableField(460)]
		private float _power;

		[SaveableField(500)]
		private Clan _clan;

		[SaveableField(510)]
		private Clan _supporterOf;

		[SaveableField(520)]
		private Town _governorOf;

		[SaveableField(530)]
		private MBList<Workshop> _ownedWorkshops = new MBList<Workshop>();

		[SaveableField(551)]
		public CultureObject Culture;

		[XmlIgnore]
		[SaveableField(560)]
		private MobileParty _partyBelongedTo;

		[SaveableField(580)]
		private Settlement _stayingInSettlement;

		[SaveableField(590)]
		public List<ItemObject> SpecialItems;

		[SaveableField(412)]
		private bool _isKnownToPlayer;

		[SaveableField(610)]
		private bool _hasMet;

		[SaveableField(630)]
		private Settlement _bornSettlement;

		[CachedData]
		private Settlement _homeSettlement;

		[SaveableField(650)]
		private int _gold;

		[SaveableField(700)]
		private Hero _father;

		[SaveableField(710)]
		private Hero _mother;

		[SaveableField(720)]
		private readonly MBList<Hero> _exSpouses;

		[SaveableField(730)]
		private Hero _spouse;

		[SaveableField(740)]
		private readonly List<Hero> _children = new List<Hero>();

		[SaveableField(760)]
		public bool IsPregnant;

		[SaveableField(770)]
		private IHeroDeveloper _heroDeveloper;

		public enum CharacterStates
		{
			NotSpawned,
			Active,
			Fugitive,
			Prisoner,
			Released,
			Dead,
			Disabled,
			Traveling
		}
	}
}
