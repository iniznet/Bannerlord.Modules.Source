using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x02000057 RID: 87
	public class CharacterRelationManager
	{
		// Token: 0x06000952 RID: 2386 RVA: 0x00036AC2 File Offset: 0x00034CC2
		internal static void AutoGeneratedStaticCollectObjectsCharacterRelationManager(object o, List<object> collectedObjects)
		{
			((CharacterRelationManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000953 RID: 2387 RVA: 0x00036AD0 File Offset: 0x00034CD0
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._heroRelations);
		}

		// Token: 0x06000954 RID: 2388 RVA: 0x00036ADE File Offset: 0x00034CDE
		internal static object AutoGeneratedGetMemberValue_heroRelations(object o)
		{
			return ((CharacterRelationManager)o)._heroRelations;
		}

		// Token: 0x170001E4 RID: 484
		// (get) Token: 0x06000955 RID: 2389 RVA: 0x00036AEB File Offset: 0x00034CEB
		public static CharacterRelationManager Instance
		{
			get
			{
				return Campaign.Current.CharacterRelationManager;
			}
		}

		// Token: 0x06000956 RID: 2390 RVA: 0x00036AF7 File Offset: 0x00034CF7
		public CharacterRelationManager()
		{
			this._heroRelations = new CharacterRelationManager.HeroRelations();
		}

		// Token: 0x06000957 RID: 2391 RVA: 0x00036B0A File Offset: 0x00034D0A
		public static int GetHeroRelation(Hero hero1, Hero hero2)
		{
			return CharacterRelationManager.Instance._heroRelations.GetRelation(hero1, hero2);
		}

		// Token: 0x06000958 RID: 2392 RVA: 0x00036B1D File Offset: 0x00034D1D
		public static void SetHeroRelation(Hero hero1, Hero hero2, int value)
		{
			if (hero1 != hero2)
			{
				CharacterRelationManager.Instance._heroRelations.SetRelation(hero1, hero2, value);
				return;
			}
			Debug.FailedAssert("hero1 != hero2", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\CharacterRelationManager.cs", "SetHeroRelation", 262);
		}

		// Token: 0x06000959 RID: 2393 RVA: 0x00036B4F File Offset: 0x00034D4F
		public void AfterLoad()
		{
			if (MBSaveLoad.LastLoadedGameVersion < ApplicationVersion.FromString("v1.1.0", 17949))
			{
				this._heroRelations.ClearOldData();
			}
		}

		// Token: 0x0600095A RID: 2394 RVA: 0x00036B77 File Offset: 0x00034D77
		public void RemoveHero(Hero deadHero)
		{
			this._heroRelations.Remove(deadHero);
		}

		// Token: 0x040002C5 RID: 709
		[SaveableField(1)]
		private readonly CharacterRelationManager.HeroRelations _heroRelations;

		// Token: 0x0200049F RID: 1183
		internal class HeroRelations
		{
			// Token: 0x06004095 RID: 16533 RVA: 0x001318C9 File Offset: 0x0012FAC9
			internal static void AutoGeneratedStaticCollectObjectsHeroRelations(object o, List<object> collectedObjects)
			{
				((CharacterRelationManager.HeroRelations)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004096 RID: 16534 RVA: 0x001318D7 File Offset: 0x0012FAD7
			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this._relations);
			}

			// Token: 0x06004097 RID: 16535 RVA: 0x001318E5 File Offset: 0x0012FAE5
			internal static object AutoGeneratedGetMemberValue_relations(object o)
			{
				return ((CharacterRelationManager.HeroRelations)o)._relations;
			}

			// Token: 0x06004098 RID: 16536 RVA: 0x001318F4 File Offset: 0x0012FAF4
			public int GetRelation(Hero hero1, Hero hero2)
			{
				ValueTuple<long, long> hashCodes = this.GetHashCodes(hero1, hero2);
				Dictionary<long, int> dictionary;
				int num;
				if (this._relations.TryGetValue(hashCodes.Item1, out dictionary) && dictionary.TryGetValue(hashCodes.Item2, out num))
				{
					return num;
				}
				return 0;
			}

			// Token: 0x06004099 RID: 16537 RVA: 0x00131934 File Offset: 0x0012FB34
			public void SetRelation(Hero hero1, Hero hero2, int value)
			{
				ValueTuple<long, long> hashCodes = this.GetHashCodes(hero1, hero2);
				if (value != 0)
				{
					Dictionary<long, int> dictionary;
					if (!this._relations.TryGetValue(hashCodes.Item1, out dictionary))
					{
						dictionary = new Dictionary<long, int>();
						this._relations.Add(hashCodes.Item1, dictionary);
					}
					dictionary[hashCodes.Item2] = value;
					return;
				}
				Dictionary<long, int> dictionary2;
				if (this._relations.TryGetValue(hashCodes.Item1, out dictionary2) && dictionary2.ContainsKey(hashCodes.Item2))
				{
					dictionary2.Remove(hashCodes.Item2);
					if (!dictionary2.Any<KeyValuePair<long, int>>())
					{
						this._relations.Remove(hashCodes.Item1);
					}
				}
			}

			// Token: 0x0600409A RID: 16538 RVA: 0x001319D4 File Offset: 0x0012FBD4
			public void Remove(Hero hero)
			{
				int hashCode = hero.Id.GetHashCode();
				this._relations.Remove((long)hashCode);
				foreach (Dictionary<long, int> dictionary in this._relations.Values)
				{
					dictionary.Remove((long)hashCode);
				}
			}

			// Token: 0x0600409B RID: 16539 RVA: 0x00131A50 File Offset: 0x0012FC50
			public void ClearOldData()
			{
				this.ClearOldData<Dictionary<long, int>>(this._relations);
				foreach (Dictionary<long, int> dictionary in this._relations.Values)
				{
					this.ClearOldData<int>(dictionary);
				}
			}

			// Token: 0x0600409C RID: 16540 RVA: 0x00131AB4 File Offset: 0x0012FCB4
			private void ClearOldData<T>(Dictionary<long, T> obj)
			{
				HashSet<long> hashSet = new HashSet<long>(obj.Keys);
				foreach (Hero hero in Campaign.Current.CampaignObjectManager.AliveHeroes)
				{
					if (hashSet.Contains((long)hero.Id.GetHashCode()))
					{
						hashSet.Remove((long)hero.Id.GetHashCode());
					}
				}
				foreach (long num in hashSet)
				{
					obj.Remove(num);
				}
			}

			// Token: 0x0600409D RID: 16541 RVA: 0x00131B90 File Offset: 0x0012FD90
			private ValueTuple<long, long> GetHashCodes(Hero hero1, Hero hero2)
			{
				if (hero1.Id > hero2.Id)
				{
					return new ValueTuple<long, long>((long)hero1.Id.GetHashCode(), (long)hero2.Id.GetHashCode());
				}
				return new ValueTuple<long, long>((long)hero2.Id.GetHashCode(), (long)hero1.Id.GetHashCode());
			}

			// Token: 0x040013FC RID: 5116
			[SaveableField(1)]
			private Dictionary<long, Dictionary<long, int>> _relations = new Dictionary<long, Dictionary<long, int>>();
		}
	}
}
