using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Issues;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	public class QuestManager : CampaignEventReceiver
	{
		internal static void AutoGeneratedStaticCollectObjectsQuestManager(object o, List<object> collectedObjects)
		{
			((QuestManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._quests);
			collectedObjects.Add(this._trackedObjects);
		}

		internal static object AutoGeneratedGetMemberValue_quests(object o)
		{
			return ((QuestManager)o)._quests;
		}

		internal static object AutoGeneratedGetMemberValue_trackedObjects(object o)
		{
			return ((QuestManager)o)._trackedObjects;
		}

		public MBReadOnlyList<QuestBase> Quests
		{
			get
			{
				return this._quests;
			}
		}

		public bool QuestDebugMode { get; set; }

		public MBReadOnlyDictionary<ITrackableCampaignObject, List<QuestBase>> TrackedObjects { get; private set; }

		public QuestManager()
		{
			this._quests = new MBList<QuestBase>();
			this._trackedObjects = new Dictionary<ITrackableCampaignObject, List<QuestBase>>();
			this._currentHourlyTickQuestsToTimeout = new MBList<QuestBase>();
			this.Initialize();
		}

		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this.Initialize();
		}

		private void Initialize()
		{
			this.TrackedObjects = this._trackedObjects.GetReadOnlyDictionary<ITrackableCampaignObject, List<QuestBase>>();
			this._currentHourlyTickQuestsToTimeout = new MBList<QuestBase>();
		}

		public override void OnQuestStarted(QuestBase quest)
		{
			this._quests.Add(quest);
		}

		public bool IsThereActiveQuestWithType(Type type)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				if (questBase.IsOngoing && (type == questBase.GetType() || questBase.GetType().IsSubclassOf(type)))
				{
					return true;
				}
			}
			return false;
		}

		public bool IsQuestGiver(Hero offeringHero)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				if (questBase.IsOngoing && questBase.QuestGiver == offeringHero)
				{
					return true;
				}
			}
			return false;
		}

		public override void OnGameLoaded(CampaignGameStarter campaignGameStarter)
		{
			List<QuestBase> list = new List<QuestBase>();
			for (int i = this.Quests.Count - 1; i >= 0; i--)
			{
				QuestBase questBase = this.Quests[i];
				if (questBase == null)
				{
					this._quests.Remove(questBase);
				}
				else if (!questBase.IsFinalized)
				{
					bool flag = false;
					foreach (KeyValuePair<Hero, IssueBase> keyValuePair in Campaign.Current.IssueManager.Issues)
					{
						IssueBase value = keyValuePair.Value;
						if (((value != null) ? value.IssueQuest : null) == questBase)
						{
							flag = true;
							break;
						}
					}
					if (flag || questBase.IsSpecialQuest)
					{
						questBase.InitializeQuestOnLoadWithQuestManager();
						using (List<QuestTaskBase>.Enumerator enumerator2 = questBase.TaskList.GetEnumerator())
						{
							while (enumerator2.MoveNext())
							{
								QuestTaskBase questTaskBase = enumerator2.Current;
								if (questTaskBase.IsActive)
								{
									questTaskBase.SetReferences();
									questTaskBase.AddTaskDialogs();
								}
							}
							goto IL_142;
						}
					}
					list.Add(questBase);
					Debug.FailedAssert(string.Concat(new object[] { "There is not active issue for quest: ", questBase.Title, " string id: ", questBase.StringId, ". Quest will be canceled." }), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "OnGameLoaded", 127);
				}
				IL_142:;
			}
			foreach (QuestBase questBase2 in list)
			{
				questBase2.CompleteQuestWithCancel(null);
			}
		}

		public override void OnSessionStart(CampaignGameStarter campaignGameStarter)
		{
			CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
		}

		public override void HourlyTick()
		{
			for (int i = this.Quests.Count - 1; i >= 0; i--)
			{
				QuestBase questBase = this.Quests[i];
				if (questBase.IsOngoing && questBase.QuestDueTime.IsPast)
				{
					this._currentHourlyTickQuestsToTimeout.Add(questBase);
				}
			}
			foreach (QuestBase questBase2 in this._currentHourlyTickQuestsToTimeout)
			{
				if (!questBase2.IsFinalized)
				{
					questBase2.CompleteQuestWithTimeOut(null);
				}
			}
			this._currentHourlyTickQuestsToTimeout.Clear();
			for (int j = this.Quests.Count - 1; j >= 0; j--)
			{
				this.Quests[j].HourlyTickWithQuestManager();
			}
		}

		public override void DailyTick()
		{
		}

		public GameMenuOption.IssueQuestFlags CheckQuestForMenuLocations(List<Location> currentLocations)
		{
			GameMenuOption.IssueQuestFlags issueQuestFlags = GameMenuOption.IssueQuestFlags.None;
			foreach (Location location in currentLocations)
			{
				foreach (LocationCharacter locationCharacter in location.GetCharacterList())
				{
					CharacterObject character = locationCharacter.Character;
					Hero hero = ((character != null) ? character.HeroObject : null);
					if (hero != null)
					{
						foreach (QuestBase questBase in this.Quests)
						{
							if (questBase != null && questBase.IsOngoing)
							{
								if (questBase.QuestGiver == hero)
								{
									issueQuestFlags |= (questBase.IsSpecialQuest ? GameMenuOption.IssueQuestFlags.ActiveStoryQuest : GameMenuOption.IssueQuestFlags.ActiveIssue);
								}
								else if (questBase.IsTracked(hero))
								{
									issueQuestFlags |= (questBase.IsSpecialQuest ? GameMenuOption.IssueQuestFlags.TrackedStoryQuest : GameMenuOption.IssueQuestFlags.TrackedIssue);
								}
							}
						}
					}
				}
			}
			foreach (Location location2 in currentLocations)
			{
				issueQuestFlags |= this.IsLocationsTracked(location2);
			}
			return issueQuestFlags;
		}

		private GameMenuOption.IssueQuestFlags IsLocationsTracked(Location location)
		{
			GameMenuOption.IssueQuestFlags issueQuestFlags = GameMenuOption.IssueQuestFlags.None;
			foreach (QuestBase questBase in this.Quests)
			{
				issueQuestFlags |= questBase.IsLocationTrackedByQuest(location);
			}
			return issueQuestFlags;
		}

		public void OnQuestFinalized(QuestBase quest)
		{
			this._quests.Remove(quest);
		}

		public override void OnPlayerCharacterChanged(Hero oldPlayer, Hero newPlayer, MobileParty newPlayerParty, bool isMainPartyChanged)
		{
			for (int i = this.Quests.Count - 1; i >= 0; i--)
			{
				QuestBase questBase = this.Quests[i];
				if (questBase.IsOngoing && !questBase.IsSpecialQuest)
				{
					questBase.CompleteQuestWithFail(null);
				}
			}
		}

		public override void CanHaveQuestsOrIssues(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				if (questBase.IsOngoing && questBase.QuestGiver == hero)
				{
					result = false;
					break;
				}
				questBase.OnHeroCanHaveQuestOrIssueInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		public override void CanHeroDie(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanDieInfoIsRequested(hero, causeOfDeath, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		public override void CanHeroBecomePrisoner(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanBecomePrisonerInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		public override void CanHeroEquipmentBeChanged(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanBeSelectedInInventoryInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		public override void CanHeroLeadParty(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanLeadPartyInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		public override void CanHeroMarry(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanMarryInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		public override void CanMoveToSettlement(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanMoveToSettlementInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		public override void CanBeGovernorOrHavePartyRole(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		public void AddTrackedObjectForQuest(ITrackableCampaignObject trackedObject, QuestBase relatedQuest)
		{
			List<QuestBase> list;
			if (!this._trackedObjects.TryGetValue(trackedObject, out list))
			{
				this._trackedObjects.Add(trackedObject, new List<QuestBase> { relatedQuest });
				return;
			}
			if (!list.Contains(relatedQuest))
			{
				list.Add(relatedQuest);
				return;
			}
			Debug.FailedAssert(trackedObject.GetName() + " already contains quest: " + relatedQuest.Title, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "AddTrackedObjectForQuest", 362);
		}

		public void RemoveTrackedObjectForQuest(ITrackableCampaignObject trackedObject, QuestBase relatedQuest)
		{
			List<QuestBase> list;
			if (this._trackedObjects.TryGetValue(trackedObject, out list))
			{
				if (!list.Contains(relatedQuest))
				{
					Debug.FailedAssert(trackedObject.GetName() + " is not tracked by quest: " + relatedQuest.Title, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "RemoveTrackedObjectForQuest", 386);
					return;
				}
				list.Remove(relatedQuest);
				if (list.Count == 0)
				{
					this._trackedObjects.Remove(trackedObject);
					Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackedObject, false);
					return;
				}
			}
			else
			{
				Debug.FailedAssert(trackedObject.GetName() + " does not track any quests.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "RemoveTrackedObjectForQuest", 391);
			}
		}

		public void RemoveAllTrackedObjectsForQuest(QuestBase quest)
		{
			List<ITrackableCampaignObject> list = new List<ITrackableCampaignObject>();
			foreach (KeyValuePair<ITrackableCampaignObject, List<QuestBase>> keyValuePair in this.TrackedObjects)
			{
				if (keyValuePair.Value.Contains(quest))
				{
					list.Add(keyValuePair.Key);
				}
			}
			foreach (ITrackableCampaignObject trackableCampaignObject in list)
			{
				this.RemoveTrackedObjectForQuest(trackableCampaignObject, quest);
			}
		}

		public List<ITrackableCampaignObject> GetAllTrackedObjectsOfAQuest(QuestBase quest)
		{
			List<ITrackableCampaignObject> list = new List<ITrackableCampaignObject>();
			foreach (KeyValuePair<ITrackableCampaignObject, List<QuestBase>> keyValuePair in this.TrackedObjects)
			{
				if (keyValuePair.Value.Contains(quest))
				{
					list.Add(keyValuePair.Key);
				}
			}
			return list;
		}

		public IEnumerable<QuestBase> GetQuestGiverQuests(Hero hero)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				if (questBase.IsOngoing && questBase.QuestGiver == hero)
				{
					yield return questBase;
				}
			}
			List<QuestBase>.Enumerator enumerator = default(List<QuestBase>.Enumerator);
			yield break;
			yield break;
		}

		public static bool QuestExistInSettlementNotables(QuestBase questBase, Settlement settlement)
		{
			foreach (Hero hero in settlement.Notables)
			{
				if (questBase.QuestGiver == hero)
				{
					return true;
				}
			}
			return false;
		}

		public static bool QuestExistInClan(QuestBase questBase, Clan clan)
		{
			foreach (Hero hero in clan.Lords)
			{
				if (questBase.QuestGiver == hero)
				{
					return true;
				}
			}
			return false;
		}

		public const string QuestOfferToken = "quest_offer";

		public const string QuestDiscussToken = "quest_discuss";

		public const string HeroMainOptionsToken = "hero_main_options";

		public const string NpcLordStartToken = "lord_start";

		public const string CharacterTalkToken = "start";

		public static string PriorQuestName;

		private MBList<QuestBase> _currentHourlyTickQuestsToTimeout;

		[SaveableField(0)]
		private readonly MBList<QuestBase> _quests;

		[SaveableField(10)]
		private readonly Dictionary<ITrackableCampaignObject, List<QuestBase>> _trackedObjects;
	}
}
