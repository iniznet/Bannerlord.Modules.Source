using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Issues;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem
{
	// Token: 0x02000064 RID: 100
	public class QuestManager : CampaignEventReceiver
	{
		// Token: 0x06000D72 RID: 3442 RVA: 0x00040C43 File Offset: 0x0003EE43
		internal static void AutoGeneratedStaticCollectObjectsQuestManager(object o, List<object> collectedObjects)
		{
			((QuestManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000D73 RID: 3443 RVA: 0x00040C51 File Offset: 0x0003EE51
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._quests);
			collectedObjects.Add(this._trackedObjects);
		}

		// Token: 0x06000D74 RID: 3444 RVA: 0x00040C6B File Offset: 0x0003EE6B
		internal static object AutoGeneratedGetMemberValue_quests(object o)
		{
			return ((QuestManager)o)._quests;
		}

		// Token: 0x06000D75 RID: 3445 RVA: 0x00040C78 File Offset: 0x0003EE78
		internal static object AutoGeneratedGetMemberValue_trackedObjects(object o)
		{
			return ((QuestManager)o)._trackedObjects;
		}

		// Token: 0x1700034D RID: 845
		// (get) Token: 0x06000D76 RID: 3446 RVA: 0x00040C85 File Offset: 0x0003EE85
		public MBReadOnlyList<QuestBase> Quests
		{
			get
			{
				return this._quests;
			}
		}

		// Token: 0x1700034E RID: 846
		// (get) Token: 0x06000D77 RID: 3447 RVA: 0x00040C8D File Offset: 0x0003EE8D
		// (set) Token: 0x06000D78 RID: 3448 RVA: 0x00040C95 File Offset: 0x0003EE95
		public bool QuestDebugMode { get; set; }

		// Token: 0x1700034F RID: 847
		// (get) Token: 0x06000D79 RID: 3449 RVA: 0x00040C9E File Offset: 0x0003EE9E
		// (set) Token: 0x06000D7A RID: 3450 RVA: 0x00040CA6 File Offset: 0x0003EEA6
		public MBReadOnlyDictionary<ITrackableCampaignObject, List<QuestBase>> TrackedObjects { get; private set; }

		// Token: 0x06000D7B RID: 3451 RVA: 0x00040CAF File Offset: 0x0003EEAF
		public QuestManager()
		{
			this._quests = new MBList<QuestBase>();
			this._trackedObjects = new Dictionary<ITrackableCampaignObject, List<QuestBase>>();
			this.Initialize();
		}

		// Token: 0x06000D7C RID: 3452 RVA: 0x00040CD3 File Offset: 0x0003EED3
		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this.Initialize();
		}

		// Token: 0x06000D7D RID: 3453 RVA: 0x00040CDB File Offset: 0x0003EEDB
		private void Initialize()
		{
			this.TrackedObjects = this._trackedObjects.GetReadOnlyDictionary<ITrackableCampaignObject, List<QuestBase>>();
		}

		// Token: 0x06000D7E RID: 3454 RVA: 0x00040CEE File Offset: 0x0003EEEE
		public override void OnQuestStarted(QuestBase quest)
		{
			this._quests.Add(quest);
		}

		// Token: 0x06000D7F RID: 3455 RVA: 0x00040CFC File Offset: 0x0003EEFC
		public bool IsThereActiveQuestWithType(Type type)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				if (questBase.IsOngoing && (type == questBase.GetType() || questBase.GetType().IsSubclassOf(type)))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000D80 RID: 3456 RVA: 0x00040D74 File Offset: 0x0003EF74
		public bool IsQuestGiver(Hero offeringHero)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				if (questBase.IsOngoing && questBase.QuestGiver == offeringHero)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000D81 RID: 3457 RVA: 0x00040DD8 File Offset: 0x0003EFD8
		public override void OnGameLoaded(CampaignGameStarter campaignGameStarter)
		{
			List<QuestBase> list = new List<QuestBase>();
			foreach (QuestBase questBase in this.Quests.ToList<QuestBase>())
			{
				if (questBase == null)
				{
					this._quests.Remove(questBase);
				}
				else if (!questBase.IsFinalized)
				{
					bool flag = false;
					foreach (KeyValuePair<Hero, IssueBase> keyValuePair in Campaign.Current.IssueManager.Issues)
					{
						IssueBase value = keyValuePair.Value;
						if (((value != null) ? value.IssueQuest : null) == questBase)
						{
							flag = true;
							break;
						}
					}
					if (flag || questBase.IsSpecialQuest)
					{
						questBase.InitializeQuestOnLoadWithQuestManager();
						using (List<QuestTaskBase>.Enumerator enumerator3 = questBase.TaskList.GetEnumerator())
						{
							while (enumerator3.MoveNext())
							{
								QuestTaskBase questTaskBase = enumerator3.Current;
								if (questTaskBase.IsActive)
								{
									questTaskBase.SetReferences();
									questTaskBase.AddTaskDialogs();
								}
							}
							continue;
						}
					}
					list.Add(questBase);
					Debug.FailedAssert(string.Concat(new object[] { "There is not active issue for quest: ", questBase.Title, " string id: ", questBase.StringId, ". Quest will be canceled." }), "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "OnGameLoaded", 122);
				}
			}
			foreach (QuestBase questBase2 in list)
			{
				questBase2.CompleteQuestWithCancel(null);
			}
		}

		// Token: 0x06000D82 RID: 3458 RVA: 0x00040FD4 File Offset: 0x0003F1D4
		public override void OnSessionStart(CampaignGameStarter campaignGameStarter)
		{
			CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
		}

		// Token: 0x06000D83 RID: 3459 RVA: 0x00040FF0 File Offset: 0x0003F1F0
		public override void HourlyTick()
		{
			foreach (QuestBase questBase in this.Quests.ToList<QuestBase>())
			{
				if (questBase.IsOngoing && questBase.QuestDueTime.IsPast)
				{
					questBase.CompleteQuestWithTimeOut(null);
				}
			}
		}

		// Token: 0x06000D84 RID: 3460 RVA: 0x00041060 File Offset: 0x0003F260
		public override void DailyTick()
		{
		}

		// Token: 0x06000D85 RID: 3461 RVA: 0x00041064 File Offset: 0x0003F264
		public GameMenuOption.IssueQuestFlags CheckQuestForMenuLocations(List<Location> currentLocations)
		{
			GameMenuOption.IssueQuestFlags issueQuestFlags = GameMenuOption.IssueQuestFlags.None;
			foreach (Location location in currentLocations)
			{
				foreach (LocationCharacter locationCharacter in location.GetCharacterList())
				{
					CharacterObject character = locationCharacter.Character;
					Hero hero = ((character != null) ? character.HeroObject : null);
					if (hero != null)
					{
						foreach (QuestBase questBase in this.Quests)
						{
							if (questBase != null && questBase.IsOngoing)
							{
								if (questBase.QuestGiver == hero)
								{
									issueQuestFlags |= (questBase.IsSpecialQuest ? GameMenuOption.IssueQuestFlags.ActiveStoryQuest : GameMenuOption.IssueQuestFlags.ActiveIssue);
								}
								else if (questBase.IsTracked(hero))
								{
									issueQuestFlags |= (questBase.IsSpecialQuest ? GameMenuOption.IssueQuestFlags.TrackedStoryQuest : GameMenuOption.IssueQuestFlags.TrackedIssue);
								}
							}
						}
					}
				}
			}
			foreach (Location location2 in currentLocations)
			{
				issueQuestFlags |= this.IsLocationsTracked(location2);
			}
			return issueQuestFlags;
		}

		// Token: 0x06000D86 RID: 3462 RVA: 0x000411C4 File Offset: 0x0003F3C4
		private GameMenuOption.IssueQuestFlags IsLocationsTracked(Location location)
		{
			GameMenuOption.IssueQuestFlags issueQuestFlags = GameMenuOption.IssueQuestFlags.None;
			foreach (QuestBase questBase in this.Quests)
			{
				issueQuestFlags |= questBase.IsLocationTrackedByQuest(location);
			}
			return issueQuestFlags;
		}

		// Token: 0x06000D87 RID: 3463 RVA: 0x00041220 File Offset: 0x0003F420
		public void OnQuestFinalized(QuestBase quest)
		{
			this._quests.Remove(quest);
		}

		// Token: 0x06000D88 RID: 3464 RVA: 0x00041230 File Offset: 0x0003F430
		public override void OnPlayerCharacterChanged(Hero oldPlayer, Hero newPlayer, MobileParty newPlayerParty, bool isMainPartyChanged)
		{
			foreach (QuestBase questBase in this.Quests.ToList<QuestBase>())
			{
				if (questBase.IsOngoing && !questBase.IsSpecialQuest)
				{
					questBase.CompleteQuestWithFail(null);
				}
			}
		}

		// Token: 0x06000D89 RID: 3465 RVA: 0x00041298 File Offset: 0x0003F498
		public override void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification = true)
		{
			IssueBase issue = victim.Issue;
			if (((issue != null) ? issue.IssueQuest : null) != null && victim.Issue.IssueQuest.IsOngoing && !victim.IsNotable)
			{
				TextObject textObject = new TextObject("{=rTvWdMXF}{DIED_HERO.LINK} died and your agreement with {?DIED_HERO.GENDER}her{?}him{\\?} canceled.", null);
				StringHelpers.SetCharacterProperties("DIED_HERO", victim.CharacterObject, textObject, false);
				victim.Issue.IssueQuest.CompleteQuestWithCancel(textObject);
			}
		}

		// Token: 0x06000D8A RID: 3466 RVA: 0x00041304 File Offset: 0x0003F504
		public override void CanHaveQuestsOrIssues(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				if (questBase.IsOngoing && questBase.QuestGiver == hero)
				{
					result = false;
					break;
				}
				questBase.OnHeroCanHaveQuestOrIssueInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06000D8B RID: 3467 RVA: 0x00041374 File Offset: 0x0003F574
		public override void CanHeroDie(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanDieInfoIsRequested(hero, causeOfDeath, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06000D8C RID: 3468 RVA: 0x000413D0 File Offset: 0x0003F5D0
		public override void CanHeroBecomePrisoner(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanBecomePrisonerInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06000D8D RID: 3469 RVA: 0x00041428 File Offset: 0x0003F628
		public override void CanHeroEquipmentBeChanged(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanBeSelectedInInventoryInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06000D8E RID: 3470 RVA: 0x00041480 File Offset: 0x0003F680
		public override void CanHeroLeadParty(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanLeadPartyInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06000D8F RID: 3471 RVA: 0x000414D8 File Offset: 0x0003F6D8
		public override void CanHeroMarry(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanMarryInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06000D90 RID: 3472 RVA: 0x00041530 File Offset: 0x0003F730
		public override void CanMoveToSettlement(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanMoveToSettlementInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06000D91 RID: 3473 RVA: 0x00041588 File Offset: 0x0003F788
		public override void CanBeGovernorOrHavePartyRole(Hero hero, ref bool result)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				questBase.OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06000D92 RID: 3474 RVA: 0x000415E0 File Offset: 0x0003F7E0
		public void AddTrackedObjectForQuest(ITrackableCampaignObject trackedObject, QuestBase relatedQuest)
		{
			List<QuestBase> list;
			if (!this._trackedObjects.TryGetValue(trackedObject, out list))
			{
				this._trackedObjects.Add(trackedObject, new List<QuestBase> { relatedQuest });
				return;
			}
			if (!list.Contains(relatedQuest))
			{
				list.Add(relatedQuest);
				return;
			}
			Debug.FailedAssert(trackedObject.GetName() + " already contains quest: " + relatedQuest.Title, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "AddTrackedObjectForQuest", 348);
		}

		// Token: 0x06000D93 RID: 3475 RVA: 0x00041654 File Offset: 0x0003F854
		public void RemoveTrackedObjectForQuest(ITrackableCampaignObject trackedObject, QuestBase relatedQuest)
		{
			List<QuestBase> list;
			if (this._trackedObjects.TryGetValue(trackedObject, out list))
			{
				if (!list.Contains(relatedQuest))
				{
					Debug.FailedAssert(trackedObject.GetName() + " is not tracked by quest: " + relatedQuest.Title, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "RemoveTrackedObjectForQuest", 372);
					return;
				}
				list.Remove(relatedQuest);
				if (list.Count == 0)
				{
					this._trackedObjects.Remove(trackedObject);
					Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackedObject, false);
					return;
				}
			}
			else
			{
				Debug.FailedAssert(trackedObject.GetName() + " does not track any quests.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\QuestManager.cs", "RemoveTrackedObjectForQuest", 377);
			}
		}

		// Token: 0x06000D94 RID: 3476 RVA: 0x000416F8 File Offset: 0x0003F8F8
		public void RemoveAllTrackedObjectsForQuest(QuestBase quest)
		{
			List<ITrackableCampaignObject> list = new List<ITrackableCampaignObject>();
			foreach (KeyValuePair<ITrackableCampaignObject, List<QuestBase>> keyValuePair in this.TrackedObjects)
			{
				if (keyValuePair.Value.Contains(quest))
				{
					list.Add(keyValuePair.Key);
				}
			}
			foreach (ITrackableCampaignObject trackableCampaignObject in list)
			{
				this.RemoveTrackedObjectForQuest(trackableCampaignObject, quest);
			}
		}

		// Token: 0x06000D95 RID: 3477 RVA: 0x000417A8 File Offset: 0x0003F9A8
		public List<ITrackableCampaignObject> GetAllTrackedObjectsOfAQuest(QuestBase quest)
		{
			List<ITrackableCampaignObject> list = new List<ITrackableCampaignObject>();
			foreach (KeyValuePair<ITrackableCampaignObject, List<QuestBase>> keyValuePair in this.TrackedObjects)
			{
				if (keyValuePair.Value.Contains(quest))
				{
					list.Add(keyValuePair.Key);
				}
			}
			return list;
		}

		// Token: 0x06000D96 RID: 3478 RVA: 0x00041818 File Offset: 0x0003FA18
		public IEnumerable<QuestBase> GetQuestGiverQuests(Hero hero)
		{
			foreach (QuestBase questBase in this.Quests)
			{
				if (questBase.IsOngoing && questBase.QuestGiver == hero)
				{
					yield return questBase;
				}
			}
			List<QuestBase>.Enumerator enumerator = default(List<QuestBase>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x06000D97 RID: 3479 RVA: 0x00041830 File Offset: 0x0003FA30
		public static bool QuestExistInSettlementNotables(QuestBase questBase, Settlement settlement)
		{
			foreach (Hero hero in settlement.Notables)
			{
				if (questBase.QuestGiver == hero)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06000D98 RID: 3480 RVA: 0x0004188C File Offset: 0x0003FA8C
		public static bool QuestExistInClan(QuestBase questBase, Clan clan)
		{
			foreach (Hero hero in clan.Lords)
			{
				if (questBase.QuestGiver == hero)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x040003EC RID: 1004
		public const string QuestOfferToken = "quest_offer";

		// Token: 0x040003ED RID: 1005
		public const string QuestDiscussToken = "quest_discuss";

		// Token: 0x040003EE RID: 1006
		public const string HeroMainOptionsToken = "hero_main_options";

		// Token: 0x040003EF RID: 1007
		public const string NpcLordStartToken = "lord_start";

		// Token: 0x040003F0 RID: 1008
		public const string CharacterTalkToken = "start";

		// Token: 0x040003F1 RID: 1009
		public static string PriorQuestName;

		// Token: 0x040003F2 RID: 1010
		[SaveableField(0)]
		private readonly MBList<QuestBase> _quests;

		// Token: 0x040003F4 RID: 1012
		[SaveableField(10)]
		private readonly Dictionary<ITrackableCampaignObject, List<QuestBase>> _trackedObjects;
	}
}
