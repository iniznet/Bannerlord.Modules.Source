using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000304 RID: 772
	public class CapturedByBountyHuntersIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002C98 RID: 11416 RVA: 0x000BA710 File Offset: 0x000B8910
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002C99 RID: 11417 RVA: 0x000BA729 File Offset: 0x000B8929
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002C9A RID: 11418 RVA: 0x000BA72C File Offset: 0x000B892C
		private bool ConditionsHold(Hero issueGiver, out Settlement selectedHideout)
		{
			selectedHideout = null;
			if (issueGiver.IsLord || (issueGiver.IsNotable && issueGiver.CurrentSettlement == null))
			{
				return false;
			}
			if (issueGiver.IsGangLeader)
			{
				selectedHideout = this.FindSuitableHideout(issueGiver);
				CharacterObject @object = MBObjectManager.Instance.GetObject<CharacterObject>("looter");
				return selectedHideout != null && @object != null;
			}
			return false;
		}

		// Token: 0x06002C9B RID: 11419 RVA: 0x000BA784 File Offset: 0x000B8984
		private Settlement FindSuitableHideout(Hero issueGiver)
		{
			Settlement settlement = null;
			float num = float.MaxValue;
			foreach (Hideout hideout in Campaign.Current.AllHideouts.Where((Hideout t) => t.IsInfested))
			{
				float num2;
				if (Campaign.Current.Models.MapDistanceModel.GetDistance(issueGiver.GetMapPoint(), hideout.Settlement, (55f < num) ? 55f : num, out num2) && num2 < num)
				{
					num = num2;
					settlement = hideout.Settlement;
				}
			}
			return settlement;
		}

		// Token: 0x06002C9C RID: 11420 RVA: 0x000BA840 File Offset: 0x000B8A40
		public void OnCheckForIssue(Hero hero)
		{
			Settlement settlement;
			if (this.ConditionsHold(hero, out settlement))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssue), IssueBase.IssueFrequency.Common, settlement));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssue), IssueBase.IssueFrequency.Common));
		}

		// Token: 0x06002C9D RID: 11421 RVA: 0x000BA8A8 File Offset: 0x000B8AA8
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			PotentialIssueData potentialIssueData = pid;
			return new CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssue(issueOwner, potentialIssueData.RelatedObject as Settlement);
		}

		// Token: 0x04000D77 RID: 3447
		private const IssueBase.IssueFrequency CapturedByBountyHuntersIssueFrequency = IssueBase.IssueFrequency.Common;

		// Token: 0x04000D78 RID: 3448
		private const float ValidHideoutDistance = 55f;

		// Token: 0x02000609 RID: 1545
		public class CapturedByBountyHuntersIssue : IssueBase
		{
			// Token: 0x060047BA RID: 18362 RVA: 0x00141A64 File Offset: 0x0013FC64
			internal static void AutoGeneratedStaticCollectObjectsCapturedByBountyHuntersIssue(object o, List<object> collectedObjects)
			{
				((CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060047BB RID: 18363 RVA: 0x00141A72 File Offset: 0x0013FC72
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._hideout);
			}

			// Token: 0x060047BC RID: 18364 RVA: 0x00141A87 File Offset: 0x0013FC87
			internal static object AutoGeneratedGetMemberValue_hideout(object o)
			{
				return ((CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssue)o)._hideout;
			}

			// Token: 0x17000E75 RID: 3701
			// (get) Token: 0x060047BD RID: 18365 RVA: 0x00141A94 File Offset: 0x0013FC94
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 10;
				}
			}

			// Token: 0x17000E76 RID: 3702
			// (get) Token: 0x060047BE RID: 18366 RVA: 0x00141A98 File Offset: 0x0013FC98
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return Math.Max(5, 4 + MathF.Ceiling(6f * base.IssueDifficultyMultiplier));
				}
			}

			// Token: 0x17000E77 RID: 3703
			// (get) Token: 0x060047BF RID: 18367 RVA: 0x00141AB3 File Offset: 0x0013FCB3
			protected override int RewardGold
			{
				get
				{
					return 3000;
				}
			}

			// Token: 0x17000E78 RID: 3704
			// (get) Token: 0x060047C0 RID: 18368 RVA: 0x00141ABA File Offset: 0x0013FCBA
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Casualties | IssueBase.AlternativeSolutionScaleFlag.FailureRisk;
				}
			}

			// Token: 0x17000E79 RID: 3705
			// (get) Token: 0x060047C1 RID: 18369 RVA: 0x00141ABE File Offset: 0x0013FCBE
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=QtmPWQ5a}Some of my lads have gone missing. I've got a witness who says they'd gotten themselves dead drunk drinking with another band in these parts who turned out to be filthy bounty hunters. Now my boys are all trussed up, and these treacherous animals aim to turn them in for the bounty.", null);
				}
			}

			// Token: 0x17000E7A RID: 3706
			// (get) Token: 0x060047C2 RID: 18370 RVA: 0x00141ACB File Offset: 0x0013FCCB
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=tZqbrlV9}How can I help you?", null);
				}
			}

			// Token: 0x17000E7B RID: 3707
			// (get) Token: 0x060047C3 RID: 18371 RVA: 0x00141AD8 File Offset: 0x0013FCD8
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=MiVYmiBc}Raid the bounty hunters' hideout and rescue my associates from them. I will make it worth your while, say {GOLD_AMOUNT} denars.", null);
					textObject.SetTextVariable("GOLD_AMOUNT", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x17000E7C RID: 3708
			// (get) Token: 0x060047C4 RID: 18372 RVA: 0x00141AF7 File Offset: 0x0013FCF7
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=GIkvhuCC}Maybe one of your men who knows a thing or two about scouting, with {TROOP_AMOUNT} good men can deal with these scum. So what do you say?", null);
					textObject.SetTextVariable("TROOP_AMOUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					return textObject;
				}
			}

			// Token: 0x17000E7D RID: 3709
			// (get) Token: 0x060047C5 RID: 18373 RVA: 0x00141B16 File Offset: 0x0013FD16
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=cvWxXGo5}I can do the job.", null);
				}
			}

			// Token: 0x17000E7E RID: 3710
			// (get) Token: 0x060047C6 RID: 18374 RVA: 0x00141B23 File Offset: 0x0013FD23
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=AvBNKK5y}Alright, I will have one of my companions go and rescue your associates.", null);
				}
			}

			// Token: 0x17000E7F RID: 3711
			// (get) Token: 0x060047C7 RID: 18375 RVA: 0x00141B30 File Offset: 0x0013FD30
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=9u9OEZ9Y}Splendid. My men will guide your companion to the hideout.", null);
				}
			}

			// Token: 0x17000E80 RID: 3712
			// (get) Token: 0x060047C8 RID: 18376 RVA: 0x00141B3D File Offset: 0x0013FD3D
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=zwNjgdbi}My boys are getting ready for the battle. I'm pretty sure your men will tip the balance of that fight in our favor. Thank you.", null);
				}
			}

			// Token: 0x17000E81 RID: 3713
			// (get) Token: 0x060047C9 RID: 18377 RVA: 0x00141B4A File Offset: 0x0013FD4A
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17000E82 RID: 3714
			// (get) Token: 0x060047CA RID: 18378 RVA: 0x00141B4D File Offset: 0x0013FD4D
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000E83 RID: 3715
			// (get) Token: 0x060047CB RID: 18379 RVA: 0x00141B50 File Offset: 0x0013FD50
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=TQyB9rAs}{ISSUE_OWNER.NAME}'s associates captured by bounty hunters.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E84 RID: 3716
			// (get) Token: 0x060047CC RID: 18380 RVA: 0x00141B84 File Offset: 0x0013FD84
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=HhTTzgLj}{ISSUE_OWNER.LINK}, a gang leader in {ISSUE_SETTLEMENT}, wants us to raid some bounty hunters' hideout and rescue {?ISSUE_OWNER.GENDER}her{?}his{\\?} associates.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x060047CD RID: 18381 RVA: 0x00141BD2 File Offset: 0x0013FDD2
			public CapturedByBountyHuntersIssue(Hero issueOwner, Settlement hideout)
				: base(issueOwner, CampaignTime.DaysFromNow(15f))
			{
				this._hideout = hideout;
			}

			// Token: 0x060047CE RID: 18382 RVA: 0x00141BEC File Offset: 0x0013FDEC
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return 1f;
				}
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.2f;
				}
				return 0f;
			}

			// Token: 0x060047CF RID: 18383 RVA: 0x00141C0F File Offset: 0x0013FE0F
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Scouting) >= hero.GetSkillValue(DefaultSkills.Riding)) ? DefaultSkills.Scouting : DefaultSkills.Riding, 120);
			}

			// Token: 0x060047D0 RID: 18384 RVA: 0x00141C3C File Offset: 0x0013FE3C
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 0, false);
			}

			// Token: 0x060047D1 RID: 18385 RVA: 0x00141C54 File Offset: 0x0013FE54
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 0, false);
			}

			// Token: 0x17000E85 RID: 3717
			// (get) Token: 0x060047D2 RID: 18386 RVA: 0x00141C75 File Offset: 0x0013FE75
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(750f + 1000f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x060047D3 RID: 18387 RVA: 0x00141C8A File Offset: 0x0013FE8A
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				this.RelationshipChangeWithIssueOwner = 5;
				base.IssueOwner.AddPower(10f);
				base.IssueOwner.CurrentSettlement.Town.Security += 5f;
			}

			// Token: 0x060047D4 RID: 18388 RVA: 0x00141CC4 File Offset: 0x0013FEC4
			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				TraitLevelingHelper.OnIssueFailed(base.IssueOwner, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				this.RelationshipChangeWithIssueOwner = -5;
				base.IssueOwner.AddPower(-10f);
				base.IssueOwner.CurrentSettlement.Town.Security -= 5f;
			}

			// Token: 0x17000E86 RID: 3718
			// (get) Token: 0x060047D5 RID: 18389 RVA: 0x00141D2C File Offset: 0x0013FF2C
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=U7sTASN4}{ISSUE_OWNER.LINK}, a gang leader from {QUEST_SETTLEMENT}, has told you that some bounty hunters captured some of {?ISSUE_OWNER.GENDER}her{?}his{\\?} gang members and are holding them in their hideout. {?ISSUE_OWNER.GENDER}She{?}He{\\?} wants them found and rescued. You agreed to send {TROOP_COUNT} of your men along with a {COMPANION.LINK} to find these bounty hunters and rescue {?ISSUE_OWNER.GENDER}her{?}his{\\?} associates. They should be back in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("TROOP_COUNT", this.AlternativeSolutionSentTroops.TotalManCount - 1);
					return textObject;
				}
			}

			// Token: 0x060047D6 RID: 18390 RVA: 0x00141DBD File Offset: 0x0013FFBD
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			// Token: 0x060047D7 RID: 18391 RVA: 0x00141DC0 File Offset: 0x0013FFC0
			public override bool IssueStayAliveConditions()
			{
				return this._hideout.Hideout.IsInfested;
			}

			// Token: 0x060047D8 RID: 18392 RVA: 0x00141DD2 File Offset: 0x0013FFD2
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				skill = null;
				relationHero = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x060047D9 RID: 18393 RVA: 0x00141DF9 File Offset: 0x0013FFF9
			protected override void OnGameLoad()
			{
			}

			// Token: 0x060047DA RID: 18394 RVA: 0x00141DFB File Offset: 0x0013FFFB
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(30f), this.RewardGold, this._hideout);
			}

			// Token: 0x060047DB RID: 18395 RVA: 0x00141E1F File Offset: 0x0014001F
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x040018FC RID: 6396
			private const int CompanionRequiredSkillLevel = 120;

			// Token: 0x040018FD RID: 6397
			private const int IssueDuration = 15;

			// Token: 0x040018FE RID: 6398
			private const int QuestTimeLimit = 30;

			// Token: 0x040018FF RID: 6399
			[SaveableField(100)]
			private Settlement _hideout;
		}

		// Token: 0x0200060A RID: 1546
		public class CapturedByBountyHuntersIssueQuest : QuestBase
		{
			// Token: 0x060047DC RID: 18396 RVA: 0x00141E21 File Offset: 0x00140021
			internal static void AutoGeneratedStaticCollectObjectsCapturedByBountyHuntersIssueQuest(object o, List<object> collectedObjects)
			{
				((CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060047DD RID: 18397 RVA: 0x00141E2F File Offset: 0x0014002F
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._questHideout);
			}

			// Token: 0x060047DE RID: 18398 RVA: 0x00141E44 File Offset: 0x00140044
			internal static object AutoGeneratedGetMemberValue_questHideout(object o)
			{
				return ((CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssueQuest)o)._questHideout;
			}

			// Token: 0x17000E87 RID: 3719
			// (get) Token: 0x060047DF RID: 18399 RVA: 0x00141E54 File Offset: 0x00140054
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=TQyB9rAs}{ISSUE_OWNER.NAME}'s associates captured by bounty hunters.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E88 RID: 3720
			// (get) Token: 0x060047E0 RID: 18400 RVA: 0x00141E86 File Offset: 0x00140086
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000E89 RID: 3721
			// (get) Token: 0x060047E1 RID: 18401 RVA: 0x00141E8C File Offset: 0x0014008C
			private TextObject _playerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=P7MZ0hZb}{QUEST_GIVER.LINK}, a gang leader from {QUEST_SETTLEMENT}, has told you that some bounty hunters captured some of {?QUEST_GIVER.GENDER}her{?}his{\\?} gang members and are holding them in their hideout. You told {?QUEST_GIVER.GENDER}her{?}him{\\?} you would find them yourself.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", Settlement.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17000E8A RID: 3722
			// (get) Token: 0x060047E2 RID: 18402 RVA: 0x00141ED4 File Offset: 0x001400D4
			private TextObject _successQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=rNDRyFP4}You cleared the hideout and rescued the {QUEST_GIVER.LINK}'s associates. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. \"Thank you for rescuing my men. I'll remember this.\"", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E8B RID: 3723
			// (get) Token: 0x060047E3 RID: 18403 RVA: 0x00141F08 File Offset: 0x00140108
			private TextObject _playerLostTheFightLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=nq0qLQ1x}You lost the fight against bounty hunters and failed to rescue the {QUEST_GIVER.LINK}'s men. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. \"I appreciate your effort but it wasn't good enough...\"", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E8C RID: 3724
			// (get) Token: 0x060047E4 RID: 18404 RVA: 0x00141F3C File Offset: 0x0014013C
			private TextObject _hideoutClearedBySomeoneElseLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=4Bub0GY6}Hideout was cleared by someone else. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E8D RID: 3725
			// (get) Token: 0x060047E5 RID: 18405 RVA: 0x00141F70 File Offset: 0x00140170
			private TextObject _timeOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=JPAGzEhe}You failed to rescue the {QUEST_GIVER.LINK}'s men in time. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. \"You sat on your heels doing nothing and my men will pay the price. I won't forget this...\"", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x060047E6 RID: 18406 RVA: 0x00141FA2 File Offset: 0x001401A2
			public CapturedByBountyHuntersIssueQuest(string questId, Hero giverHero, CampaignTime duration, int rewardGold, Settlement hideout)
				: base(questId, giverHero, duration, rewardGold)
			{
				this._questHideout = hideout;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x060047E7 RID: 18407 RVA: 0x00141FC3 File Offset: 0x001401C3
			private bool DialogCondition()
			{
				return Hero.OneToOneConversationHero == base.QuestGiver;
			}

			// Token: 0x060047E8 RID: 18408 RVA: 0x00141FD4 File Offset: 0x001401D4
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=BUM63VJq}That's the spirit. My men will tell you how to find the hideout. Rescue those poor captives, and a large sack of silver will be on your way!", null), null, null).Condition(new ConversationSentence.OnConditionDelegate(this.DialogCondition))
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=vYCY931w}Any news about my men?", null), null, null).Condition(new ConversationSentence.OnConditionDelegate(this.DialogCondition))
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=DJcMau0U}Not yet. We are still looking for them.", null), null)
					.NpcLine(new TextObject("{=VZhs6rpG}Well, try to speed it up. Once the bounty hunters turn them in, it'll be too late.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=LvNTjCtQ}We need more time.", null), null)
					.NpcLine(new TextObject("{=15wCjIBY}Take too much time, and my men will swing from the gallows. Speed it along, will you?", null), null, null)
					.CloseDialog()
					.EndPlayerOptions();
			}

			// Token: 0x060047E9 RID: 18409 RVA: 0x001420BB File Offset: 0x001402BB
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddLog(this._playerStartsQuestLogText, false);
			}

			// Token: 0x060047EA RID: 18410 RVA: 0x001420D1 File Offset: 0x001402D1
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x060047EB RID: 18411 RVA: 0x001420D9 File Offset: 0x001402D9
			protected override void RegisterEvents()
			{
				CampaignEvents.MapEventEnded.AddNonSerializedListener(this, new Action<MapEvent>(this.OnMapEventEnded));
				CampaignEvents.OnSettlementLeftEvent.AddNonSerializedListener(this, new Action<MobileParty, Settlement>(this.OnSettlementLeft));
			}

			// Token: 0x060047EC RID: 18412 RVA: 0x0014210C File Offset: 0x0014030C
			private void OnSettlementLeft(MobileParty party, Settlement settlement)
			{
				if (party == MobileParty.MainParty && settlement == base.QuestGiver.CurrentSettlement)
				{
					this._questHideout.Hideout.IsSpotted = true;
					this._questHideout.IsVisible = true;
					base.AddTrackedObject(this._questHideout);
					TextObject textObject = new TextObject("{=R9R6imnU}Scouts working for {QUEST_GIVER.NAME} marked the hideout on your map", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					MBInformationManager.AddQuickInformation(textObject, 0, null, "");
				}
			}

			// Token: 0x060047ED RID: 18413 RVA: 0x0014218C File Offset: 0x0014038C
			private void OnMapEventEnded(MapEvent mapEvent)
			{
				if (mapEvent.IsPlayerMapEvent)
				{
					if (mapEvent.MapEventSettlement == this._questHideout)
					{
						if (mapEvent.DefeatedSide == mapEvent.PlayerSide || mapEvent.DefeatedSide == BattleSideEnum.None)
						{
							base.AddLog(this._playerLostTheFightLogText, false);
							this.FailConsequences(false);
							return;
						}
						base.AddLog(this._successQuestLogText, false);
						this.SuccessConsequences();
						return;
					}
				}
				else if (this._questHideout.Parties.Count == 0)
				{
					base.AddLog(this._hideoutClearedBySomeoneElseLogText, false);
					base.CompleteQuestWithFail(null);
				}
			}

			// Token: 0x060047EE RID: 18414 RVA: 0x00142218 File Offset: 0x00140418
			private void SuccessConsequences()
			{
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = 5;
				if (base.QuestGiver.CurrentSettlement != null && base.QuestGiver.CurrentSettlement.Town != null)
				{
					base.QuestGiver.CurrentSettlement.Town.Security += 5f;
				}
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 100)
				});
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x060047EF RID: 18415 RVA: 0x001422B4 File Offset: 0x001404B4
			private void FailConsequences(bool isTimedOut)
			{
				TraitLevelingHelper.OnIssueFailed(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-10f);
				if (base.QuestGiver.CurrentSettlement != null && base.QuestGiver.CurrentSettlement.Town != null)
				{
					base.QuestGiver.CurrentSettlement.Town.Security -= 5f;
				}
				if (!isTimedOut)
				{
					base.CompleteQuestWithFail(null);
				}
			}

			// Token: 0x060047F0 RID: 18416 RVA: 0x00142343 File Offset: 0x00140543
			protected override void OnTimedOut()
			{
				base.AddLog(this._timeOutLogText, false);
				this.FailConsequences(true);
			}

			// Token: 0x04001900 RID: 6400
			[SaveableField(102)]
			private Settlement _questHideout;
		}

		// Token: 0x0200060B RID: 1547
		public class CapturedByBountyHuntersIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x060047F1 RID: 18417 RVA: 0x0014235A File Offset: 0x0014055A
			public CapturedByBountyHuntersIssueTypeDefiner()
				: base(580000)
			{
			}

			// Token: 0x060047F2 RID: 18418 RVA: 0x00142367 File Offset: 0x00140567
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssue), 1, null);
				base.AddClassDefinition(typeof(CapturedByBountyHuntersIssueBehavior.CapturedByBountyHuntersIssueQuest), 2, null);
			}
		}
	}
}
