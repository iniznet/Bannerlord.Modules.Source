using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000316 RID: 790
	public class LordNeedsHorsesIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D19 RID: 11545 RVA: 0x000BC3BC File Offset: 0x000BA5BC
		private void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnIssueSelected), typeof(LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002D1A RID: 11546 RVA: 0x000BC420 File Offset: 0x000BA620
		private IssueBase OnIssueSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssue(issueOwner);
		}

		// Token: 0x06002D1B RID: 11547 RVA: 0x000BC428 File Offset: 0x000BA628
		private bool ConditionsHold(Hero issueGiver)
		{
			if (!issueGiver.IsFactionLeader)
			{
				Clan clan = issueGiver.Clan;
				if (((clan != null) ? clan.Leader : null) != issueGiver)
				{
					return false;
				}
			}
			if (!issueGiver.IsMinorFactionHero && issueGiver.Clan != Clan.PlayerClan)
			{
				MobileParty partyBelongedTo = issueGiver.PartyBelongedTo;
				if (partyBelongedTo != null && partyBelongedTo.Party.MemberRoster.TotalManCount > 50)
				{
					int num2;
					float num = LordNeedsHorsesIssueBehavior.ComputeMountsOverInfantryCountRatio(partyBelongedTo, out num2);
					return num2 >= 10 && num < 0.6f;
				}
			}
			return false;
		}

		// Token: 0x06002D1C RID: 11548 RVA: 0x000BC4A0 File Offset: 0x000BA6A0
		public static float ComputeMountsOverInfantryCountRatio(MobileParty issueParty, out int numInfantry)
		{
			if (issueParty == null)
			{
				Debug.FailedAssert("Cannot compute mounts over infantry ratio as related party is null", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Issues\\LordNeedsHorsesIssueBehavior.cs", "ComputeMountsOverInfantryCountRatio", 888);
				numInfantry = 0;
				return float.MaxValue;
			}
			int numberOfMounts = issueParty.ItemRoster.NumberOfMounts;
			numInfantry = 0;
			foreach (TroopRosterElement troopRosterElement in issueParty.Party.MemberRoster.GetTroopRoster())
			{
				if (troopRosterElement.Character.IsInfantry)
				{
					numInfantry += troopRosterElement.Number;
				}
			}
			if (numInfantry != 0)
			{
				return (float)numberOfMounts / (float)numInfantry;
			}
			return float.MaxValue;
		}

		// Token: 0x06002D1D RID: 11549 RVA: 0x000BC554 File Offset: 0x000BA754
		public static bool IsMountCamel(ItemObject mountObject)
		{
			HorseComponent horseComponent;
			return (horseComponent = ((mountObject != null) ? mountObject.ItemComponent : null) as HorseComponent) != null && horseComponent.Monster.MonsterUsage == "camel";
		}

		// Token: 0x06002D1E RID: 11550 RVA: 0x000BC58D File Offset: 0x000BA78D
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D1F RID: 11551 RVA: 0x000BC5A6 File Offset: 0x000BA7A6
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x04000D96 RID: 3478
		private const IssueBase.IssueFrequency LordNeedsHorsesIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x02000645 RID: 1605
		public class LordNeedsHorsesIssue : IssueBase
		{
			// Token: 0x06004E00 RID: 19968 RVA: 0x0015A194 File Offset: 0x00158394
			internal static void AutoGeneratedStaticCollectObjectsLordNeedsHorsesIssue(object o, List<object> collectedObjects)
			{
				((LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004E01 RID: 19969 RVA: 0x0015A1A2 File Offset: 0x001583A2
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._mountObjectToBeDelivered);
			}

			// Token: 0x06004E02 RID: 19970 RVA: 0x0015A1B7 File Offset: 0x001583B7
			internal static object AutoGeneratedGetMemberValue_numMountsToBeDelivered(object o)
			{
				return ((LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssue)o)._numMountsToBeDelivered;
			}

			// Token: 0x06004E03 RID: 19971 RVA: 0x0015A1C9 File Offset: 0x001583C9
			internal static object AutoGeneratedGetMemberValue_mountObjectToBeDelivered(object o)
			{
				return ((LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssue)o)._mountObjectToBeDelivered;
			}

			// Token: 0x06004E04 RID: 19972 RVA: 0x0015A1D6 File Offset: 0x001583D6
			internal static object AutoGeneratedGetMemberValue_mountValuePerUnit(object o)
			{
				return ((LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssue)o)._mountValuePerUnit;
			}

			// Token: 0x17001096 RID: 4246
			// (get) Token: 0x06004E05 RID: 19973 RVA: 0x0015A1E8 File Offset: 0x001583E8
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 2 + MathF.Ceiling(4f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17001097 RID: 4247
			// (get) Token: 0x06004E06 RID: 19974 RVA: 0x0015A1FD File Offset: 0x001583FD
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Duration;
				}
			}

			// Token: 0x17001098 RID: 4248
			// (get) Token: 0x06004E07 RID: 19975 RVA: 0x0015A200 File Offset: 0x00158400
			protected override int RewardGold
			{
				get
				{
					return 500 + MathF.Ceiling(1.5f * (float)this.IssueNumMountsToBeDelivered * (float)this._mountValuePerUnit);
				}
			}

			// Token: 0x17001099 RID: 4249
			// (get) Token: 0x06004E08 RID: 19976 RVA: 0x0015A222 File Offset: 0x00158422
			private int IssueNumMountsToBeDelivered
			{
				get
				{
					if (this._numMountsToBeDelivered == 0)
					{
						this._numMountsToBeDelivered = MathF.Max(1 + MathF.Ceiling(12f * base.IssueDifficultyMultiplier), 2);
					}
					return this._numMountsToBeDelivered;
				}
			}

			// Token: 0x1700109A RID: 4250
			// (get) Token: 0x06004E09 RID: 19977 RVA: 0x0015A251 File Offset: 0x00158451
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 3 + MathF.Ceiling(6f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x1700109B RID: 4251
			// (get) Token: 0x06004E0A RID: 19978 RVA: 0x0015A266 File Offset: 0x00158466
			private int AlternativeSolutionGoldRequirement
			{
				get
				{
					return this.IssueNumMountsToBeDelivered * this._mountValuePerUnit;
				}
			}

			// Token: 0x1700109C RID: 4252
			// (get) Token: 0x06004E0B RID: 19979 RVA: 0x0015A275 File Offset: 0x00158475
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(500f + 700f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x1700109D RID: 4253
			// (get) Token: 0x06004E0C RID: 19980 RVA: 0x0015A28A File Offset: 0x0015848A
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=TBpMffcv}Campaigning this season has taken even a higher toll on {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} than it has on my men. The animals will drop dead of exhaustion while my troops soldier on. Yet if we don't keep our stocks up, the enemy will run rings around us.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					return textObject;
				}
			}

			// Token: 0x1700109E RID: 4254
			// (get) Token: 0x06004E0D RID: 19981 RVA: 0x0015A2B4 File Offset: 0x001584B4
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=jjNSVzx3}What do you need, my {?ISSUE_GIVER.GENDER}lady{?}lord{\\?}?", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x1700109F RID: 4255
			// (get) Token: 0x06004E0E RID: 19982 RVA: 0x0015A2D8 File Offset: 0x001584D8
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=ugHO6Sa6}I need more {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?}, specifically, we need {MOUNT_COUNT} and they need to be {PLURAL(MOUNT_NAME)}, because we know how to use them and how they fit our needs. Bring them to me and a bag of {REWARD}{GOLD_ICON} will be right in your pocket.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					textObject.SetTextVariable("MOUNT_COUNT", this.IssueNumMountsToBeDelivered);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("MOUNT_NAME", this._mountObjectToBeDelivered.Name);
					return textObject;
				}
			}

			// Token: 0x170010A0 RID: 4256
			// (get) Token: 0x06004E0F RID: 19983 RVA: 0x0015A359 File Offset: 0x00158559
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=0YRl5Yie}I'll bring your {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} by myself.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					return textObject;
				}
			}

			// Token: 0x170010A1 RID: 4257
			// (get) Token: 0x06004E10 RID: 19984 RVA: 0x0015A383 File Offset: 0x00158583
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x170010A2 RID: 4258
			// (get) Token: 0x06004E11 RID: 19985 RVA: 0x0015A388 File Offset: 0x00158588
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=YHG17dqZ}One of your companions who is good at haggling and riding would be appropriate for this task. {?MOUNT_TYPE_IS_CAMEL}Camels{?}Horses{\\?} should cost no more than {REQUIRED_GOLD_AMOUNT}{GOLD_ICON} denars and this should be covered by yourself. You'll also need some cavalry to bring the {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?}. A purse of {REWARD_GOLD_AMOUNT}{GOLD_ICON} denars will be waiting for you when you get the job done.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					textObject.SetTextVariable("REQUIRED_GOLD_AMOUNT", this.AlternativeSolutionGoldRequirement);
					textObject.SetTextVariable("REWARD_GOLD_AMOUNT", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x170010A3 RID: 4259
			// (get) Token: 0x06004E12 RID: 19986 RVA: 0x0015A3F2 File Offset: 0x001585F2
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=loJja04L}My men will bring your {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} as soon as possible.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					return textObject;
				}
			}

			// Token: 0x170010A4 RID: 4260
			// (get) Token: 0x06004E13 RID: 19987 RVA: 0x0015A41C File Offset: 0x0015861C
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=6EJbUGpi}You will be rewarded when your companion returns with the animals we discussed.", null);
				}
			}

			// Token: 0x170010A5 RID: 4261
			// (get) Token: 0x06004E14 RID: 19988 RVA: 0x0015A429 File Offset: 0x00158629
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=YF6PPWlT}Very good. I'm sure your men will bring my {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} as soon as possible.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					return textObject;
				}
			}

			// Token: 0x170010A6 RID: 4262
			// (get) Token: 0x06004E15 RID: 19989 RVA: 0x0015A454 File Offset: 0x00158654
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=PCigQKQ8}{QUEST_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}she{?}he{\\?} needs {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} for {?QUEST_GIVER.GENDER}her{?}his{\\?} party. You asked your companion {COMPANION.LINK} and {TROOP_COUNT} of your horsemen to deliver {MOUNT_COUNT} {PLURAL(MOUNT_NAME)} to {QUEST_GIVER.LINK}. {?QUEST_GIVER.GENDER}She{?}He{\\?} will pay you {REWARD}{GOLD_ICON} denars when the task is done. They will rejoin your party in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("TROOP_COUNT", this.AlternativeSolutionSentTroops.TotalManCount - 1);
					textObject.SetTextVariable("MOUNT_COUNT", this.IssueNumMountsToBeDelivered);
					textObject.SetTextVariable("MOUNT_NAME", this._mountObjectToBeDelivered.Name);
					textObject.SetTextVariable("RETURN_DAYS", MathF.Ceiling(base.AlternativeSolutionReturnTimeForTroops.RemainingDaysFromNow));
					return textObject;
				}
			}

			// Token: 0x170010A7 RID: 4263
			// (get) Token: 0x06004E16 RID: 19990 RVA: 0x0015A540 File Offset: 0x00158740
			public override TextObject IssueAlternativeSolutionSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=tJc5mZua}Your companion has successfully delivered the {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} {QUEST_GIVER.LINK} requested. You received {QUEST_REWARD}{GOLD_ICON} gold in return for your service.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					textObject.SetTextVariable("QUEST_REWARD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010A8 RID: 4264
			// (get) Token: 0x06004E17 RID: 19991 RVA: 0x0015A5B2 File Offset: 0x001587B2
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x06004E18 RID: 19992 RVA: 0x0015A5B5 File Offset: 0x001587B5
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, true);
			}

			// Token: 0x06004E19 RID: 19993 RVA: 0x0015A5CD File Offset: 0x001587CD
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2 && character.IsMounted;
			}

			// Token: 0x06004E1A RID: 19994 RVA: 0x0015A5E0 File Offset: 0x001587E0
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, true) && QuestHelper.CheckGoldForAlternativeSolution(this.AlternativeSolutionGoldRequirement, ref explanation);
			}

			// Token: 0x06004E1B RID: 19995 RVA: 0x0015A611 File Offset: 0x00158811
			public override void AlternativeSolutionStartConsequence()
			{
				Hero.MainHero.ChangeHeroGold(-this.AlternativeSolutionGoldRequirement);
			}

			// Token: 0x06004E1C RID: 19996 RVA: 0x0015A624 File Offset: 0x00158824
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				this.RelationshipChangeWithIssueOwner = 2;
				GainRenownAction.Apply(Hero.MainHero, 1f, false);
			}

			// Token: 0x06004E1D RID: 19997 RVA: 0x0015A63D File Offset: 0x0015883D
			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				this.RelationshipChangeWithIssueOwner = -5;
			}

			// Token: 0x06004E1E RID: 19998 RVA: 0x0015A647 File Offset: 0x00158847
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004E1F RID: 19999 RVA: 0x0015A649 File Offset: 0x00158849
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssueQuest(questId, base.IssueOwner, this.IssueNumMountsToBeDelivered, this._mountObjectToBeDelivered, this.RewardGold, CampaignTime.DaysFromNow(20f));
			}

			// Token: 0x06004E20 RID: 20000 RVA: 0x0015A673 File Offset: 0x00158873
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x06004E21 RID: 20001 RVA: 0x0015A678 File Offset: 0x00158878
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				skill = null;
				relationHero = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					relationHero = issueGiver;
					flag |= IssueBase.PreconditionFlags.Relation;
				}
				if (Hero.MainHero.MapFaction.IsKingdomFaction && Hero.MainHero.IsFactionLeader)
				{
					flag |= IssueBase.PreconditionFlags.MainHeroIsKingdomLeader;
				}
				if (issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004E22 RID: 20002 RVA: 0x0015A6EF File Offset: 0x001588EF
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x06004E23 RID: 20003 RVA: 0x0015A6F4 File Offset: 0x001588F4
			public override bool IssueStayAliveConditions()
			{
				int num;
				return !base.IssueOwner.IsDead && base.IssueOwner.PartyBelongedTo != null && base.IssueOwner.Clan != Clan.PlayerClan && (base.IssueOwner.IsFactionLeader || base.IssueOwner.Clan.Leader == base.IssueOwner) && LordNeedsHorsesIssueBehavior.ComputeMountsOverInfantryCountRatio(base.IssueOwner.PartyBelongedTo, out num) < 0.8f;
			}

			// Token: 0x170010A9 RID: 4265
			// (get) Token: 0x06004E24 RID: 20004 RVA: 0x0015A76E File Offset: 0x0015896E
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=5zF6vI5s}Lord Needs {?MOUNT_TYPE_IS_CAMEL}Camels{?}Horses{\\?}", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					return textObject;
				}
			}

			// Token: 0x170010AA RID: 4266
			// (get) Token: 0x06004E25 RID: 20005 RVA: 0x0015A798 File Offset: 0x00158998
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=GHbM1i6R}{QUEST_GIVER.LINK} needs {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} to speed up {?QUEST_GIVER.GENDER}her{?}his{\\?} party.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					return textObject;
				}
			}

			// Token: 0x06004E26 RID: 20006 RVA: 0x0015A7E8 File Offset: 0x001589E8
			public LordNeedsHorsesIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(20f))
			{
				MBList<ItemObject> mblist = new MBList<ItemObject>();
				foreach (ItemObject itemObject in Items.All)
				{
					if (itemObject.IsMountable && itemObject.Culture == issueOwner.Culture && !itemObject.NotMerchandise && (itemObject.Tier == ItemObject.ItemTiers.Tier1 || itemObject.Tier == ItemObject.ItemTiers.Tier2))
					{
						mblist.Add(itemObject);
					}
				}
				this._mountObjectToBeDelivered = mblist.GetRandomElement<ItemObject>();
				this._numMountsToBeDelivered = MathF.Max(1 + MathF.Ceiling(12f * base.IssueDifficultyMultiplier), 2);
				if (this._mountObjectToBeDelivered == null)
				{
					this._mountObjectToBeDelivered = MBObjectManager.Instance.GetObject<ItemObject>("sumpter_horse");
				}
				ItemObject mountObjectToBeDelivered = this._mountObjectToBeDelivered;
				this._mountValuePerUnit = ((mountObjectToBeDelivered != null) ? mountObjectToBeDelivered.Value : 0);
			}

			// Token: 0x06004E27 RID: 20007 RVA: 0x0015A8E0 File Offset: 0x00158AE0
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.ClanInfluence)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x06004E28 RID: 20008 RVA: 0x0015A8F5 File Offset: 0x00158AF5
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Trade) >= hero.GetSkillValue(DefaultSkills.Riding)) ? DefaultSkills.Trade : DefaultSkills.Riding, 120);
			}

			// Token: 0x04001A46 RID: 6726
			private const int IssueDueTimeInDays = 20;

			// Token: 0x04001A47 RID: 6727
			internal const int IssueGiverMinimumPartySize = 50;

			// Token: 0x04001A48 RID: 6728
			internal const int IssueGiverMinimumInfantryCount = 10;

			// Token: 0x04001A49 RID: 6729
			internal const float IssuePreConditionMinPlayerRelation = -10f;

			// Token: 0x04001A4A RID: 6730
			internal const float IssuePreConditionMountsOverInfantryRatioThreshold = 0.6f;

			// Token: 0x04001A4B RID: 6731
			internal const float IssueStayingAliveMountsOverInfantryRatioThreshold = 0.8f;

			// Token: 0x04001A4C RID: 6732
			private const int AlternativeSolutionCompanionSkillThreshold = 120;

			// Token: 0x04001A4D RID: 6733
			private const int AlternativeSolutionRenownRewardOnSuccess = 1;

			// Token: 0x04001A4E RID: 6734
			private const int AlternativeSolutionRelationRewardOnSuccess = 2;

			// Token: 0x04001A4F RID: 6735
			private const int AlternativeSolutionRelationPenaltyOnFail = -5;

			// Token: 0x04001A50 RID: 6736
			private const int AlternativeSolutionTroopTierRequirement = 2;

			// Token: 0x04001A51 RID: 6737
			[SaveableField(4)]
			private int _numMountsToBeDelivered;

			// Token: 0x04001A52 RID: 6738
			[SaveableField(2)]
			private readonly ItemObject _mountObjectToBeDelivered;

			// Token: 0x04001A53 RID: 6739
			[SaveableField(3)]
			private readonly int _mountValuePerUnit;
		}

		// Token: 0x02000646 RID: 1606
		public class LordNeedsHorsesIssueQuest : QuestBase
		{
			// Token: 0x06004E29 RID: 20009 RVA: 0x0015A922 File Offset: 0x00158B22
			internal static void AutoGeneratedStaticCollectObjectsLordNeedsHorsesIssueQuest(object o, List<object> collectedObjects)
			{
				((LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004E2A RID: 20010 RVA: 0x0015A930 File Offset: 0x00158B30
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._mountObjectToBeDelivered);
				collectedObjects.Add(this._questJournalEntry);
			}

			// Token: 0x06004E2B RID: 20011 RVA: 0x0015A951 File Offset: 0x00158B51
			internal static object AutoGeneratedGetMemberValue_numMountsToBeDelivered(object o)
			{
				return ((LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssueQuest)o)._numMountsToBeDelivered;
			}

			// Token: 0x06004E2C RID: 20012 RVA: 0x0015A963 File Offset: 0x00158B63
			internal static object AutoGeneratedGetMemberValue_mountObjectToBeDelivered(object o)
			{
				return ((LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssueQuest)o)._mountObjectToBeDelivered;
			}

			// Token: 0x06004E2D RID: 20013 RVA: 0x0015A970 File Offset: 0x00158B70
			internal static object AutoGeneratedGetMemberValue_questJournalEntry(object o)
			{
				return ((LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssueQuest)o)._questJournalEntry;
			}

			// Token: 0x170010AB RID: 4267
			// (get) Token: 0x06004E2E RID: 20014 RVA: 0x0015A97D File Offset: 0x00158B7D
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=5zF6vI5s}Lord Needs {?MOUNT_TYPE_IS_CAMEL}Camels{?}Horses{\\?}", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					return textObject;
				}
			}

			// Token: 0x170010AC RID: 4268
			// (get) Token: 0x06004E2F RID: 20015 RVA: 0x0015A9A7 File Offset: 0x00158BA7
			private TextObject _journalTaskName
			{
				get
				{
					TextObject textObject = new TextObject("{=plHZYtxF}{PLURAL(REQUESTED_MOUNT_NAME)} in Inventory: ", null);
					textObject.SetTextVariable("REQUESTED_MOUNT_NAME", this._mountObjectToBeDelivered.Name);
					return textObject;
				}
			}

			// Token: 0x170010AD RID: 4269
			// (get) Token: 0x06004E30 RID: 20016 RVA: 0x0015A9CC File Offset: 0x00158BCC
			private TextObject _onQuestStartedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=GQ96SX4M}{QUEST_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}she{?}he{\\?} needs {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} for {?QUEST_GIVER.GENDER}her{?}his{\\?} party. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to bring {MOUNT_COUNT} {PLURAL(MOUNT_NAME)} to {?QUEST_GIVER.GENDER}her{?}him{\\?}. {?QUEST_GIVER.GENDER}She{?}He{\\?} will pay you {REWARD_GOLD}{GOLD_ICON} denars when the task is done.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					textObject.SetTextVariable("MOUNT_COUNT", this._numMountsToBeDelivered);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("MOUNT_NAME", this._mountObjectToBeDelivered.Name);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010AE RID: 4270
			// (get) Token: 0x06004E31 RID: 20017 RVA: 0x0015AA68 File Offset: 0x00158C68
			private TextObject _onQuestSucceededLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=aGvLxsub}You have successfully delivered {MOUNT_COUNT} {PLURAL(MOUNT_NAME)} to {QUEST_GIVER.LINK} as requested. You received {GOLD_REWARD}{GOLD_ICON} denars in return for your service.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("MOUNT_COUNT", this._numMountsToBeDelivered);
					textObject.SetTextVariable("MOUNT_NAME", this._mountObjectToBeDelivered.Name);
					textObject.SetTextVariable("GOLD_REWARD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x170010AF RID: 4271
			// (get) Token: 0x06004E32 RID: 20018 RVA: 0x0015AAE8 File Offset: 0x00158CE8
			private TextObject _onQuestFailedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=yLuzvTtd}You had promised to deliver {MOUNT_COUNT} {PLURAL(MOUNT_NAME)} to {QUEST_GIVER.LINK}. But you've failed to complete this task. {QUEST_GIVER.LINK} was displeased.", null);
					textObject.SetTextVariable("MOUNT_COUNT", this._numMountsToBeDelivered);
					textObject.SetTextVariable("MOUNT_NAME", this._mountObjectToBeDelivered.Name);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010B0 RID: 4272
			// (get) Token: 0x06004E33 RID: 20019 RVA: 0x0015AB44 File Offset: 0x00158D44
			private TextObject _onQuestTimedOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=BFEYIMdi}You had promised to deliver {MOUNT_COUNT} {PLURAL(MOUNT_NAME)} to {QUEST_GIVER.LINK}. But you've failed to complete this task in time. {QUEST_GIVER.LINK} was displeased.", null);
					textObject.SetTextVariable("MOUNT_COUNT", this._numMountsToBeDelivered);
					textObject.SetTextVariable("MOUNT_NAME", this._mountObjectToBeDelivered.Name);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010B1 RID: 4273
			// (get) Token: 0x06004E34 RID: 20020 RVA: 0x0015ABA0 File Offset: 0x00158DA0
			private TextObject _onQuestCancelled1LogText
			{
				get
				{
					TextObject textObject = new TextObject("{=MKBWG06O}{QUEST_GIVER.LINK} had died and your agreement with {?QUEST_GIVER.GENDER}her{?}him{\\?} was canceled. You can no longer deliver the {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} to {?QUEST_GIVER.GENDER}her{?}him{\\?}.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010B2 RID: 4274
			// (get) Token: 0x06004E35 RID: 20021 RVA: 0x0015ABF0 File Offset: 0x00158DF0
			private TextObject _onQuestCancelled2LogText
			{
				get
				{
					TextObject textObject = new TextObject("{=pYgl86Cr}Your clan had entered a war with the {QUEST_GIVER.LINK}'s faction. Your agreement was canceled. You can no longer deliver the {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} to {?QUEST_GIVER.GENDER}her{?}him{\\?}.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010B3 RID: 4275
			// (get) Token: 0x06004E36 RID: 20022 RVA: 0x0015AC40 File Offset: 0x00158E40
			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010B4 RID: 4276
			// (get) Token: 0x06004E37 RID: 20023 RVA: 0x0015AC74 File Offset: 0x00158E74
			private TextObject _onQuestCancelled3LogText
			{
				get
				{
					TextObject textObject = new TextObject("{=qEh4gdjU}{QUEST_GIVER.LINK} was imprisoned and your agreement with {?QUEST_GIVER.GENDER}her{?}him{\\?} was canceled. You can no longer deliver the {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} to {?QUEST_GIVER.GENDER}her{?}him{\\?}.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010B5 RID: 4277
			// (get) Token: 0x06004E38 RID: 20024 RVA: 0x0015ACC4 File Offset: 0x00158EC4
			private TextObject _onQuestMountRequirementSatisfiedQuickText
			{
				get
				{
					TextObject textObject = new TextObject("{=ZCPrYXaO}You have enough {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?}. Return back to {QUEST_GIVER.LINK}.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010B6 RID: 4278
			// (get) Token: 0x06004E39 RID: 20025 RVA: 0x0015AD14 File Offset: 0x00158F14
			private TextObject _onQuestMountRequirementNotSatisfiedQuickText
			{
				get
				{
					TextObject textObject = new TextObject("{=aFNfxhwz}You no longer have enough {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} for {QUEST_GIVER.LINK}.", null);
					textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010B7 RID: 4279
			// (get) Token: 0x06004E3A RID: 20026 RVA: 0x0015AD63 File Offset: 0x00158F63
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x06004E3B RID: 20027 RVA: 0x0015AD68 File Offset: 0x00158F68
			public LordNeedsHorsesIssueQuest(string questId, Hero questGiver, int numMountsToBeDelivered, ItemObject mountObjectToBeDelivered, int rewardGold, CampaignTime duration)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._numMountsToBeDelivered = numMountsToBeDelivered;
				this._mountObjectToBeDelivered = mountObjectToBeDelivered;
				this._playerInventoryVersionNo = MobileParty.MainParty.ItemRoster.VersionNo;
				base.AddTrackedObject(base.QuestGiver);
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004E3C RID: 20028 RVA: 0x0015ADC0 File Offset: 0x00158FC0
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
				this._numMountsInInventory = this.GetNumQuestMountsInInventory();
				this._playerInventoryVersionNo = MobileParty.MainParty.ItemRoster.VersionNo;
				if (this._questJournalEntry == null)
				{
					this._questJournalEntry = base.JournalEntries.FirstOrDefault((JournalLog x) => x.Range == this._numMountsToBeDelivered && x.Type == LogType.Discreate);
					if (this._questJournalEntry == null)
					{
						if (base.JournalEntries.Count > 0)
						{
							for (int i = 0; i < base.JournalEntries.Count; i++)
							{
								if (base.JournalEntries[i].Type == LogType.Discreate)
								{
									base.RemoveLog(base.JournalEntries[i]);
								}
							}
							this._questJournalEntry = base.AddDiscreteLog(this._onQuestStartedLogText, this._journalTaskName, MBMath.ClampInt(this._numMountsInInventory, 0, this._numMountsToBeDelivered), this._numMountsToBeDelivered, null, false);
						}
						else
						{
							this._questJournalEntry = base.AddDiscreteLog(this._onQuestStartedLogText, this._journalTaskName, MBMath.ClampInt(this._numMountsInInventory, 0, this._numMountsToBeDelivered), this._numMountsToBeDelivered, null, false);
						}
					}
				}
				this.UpdateQuestJournalEntry();
			}

			// Token: 0x06004E3D RID: 20029 RVA: 0x0015AEE0 File Offset: 0x001590E0
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine("{=qR3gQrLi}Splendid. We'll need to keep moving around, though, so it might be tricky to find us. My fellow nobles will usually know where to find me though, if you ask them.", null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.OnQuestAccepted))
					.CloseDialog();
				new TextObject(LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? "{=nysBXpEO}camels" : "{=6YbGQDme}horses", null);
				TextObject textObject = new TextObject("{=bmW77NvO}What about my {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?}?", null);
				textObject.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
				TextObject textObject2 = new TextObject("{=TLcnbALt}Here are your {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}.", null);
				textObject2.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject2, false);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject2, false);
				TextObject textObject3 = new TextObject("{=6bt9jYai}I am still looking for the {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} you have requested.", null);
				textObject3.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
				TextObject textObject4 = new TextObject("{=pV7DLTAu}I am sorry, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}. I cannot deliver the {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} you requested.", null);
				textObject4.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject4, false);
				TextObject textObject5 = new TextObject("{=inkr6Dzy}Too bad. Perhaps someone else will be able to get me the {?MOUNT_TYPE_IS_CAMEL}camels{?}horses{\\?} that I need.", null);
				textObject5.SetTextVariable("MOUNT_TYPE_IS_CAMEL", LordNeedsHorsesIssueBehavior.IsMountCamel(this._mountObjectToBeDelivered) ? 1 : 0);
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(textObject, null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += MapEventHelper.OnConversationEnd;
					})
					.BeginPlayerOptions()
					.PlayerOption(textObject2, null)
					.Condition(() => this.GetNumQuestMountsInInventory() >= this._numMountsToBeDelivered)
					.NpcLine("{=9HJbLneH}Thank you for your help, {PLAYER.NAME}. Here is the purse I promised you. Farewell.", null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(base.CompleteQuestWithSuccess))
					.CloseDialog()
					.PlayerOption(textObject3, null)
					.NpcLine("{=cH0iAEfq}Please take care of this as quickly as you can. I need those animals.", null, null)
					.CloseDialog()
					.PlayerOption(textObject4, null)
					.NpcLine(textObject5, null, null)
					.Consequence(delegate
					{
						this.OnQuestDeclined();
					})
					.CloseDialog()
					.EndPlayerOptions();
			}

			// Token: 0x06004E3E RID: 20030 RVA: 0x0015B134 File Offset: 0x00159334
			private void OnQuestAccepted()
			{
				base.StartQuest();
				this._numMountsInInventory = this.GetNumQuestMountsInInventory();
				this._questJournalEntry = base.AddDiscreteLog(this._onQuestStartedLogText, this._journalTaskName, MBMath.ClampInt(this._numMountsInInventory, 0, this._numMountsToBeDelivered), this._numMountsToBeDelivered, null, false);
			}

			// Token: 0x06004E3F RID: 20031 RVA: 0x0015B185 File Offset: 0x00159385
			private void OnQuestDeclined()
			{
				base.AddLog(this._onQuestFailedLogText, false);
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004E40 RID: 20032 RVA: 0x0015B19C File Offset: 0x0015939C
			protected override void RegisterEvents()
			{
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.OnHourlyTickEvent));
				CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.OnPlayerInventoryExchange));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, new Action<Hero, Hero, KillCharacterAction.KillCharacterActionDetail, bool>(this.OnHeroKilled));
				CampaignEvents.HeroPrisonerTaken.AddNonSerializedListener(this, new Action<PartyBase, Hero>(this.OnHeroPrisonerTaken));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			// Token: 0x06004E41 RID: 20033 RVA: 0x0015B24A File Offset: 0x0015944A
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x06004E42 RID: 20034 RVA: 0x0015B260 File Offset: 0x00159460
			private void UpdateQuestJournalEntry()
			{
				int num = MBMath.ClampInt(this._numMountsInInventory, 0, this._numMountsToBeDelivered);
				if (num != this._questJournalEntry.CurrentProgress)
				{
					base.UpdateQuestTaskStage(this._questJournalEntry, num);
				}
			}

			// Token: 0x06004E43 RID: 20035 RVA: 0x0015B29C File Offset: 0x0015949C
			private void CheckAndHandleQuestSuccessConditions()
			{
				int numQuestMountsInInventory = this.GetNumQuestMountsInInventory();
				if (numQuestMountsInInventory != this._numMountsInInventory)
				{
					if (this._numMountsInInventory < this._numMountsToBeDelivered && numQuestMountsInInventory >= this._numMountsToBeDelivered)
					{
						MBInformationManager.AddQuickInformation(this._onQuestMountRequirementSatisfiedQuickText, 0, null, "");
					}
					else if (this._numMountsInInventory >= this._numMountsToBeDelivered && numQuestMountsInInventory < this._numMountsToBeDelivered)
					{
						MBInformationManager.AddQuickInformation(this._onQuestMountRequirementNotSatisfiedQuickText, 0, null, "");
					}
					this._numMountsInInventory = numQuestMountsInInventory;
					this.UpdateQuestJournalEntry();
				}
			}

			// Token: 0x06004E44 RID: 20036 RVA: 0x0015B31C File Offset: 0x0015951C
			private void OnHourlyTickEvent()
			{
				int versionNo = MobileParty.MainParty.ItemRoster.VersionNo;
				if (this._playerInventoryVersionNo != versionNo)
				{
					this.CheckAndHandleQuestSuccessConditions();
					this._playerInventoryVersionNo = versionNo;
				}
			}

			// Token: 0x06004E45 RID: 20037 RVA: 0x0015B350 File Offset: 0x00159550
			private void OnPlayerInventoryExchange(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
			{
				bool flag = false;
				foreach (ValueTuple<ItemRosterElement, int> valueTuple in purchasedItems)
				{
					ItemRosterElement itemRosterElement = valueTuple.Item1;
					if (itemRosterElement.EquipmentElement.Item == this._mountObjectToBeDelivered)
					{
						flag = true;
						break;
					}
				}
				bool flag2 = false;
				foreach (ValueTuple<ItemRosterElement, int> valueTuple2 in soldItems)
				{
					ItemRosterElement itemRosterElement = valueTuple2.Item1;
					if (itemRosterElement.EquipmentElement.Item == this._mountObjectToBeDelivered)
					{
						flag2 = true;
						break;
					}
				}
				if (flag || flag2)
				{
					this.CheckAndHandleQuestSuccessConditions();
				}
				this._playerInventoryVersionNo = MobileParty.MainParty.ItemRoster.VersionNo;
			}

			// Token: 0x06004E46 RID: 20038 RVA: 0x0015B43C File Offset: 0x0015963C
			private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification)
			{
				if (victim == base.QuestGiver)
				{
					base.CompleteQuestWithCancel(this._onQuestCancelled1LogText);
				}
			}

			// Token: 0x06004E47 RID: 20039 RVA: 0x0015B453 File Offset: 0x00159653
			private void OnHeroPrisonerTaken(PartyBase capturer, Hero prisoner)
			{
				if (prisoner == base.QuestGiver)
				{
					base.CompleteQuestWithCancel(this._onQuestCancelled3LogText);
				}
			}

			// Token: 0x06004E48 RID: 20040 RVA: 0x0015B46A File Offset: 0x0015966A
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this._onQuestCancelled2LogText);
				}
			}

			// Token: 0x06004E49 RID: 20041 RVA: 0x0015B494 File Offset: 0x00159694
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._onQuestCancelled2LogText);
			}

			// Token: 0x06004E4A RID: 20042 RVA: 0x0015B4AC File Offset: 0x001596AC
			protected override void OnCompleteWithSuccess()
			{
				base.AddLog(this._onQuestSucceededLogText, false);
				int num = this._numMountsToBeDelivered;
				foreach (ItemRosterElement itemRosterElement in MobileParty.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item == this._mountObjectToBeDelivered)
					{
						int amount = itemRosterElement.Amount;
						if (amount >= num)
						{
							this.GiveMounts(Hero.MainHero, base.QuestGiver, itemRosterElement, num);
							break;
						}
						num -= amount;
						this.GiveMounts(Hero.MainHero, base.QuestGiver, itemRosterElement, amount);
					}
				}
				GainRenownAction.Apply(Hero.MainHero, 1f, false);
				GiveGoldAction.ApplyForQuestBetweenCharacters(base.QuestGiver, Hero.MainHero, this.RewardGold, false);
				this.RelationshipChangeWithQuestGiver = 2;
			}

			// Token: 0x06004E4B RID: 20043 RVA: 0x0015B590 File Offset: 0x00159790
			private void GiveMounts(Hero giver, Hero receiver, ItemRosterElement item, int count)
			{
				if (giver.PartyBelongedTo != null)
				{
					giver.PartyBelongedTo.Party.ItemRoster.AddToCounts(item.EquipmentElement, -count);
					if (receiver.PartyBelongedTo != null)
					{
						receiver.PartyBelongedTo.Party.ItemRoster.AddToCounts(item.EquipmentElement, count);
					}
				}
			}

			// Token: 0x06004E4C RID: 20044 RVA: 0x0015B5EC File Offset: 0x001597EC
			protected override void OnFinalize()
			{
				base.RemoveTrackedObject(base.QuestGiver);
			}

			// Token: 0x06004E4D RID: 20045 RVA: 0x0015B5FA File Offset: 0x001597FA
			public override void OnFailed()
			{
				this.RelationshipChangeWithQuestGiver = -3;
			}

			// Token: 0x06004E4E RID: 20046 RVA: 0x0015B604 File Offset: 0x00159804
			protected override void OnTimedOut()
			{
				base.AddLog(this._onQuestTimedOutLogText, false);
				this.RelationshipChangeWithQuestGiver = -5;
			}

			// Token: 0x06004E4F RID: 20047 RVA: 0x0015B61C File Offset: 0x0015981C
			private int GetNumQuestMountsInInventory()
			{
				int num = 0;
				foreach (ItemRosterElement itemRosterElement in MobileParty.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item == this._mountObjectToBeDelivered)
					{
						num += itemRosterElement.Amount;
					}
				}
				return num;
			}

			// Token: 0x04001A54 RID: 6740
			private const int RenownChangeOnSuccess = 1;

			// Token: 0x04001A55 RID: 6741
			private const int RelationChangeOnSuccess = 2;

			// Token: 0x04001A56 RID: 6742
			private const int RelationChangeOnFailure = -3;

			// Token: 0x04001A57 RID: 6743
			private const int RelationChangeOnTimeOut = -5;

			// Token: 0x04001A58 RID: 6744
			[SaveableField(1)]
			private readonly int _numMountsToBeDelivered;

			// Token: 0x04001A59 RID: 6745
			[SaveableField(2)]
			private readonly ItemObject _mountObjectToBeDelivered;

			// Token: 0x04001A5A RID: 6746
			[SaveableField(3)]
			private JournalLog _questJournalEntry;

			// Token: 0x04001A5B RID: 6747
			private int _numMountsInInventory;

			// Token: 0x04001A5C RID: 6748
			private int _playerInventoryVersionNo;
		}

		// Token: 0x02000647 RID: 1607
		public class LordNeedsHorsesIssueBehaviorTypeDefiner : CampaignBehaviorBase.SaveableCampaignBehaviorTypeDefiner
		{
			// Token: 0x06004E55 RID: 20053 RVA: 0x0015B6E0 File Offset: 0x001598E0
			public LordNeedsHorsesIssueBehaviorTypeDefiner()
				: base(510000)
			{
			}

			// Token: 0x06004E56 RID: 20054 RVA: 0x0015B6ED File Offset: 0x001598ED
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssue), 1, null);
				base.AddClassDefinition(typeof(LordNeedsHorsesIssueBehavior.LordNeedsHorsesIssueQuest), 2, null);
			}

			// Token: 0x06004E57 RID: 20055 RVA: 0x0015B713 File Offset: 0x00159913
			protected override void DefineEnumTypes()
			{
			}
		}
	}
}
