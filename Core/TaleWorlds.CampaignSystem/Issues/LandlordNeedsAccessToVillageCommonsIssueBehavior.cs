using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000310 RID: 784
	public class LandlordNeedsAccessToVillageCommonsIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002CF0 RID: 11504 RVA: 0x000BB924 File Offset: 0x000B9B24
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002CF1 RID: 11505 RVA: 0x000BB93D File Offset: 0x000B9B3D
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002CF2 RID: 11506 RVA: 0x000BB940 File Offset: 0x000B9B40
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssue), IssueBase.IssueFrequency.Common, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssue), IssueBase.IssueFrequency.Common));
		}

		// Token: 0x06002CF3 RID: 11507 RVA: 0x000BB9A4 File Offset: 0x000B9BA4
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.CurrentSettlement != null && issueGiver.CurrentSettlement.IsVillage && !issueGiver.CurrentSettlement.IsUnderRaid && issueGiver.CurrentSettlement.Village.VillageType == DefaultVillageTypes.WheatFarm && issueGiver.IsRuralNotable && !Clan.BanditFactions.IsEmpty<Clan>() && issueGiver.GetTraitLevel(DefaultTraits.Mercy) <= 0 && issueGiver.GetTraitLevel(DefaultTraits.Generosity) <= 0 && issueGiver.CurrentSettlement.Village.Bound.Town.Security <= 70f && issueGiver.CurrentSettlement.Village.Bound.BoundVillages.Any(delegate(Village x)
			{
				if (x.Settlement != issueGiver.CurrentSettlement && !x.Settlement.IsUnderRaid)
				{
					return x.Settlement.Notables.Any((Hero notable) => notable.IsHeadman && notable.CanHaveQuestsOrIssues());
				}
				return false;
			});
		}

		// Token: 0x06002CF4 RID: 11508 RVA: 0x000BBAAC File Offset: 0x000B9CAC
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssue(issueOwner);
		}

		// Token: 0x04000D8E RID: 3470
		private const IssueBase.IssueFrequency LandlordNeedsAccessToVillageCommonsIssueFrequency = IssueBase.IssueFrequency.Common;

		// Token: 0x02000631 RID: 1585
		public class LandlordNeedsAccessToVillageCommonsIssue : IssueBase
		{
			// Token: 0x06004BD5 RID: 19413 RVA: 0x00151767 File Offset: 0x0014F967
			internal static void AutoGeneratedStaticCollectObjectsLandlordNeedsAccessToVillageCommonsIssue(object o, List<object> collectedObjects)
			{
				((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004BD6 RID: 19414 RVA: 0x00151775 File Offset: 0x0014F975
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._targetSettlement);
			}

			// Token: 0x06004BD7 RID: 19415 RVA: 0x0015178A File Offset: 0x0014F98A
			internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssue)o)._targetSettlement;
			}

			// Token: 0x17000FD4 RID: 4052
			// (get) Token: 0x06004BD8 RID: 19416 RVA: 0x00151797 File Offset: 0x0014F997
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Casualties | IssueBase.AlternativeSolutionScaleFlag.FailureRisk;
				}
			}

			// Token: 0x17000FD5 RID: 4053
			// (get) Token: 0x06004BD9 RID: 19417 RVA: 0x0015179B File Offset: 0x0014F99B
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 3 + MathF.Ceiling(4f + base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000FD6 RID: 4054
			// (get) Token: 0x06004BDA RID: 19418 RVA: 0x001517B0 File Offset: 0x0014F9B0
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 2 + MathF.Ceiling(4f + base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000FD7 RID: 4055
			// (get) Token: 0x06004BDB RID: 19419 RVA: 0x001517C5 File Offset: 0x0014F9C5
			protected override int RewardGold
			{
				get
				{
					return (int)(250f + 1000f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000FD8 RID: 4056
			// (get) Token: 0x06004BDC RID: 19420 RVA: 0x001517DC File Offset: 0x0014F9DC
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=6OKW8Ba3}{ISSUE_GIVER.LINK}, a landowner from {ISSUE_GIVER_SETTLEMENT}, has told you about {?ISSUE_GIVER.GENDER}her{?}his{\\?} problems with the herders of {TARGET_SETTLEMENT}. Apparently {?ISSUE_GIVER.GENDER}she{?}he{\\?} purchased the right to use a pasture near the village. But some local herders refuse to clear out and are causing problems for {?ISSUE_GIVER.GENDER}her{?}his{\\?} herdsmen. You have agreed to send {COMPANION.LINK} along with {NEEDED_MEN_COUNT} of your men to take care of the situation. You expect them to return in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("ISSUE_GIVER_SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("NEEDED_MEN_COUNT", this.AlternativeSolutionSentTroops.TotalManCount - 1);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			// Token: 0x17000FD9 RID: 4057
			// (get) Token: 0x06004BDD RID: 19421 RVA: 0x00151884 File Offset: 0x0014FA84
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=jYHKGhnc}Landlord needs access to the {TARGET_SETTLEMENT} commons", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000FDA RID: 4058
			// (get) Token: 0x06004BDE RID: 19422 RVA: 0x001518A8 File Offset: 0x0014FAA8
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=XXac5fMa}A landowner needs your help in a dispute with herders from nearby {TARGET_SETTLEMENT}. They won't let {?ISSUE_GIVER.GENDER}her{?}his{\\?} herdsmen use pastures {?ISSUE_GIVER.GENDER}she{?}he{\\?} bought.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000FDB RID: 4059
			// (get) Token: 0x06004BDF RID: 19423 RVA: 0x001518CC File Offset: 0x0014FACC
			public override TextObject IssueAsRumorInSettlement
			{
				get
				{
					TextObject textObject = new TextObject("{=nxyXKy2z}Old {QUEST_GIVER.NAME} has got some problems with those herders over in {TARGET_SETTLEMENT}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000FDC RID: 4060
			// (get) Token: 0x06004BE0 RID: 19424 RVA: 0x00151918 File Offset: 0x0014FB18
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=DUB6zfSe}I have a bit of a dispute with {TARGET_SETTLEMENT}. I recently purchased the right to graze cattle in the nearby pastures from a landowner there. But now some of the herders are making problems.", null);
					if (base.IssueOwner.CharacterObject.GetPersona() == DefaultTraits.PersonaCurt)
					{
						textObject = new TextObject("{=0TyPBryV}I recently bought the right to graze cattle near the village of {TARGET_SETTLEMENT}. Good pastureland is hard to find. But now the locals are giving my herdsmen trouble.", null);
					}
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000FDD RID: 4061
			// (get) Token: 0x06004BE1 RID: 19425 RVA: 0x0015196C File Offset: 0x0014FB6C
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=TXDjKUNf}What's the problem?", null);
				}
			}

			// Token: 0x17000FDE RID: 4062
			// (get) Token: 0x06004BE2 RID: 19426 RVA: 0x0015197C File Offset: 0x0014FB7C
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=Je7SWXK3}They claim that I don't have the right to graze there, that village land can't be bought and sold like that. But look, I spent my silver. I won't get it back. Meanwhile, I can't afford to wait. I need someone to ride along with my herdsmen and my cattle can graze, one way or the other, even if it means violence. I can't let my herd just starve.", null);
					if (base.IssueOwner.CharacterObject.GetPersona() == DefaultTraits.PersonaCurt)
					{
						textObject = new TextObject("{=5ehlbXm6}They don't want to share the pastures. But I spent my silver, and I hold the title deed. I need someone to ride along with my herdsmen and clear off anyone who gets in their way.", null);
					}
					return textObject;
				}
			}

			// Token: 0x17000FDF RID: 4063
			// (get) Token: 0x06004BE3 RID: 19427 RVA: 0x001519BC File Offset: 0x0014FBBC
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=wodLHjnh}You or one of your companions with some {ALTERNATIVE_TROOP_AMOUNT} men should do the job. Either way I am willing to pay you {REWARD}{GOLD_ICON}. I doubt they'd stand up long to real warriors.", null);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					textObject.SetTextVariable("ALTERNATIVE_TROOP_AMOUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000FE0 RID: 4064
			// (get) Token: 0x06004BE4 RID: 19428 RVA: 0x00151A09 File Offset: 0x0014FC09
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17000FE1 RID: 4065
			// (get) Token: 0x06004BE5 RID: 19429 RVA: 0x00151A0C File Offset: 0x0014FC0C
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000FE2 RID: 4066
			// (get) Token: 0x06004BE6 RID: 19430 RVA: 0x00151A0F File Offset: 0x0014FC0F
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=GOkjJwZr}I can get your herdsmen to the pastures.", null);
				}
			}

			// Token: 0x17000FE3 RID: 4067
			// (get) Token: 0x06004BE7 RID: 19431 RVA: 0x00151A1C File Offset: 0x0014FC1C
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=QO0EX2O3}Sure. I can order one of my companions and {TROOP_AMOUNT} men to escort your herds to pasture in {TARGET_SETTLEMENT}.", null);
					textObject.SetTextVariable("TROOP_AMOUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000FE4 RID: 4068
			// (get) Token: 0x06004BE8 RID: 19432 RVA: 0x00151A52 File Offset: 0x0014FC52
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					TextObject textObject = new TextObject("{=BH17ZNSe}I don't think we'll have any more problems at {TARGET_SETTLEMENT}, thanks to your men. Please give them our thanks, {?PLAYER.GENDER}madam{?}sir{\\?}.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000FE5 RID: 4069
			// (get) Token: 0x06004BE9 RID: 19433 RVA: 0x00151A78 File Offset: 0x0014FC78
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=8INOZiew}Thank you, both for looking out for my interests and upholding the law.", null);
					if (base.IssueOwner.CharacterObject.GetPersona() == DefaultTraits.PersonaCurt)
					{
						textObject = new TextObject("{=UsuOXc25}Thanks. Show those troublemakers that the law is the law.", null);
					}
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FE6 RID: 4070
			// (get) Token: 0x06004BEA RID: 19434 RVA: 0x00151AC7 File Offset: 0x0014FCC7
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(700f + 900f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x06004BEB RID: 19435 RVA: 0x00151ADC File Offset: 0x0014FCDC
			public LandlordNeedsAccessToVillageCommonsIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(15f))
			{
			}

			// Token: 0x06004BEC RID: 19436 RVA: 0x00151AEF File Offset: 0x0014FCEF
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return -1f;
				}
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x06004BED RID: 19437 RVA: 0x00151B14 File Offset: 0x0014FD14
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				int skillValue = hero.GetSkillValue(DefaultSkills.OneHanded);
				int skillValue2 = hero.GetSkillValue(DefaultSkills.TwoHanded);
				int skillValue3 = hero.GetSkillValue(DefaultSkills.Polearm);
				if (skillValue >= skillValue2 && skillValue >= skillValue3)
				{
					return new ValueTuple<SkillObject, int>(DefaultSkills.OneHanded, 150);
				}
				return new ValueTuple<SkillObject, int>((skillValue2 >= skillValue3) ? DefaultSkills.TwoHanded : DefaultSkills.Polearm, 150);
			}

			// Token: 0x06004BEE RID: 19438 RVA: 0x00151B77 File Offset: 0x0014FD77
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004BEF RID: 19439 RVA: 0x00151B98 File Offset: 0x0014FD98
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				this.ApplySuccessRewards();
			}

			// Token: 0x06004BF0 RID: 19440 RVA: 0x00151BA0 File Offset: 0x0014FDA0
			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				this.ApplyFailRewards();
			}

			// Token: 0x06004BF1 RID: 19441 RVA: 0x00151BA8 File Offset: 0x0014FDA8
			private void ApplySuccessRewards()
			{
				base.IssueOwner.AddPower(10f);
				ChangeRelationAction.ApplyPlayerRelation(base.IssueOwner, 5, true, true);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.IssueOwner, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30),
					new Tuple<TraitObject, int>(DefaultTraits.Mercy, -20)
				});
				foreach (Hero hero in this._targetSettlement.Notables)
				{
					if (hero.IsHeadman)
					{
						ChangeRelationAction.ApplyPlayerRelation(hero, -3, true, true);
						hero.AddPower(-10f);
					}
				}
			}

			// Token: 0x06004BF2 RID: 19442 RVA: 0x00151C64 File Offset: 0x0014FE64
			private void ApplyFailRewards()
			{
				base.IssueOwner.AddPower(-10f);
				ChangeRelationAction.ApplyPlayerRelation(base.IssueOwner, -5, true, true);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.IssueOwner, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -20)
				});
				foreach (Hero hero in this._targetSettlement.Notables)
				{
					if (hero.IsHeadman)
					{
						ChangeRelationAction.ApplyPlayerRelation(hero, 3, true, true);
						hero.AddPower(10f);
					}
				}
			}

			// Token: 0x06004BF3 RID: 19443 RVA: 0x00151D10 File Offset: 0x0014FF10
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004BF4 RID: 19444 RVA: 0x00151D28 File Offset: 0x0014FF28
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			// Token: 0x06004BF5 RID: 19445 RVA: 0x00151D36 File Offset: 0x0014FF36
			protected override void AfterIssueCreation()
			{
				Village village = base.IssueOwner.CurrentSettlement.Village.Bound.BoundVillages.FirstOrDefault(delegate(Village x)
				{
					if (x.Settlement != base.IssueOwner.CurrentSettlement && !x.Settlement.IsUnderRaid)
					{
						return x.Settlement.Notables.Any((Hero notable) => notable.IsHeadman);
					}
					return false;
				});
				this._targetSettlement = ((village != null) ? village.Settlement : null);
			}

			// Token: 0x06004BF6 RID: 19446 RVA: 0x00151D75 File Offset: 0x0014FF75
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004BF7 RID: 19447 RVA: 0x00151D77 File Offset: 0x0014FF77
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(6f), this._targetSettlement, this.RewardGold, base.IssueDifficultyMultiplier);
			}

			// Token: 0x06004BF8 RID: 19448 RVA: 0x00151DA1 File Offset: 0x0014FFA1
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			// Token: 0x06004BF9 RID: 19449 RVA: 0x00151DA4 File Offset: 0x0014FFA4
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				skill = null;
				relationHero = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (base.IssueOwner.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (MobileParty.MainParty.MemberRoster.TotalHealthyCount < 10)
				{
					flag |= IssueBase.PreconditionFlags.NotEnoughTroops;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004BFA RID: 19450 RVA: 0x00151E18 File Offset: 0x00150018
			public override bool IssueStayAliveConditions()
			{
				if (!base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid && base.IssueOwner.CurrentSettlement.Village.Bound.Town.Security <= 90f)
				{
					if (this._targetSettlement.Notables.Any((Hero x) => x.IsHeadman))
					{
						return !Clan.BanditFactions.IsEmpty<Clan>();
					}
				}
				return false;
			}

			// Token: 0x06004BFB RID: 19451 RVA: 0x00151EAF File Offset: 0x001500AF
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x040019E5 RID: 6629
			private const int AlternativeSolutionTroopTierRequirement = 2;

			// Token: 0x040019E6 RID: 6630
			private const int MinimumRequiredMenCount = 10;

			// Token: 0x040019E7 RID: 6631
			private const int NeededCompanionSkill = 150;

			// Token: 0x040019E8 RID: 6632
			private const int IssueDuration = 15;

			// Token: 0x040019E9 RID: 6633
			private const int QuestTimeLimit = 6;

			// Token: 0x040019EA RID: 6634
			[SaveableField(100)]
			private Settlement _targetSettlement;
		}

		// Token: 0x02000632 RID: 1586
		public class LandlordNeedsAccessToVillageCommonsIssueQuest : QuestBase
		{
			// Token: 0x06004BFD RID: 19453 RVA: 0x00151F12 File Offset: 0x00150112
			internal static void AutoGeneratedStaticCollectObjectsLandlordNeedsAccessToVillageCommonsIssueQuest(object o, List<object> collectedObjects)
			{
				((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004BFE RID: 19454 RVA: 0x00151F20 File Offset: 0x00150120
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._rivalMobileParty);
				collectedObjects.Add(this._targetSettlement);
				collectedObjects.Add(this._herdersMobileParty);
				collectedObjects.Add(this._headmanNotable);
			}

			// Token: 0x06004BFF RID: 19455 RVA: 0x00151F59 File Offset: 0x00150159
			internal static object AutoGeneratedGetMemberValue_rivalMobileParty(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._rivalMobileParty;
			}

			// Token: 0x06004C00 RID: 19456 RVA: 0x00151F66 File Offset: 0x00150166
			internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._targetSettlement;
			}

			// Token: 0x06004C01 RID: 19457 RVA: 0x00151F73 File Offset: 0x00150173
			internal static object AutoGeneratedGetMemberValue_herdersMobileParty(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._herdersMobileParty;
			}

			// Token: 0x06004C02 RID: 19458 RVA: 0x00151F80 File Offset: 0x00150180
			internal static object AutoGeneratedGetMemberValue_issueDifficultyMultiplier(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._issueDifficultyMultiplier;
			}

			// Token: 0x06004C03 RID: 19459 RVA: 0x00151F92 File Offset: 0x00150192
			internal static object AutoGeneratedGetMemberValue_headmanNotable(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._headmanNotable;
			}

			// Token: 0x06004C04 RID: 19460 RVA: 0x00151F9F File Offset: 0x0015019F
			internal static object AutoGeneratedGetMemberValue_questId(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._questId;
			}

			// Token: 0x06004C05 RID: 19461 RVA: 0x00151FAC File Offset: 0x001501AC
			internal static object AutoGeneratedGetMemberValue_rewardGold(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._rewardGold;
			}

			// Token: 0x06004C06 RID: 19462 RVA: 0x00151FBE File Offset: 0x001501BE
			internal static object AutoGeneratedGetMemberValue_rivalPartySpawnDeltaTime(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._rivalPartySpawnDeltaTime;
			}

			// Token: 0x06004C07 RID: 19463 RVA: 0x00151FD0 File Offset: 0x001501D0
			internal static object AutoGeneratedGetMemberValue_battleStarted(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._battleStarted;
			}

			// Token: 0x06004C08 RID: 19464 RVA: 0x00151FE2 File Offset: 0x001501E2
			internal static object AutoGeneratedGetMemberValue_spawnRivalPartyAfterHours(object o)
			{
				return ((LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest)o)._spawnRivalPartyAfterHours;
			}

			// Token: 0x17000FE7 RID: 4071
			// (get) Token: 0x06004C09 RID: 19465 RVA: 0x00151FF4 File Offset: 0x001501F4
			public sealed override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=oT8DUcHf}Landowner needs {TARGET_SETTLEMENT}'s pasture", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000FE8 RID: 4072
			// (get) Token: 0x06004C0A RID: 19466 RVA: 0x00152018 File Offset: 0x00150218
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000FE9 RID: 4073
			// (get) Token: 0x06004C0B RID: 19467 RVA: 0x0015201C File Offset: 0x0015021C
			private TextObject _playerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=GyZHauax}{QUEST_GIVER.LINK}, a rural landowner, has told you about {?QUEST_GIVER.GENDER}her{?}his{\\?} problems with the local herders of {TARGET_SETTLEMENT}. Apparently {?QUEST_GIVER.GENDER}she{?}he{\\?} purchased the right to use a nearby pasture. But the local herders of {TARGET_SETTLEMENT} refuse to clear out and are causing problems for {?QUEST_GIVER.GENDER}her{?}his{\\?} herdsmen. You agreed to do the job yourself, and escort herders to pasture.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17000FEA RID: 4074
			// (get) Token: 0x06004C0C RID: 19468 RVA: 0x00152084 File Offset: 0x00150284
			private TextObject _successWitHVillagerSurrenderQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=avMQKUoJ}You were able to drive the herders from the disputed pasture. The landowner {QUEST_GIVER.LINK}. {?QUEST_GIVER.GENDER}She{?}he{\\?} is grateful and sends {REWARD}{GOLD_ICON} with {?QUEST_GIVER.GENDER}her{?}his{\\?} regards.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("REWARD", this._rewardGold);
					return textObject;
				}
			}

			// Token: 0x17000FEB RID: 4075
			// (get) Token: 0x06004C0D RID: 19469 RVA: 0x001520DC File Offset: 0x001502DC
			private TextObject _successWitHWinningTheFightQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=YbBObxLH}You were able to drive the herders from the disputed pasture. The landowner, {QUEST_GIVER.LINK}, is grateful and sends {REWARD}{GOLD_ICON} with {?QUEST_GIVER.GENDER}her{?}his{\\?} regards.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("REWARD", this._rewardGold);
					return textObject;
				}
			}

			// Token: 0x17000FEC RID: 4076
			// (get) Token: 0x06004C0E RID: 19470 RVA: 0x00152150 File Offset: 0x00150350
			private TextObject _failWithLosingTheFightQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=117W31dZ}You were unable to drive the herders from the disputed pasture. The landowner, {QUEST_GIVER.LINK}, probably feels that you let {?QUEST_GIVER.GENDER}her{?}him{\\?} down.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17000FED RID: 4077
			// (get) Token: 0x06004C0F RID: 19471 RVA: 0x001521A0 File Offset: 0x001503A0
			private TextObject _failWithCounterOfferLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=zJujFbXU}You decided that the herders had more right to the disputed pasture than the landowner, {QUEST_GIVER.LINK}. {?QUEST_GIVER.GENDER}She{?}He{\\?} probably feels betrayed.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17000FEE RID: 4078
			// (get) Token: 0x06004C10 RID: 19472 RVA: 0x001521F0 File Offset: 0x001503F0
			private TextObject _failByTimeoutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=ja74aAEI}You ignored the herders and did not solve the dispute. {?QUEST_GIVER.GENDER}She{?}he{\\?} probably feels betrayed.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FEF RID: 4079
			// (get) Token: 0x06004C11 RID: 19473 RVA: 0x00152224 File Offset: 0x00150424
			private TextObject _targetVillageRaided
			{
				get
				{
					TextObject textObject = new TextObject("{=aN85Kfnq}{SETTLEMENT} was raided. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17000FF0 RID: 4080
			// (get) Token: 0x06004C12 RID: 19474 RVA: 0x00152270 File Offset: 0x00150470
			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FF1 RID: 4081
			// (get) Token: 0x06004C13 RID: 19475 RVA: 0x001522A2 File Offset: 0x001504A2
			private TextObject _warDeclaredCancelLog
			{
				get
				{
					return new TextObject("{=wQH1N109}War broke out between your clan and the quest giver's realm. Quest canceled.", null);
				}
			}

			// Token: 0x06004C14 RID: 19476 RVA: 0x001522B0 File Offset: 0x001504B0
			public LandlordNeedsAccessToVillageCommonsIssueQuest(string questId, Hero questGiver, CampaignTime duration, Settlement targetSettlement, int rewardGold, float issueDifficultyMultiplier)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._targetSettlement = targetSettlement;
				this._headmanNotable = targetSettlement.Notables.First((Hero x) => x.IsHeadman);
				this._questId = questId;
				this._rewardGold = rewardGold;
				this._issueDifficultyMultiplier = issueDifficultyMultiplier;
				this._rivalPartySpawnDeltaTime = 0;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004C15 RID: 19477 RVA: 0x0015232C File Offset: 0x0015052C
			protected override void SetDialogs()
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetRivalPartyDialogues(), this);
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetHerderPartyNearVillageDialogues(), this);
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetHerderPartyDialogues(), this);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=qkYCWjTA}I appreciate it. I wait for the good news.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=FogJnYH9}Any news about the pastures?", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=wErSpkjy}I'm still working on it.", null), null)
					.NpcLine(new TextObject("{=L1JyetPq}I am glad to hear that.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=7o68QryW}Not yet. I have some other business to attend to.", null), null)
					.NpcLine(new TextObject("{=bEab8stb}Okay. I'm waiting for your good news.", null), null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x06004C16 RID: 19478 RVA: 0x0015245C File Offset: 0x0015065C
			private DialogFlow GetRivalPartyDialogues()
			{
				TextObject textObject = new TextObject("{=Rt2w61N8}Don't get involved in this. We've grazed our herds on these hillsides since our fathers' fathers' time. We don't care if one rich bastard gave a couple of bags of silver to another rich bastard. We don't care about title deeds or courts of law or any of that. Custom is custom, and we're not going anywhere!", null);
				TextObject textObject2 = new TextObject("{=YPTZ2et7}Calm down. You're right. No one has the right to sell your ancestral lands. These herdsmen can take their cattle elsewhere.", null);
				TextObject textObject3 = new TextObject("{=R1W5Il2d}You can take your grievances to your lord, or to whoever sold the land. The law says a buyer has rights, and you need to clear out.", null);
				TextObject textObject4 = new TextObject("{=l3ALRD7c}You're just a rich bastard's lackey.", null);
				TextObject textObject5 = new TextObject("{=YLjksPbk}You're a kind {?PLAYER.GENDER}woman, madam{?}man, sir{\\?}. You understand what poor folk like us are up against.", null);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject4, false);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject5, false);
				TextObject textObject6 = new TextObject("{=ybb0ToHE}We will protect our lands!", null);
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine(textObject, null, null).Condition(new ConversationSentence.OnConditionDelegate(this.RivalPartyTalkOnCondition))
					.BeginPlayerOptions()
					.PlayerOption(textObject2, null)
					.NpcLine(textObject5, null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.FailWithAcceptingCounterOffer))
					.CloseDialog()
					.PlayerOption(textObject3, null)
					.EndPlayerOptions()
					.BeginNpcOptions()
					.NpcOption(textObject4, new ConversationSentence.OnConditionDelegate(this.RivalPartySurrenderOnCondition), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.SuccessWithVillagersSurrender))
					.CloseDialog()
					.NpcOption(textObject6, new ConversationSentence.OnConditionDelegate(this.RivalPartyFightOnCondition), null, null)
					.Consequence(delegate
					{
						PlayerEncounter.LeaveEncounter = false;
					})
					.CloseDialog()
					.EndNpcOptions()
					.CloseDialog();
			}

			// Token: 0x06004C17 RID: 19479 RVA: 0x001525AC File Offset: 0x001507AC
			private DialogFlow GetHerderPartyDialogues()
			{
				TextObject textObject = new TextObject("{=He6DW2Xb}Thank you for protecting us {?PLAYER.GENDER}madam{?}sir{\\?}. Keep following, we are almost there.", null);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine(textObject, null, null).Condition(new ConversationSentence.OnConditionDelegate(this.HerdersTalkOnCondition))
					.Consequence(delegate
					{
						PlayerEncounter.LeaveEncounter = true;
					})
					.CloseDialog();
			}

			// Token: 0x06004C18 RID: 19480 RVA: 0x00152625 File Offset: 0x00150825
			private bool RivalPartySurrenderOnCondition()
			{
				return MobileParty.MainParty.MemberRoster.TotalManCount - MobileParty.MainParty.MemberRoster.TotalWounded > 14;
			}

			// Token: 0x06004C19 RID: 19481 RVA: 0x0015264C File Offset: 0x0015084C
			private DialogFlow GetHerderPartyNearVillageDialogues()
			{
				TextObject textObject = new TextObject("{=crg2DrbZ}We are worried that the herders of {TARGET_SETTLEMENT} will harm our animals. Fortunately we have you on our side {?PLAYER.GENDER}madam{?}sir{\\?}.", null);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
				textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine(textObject, null, null).Condition(() => this.HerdersTalkOnCondition() && Campaign.Current.Models.MapDistanceModel.GetDistance(MobileParty.ConversationParty, this._targetSettlement) < 10f)
					.Consequence(delegate
					{
						PlayerEncounter.LeaveEncounter = true;
					})
					.CloseDialog();
			}

			// Token: 0x06004C1A RID: 19482 RVA: 0x001526DC File Offset: 0x001508DC
			private bool RivalPartyTalkOnCondition()
			{
				return base.IsOngoing && this._rivalMobileParty != null && CharacterObject.OneToOneConversationCharacter != null && this._rivalMobileParty.MemberRoster.Contains(CharacterObject.OneToOneConversationCharacter) && MobileParty.ConversationParty != null && !CharacterObject.OneToOneConversationCharacter.IsHero && MobileParty.ConversationParty.HomeSettlement == this._targetSettlement;
			}

			// Token: 0x06004C1B RID: 19483 RVA: 0x0015273E File Offset: 0x0015093E
			private bool RivalPartyFightOnCondition()
			{
				return MobileParty.MainParty.MemberRoster.TotalManCount - MobileParty.MainParty.MemberRoster.TotalWounded <= 14;
			}

			// Token: 0x06004C1C RID: 19484 RVA: 0x00152768 File Offset: 0x00150968
			private bool HerdersTalkOnCondition()
			{
				return base.IsOngoing && this._herdersMobileParty != null && CharacterObject.OneToOneConversationCharacter != null && this._herdersMobileParty.MemberRoster.Contains(CharacterObject.OneToOneConversationCharacter) && MobileParty.ConversationParty != null && !CharacterObject.OneToOneConversationCharacter.IsHero && MobileParty.ConversationParty.Party.Owner != Hero.MainHero && MobileParty.ConversationParty.HomeSettlement == base.QuestGiver.CurrentSettlement;
			}

			// Token: 0x06004C1D RID: 19485 RVA: 0x001527E8 File Offset: 0x001509E8
			private void FailWithAcceptingCounterOffer()
			{
				ChangeRelationAction.ApplyPlayerRelation(this._headmanNotable, 3, true, true);
				TraitLevelingHelper.OnIssueSolvedThroughBetrayal(this._headmanNotable, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -30),
					new Tuple<TraitObject, int>(DefaultTraits.Mercy, 20)
				});
				base.CompleteQuestWithFail(null);
				base.AddLog(this._failWithCounterOfferLogText, false);
				PlayerEncounter.LeaveEncounter = true;
			}

			// Token: 0x06004C1E RID: 19486 RVA: 0x00152850 File Offset: 0x00150A50
			private void SpawnRivalParty()
			{
				Clan clan = Clan.BanditFactions.FirstOrDefault((Clan x) => !x.Culture.CanHaveSettlement);
				if (clan == null)
				{
					Settlement settlement = SettlementHelper.FindNearestHideout(null, null);
					if (settlement != null)
					{
						CultureObject banditCulture = settlement.Culture;
						clan = Clan.BanditFactions.FirstOrDefault((Clan x) => x.Culture == banditCulture);
					}
					if (clan == null)
					{
						clan = Clan.BanditFactions.GetRandomElementInefficiently<Clan>();
					}
				}
				this._rivalMobileParty = BanditPartyComponent.CreateLooterParty("villagers_of_landlord_needs_access_to_village_common_quest" + this._questId, clan, this._targetSettlement, false);
				CharacterObject villager = base.QuestGiver.Culture.Villager;
				TroopRoster troopRoster = new TroopRoster(this._rivalMobileParty.Party);
				TextObject textObject = new TextObject("{=QLLeHRWw}Herders of {QUEST_SETTLEMENT}", null);
				textObject.SetTextVariable("QUEST_SETTLEMENT", this._targetSettlement.Name);
				troopRoster.AddToCounts(villager, MathF.Ceiling(10f + 20f * this._issueDifficultyMultiplier), false, 0, 0, true, -1);
				this._rivalMobileParty.InitializeMobilePartyAtPosition(troopRoster, new TroopRoster(this._rivalMobileParty.Party), this._targetSettlement.Position2D);
				this._rivalMobileParty.InitializePartyTrade(200);
				this._rivalMobileParty.SetPartyUsedByQuest(true);
				this._rivalMobileParty.SetCustomName(textObject);
				this._rivalMobileParty.IgnoreForHours(720f);
				this._rivalMobileParty.Ai.SetDoNotMakeNewDecisions(true);
				SetPartyAiAction.GetActionForEngagingParty(this._rivalMobileParty, this._herdersMobileParty);
				this._rivalMobileParty.Party.Visuals.SetMapIconAsDirty();
				base.AddTrackedObject(this._rivalMobileParty);
				this._rivalMobileParty.Aggressiveness = 0f;
			}

			// Token: 0x06004C1F RID: 19487 RVA: 0x00152A10 File Offset: 0x00150C10
			private void SuccessWithVillagersSurrender()
			{
				base.CompleteQuestWithSuccess();
				base.AddLog(this._successWitHVillagerSurrenderQuestLogText, false);
				PlayerEncounter.LeaveEncounter = true;
			}

			// Token: 0x06004C20 RID: 19488 RVA: 0x00152A2C File Offset: 0x00150C2C
			private void SpawnHerdersParty()
			{
				this._herdersMobileParty = MobileParty.CreateParty("rival_party_of_landlord_needs_access_to_village_common_quest" + this._questId, null, null);
				CharacterObject villager = base.QuestGiver.Culture.Villager;
				TroopRoster troopRoster = new TroopRoster(this._herdersMobileParty.Party);
				TextObject textObject = new TextObject("{=tLakpr0a}Herdsmen of {QUEST_GIVER}", null);
				textObject.SetTextVariable("QUEST_GIVER", base.QuestGiver.Name);
				troopRoster.AddToCounts(villager, MathF.Ceiling(2f + 5f * this._issueDifficultyMultiplier), false, 0, 0, true, -1);
				this._herdersMobileParty.InitializeMobilePartyAtPosition(troopRoster, new TroopRoster(this._herdersMobileParty.Party), base.QuestGiver.CurrentSettlement.Position2D);
				this._herdersMobileParty.InitializePartyTrade(200);
				this._herdersMobileParty.SetCustomName(textObject);
				this._herdersMobileParty.SetCustomHomeSettlement(base.QuestGiver.CurrentSettlement);
				this._herdersMobileParty.SetPartyUsedByQuest(true);
				this._herdersMobileParty.ItemRoster.AddToCounts(MBObjectManager.Instance.GetObject<ItemObject>("sumpter_horse"), MathF.Ceiling(2f + 5f * this._issueDifficultyMultiplier));
				this._herdersMobileParty.IgnoreForHours(720f);
				this._herdersMobileParty.Ai.SetDoNotMakeNewDecisions(true);
				this._herdersMobileParty.Party.Visuals.SetMapIconAsDirty();
				base.AddTrackedObject(this._herdersMobileParty);
				this._herdersMobileParty.Aggressiveness = 0f;
				Vec2 vec = this._targetSettlement.GetPosition2D;
				for (int i = 0; i < 15; i++)
				{
					vec = MobilePartyHelper.FindReachablePointAroundPosition(this._targetSettlement.GetPosition2D, 6f, 5f);
					float num;
					if (Campaign.Current.Models.MapDistanceModel.GetDistance(this._targetSettlement, vec, 8f, out num))
					{
						break;
					}
				}
				this._herdersMobileParty.Ai.SetMoveGoToPoint(vec);
				float num2;
				Campaign.Current.Models.MapDistanceModel.GetDistance(this._herdersMobileParty, vec, 8f, out num2);
				this._spawnRivalPartyAfterHours = (int)(num2 / this._herdersMobileParty.Speed) + 3;
			}

			// Token: 0x06004C21 RID: 19489 RVA: 0x00152C5B File Offset: 0x00150E5B
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddLog(this._playerStartsQuestLogText, false);
				base.AddTrackedObject(this._targetSettlement);
				this.SpawnHerdersParty();
			}

			// Token: 0x06004C22 RID: 19490 RVA: 0x00152C84 File Offset: 0x00150E84
			protected override void OnCompleteWithSuccess()
			{
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = 5;
				this._headmanNotable.AddPower(-10f);
				ChangeRelationAction.ApplyPlayerRelation(this._headmanNotable, -3, true, true);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30),
					new Tuple<TraitObject, int>(DefaultTraits.Mercy, -20)
				});
				GiveGoldAction.ApplyForQuestBetweenCharacters(null, Hero.MainHero, this._rewardGold, false);
			}

			// Token: 0x06004C23 RID: 19491 RVA: 0x00152D08 File Offset: 0x00150F08
			public override void OnFailed()
			{
				base.QuestGiver.AddPower(-10f);
				this._headmanNotable.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = -5;
				TraitLevelingHelper.OnIssueFailed(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -20)
				});
			}

			// Token: 0x06004C24 RID: 19492 RVA: 0x00152D60 File Offset: 0x00150F60
			protected override void OnTimedOut()
			{
				base.QuestGiver.AddPower(-10f);
				this.RelationshipChangeWithQuestGiver = -5;
				TraitLevelingHelper.OnIssueFailed(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -20)
				});
				base.AddLog(this._failByTimeoutLogText, false);
			}

			// Token: 0x06004C25 RID: 19493 RVA: 0x00152DB4 File Offset: 0x00150FB4
			protected override void OnFinalize()
			{
				if (this._herdersMobileParty != null && this._herdersMobileParty.IsVisible && this._herdersMobileParty.IsActive)
				{
					DestroyPartyAction.Apply(null, this._herdersMobileParty);
				}
				if (this._rivalMobileParty != null && this._rivalMobileParty.IsVisible && this._rivalMobileParty.IsActive)
				{
					DestroyPartyAction.Apply(null, this._rivalMobileParty);
				}
			}

			// Token: 0x06004C26 RID: 19494 RVA: 0x00152E20 File Offset: 0x00151020
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (this._rivalMobileParty != null && mapEvent.InvolvedParties.Contains(PartyBase.MainParty) && mapEvent.InvolvedParties.Contains(this._rivalMobileParty.Party) && !mapEvent.InvolvedParties.Contains(this._herdersMobileParty.Party))
				{
					this._herdersMobileParty.Party.MapEventSide = PartyBase.MainParty.MapEventSide;
				}
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x06004C27 RID: 19495 RVA: 0x00152EA4 File Offset: 0x001510A4
			private void OnMapEventEnded(MapEvent mapEvent)
			{
				if (this._rivalMobileParty != null && ((mapEvent.InvolvedParties.Contains(PartyBase.MainParty) && mapEvent.InvolvedParties.Contains(this._rivalMobileParty.Party)) || (mapEvent.InvolvedParties.Contains(PartyBase.MainParty) && mapEvent.InvolvedParties.Contains(this._rivalMobileParty.Party) && mapEvent.InvolvedParties.Contains(this._herdersMobileParty.Party))))
				{
					if (mapEvent.WinningSide == mapEvent.PlayerSide)
					{
						base.CompleteQuestWithSuccess();
						base.AddLog(this._successWitHWinningTheFightQuestLogText, false);
						return;
					}
					base.CompleteQuestWithFail(null);
					base.AddLog(this._failWithLosingTheFightQuestLogText, false);
				}
			}

			// Token: 0x06004C28 RID: 19496 RVA: 0x00152F60 File Offset: 0x00151160
			private void OnHourlyTick()
			{
				if (base.IsOngoing)
				{
					this.CheckAnSpawnRivalParty();
					if (this._rivalMobileParty != null)
					{
						MobileParty herdersMobileParty = this._herdersMobileParty;
						if (((herdersMobileParty != null) ? herdersMobileParty.MapEvent : null) == null)
						{
							MobileParty rivalMobileParty = this._rivalMobileParty;
							if (((rivalMobileParty != null) ? rivalMobileParty.MapEvent : null) == null && !this._battleStarted && Campaign.Current.Models.MapDistanceModel.GetDistance(this._rivalMobileParty, this._herdersMobileParty) < 0.25f)
							{
								EncounterManager.StartPartyEncounter(this._rivalMobileParty.Party, this._herdersMobileParty.Party);
								this._rivalMobileParty.MapEvent.IsInvulnerable = true;
								this._battleStarted = true;
							}
						}
						if (this._battleStarted && this._rivalMobileParty.MapEvent.BattleStartTime.ElapsedHoursUntilNow > 5f)
						{
							this._rivalMobileParty.MapEvent.FinalizeEvent();
							DestroyPartyAction.Apply(this._rivalMobileParty.Party, this._herdersMobileParty);
						}
					}
				}
			}

			// Token: 0x06004C29 RID: 19497 RVA: 0x00153060 File Offset: 0x00151260
			private void CheckAnSpawnRivalParty()
			{
				if (this._rivalMobileParty == null && this._rivalPartySpawnDeltaTime <= this._spawnRivalPartyAfterHours)
				{
					this._rivalPartySpawnDeltaTime++;
					if (this._rivalPartySpawnDeltaTime > this._spawnRivalPartyAfterHours)
					{
						this.SpawnRivalParty();
					}
				}
			}

			// Token: 0x06004C2A RID: 19498 RVA: 0x0015309C File Offset: 0x0015129C
			private void OnMobilePartyDestroyed(MobileParty mobileParty, PartyBase destroyerParty)
			{
				if (base.IsOngoing)
				{
					if (mobileParty == this._rivalMobileParty && (destroyerParty == PartyBase.MainParty || destroyerParty == this._herdersMobileParty.Party))
					{
						base.AddLog(this._successWitHWinningTheFightQuestLogText, false);
						base.CompleteQuestWithSuccess();
					}
					if (mobileParty == this._herdersMobileParty)
					{
						base.AddLog(this._failWithLosingTheFightQuestLogText, false);
						base.CompleteQuestWithFail(null);
					}
				}
			}

			// Token: 0x06004C2B RID: 19499 RVA: 0x00153102 File Offset: 0x00151302
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this._warDeclaredCancelLog);
				}
			}

			// Token: 0x06004C2C RID: 19500 RVA: 0x00153131 File Offset: 0x00151331
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._warDeclaredCancelLog);
			}

			// Token: 0x06004C2D RID: 19501 RVA: 0x00153148 File Offset: 0x00151348
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x06004C2E RID: 19502 RVA: 0x00153150 File Offset: 0x00151350
			private void OnVillageRaided(Village village)
			{
				if (village == this._targetSettlement.Village)
				{
					base.AddLog(this._targetVillageRaided, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x06004C2F RID: 19503 RVA: 0x00153178 File Offset: 0x00151378
			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.OnHourlyTick));
				CampaignEvents.MapEventEnded.AddNonSerializedListener(this, new Action<MapEvent>(this.OnMapEventEnded));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
				CampaignEvents.MobilePartyDestroyed.AddNonSerializedListener(this, new Action<MobileParty, PartyBase>(this.OnMobilePartyDestroyed));
				CampaignEvents.VillageBeingRaided.AddNonSerializedListener(this, new Action<Village>(this.OnVillageRaided));
				CampaignEvents.GameMenuOpened.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.OnGameMenuOpened));
				CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, new Action<Hero, Hero, KillCharacterAction.KillCharacterActionDetail, bool>(this.OnHeroKilled));
			}

			// Token: 0x06004C30 RID: 19504 RVA: 0x00153254 File Offset: 0x00151454
			public override void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
			{
				if (hero == this._headmanNotable)
				{
					result = false;
				}
			}

			// Token: 0x06004C31 RID: 19505 RVA: 0x00153264 File Offset: 0x00151464
			private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification = true)
			{
				if (victim == this._headmanNotable)
				{
					TextObject textObject = ((detail == KillCharacterAction.KillCharacterActionDetail.Lost) ? this.TargetHeroDisappearedLogText : this.TargetHeroDiedLogText);
					StringHelpers.SetCharacterProperties("QUEST_TARGET", this._headmanNotable.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					base.AddLog(textObject, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x06004C32 RID: 19506 RVA: 0x001532D0 File Offset: 0x001514D0
			private void OnGameMenuOpened(MenuCallbackArgs args)
			{
				if (args.MenuContext.GameMenu.StringId == "join_encounter" && this._battleStarted && PlayerEncounter.EncounteredBattle != null && PlayerEncounter.EncounteredBattle.InvolvedParties.Contains(this._rivalMobileParty.Party))
				{
					this._rivalMobileParty.MapEvent.IsInvulnerable = false;
				}
			}

			// Token: 0x040019EB RID: 6635
			private const int PastureRadius = 8;

			// Token: 0x040019EC RID: 6636
			private const int BattleFakeSimulationDuration = 5;

			// Token: 0x040019ED RID: 6637
			[SaveableField(11)]
			private MobileParty _rivalMobileParty;

			// Token: 0x040019EE RID: 6638
			[SaveableField(30)]
			private readonly Settlement _targetSettlement;

			// Token: 0x040019EF RID: 6639
			[SaveableField(21)]
			private MobileParty _herdersMobileParty;

			// Token: 0x040019F0 RID: 6640
			[SaveableField(31)]
			private float _issueDifficultyMultiplier;

			// Token: 0x040019F1 RID: 6641
			[SaveableField(50)]
			private readonly Hero _headmanNotable;

			// Token: 0x040019F2 RID: 6642
			[SaveableField(80)]
			private string _questId;

			// Token: 0x040019F3 RID: 6643
			[SaveableField(90)]
			private int _rewardGold;

			// Token: 0x040019F4 RID: 6644
			[SaveableField(100)]
			private int _rivalPartySpawnDeltaTime;

			// Token: 0x040019F5 RID: 6645
			[SaveableField(110)]
			private bool _battleStarted;

			// Token: 0x040019F6 RID: 6646
			[SaveableField(120)]
			private int _spawnRivalPartyAfterHours;
		}

		// Token: 0x02000633 RID: 1587
		public class LandlordNeedsAccessToVillageCommonsIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004C36 RID: 19510 RVA: 0x00153385 File Offset: 0x00151585
			public LandlordNeedsAccessToVillageCommonsIssueTypeDefiner()
				: base(420000)
			{
			}

			// Token: 0x06004C37 RID: 19511 RVA: 0x00153392 File Offset: 0x00151592
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssue), 1, null);
				base.AddClassDefinition(typeof(LandlordNeedsAccessToVillageCommonsIssueBehavior.LandlordNeedsAccessToVillageCommonsIssueQuest), 2, null);
			}
		}
	}
}
