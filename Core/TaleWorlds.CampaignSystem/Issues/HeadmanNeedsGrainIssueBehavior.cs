using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x0200030B RID: 779
	public class HeadmanNeedsGrainIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x17000AD1 RID: 2769
		// (get) Token: 0x06002CCB RID: 11467 RVA: 0x000BB0AC File Offset: 0x000B92AC
		private static int AverageGrainPriceInCalradia
		{
			get
			{
				return Campaign.Current.GetCampaignBehavior<HeadmanNeedsGrainIssueBehavior>()._averageGrainPriceInCalradia;
			}
		}

		// Token: 0x06002CCC RID: 11468 RVA: 0x000BB0C0 File Offset: 0x000B92C0
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
			CampaignEvents.WeeklyTickEvent.AddNonSerializedListener(this, new Action(this.WeeklyTick));
			CampaignEvents.OnSessionLaunchedEvent.AddNonSerializedListener(this, new Action<CampaignGameStarter>(this.OnSessionLaunched));
		}

		// Token: 0x06002CCD RID: 11469 RVA: 0x000BB112 File Offset: 0x000B9312
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002CCE RID: 11470 RVA: 0x000BB114 File Offset: 0x000B9314
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.CurrentSettlement != null && issueGiver.IsNotable && issueGiver.CurrentSettlement.IsVillage && issueGiver.CurrentSettlement.Village.Bound.IsTown && (issueGiver.IsHeadman && issueGiver.CurrentSettlement.Village.VillageType == DefaultVillageTypes.WheatFarm) && (float)issueGiver.CurrentSettlement.Village.GetItemPrice(DefaultItems.Grain, null, false) > (float)this._averageGrainPriceInCalradia * 1.3f;
		}

		// Token: 0x06002CCF RID: 11471 RVA: 0x000BB1A0 File Offset: 0x000B93A0
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssue), IssueBase.IssueFrequency.Rare, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssue), IssueBase.IssueFrequency.Rare));
		}

		// Token: 0x06002CD0 RID: 11472 RVA: 0x000BB204 File Offset: 0x000B9404
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssue(issueOwner);
		}

		// Token: 0x06002CD1 RID: 11473 RVA: 0x000BB20C File Offset: 0x000B940C
		private void WeeklyTick()
		{
			this.CacheGrainPrice();
		}

		// Token: 0x06002CD2 RID: 11474 RVA: 0x000BB214 File Offset: 0x000B9414
		private void OnSessionLaunched(CampaignGameStarter campaignGameStarter)
		{
			this.CacheGrainPrice();
		}

		// Token: 0x06002CD3 RID: 11475 RVA: 0x000BB21C File Offset: 0x000B941C
		private void CacheGrainPrice()
		{
			this._averageGrainPriceInCalradia = QuestHelper.GetAveragePriceOfItemInTheWorld(DefaultItems.Grain);
		}

		// Token: 0x04000D84 RID: 3460
		private const IssueBase.IssueFrequency HeadmanNeedsGrainIssueFrequency = IssueBase.IssueFrequency.Rare;

		// Token: 0x04000D85 RID: 3461
		private const int NearbyTownMarketGrainLimit = 50;

		// Token: 0x04000D86 RID: 3462
		private int _averageGrainPriceInCalradia;

		// Token: 0x02000622 RID: 1570
		public class HeadmanNeedsGrainIssue : IssueBase
		{
			// Token: 0x06004A3E RID: 19006 RVA: 0x0014B8AF File Offset: 0x00149AAF
			internal static void AutoGeneratedStaticCollectObjectsHeadmanNeedsGrainIssue(object o, List<object> collectedObjects)
			{
				((HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004A3F RID: 19007 RVA: 0x0014B8BD File Offset: 0x00149ABD
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x17000F49 RID: 3913
			// (get) Token: 0x06004A40 RID: 19008 RVA: 0x0014B8C6 File Offset: 0x00149AC6
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Duration;
				}
			}

			// Token: 0x17000F4A RID: 3914
			// (get) Token: 0x06004A41 RID: 19009 RVA: 0x0014B8C9 File Offset: 0x00149AC9
			private int NeededGrainAmount
			{
				get
				{
					return (int)(12f + 180f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F4B RID: 3915
			// (get) Token: 0x06004A42 RID: 19010 RVA: 0x0014B8DE File Offset: 0x00149ADE
			private int AlternativeSolutionNeededGold
			{
				get
				{
					return this.NeededGrainAmount * HeadmanNeedsGrainIssueBehavior.AverageGrainPriceInCalradia;
				}
			}

			// Token: 0x17000F4C RID: 3916
			// (get) Token: 0x06004A43 RID: 19011 RVA: 0x0014B8EC File Offset: 0x00149AEC
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 3 + MathF.Ceiling(6f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F4D RID: 3917
			// (get) Token: 0x06004A44 RID: 19012 RVA: 0x0014B901 File Offset: 0x00149B01
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 2 + MathF.Ceiling(6f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F4E RID: 3918
			// (get) Token: 0x06004A45 RID: 19013 RVA: 0x0014B916 File Offset: 0x00149B16
			protected override int RewardGold
			{
				get
				{
					return 0;
				}
			}

			// Token: 0x17000F4F RID: 3919
			// (get) Token: 0x06004A46 RID: 19014 RVA: 0x0014B91C File Offset: 0x00149B1C
			[CachedData]
			private Settlement NearbySuitableSettlement
			{
				get
				{
					if (this._nearbySuitableSettlementCache == null)
					{
						Settlement settlement = SettlementHelper.FindNearestSettlement(delegate(Settlement x)
						{
							if (x.Town != null && !x.Town.IsCastle && !x.MapFaction.IsAtWarWith(base.IssueOwner.MapFaction))
							{
								int price = x.Town.MarketData.GetPrice(DefaultItems.Grain, MobileParty.MainParty, false, null);
								return price > 0 && price < HeadmanNeedsGrainIssueBehavior.AverageGrainPriceInCalradia * 2;
							}
							return false;
						}, null);
						this._nearbySuitableSettlementCache = settlement;
					}
					return this._nearbySuitableSettlementCache;
				}
			}

			// Token: 0x17000F50 RID: 3920
			// (get) Token: 0x06004A47 RID: 19015 RVA: 0x0014B951 File Offset: 0x00149B51
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=sQBBOKDD}{ISSUE_SETTLEMENT} Needs Grain Seeds", null);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.IssueSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000F51 RID: 3921
			// (get) Token: 0x06004A48 RID: 19016 RVA: 0x0014B975 File Offset: 0x00149B75
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=OJObD61e}The headman of {ISSUE_SETTLEMENT} needs grain seeds for the coming sowing season.", null);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.IssueSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000F52 RID: 3922
			// (get) Token: 0x06004A49 RID: 19017 RVA: 0x0014B999 File Offset: 0x00149B99
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=p1buAbOQ}The harvest has been poor, and rats have eaten much of our stores. We can eat less and tighten our belts, but if we don't have seed grain left over to plant, we'll starve next year.", null);
				}
			}

			// Token: 0x17000F53 RID: 3923
			// (get) Token: 0x06004A4A RID: 19018 RVA: 0x0014B9A6 File Offset: 0x00149BA6
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=vKwndBbe}Is there a way to prevent this?", null);
				}
			}

			// Token: 0x17000F54 RID: 3924
			// (get) Token: 0x06004A4B RID: 19019 RVA: 0x0014B9B4 File Offset: 0x00149BB4
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=nG750jQB}Grain will solve our problems. If we had {GRAIN_AMOUNT} bushels, we could use it to sow our fields. But I doubt that {NEARBY_TOWN} has so much to sell at this time of the year. {GRAIN_AMOUNT} bushels of grain costs around {DENAR_AMOUNT}{GOLD_ICON} in the markets, and we don't have that!", null);
					int price = this.NearbySuitableSettlement.Town.MarketData.GetPrice(DefaultItems.Grain, MobileParty.MainParty, false, null);
					textObject.SetTextVariable("NEARBY_TOWN", this.NearbySuitableSettlement.Name);
					textObject.SetTextVariable("GRAIN_AMOUNT", this.NeededGrainAmount);
					textObject.SetTextVariable("DENAR_AMOUNT", price * this.NeededGrainAmount);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F55 RID: 3925
			// (get) Token: 0x06004A4C RID: 19020 RVA: 0x0014BA3C File Offset: 0x00149C3C
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=5NYPqKBj}I know you're busy, but maybe you can ask some of your men to find us that grain? {MEN_COUNT} men should do the job along with {GOLD}{GOLD_ICON}, and I'd reckon the whole affair should take two weeks. \nI'm desperate here, {?PLAYER.GENDER}madam{?}sir{\\?}... Don't let our children starve!", null);
					textObject.SetTextVariable("MEN_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("GOLD", this.AlternativeSolutionNeededGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetCharacterProperties("PLAYER", Hero.MainHero.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F56 RID: 3926
			// (get) Token: 0x06004A4D RID: 19021 RVA: 0x0014BA9F File Offset: 0x00149C9F
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=ihfuqu2S}I will find that seed grain for you.", null);
				}
			}

			// Token: 0x17000F57 RID: 3927
			// (get) Token: 0x06004A4E RID: 19022 RVA: 0x0014BAAC File Offset: 0x00149CAC
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=HCMsvAFv}I can order one of my companions and {MEN_COUNT} men to find grain for you.", null);
					textObject.SetTextVariable("MEN_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					return textObject;
				}
			}

			// Token: 0x17000F58 RID: 3928
			// (get) Token: 0x06004A4F RID: 19023 RVA: 0x0014BACB File Offset: 0x00149CCB
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=W6X5DffB}Thank you for sparing the men to bring us that seed grain, {?PLAYER.GENDER}madam{?}sir{\\?}. That should get us through the hard times ahead.", null);
				}
			}

			// Token: 0x17000F59 RID: 3929
			// (get) Token: 0x06004A50 RID: 19024 RVA: 0x0014BAD8 File Offset: 0x00149CD8
			public override TextObject IssueAsRumorInSettlement
			{
				get
				{
					TextObject textObject = new TextObject("{=WVobv24n}Heaven save us if {QUEST_GIVER.NAME} can't get {?QUEST_GIVER.GENDER}her{?}his{\\?} hands on more grain.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F5A RID: 3930
			// (get) Token: 0x06004A51 RID: 19025 RVA: 0x0014BB0A File Offset: 0x00149D0A
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=k63ZKmXX}Thank you, {?PLAYER.GENDER}milady{?}sir{\\?}! You are a saviour.", null);
				}
			}

			// Token: 0x17000F5B RID: 3931
			// (get) Token: 0x06004A52 RID: 19026 RVA: 0x0014BB17 File Offset: 0x00149D17
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17000F5C RID: 3932
			// (get) Token: 0x06004A53 RID: 19027 RVA: 0x0014BB1A File Offset: 0x00149D1A
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F5D RID: 3933
			// (get) Token: 0x06004A54 RID: 19028 RVA: 0x0014BB20 File Offset: 0x00149D20
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=a0UTO8tW}{ISSUE_OWNER.LINK}, the headman of {ISSUE_SETTLEMENT}, asked you to deliver {GRAIN_AMOUNT} bushels of grain to {?QUEST_GIVER.GENDER}her{?}him{\\?} to use as seeds. Otherwise the peasants cannot sow their fields and starve in the coming season. You have agreed to send your companion {COMPANION.NAME} along with {MEN_COUNT} men to find some grain and return to the village. Your men should return in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.IssueSettlement.Name);
					textObject.SetTextVariable("GRAIN_AMOUNT", this.NeededGrainAmount);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("MEN_COUNT", this.AlternativeSolutionSentTroops.TotalManCount - 1);
					return textObject;
				}
			}

			// Token: 0x17000F5E RID: 3934
			// (get) Token: 0x06004A55 RID: 19029 RVA: 0x0014BBBE File Offset: 0x00149DBE
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(500f + 700f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x06004A56 RID: 19030 RVA: 0x0014BBD3 File Offset: 0x00149DD3
			public HeadmanNeedsGrainIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
			}

			// Token: 0x06004A57 RID: 19031 RVA: 0x0014BBE6 File Offset: 0x00149DE6
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementProsperity)
				{
					return -0.2f;
				}
				if (issueEffect == DefaultIssueEffects.SettlementLoyalty)
				{
					return -0.5f;
				}
				return 0f;
			}

			// Token: 0x06004A58 RID: 19032 RVA: 0x0014BC09 File Offset: 0x00149E09
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Trade) >= hero.GetSkillValue(DefaultSkills.Medicine)) ? DefaultSkills.Trade : DefaultSkills.Medicine, 120);
			}

			// Token: 0x06004A59 RID: 19033 RVA: 0x0014BC36 File Offset: 0x00149E36
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 0, false);
			}

			// Token: 0x06004A5A RID: 19034 RVA: 0x0014BC4E File Offset: 0x00149E4E
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 0, false) && QuestHelper.CheckGoldForAlternativeSolution(this.AlternativeSolutionNeededGold, ref explanation);
			}

			// Token: 0x06004A5B RID: 19035 RVA: 0x0014BC80 File Offset: 0x00149E80
			public override void AlternativeSolutionStartConsequence()
			{
				GiveGoldAction.ApplyForCharacterToParty(Hero.MainHero, base.IssueSettlement.Party, this.AlternativeSolutionNeededGold, false);
				TextObject textObject = new TextObject("{=ex6ZhAAv}You gave {DENAR}{GOLD_ICON} to companion to buy {GRAIN_AMOUNT} units of grain for the {ISSUE_OWNER.NAME}.", null);
				textObject.SetTextVariable("GRAIN_AMOUNT", this.NeededGrainAmount);
				textObject.SetTextVariable("DENAR", this.AlternativeSolutionNeededGold);
				textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
				MBInformationManager.AddQuickInformation(textObject, 0, null, "");
			}

			// Token: 0x06004A5C RID: 19036 RVA: 0x0014BD10 File Offset: 0x00149F10
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				TraitLevelingHelper.OnIssueSolvedThroughAlternativeSolution(base.IssueOwner, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Generosity, 30)
				});
				base.IssueOwner.AddPower(10f);
				base.IssueSettlement.Prosperity += 50f;
				this.RelationshipChangeWithIssueOwner = 2;
				foreach (Hero hero in base.IssueOwner.CurrentSettlement.Notables)
				{
					if (hero != base.IssueOwner)
					{
						ChangeRelationAction.ApplyPlayerRelation(hero, 1, true, true);
					}
				}
			}

			// Token: 0x06004A5D RID: 19037 RVA: 0x0014BDC8 File Offset: 0x00149FC8
			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				base.IssueOwner.AddPower(-5f);
				foreach (Hero hero in base.IssueOwner.CurrentSettlement.Notables)
				{
					ChangeRelationAction.ApplyPlayerRelation(hero, -3, true, true);
				}
				base.IssueSettlement.Prosperity += -10f;
			}

			// Token: 0x06004A5E RID: 19038 RVA: 0x0014BE50 File Offset: 0x0014A050
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Rare;
			}

			// Token: 0x06004A5F RID: 19039 RVA: 0x0014BE54 File Offset: 0x0014A054
			public override bool IssueStayAliveConditions()
			{
				return this.NearbySuitableSettlement != null && this.NearbySuitableSettlement.Position2D.Distance(base.IssueOwner.CurrentSettlement.Position2D) < 75f && (float)base.IssueOwner.CurrentSettlement.Village.GetItemPrice(DefaultItems.Grain, null, false) > (float)HeadmanNeedsGrainIssueBehavior.AverageGrainPriceInCalradia * 1.05f && !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid;
			}

			// Token: 0x06004A60 RID: 19040 RVA: 0x0014BEE5 File Offset: 0x0014A0E5
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x06004A61 RID: 19041 RVA: 0x0014BEE7 File Offset: 0x0014A0E7
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004A62 RID: 19042 RVA: 0x0014BEE9 File Offset: 0x0014A0E9
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(18f), base.IssueDifficultyMultiplier, this.RewardGold, this.NeededGrainAmount);
			}

			// Token: 0x06004A63 RID: 19043 RVA: 0x0014BF14 File Offset: 0x0014A114
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				skill = null;
				relationHero = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.CurrentSettlement.MapFaction, Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x04001997 RID: 6551
			private const int IssueDuration = 30;

			// Token: 0x04001998 RID: 6552
			private const int AlternativeSolutionSuccessGenerosityBonus = 30;

			// Token: 0x04001999 RID: 6553
			private const int AlternativeSolutionFailPowerPenalty = -5;

			// Token: 0x0400199A RID: 6554
			private const int QuestTimeLimit = 18;

			// Token: 0x0400199B RID: 6555
			private const int AlternativeSolutionSuccessPowerBonus = 10;

			// Token: 0x0400199C RID: 6556
			private const int AlternativeSolutionSuccessRelationBonusWithQuestGiver = 2;

			// Token: 0x0400199D RID: 6557
			private const int AlternativeSolutionSuccessRelationBonusWithOtherNotables = 1;

			// Token: 0x0400199E RID: 6558
			private const int AlternativeSolutionFailRelationPenaltyWithNotables = -3;

			// Token: 0x0400199F RID: 6559
			private const int AlternativeSolutionSuccessProsperityBonus = 50;

			// Token: 0x040019A0 RID: 6560
			private const int AlternativeSolutionFailProsperityPenalty = -10;

			// Token: 0x040019A1 RID: 6561
			private const int CompanionTradeSkillLimit = 120;

			// Token: 0x040019A2 RID: 6562
			[CachedData]
			private Settlement _nearbySuitableSettlementCache;
		}

		// Token: 0x02000623 RID: 1571
		public class HeadmanNeedsGrainIssueQuest : QuestBase
		{
			// Token: 0x06004A65 RID: 19045 RVA: 0x0014BFD5 File Offset: 0x0014A1D5
			internal static void AutoGeneratedStaticCollectObjectsHeadmanNeedsGrainIssueQuest(object o, List<object> collectedObjects)
			{
				((HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004A66 RID: 19046 RVA: 0x0014BFE3 File Offset: 0x0014A1E3
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._playerAcceptedQuestLog);
				collectedObjects.Add(this._playerHasNeededGrainsLog);
			}

			// Token: 0x06004A67 RID: 19047 RVA: 0x0014C004 File Offset: 0x0014A204
			internal static object AutoGeneratedGetMemberValue_neededGrainAmount(object o)
			{
				return ((HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssueQuest)o)._neededGrainAmount;
			}

			// Token: 0x06004A68 RID: 19048 RVA: 0x0014C016 File Offset: 0x0014A216
			internal static object AutoGeneratedGetMemberValue_rewardGold(object o)
			{
				return ((HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssueQuest)o)._rewardGold;
			}

			// Token: 0x06004A69 RID: 19049 RVA: 0x0014C028 File Offset: 0x0014A228
			internal static object AutoGeneratedGetMemberValue_playerAcceptedQuestLog(object o)
			{
				return ((HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssueQuest)o)._playerAcceptedQuestLog;
			}

			// Token: 0x06004A6A RID: 19050 RVA: 0x0014C035 File Offset: 0x0014A235
			internal static object AutoGeneratedGetMemberValue_playerHasNeededGrainsLog(object o)
			{
				return ((HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssueQuest)o)._playerHasNeededGrainsLog;
			}

			// Token: 0x17000F5F RID: 3935
			// (get) Token: 0x06004A6B RID: 19051 RVA: 0x0014C042 File Offset: 0x0014A242
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=apr2dH0n}{ISSUE_SETTLEMENT} Needs Grain Seeds", null);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000F60 RID: 3936
			// (get) Token: 0x06004A6C RID: 19052 RVA: 0x0014C06B File Offset: 0x0014A26B
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F61 RID: 3937
			// (get) Token: 0x06004A6D RID: 19053 RVA: 0x0014C070 File Offset: 0x0014A270
			private TextObject _playerAcceptedQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=5CokRxmL}{QUEST_GIVER.LINK}, the headman of the {QUEST_SETTLEMENT} asked you to deliver {GRAIN_AMOUNT} units of grain to {?QUEST_GIVER.GENDER}her{?}him{\\?} to use as seeds. Otherwise peasants cannot sow their fields and starve in the coming season. \n \n You have agreed to bring them {GRAIN_AMOUNT} units of grain as soon as possible.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					textObject.SetTextVariable("GRAIN_AMOUNT", this._neededGrainAmount);
					return textObject;
				}
			}

			// Token: 0x17000F62 RID: 3938
			// (get) Token: 0x06004A6E RID: 19054 RVA: 0x0014C0D0 File Offset: 0x0014A2D0
			private TextObject _playerHasNeededGrainsLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=vOHc5dxC}You now have enough grain seeds to complete the quest. Return to {QUEST_SETTLEMENT} to hand them over.", null);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000F63 RID: 3939
			// (get) Token: 0x06004A6F RID: 19055 RVA: 0x0014C0F9 File Offset: 0x0014A2F9
			private TextObject _questTimeoutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=brDw7ewN}You have failed to deliver {GRAIN_AMOUNT} units of grain to the villagers. They won't be able to sow them before the coming winter. The Headman and the villagers are doomed.", null);
					textObject.SetTextVariable("GRAIN_AMOUNT", this._neededGrainAmount);
					return textObject;
				}
			}

			// Token: 0x17000F64 RID: 3940
			// (get) Token: 0x06004A70 RID: 19056 RVA: 0x0014C118 File Offset: 0x0014A318
			private TextObject _successLog
			{
				get
				{
					TextObject textObject = new TextObject("{=GGTxzAtn}You have delivered {GRAIN_AMOUNT} units of grain to the villagers. They will be able to sow them before the coming winter. You have saved a lot of lives today. The Headman and the villagers are grateful.", null);
					textObject.SetTextVariable("GRAIN_AMOUNT", this._neededGrainAmount);
					return textObject;
				}
			}

			// Token: 0x17000F65 RID: 3941
			// (get) Token: 0x06004A71 RID: 19057 RVA: 0x0014C138 File Offset: 0x0014A338
			private TextObject _cancelLogOnWarDeclared
			{
				get
				{
					TextObject textObject = new TextObject("{=8Z4vlcib}Your clan is now at war with the {ISSUE_GIVER.LINK}'s lord. Your agreement with {ISSUE_GIVER.LINK} was canceled.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F66 RID: 3942
			// (get) Token: 0x06004A72 RID: 19058 RVA: 0x0014C16C File Offset: 0x0014A36C
			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F67 RID: 3943
			// (get) Token: 0x06004A73 RID: 19059 RVA: 0x0014C1A0 File Offset: 0x0014A3A0
			private TextObject _cancelLogOnVillageRaided
			{
				get
				{
					TextObject textObject = new TextObject("{=PgFJLK85}{SETTLEMENT_NAME} is raided by someone else. Your agreement with {ISSUE_GIVER.LINK} was canceled.", null);
					textObject.SetTextVariable("SETTLEMENT_NAME", base.QuestGiver.CurrentSettlement.Name);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x06004A74 RID: 19060 RVA: 0x0014C1EE File Offset: 0x0014A3EE
			public HeadmanNeedsGrainIssueQuest(string questId, Hero giverHero, CampaignTime duration, float difficultyMultiplier, int rewardGold, int neededGrainAmount)
				: base(questId, giverHero, duration, rewardGold)
			{
				this._neededGrainAmount = neededGrainAmount;
				this._rewardGold = rewardGold;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004A75 RID: 19061 RVA: 0x0014C217 File Offset: 0x0014A417
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x06004A76 RID: 19062 RVA: 0x0014C220 File Offset: 0x0014A420
			protected override void RegisterEvents()
			{
				CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.OnPlayerInventoryExchange));
				CampaignEvents.OnPartyConsumedFoodEvent.AddNonSerializedListener(this, new Action<MobileParty>(this.OnPartyConsumedFood));
				CampaignEvents.OnHeroSharedFoodWithAnotherHeroEvent.AddNonSerializedListener(this, new Action<Hero, Hero, float>(this.OnHeroSharedFoodWithAnotherHero));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
				CampaignEvents.HourlyTickPartyEvent.AddNonSerializedListener(this, new Action<MobileParty>(this.HourlyTickParty));
				CampaignEvents.HeroPrisonerTaken.AddNonSerializedListener(this, new Action<PartyBase, Hero>(this.OnHeroPrisonerTaken));
				CampaignEvents.SettlementEntered.AddNonSerializedListener(this, new Action<MobileParty, Settlement, Hero>(this.OnSettlementEntered));
			}

			// Token: 0x06004A77 RID: 19063 RVA: 0x0014C2FC File Offset: 0x0014A4FC
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
					return;
				}
				if (mapEvent.IsRaid || mapEvent.IsForcingSupplies || mapEvent.IsForcingVolunteers)
				{
					base.CompleteQuestWithCancel(this._cancelLogOnVillageRaided);
				}
			}

			// Token: 0x06004A78 RID: 19064 RVA: 0x0014C334 File Offset: 0x0014A534
			private void HourlyTickParty(MobileParty mobileParty)
			{
				if (mobileParty == MobileParty.MainParty)
				{
					this._playerAcceptedQuestLog.UpdateCurrentProgress(this.GetRequiredGrainCountOnPlayer());
					this.CheckIfPlayerReadyToReturnGrains();
				}
			}

			// Token: 0x06004A79 RID: 19065 RVA: 0x0014C355 File Offset: 0x0014A555
			private void OnHeroPrisonerTaken(PartyBase capturer, Hero prisoner)
			{
				if (prisoner == Hero.MainHero)
				{
					this._playerAcceptedQuestLog.UpdateCurrentProgress(this.GetRequiredGrainCountOnPlayer());
					this.CheckIfPlayerReadyToReturnGrains();
				}
			}

			// Token: 0x06004A7A RID: 19066 RVA: 0x0014C376 File Offset: 0x0014A576
			private void OnSettlementEntered(MobileParty party, Settlement settlement, Hero hero)
			{
				if (party == MobileParty.MainParty)
				{
					this._playerAcceptedQuestLog.UpdateCurrentProgress(this.GetRequiredGrainCountOnPlayer());
					this.CheckIfPlayerReadyToReturnGrains();
				}
			}

			// Token: 0x06004A7B RID: 19067 RVA: 0x0014C397 File Offset: 0x0014A597
			protected override void OnTimedOut()
			{
				base.AddLog(this._questTimeoutLogText, false);
				this.Fail();
			}

			// Token: 0x06004A7C RID: 19068 RVA: 0x0014C3B0 File Offset: 0x0014A5B0
			protected override void SetDialogs()
			{
				TextObject textObject = new TextObject("{=nwIYsJRO}Have you brought our grain {?PLAYER.GENDER}milady{?}sir{\\?}?", null);
				TextObject textObject2 = new TextObject("{=k63ZKmXX}Thank you, {?PLAYER.GENDER}milady{?}sir{\\?}! You are a saviour.", null);
				TextObject textObject3 = new TextObject("{=0tB3VGE4}We await your success, {?PLAYER.GENDER}milady{?}sir{\\?}.", null);
				textObject.SetCharacterProperties("PLAYER", Hero.MainHero.CharacterObject, false);
				textObject2.SetCharacterProperties("PLAYER", Hero.MainHero.CharacterObject, false);
				textObject3.SetCharacterProperties("PLAYER", Hero.MainHero.CharacterObject, false);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(textObject2, null, null).Condition(() => CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(textObject, null, null).Condition(delegate
				{
					MBTextManager.SetTextVariable("GRAIN_AMOUNT", this._neededGrainAmount);
					return CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject;
				})
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=9UABeRWO}Yes. Here is your grain.", null), null)
					.ClickableCondition(new ConversationSentence.OnClickableConditionDelegate(this.CompleteQuestClickableConditions))
					.NpcLine(textObject2, null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.Success;
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=PI6ikMsc}I'm working on it.", null), null)
					.NpcLine(textObject3, null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x06004A7D RID: 19069 RVA: 0x0014C4FC File Offset: 0x0014A6FC
			private bool CompleteQuestClickableConditions(out TextObject explanation)
			{
				if (this._playerAcceptedQuestLog.CurrentProgress >= this._neededGrainAmount)
				{
					explanation = TextObject.Empty;
					return true;
				}
				explanation = new TextObject("{=mzabdwoh}You don't have enough grain.", null);
				return false;
			}

			// Token: 0x06004A7E RID: 19070 RVA: 0x0014C528 File Offset: 0x0014A728
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				int requiredGrainCountOnPlayer = this.GetRequiredGrainCountOnPlayer();
				this._playerAcceptedQuestLog = base.AddDiscreteLog(this._playerAcceptedQuestLogText, new TextObject("{=eEwI880g}Collect Grain", null), requiredGrainCountOnPlayer, this._neededGrainAmount, null, false);
			}

			// Token: 0x06004A7F RID: 19071 RVA: 0x0014C568 File Offset: 0x0014A768
			private int GetRequiredGrainCountOnPlayer()
			{
				int itemNumber = PartyBase.MainParty.ItemRoster.GetItemNumber(DefaultItems.Grain);
				if (itemNumber >= this._neededGrainAmount)
				{
					TextObject textObject = new TextObject("{=Gtbfm10o}You have enough grain to complete the quest. Return to {QUEST_SETTLEMENT} to hand it over.", null);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					MBInformationManager.AddQuickInformation(textObject, 0, null, "");
				}
				if (itemNumber <= this._neededGrainAmount)
				{
					return itemNumber;
				}
				return this._neededGrainAmount;
			}

			// Token: 0x06004A80 RID: 19072 RVA: 0x0014C5D8 File Offset: 0x0014A7D8
			private void CheckIfPlayerReadyToReturnGrains()
			{
				if (this._playerHasNeededGrainsLog == null && this._playerAcceptedQuestLog.CurrentProgress >= this._neededGrainAmount)
				{
					this._playerHasNeededGrainsLog = base.AddLog(this._playerHasNeededGrainsLogText, false);
					return;
				}
				if (this._playerHasNeededGrainsLog != null && this._playerAcceptedQuestLog.CurrentProgress < this._neededGrainAmount)
				{
					base.RemoveLog(this._playerHasNeededGrainsLog);
					this._playerHasNeededGrainsLog = null;
				}
			}

			// Token: 0x06004A81 RID: 19073 RVA: 0x0014C644 File Offset: 0x0014A844
			private void OnPlayerInventoryExchange(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
			{
				bool flag = false;
				foreach (ValueTuple<ItemRosterElement, int> valueTuple in purchasedItems)
				{
					ItemRosterElement itemRosterElement = valueTuple.Item1;
					if (itemRosterElement.EquipmentElement.Item == DefaultItems.Grain)
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					foreach (ValueTuple<ItemRosterElement, int> valueTuple2 in soldItems)
					{
						ItemRosterElement itemRosterElement = valueTuple2.Item1;
						if (itemRosterElement.EquipmentElement.Item == DefaultItems.Grain)
						{
							flag = true;
							break;
						}
					}
				}
				if (flag)
				{
					this._playerAcceptedQuestLog.UpdateCurrentProgress(this.GetRequiredGrainCountOnPlayer());
					this.CheckIfPlayerReadyToReturnGrains();
				}
			}

			// Token: 0x06004A82 RID: 19074 RVA: 0x0014C728 File Offset: 0x0014A928
			private void OnPartyConsumedFood(MobileParty party)
			{
				if (party.IsMainParty)
				{
					this._playerAcceptedQuestLog.UpdateCurrentProgress(this.GetRequiredGrainCountOnPlayer());
					this.CheckIfPlayerReadyToReturnGrains();
				}
			}

			// Token: 0x06004A83 RID: 19075 RVA: 0x0014C749 File Offset: 0x0014A949
			private void OnHeroSharedFoodWithAnotherHero(Hero supporterHero, Hero supportedHero, float influence)
			{
				if (supporterHero == Hero.MainHero || supportedHero == Hero.MainHero)
				{
					this._playerAcceptedQuestLog.UpdateCurrentProgress(this.GetRequiredGrainCountOnPlayer());
					this.CheckIfPlayerReadyToReturnGrains();
				}
			}

			// Token: 0x06004A84 RID: 19076 RVA: 0x0014C772 File Offset: 0x0014A972
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this._cancelLogOnWarDeclared);
				}
			}

			// Token: 0x06004A85 RID: 19077 RVA: 0x0014C7A1 File Offset: 0x0014A9A1
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._cancelLogOnWarDeclared);
			}

			// Token: 0x06004A86 RID: 19078 RVA: 0x0014C7B8 File Offset: 0x0014A9B8
			private void Success()
			{
				base.AddLog(this._successLog, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Mercy, 70),
					new Tuple<TraitObject, int>(DefaultTraits.Generosity, 50)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this._rewardGold, false);
				GiveItemAction.ApplyForParties(PartyBase.MainParty, Settlement.CurrentSettlement.Party, DefaultItems.Grain, this._neededGrainAmount);
				base.QuestGiver.AddPower(10f);
				base.QuestGiver.CurrentSettlement.Prosperity += 50f;
				this.RelationshipChangeWithQuestGiver = 2;
				foreach (Hero hero in base.QuestGiver.CurrentSettlement.Notables)
				{
					if (hero != base.QuestGiver)
					{
						ChangeRelationAction.ApplyPlayerRelation(hero, 1, true, true);
					}
				}
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004A87 RID: 19079 RVA: 0x0014C8C8 File Offset: 0x0014AAC8
			private void Fail()
			{
				base.QuestGiver.AddPower(-5f);
				base.QuestGiver.CurrentSettlement.Prosperity += -10f;
				this.RelationshipChangeWithQuestGiver = -5;
				foreach (Hero hero in base.QuestGiver.CurrentSettlement.Notables)
				{
					if (hero != base.QuestGiver)
					{
						ChangeRelationAction.ApplyPlayerRelation(hero, -3, true, true);
					}
				}
			}

			// Token: 0x040019A3 RID: 6563
			private const int SuccessMercyBonus = 70;

			// Token: 0x040019A4 RID: 6564
			private const int SuccessGenerosityBonus = 50;

			// Token: 0x040019A5 RID: 6565
			private const int SuccessRelationBonusWithQuestGiver = 2;

			// Token: 0x040019A6 RID: 6566
			private const int SuccessRelationBonusWithOtherNotables = 1;

			// Token: 0x040019A7 RID: 6567
			private const int SuccessPowerBonus = 10;

			// Token: 0x040019A8 RID: 6568
			private const int SuccessProsperityBonus = 50;

			// Token: 0x040019A9 RID: 6569
			private const int FailRelationPenalty = -5;

			// Token: 0x040019AA RID: 6570
			private const int FailRelationPenaltyWithOtherNotables = -3;

			// Token: 0x040019AB RID: 6571
			private const int TimeOutProsperityPenalty = -10;

			// Token: 0x040019AC RID: 6572
			private const int TimeOutPowerPenalty = -5;

			// Token: 0x040019AD RID: 6573
			[SaveableField(10)]
			private readonly int _neededGrainAmount;

			// Token: 0x040019AE RID: 6574
			[SaveableField(20)]
			private int _rewardGold;

			// Token: 0x040019AF RID: 6575
			[SaveableField(30)]
			private JournalLog _playerAcceptedQuestLog;

			// Token: 0x040019B0 RID: 6576
			[SaveableField(40)]
			private JournalLog _playerHasNeededGrainsLog;
		}

		// Token: 0x02000624 RID: 1572
		public class HeadmanNeedsGrainIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004A8B RID: 19083 RVA: 0x0014C9BD File Offset: 0x0014ABBD
			public HeadmanNeedsGrainIssueTypeDefiner()
				: base(440000)
			{
			}

			// Token: 0x06004A8C RID: 19084 RVA: 0x0014C9CA File Offset: 0x0014ABCA
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssue), 1, null);
				base.AddClassDefinition(typeof(HeadmanNeedsGrainIssueBehavior.HeadmanNeedsGrainIssueQuest), 2, null);
			}
		}
	}
}
