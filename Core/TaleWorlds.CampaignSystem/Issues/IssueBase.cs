using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	public abstract class IssueBase : MBObjectBase
	{
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.AlternativeSolutionSentTroops);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.IssueDueTime, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.IssueCreationTime, collectedObjects);
			collectedObjects.Add(this._companionRewardSkill);
			collectedObjects.Add(this._journalEntries);
			collectedObjects.Add(this._issueOwner);
			collectedObjects.Add(this._trackedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.AlternativeSolutionReturnTimeForTroops, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.AlternativeSolutionIssueEffectClearTime, collectedObjects);
			collectedObjects.Add(this.IssueQuest);
		}

		internal static object AutoGeneratedGetMemberValueAlternativeSolutionReturnTimeForTroops(object o)
		{
			return ((IssueBase)o).AlternativeSolutionReturnTimeForTroops;
		}

		internal static object AutoGeneratedGetMemberValueAlternativeSolutionIssueEffectClearTime(object o)
		{
			return ((IssueBase)o).AlternativeSolutionIssueEffectClearTime;
		}

		internal static object AutoGeneratedGetMemberValueIssueQuest(object o)
		{
			return ((IssueBase)o).IssueQuest;
		}

		internal static object AutoGeneratedGetMemberValueIsTriedToSolveBefore(object o)
		{
			return ((IssueBase)o).IsTriedToSolveBefore;
		}

		internal static object AutoGeneratedGetMemberValueAlternativeSolutionSentTroops(object o)
		{
			return ((IssueBase)o).AlternativeSolutionSentTroops;
		}

		internal static object AutoGeneratedGetMemberValueIssueDueTime(object o)
		{
			return ((IssueBase)o).IssueDueTime;
		}

		internal static object AutoGeneratedGetMemberValueIssueCreationTime(object o)
		{
			return ((IssueBase)o).IssueCreationTime;
		}

		internal static object AutoGeneratedGetMemberValue_totalTroopXpAmount(object o)
		{
			return ((IssueBase)o)._totalTroopXpAmount;
		}

		internal static object AutoGeneratedGetMemberValue_companionRewardSkill(object o)
		{
			return ((IssueBase)o)._companionRewardSkill;
		}

		internal static object AutoGeneratedGetMemberValue_journalEntries(object o)
		{
			return ((IssueBase)o)._journalEntries;
		}

		internal static object AutoGeneratedGetMemberValue_issueState(object o)
		{
			return ((IssueBase)o)._issueState;
		}

		internal static object AutoGeneratedGetMemberValue_issueOwner(object o)
		{
			return ((IssueBase)o)._issueOwner;
		}

		internal static object AutoGeneratedGetMemberValue_issueDifficultyMultiplier(object o)
		{
			return ((IssueBase)o)._issueDifficultyMultiplier;
		}

		internal static object AutoGeneratedGetMemberValue_areIssueEffectsResolved(object o)
		{
			return ((IssueBase)o)._areIssueEffectsResolved;
		}

		internal static object AutoGeneratedGetMemberValue_alternativeSolutionCasualtyCount(object o)
		{
			return ((IssueBase)o)._alternativeSolutionCasualtyCount;
		}

		internal static object AutoGeneratedGetMemberValue_failureChance(object o)
		{
			return ((IssueBase)o)._failureChance;
		}

		internal static object AutoGeneratedGetMemberValue_trackedObjects(object o)
		{
			return ((IssueBase)o)._trackedObjects;
		}

		protected virtual bool IssueQuestCanBeDuplicated
		{
			get
			{
				return false;
			}
		}

		public virtual int RelationshipChangeWithIssueOwner { get; protected set; }

		public abstract TextObject IssueBriefByIssueGiver { get; }

		public abstract TextObject IssueAcceptByPlayer { get; }

		public virtual TextObject IssuePlayerResponseAfterLordExplanation
		{
			get
			{
				return new TextObject("{=sMCN7eCp}Is there any other way to solve this problem?", null);
			}
		}

		public virtual TextObject IssuePlayerResponseAfterAlternativeExplanation
		{
			get
			{
				return new TextObject("{=yrPEqZEa}Any other way?", null);
			}
		}

		public abstract TextObject IssueQuestSolutionExplanationByIssueGiver { get; }

		public virtual TextObject IssueAlternativeSolutionExplanationByIssueGiver
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionExplanationByIssueGiver
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public abstract TextObject IssueQuestSolutionAcceptByPlayer { get; }

		public virtual TextObject IssueAlternativeSolutionAcceptByPlayer
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueAlternativeSolutionResponseByIssueGiver
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionAcceptByPlayer
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionResponseByIssueGiver
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionCounterOfferBriefByOtherNpc
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionCounterOfferExplanationByOtherNpc
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionCounterOfferAcceptByPlayer
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionCounterOfferDeclineByPlayer
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionCounterOfferAcceptResponseByOtherNpc
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueLordSolutionCounterOfferDeclineResponseByOtherNpc
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual TextObject IssueAsRumorInSettlement
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual int AlternativeSolutionBaseNeededMenCount { get; }

		public int GetTotalAlternativeSolutionNeededMenCount()
		{
			if (this.AlternativeSolutionHasScaledRequiredTroops && this.AlternativeSolutionHero != null)
			{
				return Campaign.Current.Models.IssueModel.GetTroopsRequiredForHero(this.AlternativeSolutionHero, this);
			}
			return this.AlternativeSolutionBaseNeededMenCount;
		}

		protected virtual int AlternativeSolutionBaseDurationInDaysInternal { get; }

		public int GetTotalAlternativeSolutionDurationInDays()
		{
			if (this.AlternativeSolutionHasScaledDuration && this.AlternativeSolutionHero != null)
			{
				return (int)Campaign.Current.Models.IssueModel.GetDurationOfResolutionForHero(this.AlternativeSolutionHero, this).ToDays;
			}
			return this.AlternativeSolutionBaseDurationInDaysInternal;
		}

		public int GetBaseAlternativeSolutionDurationInDays()
		{
			return this.AlternativeSolutionBaseDurationInDaysInternal;
		}

		[SaveableProperty(25)]
		public CampaignTime AlternativeSolutionReturnTimeForTroops { get; private set; }

		public abstract bool IsThereAlternativeSolution { get; }

		protected virtual TextObject AlternativeSolutionStartLog { get; }

		protected virtual TextObject AlternativeSolutionEndLogDefault
		{
			get
			{
				return new TextObject("{=xbvQzR2B}Your men should be on their way.", null);
			}
		}

		public bool IsThereDiscussDialogFlow
		{
			get
			{
				return this.IssueDiscussAlternativeSolution != null;
			}
		}

		protected virtual int CompanionSkillRewardXP { get; }

		[SaveableProperty(31)]
		public CampaignTime AlternativeSolutionIssueEffectClearTime { get; private set; }

		public Hero AlternativeSolutionHero
		{
			get
			{
				foreach (TroopRosterElement troopRosterElement in this.AlternativeSolutionSentTroops.GetTroopRoster())
				{
					if (troopRosterElement.Character.IsHero)
					{
						return troopRosterElement.Character.HeroObject;
					}
				}
				return null;
			}
		}

		public virtual bool AlternativeSolutionCondition(out TextObject explanation)
		{
			explanation = null;
			return true;
		}

		public virtual void AlternativeSolutionStartConsequence()
		{
		}

		public virtual bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
		{
			explanation = TextObject.Empty;
			return this.IsThereAlternativeSolution && this.AlternativeSolutionBaseNeededMenCount == 1;
		}

		protected virtual void AlternativeSolutionEndWithFailureConsequence()
		{
		}

		protected virtual void AlternativeSolutionEndWithSuccessConsequence()
		{
		}

		public virtual TextObject IssueDiscussAlternativeSolution { get; }

		public virtual TextObject IssueAlternativeSolutionSuccessLog { get; }

		public virtual TextObject IssueAlternativeSolutionFailLog { get; }

		public virtual bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
		{
			return true;
		}

		public abstract bool IsThereLordSolution { get; }

		protected virtual TextObject LordSolutionStartLog
		{
			get
			{
				return TextObject.Empty;
			}
		}

		protected virtual TextObject LordSolutionCounterOfferAcceptLog
		{
			get
			{
				return TextObject.Empty;
			}
		}

		protected virtual TextObject LordSolutionCounterOfferRefuseLog
		{
			get
			{
				return TextObject.Empty;
			}
		}

		public virtual int NeededInfluenceForLordSolution { get; }

		public virtual Hero CounterOfferHero { get; protected set; }

		public virtual bool LordSolutionCondition(out TextObject explanation)
		{
			explanation = null;
			return true;
		}

		protected virtual void LordSolutionConsequence()
		{
		}

		protected virtual void LordSolutionConsequenceWithRefuseCounterOffer()
		{
		}

		protected virtual void LordSolutionConsequenceWithAcceptCounterOffer()
		{
		}

		public MBReadOnlyList<JournalLog> JournalEntries
		{
			get
			{
				return this._journalEntries;
			}
		}

		public Hero IssueOwner
		{
			get
			{
				return this._issueOwner;
			}
			set
			{
				Hero issueOwner = this._issueOwner;
				this._issueOwner = value;
				if (this.IsSolvingWithAlternative)
				{
					TextObject textObject = new TextObject("{=gmaqJZyv}You have received a message from {NEW_OWNER.LINK}:{newline}\"Sadly, {OLD_OWNER.LINK} has died. You may continue on your task, however, and report back to me.", null);
					StringHelpers.SetCharacterProperties("OLD_OWNER", issueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("NEW_OWNER", this._issueOwner.CharacterObject, textObject, false);
					this.AddLog(new JournalLog(CampaignTime.Now, textObject, null, 0, 0, LogType.Text));
				}
			}
		}

		public abstract TextObject Title { get; }

		[SaveableProperty(15)]
		public QuestBase IssueQuest { get; private set; }

		public Settlement IssueSettlement
		{
			get
			{
				if (!this._issueOwner.IsNotable)
				{
					return null;
				}
				return this.IssueOwner.CurrentSettlement;
			}
		}

		public abstract TextObject Description { get; }

		[SaveableProperty(22)]
		public bool IsTriedToSolveBefore { get; private set; }

		public bool IsOngoingWithoutQuest
		{
			get
			{
				return this._issueState == IssueBase.IssueState.Ongoing;
			}
		}

		public bool IsSolvingWithQuest
		{
			get
			{
				return this._issueState == IssueBase.IssueState.SolvingWithQuestSolution;
			}
		}

		public bool IsSolvingWithAlternative
		{
			get
			{
				return this._issueState == IssueBase.IssueState.SolvingWithAlternativeSolution;
			}
		}

		public bool IsSolvingWithLordSolution
		{
			get
			{
				return this._issueState == IssueBase.IssueState.SolvingWithLordSolution;
			}
		}

		protected float IssueDifficultyMultiplier
		{
			get
			{
				if (this._issueDifficultyMultiplier != 0f)
				{
					return this._issueDifficultyMultiplier;
				}
				return Campaign.Current.Models.IssueModel.GetIssueDifficultyMultiplier();
			}
		}

		protected virtual int RewardGold { get; }

		public float GetActiveIssueEffectAmount(IssueEffect issueEffect)
		{
			if (!this._areIssueEffectsResolved)
			{
				return this.GetIssueEffectAmountInternal(issueEffect);
			}
			return 0f;
		}

		public virtual ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
		{
			return new ValueTuple<SkillObject, int>(null, 0);
		}

		public virtual IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
		{
			get
			{
				return IssueBase.AlternativeSolutionScaleFlag.None;
			}
		}

		public bool AlternativeSolutionHasCasualties
		{
			get
			{
				return this.AlternativeSolutionScaleFlags.HasAnyFlag(IssueBase.AlternativeSolutionScaleFlag.Casualties);
			}
		}

		public bool AlternativeSolutionHasScaledRequiredTroops
		{
			get
			{
				return this.AlternativeSolutionScaleFlags.HasAnyFlag(IssueBase.AlternativeSolutionScaleFlag.RequiredTroops);
			}
		}

		public bool AlternativeSolutionHasScaledDuration
		{
			get
			{
				return this.AlternativeSolutionScaleFlags.HasAnyFlag(IssueBase.AlternativeSolutionScaleFlag.Duration);
			}
		}

		public bool AlternativeSolutionHasFailureRisk
		{
			get
			{
				return this.AlternativeSolutionScaleFlags.HasAnyFlag(IssueBase.AlternativeSolutionScaleFlag.FailureRisk);
			}
		}

		protected virtual float GetIssueEffectAmountInternal(IssueEffect issueEffect)
		{
			return 0f;
		}

		protected IssueBase(Hero issueOwner, CampaignTime issueDueTime)
		{
			this._issueOwner = issueOwner;
			this.IssueDueTime = issueDueTime;
			this.IssueDiscussAlternativeSolution = null;
			this.IssueCreationTime = CampaignTime.Now;
			this._issueState = IssueBase.IssueState.Ongoing;
			this.IsTriedToSolveBefore = false;
			this.AlternativeSolutionSentTroops = TroopRoster.CreateDummyTroopRoster();
			this._journalEntries = new MBList<JournalLog>();
			CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, new Action<Settlement, bool, Hero, Hero, Hero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail>(this.OnSettlementOwnerChanged));
		}

		public override string ToString()
		{
			return base.StringId;
		}

		public void InitializeIssueBaseOnLoad()
		{
			this.OnGameLoad();
		}

		internal void HourlyTickWithIssueManager()
		{
			this.HourlyTick();
		}

		protected abstract void OnGameLoad();

		protected abstract void HourlyTick();

		protected abstract QuestBase GenerateIssueQuest(string questId);

		public abstract IssueBase.IssueFrequency GetFrequency();

		protected abstract bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill);

		public abstract bool IssueStayAliveConditions();

		protected abstract void CompleteIssueWithTimedOutConsequences();

		protected virtual void AfterIssueCreation()
		{
		}

		public virtual bool CanBeCompletedByAI()
		{
			return true;
		}

		protected virtual void OnIssueFinalized()
		{
		}

		public virtual void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanLeadPartyInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanDieInfoIsRequested(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
		{
		}

		public virtual void OnHeroCanBecomePrisonerInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanBeSelectedInInventoryInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanMoveToSettlementInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public virtual void OnHeroCanMarryInfoIsRequested(Hero hero, ref bool result)
		{
		}

		public bool StartIssueWithQuest()
		{
			this._issueDifficultyMultiplier = Campaign.Current.Models.IssueModel.GetIssueDifficultyMultiplier();
			this._issueState = IssueBase.IssueState.SolvingWithQuestSolution;
			this.IssueQuest = this.GenerateIssueQuest(base.StringId + "_quest");
			this.IsTriedToSolveBefore = true;
			this.IssueDueTime = CampaignTime.Never;
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.PlayerStartedIssueQuestClassicSolution, Hero.MainHero);
			return true;
		}

		public void StartIssueWithAlternativeSolution()
		{
			this._issueDifficultyMultiplier = Campaign.Current.Models.IssueModel.GetIssueDifficultyMultiplier();
			IssueModel issueModel = Campaign.Current.Models.IssueModel;
			this._failureChance = (this.AlternativeSolutionHasFailureRisk ? issueModel.GetFailureRiskForHero(this.AlternativeSolutionHero, this) : 0f);
			if (this.AlternativeSolutionHasCasualties)
			{
				ValueTuple<int, int> causalityForHero = issueModel.GetCausalityForHero(this.AlternativeSolutionHero, this);
				this._alternativeSolutionCasualtyCount = MBRandom.RandomInt(causalityForHero.Item1, causalityForHero.Item2 + 1);
			}
			else
			{
				this._alternativeSolutionCasualtyCount = 0;
			}
			this._companionRewardSkill = issueModel.GetIssueAlternativeSolutionSkill(this.AlternativeSolutionHero, this).Item1;
			this._issueState = IssueBase.IssueState.SolvingWithAlternativeSolution;
			this.IsTriedToSolveBefore = true;
			this._totalTroopXpAmount = 1000f + 500f * this.IssueDifficultyMultiplier;
			this.AlternativeSolutionReturnTimeForTroops = CampaignTime.DaysFromNow((float)this.GetTotalAlternativeSolutionDurationInDays());
			this.IssueDueTime = this.AlternativeSolutionReturnTimeForTroops;
			this.AddLog(new JournalLog(CampaignTime.Now, this.AlternativeSolutionStartLog, new TextObject("{=VFO7rMzK}Return Days", null), 0, this.AlternativeSolutionBaseDurationInDaysInternal, LogType.Text));
			this.AlternativeSolutionIssueEffectClearTime = this.AlternativeSolutionReturnTimeForTroops - CampaignTime.Days(1f);
			if (this.AlternativeSolutionIssueEffectClearTime.IsPast)
			{
				this.AlternativeSolutionIssueEffectClearTime = this.AlternativeSolutionReturnTimeForTroops;
			}
			DisableHeroAction.Apply(this.AlternativeSolutionHero);
			if (LocationComplex.Current != null)
			{
				Location locationOfCharacter = LocationComplex.Current.GetLocationOfCharacter(this.AlternativeSolutionHero);
				if (locationOfCharacter != null)
				{
					LocationCharacter locationCharacter = locationOfCharacter.GetLocationCharacter(this.AlternativeSolutionHero);
					LocationComplex.Current.ChangeLocation(locationCharacter, locationOfCharacter, null);
				}
			}
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.PlayerSentTroopsToQuest, Hero.MainHero);
		}

		private void MakeAlternativeSolutionTroopsReturn()
		{
			this.AlternativeSolutionHero.ChangeState(Hero.CharacterStates.Active);
			MobileParty.MainParty.MemberRoster.Add(this.AlternativeSolutionSentTroops);
			this.AlternativeSolutionSentTroops.Clear();
		}

		public void OnAlternativeSolutionSolvedAndTroopsAreReturning()
		{
			this._areIssueEffectsResolved = true;
			this.AddLog(new JournalLog(CampaignTime.Now, this.AlternativeSolutionEndLogDefault, null, 0, 0, LogType.Text));
		}

		public void IssueFinalized()
		{
			this.IssueQuest = null;
			CampaignEventDispatcher.Instance.RemoveListeners(this);
			Campaign.Current.IssueManager.DeactivateIssue(this);
			this._areIssueEffectsResolved = true;
			this.RemoveAllTrackedObjects();
			this.OnIssueFinalized();
		}

		public void CompleteIssueWithQuest()
		{
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFinishedWithSuccess, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		public void CompleteIssueWithTimedOut()
		{
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueTimedOut, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		public void CompleteIssueWithStayAliveConditionsFailed()
		{
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueCancel, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		public void CompleteIssueWithBetrayal()
		{
			if (this.IssueQuest != null && this.IssueQuest.IsOngoing)
			{
				this.IssueQuest.CompleteQuestWithBetrayal(null);
			}
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFinishedWithBetrayal, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		public void CompleteIssueWithFail(TextObject log = null)
		{
			if (this.IssueQuest != null && this.IssueQuest.IsOngoing)
			{
				this.IssueQuest.CompleteQuestWithFail(log);
			}
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFail, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		public void CompleteIssueWithCancel(TextObject log = null)
		{
			if (this.IssueQuest != null)
			{
				if (this.IssueQuest.IsOngoing)
				{
					this.IssueQuest.CompleteQuestWithCancel(log);
				}
			}
			else if (this.IsSolvingWithAlternative)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, new TextObject("{=V5Za6d4h}Your troops have returned from their mission.", null), null, 0, 0, LogType.Text));
				this.MakeAlternativeSolutionTroopsReturn();
			}
			else if (this.IsSolvingWithLordSolution && log != null)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, log, null, 0, 0, LogType.Text));
			}
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueCancel, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		public void CompleteIssueWithAiLord(Hero issueSolver)
		{
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFinishedByAILord, issueSolver);
			this.IssueFinalized();
		}

		private void AlternativeSolutionEndWithSuccess()
		{
			if (this.AlternativeSolutionHero == null)
			{
				Debug.Print("AlternativeSolutionHero is null for " + base.StringId, 0, Debug.DebugColor.White, 17592186044416UL);
				Debug.Print("AlternativeSolutionSentTroops:", 0, Debug.DebugColor.White, 17592186044416UL);
				foreach (TroopRosterElement troopRosterElement in this.AlternativeSolutionSentTroops.GetTroopRoster())
				{
					Debug.Print(string.Concat(new object[]
					{
						"troop id: ",
						troopRosterElement.Character.StringId,
						" count:",
						troopRosterElement.Number
					}), 0, Debug.DebugColor.White, 17592186044416UL);
				}
			}
			int totalManCount = this.AlternativeSolutionSentTroops.TotalManCount;
			this.AlternativeSolutionSentTroops.KillNumberOfNonHeroTroopsRandomly(this._alternativeSolutionCasualtyCount);
			float num = 0.5f;
			float num2 = 1.2f - (float)this.AlternativeSolutionBaseNeededMenCount / (float)this.AlternativeSolutionSentTroops.TotalManCount;
			foreach (FlattenedTroopRosterElement flattenedTroopRosterElement in this.AlternativeSolutionSentTroops.ToFlattenedRoster())
			{
				if (this.AlternativeSolutionBaseNeededMenCount < this.AlternativeSolutionSentTroops.TotalManCount)
				{
					num /= num2 * 0.9f + MBRandom.RandomFloat * 0.1f;
				}
				if (MBRandom.RandomFloat < num)
				{
					this.AlternativeSolutionSentTroops.WoundTroop(flattenedTroopRosterElement.Troop, 1, default(UniqueTroopDescriptor));
				}
				if (flattenedTroopRosterElement.Troop == this.AlternativeSolutionHero.CharacterObject && this.AlternativeSolutionHero.IsAlive)
				{
					this.AlternativeSolutionHero.AddSkillXp(this._companionRewardSkill, (float)this.CompanionSkillRewardXP);
				}
				num = 0.5f;
			}
			List<TroopRosterElement> list = this.AlternativeSolutionSentTroops.GetTroopRoster().FindAll((TroopRosterElement x) => x.Character.UpgradeTargets.Length != 0 || x.Character.IsHero);
			int num3 = MBRandom.RandomInt(1, list.Count + 1);
			int num4 = (int)(this._totalTroopXpAmount / (float)num3);
			int num5 = 0;
			while (num5 < num3 && list.Count > 0)
			{
				List<ValueTuple<TroopRosterElement, float>> list2 = new List<ValueTuple<TroopRosterElement, float>>();
				foreach (TroopRosterElement troopRosterElement2 in list)
				{
					list2.Add(new ValueTuple<TroopRosterElement, float>(troopRosterElement2, (float)troopRosterElement2.Number));
				}
				int num6 = this.AlternativeSolutionSentTroops.FindIndexOfTroop(MBRandom.ChooseWeighted<TroopRosterElement>(list2).Character);
				this.AlternativeSolutionSentTroops.SetElementXp(num6, num4 + this.AlternativeSolutionSentTroops.GetElementXp(num6));
				num5++;
			}
			if (this.RewardGold > 0)
			{
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
			}
			if (!TextObject.IsNullOrEmpty(this.IssueAlternativeSolutionSuccessLog))
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.IssueAlternativeSolutionSuccessLog, null, 0, 0, LogType.Text));
			}
			TextObject textObject = TextObject.Empty;
			if (this._alternativeSolutionCasualtyCount > 0)
			{
				int num7 = totalManCount - this._alternativeSolutionCasualtyCount;
				textObject = new TextObject("{=fCHVyxJ1}{COMPANION.LINK} reported that {?COMPANION.GENDER}she{?}he{\\?} had resolved the matter. Out of {NUMBER1} {?(NUMBER1 > 1)}troops{?}troop{\\?} you sent {NUMBER2} {?(NUMBER2 > 1)}troops{?}troop{\\?} came back safe and sound.", null);
				textObject.SetTextVariable("NUMBER1", totalManCount);
				textObject.SetTextVariable("NUMBER2", num7);
			}
			else
			{
				textObject = new TextObject("{=WOwaHClt}{COMPANION.LINK} reported that {?COMPANION.GENDER}she{?}he{\\?} had resolved the matter. {NUMBER} {?(NUMBER > 1)}troops{?}troop{\\?} you sent joined back to your party.", null);
				textObject.SetTextVariable("NUMBER", totalManCount);
			}
			StringHelpers.SetCharacterProperties("COMPANION", this.AlternativeSolutionHero.CharacterObject, textObject, false);
			this.AddLog(new JournalLog(CampaignTime.Now, textObject, null, 0, 0, LogType.Text));
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.SentTroopsFinishedQuest, Hero.MainHero);
		}

		public void StartIssueWithLordSolution()
		{
			this._issueDifficultyMultiplier = Campaign.Current.Models.IssueModel.GetIssueDifficultyMultiplier();
			if (this.LordSolutionStartLog != null && this.LordSolutionStartLog != TextObject.Empty)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.LordSolutionStartLog, null, 0, 0, LogType.Text));
			}
			this._issueState = IssueBase.IssueState.SolvingWithLordSolution;
			this.IsTriedToSolveBefore = true;
			CampaignEvents.BeforeGameMenuOpenedEvent.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.BeforeGameMenuOpened));
		}

		private void BeforeGameMenuOpened(MenuCallbackArgs args)
		{
			if (this._issueState == IssueBase.IssueState.SolvingWithLordSolution && Campaign.Current.GameMenuManager.NextLocation == null && GameStateManager.Current.ActiveState is MapState)
			{
				if (this.CounterOfferHero != null)
				{
					if (this.IssueOwner.CurrentSettlement != null)
					{
						CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter, null, false, false, false, false, false, false), new ConversationCharacterData(this.CounterOfferHero.CharacterObject, null, false, false, false, false, false, false));
						return;
					}
				}
				else
				{
					this.CompleteIssueWithLordSolutionWithRefuseCounterOffer();
				}
			}
		}

		public void CompleteIssueWithAlternativeSolution()
		{
			if (MBRandom.RandomFloat > this._failureChance)
			{
				this.AlternativeSolutionEndWithSuccessConsequence();
				this.AlternativeSolutionEndWithSuccess();
			}
			else
			{
				this.AlternativeSolutionEndWithFailureConsequence();
				this.AlternativeSolutionEndWithFail();
			}
			this.MakeAlternativeSolutionTroopsReturn();
			this.IssueFinalized();
		}

		private void AlternativeSolutionEndWithFail()
		{
			TextObject textObject = TextObject.Empty;
			int totalManCount = this.AlternativeSolutionSentTroops.TotalManCount;
			if (this.AlternativeSolutionHasCasualties)
			{
				this.AlternativeSolutionSentTroops.KillNumberOfNonHeroTroopsRandomly(this._alternativeSolutionCasualtyCount);
				this.AlternativeSolutionHero.MakeWounded(null, KillCharacterAction.KillCharacterActionDetail.None);
			}
			if (this.AlternativeSolutionHasCasualties && this._alternativeSolutionCasualtyCount > 0)
			{
				textObject = new TextObject("{=yxwuGcDo}{COMPANION.LINK} has failed to resolve the matter. Out of {NUMBER1} troops you sent {NUMBER2} troops came back safe and sound.", null);
				textObject.SetTextVariable("NUMBER1", totalManCount);
				textObject.SetTextVariable("NUMBER2", totalManCount - this._alternativeSolutionCasualtyCount);
			}
			else
			{
				textObject = new TextObject("{=k6fpAw92}{COMPANION.LINK} has failed to resolve the matter. {NUMBER} troops came back safe and sound.", null);
				textObject.SetTextVariable("NUMBER", totalManCount);
			}
			if (!TextObject.IsNullOrEmpty(this.IssueAlternativeSolutionFailLog))
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.IssueAlternativeSolutionFailLog, null, 0, 0, LogType.Text));
			}
			StringHelpers.SetCharacterProperties("COMPANION", this.AlternativeSolutionHero.CharacterObject, null, false);
			this.AddLog(new JournalLog(CampaignTime.Now, textObject, null, 0, 0, LogType.Text));
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.SentTroopsFailedQuest, Hero.MainHero);
		}

		public void CompleteIssueWithLordSolutionWithRefuseCounterOffer()
		{
			if (this.LordSolutionCounterOfferRefuseLog != null && this.LordSolutionCounterOfferRefuseLog != TextObject.Empty)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.LordSolutionCounterOfferRefuseLog, null, 0, 0, LogType.Text));
			}
			ChangeClanInfluenceAction.Apply(Clan.PlayerClan, (float)(-(float)this.NeededInfluenceForLordSolution));
			if (this.RewardGold > 0)
			{
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
			}
			this.LordSolutionConsequenceWithRefuseCounterOffer();
			this.IssueFinalized();
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFinishedWithSuccess, Hero.MainHero);
		}

		public void CompleteIssueWithLordSolutionWithAcceptCounterOffer()
		{
			if (this.LordSolutionCounterOfferAcceptLog != null && this.LordSolutionCounterOfferAcceptLog != TextObject.Empty)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.LordSolutionCounterOfferAcceptLog, null, 0, 0, LogType.Text));
			}
			this.LordSolutionConsequenceWithAcceptCounterOffer();
			this.CompleteIssueWithBetrayal();
		}

		internal bool CheckPreconditions(Hero issueGiver, out TextObject explanation)
		{
			explanation = new TextObject("{=!}{EXPLANATION}", null);
			if (!this.IssueStayAliveConditions() && this.IsOngoingWithoutQuest)
			{
				this.CompleteIssueWithCancel(null);
				return false;
			}
			IssueBase.PreconditionFlags preconditionFlags;
			Hero hero;
			SkillObject skillObject;
			bool flag = this.CanPlayerTakeQuestConditions(issueGiver, out preconditionFlags, out hero, out skillObject);
			bool flag2 = false;
			if (!this.IssueQuestCanBeDuplicated)
			{
				foreach (KeyValuePair<Hero, IssueBase> keyValuePair in Campaign.Current.IssueManager.Issues)
				{
					IssueBase value = keyValuePair.Value;
					if ((value.IsSolvingWithQuest || value.IsSolvingWithAlternative) && value.GetType() == base.GetType())
					{
						flag2 = true;
						flag = false;
					}
				}
			}
			if ((preconditionFlags & IssueBase.PreconditionFlags.AtWar) == IssueBase.PreconditionFlags.AtWar)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=21dlZJt6}I don't wish to speak about that. As you know, our factions are at war.", null));
			}
			else if (flag2)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=HvY7wjHt}I don't think you can help me. I think you may have other, similar commitments that could interfere.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.NotInSameFaction) == IssueBase.PreconditionFlags.NotInSameFaction)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=rBPI2dvX}I don't need the service of strangers. I work only with lords of the realm and loyal mercenaries.[ib:closed][if:convo_grave]", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.MainHeroIsKingdomLeader) == IssueBase.PreconditionFlags.MainHeroIsKingdomLeader || (preconditionFlags & IssueBase.PreconditionFlags.PlayerIsOwnerOfSettlement) == IssueBase.PreconditionFlags.PlayerIsOwnerOfSettlement)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=dYJKy2mO}Thank you for asking my {?PLAYER.GENDER}lady{?}lord{\\?}, but I can't bother you with such an unimportant issue.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.ClanTier) == IssueBase.PreconditionFlags.ClanTier)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=QOiPDGbf}I have never heard of your clan. I am not sure if I can rely on you or not.[ib:closed][if:convo_grave]", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Renown) == IssueBase.PreconditionFlags.Renown)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=7uJcPQnc}I don't think you can help me. I'm looking for someone with a bit more, shall we say, renown...", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Relation) == IssueBase.PreconditionFlags.Relation)
			{
				TextObject textObject;
				if (issueGiver == hero)
				{
					textObject = new TextObject("{=Cn4lnECZ}You and I do not have a good history... I don't trust you.[ib:closed][if:convo_grave]", null);
				}
				else
				{
					textObject = new TextObject("{=5ZJMa7Om}I don't think you can help me. I've heard you have a history with {HERO.LINK}, and, well, that could complicate things...[ib:closed][if:convo_grave]", null);
					StringHelpers.SetCharacterProperties("HERO", hero.CharacterObject, textObject, false);
				}
				explanation.SetTextVariable("EXPLANATION", textObject);
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Skill) == IssueBase.PreconditionFlags.Skill)
			{
				TextObject textObject2 = new TextObject("{=S9yUBtKc}I don't think you can help me. You need to have some experience in {SKILL_NAME}...", null);
				textObject2.SetTextVariable("SKILL_NAME", skillObject.Name);
				explanation.SetTextVariable("EXPLANATION", textObject2);
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Money) == IssueBase.PreconditionFlags.Money)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=GhcUKfbJ}I don't think you can help me. I need someone who has some gold to spend...[ib:closed]", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Influence) == IssueBase.PreconditionFlags.Influence)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=b6Zc1yre}I don't think you can help me. You'd need a bit of influence...", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Wounded) == IssueBase.PreconditionFlags.Wounded)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=BUf9WeyN}I don't think you can help me. You should rest for a while and let your wounds heal.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.NotEnoughTroops) == IssueBase.PreconditionFlags.NotEnoughTroops)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=dCv4Qbr6}I don't think you can help me. You don't have enough troops for this task.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.PartySizeLimit) == IssueBase.PreconditionFlags.PartySizeLimit)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=yaiQgyfB}I was planning to give you some troops to solve this task but it seems like you would have difficulties taking any more into your company.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.ClanIsMercenary) == IssueBase.PreconditionFlags.ClanIsMercenary)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=vz4M8SRn}I do have one particular task, but it is not really suited to a mercenary.Please carry on with your other duties.", null));
			}
			else
			{
				explanation.SetTextVariable("EXPLANATION", TextObject.Empty);
			}
			return flag;
		}

		internal void AfterCreation()
		{
			this.AfterIssueCreation();
		}

		public void InitializeIssueOnSettlementOwnerChange()
		{
			if (this.IsThereLordSolution)
			{
				Campaign.Current.ConversationManager.RemoveRelatedLines(this);
			}
		}

		private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
		{
			if (this.IssueSettlement == settlement || (this.IssueSettlement == null && this.IssueOwner.CurrentSettlement == settlement && this.IssueOwner.IsNoncombatant))
			{
				Campaign.Current.ConversationManager.RemoveRelatedLines(this);
			}
		}

		public void AddLog(JournalLog log)
		{
			this._journalEntries.Add(log);
			CampaignEventDispatcher.Instance.OnIssueLogAdded(this, false);
		}

		private void RemoveAllTrackedObjects()
		{
			foreach (ITrackableCampaignObject trackableCampaignObject in this._trackedObjects)
			{
				Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackableCampaignObject, false);
			}
			this._trackedObjects.Clear();
		}

		public void AddTrackedObject(ITrackableCampaignObject o)
		{
			this._trackedObjects.Add(o);
			Campaign.Current.VisualTrackerManager.RegisterObject(o);
		}

		public void ToggleTrackedObjects(bool enableTrack)
		{
			if (enableTrack)
			{
				using (List<ITrackableCampaignObject>.Enumerator enumerator = this._trackedObjects.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						ITrackableCampaignObject trackableCampaignObject = enumerator.Current;
						Campaign.Current.VisualTrackerManager.RegisterObject(trackableCampaignObject);
					}
					return;
				}
			}
			foreach (ITrackableCampaignObject trackableCampaignObject2 in this._trackedObjects)
			{
				Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackableCampaignObject2, false);
			}
		}

		public const int IssueRelatedConversationPriority = 125;

		[SaveableField(27)]
		private float _totalTroopXpAmount;

		[SaveableField(30)]
		public readonly TroopRoster AlternativeSolutionSentTroops;

		[SaveableField(35)]
		private SkillObject _companionRewardSkill;

		[SaveableField(14)]
		private readonly MBList<JournalLog> _journalEntries;

		[SaveableField(11)]
		private IssueBase.IssueState _issueState;

		[SaveableField(12)]
		public CampaignTime IssueDueTime;

		[SaveableField(16)]
		public CampaignTime IssueCreationTime;

		[SaveableField(13)]
		private Hero _issueOwner;

		[SaveableField(26)]
		private float _issueDifficultyMultiplier;

		[SaveableField(32)]
		private bool _areIssueEffectsResolved;

		[SaveableField(33)]
		private int _alternativeSolutionCasualtyCount;

		[SaveableField(34)]
		private float _failureChance;

		[SaveableField(31)]
		private readonly List<ITrackableCampaignObject> _trackedObjects = new List<ITrackableCampaignObject>();

		internal enum IssueState
		{
			Ongoing,
			SolvingWithQuestSolution,
			SolvingWithAlternativeSolution,
			SolvingWithLordSolution
		}

		[Flags]
		public enum AlternativeSolutionScaleFlag : uint
		{
			None = 0U,
			Duration = 1U,
			RequiredTroops = 2U,
			Casualties = 4U,
			FailureRisk = 8U
		}

		[Flags]
		protected enum PreconditionFlags : uint
		{
			None = 0U,
			Relation = 1U,
			Skill = 2U,
			Money = 4U,
			Renown = 8U,
			Influence = 16U,
			Wounded = 32U,
			AtWar = 64U,
			ClanTier = 128U,
			NotEnoughTroops = 256U,
			NotInSameFaction = 512U,
			PartySizeLimit = 1024U,
			ClanIsMercenary = 2048U,
			MainHeroIsKingdomLeader = 16384U,
			PlayerIsOwnerOfSettlement = 32768U
		}

		public enum IssueUpdateDetails
		{
			None,
			PlayerStartedIssueQuestClassicSolution,
			PlayerSentTroopsToQuest,
			SentTroopsFinishedQuest,
			SentTroopsFailedQuest,
			IssueFinishedWithSuccess,
			IssueFinishedWithBetrayal,
			IssueFinishedByAILord,
			IssueFail,
			IssueCancel,
			IssueTimedOut
		}

		public enum IssueFrequency
		{
			VeryCommon,
			Common,
			Rare
		}
	}
}
