using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x020002FB RID: 763
	public abstract class IssueBase : MBObjectBase
	{
		// Token: 0x06002B9E RID: 11166 RVA: 0x000B7434 File Offset: 0x000B5634
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this.AlternativeSolutionSentTroops);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.IssueDueTime, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.IssueCreationTime, collectedObjects);
			collectedObjects.Add(this._companionRewardSkill);
			collectedObjects.Add(this._journalEntries);
			collectedObjects.Add(this._issueOwner);
			collectedObjects.Add(this._trackedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.AlternativeSolutionReturnTimeForTroops, collectedObjects);
			CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this.AlternativeSolutionIssueEffectClearTime, collectedObjects);
			collectedObjects.Add(this.IssueQuest);
		}

		// Token: 0x06002B9F RID: 11167 RVA: 0x000B74D4 File Offset: 0x000B56D4
		internal static object AutoGeneratedGetMemberValueAlternativeSolutionReturnTimeForTroops(object o)
		{
			return ((IssueBase)o).AlternativeSolutionReturnTimeForTroops;
		}

		// Token: 0x06002BA0 RID: 11168 RVA: 0x000B74E6 File Offset: 0x000B56E6
		internal static object AutoGeneratedGetMemberValueAlternativeSolutionIssueEffectClearTime(object o)
		{
			return ((IssueBase)o).AlternativeSolutionIssueEffectClearTime;
		}

		// Token: 0x06002BA1 RID: 11169 RVA: 0x000B74F8 File Offset: 0x000B56F8
		internal static object AutoGeneratedGetMemberValueIssueQuest(object o)
		{
			return ((IssueBase)o).IssueQuest;
		}

		// Token: 0x06002BA2 RID: 11170 RVA: 0x000B7505 File Offset: 0x000B5705
		internal static object AutoGeneratedGetMemberValueIsTriedToSolveBefore(object o)
		{
			return ((IssueBase)o).IsTriedToSolveBefore;
		}

		// Token: 0x06002BA3 RID: 11171 RVA: 0x000B7517 File Offset: 0x000B5717
		internal static object AutoGeneratedGetMemberValueAlternativeSolutionSentTroops(object o)
		{
			return ((IssueBase)o).AlternativeSolutionSentTroops;
		}

		// Token: 0x06002BA4 RID: 11172 RVA: 0x000B7524 File Offset: 0x000B5724
		internal static object AutoGeneratedGetMemberValueIssueDueTime(object o)
		{
			return ((IssueBase)o).IssueDueTime;
		}

		// Token: 0x06002BA5 RID: 11173 RVA: 0x000B7536 File Offset: 0x000B5736
		internal static object AutoGeneratedGetMemberValueIssueCreationTime(object o)
		{
			return ((IssueBase)o).IssueCreationTime;
		}

		// Token: 0x06002BA6 RID: 11174 RVA: 0x000B7548 File Offset: 0x000B5748
		internal static object AutoGeneratedGetMemberValue_totalTroopXpAmount(object o)
		{
			return ((IssueBase)o)._totalTroopXpAmount;
		}

		// Token: 0x06002BA7 RID: 11175 RVA: 0x000B755A File Offset: 0x000B575A
		internal static object AutoGeneratedGetMemberValue_companionRewardSkill(object o)
		{
			return ((IssueBase)o)._companionRewardSkill;
		}

		// Token: 0x06002BA8 RID: 11176 RVA: 0x000B7567 File Offset: 0x000B5767
		internal static object AutoGeneratedGetMemberValue_journalEntries(object o)
		{
			return ((IssueBase)o)._journalEntries;
		}

		// Token: 0x06002BA9 RID: 11177 RVA: 0x000B7574 File Offset: 0x000B5774
		internal static object AutoGeneratedGetMemberValue_issueState(object o)
		{
			return ((IssueBase)o)._issueState;
		}

		// Token: 0x06002BAA RID: 11178 RVA: 0x000B7586 File Offset: 0x000B5786
		internal static object AutoGeneratedGetMemberValue_issueOwner(object o)
		{
			return ((IssueBase)o)._issueOwner;
		}

		// Token: 0x06002BAB RID: 11179 RVA: 0x000B7593 File Offset: 0x000B5793
		internal static object AutoGeneratedGetMemberValue_issueDifficultyMultiplier(object o)
		{
			return ((IssueBase)o)._issueDifficultyMultiplier;
		}

		// Token: 0x06002BAC RID: 11180 RVA: 0x000B75A5 File Offset: 0x000B57A5
		internal static object AutoGeneratedGetMemberValue_areIssueEffectsResolved(object o)
		{
			return ((IssueBase)o)._areIssueEffectsResolved;
		}

		// Token: 0x06002BAD RID: 11181 RVA: 0x000B75B7 File Offset: 0x000B57B7
		internal static object AutoGeneratedGetMemberValue_alternativeSolutionCasualtyCount(object o)
		{
			return ((IssueBase)o)._alternativeSolutionCasualtyCount;
		}

		// Token: 0x06002BAE RID: 11182 RVA: 0x000B75C9 File Offset: 0x000B57C9
		internal static object AutoGeneratedGetMemberValue_failureChance(object o)
		{
			return ((IssueBase)o)._failureChance;
		}

		// Token: 0x06002BAF RID: 11183 RVA: 0x000B75DB File Offset: 0x000B57DB
		internal static object AutoGeneratedGetMemberValue_trackedObjects(object o)
		{
			return ((IssueBase)o)._trackedObjects;
		}

		// Token: 0x17000A8F RID: 2703
		// (get) Token: 0x06002BB0 RID: 11184 RVA: 0x000B75E8 File Offset: 0x000B57E8
		protected virtual bool IssueQuestCanBeDuplicated
		{
			get
			{
				return false;
			}
		}

		// Token: 0x17000A90 RID: 2704
		// (get) Token: 0x06002BB1 RID: 11185 RVA: 0x000B75EB File Offset: 0x000B57EB
		// (set) Token: 0x06002BB2 RID: 11186 RVA: 0x000B75F3 File Offset: 0x000B57F3
		public virtual int RelationshipChangeWithIssueOwner { get; protected set; }

		// Token: 0x17000A91 RID: 2705
		// (get) Token: 0x06002BB3 RID: 11187
		public abstract TextObject IssueBriefByIssueGiver { get; }

		// Token: 0x17000A92 RID: 2706
		// (get) Token: 0x06002BB4 RID: 11188
		public abstract TextObject IssueAcceptByPlayer { get; }

		// Token: 0x17000A93 RID: 2707
		// (get) Token: 0x06002BB5 RID: 11189 RVA: 0x000B75FC File Offset: 0x000B57FC
		public virtual TextObject IssuePlayerResponseAfterLordExplanation
		{
			get
			{
				return new TextObject("{=sMCN7eCp}Is there any other way to solve this problem?", null);
			}
		}

		// Token: 0x17000A94 RID: 2708
		// (get) Token: 0x06002BB6 RID: 11190 RVA: 0x000B7609 File Offset: 0x000B5809
		public virtual TextObject IssuePlayerResponseAfterAlternativeExplanation
		{
			get
			{
				return new TextObject("{=yrPEqZEa}Any other way?", null);
			}
		}

		// Token: 0x17000A95 RID: 2709
		// (get) Token: 0x06002BB7 RID: 11191
		public abstract TextObject IssueQuestSolutionExplanationByIssueGiver { get; }

		// Token: 0x17000A96 RID: 2710
		// (get) Token: 0x06002BB8 RID: 11192 RVA: 0x000B7616 File Offset: 0x000B5816
		public virtual TextObject IssueAlternativeSolutionExplanationByIssueGiver
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000A97 RID: 2711
		// (get) Token: 0x06002BB9 RID: 11193 RVA: 0x000B761D File Offset: 0x000B581D
		public virtual TextObject IssueLordSolutionExplanationByIssueGiver
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000A98 RID: 2712
		// (get) Token: 0x06002BBA RID: 11194
		public abstract TextObject IssueQuestSolutionAcceptByPlayer { get; }

		// Token: 0x17000A99 RID: 2713
		// (get) Token: 0x06002BBB RID: 11195 RVA: 0x000B7624 File Offset: 0x000B5824
		public virtual TextObject IssueAlternativeSolutionAcceptByPlayer
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000A9A RID: 2714
		// (get) Token: 0x06002BBC RID: 11196 RVA: 0x000B762B File Offset: 0x000B582B
		public virtual TextObject IssueAlternativeSolutionResponseByIssueGiver
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000A9B RID: 2715
		// (get) Token: 0x06002BBD RID: 11197 RVA: 0x000B7632 File Offset: 0x000B5832
		public virtual TextObject IssueLordSolutionAcceptByPlayer
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000A9C RID: 2716
		// (get) Token: 0x06002BBE RID: 11198 RVA: 0x000B7639 File Offset: 0x000B5839
		public virtual TextObject IssueLordSolutionResponseByIssueGiver
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000A9D RID: 2717
		// (get) Token: 0x06002BBF RID: 11199 RVA: 0x000B7640 File Offset: 0x000B5840
		public virtual TextObject IssueLordSolutionCounterOfferBriefByOtherNpc
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000A9E RID: 2718
		// (get) Token: 0x06002BC0 RID: 11200 RVA: 0x000B7647 File Offset: 0x000B5847
		public virtual TextObject IssueLordSolutionCounterOfferExplanationByOtherNpc
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000A9F RID: 2719
		// (get) Token: 0x06002BC1 RID: 11201 RVA: 0x000B764E File Offset: 0x000B584E
		public virtual TextObject IssueLordSolutionCounterOfferAcceptByPlayer
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000AA0 RID: 2720
		// (get) Token: 0x06002BC2 RID: 11202 RVA: 0x000B7655 File Offset: 0x000B5855
		public virtual TextObject IssueLordSolutionCounterOfferDeclineByPlayer
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000AA1 RID: 2721
		// (get) Token: 0x06002BC3 RID: 11203 RVA: 0x000B765C File Offset: 0x000B585C
		public virtual TextObject IssueLordSolutionCounterOfferAcceptResponseByOtherNpc
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000AA2 RID: 2722
		// (get) Token: 0x06002BC4 RID: 11204 RVA: 0x000B7663 File Offset: 0x000B5863
		public virtual TextObject IssueLordSolutionCounterOfferDeclineResponseByOtherNpc
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000AA3 RID: 2723
		// (get) Token: 0x06002BC5 RID: 11205 RVA: 0x000B766A File Offset: 0x000B586A
		public virtual TextObject IssueAsRumorInSettlement
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000AA4 RID: 2724
		// (get) Token: 0x06002BC6 RID: 11206 RVA: 0x000B7671 File Offset: 0x000B5871
		public virtual int AlternativeSolutionBaseNeededMenCount { get; }

		// Token: 0x06002BC7 RID: 11207 RVA: 0x000B7679 File Offset: 0x000B5879
		public int GetTotalAlternativeSolutionNeededMenCount()
		{
			if (this.AlternativeSolutionHasScaledRequiredTroops && this.AlternativeSolutionHero != null)
			{
				return Campaign.Current.Models.IssueModel.GetTroopsRequiredForHero(this.AlternativeSolutionHero, this);
			}
			return this.AlternativeSolutionBaseNeededMenCount;
		}

		// Token: 0x17000AA5 RID: 2725
		// (get) Token: 0x06002BC8 RID: 11208 RVA: 0x000B76AD File Offset: 0x000B58AD
		protected virtual int AlternativeSolutionBaseDurationInDaysInternal { get; }

		// Token: 0x06002BC9 RID: 11209 RVA: 0x000B76B8 File Offset: 0x000B58B8
		public int GetTotalAlternativeSolutionDurationInDays()
		{
			if (this.AlternativeSolutionHasScaledDuration && this.AlternativeSolutionHero != null)
			{
				return (int)Campaign.Current.Models.IssueModel.GetDurationOfResolutionForHero(this.AlternativeSolutionHero, this).ToDays;
			}
			return this.AlternativeSolutionBaseDurationInDaysInternal;
		}

		// Token: 0x06002BCA RID: 11210 RVA: 0x000B7700 File Offset: 0x000B5900
		public int GetBaseAlternativeSolutionDurationInDays()
		{
			return this.AlternativeSolutionBaseDurationInDaysInternal;
		}

		// Token: 0x17000AA6 RID: 2726
		// (get) Token: 0x06002BCB RID: 11211 RVA: 0x000B7708 File Offset: 0x000B5908
		// (set) Token: 0x06002BCC RID: 11212 RVA: 0x000B7710 File Offset: 0x000B5910
		[SaveableProperty(25)]
		public CampaignTime AlternativeSolutionReturnTimeForTroops { get; private set; }

		// Token: 0x17000AA7 RID: 2727
		// (get) Token: 0x06002BCD RID: 11213
		public abstract bool IsThereAlternativeSolution { get; }

		// Token: 0x17000AA8 RID: 2728
		// (get) Token: 0x06002BCE RID: 11214 RVA: 0x000B7719 File Offset: 0x000B5919
		protected virtual TextObject AlternativeSolutionStartLog { get; }

		// Token: 0x17000AA9 RID: 2729
		// (get) Token: 0x06002BCF RID: 11215 RVA: 0x000B7721 File Offset: 0x000B5921
		protected virtual TextObject AlternativeSolutionEndLogDefault
		{
			get
			{
				return new TextObject("{=xbvQzR2B}Your men should be on their way.", null);
			}
		}

		// Token: 0x17000AAA RID: 2730
		// (get) Token: 0x06002BD0 RID: 11216 RVA: 0x000B772E File Offset: 0x000B592E
		public bool IsThereDiscussDialogFlow
		{
			get
			{
				return this.IssueDiscussAlternativeSolution != null;
			}
		}

		// Token: 0x17000AAB RID: 2731
		// (get) Token: 0x06002BD1 RID: 11217 RVA: 0x000B7739 File Offset: 0x000B5939
		protected virtual int CompanionSkillRewardXP { get; }

		// Token: 0x17000AAC RID: 2732
		// (get) Token: 0x06002BD2 RID: 11218 RVA: 0x000B7741 File Offset: 0x000B5941
		// (set) Token: 0x06002BD3 RID: 11219 RVA: 0x000B7749 File Offset: 0x000B5949
		[SaveableProperty(31)]
		public CampaignTime AlternativeSolutionIssueEffectClearTime { get; private set; }

		// Token: 0x17000AAD RID: 2733
		// (get) Token: 0x06002BD4 RID: 11220 RVA: 0x000B7754 File Offset: 0x000B5954
		public Hero AlternativeSolutionHero
		{
			get
			{
				foreach (TroopRosterElement troopRosterElement in this.AlternativeSolutionSentTroops.GetTroopRoster())
				{
					if (troopRosterElement.Character.IsHero)
					{
						return troopRosterElement.Character.HeroObject;
					}
				}
				return null;
			}
		}

		// Token: 0x06002BD5 RID: 11221 RVA: 0x000B77C4 File Offset: 0x000B59C4
		public virtual bool AlternativeSolutionCondition(out TextObject explanation)
		{
			explanation = null;
			return true;
		}

		// Token: 0x06002BD6 RID: 11222 RVA: 0x000B77CA File Offset: 0x000B59CA
		public virtual void AlternativeSolutionStartConsequence()
		{
		}

		// Token: 0x06002BD7 RID: 11223 RVA: 0x000B77CC File Offset: 0x000B59CC
		public virtual bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
		{
			explanation = TextObject.Empty;
			return this.IsThereAlternativeSolution && this.AlternativeSolutionBaseNeededMenCount == 1;
		}

		// Token: 0x06002BD8 RID: 11224 RVA: 0x000B77E8 File Offset: 0x000B59E8
		protected virtual void AlternativeSolutionEndWithFailureConsequence()
		{
		}

		// Token: 0x06002BD9 RID: 11225 RVA: 0x000B77EA File Offset: 0x000B59EA
		protected virtual void AlternativeSolutionEndWithSuccessConsequence()
		{
		}

		// Token: 0x17000AAE RID: 2734
		// (get) Token: 0x06002BDA RID: 11226 RVA: 0x000B77EC File Offset: 0x000B59EC
		public virtual TextObject IssueDiscussAlternativeSolution { get; }

		// Token: 0x17000AAF RID: 2735
		// (get) Token: 0x06002BDB RID: 11227 RVA: 0x000B77F4 File Offset: 0x000B59F4
		public virtual TextObject IssueAlternativeSolutionSuccessLog { get; }

		// Token: 0x17000AB0 RID: 2736
		// (get) Token: 0x06002BDC RID: 11228 RVA: 0x000B77FC File Offset: 0x000B59FC
		public virtual TextObject IssueAlternativeSolutionFailLog { get; }

		// Token: 0x06002BDD RID: 11229 RVA: 0x000B7804 File Offset: 0x000B5A04
		public virtual bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
		{
			return true;
		}

		// Token: 0x17000AB1 RID: 2737
		// (get) Token: 0x06002BDE RID: 11230
		public abstract bool IsThereLordSolution { get; }

		// Token: 0x17000AB2 RID: 2738
		// (get) Token: 0x06002BDF RID: 11231 RVA: 0x000B7807 File Offset: 0x000B5A07
		protected virtual TextObject LordSolutionStartLog
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000AB3 RID: 2739
		// (get) Token: 0x06002BE0 RID: 11232 RVA: 0x000B780E File Offset: 0x000B5A0E
		protected virtual TextObject LordSolutionCounterOfferAcceptLog
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000AB4 RID: 2740
		// (get) Token: 0x06002BE1 RID: 11233 RVA: 0x000B7815 File Offset: 0x000B5A15
		protected virtual TextObject LordSolutionCounterOfferRefuseLog
		{
			get
			{
				return TextObject.Empty;
			}
		}

		// Token: 0x17000AB5 RID: 2741
		// (get) Token: 0x06002BE2 RID: 11234 RVA: 0x000B781C File Offset: 0x000B5A1C
		public virtual int NeededInfluenceForLordSolution { get; }

		// Token: 0x17000AB6 RID: 2742
		// (get) Token: 0x06002BE3 RID: 11235 RVA: 0x000B7824 File Offset: 0x000B5A24
		// (set) Token: 0x06002BE4 RID: 11236 RVA: 0x000B782C File Offset: 0x000B5A2C
		public virtual Hero CounterOfferHero { get; protected set; }

		// Token: 0x06002BE5 RID: 11237 RVA: 0x000B7835 File Offset: 0x000B5A35
		public virtual bool LordSolutionCondition(out TextObject explanation)
		{
			explanation = null;
			return true;
		}

		// Token: 0x06002BE6 RID: 11238 RVA: 0x000B783B File Offset: 0x000B5A3B
		protected virtual void LordSolutionConsequence()
		{
		}

		// Token: 0x06002BE7 RID: 11239 RVA: 0x000B783D File Offset: 0x000B5A3D
		protected virtual void LordSolutionConsequenceWithRefuseCounterOffer()
		{
		}

		// Token: 0x06002BE8 RID: 11240 RVA: 0x000B783F File Offset: 0x000B5A3F
		protected virtual void LordSolutionConsequenceWithAcceptCounterOffer()
		{
		}

		// Token: 0x17000AB7 RID: 2743
		// (get) Token: 0x06002BE9 RID: 11241 RVA: 0x000B7841 File Offset: 0x000B5A41
		public MBReadOnlyList<JournalLog> JournalEntries
		{
			get
			{
				return this._journalEntries;
			}
		}

		// Token: 0x17000AB8 RID: 2744
		// (get) Token: 0x06002BEA RID: 11242 RVA: 0x000B7849 File Offset: 0x000B5A49
		// (set) Token: 0x06002BEB RID: 11243 RVA: 0x000B7854 File Offset: 0x000B5A54
		public Hero IssueOwner
		{
			get
			{
				return this._issueOwner;
			}
			set
			{
				Hero issueOwner = this._issueOwner;
				this._issueOwner = value;
				if (this.IsSolvingWithAlternative)
				{
					TextObject textObject = new TextObject("{=gmaqJZyv}You have received a message from {NEW_OWNER.LINK}:{newline}\"Sadly, {OLD_OWNER.LINK} has died. You may continue on your task, however, and report back to me.", null);
					StringHelpers.SetCharacterProperties("OLD_OWNER", issueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("NEW_OWNER", this._issueOwner.CharacterObject, textObject, false);
					this.AddLog(new JournalLog(CampaignTime.Now, textObject, null, 0, 0, LogType.Text));
				}
			}
		}

		// Token: 0x17000AB9 RID: 2745
		// (get) Token: 0x06002BEC RID: 11244
		public abstract TextObject Title { get; }

		// Token: 0x17000ABA RID: 2746
		// (get) Token: 0x06002BED RID: 11245 RVA: 0x000B78C3 File Offset: 0x000B5AC3
		// (set) Token: 0x06002BEE RID: 11246 RVA: 0x000B78CB File Offset: 0x000B5ACB
		[SaveableProperty(15)]
		public QuestBase IssueQuest { get; private set; }

		// Token: 0x17000ABB RID: 2747
		// (get) Token: 0x06002BEF RID: 11247 RVA: 0x000B78D4 File Offset: 0x000B5AD4
		public Settlement IssueSettlement
		{
			get
			{
				if (!this._issueOwner.IsNotable)
				{
					return null;
				}
				return this.IssueOwner.CurrentSettlement;
			}
		}

		// Token: 0x17000ABC RID: 2748
		// (get) Token: 0x06002BF0 RID: 11248
		public abstract TextObject Description { get; }

		// Token: 0x17000ABD RID: 2749
		// (get) Token: 0x06002BF1 RID: 11249 RVA: 0x000B78F0 File Offset: 0x000B5AF0
		// (set) Token: 0x06002BF2 RID: 11250 RVA: 0x000B78F8 File Offset: 0x000B5AF8
		[SaveableProperty(22)]
		public bool IsTriedToSolveBefore { get; private set; }

		// Token: 0x17000ABE RID: 2750
		// (get) Token: 0x06002BF3 RID: 11251 RVA: 0x000B7901 File Offset: 0x000B5B01
		public bool IsOngoingWithoutQuest
		{
			get
			{
				return this._issueState == IssueBase.IssueState.Ongoing;
			}
		}

		// Token: 0x17000ABF RID: 2751
		// (get) Token: 0x06002BF4 RID: 11252 RVA: 0x000B790C File Offset: 0x000B5B0C
		public bool IsSolvingWithQuest
		{
			get
			{
				return this._issueState == IssueBase.IssueState.SolvingWithQuestSolution;
			}
		}

		// Token: 0x17000AC0 RID: 2752
		// (get) Token: 0x06002BF5 RID: 11253 RVA: 0x000B7917 File Offset: 0x000B5B17
		public bool IsSolvingWithAlternative
		{
			get
			{
				return this._issueState == IssueBase.IssueState.SolvingWithAlternativeSolution;
			}
		}

		// Token: 0x17000AC1 RID: 2753
		// (get) Token: 0x06002BF6 RID: 11254 RVA: 0x000B7922 File Offset: 0x000B5B22
		public bool IsSolvingWithLordSolution
		{
			get
			{
				return this._issueState == IssueBase.IssueState.SolvingWithLordSolution;
			}
		}

		// Token: 0x17000AC2 RID: 2754
		// (get) Token: 0x06002BF7 RID: 11255 RVA: 0x000B792D File Offset: 0x000B5B2D
		protected float IssueDifficultyMultiplier
		{
			get
			{
				if (this._issueDifficultyMultiplier != 0f)
				{
					return this._issueDifficultyMultiplier;
				}
				return Campaign.Current.Models.IssueModel.GetIssueDifficultyMultiplier();
			}
		}

		// Token: 0x17000AC3 RID: 2755
		// (get) Token: 0x06002BF8 RID: 11256 RVA: 0x000B7957 File Offset: 0x000B5B57
		protected virtual int RewardGold { get; }

		// Token: 0x06002BF9 RID: 11257 RVA: 0x000B795F File Offset: 0x000B5B5F
		public float GetActiveIssueEffectAmount(IssueEffect issueEffect)
		{
			if (!this._areIssueEffectsResolved)
			{
				return this.GetIssueEffectAmountInternal(issueEffect);
			}
			return 0f;
		}

		// Token: 0x06002BFA RID: 11258 RVA: 0x000B7976 File Offset: 0x000B5B76
		public virtual ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
		{
			return new ValueTuple<SkillObject, int>(null, 0);
		}

		// Token: 0x17000AC4 RID: 2756
		// (get) Token: 0x06002BFB RID: 11259 RVA: 0x000B797F File Offset: 0x000B5B7F
		public virtual IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
		{
			get
			{
				return IssueBase.AlternativeSolutionScaleFlag.None;
			}
		}

		// Token: 0x17000AC5 RID: 2757
		// (get) Token: 0x06002BFC RID: 11260 RVA: 0x000B7982 File Offset: 0x000B5B82
		public bool AlternativeSolutionHasCasualties
		{
			get
			{
				return this.AlternativeSolutionScaleFlags.HasAnyFlag(IssueBase.AlternativeSolutionScaleFlag.Casualties);
			}
		}

		// Token: 0x17000AC6 RID: 2758
		// (get) Token: 0x06002BFD RID: 11261 RVA: 0x000B7990 File Offset: 0x000B5B90
		public bool AlternativeSolutionHasScaledRequiredTroops
		{
			get
			{
				return this.AlternativeSolutionScaleFlags.HasAnyFlag(IssueBase.AlternativeSolutionScaleFlag.RequiredTroops);
			}
		}

		// Token: 0x17000AC7 RID: 2759
		// (get) Token: 0x06002BFE RID: 11262 RVA: 0x000B799E File Offset: 0x000B5B9E
		public bool AlternativeSolutionHasScaledDuration
		{
			get
			{
				return this.AlternativeSolutionScaleFlags.HasAnyFlag(IssueBase.AlternativeSolutionScaleFlag.Duration);
			}
		}

		// Token: 0x17000AC8 RID: 2760
		// (get) Token: 0x06002BFF RID: 11263 RVA: 0x000B79AC File Offset: 0x000B5BAC
		public bool AlternativeSolutionHasFailureRisk
		{
			get
			{
				return this.AlternativeSolutionScaleFlags.HasAnyFlag(IssueBase.AlternativeSolutionScaleFlag.FailureRisk);
			}
		}

		// Token: 0x06002C00 RID: 11264 RVA: 0x000B79BA File Offset: 0x000B5BBA
		protected virtual float GetIssueEffectAmountInternal(IssueEffect issueEffect)
		{
			return 0f;
		}

		// Token: 0x06002C01 RID: 11265 RVA: 0x000B79C4 File Offset: 0x000B5BC4
		protected IssueBase(Hero issueOwner, CampaignTime issueDueTime)
		{
			this._issueOwner = issueOwner;
			this.IssueDueTime = issueDueTime;
			this.IssueDiscussAlternativeSolution = null;
			this.IssueCreationTime = CampaignTime.Now;
			this._issueState = IssueBase.IssueState.Ongoing;
			this.IsTriedToSolveBefore = false;
			this.AlternativeSolutionSentTroops = TroopRoster.CreateDummyTroopRoster();
			this._journalEntries = new MBList<JournalLog>();
			CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, new Action<Settlement, bool, Hero, Hero, Hero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail>(this.OnSettlementOwnerChanged));
		}

		// Token: 0x06002C02 RID: 11266 RVA: 0x000B7A3D File Offset: 0x000B5C3D
		public override string ToString()
		{
			return base.StringId;
		}

		// Token: 0x06002C03 RID: 11267 RVA: 0x000B7A45 File Offset: 0x000B5C45
		public void InitializeIssueBaseOnLoad()
		{
			this.OnGameLoad();
		}

		// Token: 0x06002C04 RID: 11268
		protected abstract void OnGameLoad();

		// Token: 0x06002C05 RID: 11269
		protected abstract QuestBase GenerateIssueQuest(string questId);

		// Token: 0x06002C06 RID: 11270
		public abstract IssueBase.IssueFrequency GetFrequency();

		// Token: 0x06002C07 RID: 11271
		protected abstract bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill);

		// Token: 0x06002C08 RID: 11272
		public abstract bool IssueStayAliveConditions();

		// Token: 0x06002C09 RID: 11273
		protected abstract void CompleteIssueWithTimedOutConsequences();

		// Token: 0x06002C0A RID: 11274 RVA: 0x000B7A4D File Offset: 0x000B5C4D
		protected virtual void AfterIssueCreation()
		{
		}

		// Token: 0x06002C0B RID: 11275 RVA: 0x000B7A4F File Offset: 0x000B5C4F
		public virtual bool CanBeCompletedByAI()
		{
			return true;
		}

		// Token: 0x06002C0C RID: 11276 RVA: 0x000B7A52 File Offset: 0x000B5C52
		protected virtual void OnIssueFinalized()
		{
		}

		// Token: 0x06002C0D RID: 11277 RVA: 0x000B7A54 File Offset: 0x000B5C54
		public virtual void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06002C0E RID: 11278 RVA: 0x000B7A56 File Offset: 0x000B5C56
		public virtual void OnHeroCanLeadPartyInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06002C0F RID: 11279 RVA: 0x000B7A58 File Offset: 0x000B5C58
		public virtual void OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06002C10 RID: 11280 RVA: 0x000B7A5A File Offset: 0x000B5C5A
		public virtual void OnHeroCanDieInfoIsRequested(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
		{
		}

		// Token: 0x06002C11 RID: 11281 RVA: 0x000B7A5C File Offset: 0x000B5C5C
		public virtual void OnHeroCanBecomePrisonerInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06002C12 RID: 11282 RVA: 0x000B7A5E File Offset: 0x000B5C5E
		public virtual void OnHeroCanBeSelectedInInventoryInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06002C13 RID: 11283 RVA: 0x000B7A60 File Offset: 0x000B5C60
		public virtual void OnHeroCanMoveToSettlementInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06002C14 RID: 11284 RVA: 0x000B7A62 File Offset: 0x000B5C62
		public virtual void OnHeroCanMarryInfoIsRequested(Hero hero, ref bool result)
		{
		}

		// Token: 0x06002C15 RID: 11285 RVA: 0x000B7A64 File Offset: 0x000B5C64
		public bool StartIssueWithQuest()
		{
			this._issueDifficultyMultiplier = Campaign.Current.Models.IssueModel.GetIssueDifficultyMultiplier();
			this._issueState = IssueBase.IssueState.SolvingWithQuestSolution;
			this.IssueQuest = this.GenerateIssueQuest(base.StringId + "_quest");
			this.IsTriedToSolveBefore = true;
			this.IssueDueTime = CampaignTime.Never;
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.PlayerStartedIssueQuestClassicSolution, Hero.MainHero);
			return true;
		}

		// Token: 0x06002C16 RID: 11286 RVA: 0x000B7AD4 File Offset: 0x000B5CD4
		public void StartIssueWithAlternativeSolution()
		{
			this._issueDifficultyMultiplier = Campaign.Current.Models.IssueModel.GetIssueDifficultyMultiplier();
			IssueModel issueModel = Campaign.Current.Models.IssueModel;
			this._failureChance = (this.AlternativeSolutionHasFailureRisk ? issueModel.GetFailureRiskForHero(this.AlternativeSolutionHero, this) : 0f);
			if (this.AlternativeSolutionHasCasualties)
			{
				ValueTuple<int, int> causalityForHero = issueModel.GetCausalityForHero(this.AlternativeSolutionHero, this);
				this._alternativeSolutionCasualtyCount = MBRandom.RandomInt(causalityForHero.Item1, causalityForHero.Item2 + 1);
			}
			else
			{
				this._alternativeSolutionCasualtyCount = 0;
			}
			this._companionRewardSkill = issueModel.GetIssueAlternativeSolutionSkill(this.AlternativeSolutionHero, this).Item1;
			this._issueState = IssueBase.IssueState.SolvingWithAlternativeSolution;
			this.IsTriedToSolveBefore = true;
			this._totalTroopXpAmount = 1000f + 500f * this.IssueDifficultyMultiplier;
			this.AlternativeSolutionReturnTimeForTroops = CampaignTime.DaysFromNow((float)this.GetTotalAlternativeSolutionDurationInDays());
			this.IssueDueTime = this.AlternativeSolutionReturnTimeForTroops;
			this.AddLog(new JournalLog(CampaignTime.Now, this.AlternativeSolutionStartLog, new TextObject("{=VFO7rMzK}Return Days", null), 0, this.AlternativeSolutionBaseDurationInDaysInternal, LogType.Text));
			this.AlternativeSolutionIssueEffectClearTime = this.AlternativeSolutionReturnTimeForTroops - CampaignTime.Days(1f);
			if (this.AlternativeSolutionIssueEffectClearTime.IsPast)
			{
				this.AlternativeSolutionIssueEffectClearTime = this.AlternativeSolutionReturnTimeForTroops;
			}
			DisableHeroAction.Apply(this.AlternativeSolutionHero);
			if (LocationComplex.Current != null)
			{
				Location locationOfCharacter = LocationComplex.Current.GetLocationOfCharacter(this.AlternativeSolutionHero);
				if (locationOfCharacter != null)
				{
					LocationCharacter locationCharacter = locationOfCharacter.GetLocationCharacter(this.AlternativeSolutionHero);
					LocationComplex.Current.ChangeLocation(locationCharacter, locationOfCharacter, null);
				}
			}
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.PlayerSentTroopsToQuest, Hero.MainHero);
		}

		// Token: 0x06002C17 RID: 11287 RVA: 0x000B7C74 File Offset: 0x000B5E74
		private void MakeAlternativeSolutionTroopsReturn()
		{
			this.AlternativeSolutionHero.ChangeState(Hero.CharacterStates.Active);
			MobileParty.MainParty.MemberRoster.Add(this.AlternativeSolutionSentTroops);
			this.AlternativeSolutionSentTroops.Clear();
		}

		// Token: 0x06002C18 RID: 11288 RVA: 0x000B7CA2 File Offset: 0x000B5EA2
		public void OnAlternativeSolutionSolvedAndTroopsAreReturning()
		{
			this._areIssueEffectsResolved = true;
			this.AddLog(new JournalLog(CampaignTime.Now, this.AlternativeSolutionEndLogDefault, null, 0, 0, LogType.Text));
		}

		// Token: 0x06002C19 RID: 11289 RVA: 0x000B7CC5 File Offset: 0x000B5EC5
		public void IssueFinalized()
		{
			this.IssueQuest = null;
			CampaignEventDispatcher.Instance.RemoveListeners(this);
			Campaign.Current.IssueManager.DeactivateIssue(this);
			this._areIssueEffectsResolved = true;
			this.RemoveAllTrackedObjects();
			this.OnIssueFinalized();
		}

		// Token: 0x06002C1A RID: 11290 RVA: 0x000B7CFC File Offset: 0x000B5EFC
		public void CompleteIssueWithQuest()
		{
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFinishedWithSuccess, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		// Token: 0x06002C1B RID: 11291 RVA: 0x000B7D20 File Offset: 0x000B5F20
		public void CompleteIssueWithTimedOut()
		{
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueTimedOut, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		// Token: 0x06002C1C RID: 11292 RVA: 0x000B7D45 File Offset: 0x000B5F45
		public void CompleteIssueWithStayAliveConditionsFailed()
		{
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueCancel, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		// Token: 0x06002C1D RID: 11293 RVA: 0x000B7D6C File Offset: 0x000B5F6C
		public void CompleteIssueWithBetrayal()
		{
			if (this.IssueQuest != null && this.IssueQuest.IsOngoing)
			{
				this.IssueQuest.CompleteQuestWithBetrayal(null);
			}
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFinishedWithBetrayal, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		// Token: 0x06002C1E RID: 11294 RVA: 0x000B7DBC File Offset: 0x000B5FBC
		public void CompleteIssueWithFail(TextObject log = null)
		{
			if (this.IssueQuest != null && this.IssueQuest.IsOngoing)
			{
				this.IssueQuest.CompleteQuestWithFail(log);
			}
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFail, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		// Token: 0x06002C1F RID: 11295 RVA: 0x000B7E0C File Offset: 0x000B600C
		public void CompleteIssueWithCancel(TextObject log = null)
		{
			if (this.IssueQuest != null)
			{
				if (this.IssueQuest.IsOngoing)
				{
					this.IssueQuest.CompleteQuestWithCancel(log);
				}
			}
			else if (this.IsSolvingWithAlternative)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, new TextObject("{=V5Za6d4h}Your troops have returned from their mission.", null), null, 0, 0, LogType.Text));
				this.MakeAlternativeSolutionTroopsReturn();
			}
			else if (this.IsSolvingWithLordSolution && log != null)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, log, null, 0, 0, LogType.Text));
			}
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueCancel, this.IsTriedToSolveBefore ? Hero.MainHero : null);
			this.IssueFinalized();
		}

		// Token: 0x06002C20 RID: 11296 RVA: 0x000B7EAE File Offset: 0x000B60AE
		public void CompleteIssueWithAiLord(Hero issueSolver)
		{
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFinishedByAILord, issueSolver);
			this.IssueFinalized();
		}

		// Token: 0x06002C21 RID: 11297 RVA: 0x000B7EC4 File Offset: 0x000B60C4
		private void AlternativeSolutionEndWithSuccess()
		{
			int totalManCount = this.AlternativeSolutionSentTroops.TotalManCount;
			this.AlternativeSolutionSentTroops.KillNumberOfMenRandomly(this._alternativeSolutionCasualtyCount, false);
			float num = 0.5f;
			float num2 = 1.2f - (float)this.AlternativeSolutionBaseNeededMenCount / (float)this.AlternativeSolutionSentTroops.TotalManCount;
			foreach (FlattenedTroopRosterElement flattenedTroopRosterElement in this.AlternativeSolutionSentTroops.ToFlattenedRoster())
			{
				if (this.AlternativeSolutionBaseNeededMenCount < this.AlternativeSolutionSentTroops.TotalManCount)
				{
					num /= num2 * 0.9f + MBRandom.RandomFloat * 0.1f;
				}
				if (MBRandom.RandomFloat < num)
				{
					this.AlternativeSolutionSentTroops.WoundTroop(flattenedTroopRosterElement.Troop, 1, default(UniqueTroopDescriptor));
				}
				if (this.AlternativeSolutionHero != null && flattenedTroopRosterElement.Troop == this.AlternativeSolutionHero.CharacterObject && this.AlternativeSolutionHero.IsAlive)
				{
					this.AlternativeSolutionHero.AddSkillXp(this._companionRewardSkill, (float)this.CompanionSkillRewardXP);
				}
				num = 0.5f;
			}
			List<TroopRosterElement> list = this.AlternativeSolutionSentTroops.GetTroopRoster().FindAll((TroopRosterElement x) => x.Character.UpgradeTargets.Length != 0 || x.Character.IsHero);
			int num3 = MBRandom.RandomInt(1, list.Count + 1);
			int num4 = (int)(this._totalTroopXpAmount / (float)num3);
			int num5 = 0;
			while (num5 < num3 && list.Count > 0)
			{
				List<ValueTuple<TroopRosterElement, float>> list2 = new List<ValueTuple<TroopRosterElement, float>>();
				foreach (TroopRosterElement troopRosterElement in list)
				{
					list2.Add(new ValueTuple<TroopRosterElement, float>(troopRosterElement, (float)troopRosterElement.Number));
				}
				int num6 = this.AlternativeSolutionSentTroops.FindIndexOfTroop(MBRandom.ChooseWeighted<TroopRosterElement>(list2).Character);
				this.AlternativeSolutionSentTroops.SetElementXp(num6, num4 + this.AlternativeSolutionSentTroops.GetElementXp(num6));
				num5++;
			}
			if (this.RewardGold > 0)
			{
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
			}
			if (!TextObject.IsNullOrEmpty(this.IssueAlternativeSolutionSuccessLog))
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.IssueAlternativeSolutionSuccessLog, null, 0, 0, LogType.Text));
			}
			TextObject textObject = TextObject.Empty;
			if (this._alternativeSolutionCasualtyCount > 0)
			{
				int num7 = totalManCount - this._alternativeSolutionCasualtyCount;
				textObject = new TextObject("{=fCHVyxJ1}{COMPANION.LINK} reported that {?COMPANION.GENDER}she{?}he{\\?} had resolved the matter. Out of {NUMBER1} {?(NUMBER1 > 1)}troops{?}troop{\\?} you sent {NUMBER2} {?(NUMBER2 > 1)}troops{?}troop{\\?} came back safe and sound.", null);
				textObject.SetTextVariable("NUMBER1", totalManCount);
				textObject.SetTextVariable("NUMBER2", num7);
			}
			else
			{
				textObject = new TextObject("{=WOwaHClt}{COMPANION.LINK} reported that {?COMPANION.GENDER}she{?}he{\\?} had resolved the matter. {NUMBER} {?(NUMBER > 1)}troops{?}troop{\\?} you sent joined back to your party.", null);
				textObject.SetTextVariable("NUMBER", totalManCount);
			}
			StringHelpers.SetCharacterProperties("COMPANION", this.AlternativeSolutionHero.CharacterObject, textObject, false);
			this.AddLog(new JournalLog(CampaignTime.Now, textObject, null, 0, 0, LogType.Text));
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.SentTroopsFinishedQuest, Hero.MainHero);
		}

		// Token: 0x06002C22 RID: 11298 RVA: 0x000B81CC File Offset: 0x000B63CC
		public void StartIssueWithLordSolution()
		{
			this._issueDifficultyMultiplier = Campaign.Current.Models.IssueModel.GetIssueDifficultyMultiplier();
			if (this.LordSolutionStartLog != null && this.LordSolutionStartLog != TextObject.Empty)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.LordSolutionStartLog, null, 0, 0, LogType.Text));
			}
			this._issueState = IssueBase.IssueState.SolvingWithLordSolution;
			this.IsTriedToSolveBefore = true;
			CampaignEvents.BeforeGameMenuOpenedEvent.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.BeforeGameMenuOpened));
		}

		// Token: 0x06002C23 RID: 11299 RVA: 0x000B8248 File Offset: 0x000B6448
		private void BeforeGameMenuOpened(MenuCallbackArgs args)
		{
			if (this._issueState == IssueBase.IssueState.SolvingWithLordSolution && Campaign.Current.GameMenuManager.NextLocation == null && GameStateManager.Current.ActiveState is MapState)
			{
				if (this.CounterOfferHero != null)
				{
					if (this.IssueOwner.CurrentSettlement != null)
					{
						CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter, null, false, false, false, false, false, false), new ConversationCharacterData(this.CounterOfferHero.CharacterObject, null, false, false, false, false, false, false));
						return;
					}
				}
				else
				{
					this.CompleteIssueWithLordSolutionWithRefuseCounterOffer();
				}
			}
		}

		// Token: 0x06002C24 RID: 11300 RVA: 0x000B82C9 File Offset: 0x000B64C9
		public void CompleteIssueWithAlternativeSolution()
		{
			if (MBRandom.RandomFloat > this._failureChance)
			{
				this.AlternativeSolutionEndWithSuccessConsequence();
				this.AlternativeSolutionEndWithSuccess();
			}
			else
			{
				this.AlternativeSolutionEndWithFailureConsequence();
				this.AlternativeSolutionEndWithFail();
			}
			this.MakeAlternativeSolutionTroopsReturn();
			this.IssueFinalized();
		}

		// Token: 0x06002C25 RID: 11301 RVA: 0x000B8300 File Offset: 0x000B6500
		private void AlternativeSolutionEndWithFail()
		{
			TextObject textObject = TextObject.Empty;
			int totalManCount = this.AlternativeSolutionSentTroops.TotalManCount;
			if (this.AlternativeSolutionHasCasualties)
			{
				this.AlternativeSolutionSentTroops.KillNumberOfMenRandomly(this._alternativeSolutionCasualtyCount, false);
				this.AlternativeSolutionHero.MakeWounded(null, KillCharacterAction.KillCharacterActionDetail.None);
			}
			if (this.AlternativeSolutionHasCasualties && this._alternativeSolutionCasualtyCount > 0)
			{
				textObject = new TextObject("{=yxwuGcDo}{COMPANION.LINK} has failed to resolve the matter. Out of {NUMBER1} troops you sent {NUMBER2} troops came back safe and sound.", null);
				textObject.SetTextVariable("NUMBER1", totalManCount);
				textObject.SetTextVariable("NUMBER2", totalManCount - this._alternativeSolutionCasualtyCount);
			}
			else
			{
				textObject = new TextObject("{=k6fpAw92}{COMPANION.LINK} has failed to resolve the matter. {NUMBER} troops came back safe and sound.", null);
				textObject.SetTextVariable("NUMBER", totalManCount);
			}
			if (!TextObject.IsNullOrEmpty(this.IssueAlternativeSolutionFailLog))
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.IssueAlternativeSolutionFailLog, null, 0, 0, LogType.Text));
			}
			StringHelpers.SetCharacterProperties("COMPANION", this.AlternativeSolutionHero.CharacterObject, null, false);
			this.AddLog(new JournalLog(CampaignTime.Now, textObject, null, 0, 0, LogType.Text));
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.SentTroopsFailedQuest, Hero.MainHero);
		}

		// Token: 0x06002C26 RID: 11302 RVA: 0x000B8404 File Offset: 0x000B6604
		public void CompleteIssueWithLordSolutionWithRefuseCounterOffer()
		{
			if (this.LordSolutionCounterOfferRefuseLog != null && this.LordSolutionCounterOfferRefuseLog != TextObject.Empty)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.LordSolutionCounterOfferRefuseLog, null, 0, 0, LogType.Text));
			}
			ChangeClanInfluenceAction.Apply(Clan.PlayerClan, (float)(-(float)this.NeededInfluenceForLordSolution));
			if (this.RewardGold > 0)
			{
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
			}
			this.LordSolutionConsequenceWithRefuseCounterOffer();
			this.IssueFinalized();
			CampaignEventDispatcher.Instance.OnIssueUpdated(this, IssueBase.IssueUpdateDetails.IssueFinishedWithSuccess, Hero.MainHero);
		}

		// Token: 0x06002C27 RID: 11303 RVA: 0x000B848A File Offset: 0x000B668A
		public void CompleteIssueWithLordSolutionWithAcceptCounterOffer()
		{
			if (this.LordSolutionCounterOfferAcceptLog != null && this.LordSolutionCounterOfferAcceptLog != TextObject.Empty)
			{
				this.AddLog(new JournalLog(CampaignTime.Now, this.LordSolutionCounterOfferAcceptLog, null, 0, 0, LogType.Text));
			}
			this.LordSolutionConsequenceWithAcceptCounterOffer();
			this.CompleteIssueWithBetrayal();
		}

		// Token: 0x06002C28 RID: 11304 RVA: 0x000B84C8 File Offset: 0x000B66C8
		internal bool CheckPreconditions(Hero issueGiver, out TextObject explanation)
		{
			explanation = new TextObject("{=!}{EXPLANATION}", null);
			if (!this.IssueStayAliveConditions() && this.IsOngoingWithoutQuest)
			{
				this.CompleteIssueWithCancel(null);
				return false;
			}
			IssueBase.PreconditionFlags preconditionFlags;
			Hero hero;
			SkillObject skillObject;
			bool flag = this.CanPlayerTakeQuestConditions(issueGiver, out preconditionFlags, out hero, out skillObject);
			bool flag2 = false;
			if (!this.IssueQuestCanBeDuplicated)
			{
				foreach (KeyValuePair<Hero, IssueBase> keyValuePair in Campaign.Current.IssueManager.Issues)
				{
					IssueBase value = keyValuePair.Value;
					if ((value.IsSolvingWithQuest || value.IsSolvingWithAlternative) && value.GetType() == base.GetType())
					{
						flag2 = true;
						flag = false;
					}
				}
			}
			if ((preconditionFlags & IssueBase.PreconditionFlags.AtWar) == IssueBase.PreconditionFlags.AtWar)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=21dlZJt6}I don't wish to speak about that. As you know, our factions are at war.", null));
			}
			else if (flag2)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=HvY7wjHt}I don't think you can help me. I think you may have other, similar commitments that could interfere.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.NotInSameFaction) == IssueBase.PreconditionFlags.NotInSameFaction)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=rBPI2dvX}I don't need the service of strangers. I work only with lords of the realm and loyal mercenaries.[ib:closed][if:convo_grave]", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.MainHeroIsKingdomLeader) == IssueBase.PreconditionFlags.MainHeroIsKingdomLeader || (preconditionFlags & IssueBase.PreconditionFlags.PlayerIsOwnerOfSettlement) == IssueBase.PreconditionFlags.PlayerIsOwnerOfSettlement)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=dYJKy2mO}Thank you for asking my {?PLAYER.GENDER}lady{?}lord{\\?}, but I can't bother you with such an unimportant issue.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.ClanTier) == IssueBase.PreconditionFlags.ClanTier)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=QOiPDGbf}I have never heard of your clan. I am not sure if I can rely on you or not.[ib:closed][if:convo_grave]", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Renown) == IssueBase.PreconditionFlags.Renown)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=7uJcPQnc}I don't think you can help me. I'm looking for someone with a bit more, shall we say, renown...", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Relation) == IssueBase.PreconditionFlags.Relation)
			{
				TextObject textObject;
				if (issueGiver == hero)
				{
					textObject = new TextObject("{=Cn4lnECZ}You and I do not have a good history... I don't trust you.[ib:closed][if:convo_grave]", null);
				}
				else
				{
					textObject = new TextObject("{=5ZJMa7Om}I don't think you can help me. I've heard you have a history with {HERO.LINK}, and, well, that could complicate things...[ib:closed][if:convo_grave]", null);
					StringHelpers.SetCharacterProperties("HERO", hero.CharacterObject, textObject, false);
				}
				explanation.SetTextVariable("EXPLANATION", textObject);
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Skill) == IssueBase.PreconditionFlags.Skill)
			{
				TextObject textObject2 = new TextObject("{=S9yUBtKc}I don't think you can help me. You need to have some experience in {SKILL_NAME}...", null);
				textObject2.SetTextVariable("SKILL_NAME", skillObject.Name);
				explanation.SetTextVariable("EXPLANATION", textObject2);
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Money) == IssueBase.PreconditionFlags.Money)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=GhcUKfbJ}I don't think you can help me. I need someone who has some gold to spend...[ib:closed]", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Influence) == IssueBase.PreconditionFlags.Influence)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=b6Zc1yre}I don't think you can help me. You'd need a bit of influence...", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.Wounded) == IssueBase.PreconditionFlags.Wounded)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=BUf9WeyN}I don't think you can help me. You should rest for a while and let your wounds heal.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.NotEnoughTroops) == IssueBase.PreconditionFlags.NotEnoughTroops)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=dCv4Qbr6}I don't think you can help me. You don't have enough troops for this task.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.PartySizeLimit) == IssueBase.PreconditionFlags.PartySizeLimit)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=yaiQgyfB}I was planning to give you some troops to solve this task but it seems like you would have difficulties taking any more into your company.", null));
			}
			else if ((preconditionFlags & IssueBase.PreconditionFlags.ClanIsMercenary) == IssueBase.PreconditionFlags.ClanIsMercenary)
			{
				explanation.SetTextVariable("EXPLANATION", new TextObject("{=vz4M8SRn}I do have one particular task, but it is not really suited to a mercenary.Please carry on with your other duties.", null));
			}
			else
			{
				explanation.SetTextVariable("EXPLANATION", TextObject.Empty);
			}
			return flag;
		}

		// Token: 0x06002C29 RID: 11305 RVA: 0x000B880C File Offset: 0x000B6A0C
		internal void AfterCreation()
		{
			this.AfterIssueCreation();
		}

		// Token: 0x06002C2A RID: 11306 RVA: 0x000B8814 File Offset: 0x000B6A14
		public void InitializeIssueOnSettlementOwnerChange()
		{
			if (this.IsThereLordSolution)
			{
				Campaign.Current.ConversationManager.RemoveRelatedLines(this);
			}
		}

		// Token: 0x06002C2B RID: 11307 RVA: 0x000B882E File Offset: 0x000B6A2E
		private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
		{
			if (this.IssueSettlement == settlement || (this.IssueSettlement == null && this.IssueOwner.CurrentSettlement == settlement && this.IssueOwner.IsNoncombatant))
			{
				Campaign.Current.ConversationManager.RemoveRelatedLines(this);
			}
		}

		// Token: 0x06002C2C RID: 11308 RVA: 0x000B886C File Offset: 0x000B6A6C
		public void AddLog(JournalLog log)
		{
			this._journalEntries.Add(log);
			CampaignEventDispatcher.Instance.OnIssueLogAdded(this, false);
		}

		// Token: 0x06002C2D RID: 11309 RVA: 0x000B8888 File Offset: 0x000B6A88
		private void RemoveAllTrackedObjects()
		{
			foreach (ITrackableCampaignObject trackableCampaignObject in this._trackedObjects)
			{
				Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackableCampaignObject, false);
			}
			this._trackedObjects.Clear();
		}

		// Token: 0x06002C2E RID: 11310 RVA: 0x000B88F0 File Offset: 0x000B6AF0
		public void AddTrackedObject(ITrackableCampaignObject o)
		{
			this._trackedObjects.Add(o);
			Campaign.Current.VisualTrackerManager.RegisterObject(o);
		}

		// Token: 0x06002C2F RID: 11311 RVA: 0x000B8910 File Offset: 0x000B6B10
		public void ToggleTrackedObjects(bool enableTrack)
		{
			if (enableTrack)
			{
				using (List<ITrackableCampaignObject>.Enumerator enumerator = this._trackedObjects.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						ITrackableCampaignObject trackableCampaignObject = enumerator.Current;
						Campaign.Current.VisualTrackerManager.RegisterObject(trackableCampaignObject);
					}
					return;
				}
			}
			foreach (ITrackableCampaignObject trackableCampaignObject2 in this._trackedObjects)
			{
				Campaign.Current.VisualTrackerManager.RemoveTrackedObject(trackableCampaignObject2, false);
			}
		}

		// Token: 0x04000D40 RID: 3392
		public const int IssueRelatedConversationPriority = 125;

		// Token: 0x04000D42 RID: 3394
		[SaveableField(27)]
		private float _totalTroopXpAmount;

		// Token: 0x04000D46 RID: 3398
		[SaveableField(30)]
		public readonly TroopRoster AlternativeSolutionSentTroops;

		// Token: 0x04000D49 RID: 3401
		[SaveableField(35)]
		private SkillObject _companionRewardSkill;

		// Token: 0x04000D50 RID: 3408
		[SaveableField(14)]
		private readonly MBList<JournalLog> _journalEntries;

		// Token: 0x04000D51 RID: 3409
		[SaveableField(11)]
		private IssueBase.IssueState _issueState;

		// Token: 0x04000D52 RID: 3410
		[SaveableField(12)]
		public CampaignTime IssueDueTime;

		// Token: 0x04000D53 RID: 3411
		[SaveableField(16)]
		public CampaignTime IssueCreationTime;

		// Token: 0x04000D54 RID: 3412
		[SaveableField(13)]
		private Hero _issueOwner;

		// Token: 0x04000D57 RID: 3415
		[SaveableField(26)]
		private float _issueDifficultyMultiplier;

		// Token: 0x04000D59 RID: 3417
		[SaveableField(32)]
		private bool _areIssueEffectsResolved;

		// Token: 0x04000D5A RID: 3418
		[SaveableField(33)]
		private int _alternativeSolutionCasualtyCount;

		// Token: 0x04000D5B RID: 3419
		[SaveableField(34)]
		private float _failureChance;

		// Token: 0x04000D5C RID: 3420
		[SaveableField(31)]
		private readonly List<ITrackableCampaignObject> _trackedObjects = new List<ITrackableCampaignObject>();

		// Token: 0x020005EC RID: 1516
		internal enum IssueState
		{
			// Token: 0x04001867 RID: 6247
			Ongoing,
			// Token: 0x04001868 RID: 6248
			SolvingWithQuestSolution,
			// Token: 0x04001869 RID: 6249
			SolvingWithAlternativeSolution,
			// Token: 0x0400186A RID: 6250
			SolvingWithLordSolution
		}

		// Token: 0x020005ED RID: 1517
		[Flags]
		public enum AlternativeSolutionScaleFlag : uint
		{
			// Token: 0x0400186C RID: 6252
			None = 0U,
			// Token: 0x0400186D RID: 6253
			Duration = 1U,
			// Token: 0x0400186E RID: 6254
			RequiredTroops = 2U,
			// Token: 0x0400186F RID: 6255
			Casualties = 4U,
			// Token: 0x04001870 RID: 6256
			FailureRisk = 8U
		}

		// Token: 0x020005EE RID: 1518
		[Flags]
		protected enum PreconditionFlags : uint
		{
			// Token: 0x04001872 RID: 6258
			None = 0U,
			// Token: 0x04001873 RID: 6259
			Relation = 1U,
			// Token: 0x04001874 RID: 6260
			Skill = 2U,
			// Token: 0x04001875 RID: 6261
			Money = 4U,
			// Token: 0x04001876 RID: 6262
			Renown = 8U,
			// Token: 0x04001877 RID: 6263
			Influence = 16U,
			// Token: 0x04001878 RID: 6264
			Wounded = 32U,
			// Token: 0x04001879 RID: 6265
			AtWar = 64U,
			// Token: 0x0400187A RID: 6266
			ClanTier = 128U,
			// Token: 0x0400187B RID: 6267
			NotEnoughTroops = 256U,
			// Token: 0x0400187C RID: 6268
			NotInSameFaction = 512U,
			// Token: 0x0400187D RID: 6269
			PartySizeLimit = 1024U,
			// Token: 0x0400187E RID: 6270
			ClanIsMercenary = 2048U,
			// Token: 0x0400187F RID: 6271
			MainHeroIsKingdomLeader = 16384U,
			// Token: 0x04001880 RID: 6272
			PlayerIsOwnerOfSettlement = 32768U
		}

		// Token: 0x020005EF RID: 1519
		public enum IssueUpdateDetails
		{
			// Token: 0x04001882 RID: 6274
			None,
			// Token: 0x04001883 RID: 6275
			PlayerStartedIssueQuestClassicSolution,
			// Token: 0x04001884 RID: 6276
			PlayerSentTroopsToQuest,
			// Token: 0x04001885 RID: 6277
			SentTroopsFinishedQuest,
			// Token: 0x04001886 RID: 6278
			SentTroopsFailedQuest,
			// Token: 0x04001887 RID: 6279
			IssueFinishedWithSuccess,
			// Token: 0x04001888 RID: 6280
			IssueFinishedWithBetrayal,
			// Token: 0x04001889 RID: 6281
			IssueFinishedByAILord,
			// Token: 0x0400188A RID: 6282
			IssueFail,
			// Token: 0x0400188B RID: 6283
			IssueCancel,
			// Token: 0x0400188C RID: 6284
			IssueTimedOut
		}

		// Token: 0x020005F0 RID: 1520
		public enum IssueFrequency
		{
			// Token: 0x0400188E RID: 6286
			VeryCommon,
			// Token: 0x0400188F RID: 6287
			Common,
			// Token: 0x04001890 RID: 6288
			Rare
		}
	}
}
