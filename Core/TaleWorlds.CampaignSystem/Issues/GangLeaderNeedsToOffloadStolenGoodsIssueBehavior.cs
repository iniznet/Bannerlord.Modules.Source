using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000309 RID: 777
	public class GangLeaderNeedsToOffloadStolenGoodsIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002CBC RID: 11452 RVA: 0x000BAE57 File Offset: 0x000B9057
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002CBD RID: 11453 RVA: 0x000BAE70 File Offset: 0x000B9070
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002CBE RID: 11454 RVA: 0x000BAE74 File Offset: 0x000B9074
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.CurrentSettlement != null && issueGiver.IsGangLeader && issueGiver.CurrentSettlement.IsTown && issueGiver.CurrentSettlement.Town.Security >= 40f && issueGiver.CurrentSettlement.Notables.Any((Hero x) => x.CharacterObject.IsHero && x.CharacterObject.HeroObject != issueGiver && x.CharacterObject.HeroObject.IsMerchant);
		}

		// Token: 0x06002CBF RID: 11455 RVA: 0x000BAEFC File Offset: 0x000B90FC
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue), IssueBase.IssueFrequency.Common, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue), IssueBase.IssueFrequency.Common));
		}

		// Token: 0x06002CC0 RID: 11456 RVA: 0x000BAF60 File Offset: 0x000B9160
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			this._gangLeaderNeedsToOffloadStolenGoodsIssue = new GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue(issueOwner);
			return this._gangLeaderNeedsToOffloadStolenGoodsIssue;
		}

		// Token: 0x04000D7E RID: 3454
		private const int IssueDuration = 25;

		// Token: 0x04000D7F RID: 3455
		private const IssueBase.IssueFrequency GangLeaderNeedsToOffloadStolenGoodsIssueFrequency = IssueBase.IssueFrequency.Common;

		// Token: 0x04000D80 RID: 3456
		private GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue _gangLeaderNeedsToOffloadStolenGoodsIssue;

		// Token: 0x0200061B RID: 1563
		public class GangLeaderNeedsToOffloadStolenGoodsIssue : IssueBase
		{
			// Token: 0x06004979 RID: 18809 RVA: 0x001488F8 File Offset: 0x00146AF8
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsToOffloadStolenGoodsIssue(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x0600497A RID: 18810 RVA: 0x00148906 File Offset: 0x00146B06
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this.CounterOfferHero);
			}

			// Token: 0x0600497B RID: 18811 RVA: 0x0014891B File Offset: 0x00146B1B
			internal static object AutoGeneratedGetMemberValueCounterOfferHero(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue)o).CounterOfferHero;
			}

			// Token: 0x0600497C RID: 18812 RVA: 0x00148928 File Offset: 0x00146B28
			internal static object AutoGeneratedGetMemberValue_randomForStolenTradeGood(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue)o)._randomForStolenTradeGood;
			}

			// Token: 0x17000F1B RID: 3867
			// (get) Token: 0x0600497D RID: 18813 RVA: 0x0014893A File Offset: 0x00146B3A
			private ItemObject StolenTradeGood
			{
				get
				{
					return Game.Current.ObjectManager.GetObject<ItemObject>(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue._possibleStolenItems[this._randomForStolenTradeGood]);
				}
			}

			// Token: 0x17000F1C RID: 3868
			// (get) Token: 0x0600497E RID: 18814 RVA: 0x00148957 File Offset: 0x00146B57
			private int StolenTradeGoodAmount
			{
				get
				{
					return MathF.Ceiling(10000f / (float)base.IssueOwner.CurrentSettlement.Town.GetItemPrice(this.StolenTradeGood, null, false) * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F1D RID: 3869
			// (get) Token: 0x0600497F RID: 18815 RVA: 0x00148989 File Offset: 0x00146B89
			private int StolenTradeGoodPrice
			{
				get
				{
					return MathF.Round((float)base.IssueOwner.CurrentSettlement.Town.GetItemPrice(this.StolenTradeGood, null, false) * 0.5f * (float)this.StolenTradeGoodAmount);
				}
			}

			// Token: 0x17000F1E RID: 3870
			// (get) Token: 0x06004980 RID: 18816 RVA: 0x001489BC File Offset: 0x00146BBC
			// (set) Token: 0x06004981 RID: 18817 RVA: 0x001489C4 File Offset: 0x00146BC4
			[SaveableProperty(10)]
			public override Hero CounterOfferHero { get; protected set; }

			// Token: 0x17000F1F RID: 3871
			// (get) Token: 0x06004982 RID: 18818 RVA: 0x001489CD File Offset: 0x00146BCD
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=yBeBSAWi}I've come into the possession of a stash of goods. I won't say how I got them, but I can't take them to the local merchants here. I need someone to buy these from me and I'm willing to give a good discount.", null);
				}
			}

			// Token: 0x17000F20 RID: 3872
			// (get) Token: 0x06004983 RID: 18819 RVA: 0x001489DA File Offset: 0x00146BDA
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=ioF9aJBJ}How can I help?", null);
				}
			}

			// Token: 0x17000F21 RID: 3873
			// (get) Token: 0x06004984 RID: 18820 RVA: 0x001489E8 File Offset: 0x00146BE8
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=Iy5rylN0}I have {STOLEN_GOODS_SIZE} {.%}{?(STOLEN_GOODS_SIZE > 1)}{PLURAL(STOLEN_GOOD)}{?}{STOLEN_GOOD}{\\?}{.%}. I'll let you have them for {REQUESTED_PRICE}{GOLD_ICON}. You can't ask fairer than that - it's half the normal market price these days. I wouldn't try to sell them here - they might be recognized. But go to the next big city and no one will be any wiser. So, what you say?", null);
					textObject.SetTextVariable("STOLEN_GOODS_SIZE", this.StolenTradeGoodAmount);
					textObject.SetTextVariable("STOLEN_GOOD", this.StolenTradeGood.Name);
					textObject.SetTextVariable("REQUESTED_PRICE", this.StolenTradeGoodPrice);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F22 RID: 3874
			// (get) Token: 0x06004985 RID: 18821 RVA: 0x00148A4C File Offset: 0x00146C4C
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=izaW6jEJ}You can say that I am interested.", null);
				}
			}

			// Token: 0x17000F23 RID: 3875
			// (get) Token: 0x06004986 RID: 18822 RVA: 0x00148A59 File Offset: 0x00146C59
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F24 RID: 3876
			// (get) Token: 0x06004987 RID: 18823 RVA: 0x00148A5C File Offset: 0x00146C5C
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F25 RID: 3877
			// (get) Token: 0x06004988 RID: 18824 RVA: 0x00148A5F File Offset: 0x00146C5F
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=bZmYOE8z}Fencing stolen goods in {ISSUE_GIVER_SETTLEMENT}", null);
					string text = "ISSUE_GIVER_SETTLEMENT";
					Settlement issueSettlement = base.IssueSettlement;
					textObject.SetTextVariable(text, ((issueSettlement != null) ? issueSettlement.Name : null) ?? base.IssueOwner.HomeSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000F26 RID: 3878
			// (get) Token: 0x06004989 RID: 18825 RVA: 0x00148AA0 File Offset: 0x00146CA0
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=3WFgPigk}{ISSUE_GIVER.NAME} wants to sell you stolen goods. The price is low because of the added risk.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x0600498A RID: 18826 RVA: 0x00148AD2 File Offset: 0x00146CD2
			public GangLeaderNeedsToOffloadStolenGoodsIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(25f))
			{
				this._randomForStolenTradeGood = MBRandom.RandomInt(0, GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue._possibleStolenItems.Length);
			}

			// Token: 0x0600498B RID: 18827 RVA: 0x00148AF8 File Offset: 0x00146CF8
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.2f;
				}
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return 1f;
				}
				return 0f;
			}

			// Token: 0x0600498C RID: 18828 RVA: 0x00148B1B File Offset: 0x00146D1B
			public override bool IssueStayAliveConditions()
			{
				return base.IssueOwner.CurrentSettlement.Town.Security >= 20f && this.CounterOfferHero.IsActive && this.CounterOfferHero.CurrentSettlement == base.IssueSettlement;
			}

			// Token: 0x0600498D RID: 18829 RVA: 0x00148B5B File Offset: 0x00146D5B
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x0600498E RID: 18830 RVA: 0x00148B60 File Offset: 0x00146D60
			protected override void AfterIssueCreation()
			{
				this.CounterOfferHero = base.IssueOwner.CurrentSettlement.Notables.FirstOrDefault((Hero x) => x != base.IssueOwner && x.IsMerchant) ?? base.IssueOwner.CurrentSettlement.Notables.FirstOrDefault<Hero>();
			}

			// Token: 0x0600498F RID: 18831 RVA: 0x00148BAD File Offset: 0x00146DAD
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004990 RID: 18832 RVA: 0x00148BAF File Offset: 0x00146DAF
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(10f), this.StolenTradeGood, this.StolenTradeGoodPrice, 0, this.StolenTradeGoodAmount);
			}

			// Token: 0x06004991 RID: 18833 RVA: 0x00148BDA File Offset: 0x00146DDA
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			// Token: 0x06004992 RID: 18834 RVA: 0x00148BE0 File Offset: 0x00146DE0
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() <= -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (issueGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (Hero.MainHero.Gold < this.StolenTradeGoodPrice)
				{
					flag |= IssueBase.PreconditionFlags.Money;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x0400196E RID: 6510
			private const int QuestDurationInDays = 10;

			// Token: 0x0400196F RID: 6511
			private static readonly string[] _possibleStolenItems = new string[] { "jewelry", "fur", "silver", "velvet", "oil", "wine" };

			// Token: 0x04001971 RID: 6513
			[SaveableField(20)]
			private readonly int _randomForStolenTradeGood;
		}

		// Token: 0x0200061C RID: 1564
		public class GangLeaderNeedsToOffloadStolenGoodsIssueQuest : QuestBase
		{
			// Token: 0x06004995 RID: 18837 RVA: 0x00148C9D File Offset: 0x00146E9D
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsToOffloadStolenGoodsIssueQuest(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004996 RID: 18838 RVA: 0x00148CAB File Offset: 0x00146EAB
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._stolenTradeGood);
				collectedObjects.Add(this._playerStartsQuestLog);
			}

			// Token: 0x06004997 RID: 18839 RVA: 0x00148CCC File Offset: 0x00146ECC
			internal static object AutoGeneratedGetMemberValue_stolenTradeGood(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._stolenTradeGood;
			}

			// Token: 0x06004998 RID: 18840 RVA: 0x00148CD9 File Offset: 0x00146ED9
			internal static object AutoGeneratedGetMemberValue_stolenTradeGoodAmount(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._stolenTradeGoodAmount;
			}

			// Token: 0x06004999 RID: 18841 RVA: 0x00148CEB File Offset: 0x00146EEB
			internal static object AutoGeneratedGetMemberValue_stolenTradeGoodPrice(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._stolenTradeGoodPrice;
			}

			// Token: 0x0600499A RID: 18842 RVA: 0x00148CFD File Offset: 0x00146EFD
			internal static object AutoGeneratedGetMemberValue_counterOfferGiven(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._counterOfferGiven;
			}

			// Token: 0x0600499B RID: 18843 RVA: 0x00148D0F File Offset: 0x00146F0F
			internal static object AutoGeneratedGetMemberValue_counterOfferRefused(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._counterOfferRefused;
			}

			// Token: 0x0600499C RID: 18844 RVA: 0x00148D21 File Offset: 0x00146F21
			internal static object AutoGeneratedGetMemberValue_counterOfferGold(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._counterOfferGold;
			}

			// Token: 0x0600499D RID: 18845 RVA: 0x00148D33 File Offset: 0x00146F33
			internal static object AutoGeneratedGetMemberValue_playerStartsQuestLog(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._playerStartsQuestLog;
			}

			// Token: 0x17000F27 RID: 3879
			// (get) Token: 0x0600499E RID: 18846 RVA: 0x00148D40 File Offset: 0x00146F40
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F28 RID: 3880
			// (get) Token: 0x0600499F RID: 18847 RVA: 0x00148D43 File Offset: 0x00146F43
			private Hero CounterOfferHero
			{
				get
				{
					return base.QuestGiver.CurrentSettlement.Notables.FirstOrDefault((Hero x) => x != base.QuestGiver && x.IsMerchant) ?? base.QuestGiver.CurrentSettlement.Notables.FirstOrDefault<Hero>();
				}
			}

			// Token: 0x17000F29 RID: 3881
			// (get) Token: 0x060049A0 RID: 18848 RVA: 0x00148D80 File Offset: 0x00146F80
			private TextObject _playerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=uwjjqEob}{QUEST_GIVER.LINK}, a gang leader from {QUEST_GIVER_SETTLEMENT}, has offered you to sell {STOLEN_GOOD_AMOUNT} units of stolen {.%}{STOLEN_GOOD}{.%} for half the normal price. {?QUEST_GIVER.GENDER}She{?}He{\\?} says once you go to another town, selling them won't be an issue. You agreed to buy.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("STOLEN_GOOD", this._stolenTradeGood.Name);
					textObject.SetTextVariable("STOLEN_GOOD_AMOUNT", this._stolenTradeGoodAmount);
					return textObject;
				}
			}

			// Token: 0x17000F2A RID: 3882
			// (get) Token: 0x060049A1 RID: 18849 RVA: 0x00148DF7 File Offset: 0x00146FF7
			private TextObject _successQuestLogText
			{
				get
				{
					return new TextObject("{=sMFdChlr}You refused the merchant's request. The goods stayed with you.", null);
				}
			}

			// Token: 0x17000F2B RID: 3883
			// (get) Token: 0x060049A2 RID: 18850 RVA: 0x00148E04 File Offset: 0x00147004
			private TextObject _failQuestLogText
			{
				get
				{
					return new TextObject("{=bMTfCgTY}You accepted the merchant's request. You've handed over the goods.", null);
				}
			}

			// Token: 0x17000F2C RID: 3884
			// (get) Token: 0x060049A3 RID: 18851 RVA: 0x00148E11 File Offset: 0x00147011
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=0wAjmea4}Fencing stolen goods", null);
				}
			}

			// Token: 0x060049A4 RID: 18852 RVA: 0x00148E20 File Offset: 0x00147020
			public GangLeaderNeedsToOffloadStolenGoodsIssueQuest(string questId, Hero questGiver, CampaignTime duration, ItemObject stolenTradeGood, int stolenTradeGoodPrice, int rewardGold, int stolenGoodAmount)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._stolenTradeGood = stolenTradeGood;
				this._stolenTradeGoodPrice = stolenTradeGoodPrice;
				this._stolenTradeGoodAmount = stolenGoodAmount;
				this._counterOfferGold = MathF.Round((float)questGiver.CurrentSettlement.Town.GetItemPrice(this._stolenTradeGood, null, false) * (float)this._stolenTradeGoodAmount * 0.4f);
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x060049A5 RID: 18853 RVA: 0x00148E90 File Offset: 0x00147090
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=zgZABQIk}Excellent. I'll have the whereabouts of the goods delivered to you right away. I've got them hidden under some loose rocks. You can dig them up right before you leave the town.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=yPI9N9ws}It was good doing business with you.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.CloseDialog();
			}

			// Token: 0x060049A6 RID: 18854 RVA: 0x00148F24 File Offset: 0x00147124
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, base.QuestGiver, this._stolenTradeGoodPrice, false);
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetCounterOfferDialogFlow(), this);
				this._playerStartsQuestLog = base.AddLog(this._playerStartsQuestLogText, true);
			}

			// Token: 0x060049A7 RID: 18855 RVA: 0x00148F77 File Offset: 0x00147177
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetCounterOfferDialogFlow(), this);
			}

			// Token: 0x060049A8 RID: 18856 RVA: 0x00148F98 File Offset: 0x00147198
			private void BeforeGameMenuOpened(MenuCallbackArgs args)
			{
				if (!this._counterOfferGiven && this.CounterOfferHero != null && Campaign.Current.GameMenuManager.NextLocation == null && GameStateManager.Current.ActiveState is MapState)
				{
					CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter, null, false, false, false, false, false, false), new ConversationCharacterData(this.CounterOfferHero.CharacterObject, null, false, false, false, false, false, false));
					this._counterOfferGiven = true;
				}
			}

			// Token: 0x060049A9 RID: 18857 RVA: 0x0014900C File Offset: 0x0014720C
			private DialogFlow GetCounterOfferDialogFlow()
			{
				TextObject textObject = new TextObject("{=KSeIOHDh}(One of the merchants in the town comes to talk as you are preparing to depart.)", null);
				TextObject textObject2 = new TextObject("{=HvTrhCKc}Hold on there. Those goods were taken from a colleague of mine. You probably didn't know then, but you know now. Buying stolen goods is a crime, and you don't want your name stained with that. I'll be happy to take them off your hands and return them back to their owner, and I can give you {REWARD}{GOLD_ICON} as compensation. Refuse, and the authorities here will treat you as a common criminal.", null);
				textObject2.SetTextVariable("REWARD", this._counterOfferGold);
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine(textObject, null, null).Condition(() => this.CounterOfferHero == Hero.OneToOneConversationHero && !this._counterOfferRefused)
					.NpcLine(textObject2, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=QojyhVIg}I see. You can take them, then.", null), null)
					.NpcLine(new TextObject("{=QHfUIS6s}That's the right call.", null), null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.FailQuest;
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=8LIQlBAK}This is none of your business, merchant.", null), null)
					.NpcLine(new TextObject("{=SgtTaqG0}That's a mistake that I think you'll regret, sooner rather than later.", null), null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.RefuseCounterOfferConsequences;
					})
					.CloseDialog()
					.EndPlayerOptions();
			}

			// Token: 0x060049AA RID: 18858 RVA: 0x001490EC File Offset: 0x001472EC
			private void FailQuest()
			{
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x060049AB RID: 18859 RVA: 0x001490F5 File Offset: 0x001472F5
			protected override void OnFinalize()
			{
			}

			// Token: 0x060049AC RID: 18860 RVA: 0x001490F8 File Offset: 0x001472F8
			public override void OnFailed()
			{
				foreach (Hero hero in base.QuestGiver.CurrentSettlement.Notables.Where((Hero x) => x.IsMerchant))
				{
					ChangeRelationAction.ApplyPlayerRelation(hero, 3, true, true);
				}
				base.QuestGiver.AddPower(-10f);
				this.RelationshipChangeWithQuestGiver = -5;
				if (this.CounterOfferHero != null)
				{
					GiveGoldAction.ApplyForQuestBetweenCharacters(this.CounterOfferHero, Hero.MainHero, this._counterOfferGold, false);
				}
				base.AddLog(this._failQuestLogText, false);
			}

			// Token: 0x060049AD RID: 18861 RVA: 0x001491B8 File Offset: 0x001473B8
			protected override void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
			{
				if (MobileParty.MainParty.CurrentSettlement == base.QuestGiver.CurrentSettlement)
				{
					PartyBase.MainParty.ItemRoster.AddToCounts(this._stolenTradeGood, this._stolenTradeGoodAmount);
					completeWithSuccess = true;
				}
			}

			// Token: 0x060049AE RID: 18862 RVA: 0x001491F0 File Offset: 0x001473F0
			private void RefuseCounterOfferConsequences()
			{
				ChangeCrimeRatingAction.Apply(base.QuestGiver.CurrentSettlement.MapFaction, 10f, true);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Generosity, 30)
				});
				foreach (Hero hero in base.QuestGiver.CurrentSettlement.Notables.Where((Hero x) => x.IsMerchant))
				{
					ChangeRelationAction.ApplyPlayerRelation(hero, -3, true, true);
				}
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = 10;
				this._counterOfferRefused = true;
				base.AddLog(this._successQuestLogText, false);
			}

			// Token: 0x060049AF RID: 18863 RVA: 0x001492D4 File Offset: 0x001474D4
			private void OnSettlementLeft(MobileParty party, Settlement settlement)
			{
				if (settlement == base.QuestGiver.CurrentSettlement && MobileParty.MainParty == party)
				{
					PartyBase.MainParty.ItemRoster.AddToCounts(this._stolenTradeGood, this._stolenTradeGoodAmount);
					base.CompleteQuestWithSuccess();
				}
			}

			// Token: 0x060049B0 RID: 18864 RVA: 0x0014930E File Offset: 0x0014750E
			protected override void RegisterEvents()
			{
				CampaignEvents.OnSettlementLeftEvent.AddNonSerializedListener(this, new Action<MobileParty, Settlement>(this.OnSettlementLeft));
				CampaignEvents.BeforeGameMenuOpenedEvent.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.BeforeGameMenuOpened));
			}

			// Token: 0x060049B1 RID: 18865 RVA: 0x0014933E File Offset: 0x0014753E
			public override void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
			{
				if (hero == this.CounterOfferHero)
				{
					result = false;
				}
			}

			// Token: 0x04001972 RID: 6514
			[SaveableField(105)]
			private ItemObject _stolenTradeGood;

			// Token: 0x04001973 RID: 6515
			[SaveableField(106)]
			private int _stolenTradeGoodAmount;

			// Token: 0x04001974 RID: 6516
			[SaveableField(107)]
			private int _stolenTradeGoodPrice;

			// Token: 0x04001975 RID: 6517
			[SaveableField(109)]
			private bool _counterOfferGiven;

			// Token: 0x04001976 RID: 6518
			[SaveableField(110)]
			private bool _counterOfferRefused;

			// Token: 0x04001977 RID: 6519
			[SaveableField(111)]
			private int _counterOfferGold;

			// Token: 0x04001978 RID: 6520
			[SaveableField(112)]
			private JournalLog _playerStartsQuestLog;
		}

		// Token: 0x0200061D RID: 1565
		public class GangLeaderNeedsToOffloadStolenGoodsIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x060049B8 RID: 18872 RVA: 0x001493D1 File Offset: 0x001475D1
			public GangLeaderNeedsToOffloadStolenGoodsIssueTypeDefiner()
				: base(460000)
			{
			}

			// Token: 0x060049B9 RID: 18873 RVA: 0x001493DE File Offset: 0x001475DE
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue), 1, null);
				base.AddClassDefinition(typeof(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest), 2, null);
			}
		}
	}
}
