using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	public class GangLeaderNeedsToOffloadStolenGoodsIssueBehavior : CampaignBehaviorBase
	{
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		public override void SyncData(IDataStore dataStore)
		{
		}

		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.CurrentSettlement != null && issueGiver.IsGangLeader && issueGiver.CurrentSettlement.IsTown && issueGiver.CurrentSettlement.Town.Security >= 40f && issueGiver.CurrentSettlement.Notables.Any((Hero x) => x.CharacterObject.IsHero && x.CharacterObject.HeroObject != issueGiver && x.CharacterObject.HeroObject.IsMerchant);
		}

		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue), IssueBase.IssueFrequency.Common, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue), IssueBase.IssueFrequency.Common));
		}

		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			this._gangLeaderNeedsToOffloadStolenGoodsIssue = new GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue(issueOwner);
			return this._gangLeaderNeedsToOffloadStolenGoodsIssue;
		}

		private const int IssueDuration = 25;

		private const IssueBase.IssueFrequency GangLeaderNeedsToOffloadStolenGoodsIssueFrequency = IssueBase.IssueFrequency.Common;

		private GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue _gangLeaderNeedsToOffloadStolenGoodsIssue;

		public class GangLeaderNeedsToOffloadStolenGoodsIssue : IssueBase
		{
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsToOffloadStolenGoodsIssue(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this.CounterOfferHero);
			}

			internal static object AutoGeneratedGetMemberValueCounterOfferHero(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue)o).CounterOfferHero;
			}

			internal static object AutoGeneratedGetMemberValue_randomForStolenTradeGood(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue)o)._randomForStolenTradeGood;
			}

			private ItemObject StolenTradeGood
			{
				get
				{
					return Game.Current.ObjectManager.GetObject<ItemObject>(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue._possibleStolenItems[this._randomForStolenTradeGood]);
				}
			}

			private int StolenTradeGoodAmount
			{
				get
				{
					return MathF.Ceiling(10000f / (float)base.IssueOwner.CurrentSettlement.Town.GetItemPrice(this.StolenTradeGood, null, false) * base.IssueDifficultyMultiplier);
				}
			}

			private int StolenTradeGoodPrice
			{
				get
				{
					return MathF.Round((float)base.IssueOwner.CurrentSettlement.Town.GetItemPrice(this.StolenTradeGood, null, false) * 0.5f * (float)this.StolenTradeGoodAmount);
				}
			}

			[SaveableProperty(10)]
			public override Hero CounterOfferHero { get; protected set; }

			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=yBeBSAWi}I've come into the possession of a stash of goods. I won't say how I got them, but I can't take them to the local merchants here. I need someone to buy these from me and I'm willing to give a good discount.", null);
				}
			}

			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=ioF9aJBJ}How can I help?", null);
				}
			}

			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=Iy5rylN0}I have {STOLEN_GOODS_SIZE} {.%}{?(STOLEN_GOODS_SIZE > 1)}{PLURAL(STOLEN_GOOD)}{?}{STOLEN_GOOD}{\\?}{.%}. I'll let you have them for {REQUESTED_PRICE}{GOLD_ICON}. You can't ask fairer than that - it's half the normal market price these days. I wouldn't try to sell them here - they might be recognized. But go to the next big city and no one will be any wiser. So, what you say?", null);
					textObject.SetTextVariable("STOLEN_GOODS_SIZE", this.StolenTradeGoodAmount);
					textObject.SetTextVariable("STOLEN_GOOD", this.StolenTradeGood.Name);
					textObject.SetTextVariable("REQUESTED_PRICE", this.StolenTradeGoodPrice);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=izaW6jEJ}You can say that I am interested.", null);
				}
			}

			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=bZmYOE8z}Fencing stolen goods in {ISSUE_GIVER_SETTLEMENT}", null);
					string text = "ISSUE_GIVER_SETTLEMENT";
					Settlement issueSettlement = base.IssueSettlement;
					textObject.SetTextVariable(text, ((issueSettlement != null) ? issueSettlement.Name : null) ?? base.IssueOwner.HomeSettlement.Name);
					return textObject;
				}
			}

			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=3WFgPigk}{ISSUE_GIVER.NAME} wants to sell you stolen goods. The price is low because of the added risk.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			public GangLeaderNeedsToOffloadStolenGoodsIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(25f))
			{
				this._randomForStolenTradeGood = MBRandom.RandomInt(0, GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue._possibleStolenItems.Length);
			}

			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.2f;
				}
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return 1f;
				}
				return 0f;
			}

			public override bool IssueStayAliveConditions()
			{
				return base.IssueOwner.CurrentSettlement.Town.Security >= 20f && this.CounterOfferHero.IsActive && this.CounterOfferHero.CurrentSettlement == base.IssueSettlement;
			}

			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			protected override void AfterIssueCreation()
			{
				this.CounterOfferHero = base.IssueOwner.CurrentSettlement.Notables.FirstOrDefault((Hero x) => x != base.IssueOwner && x.IsMerchant) ?? base.IssueOwner.CurrentSettlement.Notables.FirstOrDefault<Hero>();
			}

			protected override void OnGameLoad()
			{
			}

			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(10f), this.StolenTradeGood, this.StolenTradeGoodPrice, 0, this.StolenTradeGoodAmount);
			}

			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() <= -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (issueGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (Hero.MainHero.Gold < this.StolenTradeGoodPrice)
				{
					flag |= IssueBase.PreconditionFlags.Money;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			private const int QuestDurationInDays = 10;

			private static readonly string[] _possibleStolenItems = new string[] { "jewelry", "fur", "silver", "velvet", "oil", "wine" };

			[SaveableField(20)]
			private readonly int _randomForStolenTradeGood;
		}

		public class GangLeaderNeedsToOffloadStolenGoodsIssueQuest : QuestBase
		{
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsToOffloadStolenGoodsIssueQuest(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._stolenTradeGood);
				collectedObjects.Add(this._playerStartsQuestLog);
			}

			internal static object AutoGeneratedGetMemberValue_stolenTradeGood(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._stolenTradeGood;
			}

			internal static object AutoGeneratedGetMemberValue_stolenTradeGoodAmount(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._stolenTradeGoodAmount;
			}

			internal static object AutoGeneratedGetMemberValue_stolenTradeGoodPrice(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._stolenTradeGoodPrice;
			}

			internal static object AutoGeneratedGetMemberValue_counterOfferGiven(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._counterOfferGiven;
			}

			internal static object AutoGeneratedGetMemberValue_counterOfferRefused(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._counterOfferRefused;
			}

			internal static object AutoGeneratedGetMemberValue_counterOfferGold(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._counterOfferGold;
			}

			internal static object AutoGeneratedGetMemberValue_playerStartsQuestLog(object o)
			{
				return ((GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest)o)._playerStartsQuestLog;
			}

			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			private Hero CounterOfferHero
			{
				get
				{
					return base.QuestGiver.CurrentSettlement.Notables.FirstOrDefault((Hero x) => x != base.QuestGiver && x.IsMerchant) ?? base.QuestGiver.CurrentSettlement.Notables.FirstOrDefault<Hero>();
				}
			}

			private TextObject _playerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=uwjjqEob}{QUEST_GIVER.LINK}, a gang leader from {QUEST_GIVER_SETTLEMENT}, has offered you to sell {STOLEN_GOOD_AMOUNT} units of stolen {.%}{STOLEN_GOOD}{.%} for half the normal price. {?QUEST_GIVER.GENDER}She{?}He{\\?} says once you go to another town, selling them won't be an issue. You agreed to buy.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("STOLEN_GOOD", this._stolenTradeGood.Name);
					textObject.SetTextVariable("STOLEN_GOOD_AMOUNT", this._stolenTradeGoodAmount);
					return textObject;
				}
			}

			private TextObject _successQuestLogText
			{
				get
				{
					return new TextObject("{=sMFdChlr}You refused the merchant's request. The goods stayed with you.", null);
				}
			}

			private TextObject _failQuestLogText
			{
				get
				{
					return new TextObject("{=bMTfCgTY}You accepted the merchant's request. You've handed over the goods.", null);
				}
			}

			public override TextObject Title
			{
				get
				{
					return new TextObject("{=0wAjmea4}Fencing stolen goods", null);
				}
			}

			public GangLeaderNeedsToOffloadStolenGoodsIssueQuest(string questId, Hero questGiver, CampaignTime duration, ItemObject stolenTradeGood, int stolenTradeGoodPrice, int rewardGold, int stolenGoodAmount)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._stolenTradeGood = stolenTradeGood;
				this._stolenTradeGoodPrice = stolenTradeGoodPrice;
				this._stolenTradeGoodAmount = stolenGoodAmount;
				this._counterOfferGold = MathF.Round((float)questGiver.CurrentSettlement.Town.GetItemPrice(this._stolenTradeGood, null, false) * (float)this._stolenTradeGoodAmount * 0.4f);
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=zgZABQIk}Excellent. I'll have the whereabouts of the goods delivered to you right away. I've got them hidden under some loose rocks. You can dig them up right before you leave the town.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=yPI9N9ws}It was good doing business with you.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.CloseDialog();
			}

			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, base.QuestGiver, this._stolenTradeGoodPrice, false);
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetCounterOfferDialogFlow(), this);
				this._playerStartsQuestLog = base.AddLog(this._playerStartsQuestLogText, true);
			}

			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetCounterOfferDialogFlow(), this);
			}

			private void BeforeGameMenuOpened(MenuCallbackArgs args)
			{
				if (!this._counterOfferGiven && this.CounterOfferHero != null && Campaign.Current.GameMenuManager.NextLocation == null && GameStateManager.Current.ActiveState is MapState)
				{
					CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter, null, false, false, false, false, false, false), new ConversationCharacterData(this.CounterOfferHero.CharacterObject, null, false, false, false, false, false, false));
					this._counterOfferGiven = true;
				}
			}

			private DialogFlow GetCounterOfferDialogFlow()
			{
				TextObject textObject = new TextObject("{=KSeIOHDh}(One of the merchants in the town comes to talk as you are preparing to depart.)", null);
				TextObject textObject2 = new TextObject("{=HvTrhCKc}Hold on there. Those goods were taken from a colleague of mine. You probably didn't know then, but you know now. Buying stolen goods is a crime, and you don't want your name stained with that. I'll be happy to take them off your hands and return them back to their owner, and I can give you {REWARD}{GOLD_ICON} as compensation. Refuse, and the authorities here will treat you as a common criminal.", null);
				textObject2.SetTextVariable("REWARD", this._counterOfferGold);
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine(textObject, null, null).Condition(() => this.CounterOfferHero == Hero.OneToOneConversationHero && !this._counterOfferRefused)
					.NpcLine(textObject2, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=QojyhVIg}I see. You can take them, then.", null), null)
					.NpcLine(new TextObject("{=QHfUIS6s}That's the right call.", null), null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.FailQuest;
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=8LIQlBAK}This is none of your business, merchant.", null), null)
					.NpcLine(new TextObject("{=SgtTaqG0}That's a mistake that I think you'll regret, sooner rather than later.", null), null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.RefuseCounterOfferConsequences;
					})
					.CloseDialog()
					.EndPlayerOptions();
			}

			private void FailQuest()
			{
				base.CompleteQuestWithFail(null);
			}

			protected override void OnFinalize()
			{
			}

			public override void OnFailed()
			{
				foreach (Hero hero in base.QuestGiver.CurrentSettlement.Notables.Where((Hero x) => x.IsMerchant))
				{
					ChangeRelationAction.ApplyPlayerRelation(hero, 3, true, true);
				}
				base.QuestGiver.AddPower(-10f);
				this.RelationshipChangeWithQuestGiver = -5;
				if (this.CounterOfferHero != null)
				{
					GiveGoldAction.ApplyForQuestBetweenCharacters(this.CounterOfferHero, Hero.MainHero, this._counterOfferGold, false);
				}
				base.AddLog(this._failQuestLogText, false);
			}

			protected override void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
			{
				if (MobileParty.MainParty.CurrentSettlement == base.QuestGiver.CurrentSettlement)
				{
					PartyBase.MainParty.ItemRoster.AddToCounts(this._stolenTradeGood, this._stolenTradeGoodAmount);
					completeWithSuccess = true;
				}
			}

			private void RefuseCounterOfferConsequences()
			{
				ChangeCrimeRatingAction.Apply(base.QuestGiver.CurrentSettlement.MapFaction, 10f, true);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Generosity, 30)
				});
				foreach (Hero hero in base.QuestGiver.CurrentSettlement.Notables.Where((Hero x) => x.IsMerchant))
				{
					ChangeRelationAction.ApplyPlayerRelation(hero, -3, true, true);
				}
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = 10;
				this._counterOfferRefused = true;
				base.AddLog(this._successQuestLogText, false);
			}

			private void OnSettlementLeft(MobileParty party, Settlement settlement)
			{
				if (settlement == base.QuestGiver.CurrentSettlement && MobileParty.MainParty == party)
				{
					PartyBase.MainParty.ItemRoster.AddToCounts(this._stolenTradeGood, this._stolenTradeGoodAmount);
					base.CompleteQuestWithSuccess();
				}
			}

			protected override void RegisterEvents()
			{
				CampaignEvents.OnSettlementLeftEvent.AddNonSerializedListener(this, new Action<MobileParty, Settlement>(this.OnSettlementLeft));
				CampaignEvents.BeforeGameMenuOpenedEvent.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.BeforeGameMenuOpened));
			}

			public override void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
			{
				if (hero == this.CounterOfferHero)
				{
					result = false;
				}
			}

			[SaveableField(105)]
			private ItemObject _stolenTradeGood;

			[SaveableField(106)]
			private int _stolenTradeGoodAmount;

			[SaveableField(107)]
			private int _stolenTradeGoodPrice;

			[SaveableField(109)]
			private bool _counterOfferGiven;

			[SaveableField(110)]
			private bool _counterOfferRefused;

			[SaveableField(111)]
			private int _counterOfferGold;

			[SaveableField(112)]
			private JournalLog _playerStartsQuestLog;
		}

		public class GangLeaderNeedsToOffloadStolenGoodsIssueTypeDefiner : SaveableTypeDefiner
		{
			public GangLeaderNeedsToOffloadStolenGoodsIssueTypeDefiner()
				: base(460000)
			{
			}

			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssue), 1, null);
				base.AddClassDefinition(typeof(GangLeaderNeedsToOffloadStolenGoodsIssueBehavior.GangLeaderNeedsToOffloadStolenGoodsIssueQuest), 2, null);
			}
		}
	}
}
