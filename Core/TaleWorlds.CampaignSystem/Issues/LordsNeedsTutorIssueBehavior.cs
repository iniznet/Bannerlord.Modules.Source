using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.AgentOrigins;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000317 RID: 791
	public class LordsNeedsTutorIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D21 RID: 11553 RVA: 0x000BC5B0 File Offset: 0x000BA7B0
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D22 RID: 11554 RVA: 0x000BC5CC File Offset: 0x000BA7CC
		public void OnCheckForIssue(Hero hero)
		{
			Hero hero2;
			if (this.ConditionsHold(hero, out hero2))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssue), IssueBase.IssueFrequency.Common, hero2));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssue), IssueBase.IssueFrequency.Common));
		}

		// Token: 0x06002D23 RID: 11555 RVA: 0x000BC634 File Offset: 0x000BA834
		private bool SuitableCondition(Hero hero)
		{
			return hero.Age >= 18f && hero.Age < 23f && hero.PartyBelongedTo == null && hero.PartyBelongedToAsPrisoner == null && hero.IsActive && hero.CurrentSettlement != null && hero.Level <= 15 && !hero.IsFemale && hero.Clan != Clan.PlayerClan && !LordsNeedsTutorIssueBehavior._alreadyChosenHeroes.Contains(hero);
		}

		// Token: 0x06002D24 RID: 11556 RVA: 0x000BC6AC File Offset: 0x000BA8AC
		private bool ConditionsHold(Hero issueGiver, out Hero youngHero)
		{
			youngHero = null;
			if (issueGiver.IsLord && issueGiver.Clan != Clan.PlayerClan && issueGiver.Age > 30f && !issueGiver.IsMinorFactionHero)
			{
				youngHero = issueGiver.Clan.Lords.FirstOrDefault(new Func<Hero, bool>(this.SuitableCondition));
				if (youngHero != null && youngHero != issueGiver && !this.SuitableCondition(issueGiver))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06002D25 RID: 11557 RVA: 0x000BC71C File Offset: 0x000BA91C
		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			PotentialIssueData potentialIssueData = pid;
			return new LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssue(issueOwner, potentialIssueData.RelatedObject as Hero);
		}

		// Token: 0x06002D26 RID: 11558 RVA: 0x000BC742 File Offset: 0x000BA942
		public override void SyncData(IDataStore dataStore)
		{
			dataStore.SyncData<List<Hero>>("_alreadyChosenHeroes", ref LordsNeedsTutorIssueBehavior._alreadyChosenHeroes);
		}

		// Token: 0x06002D27 RID: 11559 RVA: 0x000BC755 File Offset: 0x000BA955
		private static void SetAlreadyChosenHero(Hero hero)
		{
			if (LordsNeedsTutorIssueBehavior._alreadyChosenHeroes == null)
			{
				LordsNeedsTutorIssueBehavior._alreadyChosenHeroes = new List<Hero> { hero };
				return;
			}
			if (!LordsNeedsTutorIssueBehavior._alreadyChosenHeroes.Contains(hero))
			{
				LordsNeedsTutorIssueBehavior._alreadyChosenHeroes.Add(hero);
			}
		}

		// Token: 0x04000D97 RID: 3479
		private const int YoungHeroAgeMinValue = 18;

		// Token: 0x04000D98 RID: 3480
		private const int YoungHeroAgeMaxValue = 23;

		// Token: 0x04000D99 RID: 3481
		private const IssueBase.IssueFrequency LordsNeedsTutorIssueFrequency = IssueBase.IssueFrequency.Common;

		// Token: 0x04000D9A RID: 3482
		private const int QuestDurationInDays = 200;

		// Token: 0x04000D9B RID: 3483
		private static List<Hero> _alreadyChosenHeroes = new List<Hero>();

		// Token: 0x02000648 RID: 1608
		public class LordsNeedsTutorIssue : IssueBase
		{
			// Token: 0x06004E58 RID: 20056 RVA: 0x0015B715 File Offset: 0x00159915
			internal static void AutoGeneratedStaticCollectObjectsLordsNeedsTutorIssue(object o, List<object> collectedObjects)
			{
				((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004E59 RID: 20057 RVA: 0x0015B723 File Offset: 0x00159923
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._youngHero);
			}

			// Token: 0x06004E5A RID: 20058 RVA: 0x0015B738 File Offset: 0x00159938
			internal static object AutoGeneratedGetMemberValue_youngHero(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssue)o)._youngHero;
			}

			// Token: 0x170010B8 RID: 4280
			// (get) Token: 0x06004E5B RID: 20059 RVA: 0x0015B745 File Offset: 0x00159945
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x170010B9 RID: 4281
			// (get) Token: 0x06004E5C RID: 20060 RVA: 0x0015B748 File Offset: 0x00159948
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x170010BA RID: 4282
			// (get) Token: 0x06004E5D RID: 20061 RVA: 0x0015B74B File Offset: 0x0015994B
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=VtSg9OYK}I've heard good things about you. They say that you are an accomplished warrior. Some also say an accomplished commander. I have a proposal for you. There is a young lord from my clan. He is an aspiring warrior and I must say he quite admires you. He wants to learn from you. What do you say? Are you willing to take him under your wings for a while? Let's say {QUEST_DURATION} days?", null);
					textObject.SetTextVariable("QUEST_DURATION", 200);
					return textObject;
				}
			}

			// Token: 0x170010BB RID: 4283
			// (get) Token: 0x06004E5E RID: 20062 RVA: 0x0015B769 File Offset: 0x00159969
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=a1n2zCaD}What exactly do you wish from me?", null);
				}
			}

			// Token: 0x170010BC RID: 4284
			// (get) Token: 0x06004E5F RID: 20063 RVA: 0x0015B776 File Offset: 0x00159976
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=JlFfuFEC}How about you take him with you? Feed and protect him, sure, but don't treat him any differently from your companions. Let him stay with you for a year, and then let him return to us? I will send you a worthwhile gift and, perhaps more valuably, you will gain my lifelong friendship, assuming everything goes well?", null);
				}
			}

			// Token: 0x170010BD RID: 4285
			// (get) Token: 0x06004E60 RID: 20064 RVA: 0x0015B783 File Offset: 0x00159983
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=iTYoUNdC}All right. I'll take him with me.", null);
				}
			}

			// Token: 0x170010BE RID: 4286
			// (get) Token: 0x06004E61 RID: 20065 RVA: 0x0015B790 File Offset: 0x00159990
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=XmGjTZz0}{?QUEST_GIVER.GENDER}Lady{?}Lord{\\?} Needs A Tutor", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010BF RID: 4287
			// (get) Token: 0x06004E62 RID: 20066 RVA: 0x0015B7C4 File Offset: 0x001599C4
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=MSr3HRa1}{QUEST_GIVER.NAME}, a {?QUEST_GIVER.GENDER}lady{?}lord{\\?} of the {CLAN}, wants young member of the clan trained in the arts of war.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("CLAN", base.IssueOwner.Clan.Name);
					return textObject;
				}
			}

			// Token: 0x06004E63 RID: 20067 RVA: 0x0015B812 File Offset: 0x00159A12
			public LordsNeedsTutorIssue(Hero issueOwner, Hero youngHero)
				: base(issueOwner, CampaignTime.DaysFromNow(200f))
			{
				this._youngHero = youngHero;
			}

			// Token: 0x06004E64 RID: 20068 RVA: 0x0015B82C File Offset: 0x00159A2C
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.ClanInfluence)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x06004E65 RID: 20069 RVA: 0x0015B841 File Offset: 0x00159A41
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004E66 RID: 20070 RVA: 0x0015B843 File Offset: 0x00159A43
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest(questId, base.IssueOwner, this._youngHero);
			}

			// Token: 0x06004E67 RID: 20071 RVA: 0x0015B857 File Offset: 0x00159A57
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			// Token: 0x06004E68 RID: 20072 RVA: 0x0015B85C File Offset: 0x00159A5C
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				relationHero = null;
				skill = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (Hero.MainHero.MapFaction.IsKingdomFaction && Hero.MainHero.IsFactionLeader)
				{
					flag |= IssueBase.PreconditionFlags.MainHeroIsKingdomLeader;
				}
				if (issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (Clan.PlayerClan.Tier < 2)
				{
					flag |= IssueBase.PreconditionFlags.ClanTier;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004E69 RID: 20073 RVA: 0x0015B8EC File Offset: 0x00159AEC
			public override bool IssueStayAliveConditions()
			{
				return this._youngHero.Age >= 18f && this._youngHero.Age < 21f && this._youngHero.PartyBelongedTo == null && this._youngHero.PartyBelongedToAsPrisoner == null && this._youngHero.IsActive && this._youngHero.CurrentSettlement != null && this._youngHero.Level <= 20 && base.IssueOwner.Clan != Clan.PlayerClan && this._youngHero.Clan != Clan.PlayerClan && (this._youngHero.Spouse == null || this._youngHero.Children.IsEmpty<Hero>());
			}

			// Token: 0x06004E6A RID: 20074 RVA: 0x0015B9AB File Offset: 0x00159BAB
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x04001A5D RID: 6749
			[SaveableField(1)]
			private Hero _youngHero;

			// Token: 0x04001A5E RID: 6750
			private const int MinimumRelationToTakeQuest = -10;
		}

		// Token: 0x02000649 RID: 1609
		public class LordsNeedsTutorIssueQuest : QuestBase
		{
			// Token: 0x06004E6B RID: 20075 RVA: 0x0015B9AD File Offset: 0x00159BAD
			internal static void AutoGeneratedStaticCollectObjectsLordsNeedsTutorIssueQuest(object o, List<object> collectedObjects)
			{
				((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004E6C RID: 20076 RVA: 0x0015B9BB File Offset: 0x00159BBB
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._youngHero);
				collectedObjects.Add(this._oldSkillValues);
				collectedObjects.Add(this._startQuestLog);
			}

			// Token: 0x06004E6D RID: 20077 RVA: 0x0015B9E8 File Offset: 0x00159BE8
			internal static object AutoGeneratedGetMemberValue_youngHero(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o)._youngHero;
			}

			// Token: 0x06004E6E RID: 20078 RVA: 0x0015B9F5 File Offset: 0x00159BF5
			internal static object AutoGeneratedGetMemberValue_checkForMissionEnd(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o)._checkForMissionEnd;
			}

			// Token: 0x06004E6F RID: 20079 RVA: 0x0015BA07 File Offset: 0x00159C07
			internal static object AutoGeneratedGetMemberValue_firstConversationInitialized(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o)._firstConversationInitialized;
			}

			// Token: 0x06004E70 RID: 20080 RVA: 0x0015BA19 File Offset: 0x00159C19
			internal static object AutoGeneratedGetMemberValue_questCompletedStartConversation(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o)._questCompletedStartConversation;
			}

			// Token: 0x06004E71 RID: 20081 RVA: 0x0015BA2B File Offset: 0x00159C2B
			internal static object AutoGeneratedGetMemberValue_youngHeroBeginningSkillPoints(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o)._youngHeroBeginningSkillPoints;
			}

			// Token: 0x06004E72 RID: 20082 RVA: 0x0015BA3D File Offset: 0x00159C3D
			internal static object AutoGeneratedGetMemberValue_randomForQuestReward(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o)._randomForQuestReward;
			}

			// Token: 0x06004E73 RID: 20083 RVA: 0x0015BA4F File Offset: 0x00159C4F
			internal static object AutoGeneratedGetMemberValue_oldSkillValues(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o)._oldSkillValues;
			}

			// Token: 0x06004E74 RID: 20084 RVA: 0x0015BA5C File Offset: 0x00159C5C
			internal static object AutoGeneratedGetMemberValue_startQuestLog(object o)
			{
				return ((LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest)o)._startQuestLog;
			}

			// Token: 0x170010C0 RID: 4288
			// (get) Token: 0x06004E75 RID: 20085 RVA: 0x0015BA69 File Offset: 0x00159C69
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x170010C1 RID: 4289
			// (get) Token: 0x06004E76 RID: 20086 RVA: 0x0015BA6C File Offset: 0x00159C6C
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=XmGjTZz0}{?QUEST_GIVER.GENDER}Lady{?}Lord{\\?} Needs A Tutor", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010C2 RID: 4290
			// (get) Token: 0x06004E77 RID: 20087 RVA: 0x0015BAA0 File Offset: 0x00159CA0
			private TextObject PlayerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=Celvao0J}{QUEST_GIVER.LINK} a {?QUEST_GIVER.GENDER}Lady{?}Lord{\\?} from {CLAN} clan has asked you to take a young clan member under your wings and train him for {DURATION} days. You have accepted to train him personally.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("DURATION", 200);
					textObject.SetTextVariable("CLAN", base.QuestGiver.Clan.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x170010C3 RID: 4291
			// (get) Token: 0x06004E78 RID: 20088 RVA: 0x0015BB00 File Offset: 0x00159D00
			private TextObject SuccessQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=j0QKnNqK}The training of {YOUNG_HERO.LINK} has been completed successfully. Both He and his clan is grateful to you.", null);
					StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010C4 RID: 4292
			// (get) Token: 0x06004E79 RID: 20089 RVA: 0x0015BB34 File Offset: 0x00159D34
			private TextObject FailTimedOutQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=taz5cAtw}You failed to train the {YOUNG_HERO.LINK} enough as {QUEST_GIVER.LINK} expected. {?QUEST_GIVER.GENDER}She{?}He{\\?} is disappointed.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010C5 RID: 4293
			// (get) Token: 0x06004E7A RID: 20090 RVA: 0x0015BB80 File Offset: 0x00159D80
			private TextObject PupilHasDiedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=abmSQFR5}{YOUNG_HERO.LINK} has died under your care. {QUEST_GIVER.LINK} is furious.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010C6 RID: 4294
			// (get) Token: 0x06004E7B RID: 20091 RVA: 0x0015BBCC File Offset: 0x00159DCC
			private TextObject PupilEscapedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=dL8196qY}{YOUNG_HERO.LINK} has escaped. Find and talk to him to continue your quest.", null);
					StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010C7 RID: 4295
			// (get) Token: 0x06004E7C RID: 20092 RVA: 0x0015BC00 File Offset: 0x00159E00
			private TextObject WarDeclaredQuestCancel
			{
				get
				{
					TextObject textObject = new TextObject("{=HkbK8cqw}Your clan is now at war with the {QUEST_GIVER.LINK}'s faction. Your agreement with {QUEST_GIVER.LINK} was terminated.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010C8 RID: 4296
			// (get) Token: 0x06004E7D RID: 20093 RVA: 0x0015BC34 File Offset: 0x00159E34
			private TextObject PlayerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010C9 RID: 4297
			// (get) Token: 0x06004E7E RID: 20094 RVA: 0x0015BC68 File Offset: 0x00159E68
			private TextObject PlayerKickedYoungHeroFromClan
			{
				get
				{
					TextObject textObject = new TextObject("{=x3f1w3Gc}You have kicked {YOUNG_HERO.LINK} from your clan. Your agreement with {QUEST_GIVER.LINK} was terminated.", null);
					StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010CA RID: 4298
			// (get) Token: 0x06004E7F RID: 20095 RVA: 0x0015BCB4 File Offset: 0x00159EB4
			private TextObject PlayerBecameClanLeader
			{
				get
				{
					TextObject textObject = new TextObject("{=JiD05yDw}{YOUNG_HERO.LINK} now becomes the leader of his clan and your agreement with {QUEST_GIVER.LINK} was terminated.", null);
					StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170010CB RID: 4299
			// (get) Token: 0x06004E80 RID: 20096 RVA: 0x0015BD00 File Offset: 0x00159F00
			private TextObject PlayerMarriedYoungHero
			{
				get
				{
					TextObject textObject = new TextObject("{=QGigAhFW}You have married with {YOUNG_HERO.LINK} who is the young noble you agreed to be his tutor. {QUEST_GIVER.LINK} no longer expects you to tutor {YOUNG_HERO.LINK} and wishes you a joyful marriage.", null);
					StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x06004E81 RID: 20097 RVA: 0x0015BD4C File Offset: 0x00159F4C
			public LordsNeedsTutorIssueQuest(string questId, Hero questGiver, Hero youngHero)
				: base(questId, questGiver, CampaignTime.DaysFromNow(200f), 0)
			{
				this._youngHero = youngHero;
				this._firstConversationInitialized = false;
				this._oldSkillValues = new Dictionary<SkillObject, int>();
				this._youngHero.SetHasMet();
				this._randomForQuestReward = MBRandom.RandomInt(2, 5);
				if (this._youngHero.GovernorOf != null)
				{
					ChangeGovernorAction.RemoveGovernorOf(this._youngHero);
				}
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004E82 RID: 20098 RVA: 0x0015BDC1 File Offset: 0x00159FC1
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
				this._targetSkillGain = this._youngHeroBeginningSkillPoints + 30;
			}

			// Token: 0x06004E83 RID: 20099 RVA: 0x0015BDD8 File Offset: 0x00159FD8
			protected override void SetDialogs()
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetYoungHeroFirstDialogFlow(), this);
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetYoungHeroSecondDialogFlow(), this);
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetYoungHeroFailedDialogFlow(), this);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=1WxrzNXx}He'll be delighted. I'll tell him to join you as soon as possible.", null), null, null).Condition(new ConversationSentence.OnConditionDelegate(this.NotableDialogCondition))
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=OoNULWKy}How is the training going? Are you happy with your student?", null), null, null).Condition(new ConversationSentence.OnConditionDelegate(this.NotableDialogCondition))
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += MapEventHelper.OnConversationEnd;
					})
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=jyxo4YgW}Yes, he is a promising boy.", null), null)
					.NpcLine(new TextObject("{=QsL6qcDb}That's very good to hear! Thank you.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=SbbAhpTu}He is yet to prove himself actually.", null), null)
					.NpcLine(new TextObject("{=aHid0t6n}Give him some chance I'm sure he will prove himself soon.", null), null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x06004E84 RID: 20100 RVA: 0x0015BF2A File Offset: 0x0015A12A
			private bool NotableDialogCondition()
			{
				StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, null, false);
				return Hero.OneToOneConversationHero == base.QuestGiver;
			}

			// Token: 0x06004E85 RID: 20101 RVA: 0x0015BF54 File Offset: 0x0015A154
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				AddCompanionAction.Apply(Clan.PlayerClan, this._youngHero);
				MobileParty.MainParty.MemberRoster.AddToCounts(this._youngHero.CharacterObject, 1, false, 0, 0, true, -1);
				this._youngHeroBeginningSkillPoints = this._youngHero.HeroDeveloper.GetTotalSkillPoints();
				this._targetSkillGain = this._youngHeroBeginningSkillPoints + 30;
				TextObject textObject = new TextObject("{=8GbGTDtL}{YOUNG_HERO.LINK}'s experience progress", null);
				StringHelpers.SetCharacterProperties("YOUNG_HERO", this._youngHero.CharacterObject, textObject, false);
				this._startQuestLog = base.AddDiscreteLog(this.PlayerStartsQuestLogText, textObject, this._youngHero.HeroDeveloper.GetTotalSkillPoints() - this._youngHeroBeginningSkillPoints, 30, null, false);
				this._checkForMissionEnd = true;
				foreach (SkillObject skillObject in Skills.All)
				{
					this._oldSkillValues.Add(skillObject, this._youngHero.GetSkillValue(skillObject));
					this._youngHero.HeroDeveloper.AddFocus(skillObject, 1, false);
				}
				LordsNeedsTutorIssueBehavior.SetAlreadyChosenHero(this._youngHero);
			}

			// Token: 0x06004E86 RID: 20102 RVA: 0x0015C08C File Offset: 0x0015A28C
			protected override void RegisterEvents()
			{
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.OnHourlyTick));
				CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, new Action<Hero, Hero, KillCharacterAction.KillCharacterActionDetail, bool>(this.OnHeroKilled));
				CampaignEvents.HeroPrisonerTaken.AddNonSerializedListener(this, new Action<PartyBase, Hero>(this.OnPrisonerTaken));
				CampaignEvents.HeroGainedSkill.AddNonSerializedListener(this, new Action<Hero, SkillObject, int, bool>(this.OnHeroGainedSkill));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.OnClanLeaderChangedEvent.AddNonSerializedListener(this, new Action<Hero, Hero>(this.OnClanLeaderChanged));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.CompanionRemoved.AddNonSerializedListener(this, new Action<Hero, RemoveCompanionAction.RemoveCompanionDetail>(this.OnCompanionRemoved));
				CampaignEvents.HeroesMarried.AddNonSerializedListener(this, new Action<Hero, Hero, bool>(this.OnHeroesMarried));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
				CampaignEvents.SettlementEntered.AddNonSerializedListener(this, new Action<MobileParty, Settlement, Hero>(this.OnSettlementEntered));
				CampaignEvents.OnGameLoadFinishedEvent.AddNonSerializedListener(this, new Action(this.OnGameLoadFinished));
			}

			// Token: 0x06004E87 RID: 20103 RVA: 0x0015C1AD File Offset: 0x0015A3AD
			private void OnGameLoadFinished()
			{
				if (Settlement.CurrentSettlement != null && Settlement.CurrentSettlement.HeroesWithoutParty.Contains(this._youngHero))
				{
					this.SpawnYoungHeroInLordsHall();
				}
			}

			// Token: 0x06004E88 RID: 20104 RVA: 0x0015C1D3 File Offset: 0x0015A3D3
			private void OnSettlementEntered(MobileParty party, Settlement settlement, Hero hero)
			{
				if (party != null && party.IsMainParty && settlement.HeroesWithoutParty.Contains(this._youngHero))
				{
					this.SpawnYoungHeroInLordsHall();
				}
			}

			// Token: 0x06004E89 RID: 20105 RVA: 0x0015C1F9 File Offset: 0x0015A3F9
			public override void OnHeroCanBeSelectedInInventoryInfoIsRequested(Hero hero, ref bool result)
			{
				this.CommonRestrictionInfoIsRequested(hero, ref result);
			}

			// Token: 0x06004E8A RID: 20106 RVA: 0x0015C203 File Offset: 0x0015A403
			public override void OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(Hero hero, ref bool result)
			{
				this.CommonRestrictionInfoIsRequested(hero, ref result);
			}

			// Token: 0x06004E8B RID: 20107 RVA: 0x0015C20D File Offset: 0x0015A40D
			public override void OnHeroCanLeadPartyInfoIsRequested(Hero hero, ref bool result)
			{
				this.CommonRestrictionInfoIsRequested(hero, ref result);
			}

			// Token: 0x06004E8C RID: 20108 RVA: 0x0015C217 File Offset: 0x0015A417
			public override void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
			{
				this.CommonRestrictionInfoIsRequested(hero, ref result);
			}

			// Token: 0x06004E8D RID: 20109 RVA: 0x0015C221 File Offset: 0x0015A421
			public override void OnHeroCanMarryInfoIsRequested(Hero hero, ref bool result)
			{
				this.CommonRestrictionInfoIsRequested(hero, ref result);
			}

			// Token: 0x06004E8E RID: 20110 RVA: 0x0015C22B File Offset: 0x0015A42B
			private void CommonRestrictionInfoIsRequested(Hero hero, ref bool result)
			{
				if (hero == this._youngHero)
				{
					result = false;
				}
			}

			// Token: 0x06004E8F RID: 20111 RVA: 0x0015C239 File Offset: 0x0015A439
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x06004E90 RID: 20112 RVA: 0x0015C24C File Offset: 0x0015A44C
			private void OnHeroesMarried(Hero hero1, Hero hero2, bool showNotification = true)
			{
				if ((hero1 == Hero.MainHero && hero2 == this._youngHero) || (hero2 == Hero.MainHero && hero1 == this._youngHero))
				{
					this._doNotForceYoungHeroOutFromClan = true;
					base.CompleteQuestWithCancel(this.PlayerMarriedYoungHero);
				}
			}

			// Token: 0x06004E91 RID: 20113 RVA: 0x0015C283 File Offset: 0x0015A483
			private void OnClanLeaderChanged(Hero oldLeader, Hero newLeader)
			{
				if (base.IsOngoing && newLeader == this._youngHero)
				{
					base.AddLog(this.PlayerBecameClanLeader, false);
					base.CompleteQuestWithFail(null);
				}
			}

			// Token: 0x06004E92 RID: 20114 RVA: 0x0015C2AB File Offset: 0x0015A4AB
			private void OnCompanionRemoved(Hero companion, RemoveCompanionAction.RemoveCompanionDetail detail)
			{
				if (base.IsOngoing && companion == this._youngHero)
				{
					base.AddLog(this.PlayerKickedYoungHeroFromClan, false);
					base.CompleteQuestWithFail(null);
				}
			}

			// Token: 0x06004E93 RID: 20115 RVA: 0x0015C2D3 File Offset: 0x0015A4D3
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this.WarDeclaredQuestCancel);
				}
			}

			// Token: 0x06004E94 RID: 20116 RVA: 0x0015C2FD File Offset: 0x0015A4FD
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.PlayerDeclaredWarQuestLogText, this.WarDeclaredQuestCancel);
			}

			// Token: 0x06004E95 RID: 20117 RVA: 0x0015C314 File Offset: 0x0015A514
			public void OnHeroGainedSkill(Hero hero, SkillObject skill, int change = 1, bool shouldNotify = true)
			{
				if (hero == this._youngHero)
				{
					int num = MBMath.ClampInt(this._youngHero.HeroDeveloper.GetTotalSkillPoints() - this._youngHeroBeginningSkillPoints, 0, 30);
					this._startQuestLog.UpdateCurrentProgress(num);
					if (this._youngHero.HeroDeveloper.GetTotalSkillPoints() >= this._targetSkillGain)
					{
						this._questCompletedStartConversation = true;
					}
				}
			}

			// Token: 0x06004E96 RID: 20118 RVA: 0x0015C378 File Offset: 0x0015A578
			private void OnPrisonerTaken(PartyBase capturer, Hero prisoner)
			{
				if (prisoner == Hero.MainHero && this._youngHero.IsPlayerCompanion && MobileParty.MainParty.MapEventSide != null)
				{
					if (MobileParty.MainParty.MapEventSide.Parties.First((MapEventParty x) => x.Party == PartyBase.MainParty).Troops.FindIndexOfCharacter(this._youngHero.CharacterObject).IsValid)
					{
						base.AddLog(this.PupilEscapedLogText, false);
						EndCaptivityAction.ApplyByEscape(this._youngHero, null);
					}
				}
			}

			// Token: 0x06004E97 RID: 20119 RVA: 0x0015C415 File Offset: 0x0015A615
			private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification = true)
			{
				if (victim == this._youngHero)
				{
					base.AddLog(this.PupilHasDiedLogText, false);
					this.RelationshipChangeWithQuestGiver = -40;
					base.CompleteQuestWithFail(null);
				}
			}

			// Token: 0x06004E98 RID: 20120 RVA: 0x0015C440 File Offset: 0x0015A640
			public void OnHourlyTick()
			{
				if (base.IsOngoing && !Hero.MainHero.IsPrisoner && Settlement.CurrentSettlement == null && PlayerEncounter.Current == null && MapEvent.PlayerMapEvent == null && this._youngHero.PartyBelongedTo == MobileParty.MainParty && GameStateManager.Current.ActiveState is MapState && ((this._checkForMissionEnd && !this._firstConversationInitialized) || this._questCompletedStartConversation))
				{
					CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter, PartyBase.MainParty, false, false, false, false, false, false), new ConversationCharacterData(this._youngHero.CharacterObject, PartyBase.MainParty, false, false, false, false, false, false));
					if (this._checkForMissionEnd)
					{
						this._checkForMissionEnd = false;
					}
				}
			}

			// Token: 0x06004E99 RID: 20121 RVA: 0x0015C504 File Offset: 0x0015A704
			private void SpawnYoungHeroInLordsHall()
			{
				Monster monsterWithSuffix = FaceGen.GetMonsterWithSuffix(this._youngHero.CharacterObject.Race, "_settlement");
				ValueTuple<string, Monster> valueTuple = new ValueTuple<string, Monster>(ActionSetCode.GenerateActionSetNameWithSuffix(monsterWithSuffix, this._youngHero.CharacterObject.IsFemale, "_lord"), monsterWithSuffix);
				IFaction mapFaction = this._youngHero.MapFaction;
				uint num = ((mapFaction != null) ? mapFaction.Color : 4291609515U);
				IFaction mapFaction2 = this._youngHero.MapFaction;
				uint num2 = ((mapFaction2 != null) ? mapFaction2.Color : 4291609515U);
				AgentData agentData = new AgentData(new SimpleAgentOrigin(this._youngHero.CharacterObject, -1, null, default(UniqueTroopDescriptor))).Monster(valueTuple.Item2).NoHorses(true).ClothingColor1(num)
					.ClothingColor2(num2);
				LocationComplex.Current.GetLocationWithId("lordshall").AddCharacter(new LocationCharacter(agentData, new LocationCharacter.AddBehaviorsDelegate(SandBoxManager.Instance.AgentBehaviorManager.AddFixedCharacterBehaviors), "sp_notable", true, LocationCharacter.CharacterRelations.Neutral, valueTuple.Item1, true, false, null, false, false, true));
			}

			// Token: 0x06004E9A RID: 20122 RVA: 0x0015C60C File Offset: 0x0015A80C
			private DialogFlow GetYoungHeroFirstDialogFlow()
			{
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine(new TextObject("{=XH66Leg5}Greetings, my {?PLAYER.GENDER}lady{?}lord{\\?}. I have heard much of your deeds. Thank you for agreeing to train me. I hope I won't disappoint you.", null), null, null).Condition(() => Hero.OneToOneConversationHero == this._youngHero && !this._firstConversationInitialized)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.FirstConversationEndConsequence;
					})
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=oJJiKTSL}You are welcome.", null), null)
					.NpcLine(new TextObject("{=wlKtDR2z}Thank you, {?PLAYER.GENDER}my lady{?}sir{\\?}.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=FHeJ8bsX}We will see about that.", null), null)
					.NpcLine(new TextObject("{=kc3RfwFb}I'll try to be useful to you, {?PLAYER.GENDER}my lady{?}sir{\\?}.", null), null, null)
					.EndPlayerOptions()
					.PlayerLine(new TextObject("{=kJwpbptU}Well, try to stay close to me at all times and try to learn as much as you can.", null), null)
					.NpcLine(new TextObject("{=EaifHOao}Yes, {?PLAYER.GENDER}my lady{?}sir{\\?}, I will.", null), null, null)
					.CloseDialog();
			}

			// Token: 0x06004E9B RID: 20123 RVA: 0x0015C6D6 File Offset: 0x0015A8D6
			private DialogFlow GetYoungHeroFailedDialogFlow()
			{
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine(new TextObject("{=vbbc6sIU}I regret to tell you that my progress under your tutelage is not satisfactory. I should return to my clan to resume my studies. Thank you for your trouble anyway.", null), null, null).Condition(() => Hero.OneToOneConversationHero == this._youngHero && this._showQuestFailedConversation)
					.CloseDialog();
			}

			// Token: 0x06004E9C RID: 20124 RVA: 0x0015C70C File Offset: 0x0015A90C
			private void FirstConversationEndConsequence()
			{
				this._youngHero.SetHasMet();
				this._firstConversationInitialized = true;
			}

			// Token: 0x06004E9D RID: 20125 RVA: 0x0015C720 File Offset: 0x0015A920
			private DialogFlow GetYoungHeroSecondDialogFlow()
			{
				return DialogFlow.CreateDialogFlow("start", 125).BeginNpcOptions().NpcOption(new TextObject("{=APEBfqyW}Greetings my {?PLAYER.GENDER}lady{?}lord{\\?}. Do you wish something from me?", null), new ConversationSentence.OnConditionDelegate(this.default_conversation_with_young_hero_condition), null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=BO0f1Klt}So - how do you find life in our company? Is it all you expected?.", null), null)
					.NpcLine(new TextObject("{=e3e79n9B}It is all I expected and more, captain. I am glad that you took me with you.", null), null, null)
					.PlayerLine(new TextObject("{=dbG3PGXL}I'm glad you think that way? Combat aside, have you learned anything special?", null), null)
					.NpcLine(new TextObject("{=8L9W34D6}{NPC_EXPERIENCE_LINE}", null), null, null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.npc_experience_line_condition))
					.PlayerLine(new TextObject("{=Rh0DlvvE}I'm glad you see it that way. Go on. Continue your training.", null), null)
					.NpcLine(new TextObject("{=dnvPDnzS}I will my {?PLAYER.GENDER}lady{?}lord{\\?}. Thank you", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=Lk6ln3sR}We got separated but I am happy that I found you. Join me we have to continue your training.", null), null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.PupilJoinMeCondition))
					.NpcLine(new TextObject("{=INn1axcf}Ok captain, thank you.", null), null, null)
					.Consequence(delegate
					{
						MobileParty.MainParty.MemberRoster.AddToCounts(this._youngHero.CharacterObject, 1, false, 0, 0, true, -1);
					})
					.CloseDialog()
					.EndPlayerOptions()
					.NpcOption(new TextObject("{=kUbovNbE}My {?PLAYER.GENDER}lady{?}lord{\\?}. The agreed training time with you is over. I thank you for everything. It's been a very productive for me.", null), new ConversationSentence.OnConditionDelegate(this.quest_finished_conversation_with_young_hero_condition), null, null)
					.PlayerLine(new TextObject("{=bS0bBgp3}I'm happy to hear this. Tell me, what is the most important lesson you've learned from me?", null), null)
					.NpcLine(new TextObject("{=8L9W34D6}{NPC_EXPERIENCE_LINE}", null), null, null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.npc_experience_line_condition))
					.PlayerLine(new TextObject("{=orprhyYl}I'm glad you see it that way. Very well then, off you go. Send my regards to your family. I hope to see you again one day. I am sure you will make an excellent commander.", null), null)
					.NpcLine(new TextObject("{=IBXfCLMp}I certainly hope too {?PLAYER.GENDER}lady{?}lord{\\?}! Again, I want to thank you for everything, before I go, please accept this gift as a humble gratitude.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestCompletedWithSuccessAfterConversation))
					.CloseDialog()
					.EndNpcOptions();
			}

			// Token: 0x06004E9E RID: 20126 RVA: 0x0015C8BF File Offset: 0x0015AABF
			private bool PupilJoinMeCondition()
			{
				return MobileParty.MainParty.MemberRoster.GetTroopRoster().All((TroopRosterElement x) => x.Character != this._youngHero.CharacterObject);
			}

			// Token: 0x06004E9F RID: 20127 RVA: 0x0015C8E4 File Offset: 0x0015AAE4
			private void QuestCompletedWithSuccessAfterConversation()
			{
				this.RelationshipChangeWithQuestGiver = 25;
				ChangeRelationAction.ApplyPlayerRelation(this._youngHero, 15, true, true);
				base.CompleteQuestWithSuccess();
				base.AddLog(this.SuccessQuestLogText, false);
				ItemObject randomElementWithPredicate = Items.All.GetRandomElementWithPredicate((ItemObject x) => x.IsTradeGood && x.ItemCategory == DefaultItemCategories.Jewelry);
				TextObject textObject = new TextObject("{=lWvuM5aj}{GIFT_NUMBER} pieces of {JEWELRY} have been added to your inventory.", null);
				textObject.SetTextVariable("GIFT_NUMBER", this._randomForQuestReward);
				textObject.SetTextVariable("JEWELRY", randomElementWithPredicate.Name);
				MBInformationManager.AddQuickInformation(textObject, 0, null, "");
				MobileParty.MainParty.ItemRoster.AddToCounts(randomElementWithPredicate, this._randomForQuestReward);
				GainRenownAction.Apply(Hero.MainHero, 5f, false);
			}

			// Token: 0x06004EA0 RID: 20128 RVA: 0x0015C9A8 File Offset: 0x0015ABA8
			private bool npc_experience_line_condition()
			{
				List<KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject>> list = new List<KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject>>();
				list.Add(new KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject>(new LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition(this.strength_increased_condition), new TextObject("{=hMiJvlJ5}Yes, Since we last spoke, I've learned a lot about hand-to-hand combat, my {?PLAYER.GENDER}lady{?}lord{\\?}. Correct timing and putting your whole body behind the blow means a lot more than I initially thought.", null)));
				list.Add(new KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject>(new LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition(this.perception_increased_condition), new TextObject("{=TrQzYwVD}Yes, {?PLAYER.GENDER}my lady{?}lord{\\?}. Since we last spoke I had chance to increase my understanding of ranged combat. How to breath, calculate distance, and lead the target if necessary.", null)));
				list.Add(new KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject>(new LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition(this.endurance_increased_condition), new TextObject("{=XF7shG4k}Since we last spoke I've been training vigorously. I feel tougher, much more energetic and alive now.", null)));
				list.Add(new KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject>(new LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition(this.cunning_increased_condition), new TextObject("{=H6l9cm7I}I've been paying attention to your subtler methods, {?PLAYER.GENDER}my lady{?}lord{\\?}, I've been observing that courage and strength in numbers is not enough to win most engagements. You have to be aware of the situation and seize the opportunities when they present themselves.", null)));
				list.Add(new KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject>(new LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition(this.social_increased_condition), new TextObject("{=bNAbWn4E}I've been watching how you deal with different kinds of folk: how to present yourself, how to address people from various walks of life properly, how to inspire greatness to those who trust in you.", null)));
				list.Add(new KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject>(new LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition(this.intelligence_increased_condition), new TextObject("{=9bd0jJD8}I've been studying a lot, {?PLAYER.GENDER}my lady{?}lord{\\?}. The manuscripts I've acquired on the way on various subjects are invaluable. Seeing professionals in action complements the theoretical knowledge I've learned from the manuscripts.", null)));
				MBList<TextObject> mblist = new MBList<TextObject>();
				foreach (KeyValuePair<LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest.ExperienceIncreaseCondition, TextObject> keyValuePair in list)
				{
					if (keyValuePair.Key())
					{
						mblist.Add(keyValuePair.Value);
					}
				}
				if (mblist.Count != 0)
				{
					MBTextManager.SetTextVariable("NPC_EXPERIENCE_LINE", mblist.GetRandomElement<TextObject>(), false);
					return true;
				}
				MBTextManager.SetTextVariable("NPC_EXPERIENCE_LINE", new TextObject("{=XFafAocV}Nothing specific, captain. But I'm paying close attention to everything you do.", null), false);
				return true;
			}

			// Token: 0x06004EA1 RID: 20129 RVA: 0x0015CB14 File Offset: 0x0015AD14
			private bool default_conversation_with_young_hero_condition()
			{
				return Hero.OneToOneConversationHero == this._youngHero && this._firstConversationInitialized && !this._questCompletedStartConversation && !this._showQuestFailedConversation;
			}

			// Token: 0x06004EA2 RID: 20130 RVA: 0x0015CB3E File Offset: 0x0015AD3E
			private bool quest_finished_conversation_with_young_hero_condition()
			{
				return Hero.OneToOneConversationHero == this._youngHero && this._firstConversationInitialized && this._questCompletedStartConversation && !this._showQuestFailedConversation;
			}

			// Token: 0x06004EA3 RID: 20131 RVA: 0x0015CB68 File Offset: 0x0015AD68
			private bool strength_increased_condition()
			{
				int num = 0;
				foreach (KeyValuePair<SkillObject, int> keyValuePair in this._oldSkillValues)
				{
					if (keyValuePair.Key.CharacterAttribute == DefaultCharacterAttributes.Vigor)
					{
						num += this._youngHero.GetSkillValue(keyValuePair.Key) - keyValuePair.Value;
					}
				}
				return num > 15;
			}

			// Token: 0x06004EA4 RID: 20132 RVA: 0x0015CBEC File Offset: 0x0015ADEC
			private bool perception_increased_condition()
			{
				int num = 0;
				foreach (KeyValuePair<SkillObject, int> keyValuePair in this._oldSkillValues)
				{
					if (keyValuePair.Key.CharacterAttribute == DefaultCharacterAttributes.Control)
					{
						num += this._youngHero.GetSkillValue(keyValuePair.Key) - keyValuePair.Value;
					}
				}
				return num > 15;
			}

			// Token: 0x06004EA5 RID: 20133 RVA: 0x0015CC70 File Offset: 0x0015AE70
			private bool endurance_increased_condition()
			{
				int num = 0;
				foreach (KeyValuePair<SkillObject, int> keyValuePair in this._oldSkillValues)
				{
					if (keyValuePair.Key.CharacterAttribute == DefaultCharacterAttributes.Endurance)
					{
						num += this._youngHero.GetSkillValue(keyValuePair.Key) - keyValuePair.Value;
					}
				}
				return num > 15;
			}

			// Token: 0x06004EA6 RID: 20134 RVA: 0x0015CCF4 File Offset: 0x0015AEF4
			private bool cunning_increased_condition()
			{
				int num = 0;
				foreach (KeyValuePair<SkillObject, int> keyValuePair in this._oldSkillValues)
				{
					if (keyValuePair.Key.CharacterAttribute == DefaultCharacterAttributes.Cunning)
					{
						num += this._youngHero.GetSkillValue(keyValuePair.Key) - keyValuePair.Value;
					}
				}
				return num > 15;
			}

			// Token: 0x06004EA7 RID: 20135 RVA: 0x0015CD78 File Offset: 0x0015AF78
			private bool social_increased_condition()
			{
				int num = 0;
				foreach (KeyValuePair<SkillObject, int> keyValuePair in this._oldSkillValues)
				{
					if (keyValuePair.Key.CharacterAttribute == DefaultCharacterAttributes.Social)
					{
						num += this._youngHero.GetSkillValue(keyValuePair.Key) - keyValuePair.Value;
					}
				}
				return num > 15;
			}

			// Token: 0x06004EA8 RID: 20136 RVA: 0x0015CDFC File Offset: 0x0015AFFC
			private bool intelligence_increased_condition()
			{
				int num = 0;
				foreach (KeyValuePair<SkillObject, int> keyValuePair in this._oldSkillValues)
				{
					if (keyValuePair.Key.CharacterAttribute == DefaultCharacterAttributes.Intelligence)
					{
						num += this._youngHero.GetSkillValue(keyValuePair.Key) - keyValuePair.Value;
					}
				}
				return num > 15;
			}

			// Token: 0x06004EA9 RID: 20137 RVA: 0x0015CE80 File Offset: 0x0015B080
			protected override void OnFinalize()
			{
				if (this._youngHero.IsAlive)
				{
					if (this._youngHero.CompanionOf == Clan.PlayerClan)
					{
						RemoveCompanionAction.ApplyAfterQuest(Clan.PlayerClan, this._youngHero);
						if (!this._doNotForceYoungHeroOutFromClan)
						{
							this._youngHero.Clan = base.QuestGiver.Clan;
						}
						foreach (Hero hero in this._youngHero.Children)
						{
							hero.Clan = this._youngHero.Clan;
						}
						if (this._youngHero.Spouse != null)
						{
							this._youngHero.Spouse.Clan = this._youngHero.Clan;
						}
					}
					foreach (SkillObject skillObject in Skills.All)
					{
						this._youngHero.HeroDeveloper.AddFocus(skillObject, -1, false);
					}
				}
			}

			// Token: 0x06004EAA RID: 20138 RVA: 0x0015CFA8 File Offset: 0x0015B1A8
			protected override void OnCompleteWithSuccess()
			{
			}

			// Token: 0x06004EAB RID: 20139 RVA: 0x0015CFAC File Offset: 0x0015B1AC
			protected override void OnTimedOut()
			{
				base.AddLog(this.FailTimedOutQuestLogText, false);
				this.RelationshipChangeWithQuestGiver = -10;
				this._showQuestFailedConversation = true;
				if (Settlement.CurrentSettlement == null && PlayerEncounter.Current == null && MapEvent.PlayerMapEvent == null && GameStateManager.Current.ActiveState is MapState)
				{
					CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter, PartyBase.MainParty, false, false, false, false, false, false), new ConversationCharacterData(this._youngHero.CharacterObject, PartyBase.MainParty, false, false, false, false, false, false));
				}
			}

			// Token: 0x04001A5F RID: 6751
			private const int MinimumSkillGainToComment = 15;

			// Token: 0x04001A60 RID: 6752
			private const int TargetSkillPointDelta = 30;

			// Token: 0x04001A61 RID: 6753
			[SaveableField(10)]
			private Hero _youngHero;

			// Token: 0x04001A62 RID: 6754
			[SaveableField(20)]
			private bool _checkForMissionEnd;

			// Token: 0x04001A63 RID: 6755
			[SaveableField(30)]
			private bool _firstConversationInitialized;

			// Token: 0x04001A64 RID: 6756
			[SaveableField(40)]
			private bool _questCompletedStartConversation;

			// Token: 0x04001A65 RID: 6757
			[SaveableField(50)]
			private int _youngHeroBeginningSkillPoints;

			// Token: 0x04001A66 RID: 6758
			[SaveableField(60)]
			private int _randomForQuestReward;

			// Token: 0x04001A67 RID: 6759
			private int _targetSkillGain;

			// Token: 0x04001A68 RID: 6760
			[SaveableField(70)]
			private Dictionary<SkillObject, int> _oldSkillValues;

			// Token: 0x04001A69 RID: 6761
			private bool _doNotForceYoungHeroOutFromClan;

			// Token: 0x04001A6A RID: 6762
			private bool _showQuestFailedConversation;

			// Token: 0x04001A6B RID: 6763
			[SaveableField(80)]
			private JournalLog _startQuestLog;

			// Token: 0x020007AD RID: 1965
			// (Invoke) Token: 0x0600578A RID: 22410
			private delegate bool ExperienceIncreaseCondition();
		}

		// Token: 0x0200064A RID: 1610
		public class LordsNeedsTutorIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004EB1 RID: 20145 RVA: 0x0015D0BA File Offset: 0x0015B2BA
			public LordsNeedsTutorIssueTypeDefiner()
				: base(80120)
			{
			}

			// Token: 0x06004EB2 RID: 20146 RVA: 0x0015D0C7 File Offset: 0x0015B2C7
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssue), 1, null);
				base.AddClassDefinition(typeof(LordsNeedsTutorIssueBehavior.LordsNeedsTutorIssueQuest), 2, null);
			}
		}
	}
}
