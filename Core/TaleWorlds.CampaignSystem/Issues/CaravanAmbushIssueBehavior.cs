using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000305 RID: 773
	public class CaravanAmbushIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002C9F RID: 11423 RVA: 0x000BA8D6 File Offset: 0x000B8AD6
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002CA0 RID: 11424 RVA: 0x000BA8F0 File Offset: 0x000B8AF0
		private void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Settlement targetSettlement = this.GetTargetSettlement(hero.CurrentSettlement);
				if (targetSettlement != null)
				{
					Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnIssueSelected), typeof(CaravanAmbushIssueBehavior.CaravanAmbushIssue), IssueBase.IssueFrequency.Common, targetSettlement));
				}
			}
		}

		// Token: 0x06002CA1 RID: 11425 RVA: 0x000BA944 File Offset: 0x000B8B44
		private IssueBase OnIssueSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			PotentialIssueData potentialIssueData = pid;
			return new CaravanAmbushIssueBehavior.CaravanAmbushIssue(issueOwner, potentialIssueData.RelatedObject as Settlement);
		}

		// Token: 0x06002CA2 RID: 11426 RVA: 0x000BA96A File Offset: 0x000B8B6A
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver != null && issueGiver.IsNotable && !issueGiver.OwnedCaravans.IsEmpty<CaravanPartyComponent>() && (issueGiver.IsArtisan || issueGiver.IsMerchant);
		}

		// Token: 0x06002CA3 RID: 11427 RVA: 0x000BA998 File Offset: 0x000B8B98
		private Settlement GetTargetSettlement(Settlement currentSettlement)
		{
			IEnumerable<Settlement> enumerable = Settlement.All.Where((Settlement t) => t.IsTown && t != currentSettlement && t.MapFaction != null && !t.MapFaction.IsAtWarWith(currentSettlement.MapFaction) && !t.IsUnderRaid && !t.IsUnderSiege);
			if (!enumerable.Any<Settlement>())
			{
				return null;
			}
			return enumerable.MinBy((Settlement t) => Campaign.Current.Models.MapDistanceModel.GetDistance(t, currentSettlement));
		}

		// Token: 0x06002CA4 RID: 11428 RVA: 0x000BA9E5 File Offset: 0x000B8BE5
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x04000D79 RID: 3449
		private const IssueBase.IssueFrequency CaravanAmbushIssueFrequency = IssueBase.IssueFrequency.Common;

		// Token: 0x0200060D RID: 1549
		public class CaravanAmbushIssue : IssueBase
		{
			// Token: 0x060047F6 RID: 18422 RVA: 0x001423A9 File Offset: 0x001405A9
			internal static void AutoGeneratedStaticCollectObjectsCaravanAmbushIssue(object o, List<object> collectedObjects)
			{
				((CaravanAmbushIssueBehavior.CaravanAmbushIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060047F7 RID: 18423 RVA: 0x001423B7 File Offset: 0x001405B7
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._targetSettlement);
			}

			// Token: 0x060047F8 RID: 18424 RVA: 0x001423CC File Offset: 0x001405CC
			internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssue)o)._targetSettlement;
			}

			// Token: 0x17000E8E RID: 3726
			// (get) Token: 0x060047F9 RID: 18425 RVA: 0x001423D9 File Offset: 0x001405D9
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Casualties | IssueBase.AlternativeSolutionScaleFlag.FailureRisk;
				}
			}

			// Token: 0x17000E8F RID: 3727
			// (get) Token: 0x060047FA RID: 18426 RVA: 0x001423DD File Offset: 0x001405DD
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=kOxu3Lw0}Yes... I run caravans, as you may know. I lose a few to bandits from time to time, but generally my caravans are sufficiently well guarded to scare off the small gangs and move quickly enough to outrun the big ones.The problem is that there's a new bandit chief out there who knows his business, who has outfitted his men with horses and uses proper cavalry tactics.I’ve lost three caravans in a row, and I can’t afford to keep this up for long.", null);
				}
			}

			// Token: 0x17000E90 RID: 3728
			// (get) Token: 0x060047FB RID: 18427 RVA: 0x001423EA File Offset: 0x001405EA
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=aJcChHfj}What are you planning to do about them?", null);
				}
			}

			// Token: 0x17000E91 RID: 3729
			// (get) Token: 0x060047FC RID: 18428 RVA: 0x001423F7 File Offset: 0x001405F7
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(600f + 800f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000E92 RID: 3730
			// (get) Token: 0x060047FD RID: 18429 RVA: 0x0014240C File Offset: 0x0014060C
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=iWWKTOik}I've got a trick up my sleeve. We'll bait them. I've paid some of my workers to spread rumors about a particularly fat caravan laden with silverware heading out towards {TARGET_SETTLEMENT}. It is a trap, of course. I've got a bunch of mercenaries going with it, disguised as packers. But they could use some backup. Go and follow my caravan. Stay at a proper distance, until they are attacked. Then move in to finish the bandits once and for all. My caravan master will pay you {REWARD}{GOLD_ICON} when the fight is over.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000E93 RID: 3731
			// (get) Token: 0x060047FE RID: 18430 RVA: 0x0014245E File Offset: 0x0014065E
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=Ov3b2b8p}I'll help you myself.", null);
				}
			}

			// Token: 0x17000E94 RID: 3732
			// (get) Token: 0x060047FF RID: 18431 RVA: 0x0014246B File Offset: 0x0014066B
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=jiFCxZ4B}In that case you should send a good commander with some {TROOP_COUNT} men, just to be safe. And I'll send them back to you in {RETURN_DAYS} days. ", null);
					textObject.SetTextVariable("TROOP_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			// Token: 0x17000E95 RID: 3733
			// (get) Token: 0x06004800 RID: 18432 RVA: 0x0014249C File Offset: 0x0014069C
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=XLswis9W}I will lend you one of my best lieutenants and {TROOP_COUNT} men.", null);
					textObject.SetTextVariable("TROOP_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			// Token: 0x17000E96 RID: 3734
			// (get) Token: 0x06004801 RID: 18433 RVA: 0x001424CD File Offset: 0x001406CD
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=L3U98ygQ}We're still preparing the ambush. I hope to have your men back to you shortly.", null);
				}
			}

			// Token: 0x17000E97 RID: 3735
			// (get) Token: 0x06004802 RID: 18434 RVA: 0x001424DA File Offset: 0x001406DA
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=Y9LNbRho}Thank you. I will put your men to good use.", null);
				}
			}

			// Token: 0x17000E98 RID: 3736
			// (get) Token: 0x06004803 RID: 18435 RVA: 0x001424E7 File Offset: 0x001406E7
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000E99 RID: 3737
			// (get) Token: 0x06004804 RID: 18436 RVA: 0x001424EA File Offset: 0x001406EA
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=wF7uiYzy}Caravan Ambush", null);
				}
			}

			// Token: 0x17000E9A RID: 3738
			// (get) Token: 0x06004805 RID: 18437 RVA: 0x001424F8 File Offset: 0x001406F8
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=H3B75sYi}A merchant asked you to follow a fake caravan that was sent out as a trap to destroy a particularly large and dangerous group of bandits.", null);
					StringHelpers.SetCharacterProperties("NOTABLE", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E9B RID: 3739
			// (get) Token: 0x06004806 RID: 18438 RVA: 0x0014252C File Offset: 0x0014072C
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=YbZYXRqt}{QUEST_GIVER.LINK} asked you to follow a caravan that he sent out as bait to destroy a particularly large and dangerous group of bandits. You ordered {COMPANION.LINK} and {TROOP_COUNT} of your men to follow the caravan from a safe distance and join in the fight once it is attacked. You expect them to return in {RETURN_DAYS} days with the news of success and {REWARD_GOLD}{GOLD_ICON}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("TROOP_COUNT", this.AlternativeSolutionSentTroops.TotalManCount - 1);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000E9C RID: 3740
			// (get) Token: 0x06004807 RID: 18439 RVA: 0x001425C4 File Offset: 0x001407C4
			public override TextObject IssueAlternativeSolutionSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=PHAm9BIp}{COMPANION.LINK} and the men you sent with {?COMPANION.GENDER}her{?}him{\\?} successfully protected the caravan. {QUEST_GIVER.LINK} is happy and sends you {?QUES_GIVER.GENDER}her{?}him{\\?} regards with {REWARD_GOLD}{GOLD_ICON} he promised.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x17000E9D RID: 3741
			// (get) Token: 0x06004808 RID: 18440 RVA: 0x00142631 File Offset: 0x00140831
			public override TextObject IssuePlayerResponseAfterAlternativeExplanation
			{
				get
				{
					return new TextObject("{=DAYaprEi}Maybe I'll send someone to look.", null);
				}
			}

			// Token: 0x17000E9E RID: 3742
			// (get) Token: 0x06004809 RID: 18441 RVA: 0x0014263E File Offset: 0x0014083E
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17000E9F RID: 3743
			// (get) Token: 0x0600480A RID: 18442 RVA: 0x00142641 File Offset: 0x00140841
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 22 + MathF.Ceiling(30f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000EA0 RID: 3744
			// (get) Token: 0x0600480B RID: 18443 RVA: 0x00142657 File Offset: 0x00140857
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 3 + MathF.Ceiling(5f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000EA1 RID: 3745
			// (get) Token: 0x0600480C RID: 18444 RVA: 0x0014266C File Offset: 0x0014086C
			protected override int RewardGold
			{
				get
				{
					return (int)(1000f + 3000f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x0600480D RID: 18445 RVA: 0x00142681 File Offset: 0x00140881
			public CaravanAmbushIssue(Hero issueOwner, Settlement targetSettlement)
				: base(issueOwner, CampaignTime.DaysFromNow(20f))
			{
				this._targetSettlement = targetSettlement;
			}

			// Token: 0x0600480E RID: 18446 RVA: 0x0014269B File Offset: 0x0014089B
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementProsperity)
				{
					return -0.3f;
				}
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return -1f;
				}
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.2f;
				}
				return 0f;
			}

			// Token: 0x0600480F RID: 18447 RVA: 0x001426CC File Offset: 0x001408CC
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Tactics) >= hero.GetSkillValue(DefaultSkills.Roguery)) ? DefaultSkills.Tactics : DefaultSkills.Roguery, 120);
			}

			// Token: 0x06004810 RID: 18448 RVA: 0x001426F9 File Offset: 0x001408F9
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004811 RID: 18449 RVA: 0x001426FC File Offset: 0x001408FC
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest("caravan_ambush_quest_" + CampaignTime.Now.ElapsedSecondsUntilNow, base.IssueOwner, this._targetSettlement, CampaignTime.DaysFromNow(20f), this.RewardGold, base.IssueDifficultyMultiplier);
			}

			// Token: 0x06004812 RID: 18450 RVA: 0x0014274C File Offset: 0x0014094C
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			// Token: 0x06004813 RID: 18451 RVA: 0x00142750 File Offset: 0x00140950
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				relationHero = issueGiver;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
				}
				if (issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (MobileParty.MainParty.MemberRoster.TotalHealthyCount < 30)
				{
					flag |= IssueBase.PreconditionFlags.NotEnoughTroops;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004814 RID: 18452 RVA: 0x001427BA File Offset: 0x001409BA
			public override bool IssueStayAliveConditions()
			{
				return base.IssueOwner != null && base.IssueOwner.OwnedCaravans.Count > 0 && !base.IssueOwner.MapFaction.IsAtWarWith(Clan.PlayerClan);
			}

			// Token: 0x06004815 RID: 18453 RVA: 0x001427F1 File Offset: 0x001409F1
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004816 RID: 18454 RVA: 0x00142809 File Offset: 0x00140A09
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			// Token: 0x06004817 RID: 18455 RVA: 0x00142817 File Offset: 0x00140A17
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x06004818 RID: 18456 RVA: 0x00142819 File Offset: 0x00140A19
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004819 RID: 18457 RVA: 0x0014283C File Offset: 0x00140A3C
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				base.AlternativeSolutionHero.AddSkillXp(DefaultSkills.Scouting, (float)((int)(600f + 800f * base.IssueDifficultyMultiplier)));
				float randomFloat = MBRandom.RandomFloat;
				SkillObject skillObject;
				if (randomFloat > 0.66f)
				{
					skillObject = DefaultSkills.OneHanded;
				}
				else if (randomFloat <= 0.66f && randomFloat > 0.33f)
				{
					skillObject = DefaultSkills.TwoHanded;
				}
				else
				{
					skillObject = DefaultSkills.Polearm;
				}
				base.AlternativeSolutionHero.AddSkillXp(skillObject, (float)((int)(600f + 800f * base.IssueDifficultyMultiplier)));
				Clan.PlayerClan.AddRenown(3f, true);
				this.RelationshipChangeWithIssueOwner = 5;
			}

			// Token: 0x0600481A RID: 18458 RVA: 0x001428D8 File Offset: 0x00140AD8
			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				this.RelationshipChangeWithIssueOwner = -5;
				base.IssueOwner.AddPower(-5f);
			}

			// Token: 0x04001903 RID: 6403
			private const float CaravanAmbushIssueDurationInDays = 20f;

			// Token: 0x04001904 RID: 6404
			private const int AlternativeSolutionMinimumTroopTier = 2;

			// Token: 0x04001905 RID: 6405
			private const int AlternativeSolutionRenownReward = 3;

			// Token: 0x04001906 RID: 6406
			private const int AlternativeSolutionRelationReward = 5;

			// Token: 0x04001907 RID: 6407
			private const int AlternativeSolutionRelationPenalty = -5;

			// Token: 0x04001908 RID: 6408
			private const int CaravanAmbushIssueNotableMinimumRelation = -10;

			// Token: 0x04001909 RID: 6409
			private const int CompanionSkill = 120;

			// Token: 0x0400190A RID: 6410
			private const int MinimumRequiredMenCount = 30;

			// Token: 0x0400190B RID: 6411
			[SaveableField(1)]
			private readonly Settlement _targetSettlement;
		}

		// Token: 0x0200060E RID: 1550
		public class CaravanAmbushIssueQuest : QuestBase
		{
			// Token: 0x0600481B RID: 18459 RVA: 0x001428F2 File Offset: 0x00140AF2
			internal static void AutoGeneratedStaticCollectObjectsCaravanAmbushIssueQuest(object o, List<object> collectedObjects)
			{
				((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x0600481C RID: 18460 RVA: 0x00142900 File Offset: 0x00140B00
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._targetSettlement);
				collectedObjects.Add(this._caravanParty);
				collectedObjects.Add(this._banditParty);
				collectedObjects.Add(this._rewardItems);
				CampaignTime.AutoGeneratedStaticCollectObjectsCampaignTime(this._vicinityCheckDisabledUntil, collectedObjects);
			}

			// Token: 0x0600481D RID: 18461 RVA: 0x00142955 File Offset: 0x00140B55
			internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._targetSettlement;
			}

			// Token: 0x0600481E RID: 18462 RVA: 0x00142962 File Offset: 0x00140B62
			internal static object AutoGeneratedGetMemberValue_issueDifficulty(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._issueDifficulty;
			}

			// Token: 0x0600481F RID: 18463 RVA: 0x00142974 File Offset: 0x00140B74
			internal static object AutoGeneratedGetMemberValue_caravanParty(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._caravanParty;
			}

			// Token: 0x06004820 RID: 18464 RVA: 0x00142981 File Offset: 0x00140B81
			internal static object AutoGeneratedGetMemberValue_banditParty(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._banditParty;
			}

			// Token: 0x06004821 RID: 18465 RVA: 0x0014298E File Offset: 0x00140B8E
			internal static object AutoGeneratedGetMemberValue_vicinityCheckFailCounter(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._vicinityCheckFailCounter;
			}

			// Token: 0x06004822 RID: 18466 RVA: 0x001429A0 File Offset: 0x00140BA0
			internal static object AutoGeneratedGetMemberValue_rewardItems(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._rewardItems;
			}

			// Token: 0x06004823 RID: 18467 RVA: 0x001429AD File Offset: 0x00140BAD
			internal static object AutoGeneratedGetMemberValue_isCaravanSaved(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._isCaravanSaved;
			}

			// Token: 0x06004824 RID: 18468 RVA: 0x001429BF File Offset: 0x00140BBF
			internal static object AutoGeneratedGetMemberValue_vicinityCheckDisabledUntil(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._vicinityCheckDisabledUntil;
			}

			// Token: 0x06004825 RID: 18469 RVA: 0x001429D1 File Offset: 0x00140BD1
			internal static object AutoGeneratedGetMemberValue_isCaravanWaitingForEscort(object o)
			{
				return ((CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest)o)._isCaravanWaitingForEscort;
			}

			// Token: 0x17000EA2 RID: 3746
			// (get) Token: 0x06004826 RID: 18470 RVA: 0x001429E3 File Offset: 0x00140BE3
			private int CaravanPartyTroopCount
			{
				get
				{
					return 22 + MathF.Ceiling(30f * this._issueDifficulty);
				}
			}

			// Token: 0x17000EA3 RID: 3747
			// (get) Token: 0x06004827 RID: 18471 RVA: 0x001429F9 File Offset: 0x00140BF9
			private int BanditPartyTroopCount
			{
				get
				{
					return 25 + MathF.Ceiling(50f * this._issueDifficulty);
				}
			}

			// Token: 0x17000EA4 RID: 3748
			// (get) Token: 0x06004828 RID: 18472 RVA: 0x00142A0F File Offset: 0x00140C0F
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=wF7uiYzy}Caravan Ambush", null);
				}
			}

			// Token: 0x17000EA5 RID: 3749
			// (get) Token: 0x06004829 RID: 18473 RVA: 0x00142A1C File Offset: 0x00140C1C
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000EA6 RID: 3750
			// (get) Token: 0x0600482A RID: 18474 RVA: 0x00142A20 File Offset: 0x00140C20
			private TextObject _caravanAmbushIssueQuestActivatedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=S4kpdrgw}{QUEST_GIVER.LINK}, {?IS_ARTISAN}an artisan{?}a merchant{\\?} from {SETTLEMENT}, asked you to follow a fake caravan that was bait for a particularly large and dangerous group of bandits. {?QUEST_GIVER.GENDER}She{?}He{\\?} suspects this fake caravan will be attacked on its way to {TARGET_SETTLEMENT}, so {?QUEST_GIVER.GENDER}she{?}he{\\?} wants you to follow the caravan from a safe distance and join in the fight once it is attacked. If you succeed, {?QUEST_GIVER.GENDER}she{?}he{\\?} promised to pay you {REWARD_GOLD}{GOLD_ICON}. ", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("IS_ARTISAN", base.QuestGiver.IsArtisan ? 1 : 0);
					textObject.SetTextVariable("SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000EA7 RID: 3751
			// (get) Token: 0x0600482B RID: 18475 RVA: 0x00142AC8 File Offset: 0x00140CC8
			private TextObject _caravanAmbushIssueQuestSucceededLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=g5bRX0dd}You have defeated the large group of bandits that {QUEST_GIVER.LINK} mentioned and {?QUEST_GIVER.GENDER}she{?}he{\\?} sends {?QUEST_GIVER.GENDER}her{?}his{\\?} regards with the {REWARD_GOLD}{GOLD_ICON} {?QUEST_GIVER.GENDER}she{?}he{\\?} promised and some trade goods as reward.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000EA8 RID: 3752
			// (get) Token: 0x0600482C RID: 18476 RVA: 0x00142B20 File Offset: 0x00140D20
			private TextObject _caravanAmbushIssueQuestVicinityCheckFailedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=DbXMSRmA}You got too close to the caravan. The bandits saw you and withdrew. {QUEST_GIVER.LINK}'s plan failed and {?QUEST_GIVER.GENDER}she{?}he{\\?} will be very upset.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000EA9 RID: 3753
			// (get) Token: 0x0600482D RID: 18477 RVA: 0x00142B54 File Offset: 0x00140D54
			private TextObject _caravanAmbushIssueQuestCaravanDestroyedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=WtCSdcs9}You have failed to defeat the bandits, as {QUEST_GIVER.LINK} asked you to do.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000EAA RID: 3754
			// (get) Token: 0x0600482E RID: 18478 RVA: 0x00142B88 File Offset: 0x00140D88
			private TextObject _caravanAmbushIssueQuestTimeOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=qi0wKvPX}You failed to catch up to the caravan before it was overwhelmed. {QUEST_GIVER.LINK} will be very upset about this.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000EAB RID: 3755
			// (get) Token: 0x0600482F RID: 18479 RVA: 0x00142BBC File Offset: 0x00140DBC
			private TextObject _caravanSurvivedWithoutHelpLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=UFce0iyy}The caravan survived the battle without your help. You failed to keep your promise to {QUEST_GIVER.LINK}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000EAC RID: 3756
			// (get) Token: 0x06004830 RID: 18480 RVA: 0x00142BF0 File Offset: 0x00140DF0
			private TextObject _caravanAmbushIssueQuestHiredBanditsLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bdab7SmZ}You recruited the bandits who were giving {QUEST_GIVER.LINK} trouble. {?QUEST_GIVER.GENDER}she{?}he{\\?} is satisfied with this outcome, and sends you {REWARD_GOLD}{GOLD_ICON} that {?QUEST_GIVER.GENDER}she{?}he{\\?} promised.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000EAD RID: 3757
			// (get) Token: 0x06004831 RID: 18481 RVA: 0x00142C45 File Offset: 0x00140E45
			private TextObject _caravanAmbushWarDeclaredCancelLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=dQl0Bnwm}Your clan is now at war with the {QUEST_GIVER.LINK}'s faction. Your agreement with {QUEST_GIVER.LINK} has been canceled.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x06004832 RID: 18482 RVA: 0x00142C69 File Offset: 0x00140E69
			public CaravanAmbushIssueQuest(string questId, Hero questGiver, Settlement targetSettlement, CampaignTime duration, int rewardGold, float issueDifficulty)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._targetSettlement = targetSettlement;
				this._issueDifficulty = issueDifficulty;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004833 RID: 18483 RVA: 0x00142CA0 File Offset: 0x00140EA0
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine("{=1sbbbOyr}Excellent... I'm counting on you! The caravan will be leaving soon.", null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.OnQuestAccepted))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine("{=5o9udV96}Yes? You should go already. The caravan is on its way.", null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver && !this._isCaravanSaved)
					.BeginPlayerOptions()
					.PlayerOption("{=DKiLA9f2}Don't worry, I'll find them.", null)
					.NpcLine("{=ddEu5IFQ}I hope so.", null, null)
					.CloseDialog()
					.PlayerOption("{=zpqP5LsC}I'll go right away.", null)
					.NpcLine("{=3ssQAe1t}Good to hear that", null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetCaravaneerDialogFlow(), this);
			}

			// Token: 0x06004834 RID: 18484 RVA: 0x00142D80 File Offset: 0x00140F80
			private DialogFlow GetCaravaneerDialogFlow()
			{
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine("{=LqEdr7sQ}Thank you, {?PLAYER.GENDER}milady{?}sir{\\?}. {QUEST_GIVER.LINK} had informed me that help would be on the way. We needed it, I think. Those were a pretty tough lot.", null, null).Condition(delegate
				{
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, null, false);
					return CharacterObject.OneToOneConversationCharacter == ConversationHelper.GetConversationCharacterPartyLeader(this._caravanParty.Party) && this._isCaravanSaved;
				})
					.PlayerLine("{=MKbLhn9d}I'm glad we caught up to you in time.", null)
					.NpcLine("{=yxg91L0a}We'll tell everyone what you did. Please take some of these goods in compensation. We have no intention to sell them anyway. Safe travels, {?PLAYER.GENDER}milady{?}sir{\\?}.", null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.OnQuestSucceeded;
					})
					.CloseDialog();
			}

			// Token: 0x06004835 RID: 18485 RVA: 0x00142DE4 File Offset: 0x00140FE4
			private void OnQuestAccepted()
			{
				base.StartQuest();
				base.AddLog(this._caravanAmbushIssueQuestActivatedLogText, false);
				ItemRoster itemRoster = new ItemRoster();
				itemRoster.AddToCounts(MBObjectManager.Instance.GetObject<ItemObject>("fish"), 20);
				itemRoster.AddToCounts(MBObjectManager.Instance.GetObject<ItemObject>("grain"), 40);
				itemRoster.AddToCounts(MBObjectManager.Instance.GetObject<ItemObject>("butter"), 20);
				itemRoster.AddToCounts(DefaultItems.HardWood, 60);
				this._caravanParty = CaravanPartyComponent.CreateCaravanParty(base.QuestGiver, base.QuestGiver.CurrentSettlement, false, null, itemRoster, 0, false);
				this._caravanParty.MemberRoster.Clear();
				this._caravanParty.MemberRoster.AddToCounts(base.QuestGiver.Culture.CaravanMaster, 1, false, 0, 0, true, -1);
				this._caravanParty.MemberRoster.AddToCounts(base.QuestGiver.Culture.BasicTroop, this.CaravanPartyTroopCount, false, 0, 0, true, -1);
				this._caravanParty.IgnoreByOtherPartiesTill(base.QuestDueTime);
				Campaign.Current.MobilePartyLocator.UpdateLocator(this._caravanParty);
				SetPartyAiAction.GetActionForVisitingSettlement(this._caravanParty, this._targetSettlement);
				this._caravanParty.Ai.SetDoNotMakeNewDecisions(true);
				this._caravanParty.SetPartyUsedByQuest(true);
				base.AddTrackedObject(this._caravanParty);
				MobilePartyHelper.TryMatchPartySpeedWithItemWeight(this._caravanParty, MobileParty.MainParty.Speed * 0.7f, null);
				Settlement closestHideout = SettlementHelper.FindNearestHideout((Settlement x) => x.IsActive, null);
				Clan clan = Clan.BanditFactions.FirstOrDefault((Clan t) => t.Culture == closestHideout.Culture);
				this._banditParty = BanditPartyComponent.CreateBanditParty("caravan_ambush_quest_" + clan.Name, clan, closestHideout.Hideout, false);
				Vec2 gatePosition = this._targetSettlement.GatePosition;
				PartyTemplateObject partyTemplateObject = Campaign.Current.ObjectManager.GetObject<PartyTemplateObject>("kingdom_hero_party_caravan_ambushers") ?? clan.DefaultPartyTemplate;
				this._banditParty.InitializeMobilePartyAroundPosition(partyTemplateObject, gatePosition, 0.2f, 0.1f, -1);
				this._banditParty.SetCustomName(clan.Name);
				Campaign.Current.MobilePartyLocator.UpdateLocator(this._banditParty);
				this._banditParty.MemberRoster.Clear();
				this._banditParty.SetPartyUsedByQuest(true);
				for (int i = 0; i < this.BanditPartyTroopCount; i++)
				{
					List<ValueTuple<PartyTemplateStack, float>> list = new List<ValueTuple<PartyTemplateStack, float>>();
					foreach (PartyTemplateStack partyTemplateStack in partyTemplateObject.Stacks)
					{
						list.Add(new ValueTuple<PartyTemplateStack, float>(partyTemplateStack, (float)(64 - partyTemplateStack.Character.Level)));
					}
					PartyTemplateStack partyTemplateStack2 = MBRandom.ChooseWeighted<PartyTemplateStack>(list);
					this._banditParty.MemberRoster.AddToCounts(partyTemplateStack2.Character, 1, false, 0, 0, true, -1);
				}
				this._banditParty.ItemRoster.AddToCounts(MBObjectManager.Instance.GetObject<ItemObject>("sumpter_horse"), this.BanditPartyTroopCount / 4);
				this._banditParty.IgnoreByOtherPartiesTill(base.QuestDueTime);
				SetPartyAiAction.GetActionForEngagingParty(this._banditParty, this._caravanParty);
				this._banditParty.Ai.SetDoNotMakeNewDecisions(true);
				for (int j = 0; j < 3; j++)
				{
					this._rewardItems.Add(Items.All.GetRandomElementWithPredicate((ItemObject t) => t.IsTradeGood && !t.NotMerchandise));
				}
				this._vicinityCheckDisabledUntil = CampaignTime.HoursFromNow(1f);
			}

			// Token: 0x06004836 RID: 18486 RVA: 0x001431B4 File Offset: 0x001413B4
			private void OnQuestSucceeded()
			{
				base.AddLog(this._caravanAmbushIssueQuestSucceededLogText, false);
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				this.RelationshipChangeWithQuestGiver = 5;
				Clan.PlayerClan.AddRenown(3f, true);
				foreach (ItemObject itemObject in this._rewardItems)
				{
					MobileParty.MainParty.ItemRoster.AddToCounts(itemObject, 1);
				}
				if (PlayerEncounter.Current != null)
				{
					PlayerEncounter.LeaveEncounter = true;
				}
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004837 RID: 18487 RVA: 0x0014325C File Offset: 0x0014145C
			private void OnPlayerHiredBandits()
			{
				base.AddLog(this._caravanAmbushIssueQuestHiredBanditsLogText, false);
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				this.RelationshipChangeWithQuestGiver = 5;
				Clan.PlayerClan.AddRenown(3f, true);
				if (PlayerEncounter.Current != null)
				{
					PlayerEncounter.LeaveEncounter = true;
				}
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004838 RID: 18488 RVA: 0x001432B4 File Offset: 0x001414B4
			private void HourlyTick()
			{
				if (this._caravanParty != null && base.IsOngoing)
				{
					if (this._caravanParty.MapEvent == null && !this._isCaravanSaved)
					{
						if (this._caravanParty.Position2D.DistanceSquared(base.QuestGiver.CurrentSettlement.GatePosition) >= 100f && this._caravanParty.Position2D.DistanceSquared(MobileParty.MainParty.Position2D) <= 9f && this._vicinityCheckDisabledUntil.IsPast)
						{
							MBInformationManager.AddQuickInformation(new TextObject("{=ki1CWgcP}Warning! You are too close to the caravan. Stay a bit farther away.", null), 0, null, "");
							this._vicinityCheckFailCounter++;
							if (this._vicinityCheckFailCounter >= 5)
							{
								this.OnFailedVicinityChecks();
							}
						}
						MobilePartyHelper.UtilizePartyEscortBehavior(this._caravanParty, MobileParty.MainParty, ref this._isCaravanWaitingForEscort, 6.3f, 7.1f, new MobilePartyHelper.ResumePartyEscortBehaviorDelegate(this.ResumeCaravanMovement), false);
						if (this._caravanParty.Position2D.DistanceSquared(this._banditParty.Position2D) <= 7f)
						{
							EncounterManager.StartPartyEncounter(this._banditParty.Party, this._caravanParty.Party);
						}
					}
					if (this._caravanParty.MapEvent != null && this._caravanParty.MapEvent.IsInvulnerable && this._caravanParty.MapEvent.BattleStartTime.ElapsedHoursUntilNow > 6f)
					{
						this._caravanParty.MapEvent.IsInvulnerable = false;
					}
				}
			}

			// Token: 0x06004839 RID: 18489 RVA: 0x0014343D File Offset: 0x0014163D
			private void ResumeCaravanMovement()
			{
				SetPartyAiAction.GetActionForVisitingSettlement(this._caravanParty, this._targetSettlement);
			}

			// Token: 0x0600483A RID: 18490 RVA: 0x00143450 File Offset: 0x00141650
			private void OnFailedVicinityChecks()
			{
				base.AddLog(this._caravanAmbushIssueQuestVicinityCheckFailedLogText, false);
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-5f);
				this.HandlePartyAiAfterCompletion();
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x0600483B RID: 18491 RVA: 0x00143485 File Offset: 0x00141685
			protected override void OnTimedOut()
			{
				base.AddLog(this._caravanAmbushIssueQuestTimeOutLogText, false);
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-5f);
			}

			// Token: 0x0600483C RID: 18492 RVA: 0x001434B0 File Offset: 0x001416B0
			private void OnSettlementEntered(MobileParty party, Settlement settlement, Hero hero)
			{
				if (party == this._caravanParty)
				{
					Debug.FailedAssert("Caravan has arrived at settlement without encountering the bandits", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Issues\\CaravanAmbushIssueBehavior.cs", "OnSettlementEntered", 697);
					DestroyPartyAction.Apply(this._caravanParty.Party, this._caravanParty);
					this._caravanParty = null;
					this._banditParty.Ai.SetDoNotMakeNewDecisions(false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x0600483D RID: 18493 RVA: 0x00143514 File Offset: 0x00141714
			protected override void RegisterEvents()
			{
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.HourlyTick));
				CampaignEvents.MapEventEnded.AddNonSerializedListener(this, new Action<MapEvent>(this.MapEventEnded));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.MapEventStarted));
				CampaignEvents.SettlementEntered.AddNonSerializedListener(this, new Action<MobileParty, Settlement, Hero>(this.OnSettlementEntered));
				CampaignEvents.BanditPartyRecruited.AddNonSerializedListener(this, new Action<MobileParty>(this.OnBanditPartyRecruited));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
			}

			// Token: 0x0600483E RID: 18494 RVA: 0x001435C2 File Offset: 0x001417C2
			private void OnBanditPartyRecruited(MobileParty party)
			{
				if (party == this._banditParty)
				{
					this.OnPlayerHiredBandits();
				}
			}

			// Token: 0x0600483F RID: 18495 RVA: 0x001435D3 File Offset: 0x001417D3
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail declareWarDetail)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Clan.PlayerClan.MapFaction))
				{
					base.CompleteQuestWithCancel(this._caravanAmbushWarDeclaredCancelLogText);
				}
			}

			// Token: 0x06004840 RID: 18496 RVA: 0x00143604 File Offset: 0x00141804
			private void MapEventEnded(MapEvent mapEvent)
			{
				if (mapEvent.WinningSide != BattleSideEnum.None && mapEvent.DefeatedSide != BattleSideEnum.None)
				{
					MapEventSide mapEventSide = mapEvent.GetMapEventSide(mapEvent.WinningSide);
					MapEventSide mapEventSide2 = mapEvent.GetMapEventSide(mapEvent.DefeatedSide);
					if (mapEventSide2.Parties.Any((MapEventParty t) => t.Party == this._caravanParty.Party))
					{
						this.HandlePartyAiAfterCompletion();
						this.OnCaravanDestroyed(mapEventSide.LeaderParty);
						return;
					}
					if (mapEventSide2.Parties.Any((MapEventParty t) => t.Party == this._banditParty.Party))
					{
						this._isCaravanSaved = true;
						this.HandlePartyAiAfterCompletion();
						if (mapEventSide.IsMainPartyAmongParties())
						{
							if (this._caravanParty.IsActive && mapEventSide.Parties.Any((MapEventParty t) => t.Party == this._caravanParty.Party))
							{
								CampaignMapConversation.OpenConversation(new ConversationCharacterData(Hero.MainHero.CharacterObject, null, false, false, false, false, false, false), new ConversationCharacterData(ConversationHelper.GetConversationCharacterPartyLeader(this._caravanParty.Party), null, false, false, false, false, false, false));
								return;
							}
							this.OnQuestSucceeded();
							return;
						}
						else
						{
							this.OnCaravanSurvivedWithoutHelp();
						}
					}
				}
			}

			// Token: 0x06004841 RID: 18497 RVA: 0x0014370B File Offset: 0x0014190B
			private void OnWarDeclared(IFaction faction1, IFaction faction2)
			{
				this.CheckFailureDueToDiplomaticState();
			}

			// Token: 0x06004842 RID: 18498 RVA: 0x00143713 File Offset: 0x00141913
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (clan == Clan.PlayerClan && newKingdom != null)
				{
					this.CheckFailureDueToDiplomaticState();
				}
			}

			// Token: 0x06004843 RID: 18499 RVA: 0x00143726 File Offset: 0x00141926
			private void CheckFailureDueToDiplomaticState()
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Clan.PlayerClan.MapFaction))
				{
					base.CompleteQuestWithCancel(this._caravanAmbushWarDeclaredCancelLogText);
				}
			}

			// Token: 0x06004844 RID: 18500 RVA: 0x00143755 File Offset: 0x00141955
			private void MapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (defenderParty.MobileParty == this._caravanParty && attackerParty.MobileParty == this._banditParty)
				{
					mapEvent.IsInvulnerable = true;
				}
			}

			// Token: 0x06004845 RID: 18501 RVA: 0x0014377A File Offset: 0x0014197A
			private void OnCaravanSurvivedWithoutHelp()
			{
				base.AddLog(this._caravanSurvivedWithoutHelpLogText, false);
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, -5, true, true);
				base.QuestGiver.AddPower(-5f);
				this.HandlePartyAiAfterCompletion();
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004846 RID: 18502 RVA: 0x001437B8 File Offset: 0x001419B8
			private void OnCaravanDestroyed(PartyBase destroyerParty)
			{
				base.AddLog(this._caravanAmbushIssueQuestCaravanDestroyedLogText, false);
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-5f);
				if (this._caravanParty.MapEvent != null)
				{
					this._caravanParty.MapEvent.IsInvulnerable = false;
				}
				this._caravanParty = null;
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004847 RID: 18503 RVA: 0x00143818 File Offset: 0x00141A18
			private void HandlePartyAiAfterCompletion()
			{
				if (this._caravanParty.IsActive)
				{
					this._caravanParty.Ai.SetDoNotMakeNewDecisions(false);
					SetPartyAiAction.GetActionForVisitingSettlement(this._caravanParty, this._targetSettlement);
				}
				if (this._banditParty.IsActive)
				{
					this._banditParty.Ai.SetDoNotMakeNewDecisions(false);
					SetPartyAiAction.GetActionForVisitingSettlement(this._banditParty, this._banditParty.HomeSettlement);
					return;
				}
				this._banditParty = null;
			}

			// Token: 0x06004848 RID: 18504 RVA: 0x00143890 File Offset: 0x00141A90
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
				MobileParty caravanParty = this._caravanParty;
				if (caravanParty != null)
				{
					caravanParty.SetPartyUsedByQuest(true);
				}
				MobileParty banditParty = this._banditParty;
				if (banditParty == null)
				{
					return;
				}
				banditParty.SetPartyUsedByQuest(true);
			}

			// Token: 0x0400190C RID: 6412
			private const int VicinityCheckFailedRelationPenalty = -5;

			// Token: 0x0400190D RID: 6413
			private const int VicinityCheckFailedPowerPenalty = -5;

			// Token: 0x0400190E RID: 6414
			private const int CaravanDestroyedRelationPenalty = -5;

			// Token: 0x0400190F RID: 6415
			private const int CaravanDestroyedPowerPenalty = -5;

			// Token: 0x04001910 RID: 6416
			private const int TimeoutRelationPenalty = -5;

			// Token: 0x04001911 RID: 6417
			private const int TimeoutPowerPenalty = -5;

			// Token: 0x04001912 RID: 6418
			private const int QuestSucceededRelationReward = 5;

			// Token: 0x04001913 RID: 6419
			private const int QuestSucceededRenownReward = 3;

			// Token: 0x04001914 RID: 6420
			private const float VicinityCheckDistanceSquared = 9f;

			// Token: 0x04001915 RID: 6421
			private const int VicinityCheckFailThreshold = 5;

			// Token: 0x04001916 RID: 6422
			private const float CaravanWaitOnMapDurationInHours = 2f;

			// Token: 0x04001917 RID: 6423
			private const float CaravanWaitOnMapPeriodInHours = 6f;

			// Token: 0x04001918 RID: 6424
			private const int NumberOfRandomRewardItems = 3;

			// Token: 0x04001919 RID: 6425
			private const float MapEventInvulnerabilityDurationInHours = 6f;

			// Token: 0x0400191A RID: 6426
			private const float CaravanMainPartySpeedRatio = 0.7f;

			// Token: 0x0400191B RID: 6427
			private const float PartyEscortOuterRadius = 7.1f;

			// Token: 0x0400191C RID: 6428
			private const float PartyEscortInnerRadius = 6.3f;

			// Token: 0x0400191D RID: 6429
			[SaveableField(1)]
			private readonly Settlement _targetSettlement;

			// Token: 0x0400191E RID: 6430
			[SaveableField(2)]
			private readonly float _issueDifficulty;

			// Token: 0x0400191F RID: 6431
			[SaveableField(3)]
			private MobileParty _caravanParty;

			// Token: 0x04001920 RID: 6432
			[SaveableField(4)]
			private MobileParty _banditParty;

			// Token: 0x04001921 RID: 6433
			[SaveableField(5)]
			private int _vicinityCheckFailCounter;

			// Token: 0x04001922 RID: 6434
			[SaveableField(6)]
			private List<ItemObject> _rewardItems = new List<ItemObject>();

			// Token: 0x04001923 RID: 6435
			[SaveableField(7)]
			private bool _isCaravanSaved;

			// Token: 0x04001924 RID: 6436
			[SaveableField(8)]
			private CampaignTime _vicinityCheckDisabledUntil;

			// Token: 0x04001925 RID: 6437
			[SaveableField(10)]
			private bool _isCaravanWaitingForEscort;
		}

		// Token: 0x0200060F RID: 1551
		public class CaravanAmbushIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004850 RID: 18512 RVA: 0x00143979 File Offset: 0x00141B79
			public CaravanAmbushIssueTypeDefiner()
				: base(380000)
			{
			}

			// Token: 0x06004851 RID: 18513 RVA: 0x00143986 File Offset: 0x00141B86
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(CaravanAmbushIssueBehavior.CaravanAmbushIssue), 1, null);
				base.AddClassDefinition(typeof(CaravanAmbushIssueBehavior.CaravanAmbushIssueQuest), 2, null);
			}
		}
	}
}
