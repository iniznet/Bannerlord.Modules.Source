using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000300 RID: 768
	public class ArmyNeedsSuppliesIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002C77 RID: 11383 RVA: 0x000BA07F File Offset: 0x000B827F
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002C78 RID: 11384 RVA: 0x000BA098 File Offset: 0x000B8298
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002C79 RID: 11385 RVA: 0x000BA0FC File Offset: 0x000B82FC
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.IsLord && issueGiver.PartyBelongedTo != null && issueGiver.PartyBelongedTo.Army != null && issueGiver.PartyBelongedTo.Army.ArmyOwner == issueGiver && issueGiver.PartyBelongedTo.Army.Cohesion > 80f;
		}

		// Token: 0x06002C7A RID: 11386 RVA: 0x000BA152 File Offset: 0x000B8352
		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			return new ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssue(issueOwner);
		}

		// Token: 0x06002C7B RID: 11387 RVA: 0x000BA15A File Offset: 0x000B835A
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x04000D6C RID: 3436
		private const IssueBase.IssueFrequency ArmyNeedsSuppliesIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x04000D6D RID: 3437
		private const float QuestDurationInDays = 15f;

		// Token: 0x020005F7 RID: 1527
		public class ArmyNeedsSuppliesIssue : IssueBase
		{
			// Token: 0x06004645 RID: 17989 RVA: 0x0013C5EF File Offset: 0x0013A7EF
			internal static void AutoGeneratedStaticCollectObjectsArmyNeedsSuppliesIssue(object o, List<object> collectedObjects)
			{
				((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004646 RID: 17990 RVA: 0x0013C5FD File Offset: 0x0013A7FD
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004647 RID: 17991 RVA: 0x0013C606 File Offset: 0x0013A806
			internal static object AutoGeneratedGetMemberValueNumberOfManInArmy(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssue)o).NumberOfManInArmy;
			}

			// Token: 0x17000E01 RID: 3585
			// (get) Token: 0x06004648 RID: 17992 RVA: 0x0013C618 File Offset: 0x0013A818
			private int GrainAmount
			{
				get
				{
					return MathF.Ceiling((float)(this.NumberOfManInArmy / 20) * 5f);
				}
			}

			// Token: 0x17000E02 RID: 3586
			// (get) Token: 0x06004649 RID: 17993 RVA: 0x0013C62F File Offset: 0x0013A82F
			private int LiveStockAmount
			{
				get
				{
					return MathF.Ceiling((float)(this.NumberOfManInArmy / 20) * 0.5f);
				}
			}

			// Token: 0x17000E03 RID: 3587
			// (get) Token: 0x0600464A RID: 17994 RVA: 0x0013C646 File Offset: 0x0013A846
			private int WineAmount
			{
				get
				{
					return MathF.Ceiling((float)(this.NumberOfManInArmy / 20) * 0.5f);
				}
			}

			// Token: 0x17000E04 RID: 3588
			// (get) Token: 0x0600464B RID: 17995 RVA: 0x0013C65D File Offset: 0x0013A85D
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000E05 RID: 3589
			// (get) Token: 0x0600464C RID: 17996 RVA: 0x0013C660 File Offset: 0x0013A860
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000E06 RID: 3590
			// (get) Token: 0x0600464D RID: 17997 RVA: 0x0013C663 File Offset: 0x0013A863
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=BW7v0g6q}We are about to go on campaign but my quartermaster reports that our food supplies will not be enough to keep us in the field for very long. I can't spare any of my lords, so I need someone else to bring us a large amount of supplies as soon as possible. Can you do this?", null);
				}
			}

			// Token: 0x17000E07 RID: 3591
			// (get) Token: 0x0600464E RID: 17998 RVA: 0x0013C670 File Offset: 0x0013A870
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=YaZc08oa}I can bring supplies, your {?QUEST_GIVER.GENDER}ladyship{?}lordship{\\?}. Just tell me what you need.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E08 RID: 3592
			// (get) Token: 0x0600464F RID: 17999 RVA: 0x0013C6A4 File Offset: 0x0013A8A4
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=444rcko0}We need {GRAIN_AMOUNT} sacks of grain to meet our basic needs. And if you can find {LIVESTOCK_AMOUNT} live stocks and {WINE_AMOUNT} barrels of wine that would be a great favor. Men fight better after a good meal.", null);
					textObject.SetTextVariable("GRAIN_AMOUNT", this.GrainAmount);
					textObject.SetTextVariable("LIVESTOCK_AMOUNT", this.LiveStockAmount);
					textObject.SetTextVariable("WINE_AMOUNT", this.WineAmount);
					return textObject;
				}
			}

			// Token: 0x17000E09 RID: 3593
			// (get) Token: 0x06004650 RID: 18000 RVA: 0x0013C6F4 File Offset: 0x0013A8F4
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=ppO0hoT6}I'll deliver {GRAIN_AMOUNT} sacks of grain as soon as possible {?QUEST_GIVER.GENDER}lady{?}sir{\\?}, and try to find some livestock and wine as you requested.", null);
					textObject.SetTextVariable("GRAIN_AMOUNT", this.GrainAmount);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E0A RID: 3594
			// (get) Token: 0x06004651 RID: 18001 RVA: 0x0013C738 File Offset: 0x0013A938
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=wVyqTlpS}Army Needs Supply", null);
				}
			}

			// Token: 0x17000E0B RID: 3595
			// (get) Token: 0x06004652 RID: 18002 RVA: 0x0013C745 File Offset: 0x0013A945
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=iMq7M0bo}{QUEST_GIVER.LINK} asks you to provide them supplies for their military campaign.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, null, false);
					return textObject;
				}
			}

			// Token: 0x06004653 RID: 18003 RVA: 0x0013C76A File Offset: 0x0013A96A
			public ArmyNeedsSuppliesIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(15f))
			{
				this.NumberOfManInArmy = base.IssueOwner.PartyBelongedTo.Army.TotalRegularCount;
			}

			// Token: 0x06004654 RID: 18004 RVA: 0x0013C798 File Offset: 0x0013A998
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004655 RID: 18005 RVA: 0x0013C79A File Offset: 0x0013A99A
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(15f), this.RewardGold, this.GrainAmount, this.LiveStockAmount, this.WineAmount);
			}

			// Token: 0x06004656 RID: 18006 RVA: 0x0013C7CA File Offset: 0x0013A9CA
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x06004657 RID: 18007 RVA: 0x0013C7D0 File Offset: 0x0013A9D0
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flags, out Hero relationHero, out SkillObject skill)
			{
				relationHero = null;
				skill = null;
				flags = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flags |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (Hero.MainHero.MapFaction.IsKingdomFaction && Hero.MainHero.IsFactionLeader)
				{
					flags |= IssueBase.PreconditionFlags.MainHeroIsKingdomLeader;
				}
				if (issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flags |= IssueBase.PreconditionFlags.AtWar;
				}
				if (Clan.PlayerClan.Tier < 1)
				{
					flags |= IssueBase.PreconditionFlags.ClanTier;
				}
				if (Clan.PlayerClan.Kingdom != issueGiver.MapFaction)
				{
					flags |= IssueBase.PreconditionFlags.NotInSameFaction;
				}
				return flags == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004658 RID: 18008 RVA: 0x0013C87A File Offset: 0x0013AA7A
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.ClanInfluence)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x06004659 RID: 18009 RVA: 0x0013C890 File Offset: 0x0013AA90
			public override bool IssueStayAliveConditions()
			{
				if (base.IssueOwner.PartyBelongedTo != null && base.IssueOwner.PartyBelongedTo.Army != null && base.IssueOwner.PartyBelongedTo.Army.ArmyOwner == base.IssueOwner && base.IssueOwner.PartyBelongedTo.Army.Cohesion > 40f && base.IssueOwner.Clan != Clan.PlayerClan)
				{
					this.NumberOfManInArmy = base.IssueOwner.PartyBelongedTo.Army.TotalRegularCount;
					return true;
				}
				return false;
			}

			// Token: 0x0600465A RID: 18010 RVA: 0x0013C92D File Offset: 0x0013AB2D
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x040018AE RID: 6318
			[SaveableField(70)]
			private int NumberOfManInArmy;
		}

		// Token: 0x020005F8 RID: 1528
		public class ArmyNeedsSuppliesIssueQuest : QuestBase
		{
			// Token: 0x0600465B RID: 18011 RVA: 0x0013C92F File Offset: 0x0013AB2F
			internal static void AutoGeneratedStaticCollectObjectsArmyNeedsSuppliesIssueQuest(object o, List<object> collectedObjects)
			{
				((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x0600465C RID: 18012 RVA: 0x0013C93D File Offset: 0x0013AB3D
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._grainLog);
				collectedObjects.Add(this._liveStockLog);
				collectedObjects.Add(this._wineLog);
			}

			// Token: 0x0600465D RID: 18013 RVA: 0x0013C96A File Offset: 0x0013AB6A
			internal static object AutoGeneratedGetMemberValue_requestedGrainAmount(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._requestedGrainAmount;
			}

			// Token: 0x0600465E RID: 18014 RVA: 0x0013C97C File Offset: 0x0013AB7C
			internal static object AutoGeneratedGetMemberValue_requestedLiveStockAmount(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._requestedLiveStockAmount;
			}

			// Token: 0x0600465F RID: 18015 RVA: 0x0013C98E File Offset: 0x0013AB8E
			internal static object AutoGeneratedGetMemberValue_requestedWineAmount(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._requestedWineAmount;
			}

			// Token: 0x06004660 RID: 18016 RVA: 0x0013C9A0 File Offset: 0x0013ABA0
			internal static object AutoGeneratedGetMemberValue_currentGrainAmount(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._currentGrainAmount;
			}

			// Token: 0x06004661 RID: 18017 RVA: 0x0013C9B2 File Offset: 0x0013ABB2
			internal static object AutoGeneratedGetMemberValue_currentLiveStockAmount(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._currentLiveStockAmount;
			}

			// Token: 0x06004662 RID: 18018 RVA: 0x0013C9C4 File Offset: 0x0013ABC4
			internal static object AutoGeneratedGetMemberValue_currentWineAmount(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._currentWineAmount;
			}

			// Token: 0x06004663 RID: 18019 RVA: 0x0013C9D6 File Offset: 0x0013ABD6
			internal static object AutoGeneratedGetMemberValue_grainLog(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._grainLog;
			}

			// Token: 0x06004664 RID: 18020 RVA: 0x0013C9E3 File Offset: 0x0013ABE3
			internal static object AutoGeneratedGetMemberValue_liveStockLog(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._liveStockLog;
			}

			// Token: 0x06004665 RID: 18021 RVA: 0x0013C9F0 File Offset: 0x0013ABF0
			internal static object AutoGeneratedGetMemberValue_wineLog(object o)
			{
				return ((ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest)o)._wineLog;
			}

			// Token: 0x17000E0C RID: 3596
			// (get) Token: 0x06004666 RID: 18022 RVA: 0x0013C9FD File Offset: 0x0013ABFD
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000E0D RID: 3597
			// (get) Token: 0x06004667 RID: 18023 RVA: 0x0013CA00 File Offset: 0x0013AC00
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=wVyqTlpS}Army Needs Supply", null);
				}
			}

			// Token: 0x17000E0E RID: 3598
			// (get) Token: 0x06004668 RID: 18024 RVA: 0x0013CA10 File Offset: 0x0013AC10
			private TextObject _playerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=GiaTh92Q}{QUEST_GIVER.LINK}, the army commander of the {QUEST_GIVER_FACTION} has told you that they need food supplies for their upcoming military campaign. {?QUEST_GIVER.GENDER}She{?}He{\\?} wanted you to deliver {GRAIN_AMOUNT} sacks of grain and although it's not necessary, to provide {LIVESTOCK_AMOUNT} live stocks and {WINE_AMOUNT} barrels of wine {?QUEST_GIVER.GENDER}she{?}he{\\?} would appreciate it.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_FACTION", base.QuestGiver.MapFaction.EncyclopediaLinkWithName);
					textObject.SetTextVariable("GRAIN_AMOUNT", this._requestedGrainAmount);
					textObject.SetTextVariable("LIVESTOCK_AMOUNT", this._requestedLiveStockAmount);
					textObject.SetTextVariable("WINE_AMOUNT", this._requestedWineAmount);
					return textObject;
				}
			}

			// Token: 0x17000E0F RID: 3599
			// (get) Token: 0x06004669 RID: 18025 RVA: 0x0013CA94 File Offset: 0x0013AC94
			private TextObject _successQuestLogText
			{
				get
				{
					return new TextObject("{=z9pbB0K5}You have successfully delivered the supplies as requested.", null);
				}
			}

			// Token: 0x17000E10 RID: 3600
			// (get) Token: 0x0600466A RID: 18026 RVA: 0x0013CAA1 File Offset: 0x0013ACA1
			private TextObject _failQuestLogText
			{
				get
				{
					return new TextObject("{=k5HJ3Ld6}You have failed to deliver the supplies in time.", null);
				}
			}

			// Token: 0x17000E11 RID: 3601
			// (get) Token: 0x0600466B RID: 18027 RVA: 0x0013CAB0 File Offset: 0x0013ACB0
			private TextObject _questCanceledWarDeclaredLog
			{
				get
				{
					TextObject textObject = new TextObject("{=vW6kBki9}Your clan is now at war with {QUEST_GIVER.LINK}'s realm. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000E12 RID: 3602
			// (get) Token: 0x0600466C RID: 18028 RVA: 0x0013CAE4 File Offset: 0x0013ACE4
			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x0600466D RID: 18029 RVA: 0x0013CB16 File Offset: 0x0013AD16
			public ArmyNeedsSuppliesIssueQuest(string questId, Hero questGiver, CampaignTime duration, int rewardGold, int grainAmount, int liveStockAmount, int wineAmount)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._requestedGrainAmount = grainAmount;
				this._requestedLiveStockAmount = liveStockAmount;
				this._requestedWineAmount = wineAmount;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x0600466E RID: 18030 RVA: 0x0013CB47 File Offset: 0x0013AD47
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x0600466F RID: 18031 RVA: 0x0013CB50 File Offset: 0x0013AD50
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=64RFlBFr}Very well. Don't worry, all your expenses will be covered. ", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=bGbSbqTG}Have you brought our supplies?", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(delegate
					{
						this.CalculateAndUpdateRequestedItemsCountInPlayer(false);
					})
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=FmjZfigu}Yes commander, I have brought your grain, livestock and wine as you requested.", null), null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.CheckIfPlayerCollectedEverything))
					.NpcLine(new TextObject("{=UjS8JnH5}Splendid. I will never forget your service, my friend.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.CollectedEverythingConsequence))
					.CloseDialog()
					.PlayerOption(new TextObject("{=ISOHhXxW}Yes commander, I have brought your grain and wine as you requested.", null), null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.CheckIfPlayerCollectedGrainWine))
					.NpcLine(new TextObject("{=1atg831t}Thank you. Your service will be remembered.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.CollectedGrainAndWineConsequence))
					.CloseDialog()
					.PlayerOption(new TextObject("{=YbsVaZkb}Yes commander, I have brought your grain and livestock as you requested.", null), null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.CheckIfPlayerCollectedGrainLiveStock))
					.NpcLine(new TextObject("{=1atg831t}Thank you. Your service will be remembered.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.CollectedGrainAndLiveStockConsequence))
					.CloseDialog()
					.PlayerOption(new TextObject("{=m9a3ZalO}Yes commander, I have brought your grain as you requested.", null), null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.CheckIfPlayerCollectedGrain))
					.NpcLine(new TextObject("{=1atg831t}Thank you. Your service will be remembered.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.CollectedGrainConsequence))
					.CloseDialog()
					.PlayerOption(new TextObject("{=PAbVhuKi}Not yet commander. I'm still working on it.", null), null)
					.NpcLine(new TextObject("{=AV5xVGM5}Good. We need them as soon as possible.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(MapEventHelper.OnConversationEnd))
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x06004670 RID: 18032 RVA: 0x0013CD60 File Offset: 0x0013AF60
			private void CollectedGrainConsequence()
			{
				GainRenownAction.Apply(Hero.MainHero, 2f, false);
				GainKingdomInfluenceAction.ApplyForGivingFood(Hero.MainHero, base.QuestGiver, 5f);
				this.RelationshipChangeWithQuestGiver = 2;
				int num = DefaultItems.Grain.Value * this._requestedGrainAmount;
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num, false);
				MobileParty.MainParty.ItemRoster.AddToCounts(DefaultItems.Grain, -this._requestedGrainAmount);
				base.QuestGiver.PartyBelongedTo.ItemRoster.AddToCounts(DefaultItems.Grain, this._requestedGrainAmount);
				base.CompleteQuestWithSuccess();
				MapEventHelper.OnConversationEnd();
			}

			// Token: 0x06004671 RID: 18033 RVA: 0x0013CE00 File Offset: 0x0013B000
			private void CollectedGrainAndLiveStockConsequence()
			{
				GainRenownAction.Apply(Hero.MainHero, 2f, false);
				GainKingdomInfluenceAction.ApplyForGivingFood(Hero.MainHero, base.QuestGiver, 5f);
				this.RelationshipChangeWithQuestGiver = 3;
				int num = DefaultItems.Grain.Value * this._requestedGrainAmount;
				num += MBObjectManager.Instance.GetObject<ItemObject>("sheep").Value * this._requestedLiveStockAmount;
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num, false);
				MobileParty.MainParty.ItemRoster.AddToCounts(DefaultItems.Grain, -this._requestedGrainAmount);
				base.QuestGiver.PartyBelongedTo.ItemRoster.AddToCounts(DefaultItems.Grain, this._requestedGrainAmount);
				this.RemoveLiveStocksFromPlayer();
				base.CompleteQuestWithSuccess();
				MapEventHelper.OnConversationEnd();
			}

			// Token: 0x06004672 RID: 18034 RVA: 0x0013CEC4 File Offset: 0x0013B0C4
			private void CollectedGrainAndWineConsequence()
			{
				GainRenownAction.Apply(Hero.MainHero, 2f, false);
				GainKingdomInfluenceAction.ApplyForGivingFood(Hero.MainHero, base.QuestGiver, 5f);
				this.RelationshipChangeWithQuestGiver = 4;
				int num = DefaultItems.Grain.Value * this._requestedGrainAmount;
				num += MBObjectManager.Instance.GetObject<ItemObject>("wine").Value * this._requestedLiveStockAmount;
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num, false);
				MobileParty.MainParty.ItemRoster.AddToCounts(DefaultItems.Grain, -this._requestedGrainAmount);
				base.QuestGiver.PartyBelongedTo.ItemRoster.AddToCounts(DefaultItems.Grain, this._requestedGrainAmount);
				ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>("wine");
				MobileParty.MainParty.ItemRoster.AddToCounts(@object, -this._requestedWineAmount);
				base.QuestGiver.PartyBelongedTo.ItemRoster.AddToCounts(@object, this._requestedWineAmount);
				base.CompleteQuestWithSuccess();
				MapEventHelper.OnConversationEnd();
			}

			// Token: 0x06004673 RID: 18035 RVA: 0x0013CFC8 File Offset: 0x0013B1C8
			private void CollectedEverythingConsequence()
			{
				GainRenownAction.Apply(Hero.MainHero, 2f, false);
				GainKingdomInfluenceAction.ApplyForGivingFood(Hero.MainHero, base.QuestGiver, 8f);
				this.RelationshipChangeWithQuestGiver = 6;
				int num = DefaultItems.Grain.Value * this._requestedGrainAmount;
				num += MBObjectManager.Instance.GetObject<ItemObject>("wine").Value * this._requestedLiveStockAmount;
				num += MBObjectManager.Instance.GetObject<ItemObject>("sheep").Value * this._requestedLiveStockAmount;
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num, false);
				MobileParty.MainParty.ItemRoster.AddToCounts(DefaultItems.Grain, -this._requestedGrainAmount);
				base.QuestGiver.PartyBelongedTo.ItemRoster.AddToCounts(DefaultItems.Grain, this._requestedGrainAmount);
				ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>("wine");
				MobileParty.MainParty.ItemRoster.AddToCounts(@object, -this._requestedWineAmount);
				base.QuestGiver.PartyBelongedTo.ItemRoster.AddToCounts(@object, this._requestedWineAmount);
				this.RemoveLiveStocksFromPlayer();
				base.CompleteQuestWithSuccess();
				MapEventHelper.OnConversationEnd();
			}

			// Token: 0x06004674 RID: 18036 RVA: 0x0013D0F0 File Offset: 0x0013B2F0
			private void RemoveLiveStocksFromPlayer()
			{
				int i = this._requestedLiveStockAmount;
				while (i > 0)
				{
					for (int j = 0; j < MobileParty.MainParty.ItemRoster.Count; j++)
					{
						ItemRosterElement itemRosterElement = MobileParty.MainParty.ItemRoster[j];
						if (!itemRosterElement.IsEmpty)
						{
							ItemObject item = itemRosterElement.EquipmentElement.Item;
							if (item.HasHorseComponent && item.HorseComponent.IsLiveStock)
							{
								if (i < itemRosterElement.Amount)
								{
									MobileParty.MainParty.ItemRoster.AddToCounts(item, -i);
									i = 0;
									break;
								}
								MobileParty.MainParty.ItemRoster.AddToCounts(item, -itemRosterElement.Amount);
								i -= itemRosterElement.Amount;
							}
						}
					}
				}
				base.QuestGiver.PartyBelongedTo.ItemRoster.AddToCounts(MBObjectManager.Instance.GetObject<ItemObject>("meat"), this._requestedLiveStockAmount * 2);
			}

			// Token: 0x06004675 RID: 18037 RVA: 0x0013D1E3 File Offset: 0x0013B3E3
			private bool CheckIfPlayerCollectedGrain()
			{
				return this._currentGrainAmount >= this._requestedGrainAmount;
			}

			// Token: 0x06004676 RID: 18038 RVA: 0x0013D1F6 File Offset: 0x0013B3F6
			private bool CheckIfPlayerCollectedGrainLiveStock()
			{
				return this._currentGrainAmount >= this._requestedGrainAmount && this._currentLiveStockAmount >= this._requestedLiveStockAmount;
			}

			// Token: 0x06004677 RID: 18039 RVA: 0x0013D219 File Offset: 0x0013B419
			private bool CheckIfPlayerCollectedGrainWine()
			{
				return this._currentGrainAmount >= this._requestedGrainAmount && this._currentWineAmount >= this._requestedWineAmount;
			}

			// Token: 0x06004678 RID: 18040 RVA: 0x0013D23C File Offset: 0x0013B43C
			private bool CheckIfPlayerCollectedEverything()
			{
				return this._currentGrainAmount >= this._requestedGrainAmount && this._currentWineAmount >= this._requestedWineAmount && this._currentLiveStockAmount >= this._requestedLiveStockAmount;
			}

			// Token: 0x06004679 RID: 18041 RVA: 0x0013D270 File Offset: 0x0013B470
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddLog(this._playerStartsQuestLogText, false);
				this.CalculateAndUpdateRequestedItemsCountInPlayer(true);
				this._grainLog = base.AddDiscreteLog(TextObject.Empty, new TextObject("{=yGxjOnYb}Collected Grain Amount", null), this._currentGrainAmount, this._requestedGrainAmount, null, false);
				this._liveStockLog = base.AddDiscreteLog(TextObject.Empty, new TextObject("{=aIxX2s8n}Collected Livestock Amount (Optional)", null), this._currentLiveStockAmount, this._requestedLiveStockAmount, null, false);
				this._wineLog = base.AddDiscreteLog(TextObject.Empty, new TextObject("{=ENS8Ig1o}Collected Wine Amount (Optional)", null), this._currentWineAmount, this._requestedWineAmount, null, false);
			}

			// Token: 0x0600467A RID: 18042 RVA: 0x0013D318 File Offset: 0x0013B518
			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.OnInventoryExchange));
				CampaignEvents.ArmyDispersed.AddNonSerializedListener(this, new Action<Army, Army.ArmyDispersionReason, bool>(this.OnArmyDispersed));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
			}

			// Token: 0x0600467B RID: 18043 RVA: 0x0013D384 File Offset: 0x0013B584
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (clan == Clan.PlayerClan && oldKingdom == base.QuestGiver.MapFaction)
				{
					TextObject textObject = new TextObject("{=aQVdW6aC}You have left {QUEST_GIVER_FACTION}. Your agreement with {QUEST_GIVER.LINK} is terminated.", null);
					textObject.SetTextVariable("QUEST_GIVER_FACTION", base.QuestGiver.MapFaction.EncyclopediaLinkWithName);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					base.CompleteQuestWithCancel(textObject);
					return;
				}
				if (base.QuestGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this._questCanceledWarDeclaredLog);
				}
			}

			// Token: 0x0600467C RID: 18044 RVA: 0x0013D417 File Offset: 0x0013B617
			private void OnArmyDispersed(Army army, Army.ArmyDispersionReason reason, bool isPlayersArmy)
			{
				if (army.ArmyOwner == base.QuestGiver)
				{
					base.AddLog(new TextObject("{=K2gsZOMb}Army is disbanded and your mission was canceled.", null), false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x0600467D RID: 18045 RVA: 0x0013D441 File Offset: 0x0013B641
			private void OnInventoryExchange(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
			{
				this.CalculateAndUpdateRequestedItemsCountInPlayer(true);
			}

			// Token: 0x0600467E RID: 18046 RVA: 0x0013D44C File Offset: 0x0013B64C
			private void CalculateAndUpdateRequestedItemsCountInPlayer(bool notifyPlayer = true)
			{
				ItemObject grain = DefaultItems.Grain;
				ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>("wine");
				this._currentGrainAmount = MobileParty.MainParty.ItemRoster.GetItemNumber(grain);
				this._currentLiveStockAmount = MobileParty.MainParty.ItemRoster.NumberOfLivestockAnimals;
				this._currentWineAmount = MobileParty.MainParty.ItemRoster.GetItemNumber(@object);
				if (notifyPlayer)
				{
					if (this._currentGrainAmount >= this._requestedGrainAmount && this._currentLiveStockAmount >= this._requestedLiveStockAmount && this._currentWineAmount >= this._requestedWineAmount)
					{
						MBInformationManager.AddQuickInformation(new TextObject("{=uEV6kKdU}You have collected all the supplies that the army commander requested. Return to army and deliver the supplies", null), 0, null, "");
					}
					else if (this._currentGrainAmount >= this._requestedGrainAmount)
					{
						MBInformationManager.AddQuickInformation(new TextObject("{=8XpTvx1i}You have collected enough grains that the army commander requested. Return to army and deliver the supplies", null), 0, null, "");
					}
				}
				this._currentGrainAmount = (int)MathF.Clamp((float)this._currentGrainAmount, 0f, (float)this._requestedGrainAmount);
				this._currentLiveStockAmount = (int)MathF.Clamp((float)this._currentLiveStockAmount, 0f, (float)this._requestedLiveStockAmount);
				this._currentWineAmount = (int)MathF.Clamp((float)this._currentWineAmount, 0f, (float)this._requestedWineAmount);
				JournalLog grainLog = this._grainLog;
				if (grainLog != null)
				{
					grainLog.UpdateCurrentProgress(this._currentGrainAmount);
				}
				JournalLog liveStockLog = this._liveStockLog;
				if (liveStockLog != null)
				{
					liveStockLog.UpdateCurrentProgress(this._currentLiveStockAmount);
				}
				JournalLog wineLog = this._wineLog;
				if (wineLog == null)
				{
					return;
				}
				wineLog.UpdateCurrentProgress(this._currentWineAmount);
			}

			// Token: 0x0600467F RID: 18047 RVA: 0x0013D5BC File Offset: 0x0013B7BC
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._questCanceledWarDeclaredLog);
			}

			// Token: 0x06004680 RID: 18048 RVA: 0x0013D5D3 File Offset: 0x0013B7D3
			public override void OnFailed()
			{
				this.RelationshipChangeWithQuestGiver = -2;
			}

			// Token: 0x06004681 RID: 18049 RVA: 0x0013D5DD File Offset: 0x0013B7DD
			protected override void OnCompleteWithSuccess()
			{
				base.AddLog(this._successQuestLogText, false);
			}

			// Token: 0x06004682 RID: 18050 RVA: 0x0013D5ED File Offset: 0x0013B7ED
			protected override void OnTimedOut()
			{
				this.OnFailed();
				base.AddLog(this._failQuestLogText, false);
			}

			// Token: 0x06004683 RID: 18051 RVA: 0x0013D603 File Offset: 0x0013B803
			public override void OnCanceled()
			{
			}

			// Token: 0x040018AF RID: 6319
			[SaveableField(10)]
			private int _requestedGrainAmount;

			// Token: 0x040018B0 RID: 6320
			[SaveableField(20)]
			private int _requestedLiveStockAmount;

			// Token: 0x040018B1 RID: 6321
			[SaveableField(30)]
			private int _requestedWineAmount;

			// Token: 0x040018B2 RID: 6322
			[SaveableField(40)]
			private int _currentGrainAmount;

			// Token: 0x040018B3 RID: 6323
			[SaveableField(50)]
			private int _currentLiveStockAmount;

			// Token: 0x040018B4 RID: 6324
			[SaveableField(60)]
			private int _currentWineAmount;

			// Token: 0x040018B5 RID: 6325
			[SaveableField(70)]
			private JournalLog _grainLog;

			// Token: 0x040018B6 RID: 6326
			[SaveableField(80)]
			private JournalLog _liveStockLog;

			// Token: 0x040018B7 RID: 6327
			[SaveableField(90)]
			private JournalLog _wineLog;
		}

		// Token: 0x020005F9 RID: 1529
		public class ArmyNeedsSuppliesIssueTypeDefiner : CampaignBehaviorBase.SaveableCampaignBehaviorTypeDefiner
		{
			// Token: 0x06004687 RID: 18055 RVA: 0x0013D62C File Offset: 0x0013B82C
			public ArmyNeedsSuppliesIssueTypeDefiner()
				: base(585800)
			{
			}

			// Token: 0x06004688 RID: 18056 RVA: 0x0013D639 File Offset: 0x0013B839
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssue), 1, null);
				base.AddClassDefinition(typeof(ArmyNeedsSuppliesIssueBehavior.ArmyNeedsSuppliesIssueQuest), 2, null);
			}
		}
	}
}
