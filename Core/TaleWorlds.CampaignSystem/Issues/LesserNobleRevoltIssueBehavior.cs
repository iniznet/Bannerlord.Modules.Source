using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Conversation.Persuasion;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000314 RID: 788
	public class LesserNobleRevoltIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D08 RID: 11528 RVA: 0x000BBDD4 File Offset: 0x000B9FD4
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D09 RID: 11529 RVA: 0x000BBDED File Offset: 0x000B9FED
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002D0A RID: 11530 RVA: 0x000BBDEF File Offset: 0x000B9FEF
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.IsLord && !issueGiver.IsFactionLeader && issueGiver.Clan != null && issueGiver.Clan.Fiefs.Count >= 3;
		}

		// Token: 0x06002D0B RID: 11531 RVA: 0x000BBE24 File Offset: 0x000BA024
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssue), IssueBase.IssueFrequency.Rare, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssue), IssueBase.IssueFrequency.Rare));
		}

		// Token: 0x06002D0C RID: 11532 RVA: 0x000BBE88 File Offset: 0x000BA088
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssue(issueOwner);
		}

		// Token: 0x06002D0D RID: 11533 RVA: 0x000BBE90 File Offset: 0x000BA090
		private static TextObject GetLesserNobleTitle(Hero questGiver)
		{
			string stringId = questGiver.Culture.StringId;
			if (stringId == "sturgia")
			{
				return new TextObject("{=k1Xr4rKn}Druzhinnik", null);
			}
			if (stringId == "vlandia")
			{
				return new TextObject("{=WtEoXblx}Knight", null);
			}
			if (stringId == "battania")
			{
				return new TextObject("{=8Kx17LDS}Fian", null);
			}
			if (stringId == "empire")
			{
				return new TextObject("{=5qRuGS2P}Equite", null);
			}
			if (stringId == "khuzait")
			{
				return new TextObject("{=ZaIBcQxa}Kheshig", null);
			}
			if (!(stringId == "aserai"))
			{
				return null;
			}
			return new TextObject("{=1UBNuatk}Faris", null);
		}

		// Token: 0x04000D93 RID: 3475
		private const IssueBase.IssueFrequency LesserNobleRevoltIssueIssueFrequency = IssueBase.IssueFrequency.Rare;

		// Token: 0x0200063F RID: 1599
		public class LesserNobleRevoltIssue : IssueBase
		{
			// Token: 0x06004D3F RID: 19775 RVA: 0x00157241 File Offset: 0x00155441
			internal static void AutoGeneratedStaticCollectObjectsLesserNobleRevoltIssue(object o, List<object> collectedObjects)
			{
				((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004D40 RID: 19776 RVA: 0x0015724F File Offset: 0x0015544F
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._lesserNobleName);
			}

			// Token: 0x06004D41 RID: 19777 RVA: 0x00157264 File Offset: 0x00155464
			internal static object AutoGeneratedGetMemberValue_lesserNobleName(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssue)o)._lesserNobleName;
			}

			// Token: 0x1700105B RID: 4187
			// (get) Token: 0x06004D42 RID: 19778 RVA: 0x00157271 File Offset: 0x00155471
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Casualties | IssueBase.AlternativeSolutionScaleFlag.FailureRisk;
				}
			}

			// Token: 0x1700105C RID: 4188
			// (get) Token: 0x06004D43 RID: 19779 RVA: 0x00157275 File Offset: 0x00155475
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return (int)(26f + 34f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x1700105D RID: 4189
			// (get) Token: 0x06004D44 RID: 19780 RVA: 0x0015728A File Offset: 0x0015548A
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return (int)(7f + 13f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x1700105E RID: 4190
			// (get) Token: 0x06004D45 RID: 19781 RVA: 0x0015729F File Offset: 0x0015549F
			protected override int RewardGold
			{
				get
				{
					return 150 * base.IssueOwner.RandomIntWithSeed((uint)this.IssueCreationTime.ElapsedDaysUntilNow, 30, 60);
				}
			}

			// Token: 0x1700105F RID: 4191
			// (get) Token: 0x06004D46 RID: 19782 RVA: 0x001572C2 File Offset: 0x001554C2
			private TextObject LesserNobleTitle
			{
				get
				{
					return LesserNobleRevoltIssueBehavior.GetLesserNobleTitle(base.IssueOwner);
				}
			}

			// Token: 0x17001060 RID: 4192
			// (get) Token: 0x06004D47 RID: 19783 RVA: 0x001572CF File Offset: 0x001554CF
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=BbqzSmHG}Yes... As you know, the wars this realm has fought have been very costly. The great lords in particular are hard-put to raise the armies that are key to this land's defense. Some of us have proposed increasing the hearth taxes paid by the peasantry, which is a key source of revenue. I don't know if this law will be approved, but rumors of it have gotten out in my district, and a lot of the farmers are restless. Now, most of us are doing their part to keep a lid on things. But there's one, {MALE_LESSER_NOBLE_NAME}, who I am ashamed to say was once a {TOP_TIER_CAV_TITLE} under my banner, who's been going around the countryside, stirring up trouble. He's gathered a following and they have a whole list of demands, including a ban on new taxes, that would frankly cripple our realm's ability to raise the money needed to defend itself. I'd take care of him myself, but that wouldn't look good. Maybe you can help?", null);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					textObject.SetTextVariable("TOP_TIER_CAV_TITLE", this.LesserNobleTitle);
					return textObject;
				}
			}

			// Token: 0x17001061 RID: 4193
			// (get) Token: 0x06004D48 RID: 19784 RVA: 0x00157300 File Offset: 0x00155500
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=8m8wIhZW}Maybe. What do you need exactly?", null);
				}
			}

			// Token: 0x17001062 RID: 4194
			// (get) Token: 0x06004D49 RID: 19785 RVA: 0x0015730D File Offset: 0x0015550D
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=muFvSMrb}His band has been going about from village to village. Find him and stop him. You can tell him he's guilty of sedition, and if he doesn't disperse, then you can use force.", null);
				}
			}

			// Token: 0x17001063 RID: 4195
			// (get) Token: 0x06004D4A RID: 19786 RVA: 0x0015731A File Offset: 0x0015551A
			public override TextObject IssuePlayerResponseAfterAlternativeExplanation
			{
				get
				{
					return new TextObject("{=sMCN7eCp}Is there any other way to solve this problem?", null);
				}
			}

			// Token: 0x17001064 RID: 4196
			// (get) Token: 0x06004D4B RID: 19787 RVA: 0x00157327 File Offset: 0x00155527
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=bbXFwya1}Not that I can think of. But if you don't want to do it, you can nominate someone from your party. It's not going to be easy, though. Whoever you name should be a good leader and have a good knowledge of tactics, and should take along at least {ALTERNATIVE_SOLUTION_NEEDED_MAN_COUNT} men. I'm ready to pay {REWARD}{GOLD_ICON} for your service. And if it comes to a fight, you can take whatever loot you want as spoils of war.", null);
					textObject.SetTextVariable("ALTERNATIVE_SOLUTION_NEEDED_MAN_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("REWARD", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x17001065 RID: 4197
			// (get) Token: 0x06004D4C RID: 19788 RVA: 0x00157358 File Offset: 0x00155558
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=a9pK8pyq}I'll find them and put a stop to what they're doing.", null);
				}
			}

			// Token: 0x17001066 RID: 4198
			// (get) Token: 0x06004D4D RID: 19789 RVA: 0x00157365 File Offset: 0x00155565
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=hmaZ6Snq}Don't worry. I will send my best men to deal with this.", null);
				}
			}

			// Token: 0x17001067 RID: 4199
			// (get) Token: 0x06004D4E RID: 19790 RVA: 0x00157372 File Offset: 0x00155572
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=yLqDHZv9}Thank you. I hope your men deal with them as soon as possible.", null);
				}
			}

			// Token: 0x17001068 RID: 4200
			// (get) Token: 0x06004D4F RID: 19791 RVA: 0x0015737F File Offset: 0x0015557F
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17001069 RID: 4201
			// (get) Token: 0x06004D50 RID: 19792 RVA: 0x00157382 File Offset: 0x00155582
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x1700106A RID: 4202
			// (get) Token: 0x06004D51 RID: 19793 RVA: 0x00157388 File Offset: 0x00155588
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=fhAsNPoE}{ISSUE_GIVER.LINK}, lord of {SETTLEMENT}, says that a {MALE_LESSER_NOBLE_TITLE} named {MALE_LESSER_NOBLE_NAME} is stirring up unrest in the countryside. You asked your companion to deal with {MALE_LESSER_NOBLE_NAME}'s band. They should rejoin your party in {RETURN_DAYS} days", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("MALE_LESSER_NOBLE_TITLE", this.LesserNobleTitle);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x1700106B RID: 4203
			// (get) Token: 0x06004D52 RID: 19794 RVA: 0x001573F0 File Offset: 0x001555F0
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=xxZeGhqf}{MALE_LESSER_NOBLE_NAME}'s Revolt", null);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x1700106C RID: 4204
			// (get) Token: 0x06004D53 RID: 19795 RVA: 0x0015740F File Offset: 0x0015560F
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=bYTSR4AG}{ISSUE_GIVER.LINK} wants you to stop the {MALE_LESSER_NOBLE_NAME}'s movement before it turns into a strong resistance.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, null, false);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x06004D54 RID: 19796 RVA: 0x00157448 File Offset: 0x00155648
			public LesserNobleRevoltIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(20f))
			{
				MBReadOnlyList<TextObject> nameListForCulture = NameGenerator.Current.GetNameListForCulture(base.IssueOwner.Culture, false);
				this._lesserNobleName = nameListForCulture.GetRandomElement<TextObject>();
			}

			// Token: 0x06004D55 RID: 19797 RVA: 0x00157489 File Offset: 0x00155689
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.ClanInfluence)
				{
					return -1f;
				}
				return 0f;
			}

			// Token: 0x06004D56 RID: 19798 RVA: 0x0015749E File Offset: 0x0015569E
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Leadership) >= hero.GetSkillValue(DefaultSkills.Scouting)) ? DefaultSkills.Leadership : DefaultSkills.Scouting, 120);
			}

			// Token: 0x06004D57 RID: 19799 RVA: 0x001574CB File Offset: 0x001556CB
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004D58 RID: 19800 RVA: 0x001574E3 File Offset: 0x001556E3
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			// Token: 0x06004D59 RID: 19801 RVA: 0x001574F1 File Offset: 0x001556F1
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004D5A RID: 19802 RVA: 0x00157512 File Offset: 0x00155712
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Rare;
			}

			// Token: 0x06004D5B RID: 19803 RVA: 0x00157515 File Offset: 0x00155715
			public override bool IssueStayAliveConditions()
			{
				return base.IssueOwner.Clan.Fiefs.Count >= 2;
			}

			// Token: 0x06004D5C RID: 19804 RVA: 0x00157534 File Offset: 0x00155734
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				skill = null;
				relationHero = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (MobileParty.MainParty.MemberRoster.TotalHealthyCount < 50)
				{
					flag |= IssueBase.PreconditionFlags.NotEnoughTroops;
				}
				if (issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (Clan.PlayerClan.Kingdom != issueGiver.MapFaction)
				{
					flag |= IssueBase.PreconditionFlags.NotInSameFaction;
				}
				if (Hero.MainHero.MapFaction.IsKingdomFaction && Hero.MainHero.IsFactionLeader)
				{
					flag |= IssueBase.PreconditionFlags.MainHeroIsKingdomLeader;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004D5D RID: 19805 RVA: 0x001575E4 File Offset: 0x001557E4
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004D5E RID: 19806 RVA: 0x001575E6 File Offset: 0x001557E6
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(100f), this.RewardGold, this._lesserNobleName);
			}

			// Token: 0x06004D5F RID: 19807 RVA: 0x0015760A File Offset: 0x0015580A
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x1700106D RID: 4205
			// (get) Token: 0x06004D60 RID: 19808 RVA: 0x0015760C File Offset: 0x0015580C
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(800f + 1000f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x06004D61 RID: 19809 RVA: 0x00157621 File Offset: 0x00155821
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				GainRenownAction.Apply(Hero.MainHero, 1f, false);
				TraitLevelingHelper.OnIssueSolvedThroughAlternativeSolution(Hero.MainHero, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 15)
				});
				this.RelationshipChangeWithIssueOwner = 5;
			}

			// Token: 0x06004D62 RID: 19810 RVA: 0x00157659 File Offset: 0x00155859
			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				this.RelationshipChangeWithIssueOwner = -5;
				TraitLevelingHelper.OnIssueFailed(Hero.MainHero, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -15)
				});
			}

			// Token: 0x04001A1F RID: 6687
			private const int MinimumRequiredMenCount = 50;

			// Token: 0x04001A20 RID: 6688
			private const int IssueDuration = 20;

			// Token: 0x04001A21 RID: 6689
			private const int QuestTimeLimit = 100;

			// Token: 0x04001A22 RID: 6690
			private const int AlternativeSolutionTroopTierRequirement = 2;

			// Token: 0x04001A23 RID: 6691
			private const int CompanionRequiredSkillLevel = 120;

			// Token: 0x04001A24 RID: 6692
			[SaveableField(20)]
			private TextObject _lesserNobleName;
		}

		// Token: 0x02000640 RID: 1600
		public class LesserNobleRevoltIssueQuest : QuestBase
		{
			// Token: 0x06004D63 RID: 19811 RVA: 0x00157682 File Offset: 0x00155882
			internal static void AutoGeneratedStaticCollectObjectsLesserNobleRevoltIssueQuest(object o, List<object> collectedObjects)
			{
				((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004D64 RID: 19812 RVA: 0x00157690 File Offset: 0x00155890
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._lesserNobleName);
				collectedObjects.Add(this._lesserNobleParty);
				collectedObjects.Add(this._suitableVillagesToVisitList);
				collectedObjects.Add(this._visitedVillagesList);
				collectedObjects.Add(this._discreteLog);
			}

			// Token: 0x06004D65 RID: 19813 RVA: 0x001576E0 File Offset: 0x001558E0
			internal static object AutoGeneratedGetMemberValue_checkForEventEnd(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._checkForEventEnd;
			}

			// Token: 0x06004D66 RID: 19814 RVA: 0x001576F2 File Offset: 0x001558F2
			internal static object AutoGeneratedGetMemberValue_lesserNobleName(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._lesserNobleName;
			}

			// Token: 0x06004D67 RID: 19815 RVA: 0x001576FF File Offset: 0x001558FF
			internal static object AutoGeneratedGetMemberValue_lesserNobleParty(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._lesserNobleParty;
			}

			// Token: 0x06004D68 RID: 19816 RVA: 0x0015770C File Offset: 0x0015590C
			internal static object AutoGeneratedGetMemberValue_suitableVillagesToVisitList(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._suitableVillagesToVisitList;
			}

			// Token: 0x06004D69 RID: 19817 RVA: 0x00157719 File Offset: 0x00155919
			internal static object AutoGeneratedGetMemberValue_visitedVillagesList(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._visitedVillagesList;
			}

			// Token: 0x06004D6A RID: 19818 RVA: 0x00157726 File Offset: 0x00155926
			internal static object AutoGeneratedGetMemberValue_persuasionTriedOnce(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._persuasionTriedOnce;
			}

			// Token: 0x06004D6B RID: 19819 RVA: 0x00157738 File Offset: 0x00155938
			internal static object AutoGeneratedGetMemberValue_firstTalkIsDone(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._firstTalkIsDone;
			}

			// Token: 0x06004D6C RID: 19820 RVA: 0x0015774A File Offset: 0x0015594A
			internal static object AutoGeneratedGetMemberValue_goOutFromSettlementAfterHoursCounter(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._goOutFromSettlementAfterHoursCounter;
			}

			// Token: 0x06004D6D RID: 19821 RVA: 0x0015775C File Offset: 0x0015595C
			internal static object AutoGeneratedGetMemberValue_giveNotificationAfterHoursCounter(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._giveNotificationAfterHoursCounter;
			}

			// Token: 0x06004D6E RID: 19822 RVA: 0x0015776E File Offset: 0x0015596E
			internal static object AutoGeneratedGetMemberValue_discreteLog(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._discreteLog;
			}

			// Token: 0x06004D6F RID: 19823 RVA: 0x0015777B File Offset: 0x0015597B
			internal static object AutoGeneratedGetMemberValue_rewardGold(object o)
			{
				return ((LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest)o)._rewardGold;
			}

			// Token: 0x1700106E RID: 4206
			// (get) Token: 0x06004D70 RID: 19824 RVA: 0x0015778D File Offset: 0x0015598D
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=xxZeGhqf}{MALE_LESSER_NOBLE_NAME}{.o} Revolt", null);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x1700106F RID: 4207
			// (get) Token: 0x06004D71 RID: 19825 RVA: 0x001577AC File Offset: 0x001559AC
			private TextObject LesserNobleTitle
			{
				get
				{
					return LesserNobleRevoltIssueBehavior.GetLesserNobleTitle(base.QuestGiver);
				}
			}

			// Token: 0x17001070 RID: 4208
			// (get) Token: 0x06004D72 RID: 19826 RVA: 0x001577B9 File Offset: 0x001559B9
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17001071 RID: 4209
			// (get) Token: 0x06004D73 RID: 19827 RVA: 0x001577BC File Offset: 0x001559BC
			private TextObject QuestStartedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=ARXvmC1v}{QUEST_GIVER.LINK} says that a {MALE_LESSER_NOBLE_TITLE} named {MALE_LESSER_NOBLE_NAME} is stirring up unrest in the countryside. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to disperse {MALE_LESSER_NOBLE_NAME}'s band using whatever means necessary before the movement gets enough support.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_TITLE", this.LesserNobleTitle);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x17001072 RID: 4210
			// (get) Token: 0x06004D74 RID: 19828 RVA: 0x00157814 File Offset: 0x00155A14
			private TextObject QuestCanceledWarDeclared
			{
				get
				{
					TextObject textObject = new TextObject("{=vW6kBki9}Your clan is now at war with {QUEST_GIVER.LINK}'s realm. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001073 RID: 4211
			// (get) Token: 0x06004D75 RID: 19829 RVA: 0x00157848 File Offset: 0x00155A48
			private TextObject PlayerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001074 RID: 4212
			// (get) Token: 0x06004D76 RID: 19830 RVA: 0x0015787A File Offset: 0x00155A7A
			private TextObject QuestLesserNoblePartyLocationLog
			{
				get
				{
					TextObject textObject = new TextObject("{=dEXpZOlC}{QUEST_GIVER}{.o} informants reported that {MALE_LESSER_NOBLE_NAME}{.o} party has been seen near {VILLAGE}.", null);
					textObject.SetTextVariable("QUEST_GIVER", base.QuestGiver.EncyclopediaLinkWithName);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x17001075 RID: 4213
			// (get) Token: 0x06004D77 RID: 19831 RVA: 0x001578B0 File Offset: 0x00155AB0
			private TextObject QuestFailedAfterTalkingWithLesserNoblePartyLog
			{
				get
				{
					TextObject textObject = new TextObject("{=RybVf6Nt}You were convinced by {MALE_LESSER_NOBLE_NAME} to let him gather support. {QUEST_GIVER.LINK} will be very upset about this.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x17001076 RID: 4214
			// (get) Token: 0x06004D78 RID: 19832 RVA: 0x001578F4 File Offset: 0x00155AF4
			private TextObject QuestSuccessPlayerComesToAnAgreementWithLesserNoblePartyLog
			{
				get
				{
					TextObject textObject = new TextObject("{=RY8Fglsk}You have persuaded {MALE_LESSER_NOBLE_NAME} to disband his party and return home. You received {REWARD}{GOLD_ICON} in return for your service.", null);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x17001077 RID: 4215
			// (get) Token: 0x06004D79 RID: 19833 RVA: 0x00157928 File Offset: 0x00155B28
			private TextObject QuestFailWithPlayerDefeatedAgainstNobleParty
			{
				get
				{
					TextObject textObject = new TextObject("{=R3aVlXGu}You lost the battle against {MALE_LESSER_NOBLE_NAME} and failed to help {QUEST_GIVER.LINK} as promised.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x17001078 RID: 4216
			// (get) Token: 0x06004D7A RID: 19834 RVA: 0x0015796C File Offset: 0x00155B6C
			private TextObject QuestSuccessWithPlayerDefeatedNobleParty
			{
				get
				{
					TextObject textObject = new TextObject("{=aKrzoAsh}You have defeated {MALE_LESSER_NOBLE_NAME} and helped {QUEST_GIVER.LINK} as promised. You received {REWARD}{GOLD_ICON} in return for your service.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x17001079 RID: 4217
			// (get) Token: 0x06004D7B RID: 19835 RVA: 0x001579C4 File Offset: 0x00155BC4
			private TextObject QuestFailedWithTimeOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=zhzh4yd1}You failed to stop {MALE_LESSER_NOBLE_NAME} before he stirred up unrest in the countryside. {QUEST_GIVER.LINK} will be very upset about this.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
					return textObject;
				}
			}

			// Token: 0x06004D7C RID: 19836 RVA: 0x00157A08 File Offset: 0x00155C08
			public LesserNobleRevoltIssueQuest(string questId, Hero giverHero, CampaignTime duration, int rewardGold, TextObject lesserNobleName)
				: base(questId, giverHero, duration, rewardGold)
			{
				this._lesserNobleName = lesserNobleName;
				this._tier5Troop = CharacterHelper.GetTroopTree(giverHero.Culture.EliteBasicTroop, 5f, 5f).First<CharacterObject>();
				this._tier6Troop = CharacterHelper.GetTroopTree(giverHero.Culture.EliteBasicTroop, 6f, 6f).First<CharacterObject>();
				this.SetDialogs();
				base.InitializeQuestOnCreation();
				this.CollectSuitableVillages();
				this.SpawnLesserNobleParty();
				this._rewardGold = 150 * this._lesserNobleParty.MemberRoster.TotalManCount;
			}

			// Token: 0x06004D7D RID: 19837 RVA: 0x00157AA8 File Offset: 0x00155CA8
			private void CollectSuitableVillages()
			{
				this._suitableVillagesToVisitList = new List<Settlement>();
				this._visitedVillagesList = new List<Settlement>();
				foreach (Settlement settlement in base.QuestGiver.Clan.Settlements)
				{
					if (settlement.IsVillage && !settlement.IsUnderRaid && !settlement.IsRaided)
					{
						this._suitableVillagesToVisitList.Add(settlement);
					}
				}
				IMapPoint questGiverLocation = base.QuestGiver.GetMapPoint();
				if (questGiverLocation == null)
				{
					questGiverLocation = base.QuestGiver.HomeSettlement;
				}
				this._suitableVillagesToVisitList = this._suitableVillagesToVisitList.OrderBy(delegate(Settlement x)
				{
					MapDistanceModel mapDistanceModel = Campaign.Current.Models.MapDistanceModel;
					Vec2 position2D = questGiverLocation.Position2D;
					float num;
					return mapDistanceModel.GetDistance(x, position2D, 150f, out num);
				}).ToList<Settlement>();
			}

			// Token: 0x06004D7E RID: 19838 RVA: 0x00157B8C File Offset: 0x00155D8C
			private void SpawnLesserNobleParty()
			{
				this._lesserNobleParty = MobileParty.CreateParty("lesser_noble_party_" + base.StringId, null, new PartyComponent.OnPartyComponentCreatedDelegate(this.OnLesserPartySpawned));
			}

			// Token: 0x06004D7F RID: 19839 RVA: 0x00157BB8 File Offset: 0x00155DB8
			private void OnLesserPartySpawned(MobileParty lesserNobleParty)
			{
				lesserNobleParty.SetPartyUsedByQuest(true);
				TextObject textObject = new TextObject("{=WhHDg7ag}{MALE_LESSER_NOBLE_NAME}{.o} Party", null);
				textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
				Settlement settlement = this._suitableVillagesToVisitList[1];
				lesserNobleParty.InitializeMobilePartyAtPosition(new TroopRoster(lesserNobleParty.Party), new TroopRoster(lesserNobleParty.Party), settlement.Position2D);
				lesserNobleParty.SetCustomName(textObject);
				base.AddTrackedObject(lesserNobleParty);
				base.AddTrackedObject(settlement);
				lesserNobleParty.Ai.SetDoNotMakeNewDecisions(true);
				lesserNobleParty.IgnoreByOtherPartiesTill(CampaignTime.Never);
				lesserNobleParty.SetCustomHomeSettlement(base.QuestGiver.HomeSettlement);
				lesserNobleParty.MemberRoster.AddToCounts(this._tier5Troop, MathF.Min(40, MobileParty.MainParty.Party.PartySizeLimit / 2), false, 0, 0, true, -1);
				SetPartyAiAction.GetActionForVisitingSettlement(lesserNobleParty, settlement);
				TextObject textObject2 = new TextObject("{=Y2Z6F5Fj}Support level of {MALE_LESSER_NOBLE_NAME}", null);
				textObject2.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
				this._discreteLog = base.AddDiscreteLog(this.QuestStartedLogText, textObject2, 0, 20, null, false);
			}

			// Token: 0x06004D80 RID: 19840 RVA: 0x00157CC4 File Offset: 0x00155EC4
			private DialogFlow GetLesserNoblePartyDialogFlow()
			{
				TextObject textObject = new TextObject("{=0L79bLR5}Sedition? You have been misinformed. My men and I are loyal servants of {RULER_NAME_AND_TITLE}. We are simply going about informing the people that our {RULER_TITLE} is surrounded by bad advisers who wish to raise their taxes. We petition {RULER.NAME} to listen to {?RULER.GENDER}her{?}his{\\?} people and their needs.[ib:closed]", null);
				textObject.SetTextVariable("RULER_NAME_AND_TITLE", GameTexts.FindText("str_faction_ruler_name_with_title", base.QuestGiver.Culture.StringId));
				textObject.SetTextVariable("RULER_TITLE", GameTexts.FindText("str_faction_ruler", base.QuestGiver.Culture.StringId));
				TextObject textObject2 = new TextObject("{=p14S00jq}Consequences? You would shed the blood of {RULER.NAME}'s loyal servants just for raising their voices against oppression?", null);
				StringHelpers.SetCharacterProperties("RULER", base.QuestGiver.MapFaction.Leader.CharacterObject, null, false);
				DialogFlow dialogFlow = DialogFlow.CreateDialogFlow("start", 125).NpcLine(new TextObject("{=!}{MALE_LESSER_NOBLE_PARTY_START_LINE}", null), null, null).Condition(new ConversationSentence.OnConditionDelegate(this.SetStartDialogOnCondition))
					.PlayerLine(new TextObject("{=XkjRNMam}You have no right to go around, under arms, spreading sedition. Disperse!", null), null)
					.NpcLine(textObject, null, null)
					.Consequence(delegate
					{
						this._task = this.GetPersuasionTask();
					})
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=dxTSVT4C}Yes, that's sedition all right. Disperse now or face the consequences.", null), null)
					.NpcLine(textObject2, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=GdC4yKiO}I will talk no more. Get ready to fight.", null), null)
					.NpcLine(new TextObject("{=7VLmHrgC}The Heavens will grant victory to the just![ib:aggressive][if:convo_aggressive]", null), null, null)
					.Consequence(delegate
					{
						EncounterManager.StartPartyEncounter(PartyBase.MainParty, this._lesserNobleParty.Party);
						Campaign.Current.GameMenuManager.SetNextMenu("encounter");
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=RTNK5FSs}No, I don't want to shed your blood.", null), null)
					.NpcLine(new TextObject("{=izzbaMUf}Wise decision.", null), null, null)
					.GotoDialogState("start")
					.EndPlayerOptions()
					.PlayerOption("{=UTaXn4pb}Well, I have indeed been misinformed. You may go on your way...", null)
					.NpcLine("{=8nGRa1pO}You're doing a good thing, {?PLAYER.GENDER}madame{?}sir{\\?}. The poor people around here will remember you", null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestFailedAfterTalkingWithLesserNobleParty))
					.CloseDialog()
					.PlayerOption("{=etYcn79b}Let me try to talk some sense into you...", null)
					.Condition(() => !this._persuasionTriedOnce)
					.Consequence(delegate
					{
						this._persuasionTriedOnce = true;
					})
					.GotoDialogState("start_lesser_noble_party_persuasion")
					.EndPlayerOptions();
				this.AddPersuasionDialogs(dialogFlow);
				return dialogFlow;
			}

			// Token: 0x06004D81 RID: 19841 RVA: 0x00157EB0 File Offset: 0x001560B0
			private bool SetStartDialogOnCondition()
			{
				if (this._lesserNobleParty != null && CharacterObject.OneToOneConversationCharacter == ConversationHelper.GetConversationCharacterPartyLeader(this._lesserNobleParty.Party))
				{
					MBTextManager.SetTextVariable("MALE_LESSER_NOBLE_PARTY_START_LINE", "{=ZqjiBjYJ}Greetings, {?PLAYER.GENDER}madame{?}sir{\\?}. May I help you?", false);
					if (this._persuasionTriedOnce || this._firstTalkIsDone)
					{
						MBTextManager.SetTextVariable("MALE_LESSER_NOBLE_PARTY_START_LINE", "{=Nn06TSq9}Anything else to say?", false);
					}
					this._firstTalkIsDone = true;
					return true;
				}
				return false;
			}

			// Token: 0x06004D82 RID: 19842 RVA: 0x00157F18 File Offset: 0x00156118
			private void AddPersuasionDialogs(DialogFlow dialog)
			{
				dialog.AddDialogLine("lesser_party_persuasion_check_accepted", "start_lesser_noble_party_persuasion", "lesser_party_persuasion_start_reservation", "{=FwtFtpwp}How?", null, new ConversationSentence.OnConsequenceDelegate(this.persuasion_start_with_lesser_party_on_consequence), this, 100, null, null, null);
				dialog.AddDialogLine("lesser_party_persuasion_rejected", "lesser_party_persuasion_start_reservation", "start", "{=!}{FAILED_PERSUASION_LINE}", new ConversationSentence.OnConditionDelegate(this.persuasion_failed_with_lesser_party_on_condition), new ConversationSentence.OnConsequenceDelegate(this.persuasion_rejected_with_lesser_party_on_consequence), this, 100, null, null, null);
				dialog.AddDialogLine("lesser_party_persuasion_attempt", "lesser_party_persuasion_start_reservation", "lesser_party_persuasion_select_option", "{=wM77S68a}What's there to discuss?", () => !this.persuasion_failed_with_lesser_party_on_condition(), null, this, 100, null, null, null);
				dialog.AddDialogLine("lesser_party_persuasion_success", "lesser_party_persuasion_start_reservation", "close_window", "{=zWILNszA}You may have a point, but don't think that we will give up demanding our rights. We will return home, but we will pursue our grievances some other way.", new ConversationSentence.OnConditionDelegate(ConversationManager.GetPersuasionProgressSatisfied), new ConversationSentence.OnConsequenceDelegate(this.persuasion_complete_with_lesser_party_on_consequence), this, 200, null, null, null);
				string text = "lesser_party_persuasion_select_option_1";
				string text2 = "lesser_party_persuasion_select_option";
				string text3 = "lesser_party_persuasion_selected_option_response";
				string text4 = "{=!}{LESSER_PARTY_PERSUADE_ATTEMPT_1}";
				ConversationSentence.OnConditionDelegate onConditionDelegate = new ConversationSentence.OnConditionDelegate(this.lesser_party_persuasion_select_option_1_on_condition);
				ConversationSentence.OnConsequenceDelegate onConsequenceDelegate = new ConversationSentence.OnConsequenceDelegate(this.lesser_party_persuasion_select_option_1_on_consequence);
				ConversationSentence.OnPersuasionOptionDelegate onPersuasionOptionDelegate = new ConversationSentence.OnPersuasionOptionDelegate(this.lesser_party_persuasion_setup_option_1);
				ConversationSentence.OnClickableConditionDelegate onClickableConditionDelegate = new ConversationSentence.OnClickableConditionDelegate(this.lesser_party_persuasion_clickable_option_1_on_condition);
				dialog.AddPlayerLine(text, text2, text3, text4, onConditionDelegate, onConsequenceDelegate, this, 100, onClickableConditionDelegate, onPersuasionOptionDelegate, null, null);
				string text5 = "lesser_party_persuasion_select_option_2";
				string text6 = "lesser_party_persuasion_select_option";
				string text7 = "lesser_party_persuasion_selected_option_response";
				string text8 = "{=!}{LESSER_PARTY_PERSUADE_ATTEMPT_2}";
				ConversationSentence.OnConditionDelegate onConditionDelegate2 = new ConversationSentence.OnConditionDelegate(this.lesser_party_persuasion_select_option_2_on_condition);
				ConversationSentence.OnConsequenceDelegate onConsequenceDelegate2 = new ConversationSentence.OnConsequenceDelegate(this.lesser_party_persuasion_select_option_2_on_consequence);
				onPersuasionOptionDelegate = new ConversationSentence.OnPersuasionOptionDelegate(this.lesser_party_persuasion_setup_option_2);
				onClickableConditionDelegate = new ConversationSentence.OnClickableConditionDelegate(this.lesser_party_persuasion_clickable_option_2_on_condition);
				dialog.AddPlayerLine(text5, text6, text7, text8, onConditionDelegate2, onConsequenceDelegate2, this, 100, onClickableConditionDelegate, onPersuasionOptionDelegate, null, null);
				string text9 = "lesser_party_persuasion_select_option_3";
				string text10 = "lesser_party_persuasion_select_option";
				string text11 = "lesser_party_persuasion_selected_option_response";
				string text12 = "{=!}{LESSER_PARTY_PERSUADE_ATTEMPT_3}";
				ConversationSentence.OnConditionDelegate onConditionDelegate3 = new ConversationSentence.OnConditionDelegate(this.lesser_party_persuasion_select_option_3_on_condition);
				ConversationSentence.OnConsequenceDelegate onConsequenceDelegate3 = new ConversationSentence.OnConsequenceDelegate(this.lesser_party_persuasion_select_option_3_on_consequence);
				onPersuasionOptionDelegate = new ConversationSentence.OnPersuasionOptionDelegate(this.lesser_party_persuasion_setup_option_3);
				onClickableConditionDelegate = new ConversationSentence.OnClickableConditionDelegate(this.lesser_party_persuasion_clickable_option_3_on_condition);
				dialog.AddPlayerLine(text9, text10, text11, text12, onConditionDelegate3, onConsequenceDelegate3, this, 100, onClickableConditionDelegate, onPersuasionOptionDelegate, null, null);
				string text13 = "lesser_party_persuasion_select_option_4";
				string text14 = "lesser_party_persuasion_select_option";
				string text15 = "lesser_party_persuasion_selected_option_response";
				string text16 = "{=!}{LESSER_PARTY_PERSUADE_ATTEMPT_4}";
				ConversationSentence.OnConditionDelegate onConditionDelegate4 = new ConversationSentence.OnConditionDelegate(this.lesser_party_persuasion_select_option_4_on_condition);
				ConversationSentence.OnConsequenceDelegate onConsequenceDelegate4 = new ConversationSentence.OnConsequenceDelegate(this.lesser_party_persuasion_select_option_4_on_consequence);
				onPersuasionOptionDelegate = new ConversationSentence.OnPersuasionOptionDelegate(this.lesser_party_persuasion_setup_option_4);
				onClickableConditionDelegate = new ConversationSentence.OnClickableConditionDelegate(this.lesser_party_persuasion_clickable_option_4_on_condition);
				dialog.AddPlayerLine(text13, text14, text15, text16, onConditionDelegate4, onConsequenceDelegate4, this, 100, onClickableConditionDelegate, onPersuasionOptionDelegate, null, null);
				dialog.AddDialogLine("lesser_party_persuasion_select_option_reaction", "lesser_party_persuasion_selected_option_response", "lesser_party_persuasion_start_reservation", "{=!}{PERSUASION_REACTION}", new ConversationSentence.OnConditionDelegate(this.lesser_party_persuasion_selected_option_response_on_condition), new ConversationSentence.OnConsequenceDelegate(this.lesser_party_persuasion_selected_option_response_on_consequence), this, 100, null, null, null);
			}

			// Token: 0x06004D83 RID: 19843 RVA: 0x0015817F File Offset: 0x0015637F
			private void persuasion_start_with_lesser_party_on_consequence()
			{
				ConversationManager.StartPersuasion(2f, 1f, 0f, 2f, 2f, 0f, PersuasionDifficulty.MediumHard);
			}

			// Token: 0x06004D84 RID: 19844 RVA: 0x001581A8 File Offset: 0x001563A8
			private PersuasionTask GetPersuasionTask()
			{
				PersuasionTask persuasionTask = new PersuasionTask(0)
				{
					FinalFailLine = new TextObject("{=W7c3BfIX}Thus always spoke the tyrant to the oppressed! We can only pray that the Heavens help the just. Now stay out of my way.", null),
					TryLaterLine = TextObject.Empty,
					SpokenLine = new TextObject("{=wM77S68a}What's there to discuss?", null)
				};
				PersuasionOptionArgs persuasionOptionArgs = new PersuasionOptionArgs(DefaultSkills.Charm, DefaultTraits.Mercy, TraitEffect.Positive, PersuasionArgumentStrength.Normal, false, new TextObject("{=JDGz56HX}If you start a rebellion, you're just going to get a lot of peasants around here killed...", null), null, false, false, false);
				persuasionTask.AddOptionToTask(persuasionOptionArgs);
				PersuasionOptionArgs persuasionOptionArgs2 = new PersuasionOptionArgs(DefaultSkills.Charm, DefaultTraits.Calculating, TraitEffect.Positive, PersuasionArgumentStrength.Normal, true, new TextObject("{=s99TKI9x}The nobles aren't trying to starve anyone, but if they don't collect taxes, they won't be able to fight off raiders.", null), null, false, false, false);
				persuasionTask.AddOptionToTask(persuasionOptionArgs2);
				PersuasionOptionArgs persuasionOptionArgs3 = new PersuasionOptionArgs(DefaultSkills.Roguery, DefaultTraits.Calculating, TraitEffect.Positive, PersuasionArgumentStrength.Normal, false, new TextObject("{=TCSggNOS}You know the dark hearts of men... Those who start as rebels end up turning bandit. Rebellion brings anarchy, not justice. ", null), null, false, false, false);
				persuasionTask.AddOptionToTask(persuasionOptionArgs3);
				if (MobileParty.MainParty.MemberRoster.TotalHealthyCount >= this._lesserNobleParty.MemberRoster.TotalHealthyCount * 3)
				{
					TextObject textObject = new TextObject("{=IP3e4x8S}Count my troops. Then count yours. You have no chance.", null);
					PersuasionOptionArgs persuasionOptionArgs4 = new PersuasionOptionArgs(DefaultSkills.Charm, DefaultTraits.Honor, TraitEffect.Positive, PersuasionArgumentStrength.Easy, false, textObject, null, false, false, false);
					persuasionTask.AddOptionToTask(persuasionOptionArgs4);
				}
				return persuasionTask;
			}

			// Token: 0x06004D85 RID: 19845 RVA: 0x001582B8 File Offset: 0x001564B8
			private bool lesser_party_persuasion_selected_option_response_on_condition()
			{
				PersuasionOptionResult item = ConversationManager.GetPersuasionChosenOptions().Last<Tuple<PersuasionOptionArgs, PersuasionOptionResult>>().Item2;
				MBTextManager.SetTextVariable("PERSUASION_REACTION", PersuasionHelper.GetDefaultPersuasionOptionReaction(item), false);
				if (item == PersuasionOptionResult.CriticalFailure)
				{
					this._task.BlockAllOptions();
				}
				return true;
			}

			// Token: 0x06004D86 RID: 19846 RVA: 0x001582F8 File Offset: 0x001564F8
			private void lesser_party_persuasion_selected_option_response_on_consequence()
			{
				Tuple<PersuasionOptionArgs, PersuasionOptionResult> tuple = ConversationManager.GetPersuasionChosenOptions().Last<Tuple<PersuasionOptionArgs, PersuasionOptionResult>>();
				float difficulty = Campaign.Current.Models.PersuasionModel.GetDifficulty(PersuasionDifficulty.MediumHard);
				float num;
				float num2;
				Campaign.Current.Models.PersuasionModel.GetEffectChances(tuple.Item1, out num, out num2, difficulty);
				this._task.ApplyEffects(num, num2);
			}

			// Token: 0x06004D87 RID: 19847 RVA: 0x00158354 File Offset: 0x00156554
			private bool lesser_party_persuasion_select_option_1_on_condition()
			{
				if (this._task.Options.Count > 0)
				{
					TextObject textObject = new TextObject("{=bSo9hKwr}{PERSUASION_OPTION_LINE} {SUCCESS_CHANCE}", null);
					textObject.SetTextVariable("SUCCESS_CHANCE", PersuasionHelper.ShowSuccess(this._task.Options.ElementAt(0), false));
					textObject.SetTextVariable("PERSUASION_OPTION_LINE", this._task.Options.ElementAt(0).Line);
					MBTextManager.SetTextVariable("LESSER_PARTY_PERSUADE_ATTEMPT_1", textObject, false);
					return true;
				}
				return false;
			}

			// Token: 0x06004D88 RID: 19848 RVA: 0x001583D4 File Offset: 0x001565D4
			private bool lesser_party_persuasion_select_option_2_on_condition()
			{
				if (this._task.Options.Count > 1)
				{
					TextObject textObject = new TextObject("{=bSo9hKwr}{PERSUASION_OPTION_LINE} {SUCCESS_CHANCE}", null);
					textObject.SetTextVariable("SUCCESS_CHANCE", PersuasionHelper.ShowSuccess(this._task.Options.ElementAt(1), false));
					textObject.SetTextVariable("PERSUASION_OPTION_LINE", this._task.Options.ElementAt(1).Line);
					MBTextManager.SetTextVariable("LESSER_PARTY_PERSUADE_ATTEMPT_2", textObject, false);
					return true;
				}
				return false;
			}

			// Token: 0x06004D89 RID: 19849 RVA: 0x00158454 File Offset: 0x00156654
			private bool lesser_party_persuasion_select_option_3_on_condition()
			{
				if (this._task.Options.Count > 2)
				{
					TextObject textObject = new TextObject("{=bSo9hKwr}{PERSUASION_OPTION_LINE} {SUCCESS_CHANCE}", null);
					textObject.SetTextVariable("SUCCESS_CHANCE", PersuasionHelper.ShowSuccess(this._task.Options.ElementAt(2), false));
					textObject.SetTextVariable("PERSUASION_OPTION_LINE", this._task.Options.ElementAt(2).Line);
					MBTextManager.SetTextVariable("LESSER_PARTY_PERSUADE_ATTEMPT_3", textObject, false);
					return true;
				}
				return false;
			}

			// Token: 0x06004D8A RID: 19850 RVA: 0x001584D4 File Offset: 0x001566D4
			private bool lesser_party_persuasion_select_option_4_on_condition()
			{
				if (this._task.Options.Count > 3)
				{
					TextObject textObject = new TextObject("{=bSo9hKwr}{PERSUASION_OPTION_LINE} {SUCCESS_CHANCE}", null);
					textObject.SetTextVariable("SUCCESS_CHANCE", PersuasionHelper.ShowSuccess(this._task.Options.ElementAt(3), false));
					textObject.SetTextVariable("PERSUASION_OPTION_LINE", this._task.Options.ElementAt(3).Line);
					MBTextManager.SetTextVariable("LESSER_PARTY_PERSUADE_ATTEMPT_4", textObject, false);
					return true;
				}
				return false;
			}

			// Token: 0x06004D8B RID: 19851 RVA: 0x00158554 File Offset: 0x00156754
			private void lesser_party_persuasion_select_option_1_on_consequence()
			{
				if (this._task.Options.Count > 0)
				{
					this._task.Options[0].BlockTheOption(true);
				}
			}

			// Token: 0x06004D8C RID: 19852 RVA: 0x00158580 File Offset: 0x00156780
			private void lesser_party_persuasion_select_option_2_on_consequence()
			{
				if (this._task.Options.Count > 1)
				{
					this._task.Options[1].BlockTheOption(true);
				}
			}

			// Token: 0x06004D8D RID: 19853 RVA: 0x001585AC File Offset: 0x001567AC
			private void lesser_party_persuasion_select_option_3_on_consequence()
			{
				if (this._task.Options.Count > 2)
				{
					this._task.Options[2].BlockTheOption(true);
				}
			}

			// Token: 0x06004D8E RID: 19854 RVA: 0x001585D8 File Offset: 0x001567D8
			private void lesser_party_persuasion_select_option_4_on_consequence()
			{
				if (this._task.Options.Count > 3)
				{
					this._task.Options[3].BlockTheOption(true);
				}
			}

			// Token: 0x06004D8F RID: 19855 RVA: 0x00158604 File Offset: 0x00156804
			private bool persuasion_failed_with_lesser_party_on_condition()
			{
				if (this._task.Options.All((PersuasionOptionArgs x) => x.IsBlocked) && !ConversationManager.GetPersuasionProgressSatisfied())
				{
					MBTextManager.SetTextVariable("FAILED_PERSUASION_LINE", this._task.FinalFailLine, false);
					return true;
				}
				return false;
			}

			// Token: 0x06004D90 RID: 19856 RVA: 0x00158662 File Offset: 0x00156862
			private PersuasionOptionArgs lesser_party_persuasion_setup_option_1()
			{
				return this._task.Options.ElementAt(0);
			}

			// Token: 0x06004D91 RID: 19857 RVA: 0x00158675 File Offset: 0x00156875
			private PersuasionOptionArgs lesser_party_persuasion_setup_option_2()
			{
				return this._task.Options.ElementAt(1);
			}

			// Token: 0x06004D92 RID: 19858 RVA: 0x00158688 File Offset: 0x00156888
			private PersuasionOptionArgs lesser_party_persuasion_setup_option_3()
			{
				return this._task.Options.ElementAt(2);
			}

			// Token: 0x06004D93 RID: 19859 RVA: 0x0015869B File Offset: 0x0015689B
			private PersuasionOptionArgs lesser_party_persuasion_setup_option_4()
			{
				return this._task.Options.ElementAt(3);
			}

			// Token: 0x06004D94 RID: 19860 RVA: 0x001586B0 File Offset: 0x001568B0
			private bool lesser_party_persuasion_clickable_option_1_on_condition(out TextObject hintText)
			{
				hintText = new TextObject("{=9ACJsI6S}Blocked", null);
				if (this._task.Options.Count > 0)
				{
					hintText = (this._task.Options.ElementAt(0).IsBlocked ? hintText : TextObject.Empty);
					return !this._task.Options.ElementAt(0).IsBlocked;
				}
				return false;
			}

			// Token: 0x06004D95 RID: 19861 RVA: 0x0015871C File Offset: 0x0015691C
			private bool lesser_party_persuasion_clickable_option_2_on_condition(out TextObject hintText)
			{
				hintText = new TextObject("{=9ACJsI6S}Blocked", null);
				if (this._task.Options.Count > 1)
				{
					hintText = (this._task.Options.ElementAt(1).IsBlocked ? hintText : TextObject.Empty);
					return !this._task.Options.ElementAt(1).IsBlocked;
				}
				return false;
			}

			// Token: 0x06004D96 RID: 19862 RVA: 0x00158788 File Offset: 0x00156988
			private bool lesser_party_persuasion_clickable_option_3_on_condition(out TextObject hintText)
			{
				hintText = new TextObject("{=9ACJsI6S}Blocked", null);
				if (this._task.Options.Count > 2)
				{
					hintText = (this._task.Options.ElementAt(2).IsBlocked ? hintText : TextObject.Empty);
					return !this._task.Options.ElementAt(2).IsBlocked;
				}
				return false;
			}

			// Token: 0x06004D97 RID: 19863 RVA: 0x001587F4 File Offset: 0x001569F4
			private bool lesser_party_persuasion_clickable_option_4_on_condition(out TextObject hintText)
			{
				hintText = new TextObject("{=9ACJsI6S}Blocked", null);
				if (this._task.Options.Count > 3)
				{
					hintText = (this._task.Options.ElementAt(3).IsBlocked ? hintText : TextObject.Empty);
					return !this._task.Options.ElementAt(3).IsBlocked;
				}
				return false;
			}

			// Token: 0x06004D98 RID: 19864 RVA: 0x0015885F File Offset: 0x00156A5F
			private void persuasion_rejected_with_lesser_party_on_consequence()
			{
				PlayerEncounter.LeaveEncounter = false;
				ConversationManager.EndPersuasion();
			}

			// Token: 0x06004D99 RID: 19865 RVA: 0x0015886C File Offset: 0x00156A6C
			private void persuasion_complete_with_lesser_party_on_consequence()
			{
				PlayerEncounter.LeaveEncounter = true;
				ConversationManager.EndPersuasion();
				Campaign.Current.ConversationManager.ConversationEndOneShot += this.QuestSuccessPlayerComesToAnAgreementWithLesserNobleParty;
			}

			// Token: 0x06004D9A RID: 19866 RVA: 0x00158894 File Offset: 0x00156A94
			private bool DialogCondition()
			{
				return Hero.OneToOneConversationHero == base.QuestGiver;
			}

			// Token: 0x06004D9B RID: 19867 RVA: 0x001588A4 File Offset: 0x00156AA4
			protected override void SetDialogs()
			{
				TextObject textObject = new TextObject("{=YMGQYhvg}Thank you. {MALE_LESSER_NOBLE_NAME} is always on the move, so finding him might be tricky. But don't worry, I get regular reports from the landowners around here and I'll keep you updated on his movements...", null);
				textObject.SetTextVariable("MALE_LESSER_NOBLE_NAME", this._lesserNobleName);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(textObject, null, null).Condition(new ConversationSentence.OnConditionDelegate(this.DialogCondition))
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				TextObject textObject2 = new TextObject("{=ZpabPAtS}Have you put a stop to {MALE_LESSER_NOBLE_TITLE}{.s}?", null);
				textObject2.SetTextVariable("MALE_LESSER_NOBLE_TITLE", this.LesserNobleTitle);
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(textObject2, null, null).Condition(new ConversationSentence.OnConditionDelegate(this.DialogCondition))
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=p8ye30mG}Yes, we know where he is. It's just a matter of time to catch them.", null), null)
					.NpcLine(new TextObject("{=2L1bZdwh}Good. I count on you.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(MapEventHelper.OnConversationEnd))
					.CloseDialog()
					.PlayerOption(new TextObject("{=zjMqgbXz}We are working on it.", null), null)
					.NpcLine(new TextObject("{=HRwb3qJZ}Very well. But every day he's out there spreading sedition make things more dangerous for all of us.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(MapEventHelper.OnConversationEnd))
					.CloseDialog()
					.EndPlayerOptions();
				this.QuestCharacterDialogFlow = this.GetLesserNoblePartyDialogFlow();
			}

			// Token: 0x06004D9C RID: 19868 RVA: 0x001589E1 File Offset: 0x00156BE1
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
			}

			// Token: 0x06004D9D RID: 19869 RVA: 0x001589E9 File Offset: 0x00156BE9
			private void QuestFailedAfterTalkingWithLesserNobleParty()
			{
				PlayerEncounter.Finish(true);
				base.AddLog(this.QuestFailedAfterTalkingWithLesserNoblePartyLog, false);
				this.RelationshipChangeWithQuestGiver = -5;
				this.ChangeRelationWithRuralNotables(1);
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004D9E RID: 19870 RVA: 0x00158A18 File Offset: 0x00156C18
			private void QuestSuccessPlayerComesToAnAgreementWithLesserNobleParty()
			{
				base.AddLog(this.QuestSuccessPlayerComesToAnAgreementWithLesserNoblePartyLog, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				this.RelationshipChangeWithQuestGiver = 8;
				GainRenownAction.Apply(Hero.MainHero, 1f, false);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004D9F RID: 19871 RVA: 0x00158A82 File Offset: 0x00156C82
			private void QuestFailWithPlayerDefeatedAgainstLesserNobleParty()
			{
				base.AddLog(this.QuestFailWithPlayerDefeatedAgainstNobleParty, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -15)
				});
				this.RelationshipChangeWithQuestGiver = -5;
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004DA0 RID: 19872 RVA: 0x00158AC4 File Offset: 0x00156CC4
			private void QuestSuccessWithPlayerDefeatedLesserNobleParty()
			{
				base.AddLog(this.QuestSuccessWithPlayerDefeatedNobleParty, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				GainRenownAction.Apply(Hero.MainHero, 3f, false);
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				this.RelationshipChangeWithQuestGiver = 8;
				this.ChangeRelationWithRuralNotables(-2);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004DA1 RID: 19873 RVA: 0x00158B38 File Offset: 0x00156D38
			private void ChangeRelationWithRuralNotables(int value)
			{
				foreach (Settlement settlement in this._visitedVillagesList)
				{
					foreach (Hero hero in settlement.Notables)
					{
						if (hero.IsRuralNotable)
						{
							ChangeRelationAction.ApplyPlayerRelation(hero, value, true, true);
						}
					}
				}
			}

			// Token: 0x06004DA2 RID: 19874 RVA: 0x00158BD0 File Offset: 0x00156DD0
			protected override void OnTimedOut()
			{
				base.AddLog(this.QuestFailedWithTimeOutLogText, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				this.RelationshipChangeWithQuestGiver = -5;
			}

			// Token: 0x06004DA3 RID: 19875 RVA: 0x00158C08 File Offset: 0x00156E08
			public override void OnFailed()
			{
				this.RelationshipChangeWithQuestGiver = -5;
			}

			// Token: 0x06004DA4 RID: 19876 RVA: 0x00158C14 File Offset: 0x00156E14
			protected override void RegisterEvents()
			{
				CampaignEvents.SettlementEntered.AddNonSerializedListener(this, new Action<MobileParty, Settlement, Hero>(this.OnSettlementEntered));
				CampaignEvents.HourlyTickPartyEvent.AddNonSerializedListener(this, new Action<MobileParty>(this.HourlyTickParty));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
				CampaignEvents.GameMenuOpened.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.OnGameMenuOpened));
				CampaignEvents.MapEventEnded.AddNonSerializedListener(this, new Action<MapEvent>(this.OnMapEventEnd));
				CampaignEvents.CanHeroBecomePrisonerEvent.AddNonSerializedListener(this, new ReferenceAction<Hero, bool>(this.OnCanHeroBecomePrisonerInfoIsRequested));
			}

			// Token: 0x06004DA5 RID: 19877 RVA: 0x00158CD9 File Offset: 0x00156ED9
			private void OnCanHeroBecomePrisonerInfoIsRequested(Hero hero, ref bool result)
			{
				if (hero == Hero.MainHero && this._checkForEventEnd)
				{
					result = false;
				}
			}

			// Token: 0x06004DA6 RID: 19878 RVA: 0x00158CF0 File Offset: 0x00156EF0
			private void OnMapEventEnd(MapEvent obj)
			{
				if (this._checkForEventEnd)
				{
					if (PlayerEncounter.Battle.WinningSide == BattleSideEnum.None)
					{
						this.QuestFailWithPlayerDefeatedAgainstLesserNobleParty();
					}
					else if (PlayerEncounter.Battle.WinningSide == PlayerEncounter.Battle.PlayerSide)
					{
						this.QuestSuccessWithPlayerDefeatedLesserNobleParty();
					}
					else
					{
						this.QuestFailWithPlayerDefeatedAgainstLesserNobleParty();
					}
					if (this._lesserNobleParty.IsActive)
					{
						DestroyPartyAction.Apply(PartyBase.MainParty, this._lesserNobleParty);
					}
					this._checkForEventEnd = false;
				}
			}

			// Token: 0x06004DA7 RID: 19879 RVA: 0x00158D64 File Offset: 0x00156F64
			private void OnGameMenuOpened(MenuCallbackArgs args)
			{
				if (args.MenuContext.GameMenu.StringId == "encounter" && PlayerEncounter.Battle != null && PlayerEncounter.Battle.InvolvedParties.Contains(this._lesserNobleParty.Party) && PlayerEncounter.Battle.State == MapEventState.Wait && MapEvent.PlayerMapEvent != null && MapEvent.PlayerMapEvent.InvolvedParties.Contains(this._lesserNobleParty.Party))
				{
					foreach (PartyBase partyBase in MapEvent.PlayerMapEvent.InvolvedParties.ToList<PartyBase>())
					{
						if (partyBase.IsMobile && partyBase.MobileParty.IsMilitia)
						{
							partyBase.MapEventSide = null;
						}
					}
				}
			}

			// Token: 0x06004DA8 RID: 19880 RVA: 0x00158E50 File Offset: 0x00157050
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
				if (base.IsOngoing && attackerParty == PartyBase.MainParty && defenderParty == this._lesserNobleParty.Party)
				{
					this._checkForEventEnd = true;
				}
			}

			// Token: 0x06004DA9 RID: 19881 RVA: 0x00158E88 File Offset: 0x00157088
			private void HourlyTickParty(MobileParty mobileParty)
			{
				if (mobileParty == this._lesserNobleParty)
				{
					if (this._lesserNobleParty.TargetSettlement == null)
					{
						if (this._goOutFromSettlementAfterHoursCounter > 0)
						{
							this._goOutFromSettlementAfterHoursCounter--;
						}
						if (this._goOutFromSettlementAfterHoursCounter == 0)
						{
							if (this._suitableVillagesToVisitList.Count == 0)
							{
								this.CollectSuitableVillages();
							}
							if (this._suitableVillagesToVisitList.Count > 0)
							{
								IOrderedEnumerable<Settlement> orderedEnumerable = this._suitableVillagesToVisitList.OrderBy((Settlement x) => x.Position2D.DistanceSquared(this._lesserNobleParty.Position2D));
								SetPartyAiAction.GetActionForVisitingSettlement(this._lesserNobleParty, orderedEnumerable.First<Settlement>());
							}
							else
							{
								this._goOutFromSettlementAfterHoursCounter = 5;
							}
						}
					}
					if (this._giveNotificationAfterHoursCounter > 0)
					{
						this._giveNotificationAfterHoursCounter--;
					}
					if (this._giveNotificationAfterHoursCounter == 0 && this._visitedVillagesList.Count > 0)
					{
						TextObject questLesserNoblePartyLocationLog = this.QuestLesserNoblePartyLocationLog;
						questLesserNoblePartyLocationLog.SetTextVariable("VILLAGE", this._visitedVillagesList[this._visitedVillagesList.Count - 1].EncyclopediaLinkWithName);
						MBInformationManager.AddQuickInformation(questLesserNoblePartyLocationLog, 0, null, "");
						base.AddLog(questLesserNoblePartyLocationLog, false);
						foreach (Settlement settlement in this._visitedVillagesList)
						{
							if (base.IsTracked(settlement))
							{
								base.RemoveTrackedObject(settlement);
							}
						}
						base.AddTrackedObject(this._visitedVillagesList[this._visitedVillagesList.Count - 1]);
						this._giveNotificationAfterHoursCounter = -1;
					}
				}
			}

			// Token: 0x06004DAA RID: 19882 RVA: 0x00159010 File Offset: 0x00157210
			private void OnSettlementEntered(MobileParty party, Settlement settlement, Hero hero)
			{
				if (party == this._lesserNobleParty)
				{
					this._visitedVillagesList.Add(settlement);
					this._suitableVillagesToVisitList.Remove(settlement);
					this._goOutFromSettlementAfterHoursCounter = 5;
					this._giveNotificationAfterHoursCounter = 9;
					if (80 > this._lesserNobleParty.MemberRoster.TotalManCount)
					{
						this._lesserNobleParty.MemberRoster.AddToCounts(((double)MBRandom.RandomFloat < 0.7) ? this._tier5Troop : this._tier6Troop, (MBRandom.RandomFloat < 0.5f) ? 3 : 4, false, 0, 0, true, -1);
					}
					this._lesserNobleParty.ItemRoster.AddToCounts(DefaultItems.Grain, 5);
					this._discreteLog.UpdateCurrentProgress(this._discreteLog.CurrentProgress + 1);
					if (this._discreteLog.CurrentProgress == 20)
					{
						this.OnTimedOut();
						base.CompleteQuestWithFail(null);
					}
				}
			}

			// Token: 0x06004DAB RID: 19883 RVA: 0x001590F5 File Offset: 0x001572F5
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this.QuestCanceledWarDeclared);
				}
			}

			// Token: 0x06004DAC RID: 19884 RVA: 0x0015911F File Offset: 0x0015731F
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.PlayerDeclaredWarQuestLogText, this.QuestCanceledWarDeclared);
			}

			// Token: 0x06004DAD RID: 19885 RVA: 0x00159136 File Offset: 0x00157336
			protected override void OnFinalize()
			{
				if (this._lesserNobleParty.IsActive)
				{
					DestroyPartyAction.Apply(null, this._lesserNobleParty);
				}
			}

			// Token: 0x06004DAE RID: 19886 RVA: 0x00159154 File Offset: 0x00157354
			protected override void InitializeQuestOnGameLoad()
			{
				this._tier5Troop = CharacterHelper.GetTroopTree(base.QuestGiver.Culture.EliteBasicTroop, 5f, 5f).First<CharacterObject>();
				this._tier6Troop = CharacterHelper.GetTroopTree(base.QuestGiver.Culture.EliteBasicTroop, 6f, 6f).First<CharacterObject>();
				this.SetDialogs();
			}

			// Token: 0x04001A25 RID: 6693
			private const int NeededVillageVisitCount = 20;

			// Token: 0x04001A26 RID: 6694
			private const int GoOutFromSettlementAfterHours = 5;

			// Token: 0x04001A27 RID: 6695
			private const int MinTroopToRecruit = 3;

			// Token: 0x04001A28 RID: 6696
			private const int MaxTroopToRecruit = 4;

			// Token: 0x04001A29 RID: 6697
			private const int NoblePartyMemberMaxLimitAtStart = 40;

			// Token: 0x04001A2A RID: 6698
			private const int LesserNoblePartySizeLimit = 80;

			// Token: 0x04001A2B RID: 6699
			[SaveableField(10)]
			private bool _checkForEventEnd;

			// Token: 0x04001A2C RID: 6700
			[SaveableField(20)]
			private TextObject _lesserNobleName;

			// Token: 0x04001A2D RID: 6701
			[SaveableField(30)]
			private MobileParty _lesserNobleParty;

			// Token: 0x04001A2E RID: 6702
			[SaveableField(50)]
			private List<Settlement> _suitableVillagesToVisitList;

			// Token: 0x04001A2F RID: 6703
			[SaveableField(60)]
			private List<Settlement> _visitedVillagesList;

			// Token: 0x04001A30 RID: 6704
			[SaveableField(70)]
			private bool _persuasionTriedOnce;

			// Token: 0x04001A31 RID: 6705
			[SaveableField(80)]
			private bool _firstTalkIsDone;

			// Token: 0x04001A32 RID: 6706
			[SaveableField(90)]
			private int _goOutFromSettlementAfterHoursCounter;

			// Token: 0x04001A33 RID: 6707
			[SaveableField(120)]
			private int _giveNotificationAfterHoursCounter;

			// Token: 0x04001A34 RID: 6708
			[SaveableField(100)]
			private JournalLog _discreteLog;

			// Token: 0x04001A35 RID: 6709
			[SaveableField(130)]
			private int _rewardGold;

			// Token: 0x04001A36 RID: 6710
			private CharacterObject _tier5Troop;

			// Token: 0x04001A37 RID: 6711
			private CharacterObject _tier6Troop;

			// Token: 0x04001A38 RID: 6712
			private PersuasionTask _task;

			// Token: 0x04001A39 RID: 6713
			private const PersuasionDifficulty Difficulty = PersuasionDifficulty.MediumHard;
		}

		// Token: 0x02000641 RID: 1601
		public class LesserNobleRevoltIssueBehaviorTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004DB5 RID: 19893 RVA: 0x0015923A File Offset: 0x0015743A
			public LesserNobleRevoltIssueBehaviorTypeDefiner()
				: base(870000)
			{
			}

			// Token: 0x06004DB6 RID: 19894 RVA: 0x00159247 File Offset: 0x00157447
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssue), 1, null);
				base.AddClassDefinition(typeof(LesserNobleRevoltIssueBehavior.LesserNobleRevoltIssueQuest), 2, null);
			}
		}
	}
}
