using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x0200030C RID: 780
	public class HeadmanNeedsToDeliverAHerdIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002CD5 RID: 11477 RVA: 0x000BB236 File Offset: 0x000B9436
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002CD6 RID: 11478 RVA: 0x000BB24F File Offset: 0x000B944F
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002CD7 RID: 11479 RVA: 0x000BB254 File Offset: 0x000B9454
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002CD8 RID: 11480 RVA: 0x000BB2B8 File Offset: 0x000B94B8
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.CurrentSettlement != null && issueGiver.CurrentSettlement.IsVillage && HeadmanNeedsToDeliverAHerdIssueBehavior.IsVillageSuitableForIssue(issueGiver.CurrentSettlement.Village) && (issueGiver.IsHeadman || issueGiver.IsRuralNotable) && issueGiver.CurrentSettlement.Village.Bound.Notables.Count > 0 && issueGiver.CurrentSettlement.Village.Bound.Town.Security <= 60f;
		}

		// Token: 0x06002CD9 RID: 11481 RVA: 0x000BB340 File Offset: 0x000B9540
		private static bool IsVillageSuitableForIssue(Village village)
		{
			return !village.Bound.IsCastle && (village.VillageType == DefaultVillageTypes.BattanianHorseRanch || village.VillageType == DefaultVillageTypes.DesertHorseRanch || village.VillageType == DefaultVillageTypes.EuropeHorseRanch || village.VillageType == DefaultVillageTypes.SteppeHorseRanch || village.VillageType == DefaultVillageTypes.SturgianHorseRanch || village.VillageType == DefaultVillageTypes.VlandianHorseRanch || village.VillageType == DefaultVillageTypes.CattleRange || village.VillageType == DefaultVillageTypes.SheepFarm || village.VillageType == DefaultVillageTypes.HogFarm);
		}

		// Token: 0x06002CDA RID: 11482 RVA: 0x000BB3D3 File Offset: 0x000B95D3
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			this._headmanNeedsToDeliverAHerdIssue = new HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue(issueOwner);
			return this._headmanNeedsToDeliverAHerdIssue;
		}

		// Token: 0x04000D87 RID: 3463
		private const IssueBase.IssueFrequency HeadmanNeedsToDeliverAHerdIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x04000D88 RID: 3464
		[SaveableField(216)]
		private HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue _headmanNeedsToDeliverAHerdIssue;

		// Token: 0x02000625 RID: 1573
		public class HeadmanNeedsToDeliverAHerdIssue : IssueBase
		{
			// Token: 0x06004A8D RID: 19085 RVA: 0x0014C9F0 File Offset: 0x0014ABF0
			internal static void AutoGeneratedStaticCollectObjectsHeadmanNeedsToDeliverAHerdIssue(object o, List<object> collectedObjects)
			{
				((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004A8E RID: 19086 RVA: 0x0014C9FE File Offset: 0x0014ABFE
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._targetSettlement);
				collectedObjects.Add(this._targetHero);
				collectedObjects.Add(this._herdTypeToDeliver);
			}

			// Token: 0x06004A8F RID: 19087 RVA: 0x0014CA2B File Offset: 0x0014AC2B
			internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue)o)._targetSettlement;
			}

			// Token: 0x06004A90 RID: 19088 RVA: 0x0014CA38 File Offset: 0x0014AC38
			internal static object AutoGeneratedGetMemberValue_targetHero(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue)o)._targetHero;
			}

			// Token: 0x06004A91 RID: 19089 RVA: 0x0014CA45 File Offset: 0x0014AC45
			internal static object AutoGeneratedGetMemberValue_herdTypeToDeliver(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue)o)._herdTypeToDeliver;
			}

			// Token: 0x17000F68 RID: 3944
			// (get) Token: 0x06004A92 RID: 19090 RVA: 0x0014CA52 File Offset: 0x0014AC52
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Duration;
				}
			}

			// Token: 0x17000F69 RID: 3945
			// (get) Token: 0x06004A93 RID: 19091 RVA: 0x0014CA55 File Offset: 0x0014AC55
			private int AnimalCountToDeliver
			{
				get
				{
					return (int)MathF.Clamp((float)MathF.Round(5000f * base.IssueDifficultyMultiplier / (float)this._herdTypeToDeliver.Value), 10f, 75f);
				}
			}

			// Token: 0x17000F6A RID: 3946
			// (get) Token: 0x06004A94 RID: 19092 RVA: 0x0014CA86 File Offset: 0x0014AC86
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 6 + MathF.Ceiling(14f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F6B RID: 3947
			// (get) Token: 0x06004A95 RID: 19093 RVA: 0x0014CA9B File Offset: 0x0014AC9B
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 5 + MathF.Ceiling(5f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F6C RID: 3948
			// (get) Token: 0x06004A96 RID: 19094 RVA: 0x0014CAB0 File Offset: 0x0014ACB0
			protected override int RewardGold
			{
				get
				{
					return 300 + (int)((float)this._herdTypeToDeliver.Value * 0.75f * (float)this.AnimalCountToDeliver);
				}
			}

			// Token: 0x17000F6D RID: 3949
			// (get) Token: 0x06004A97 RID: 19095 RVA: 0x0014CAD3 File Offset: 0x0014ACD3
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=kDIi3bLN}The village needs someone to take a herd to {TARGET_SETTLEMENT}.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17000F6E RID: 3950
			// (get) Token: 0x06004A98 RID: 19096 RVA: 0x0014CAF8 File Offset: 0x0014ACF8
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=7H4HQNvF}Some of the families in this village need to raise a bit of money. They've put together a herd of {ANIMAL_COUNT_TO_DELIVER} {.%}{?ANIMAL_COUNT_TO_DELIVER > 1}{PLURAL(HERD_TYPE_TO_DELIVER)}{?}{HERD_TYPE_TO_DELIVER}{\\?}{.%} to sell in {TARGET_SETTLEMENT}, but with all the banditry on the roads, they can't drive it there on their own. We're not merchants or landowners. We can't afford any losses.", null);
					if (base.IssueOwner.CharacterObject.GetPersona() == DefaultTraits.PersonaCurt)
					{
						textObject = new TextObject("{=6kJ31qut}Yeah, well, some people here are a bit short of money these days. They've put together a herd of {ANIMAL_COUNT_TO_DELIVER} {.%}{?ANIMAL_COUNT_TO_DELIVER > 1}{PLURAL(HERD_TYPE_TO_DELIVER)}{?}{HERD_TYPE_TO_DELIVER}{\\?}{.%} to sell in {TARGET_SETTLEMENT}. But they're poor folks. Not really fighters, and they can't afford to hire guards. If they go there by themselves they'd be sitting ducks for any bandits.", null);
					}
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("ANIMAL_COUNT_TO_DELIVER", this.AnimalCountToDeliver);
					textObject.SetTextVariable("HERD_TYPE_TO_DELIVER", this._herdTypeToDeliver.Name);
					return textObject;
				}
			}

			// Token: 0x17000F6F RID: 3951
			// (get) Token: 0x06004A99 RID: 19097 RVA: 0x0014CB75 File Offset: 0x0014AD75
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=lmJYF6pQ}Tell me how I can help.", null);
				}
			}

			// Token: 0x17000F70 RID: 3952
			// (get) Token: 0x06004A9A RID: 19098 RVA: 0x0014CB84 File Offset: 0x0014AD84
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=VbRyXBsv}If you're going in the direction of {TARGET_SETTLEMENT}, you can perhaps take our herd there to {TARGET_HERO.LINK}. I am willing to pay {REWARD_AMOUNT}{GOLD_ICON} if you deliver them safe and sound.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("REWARD_AMOUNT", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					StringHelpers.SetCharacterProperties("TARGET_HERO", this._targetHero.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F71 RID: 3953
			// (get) Token: 0x06004A9B RID: 19099 RVA: 0x0014CBF0 File Offset: 0x0014ADF0
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=CqmoyrHH}You can assign a companion with {REQUIRED_SOLDIERS} men, they will be enough too. Both ways works fine for us. I promise if you or your men manage to deliver the herd safely, I will pay you {REWARD}{GOLD_ICON}. So what do you say?", null);
					textObject.SetTextVariable("REQUIRED_SOLDIERS", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("REWARD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F72 RID: 3954
			// (get) Token: 0x06004A9C RID: 19100 RVA: 0x0014CC40 File Offset: 0x0014AE40
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=MJdVfS4z}Don't worry. I will deliver your {ANIMAL_COUNT_TO_DELIVER} {.%}{?ANIMAL_COUNT_TO_DELIVER > 1}{PLURAL(HERD_TYPE_TO_DELIVER)}{?}{HERD_TYPE_TO_DELIVER}{\\?}{.%} personally to {TARGET_HERO.LINK} in {TARGET_SETTLEMENT}.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					textObject.SetTextVariable("ANIMAL_COUNT_TO_DELIVER", this.AnimalCountToDeliver);
					textObject.SetTextVariable("HERD_TYPE_TO_DELIVER", this._herdTypeToDeliver.Name);
					StringHelpers.SetCharacterProperties("TARGET_HERO", this._targetHero.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F73 RID: 3955
			// (get) Token: 0x06004A9D RID: 19101 RVA: 0x0014CCB4 File Offset: 0x0014AEB4
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=k8W02aj9}I will assign a companion with {NEEDED_MEN_COUNT} of my men to deliver {ANIMAL_COUNT_TO_DELIVER} {.%}{?ANIMAL_COUNT_TO_DELIVER > 1}{PLURAL(HERD_TYPE_TO_DELIVER)}{?}{HERD_TYPE_TO_DELIVER}{\\?}{.%} safely.", null);
					textObject.SetTextVariable("NEEDED_MEN_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("ANIMAL_COUNT_TO_DELIVER", this.AnimalCountToDeliver);
					textObject.SetTextVariable("HERD_TYPE_TO_DELIVER", this._herdTypeToDeliver.Name);
					return textObject;
				}
			}

			// Token: 0x17000F74 RID: 3956
			// (get) Token: 0x06004A9E RID: 19102 RVA: 0x0014CD07 File Offset: 0x0014AF07
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					TextObject textObject = new TextObject("{=mwpY5Ylb}I am still waiting for news from {TARGET_SETTLEMENT}. Once again, I appreciate that you could spare the men to do this.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000F75 RID: 3957
			// (get) Token: 0x06004A9F RID: 19103 RVA: 0x0014CD2C File Offset: 0x0014AF2C
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=BJxJwCc5}Thank you, {?PLAYER.GENDER}madam{?}sir{\\?}. Any brigands would be most unwise to tangle with you.", null);
					if (base.IssueOwner.CharacterObject.GetPersona() == DefaultTraits.PersonaCurt)
					{
						textObject = new TextObject("{=muE5fcOf}Good. Anyone gives you trouble... Well, you look like you could handle them.", null);
					}
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F76 RID: 3958
			// (get) Token: 0x06004AA0 RID: 19104 RVA: 0x0014CD7C File Offset: 0x0014AF7C
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=m2h6zMp7}{ISSUE_GIVER.LINK}, the headman from {SETTLEMENT}, has asked you to deliver some of the village's livestock to {SETTLEMENT_TARGET}. The villagers can't afford their own guards and also can't afford any losses. {ISSUE_GIVER.LINK} offers {REWARD_AMOUNT}{GOLD_ICON} for the herd's delivery. You sent {COMPANION.LINK} with {NEEDED_MEN_COUNT} of your men to protect the herd. They should return to you with news of their success in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("SETTLEMENT_TARGET", this._targetSettlement.Name);
					textObject.SetTextVariable("NEEDED_MEN_COUNT", this.AlternativeSolutionSentTroops.TotalManCount - 1);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("REWARD_AMOUNT", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x17000F77 RID: 3959
			// (get) Token: 0x06004AA1 RID: 19105 RVA: 0x0014CE47 File Offset: 0x0014B047
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17000F78 RID: 3960
			// (get) Token: 0x06004AA2 RID: 19106 RVA: 0x0014CE4A File Offset: 0x0014B04A
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F79 RID: 3961
			// (get) Token: 0x06004AA3 RID: 19107 RVA: 0x0014CE50 File Offset: 0x0014B050
			public override TextObject IssueAsRumorInSettlement
			{
				get
				{
					TextObject textObject = new TextObject("{=cvZH3cI1}I hope {QUEST_GIVER.NAME} has a plan to get that herd to market.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F7A RID: 3962
			// (get) Token: 0x06004AA4 RID: 19108 RVA: 0x0014CE82 File Offset: 0x0014B082
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(500f + 700f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F7B RID: 3963
			// (get) Token: 0x06004AA5 RID: 19109 RVA: 0x0014CE97 File Offset: 0x0014B097
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=KhUkmIrH}Deliver the herd to {TARGET_SETTLEMENT}", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x06004AA6 RID: 19110 RVA: 0x0014CEBC File Offset: 0x0014B0BC
			public HeadmanNeedsToDeliverAHerdIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
				HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue <>4__this = this;
				Settlement settlement = SettlementHelper.FindRandomSettlement(delegate(Settlement x)
				{
					if (x.IsTown)
					{
						float num;
						if (x.Notables.Any((Hero y) => y.CanHaveQuestsOrIssues()) && !x.MapFaction.IsAtWarWith(issueOwner.MapFaction) && !Campaign.Current.Models.MapDistanceModel.GetDistance(x, <>4__this.IssueSettlement, 100f, out num))
						{
							return Campaign.Current.Models.MapDistanceModel.GetDistance(x, <>4__this.IssueSettlement, 250f, out num);
						}
					}
					return false;
				});
				this._targetSettlement = settlement ?? base.IssueSettlement.Village.Bound;
				this._herdTypeToDeliver = Campaign.Current.ObjectManager.GetObject<ItemObject>(this._possibleHerdTypes.GetRandomElement<string>());
				if (this._targetSettlement != null)
				{
					this._targetHero = this._targetSettlement.Notables.GetRandomElementWithPredicate((Hero x) => x.CanHaveQuestsOrIssues()) ?? this._targetSettlement.Notables.GetRandomElement<Hero>();
				}
			}

			// Token: 0x06004AA7 RID: 19111 RVA: 0x0014CFBD File Offset: 0x0014B1BD
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementProsperity)
				{
					return -0.2f;
				}
				return 0f;
			}

			// Token: 0x06004AA8 RID: 19112 RVA: 0x0014CFD2 File Offset: 0x0014B1D2
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Riding) >= hero.GetSkillValue(DefaultSkills.Scouting)) ? DefaultSkills.Riding : DefaultSkills.Scouting, 120);
			}

			// Token: 0x06004AA9 RID: 19113 RVA: 0x0014CFFF File Offset: 0x0014B1FF
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004AAA RID: 19114 RVA: 0x0014D017 File Offset: 0x0014B217
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			// Token: 0x06004AAB RID: 19115 RVA: 0x0014D028 File Offset: 0x0014B228
			public override bool IssueStayAliveConditions()
			{
				return !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid && this._targetHero.IsActive && base.IssueOwner.CurrentSettlement.Village.Bound.Town.Security <= 70f;
			}

			// Token: 0x06004AAC RID: 19116 RVA: 0x0014D091 File Offset: 0x0014B291
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x06004AAD RID: 19117 RVA: 0x0014D093 File Offset: 0x0014B293
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004AAE RID: 19118 RVA: 0x0014D0B4 File Offset: 0x0014B2B4
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				this.ApplySuccessRewards(base.IssueOwner);
			}

			// Token: 0x06004AAF RID: 19119 RVA: 0x0014D0C2 File Offset: 0x0014B2C2
			private void ApplySuccessRewards(Hero issueGiver)
			{
				issueGiver.AddPower(5f);
				this.RelationshipChangeWithIssueOwner = 5;
				issueGiver.CurrentSettlement.Prosperity += 50f;
			}

			// Token: 0x06004AB0 RID: 19120 RVA: 0x0014D0ED File Offset: 0x0014B2ED
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004AB1 RID: 19121 RVA: 0x0014D0EF File Offset: 0x0014B2EF
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(30f), this.AnimalCountToDeliver, this._herdTypeToDeliver, this._targetSettlement, this.RewardGold, this._targetHero);
			}

			// Token: 0x06004AB2 RID: 19122 RVA: 0x0014D125 File Offset: 0x0014B325
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x06004AB3 RID: 19123 RVA: 0x0014D128 File Offset: 0x0014B328
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (issueGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x040019B1 RID: 6577
			private const float MaxDistanceForSettlementSelection = 250f;

			// Token: 0x040019B2 RID: 6578
			private const float MinDistanceForSettlementSelection = 100f;

			// Token: 0x040019B3 RID: 6579
			private const int IssueDuration = 30;

			// Token: 0x040019B4 RID: 6580
			private const int QuestTimeLimit = 30;

			// Token: 0x040019B5 RID: 6581
			private const int AlternativeSolutionTroopTierRequirement = 2;

			// Token: 0x040019B6 RID: 6582
			private const int RequiredSkillForSendingCompanion = 120;

			// Token: 0x040019B7 RID: 6583
			[CachedData]
			private readonly MBList<string> _possibleHerdTypes = new MBList<string> { "sheep", "cow", "hog" };

			// Token: 0x040019B8 RID: 6584
			[SaveableField(10)]
			private Settlement _targetSettlement;

			// Token: 0x040019B9 RID: 6585
			[SaveableField(20)]
			private Hero _targetHero;

			// Token: 0x040019BA RID: 6586
			[SaveableField(30)]
			private ItemObject _herdTypeToDeliver;
		}

		// Token: 0x02000626 RID: 1574
		public class HeadmanNeedsToDeliverAHerdIssueQuest : QuestBase
		{
			// Token: 0x06004AB4 RID: 19124 RVA: 0x0014D17D File Offset: 0x0014B37D
			internal static void AutoGeneratedStaticCollectObjectsHeadmanNeedsToDeliverAHerdIssueQuest(object o, List<object> collectedObjects)
			{
				((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004AB5 RID: 19125 RVA: 0x0014D18B File Offset: 0x0014B38B
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._targetSettlement);
				collectedObjects.Add(this._targetHero);
				collectedObjects.Add(this._herdTypeToDeliver);
				collectedObjects.Add(this._playerStartsQuestLog);
			}

			// Token: 0x06004AB6 RID: 19126 RVA: 0x0014D1C4 File Offset: 0x0014B3C4
			internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest)o)._targetSettlement;
			}

			// Token: 0x06004AB7 RID: 19127 RVA: 0x0014D1D1 File Offset: 0x0014B3D1
			internal static object AutoGeneratedGetMemberValue_targetHero(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest)o)._targetHero;
			}

			// Token: 0x06004AB8 RID: 19128 RVA: 0x0014D1DE File Offset: 0x0014B3DE
			internal static object AutoGeneratedGetMemberValue_herdTypeToDeliver(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest)o)._herdTypeToDeliver;
			}

			// Token: 0x06004AB9 RID: 19129 RVA: 0x0014D1EB File Offset: 0x0014B3EB
			internal static object AutoGeneratedGetMemberValue_animalCountToDeliver(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest)o)._animalCountToDeliver;
			}

			// Token: 0x06004ABA RID: 19130 RVA: 0x0014D1FD File Offset: 0x0014B3FD
			internal static object AutoGeneratedGetMemberValue_rewardGold(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest)o)._rewardGold;
			}

			// Token: 0x06004ABB RID: 19131 RVA: 0x0014D20F File Offset: 0x0014B40F
			internal static object AutoGeneratedGetMemberValue_playerStartsQuestLog(object o)
			{
				return ((HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest)o)._playerStartsQuestLog;
			}

			// Token: 0x17000F7C RID: 3964
			// (get) Token: 0x06004ABC RID: 19132 RVA: 0x0014D21C File Offset: 0x0014B41C
			public sealed override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=KhUkmIrH}Deliver the herd to {TARGET_SETTLEMENT}", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17000F7D RID: 3965
			// (get) Token: 0x06004ABD RID: 19133 RVA: 0x0014D240 File Offset: 0x0014B440
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F7E RID: 3966
			// (get) Token: 0x06004ABE RID: 19134 RVA: 0x0014D244 File Offset: 0x0014B444
			private TextObject _playerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=wsGDDXPN}{QUEST_GIVER.LINK}, the headman from {QUEST_GIVER_SETTLEMENT} has asked you to deliver {ANIMAL_COUNT_TO_DELIVER} {.%}{?ANIMAL_COUNT_TO_DELIVER > 1}{PLURAL(HERD_TYPE_TO_DELIVER)}{?}{HERD_TYPE_TO_DELIVER}{\\?}{.%} to {TARGET_HERO.LINK} in {TARGET_SETTLEMENT}. {?QUEST_GIVER.GENDER}She{?}He{\\?} fears such a large herd will attract attention from the brigands on the way. {QUEST_GIVER.LINK} offers {REWARD_AMOUNT}{GOLD_ICON} for the herd's delivery.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("TARGET_HERO", this._targetHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("ANIMAL_COUNT_TO_DELIVER", this._animalCountToDeliver);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("HERD_TYPE_TO_DELIVER", this._herdTypeToDeliver.Name);
					textObject.SetTextVariable("REWARD_AMOUNT", this._rewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F7F RID: 3967
			// (get) Token: 0x06004ABF RID: 19135 RVA: 0x0014D310 File Offset: 0x0014B510
			private TextObject _successQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=6IKKFH3A}You have received a message and a large purse from {QUEST_GIVER.LINK}. The missive reads: ”The herd is safe. Thank you, and please accept these {REWARD}{GOLD_ICON} with our gratitude.”.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("REWARD", this._rewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F80 RID: 3968
			// (get) Token: 0x06004AC0 RID: 19136 RVA: 0x0014D368 File Offset: 0x0014B568
			private TextObject _failByTimeOutQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=hhrRnSvr}You failed to deliver the herd in time, as {QUEST_GIVER.LINK} has asked of you. The shepherds and the herd left you.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F81 RID: 3969
			// (get) Token: 0x06004AC1 RID: 19137 RVA: 0x0014D3AC File Offset: 0x0014B5AC
			private TextObject _failByRejectQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=MjwNHtQd}You rejected to deliver the herd, as {QUEST_GIVER.LINK} has asked of you. The shepherds have left you.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F82 RID: 3970
			// (get) Token: 0x06004AC2 RID: 19138 RVA: 0x0014D3F0 File Offset: 0x0014B5F0
			private TextObject _questCanceledWarDeclaredLog
			{
				get
				{
					TextObject textObject = new TextObject("{=vW6kBki9}Your clan is now at war with {QUEST_GIVER.LINK}'s realm. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F83 RID: 3971
			// (get) Token: 0x06004AC3 RID: 19139 RVA: 0x0014D424 File Offset: 0x0014B624
			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x06004AC4 RID: 19140 RVA: 0x0014D458 File Offset: 0x0014B658
			public HeadmanNeedsToDeliverAHerdIssueQuest(string questId, Hero questGiver, CampaignTime duration, int animalCountToDeliver, ItemObject herdTypeToDeliver, Settlement targetSettlement, int rewardGold, Hero targetHero)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._animalCountToDeliver = animalCountToDeliver;
				this._herdTypeToDeliver = herdTypeToDeliver;
				this._targetSettlement = targetSettlement;
				this._rewardGold = rewardGold;
				this._targetHero = targetHero;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004AC5 RID: 19141 RVA: 0x0014D4A4 File Offset: 0x0014B6A4
			protected override void SetDialogs()
			{
				TextObject textObject = new TextObject("{=iUQuwAZY}Thank you, {?PLAYER.GENDER}madam{?}sir{\\?}. The village will be grateful to you. Good luck.", null);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(textObject, null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=zB6elkn1}The herd is ready to depart.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=8tBET7S5}Good. We will be heading out soon.", null), null)
					.NpcLine(new TextObject("{=3SBDbPjD}Good to hear that! Safe journeys.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=EOaOlh39}In due time. Let's not be too hasty.", null), null)
					.NpcLine(new TextObject("{=ppi6eVos}As you wish.", null), null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x06004AC6 RID: 19142 RVA: 0x0014D5A4 File Offset: 0x0014B7A4
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				this._playerStartsQuestLog = base.AddLog(this._playerStartsQuestLogText, false);
				this.AddHerdAndShepherdsToMainParty();
				base.AddTrackedObject(this._targetSettlement);
				base.AddTrackedObject(this._targetHero);
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetDeliveryDialogFlow(), this);
			}

			// Token: 0x06004AC7 RID: 19143 RVA: 0x0014D600 File Offset: 0x0014B800
			protected override void OnCompleteWithSuccess()
			{
				base.QuestGiver.AddPower(5f);
				this.RelationshipChangeWithQuestGiver = 5;
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				base.QuestGiver.CurrentSettlement.Prosperity += 50f;
				this._targetSettlement.Prosperity += 50f;
				int availableRequestedItemCountOnPlayer = this.GetAvailableRequestedItemCountOnPlayer(this._herdTypeToDeliver);
				int num = ((availableRequestedItemCountOnPlayer > this._animalCountToDeliver) ? this._animalCountToDeliver : availableRequestedItemCountOnPlayer);
				foreach (ItemRosterElement itemRosterElement in MobileParty.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item == this._herdTypeToDeliver)
					{
						int amount = itemRosterElement.Amount;
						if (amount >= num)
						{
							PartyBase.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -num);
							this._targetSettlement.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, num);
							break;
						}
						num -= amount;
						PartyBase.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -amount);
						this._targetSettlement.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, amount);
					}
				}
				GiveGoldAction.ApplyForQuestBetweenCharacters(base.QuestGiver, Hero.MainHero, this._rewardGold, false);
				base.AddLog(this._successQuestLogText, false);
			}

			// Token: 0x06004AC8 RID: 19144 RVA: 0x0014D794 File Offset: 0x0014B994
			protected override void OnFinalize()
			{
				base.RemoveTrackedObject(this._targetSettlement);
				base.RemoveTrackedObject(this._targetHero);
			}

			// Token: 0x06004AC9 RID: 19145 RVA: 0x0014D7B0 File Offset: 0x0014B9B0
			private DialogFlow GetDeliveryDialogFlow()
			{
				TextObject textObject = new TextObject("{=8nwZXNTk}About the task {QUEST_GIVER.LINK} gave me...", null);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
				TextObject textObject2 = new TextObject("{=kwJBLl00}Yes {?PLAYER.GENDER}madam{?}sir{\\?}. Our mutual friend {QUEST_GIVER.LINK} sent word to us. {?QUEST_GIVER.GENDER}She{?}He{\\?} told us to expect you with {?QUEST_GIVER.GENDER}her{?}his{\\?} {HERD_AMOUNT} {.%}{?HERD_AMOUNT > 1}{PLURAL(HERD_TYPE)}{?}{HERD_TYPE}{\\?}{.%}.", null);
				TextObject textObject3 = new TextObject("{=vXCg3OYx}So, have you brought them?", null);
				textObject2.SetTextVariable("HERD_AMOUNT", this._animalCountToDeliver);
				textObject2.SetTextVariable("HERD_TYPE", this._herdTypeToDeliver.Name);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject2, false);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject2, false);
				TextObject textObject4 = new TextObject("{=wmZYHGb9}I brought {HERD_AMOUNT} {.%}{?HERD_AMOUNT > 1}{PLURAL(HERD_TYPE)}{?}{HERD_TYPE}{\\?}{.%} as we agreed.", null);
				textObject4.SetTextVariable("HERD_AMOUNT", this._animalCountToDeliver);
				textObject4.SetTextVariable("HERD_TYPE", this._herdTypeToDeliver.Name);
				TextObject textObject5 = new TextObject("{=VkUMPAfR}Thank you for your help. {QUEST_GIVER.LINK} will send your reward as soon as possible.", null);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject5, false);
				TextObject textObject6 = new TextObject("{=1s54uxsA}Sorry. I don't have any animals for you this time.", null);
				TextObject textObject7 = new TextObject("{=1dUVrgQ8}I just hope you can deliver the herd soon.", null);
				TextObject textObject8 = new TextObject("{=HFZisEnI}I'm going to keep that herd for myself.", null);
				TextObject textObject9 = new TextObject("{=LpfQYLQo}What? That's straight-up theft. I guarantee you {QUEST_GIVER.LINK} will hear about this!", null);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject9, false);
				return DialogFlow.CreateDialogFlow("hero_main_options", 125).PlayerLine(textObject, null).Condition(() => Settlement.CurrentSettlement == this._targetSettlement && CharacterObject.OneToOneConversationCharacter.IsHero && CharacterObject.OneToOneConversationCharacter.HeroObject == this._targetHero)
					.NpcLine(textObject2, null, null)
					.NpcLine(textObject3, null, null)
					.BeginPlayerOptions()
					.PlayerOption(textObject4, null)
					.Condition(delegate
					{
						int availableRequestedItemCountOnPlayer = this.GetAvailableRequestedItemCountOnPlayer(this._herdTypeToDeliver);
						Campaign.Current.ConversationManager.GetCurrentDialogLine().SetTextVariable("HERD_AMOUNT", this._animalCountToDeliver);
						Campaign.Current.ConversationManager.GetCurrentDialogLine().SetTextVariable("HERD_TYPE", this._herdTypeToDeliver.Name);
						return availableRequestedItemCountOnPlayer >= this._animalCountToDeliver;
					})
					.NpcLine(textObject5, null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.DeliverHerdOnConsequence))
					.CloseDialog()
					.PlayerOption(textObject8, null)
					.NpcLine(textObject9, null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.DeliverHerdRejectOnConsequence))
					.CloseDialog()
					.PlayerOption(textObject6, null)
					.NpcLine(textObject7, null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x06004ACA RID: 19146 RVA: 0x0014D9AB File Offset: 0x0014BBAB
			private void DeliverHerdRejectOnConsequence()
			{
				ChangeCrimeRatingAction.Apply(base.QuestGiver.CurrentSettlement.MapFaction, 20f, true);
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004ACB RID: 19147 RVA: 0x0014D9CF File Offset: 0x0014BBCF
			private void DeliverHerdOnConsequence()
			{
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004ACC RID: 19148 RVA: 0x0014D9D8 File Offset: 0x0014BBD8
			private int GetAvailableRequestedItemCountOnPlayer(ItemObject item)
			{
				int num = 0;
				foreach (ItemRosterElement itemRosterElement in PartyBase.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item == item)
					{
						num += itemRosterElement.Amount;
					}
				}
				return num;
			}

			// Token: 0x06004ACD RID: 19149 RVA: 0x0014DA44 File Offset: 0x0014BC44
			public override void OnCanceled()
			{
				int availableRequestedItemCountOnPlayer = this.GetAvailableRequestedItemCountOnPlayer(this._herdTypeToDeliver);
				PartyBase.MainParty.ItemRoster.AddToCounts(this._herdTypeToDeliver, (availableRequestedItemCountOnPlayer > this._animalCountToDeliver) ? (-this._animalCountToDeliver) : (-availableRequestedItemCountOnPlayer));
			}

			// Token: 0x06004ACE RID: 19150 RVA: 0x0014DA88 File Offset: 0x0014BC88
			protected override void OnTimedOut()
			{
				this.ApplyFailureEffects(true);
				base.AddLog(this._failByTimeOutQuestLogText, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				this.RemoveRemainingHorses();
			}

			// Token: 0x06004ACF RID: 19151 RVA: 0x0014DAC5 File Offset: 0x0014BCC5
			public override void OnFailed()
			{
				this.ApplyFailureEffects(false);
				base.AddLog(this._failByRejectQuestLogText, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -30)
				});
			}

			// Token: 0x06004AD0 RID: 19152 RVA: 0x0014DAFC File Offset: 0x0014BCFC
			private void ApplyFailureEffects(bool isTimedOut = false)
			{
				base.QuestGiver.AddPower(-5f);
				this._targetSettlement.Prosperity -= 10f;
				this.RelationshipChangeWithQuestGiver = (isTimedOut ? (-5) : (-10));
			}

			// Token: 0x06004AD1 RID: 19153 RVA: 0x0014DB34 File Offset: 0x0014BD34
			private void RemoveRemainingHorses()
			{
				int num = this._animalCountToDeliver;
				foreach (ItemRosterElement itemRosterElement in MobileParty.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item == this._herdTypeToDeliver)
					{
						int amount = itemRosterElement.Amount;
						if (amount >= num)
						{
							PartyBase.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -num);
							break;
						}
						num -= amount;
						PartyBase.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -amount);
					}
				}
			}

			// Token: 0x06004AD2 RID: 19154 RVA: 0x0014DBE8 File Offset: 0x0014BDE8
			private void AddHerdAndShepherdsToMainParty()
			{
				MobileParty.MainParty.ItemRoster.AddToCounts(this._herdTypeToDeliver, this._animalCountToDeliver);
				MobileParty.MainParty.ItemRoster.AddToCounts(DefaultItems.Grain, 5);
				TextObject textObject = new TextObject("{=GgBtpOEm}{.%}{ANIMAL_COUNT} {?ANIMAL_COUNT > 1}{PLURAL(ANIMAL_TYPE)}{?}{ANIMAL_TYPE}{\\?}{.%} added to your party.", null);
				textObject.SetTextVariable("ANIMAL_COUNT", this._animalCountToDeliver);
				textObject.SetTextVariable("ANIMAL_TYPE", this._herdTypeToDeliver.Name);
				MBInformationManager.AddQuickInformation(textObject, 0, null, "");
			}

			// Token: 0x06004AD3 RID: 19155 RVA: 0x0014DC67 File Offset: 0x0014BE67
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetDeliveryDialogFlow(), this);
			}

			// Token: 0x06004AD4 RID: 19156 RVA: 0x0014DC88 File Offset: 0x0014BE88
			protected override void RegisterEvents()
			{
				CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, new Action<Hero, Hero, KillCharacterAction.KillCharacterActionDetail, bool>(this.OnHeroKilled));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			// Token: 0x06004AD5 RID: 19157 RVA: 0x0014DCF1 File Offset: 0x0014BEF1
			public override void OnHeroCanHaveQuestOrIssueInfoIsRequested(Hero hero, ref bool result)
			{
				if (hero == this._targetHero)
				{
					result = false;
				}
			}

			// Token: 0x06004AD6 RID: 19158 RVA: 0x0014DCFF File Offset: 0x0014BEFF
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x17000F84 RID: 3972
			// (get) Token: 0x06004AD7 RID: 19159 RVA: 0x0014DD12 File Offset: 0x0014BF12
			protected override TextObject TargetHeroDiedLogText
			{
				get
				{
					return new TextObject("{=m41vdhSR}{QUEST_TARGET.LINK} is no longer alive. It might not be your fault that you didn't get the herd to {?QUEST_TARGET.GENDER}her{?}him{\\?} in time, but many people will consider this breach of trust.", null);
				}
			}

			// Token: 0x06004AD8 RID: 19160 RVA: 0x0014DD20 File Offset: 0x0014BF20
			private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification)
			{
				if (victim == this._targetHero)
				{
					TextObject textObject = ((detail == KillCharacterAction.KillCharacterActionDetail.Lost) ? this.TargetHeroDisappearedLogText : this.TargetHeroDiedLogText);
					StringHelpers.SetCharacterProperties("QUEST_TARGET", this._targetHero.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					base.AddLog(textObject, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x06004AD9 RID: 19161 RVA: 0x0014DD89 File Offset: 0x0014BF89
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this._questCanceledWarDeclaredLog);
				}
			}

			// Token: 0x06004ADA RID: 19162 RVA: 0x0014DDB8 File Offset: 0x0014BFB8
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._questCanceledWarDeclaredLog);
			}

			// Token: 0x040019BB RID: 6587
			[SaveableField(10)]
			private readonly Settlement _targetSettlement;

			// Token: 0x040019BC RID: 6588
			[SaveableField(20)]
			private readonly Hero _targetHero;

			// Token: 0x040019BD RID: 6589
			[SaveableField(30)]
			private readonly ItemObject _herdTypeToDeliver;

			// Token: 0x040019BE RID: 6590
			[SaveableField(40)]
			private readonly int _animalCountToDeliver;

			// Token: 0x040019BF RID: 6591
			[SaveableField(70)]
			private int _rewardGold;

			// Token: 0x040019C0 RID: 6592
			[SaveableField(215)]
			private JournalLog _playerStartsQuestLog;
		}

		// Token: 0x02000627 RID: 1575
		public class HeadmanNeedsToDeliverAHerdIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004ADF RID: 19167 RVA: 0x0014DE85 File Offset: 0x0014C085
			public HeadmanNeedsToDeliverAHerdIssueTypeDefiner()
				: base(430000)
			{
			}

			// Token: 0x06004AE0 RID: 19168 RVA: 0x0014DE92 File Offset: 0x0014C092
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssue), 1, null);
				base.AddClassDefinition(typeof(HeadmanNeedsToDeliverAHerdIssueBehavior.HeadmanNeedsToDeliverAHerdIssueQuest), 2, null);
			}
		}
	}
}
