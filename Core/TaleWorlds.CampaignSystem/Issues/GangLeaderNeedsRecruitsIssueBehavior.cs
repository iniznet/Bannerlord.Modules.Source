using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000308 RID: 776
	public class GangLeaderNeedsRecruitsIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002CB6 RID: 11446 RVA: 0x000BADB4 File Offset: 0x000B8FB4
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002CB7 RID: 11447 RVA: 0x000BADCD File Offset: 0x000B8FCD
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002CB8 RID: 11448 RVA: 0x000BADCF File Offset: 0x000B8FCF
		private static bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.CurrentSettlement != null && issueGiver.IsGangLeader;
		}

		// Token: 0x06002CB9 RID: 11449 RVA: 0x000BADE4 File Offset: 0x000B8FE4
		public void OnCheckForIssue(Hero hero)
		{
			if (GangLeaderNeedsRecruitsIssueBehavior.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(GangLeaderNeedsRecruitsIssueBehavior.OnSelected), typeof(GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002CBA RID: 11450 RVA: 0x000BAE47 File Offset: 0x000B9047
		private static IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssue(issueOwner);
		}

		// Token: 0x04000D7D RID: 3453
		private const IssueBase.IssueFrequency GangLeaderNeedsRecruitsIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x02000618 RID: 1560
		public class GangLeaderNeedsRecruitsIssue : IssueBase
		{
			// Token: 0x0600493C RID: 18748 RVA: 0x00147F2A File Offset: 0x0014612A
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsRecruitsIssue(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x0600493D RID: 18749 RVA: 0x00147F38 File Offset: 0x00146138
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x17000F03 RID: 3843
			// (get) Token: 0x0600493E RID: 18750 RVA: 0x00147F41 File Offset: 0x00146141
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.RequiredTroops;
				}
			}

			// Token: 0x17000F04 RID: 3844
			// (get) Token: 0x0600493F RID: 18751 RVA: 0x00147F44 File Offset: 0x00146144
			private int RequestedRecruitCount
			{
				get
				{
					return 6 + MathF.Ceiling(10f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F05 RID: 3845
			// (get) Token: 0x06004940 RID: 18752 RVA: 0x00147F59 File Offset: 0x00146159
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 11 + MathF.Ceiling(9f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F06 RID: 3846
			// (get) Token: 0x06004941 RID: 18753 RVA: 0x00147F6F File Offset: 0x0014616F
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 6 + MathF.Ceiling(7f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F07 RID: 3847
			// (get) Token: 0x06004942 RID: 18754 RVA: 0x00147F84 File Offset: 0x00146184
			protected override int RewardGold
			{
				get
				{
					return 2000 + this.RequestedRecruitCount * 100;
				}
			}

			// Token: 0x17000F08 RID: 3848
			// (get) Token: 0x06004943 RID: 18755 RVA: 0x00147F95 File Offset: 0x00146195
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=YxtiyxSf}Yes... As you no doubt know, this is rough work, and I've lost a lot of good lads recently. I haven't had much luck replacing them. I need men who understand how things work in our business, and that's not always easy to find. I could use bandits and looters. They usually know their stuff. But if I take them in as prisoners, they'll just slip away as soon as I get the chance. I need volunteers...", null);
				}
			}

			// Token: 0x17000F09 RID: 3849
			// (get) Token: 0x06004944 RID: 18756 RVA: 0x00147FA2 File Offset: 0x001461A2
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=jGpBZDvC}I see. What do you want from me?", null);
				}
			}

			// Token: 0x17000F0A RID: 3850
			// (get) Token: 0x06004945 RID: 18757 RVA: 0x00147FAF File Offset: 0x001461AF
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=Qh26ReAv}Look, I know that warriors like you can sometimes recruit bandits to your party. Some of those men might want to take their chances working for me. More comfortable in living in town, where there's always drink and women on hand, then roaming endlessly about the countryside, eh? For each one that signs up with me I'll give you a bounty, more if they have some experience.", null);
				}
			}

			// Token: 0x17000F0B RID: 3851
			// (get) Token: 0x06004946 RID: 18758 RVA: 0x00147FBC File Offset: 0x001461BC
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=ekLDmgS7}I'll find your recruits.", null);
				}
			}

			// Token: 0x17000F0C RID: 3852
			// (get) Token: 0x06004947 RID: 18759 RVA: 0x00147FC9 File Offset: 0x001461C9
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=bKfaMFVK}You can also send me a recruiter: a trustworthy companion who is good at leading men, and also enough of a rogue to win the trust of other rogues...", null);
				}
			}

			// Token: 0x17000F0D RID: 3853
			// (get) Token: 0x06004948 RID: 18760 RVA: 0x00147FD6 File Offset: 0x001461D6
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=kxvnA811}All right, I will send you someone from my party who fits your bill.", null);
				}
			}

			// Token: 0x17000F0E RID: 3854
			// (get) Token: 0x06004949 RID: 18761 RVA: 0x00147FE3 File Offset: 0x001461E3
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=8sDjwsnW}I'm sure your lieutenant will solve my problem. Thank you for your help.", null);
				}
			}

			// Token: 0x17000F0F RID: 3855
			// (get) Token: 0x0600494A RID: 18762 RVA: 0x00147FF0 File Offset: 0x001461F0
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=TkvsBd4H}Your companion seems to have a knack with the local never-do-wells. I hear a lot of fine lads have already signed up.", null);
				}
			}

			// Token: 0x17000F10 RID: 3856
			// (get) Token: 0x0600494B RID: 18763 RVA: 0x00147FFD File Offset: 0x001461FD
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17000F11 RID: 3857
			// (get) Token: 0x0600494C RID: 18764 RVA: 0x00148000 File Offset: 0x00146200
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F12 RID: 3858
			// (get) Token: 0x0600494D RID: 18765 RVA: 0x00148004 File Offset: 0x00146204
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=wX14wxqF}You asked {COMPANION.LINK} to deliver at least {WANTED_RECRUIT_AMOUNT} looters and bandits to {ISSUE_GIVER.LINK} in {SETTLEMENT}. They should rejoin your party in {RETURN_DAYS} days.", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					textObject.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, false);
					textObject.SetTextVariable("WANTED_RECRUIT_AMOUNT", this.RequestedRecruitCount);
					textObject.SetTextVariable("SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			// Token: 0x17000F13 RID: 3859
			// (get) Token: 0x0600494E RID: 18766 RVA: 0x0014808A File Offset: 0x0014628A
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=rrh7rSLs}Gang Needs Recruits", null);
				}
			}

			// Token: 0x17000F14 RID: 3860
			// (get) Token: 0x0600494F RID: 18767 RVA: 0x00148097 File Offset: 0x00146297
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=0kYaAb7c}A gang leader needs recruits for {?ISSUE_GIVER.GENDER}her{?}his{\\?} gang.", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x06004950 RID: 18768 RVA: 0x001480BB File Offset: 0x001462BB
			public GangLeaderNeedsRecruitsIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
			}

			// Token: 0x06004951 RID: 18769 RVA: 0x001480CE File Offset: 0x001462CE
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x06004952 RID: 18770 RVA: 0x001480E3 File Offset: 0x001462E3
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Leadership) >= hero.GetSkillValue(DefaultSkills.Roguery)) ? DefaultSkills.Leadership : DefaultSkills.Roguery, 120);
			}

			// Token: 0x06004953 RID: 18771 RVA: 0x00148110 File Offset: 0x00146310
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004954 RID: 18772 RVA: 0x00148128 File Offset: 0x00146328
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004955 RID: 18773 RVA: 0x00148149 File Offset: 0x00146349
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			// Token: 0x06004956 RID: 18774 RVA: 0x00148157 File Offset: 0x00146357
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004957 RID: 18775 RVA: 0x00148159 File Offset: 0x00146359
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(30f), this.RequestedRecruitCount);
			}

			// Token: 0x06004958 RID: 18776 RVA: 0x00148177 File Offset: 0x00146377
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x06004959 RID: 18777 RVA: 0x0014817A File Offset: 0x0014637A
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x0600495A RID: 18778 RVA: 0x001481A1 File Offset: 0x001463A1
			public override bool IssueStayAliveConditions()
			{
				return true;
			}

			// Token: 0x0600495B RID: 18779 RVA: 0x001481A4 File Offset: 0x001463A4
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x17000F15 RID: 3861
			// (get) Token: 0x0600495C RID: 18780 RVA: 0x001481A6 File Offset: 0x001463A6
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(500f + 700f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x0600495D RID: 18781 RVA: 0x001481BB File Offset: 0x001463BB
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.IssueOwner, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				base.IssueOwner.AddPower(10f);
				this.RelationshipChangeWithIssueOwner = 5;
			}

			// Token: 0x0400195D RID: 6493
			private const int IssueAndQuestDuration = 30;

			// Token: 0x0400195E RID: 6494
			private const int AlternativeSolutionTroopTierRequirement = 2;

			// Token: 0x0400195F RID: 6495
			private const int AlternativeSolutionRelationBonus = 5;

			// Token: 0x04001960 RID: 6496
			private const int AlternativeSolutionNotablePowerBonus = 10;

			// Token: 0x04001961 RID: 6497
			private const int AlternativeSolutionPlayerHonorBonus = 30;

			// Token: 0x04001962 RID: 6498
			private const int AlternativeSolutionRewardPerRecruit = 100;

			// Token: 0x04001963 RID: 6499
			private const int CompanionRequiredSkillLevel = 120;
		}

		// Token: 0x02000619 RID: 1561
		public class GangLeaderNeedsRecruitsIssueQuest : QuestBase
		{
			// Token: 0x0600495E RID: 18782 RVA: 0x001481F4 File Offset: 0x001463F4
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsRecruitsIssueQuest(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x0600495F RID: 18783 RVA: 0x00148202 File Offset: 0x00146402
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._questProgressLogTest);
			}

			// Token: 0x06004960 RID: 18784 RVA: 0x00148217 File Offset: 0x00146417
			internal static object AutoGeneratedGetMemberValue_requestedRecruitCount(object o)
			{
				return ((GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssueQuest)o)._requestedRecruitCount;
			}

			// Token: 0x06004961 RID: 18785 RVA: 0x00148229 File Offset: 0x00146429
			internal static object AutoGeneratedGetMemberValue_deliveredRecruitCount(object o)
			{
				return ((GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssueQuest)o)._deliveredRecruitCount;
			}

			// Token: 0x06004962 RID: 18786 RVA: 0x0014823B File Offset: 0x0014643B
			internal static object AutoGeneratedGetMemberValue_rewardGold(object o)
			{
				return ((GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssueQuest)o)._rewardGold;
			}

			// Token: 0x06004963 RID: 18787 RVA: 0x0014824D File Offset: 0x0014644D
			internal static object AutoGeneratedGetMemberValue_playerReachedRequestedAmount(object o)
			{
				return ((GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssueQuest)o)._playerReachedRequestedAmount;
			}

			// Token: 0x06004964 RID: 18788 RVA: 0x0014825F File Offset: 0x0014645F
			internal static object AutoGeneratedGetMemberValue_questProgressLogTest(object o)
			{
				return ((GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssueQuest)o)._questProgressLogTest;
			}

			// Token: 0x17000F16 RID: 3862
			// (get) Token: 0x06004965 RID: 18789 RVA: 0x0014826C File Offset: 0x0014646C
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=rrh7rSLs}Gang Needs Recruits", null);
				}
			}

			// Token: 0x17000F17 RID: 3863
			// (get) Token: 0x06004966 RID: 18790 RVA: 0x00148279 File Offset: 0x00146479
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F18 RID: 3864
			// (get) Token: 0x06004967 RID: 18791 RVA: 0x0014827C File Offset: 0x0014647C
			private TextObject QuestStartedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=PZI9Smv3}{QUEST_GIVER.LINK}, a gang leader in {SETTLEMENT}, told you that {?QUEST_GIVER.GENDER}she{?}he{\\?} needs recruits for {?QUEST_GIVER.GENDER}her{?}his{\\?} gang. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to recruit {NEEDED_RECRUIT_AMOUNT} looters or bandits into your party, then transfer them to {?QUEST_GIVER.GENDER}her{?}him{\\?}. You will be paid for the recruits depending on their experience.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("NEEDED_RECRUIT_AMOUNT", this._requestedRecruitCount);
					return textObject;
				}
			}

			// Token: 0x17000F19 RID: 3865
			// (get) Token: 0x06004968 RID: 18792 RVA: 0x001482D9 File Offset: 0x001464D9
			private TextObject QuestSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=3ApJ6LaX}You have transferred the recruits to {QUEST_GIVER.LINK} as promised.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F1A RID: 3866
			// (get) Token: 0x06004969 RID: 18793 RVA: 0x001482FD File Offset: 0x001464FD
			private TextObject QuestFailedWithTimeOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=iUmWTmQz}You have failed to deliver enough recruits in time. {QUEST_GIVER.LINK} must be disappointed.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x0600496A RID: 18794 RVA: 0x00148321 File Offset: 0x00146521
			public GangLeaderNeedsRecruitsIssueQuest(string questId, Hero questGiver, CampaignTime duration, int requestedRecruitCount)
				: base(questId, questGiver, duration, 0)
			{
				this._requestedRecruitCount = requestedRecruitCount;
				this._deliveredRecruitCount = 0;
				this._rewardGold = 2000;
				this._playerReachedRequestedAmount = false;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x0600496B RID: 18795 RVA: 0x0014835C File Offset: 0x0014655C
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddTrackedObject(base.QuestGiver.CurrentSettlement);
				this._questProgressLogTest = base.AddDiscreteLog(this.QuestStartedLogText, new TextObject("{=r8rwl9ZS}Delivered Recruits", null), this._deliveredRecruitCount, this._requestedRecruitCount, null, false);
			}

			// Token: 0x0600496C RID: 18796 RVA: 0x001483AC File Offset: 0x001465AC
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=0QuAZ8YO}I'll be waiting. Good luck.", null), null, null).Condition(() => Hero.OneToOneConversationHero == this.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				TextObject npcDiscussLine = new TextObject("{=!}{GANG_LEADER_NEEDS_RECRUITS_QUEST_NOTABLE_DISCUSS}", null);
				TextObject npcResponseLine = new TextObject("{=!}{GANG_LEADER_NEEDS_RECRUITS_QUEST_NOTABLE_RESPONSE}", null);
				bool changeDialogAfterTransfer = false;
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).BeginNpcOptions().NpcOption(new TextObject("{=BGgDjRcW}I think that's enough. Here is your payment.", null), () => Hero.OneToOneConversationHero == this.QuestGiver && this._playerReachedRequestedAmount, null, null)
					.Consequence(delegate
					{
						this.ApplyQuestSuccessConsequences();
						this.CompleteQuestWithSuccess();
					})
					.CloseDialog()
					.NpcOption(npcDiscussLine, delegate
					{
						if (Hero.OneToOneConversationHero != this.QuestGiver)
						{
							return false;
						}
						if (!changeDialogAfterTransfer)
						{
							npcDiscussLine.SetTextVariable("GANG_LEADER_NEEDS_RECRUITS_QUEST_NOTABLE_DISCUSS", new TextObject("{=1hpeeCJD}Have you found any good men?", null));
							changeDialogAfterTransfer = true;
						}
						else
						{
							npcDiscussLine.SetTextVariable("GANG_LEADER_NEEDS_RECRUITS_QUEST_NOTABLE_DISCUSS", new TextObject("{=ds294zxi}Anything else?", null));
							changeDialogAfterTransfer = false;
						}
						return true;
					}, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=QbaOoilS}Yes, I have brought you a few men.", null), null)
					.Condition(() => (this.CheckIfThereIsSuitableRecruitInPlayer() && !this._playerReachedRequestedAmount) & changeDialogAfterTransfer)
					.NpcLine(npcResponseLine, null, null)
					.Condition(delegate
					{
						if (this._playerReachedRequestedAmount)
						{
							return false;
						}
						npcResponseLine.SetTextVariable("GANG_LEADER_NEEDS_RECRUITS_QUEST_NOTABLE_RESPONSE", new TextObject("{=70LnOZzo}Very good. Keep searching. We still need more men.", null));
						return true;
					})
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.OpenRecruitDeliveryScreen))
					.PlayerLine(new TextObject("{=IULW8h03}Sure.", null), null)
					.Consequence(delegate
					{
						if (this._playerReachedRequestedAmount && Campaign.Current.ConversationManager.IsConversationInProgress)
						{
							Campaign.Current.ConversationManager.ContinueConversation();
						}
					})
					.GotoDialogState("quest_discuss")
					.PlayerOption(new TextObject("{=PZqGagXt}No, not yet. I'm still looking for them.", null), null)
					.Condition(() => !this._playerReachedRequestedAmount & changeDialogAfterTransfer)
					.Consequence(delegate
					{
						changeDialogAfterTransfer = false;
					})
					.NpcLine(new TextObject("{=L1JyetPq}I am glad to hear that.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=OlOhuO7X}No thank you. Good day to you.", null), null)
					.Condition(() => !this._playerReachedRequestedAmount && !changeDialogAfterTransfer)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog()
					.EndNpcOptions();
			}

			// Token: 0x0600496D RID: 18797 RVA: 0x001485A0 File Offset: 0x001467A0
			private void OpenRecruitDeliveryScreen()
			{
				PartyScreenManager.OpenScreenWithCondition(new IsTroopTransferableDelegate(this.IsTroopTransferable), new PartyPresentationDoneButtonConditionDelegate(this.DoneButtonCondition), new PartyPresentationDoneButtonDelegate(this.DoneClicked), null, PartyScreenLogic.TransferState.Transferable, PartyScreenLogic.TransferState.NotTransferable, base.QuestGiver.Name, this._requestedRecruitCount - this._deliveredRecruitCount, false, false, PartyScreenMode.TroopsManage);
			}

			// Token: 0x0600496E RID: 18798 RVA: 0x001485F4 File Offset: 0x001467F4
			private Tuple<bool, TextObject> DoneButtonCondition(TroopRoster leftMemberRoster, TroopRoster leftPrisonRoster, TroopRoster rightMemberRoster, TroopRoster rightPrisonRoster, int leftLimitNum, int rightLimitNum)
			{
				if (this._requestedRecruitCount - this._deliveredRecruitCount < leftMemberRoster.TotalManCount)
				{
					int num = this._requestedRecruitCount - this._deliveredRecruitCount;
					TextObject textObject = new TextObject("{=VOr3uoRZ}You can only transfer {X} recruit{?IS_PLURAL}s{?}{\\?}.", null);
					textObject.SetTextVariable("IS_PLURAL", (num > 1) ? 1 : 0);
					textObject.SetTextVariable("X", num);
					return new Tuple<bool, TextObject>(false, textObject);
				}
				return new Tuple<bool, TextObject>(true, null);
			}

			// Token: 0x0600496F RID: 18799 RVA: 0x00148660 File Offset: 0x00146860
			private bool DoneClicked(TroopRoster leftMemberRoster, TroopRoster leftPrisonRoster, TroopRoster rightMemberRoster, TroopRoster rightPrisonRoster, FlattenedTroopRoster takenPrisonerRoster, FlattenedTroopRoster releasedPrisonerRoster, bool isForced, PartyBase leftParty, PartyBase rightParty)
			{
				foreach (TroopRosterElement troopRosterElement in leftMemberRoster.GetTroopRoster())
				{
					this._rewardGold += this.RewardForEachRecruit(troopRosterElement.Character) * troopRosterElement.Number;
					this._deliveredRecruitCount += troopRosterElement.Number;
				}
				this._questProgressLogTest.UpdateCurrentProgress(this._deliveredRecruitCount);
				this._questProgressLogTest.TaskName.SetTextVariable("TOTAL_REWARD", this._rewardGold);
				if (this._deliveredRecruitCount == this._requestedRecruitCount)
				{
					this._playerReachedRequestedAmount = true;
					if (Campaign.Current.ConversationManager.IsConversationInProgress)
					{
						Campaign.Current.ConversationManager.ContinueConversation();
					}
				}
				return true;
			}

			// Token: 0x06004970 RID: 18800 RVA: 0x00148744 File Offset: 0x00146944
			private int RewardForEachRecruit(CharacterObject recruit)
			{
				return (int)(100f * ((recruit.Tier <= 1) ? 1f : ((recruit.Tier <= 3) ? 1.5f : 2f)));
			}

			// Token: 0x06004971 RID: 18801 RVA: 0x00148772 File Offset: 0x00146972
			private bool IsTroopTransferable(CharacterObject character, PartyScreenLogic.TroopType type, PartyScreenLogic.PartyRosterSide side, PartyBase leftOwnerParty)
			{
				return this._requestedRecruitCount - this._deliveredRecruitCount >= 0 && (side == PartyScreenLogic.PartyRosterSide.Left || (MobileParty.MainParty.MemberRoster.Contains(character) && character.Occupation == Occupation.Bandit));
			}

			// Token: 0x06004972 RID: 18802 RVA: 0x001487AC File Offset: 0x001469AC
			private bool CheckIfThereIsSuitableRecruitInPlayer()
			{
				bool flag = false;
				using (List<TroopRosterElement>.Enumerator enumerator = MobileParty.MainParty.MemberRoster.GetTroopRoster().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						if (enumerator.Current.Character.Occupation == Occupation.Bandit)
						{
							flag = true;
							break;
						}
					}
				}
				return flag;
			}

			// Token: 0x06004973 RID: 18803 RVA: 0x00148818 File Offset: 0x00146A18
			private void ApplyQuestSuccessConsequences()
			{
				base.AddLog(this.QuestSuccessLog, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this._rewardGold, false);
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = 5;
			}

			// Token: 0x06004974 RID: 18804 RVA: 0x0014887C File Offset: 0x00146A7C
			protected override void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
			{
				if (this._deliveredRecruitCount >= this._requestedRecruitCount)
				{
					completeWithSuccess = true;
					this.ApplyQuestSuccessConsequences();
				}
			}

			// Token: 0x06004975 RID: 18805 RVA: 0x00148895 File Offset: 0x00146A95
			protected override void OnTimedOut()
			{
				base.AddLog(this.QuestFailedWithTimeOutLogText, false);
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = -5;
			}

			// Token: 0x06004976 RID: 18806 RVA: 0x001488BD File Offset: 0x00146ABD
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x04001964 RID: 6500
			private const int QuestGiverRelationBonusOnSuccess = 5;

			// Token: 0x04001965 RID: 6501
			private const int QuestGiverNotablePowerBonusOnSuccess = 10;

			// Token: 0x04001966 RID: 6502
			private const int QuestGiverRelationPenaltyOnFail = -5;

			// Token: 0x04001967 RID: 6503
			private const int NotablePowerPenaltyOnFail = -10;

			// Token: 0x04001968 RID: 6504
			private const int PlayerHonorBonusOnSuccess = 30;

			// Token: 0x04001969 RID: 6505
			[SaveableField(1)]
			private int _requestedRecruitCount;

			// Token: 0x0400196A RID: 6506
			[SaveableField(5)]
			private int _deliveredRecruitCount;

			// Token: 0x0400196B RID: 6507
			[SaveableField(6)]
			private int _rewardGold;

			// Token: 0x0400196C RID: 6508
			[SaveableField(9)]
			private bool _playerReachedRequestedAmount;

			// Token: 0x0400196D RID: 6509
			[SaveableField(7)]
			private JournalLog _questProgressLogTest;
		}

		// Token: 0x0200061A RID: 1562
		public class GangLeaderNeedsRecruitsIssueBehaviorTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004977 RID: 18807 RVA: 0x001488C5 File Offset: 0x00146AC5
			public GangLeaderNeedsRecruitsIssueBehaviorTypeDefiner()
				: base(820000)
			{
			}

			// Token: 0x06004978 RID: 18808 RVA: 0x001488D2 File Offset: 0x00146AD2
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssue), 1, null);
				base.AddClassDefinition(typeof(GangLeaderNeedsRecruitsIssueBehavior.GangLeaderNeedsRecruitsIssueQuest), 2, null);
			}
		}
	}
}
