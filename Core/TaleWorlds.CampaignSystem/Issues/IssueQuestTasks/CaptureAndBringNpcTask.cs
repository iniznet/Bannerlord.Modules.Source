using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues.IssueQuestTasks
{
	public class CaptureAndBringNpcTask : QuestTaskBase
	{
		internal static void AutoGeneratedStaticCollectObjectsCaptureAndBringNpcTask(object o, List<object> collectedObjects)
		{
			((CaptureAndBringNpcTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._targetHero);
		}

		internal static object AutoGeneratedGetMemberValue_targetHero(object o)
		{
			return ((CaptureAndBringNpcTask)o)._targetHero;
		}

		public CaptureAndBringNpcTask(Hero targetHero, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null)
			: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
		{
			this._targetHero = targetHero;
		}

		private DialogFlow GetTakePrisonerDialogFlow()
		{
			return DialogFlow.CreateDialogFlow("lord_start", int.MaxValue).NpcLine("{=2vcfifbb}I yield", null, null).Condition(() => Hero.OneToOneConversationHero == this._targetHero && this.isFinishedSuccess)
				.BeginPlayerOptions()
				.PlayerOption("{=cbzJRaDJ}You are my prisoner now!", null)
				.GotoDialogState("lord_start")
				.Consequence(delegate
				{
					TakePrisonerAction.Apply(Hero.MainHero.PartyBelongedTo.Party, this._targetHero);
				})
				.EndPlayerOptions();
		}

		public void OnPlayerBattleEnd(MapEvent mapEvent)
		{
			if (PartyBase.MainParty.Side == mapEvent.WinningSide)
			{
				using (IEnumerator<PartyBase> enumerator = mapEvent.InvolvedParties.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						if (enumerator.Current.Side == mapEvent.DefeatedSide)
						{
							using (IEnumerator<CharacterObject> enumerator2 = PartyBase.MainParty.PrisonerHeroes.GetEnumerator())
							{
								while (enumerator2.MoveNext())
								{
									if (enumerator2.Current == this._targetHero.CharacterObject)
									{
										base.Finish(QuestTaskBase.FinishStates.Success);
										break;
									}
								}
							}
						}
						if (!base.IsActive)
						{
							break;
						}
					}
				}
			}
		}

		protected override void OnFinished()
		{
			this._targetHero = null;
		}

		public override void SetReferences()
		{
			CampaignEvents.OnPlayerBattleEndEvent.AddNonSerializedListener(this, new Action<MapEvent>(this.OnPlayerBattleEnd));
		}

		[SaveableField(10)]
		private Hero _targetHero;

		public bool isFinishedSuccess;
	}
}
