using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues.IssueQuestTasks
{
	// Token: 0x02000327 RID: 807
	public class DefeatPartyQuestTask : QuestTaskBase
	{
		// Token: 0x06002DCA RID: 11722 RVA: 0x000BF484 File Offset: 0x000BD684
		internal static void AutoGeneratedStaticCollectObjectsDefeatPartyQuestTask(object o, List<object> collectedObjects)
		{
			((DefeatPartyQuestTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002DCB RID: 11723 RVA: 0x000BF492 File Offset: 0x000BD692
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._partiesToDefeat);
			collectedObjects.Add(this._partyType);
		}

		// Token: 0x06002DCC RID: 11724 RVA: 0x000BF4B3 File Offset: 0x000BD6B3
		internal static object AutoGeneratedGetMemberValue_partiesToDefeat(object o)
		{
			return ((DefeatPartyQuestTask)o)._partiesToDefeat;
		}

		// Token: 0x06002DCD RID: 11725 RVA: 0x000BF4C0 File Offset: 0x000BD6C0
		internal static object AutoGeneratedGetMemberValue_targetNumParties(object o)
		{
			return ((DefeatPartyQuestTask)o)._targetNumParties;
		}

		// Token: 0x06002DCE RID: 11726 RVA: 0x000BF4D2 File Offset: 0x000BD6D2
		internal static object AutoGeneratedGetMemberValue_deferatedNumParties(object o)
		{
			return ((DefeatPartyQuestTask)o)._deferatedNumParties;
		}

		// Token: 0x06002DCF RID: 11727 RVA: 0x000BF4E4 File Offset: 0x000BD6E4
		internal static object AutoGeneratedGetMemberValue_partyType(object o)
		{
			return ((DefeatPartyQuestTask)o)._partyType;
		}

		// Token: 0x06002DD0 RID: 11728 RVA: 0x000BF4F1 File Offset: 0x000BD6F1
		internal static object AutoGeneratedGetMemberValue_finishOnFail(object o)
		{
			return ((DefeatPartyQuestTask)o)._finishOnFail;
		}

		// Token: 0x06002DD1 RID: 11729 RVA: 0x000BF504 File Offset: 0x000BD704
		public DefeatPartyQuestTask(List<PartyBase> partiesToDefeat, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null, bool finishOnFail = false)
			: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
		{
			this._partiesToDefeat = new List<PartyBase>();
			foreach (PartyBase partyBase in partiesToDefeat)
			{
				this._partiesToDefeat.Add(partyBase);
			}
			this._targetNumParties = partiesToDefeat.Count;
			this._partyType = partiesToDefeat[0].Name;
			this._finishOnFail = finishOnFail;
		}

		// Token: 0x06002DD2 RID: 11730 RVA: 0x000BF594 File Offset: 0x000BD794
		public DefeatPartyQuestTask(DefeatPartyQuestTask.PartyConditionDelegateType partyCondition, DefeatPartyQuestTask.OnPartyDefeatedDelegateType onPartyDefeated, int targetNumParties, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null)
			: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
		{
			this._partyConditionDelegate = partyCondition;
			this._targetNumParties = targetNumParties;
			this._onPartyDefeatedDelegate = onPartyDefeated;
		}

		// Token: 0x06002DD3 RID: 11731 RVA: 0x000BF5BC File Offset: 0x000BD7BC
		public void OnMapEventEnded(MapEvent mapEvent)
		{
			if (mapEvent.IsPlayerMapEvent)
			{
				if (PartyBase.MainParty.Side == mapEvent.WinningSide)
				{
					foreach (PartyBase partyBase in mapEvent.InvolvedParties)
					{
						if (partyBase.Side == mapEvent.DefeatedSide)
						{
							if (this._partyConditionDelegate == null && this._partiesToDefeat.Contains(partyBase))
							{
								this._partiesToDefeat.Remove(partyBase);
								this._deferatedNumParties++;
							}
							else if (this._partyConditionDelegate != null && this._partyConditionDelegate(partyBase))
							{
								this._deferatedNumParties++;
							}
							if (this._onPartyDefeatedDelegate != null)
							{
								this._onPartyDefeatedDelegate(partyBase);
							}
						}
					}
					if (this._deferatedNumParties >= this._targetNumParties)
					{
						base.Finish(QuestTaskBase.FinishStates.Success);
						return;
					}
				}
				else if (PartyBase.MainParty.Side == mapEvent.DefeatedSide && this._finishOnFail)
				{
					foreach (PartyBase partyBase2 in mapEvent.InvolvedParties)
					{
						if (this._partyConditionDelegate == null && this._partiesToDefeat.Contains(partyBase2))
						{
							base.Finish(QuestTaskBase.FinishStates.Fail);
							break;
						}
					}
				}
			}
		}

		// Token: 0x06002DD4 RID: 11732 RVA: 0x000BF728 File Offset: 0x000BD928
		protected override void OnFinished()
		{
			if (this._partiesToDefeat != null)
			{
				this._partiesToDefeat.Clear();
			}
		}

		// Token: 0x06002DD5 RID: 11733 RVA: 0x000BF73D File Offset: 0x000BD93D
		public override void SetReferences()
		{
			CampaignEvents.MapEventEnded.AddNonSerializedListener(this, new Action<MapEvent>(this.OnMapEventEnded));
		}

		// Token: 0x04000DCB RID: 3531
		private DefeatPartyQuestTask.PartyConditionDelegateType _partyConditionDelegate;

		// Token: 0x04000DCC RID: 3532
		private DefeatPartyQuestTask.OnPartyDefeatedDelegateType _onPartyDefeatedDelegate;

		// Token: 0x04000DCD RID: 3533
		[SaveableField(40)]
		private readonly List<PartyBase> _partiesToDefeat;

		// Token: 0x04000DCE RID: 3534
		[SaveableField(41)]
		private int _targetNumParties;

		// Token: 0x04000DCF RID: 3535
		[SaveableField(42)]
		private int _deferatedNumParties;

		// Token: 0x04000DD0 RID: 3536
		[SaveableField(43)]
		private TextObject _partyType;

		// Token: 0x04000DD1 RID: 3537
		[SaveableField(44)]
		private bool _finishOnFail;

		// Token: 0x02000677 RID: 1655
		// (Invoke) Token: 0x060051E4 RID: 20964
		public delegate bool PartyConditionDelegateType(PartyBase defeatedParty);

		// Token: 0x02000678 RID: 1656
		// (Invoke) Token: 0x060051E8 RID: 20968
		public delegate void OnPartyDefeatedDelegateType(PartyBase party);
	}
}
