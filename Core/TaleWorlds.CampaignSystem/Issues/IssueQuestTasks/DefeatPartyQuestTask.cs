using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues.IssueQuestTasks
{
	public class DefeatPartyQuestTask : QuestTaskBase
	{
		internal static void AutoGeneratedStaticCollectObjectsDefeatPartyQuestTask(object o, List<object> collectedObjects)
		{
			((DefeatPartyQuestTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._partiesToDefeat);
			collectedObjects.Add(this._partyType);
		}

		internal static object AutoGeneratedGetMemberValue_partiesToDefeat(object o)
		{
			return ((DefeatPartyQuestTask)o)._partiesToDefeat;
		}

		internal static object AutoGeneratedGetMemberValue_targetNumParties(object o)
		{
			return ((DefeatPartyQuestTask)o)._targetNumParties;
		}

		internal static object AutoGeneratedGetMemberValue_deferatedNumParties(object o)
		{
			return ((DefeatPartyQuestTask)o)._deferatedNumParties;
		}

		internal static object AutoGeneratedGetMemberValue_partyType(object o)
		{
			return ((DefeatPartyQuestTask)o)._partyType;
		}

		internal static object AutoGeneratedGetMemberValue_finishOnFail(object o)
		{
			return ((DefeatPartyQuestTask)o)._finishOnFail;
		}

		public DefeatPartyQuestTask(List<PartyBase> partiesToDefeat, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null, bool finishOnFail = false)
			: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
		{
			this._partiesToDefeat = new List<PartyBase>();
			foreach (PartyBase partyBase in partiesToDefeat)
			{
				this._partiesToDefeat.Add(partyBase);
			}
			this._targetNumParties = partiesToDefeat.Count;
			this._partyType = partiesToDefeat[0].Name;
			this._finishOnFail = finishOnFail;
		}

		public DefeatPartyQuestTask(DefeatPartyQuestTask.PartyConditionDelegateType partyCondition, DefeatPartyQuestTask.OnPartyDefeatedDelegateType onPartyDefeated, int targetNumParties, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null)
			: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
		{
			this._partyConditionDelegate = partyCondition;
			this._targetNumParties = targetNumParties;
			this._onPartyDefeatedDelegate = onPartyDefeated;
		}

		public void OnMapEventEnded(MapEvent mapEvent)
		{
			if (mapEvent.IsPlayerMapEvent)
			{
				if (PartyBase.MainParty.Side == mapEvent.WinningSide)
				{
					foreach (PartyBase partyBase in mapEvent.InvolvedParties)
					{
						if (partyBase.Side == mapEvent.DefeatedSide)
						{
							if (this._partyConditionDelegate == null && this._partiesToDefeat.Contains(partyBase))
							{
								this._partiesToDefeat.Remove(partyBase);
								this._deferatedNumParties++;
							}
							else if (this._partyConditionDelegate != null && this._partyConditionDelegate(partyBase))
							{
								this._deferatedNumParties++;
							}
							if (this._onPartyDefeatedDelegate != null)
							{
								this._onPartyDefeatedDelegate(partyBase);
							}
						}
					}
					if (this._deferatedNumParties >= this._targetNumParties)
					{
						base.Finish(QuestTaskBase.FinishStates.Success);
						return;
					}
				}
				else if (PartyBase.MainParty.Side == mapEvent.DefeatedSide && this._finishOnFail)
				{
					foreach (PartyBase partyBase2 in mapEvent.InvolvedParties)
					{
						if (this._partyConditionDelegate == null && this._partiesToDefeat.Contains(partyBase2))
						{
							base.Finish(QuestTaskBase.FinishStates.Fail);
							break;
						}
					}
				}
			}
		}

		protected override void OnFinished()
		{
			if (this._partiesToDefeat != null)
			{
				this._partiesToDefeat.Clear();
			}
		}

		public override void SetReferences()
		{
			CampaignEvents.MapEventEnded.AddNonSerializedListener(this, new Action<MapEvent>(this.OnMapEventEnded));
		}

		private DefeatPartyQuestTask.PartyConditionDelegateType _partyConditionDelegate;

		private DefeatPartyQuestTask.OnPartyDefeatedDelegateType _onPartyDefeatedDelegate;

		[SaveableField(40)]
		private readonly List<PartyBase> _partiesToDefeat;

		[SaveableField(41)]
		private int _targetNumParties;

		[SaveableField(42)]
		private int _deferatedNumParties;

		[SaveableField(43)]
		private TextObject _partyType;

		[SaveableField(44)]
		private bool _finishOnFail;

		public delegate bool PartyConditionDelegateType(PartyBase defeatedParty);

		public delegate void OnPartyDefeatedDelegateType(PartyBase party);
	}
}
