using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues.IssueQuestTasks
{
	public class ChangeSettlementOwnerTask : QuestTaskBase
	{
		internal static void AutoGeneratedStaticCollectObjectsChangeSettlementOwnerTask(object o, List<object> collectedObjects)
		{
			((ChangeSettlementOwnerTask)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			collectedObjects.Add(this._settlement);
			collectedObjects.Add(this._newOwner);
		}

		internal static object AutoGeneratedGetMemberValue_settlement(object o)
		{
			return ((ChangeSettlementOwnerTask)o)._settlement;
		}

		internal static object AutoGeneratedGetMemberValue_newOwner(object o)
		{
			return ((ChangeSettlementOwnerTask)o)._newOwner;
		}

		public ChangeSettlementOwnerTask(Settlement settlement, Hero newOwner, Action onSucceededAction, Action onFailedAction, Action onCanceledAction, DialogFlow dialogFlow = null)
			: base(dialogFlow, onSucceededAction, onFailedAction, onCanceledAction)
		{
			this._settlement = settlement;
			this._newOwner = newOwner;
		}

		public void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
		{
			if (this._settlement == settlement && this._newOwner == newOwner)
			{
				base.Finish(QuestTaskBase.FinishStates.Success);
			}
		}

		public override void SetReferences()
		{
			CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, new Action<Settlement, bool, Hero, Hero, Hero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail>(this.OnSettlementOwnerChanged));
		}

		[SaveableField(30)]
		private readonly Settlement _settlement;

		[SaveableField(31)]
		private readonly Hero _newOwner;
	}
}
