using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x0200030E RID: 782
	public class LadysKnightOutIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002CE2 RID: 11490 RVA: 0x000BB504 File Offset: 0x000B9704
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002CE3 RID: 11491 RVA: 0x000BB520 File Offset: 0x000B9720
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(LadysKnightOutIssueBehavior.LadysKnightOutIssue), IssueBase.IssueFrequency.Common, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LadysKnightOutIssueBehavior.LadysKnightOutIssue), IssueBase.IssueFrequency.Common));
		}

		// Token: 0x06002CE4 RID: 11492 RVA: 0x000BB584 File Offset: 0x000B9784
		private bool ConditionsHold(Hero issueOwner)
		{
			return issueOwner.IsLord && issueOwner.IsFemale && issueOwner.GetTraitLevel(DefaultTraits.Mercy) < 0 && issueOwner.GetTraitLevel(DefaultTraits.PersonaSoftspoken) <= 0 && issueOwner.GetTraitLevel(DefaultTraits.PersonaCurt) <= 0 && issueOwner.Clan.Leader != issueOwner && issueOwner.Clan != Clan.PlayerClan && issueOwner.IsNoncombatant && issueOwner.CurrentSettlement != null && issueOwner.CurrentSettlement.IsTown && issueOwner.CurrentSettlement.Town.Security <= 50f;
		}

		// Token: 0x06002CE5 RID: 11493 RVA: 0x000BB622 File Offset: 0x000B9822
		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			return new LadysKnightOutIssueBehavior.LadysKnightOutIssue(issueOwner);
		}

		// Token: 0x06002CE6 RID: 11494 RVA: 0x000BB62A File Offset: 0x000B982A
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x04000D8A RID: 3466
		private const IssueBase.IssueFrequency LadysKnightOutIssueFrequency = IssueBase.IssueFrequency.Common;

		// Token: 0x0200062B RID: 1579
		public class LadysKnightOutIssue : IssueBase
		{
			// Token: 0x06004B31 RID: 19249 RVA: 0x0014F137 File Offset: 0x0014D337
			internal static void AutoGeneratedStaticCollectObjectsLadysKnightOutIssue(object o, List<object> collectedObjects)
			{
				((LadysKnightOutIssueBehavior.LadysKnightOutIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004B32 RID: 19250 RVA: 0x0014F145 File Offset: 0x0014D345
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x17000FA5 RID: 4005
			// (get) Token: 0x06004B33 RID: 19251 RVA: 0x0014F150 File Offset: 0x0014D350
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=M3af4N66}If you follow tournaments in this region, you'll know that I am a great devotee. I attend as many as I can - I love the spectacle, the tension... Despite this, I've never had a champion fight in my name, which is quite the fashion these days. Would you consider being my champion, {PLAYER.NAME} I'm sure you could win glory for both of us.", null);
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FA6 RID: 4006
			// (get) Token: 0x06004B34 RID: 19252 RVA: 0x0014F17C File Offset: 0x0014D37C
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=4nbnFMNZ}I can't promise to win, my lady.", null);
				}
			}

			// Token: 0x17000FA7 RID: 4007
			// (get) Token: 0x06004B35 RID: 19253 RVA: 0x0014F189 File Offset: 0x0014D389
			public override TextObject IssueLordSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=SzIPvqLk}Of course not. If you don't wish to fight yourself - and I understand you might be quite busy - you could use your influence to convince one of the nobles of this realm to hold their next tournament in my honor.", null);
				}
			}

			// Token: 0x17000FA8 RID: 4008
			// (get) Token: 0x06004B36 RID: 19254 RVA: 0x0014F196 File Offset: 0x0014D396
			public override TextObject IssuePlayerResponseAfterLordExplanation
			{
				get
				{
					return new TextObject("{=MuwmsOSn}I will consider this. What does it mean to be your champion?", null);
				}
			}

			// Token: 0x17000FA9 RID: 4009
			// (get) Token: 0x06004B37 RID: 19255 RVA: 0x0014F1A4 File Offset: 0x0014D3A4
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=Pnc8ToV1}Just participate in a future tournament in this realm, and say you dedicate your victories to me. {TOURNAMENT_ROUND_GOAL}", null);
					if (this.TournamentRoundGoal == 5)
					{
						textObject.SetTextVariable("TOURNAMENT_ROUND_GOAL", new TextObject("{=2Rzw16OX}If you can advance to win the tournament, I'm sure that will do us both honor.", null));
					}
					else
					{
						TextObject textObject2 = new TextObject("{=al27CmYV}If you can advance to reach round {ROUND_COUNT}, I'm sure that will do us both honor.", null);
						textObject2.SetTextVariable("ROUND_COUNT", this.TournamentRoundGoal);
						textObject.SetTextVariable("TOURNAMENT_ROUND_GOAL", textObject2);
					}
					return textObject;
				}
			}

			// Token: 0x17000FAA RID: 4010
			// (get) Token: 0x06004B38 RID: 19256 RVA: 0x0014F20B File Offset: 0x0014D40B
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					if (this.TournamentRoundGoal == 5)
					{
						return new TextObject("{=YArbm6TV}Then I will enter the tournament and win it, my lady.", null);
					}
					TextObject textObject = new TextObject("{=w3rcCibp}Then I will enter the tournament and reach round {ROUND_COUNT} my lady.", null);
					textObject.SetTextVariable("ROUND_COUNT", this.TournamentRoundGoal);
					return textObject;
				}
			}

			// Token: 0x17000FAB RID: 4011
			// (get) Token: 0x06004B39 RID: 19257 RVA: 0x0014F23F File Offset: 0x0014D43F
			public override TextObject IssueLordSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=0WOPfOIH}I'm afraid I don't have time to fight but I can use my influence.", null);
				}
			}

			// Token: 0x17000FAC RID: 4012
			// (get) Token: 0x06004B3A RID: 19258 RVA: 0x0014F24C File Offset: 0x0014D44C
			public override TextObject IssueLordSolutionResponseByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=ZZ7Q3VOG}Thank you my {?PLAYER.GENDER}lady{?}lord{\\?}. I am indeed honored.", null);
					StringHelpers.SetCharacterProperties("PLAYER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FAD RID: 4013
			// (get) Token: 0x06004B3B RID: 19259 RVA: 0x0014F280 File Offset: 0x0014D480
			protected override TextObject LordSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=EnhdXpQf}{ISSUE_OWNER.LINK} from {ISSUE_OWNER.FACTION}, has told you about of the tournament at the {ISSUE_OWNER_SETTLEMENT}. She wants you to be her champion. {TOURNAMENT_ROUND_GOAL}", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, true);
					textObject.SetTextVariable("ISSUE_OWNER_SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					if (this.TournamentRoundGoal == 5)
					{
						textObject.SetTextVariable("TOURNAMENT_ROUND_GOAL", new TextObject("{=YbzHpFiu}She expects you to win the tournament.", null));
					}
					else
					{
						TextObject textObject2 = new TextObject("{=5qkTxOJ5}She expects you to reach round {ROUND_COUNT}.", null);
						textObject2.SetTextVariable("ROUND_COUNT", this.TournamentRoundGoal);
						textObject.SetTextVariable("TOURNAMENT_ROUND_GOAL", textObject2);
					}
					return textObject;
				}
			}

			// Token: 0x17000FAE RID: 4014
			// (get) Token: 0x06004B3C RID: 19260 RVA: 0x0014F31C File Offset: 0x0014D51C
			protected override TextObject LordSolutionCounterOfferRefuseLog
			{
				get
				{
					TextObject textObject = new TextObject("{=IPg30HIs}You told {ISSUE_OWNER.LINK} that instead of her request, the next tournament held will be held in her honor.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FAF RID: 4015
			// (get) Token: 0x06004B3D RID: 19261 RVA: 0x0014F34E File Offset: 0x0014D54E
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000FB0 RID: 4016
			// (get) Token: 0x06004B3E RID: 19262 RVA: 0x0014F351 File Offset: 0x0014D551
			public override bool IsThereLordSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17000FB1 RID: 4017
			// (get) Token: 0x06004B3F RID: 19263 RVA: 0x0014F354 File Offset: 0x0014D554
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=a4XGmdd9}Lady's Knight Out", null);
				}
			}

			// Token: 0x17000FB2 RID: 4018
			// (get) Token: 0x06004B40 RID: 19264 RVA: 0x0014F364 File Offset: 0x0014D564
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=oBl6SxeJ}{ISSUE_OWNER.LINK} wants you to participate in a tournament in her name.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FB3 RID: 4019
			// (get) Token: 0x06004B41 RID: 19265 RVA: 0x0014F398 File Offset: 0x0014D598
			private int TournamentRoundGoal
			{
				get
				{
					if (base.IssueDifficultyMultiplier > 0.7f)
					{
						return 5;
					}
					if (0.7f >= base.IssueDifficultyMultiplier && base.IssueDifficultyMultiplier > 0.5f)
					{
						return 4;
					}
					if (0.5f >= base.IssueDifficultyMultiplier && base.IssueDifficultyMultiplier > 0.2f)
					{
						return 3;
					}
					return 2;
				}
			}

			// Token: 0x17000FB4 RID: 4020
			// (get) Token: 0x06004B42 RID: 19266 RVA: 0x0014F3ED File Offset: 0x0014D5ED
			public override int NeededInfluenceForLordSolution
			{
				get
				{
					return 15 + MathF.Ceiling(30f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x06004B43 RID: 19267 RVA: 0x0014F403 File Offset: 0x0014D603
			public LadysKnightOutIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
			}

			// Token: 0x06004B44 RID: 19268 RVA: 0x0014F416 File Offset: 0x0014D616
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementLoyalty)
				{
					return -0.2f;
				}
				if (issueEffect == DefaultIssueEffects.ClanInfluence)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x06004B45 RID: 19269 RVA: 0x0014F439 File Offset: 0x0014D639
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004B46 RID: 19270 RVA: 0x0014F43B File Offset: 0x0014D63B
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LadysKnightOutIssueBehavior.LadysKnightOutIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(30f), base.IssueDifficultyMultiplier, 750);
			}

			// Token: 0x06004B47 RID: 19271 RVA: 0x0014F45E File Offset: 0x0014D65E
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			// Token: 0x06004B48 RID: 19272 RVA: 0x0014F464 File Offset: 0x0014D664
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				skill = null;
				relationHero = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.CurrentSettlement.MapFaction, Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004B49 RID: 19273 RVA: 0x0014F4BC File Offset: 0x0014D6BC
			public override bool IssueStayAliveConditions()
			{
				return base.IssueOwner.IsNoncombatant && base.IssueOwner.CurrentSettlement != null && base.IssueOwner.CurrentSettlement.IsTown && base.IssueOwner.CurrentSettlement.Town.Security <= 80f;
			}

			// Token: 0x06004B4A RID: 19274 RVA: 0x0014F516 File Offset: 0x0014D716
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x06004B4B RID: 19275 RVA: 0x0014F518 File Offset: 0x0014D718
			protected override void LordSolutionConsequenceWithRefuseCounterOffer()
			{
				Clan.PlayerClan.AddRenown(7f, true);
				ChangeRelationAction.ApplyPlayerRelation(base.IssueOwner, 5, true, true);
			}

			// Token: 0x040019D1 RID: 6609
			private const int TakingQuestRelationLimit = -10;

			// Token: 0x040019D2 RID: 6610
			private const int QuestTimeLimit = 30;

			// Token: 0x040019D3 RID: 6611
			private const int IssueDuration = 30;

			// Token: 0x040019D4 RID: 6612
			private const int BaseRewardGold = 750;
		}

		// Token: 0x0200062C RID: 1580
		public class LadysKnightOutIssueQuest : QuestBase
		{
			// Token: 0x06004B4C RID: 19276 RVA: 0x0014F538 File Offset: 0x0014D738
			internal static void AutoGeneratedStaticCollectObjectsLadysKnightOutIssueQuest(object o, List<object> collectedObjects)
			{
				((LadysKnightOutIssueBehavior.LadysKnightOutIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004B4D RID: 19277 RVA: 0x0014F546 File Offset: 0x0014D746
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._tournamentTown);
			}

			// Token: 0x06004B4E RID: 19278 RVA: 0x0014F55B File Offset: 0x0014D75B
			internal static object AutoGeneratedGetMemberValue_difficultyMultiplier(object o)
			{
				return ((LadysKnightOutIssueBehavior.LadysKnightOutIssueQuest)o)._difficultyMultiplier;
			}

			// Token: 0x06004B4F RID: 19279 RVA: 0x0014F56D File Offset: 0x0014D76D
			internal static object AutoGeneratedGetMemberValue_tournamentTown(object o)
			{
				return ((LadysKnightOutIssueBehavior.LadysKnightOutIssueQuest)o)._tournamentTown;
			}

			// Token: 0x17000FB5 RID: 4021
			// (get) Token: 0x06004B50 RID: 19280 RVA: 0x0014F57C File Offset: 0x0014D77C
			private int TournamentRoundGoal
			{
				get
				{
					if (this._difficultyMultiplier > 0.7f)
					{
						return 5;
					}
					if (0.7f >= this._difficultyMultiplier && this._difficultyMultiplier > 0.5f)
					{
						return 4;
					}
					if (0.5f >= this._difficultyMultiplier && this._difficultyMultiplier > 0.2f)
					{
						return 3;
					}
					return 2;
				}
			}

			// Token: 0x17000FB6 RID: 4022
			// (get) Token: 0x06004B51 RID: 19281 RVA: 0x0014F5D4 File Offset: 0x0014D7D4
			private TextObject QuestStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=kqgadhCF}{QUEST_GIVER.LINK} from {QUEST_GIVER.FACTION}, has asked you to be her champion in an upcoming tournament. {TOURNAMENT_ROUND_GOAL} \nYou told her that you will honor her name in a tournament.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, true);
					textObject.SetTextVariable("QUEST_GIVER_TOWN", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					if (this.TournamentRoundGoal == 5)
					{
						textObject.SetTextVariable("TOURNAMENT_ROUND_GOAL", new TextObject("{=r8VcYkUf}She expects you to fight in her name and win the tournament.", null));
					}
					else
					{
						TextObject textObject2 = new TextObject("{=edJtO2ua}She expects you to fight in her name and reach at least {ROUND_COUNT}.", null);
						textObject2.SetTextVariable("ROUND_COUNT", this.TournamentRoundGoal);
						textObject.SetTextVariable("TOURNAMENT_ROUND_GOAL", textObject2);
					}
					return textObject;
				}
			}

			// Token: 0x17000FB7 RID: 4023
			// (get) Token: 0x06004B52 RID: 19282 RVA: 0x0014F670 File Offset: 0x0014D870
			private TextObject PlayerWinsTournamentSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=QAg8DQy6}You received a message from {QUEST_GIVER.LINK}.\n \"Thank you for fighting so valiantly in my name. Please take these {REWARD} denars with our gratitude.\"", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x17000FB8 RID: 4024
			// (get) Token: 0x06004B53 RID: 19283 RVA: 0x0014F6B4 File Offset: 0x0014D8B4
			private TextObject PlayerFailedToReachTournamentLevelLog
			{
				get
				{
					TextObject textObject = new TextObject("{=04ti5hcX}{TOURNAMENT_ROUND_GOAL}{QUEST_GIVER.LINK} will certainly be disappointed.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					if (this.TournamentRoundGoal == 5)
					{
						textObject.SetTextVariable("TOURNAMENT_ROUND_GOAL", new TextObject("{=tDNiLiRM}You have failed to win the tournament. ", null));
					}
					else
					{
						TextObject textObject2 = new TextObject("{=CxKC5gqq}You have failed to reach round {ROUND_COUNT} in the tournament. ", null);
						textObject2.SetTextVariable("ROUND_COUNT", this.TournamentRoundGoal);
						textObject.SetTextVariable("TOURNAMENT_ROUND_GOAL", textObject2);
					}
					return textObject;
				}
			}

			// Token: 0x17000FB9 RID: 4025
			// (get) Token: 0x06004B54 RID: 19284 RVA: 0x0014F734 File Offset: 0x0014D934
			private TextObject PlayerFailedToJoinTournamentLog
			{
				get
				{
					TextObject textObject = new TextObject("{=D40RPEbz}You have failed to enter a tournament in time. {QUEST_GIVER.LINK} will certainly be disappointed.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FBA RID: 4026
			// (get) Token: 0x06004B55 RID: 19285 RVA: 0x0014F768 File Offset: 0x0014D968
			private TextObject WarDeclaredOnQuestGiversFactionCancelLog
			{
				get
				{
					TextObject textObject = new TextObject("{=zh3Wf6bu}You are now at war with {QUEST_GIVER.LINK}'s faction. Quest is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FBB RID: 4027
			// (get) Token: 0x06004B56 RID: 19286 RVA: 0x0014F79C File Offset: 0x0014D99C
			private TextObject PlayerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FBC RID: 4028
			// (get) Token: 0x06004B57 RID: 19287 RVA: 0x0014F7D0 File Offset: 0x0014D9D0
			private TextObject QuestGiverIsDeadCancelLog
			{
				get
				{
					TextObject textObject = new TextObject("{=2Ju7Eduu}{QUEST_GIVER.LINK} has died. Your quest is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FBD RID: 4029
			// (get) Token: 0x06004B58 RID: 19288 RVA: 0x0014F804 File Offset: 0x0014DA04
			private TextObject QuestGiverLeftSettlementCancelLog
			{
				get
				{
					TextObject textObject = new TextObject("{=1RBxhh4W}{QUEST_GIVER.LINK} is not avaliable for this quest anymore.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FBE RID: 4030
			// (get) Token: 0x06004B59 RID: 19289 RVA: 0x0014F836 File Offset: 0x0014DA36
			private TextObject MainHeroAttackedLadysClansVillageLog
			{
				get
				{
					TextObject textObject = new TextObject("{=Qft5pfYr}You have been accused of a crime, and {QUEST_GIVER.LINK} has declared that you are no longer her champion.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FBF RID: 4031
			// (get) Token: 0x06004B5A RID: 19290 RVA: 0x0014F85A File Offset: 0x0014DA5A
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=a4XGmdd9}Lady's Knight Out", null);
				}
			}

			// Token: 0x17000FC0 RID: 4032
			// (get) Token: 0x06004B5B RID: 19291 RVA: 0x0014F867 File Offset: 0x0014DA67
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x06004B5C RID: 19292 RVA: 0x0014F86A File Offset: 0x0014DA6A
			public LadysKnightOutIssueQuest(string questId, Hero questGiver, CampaignTime duration, float issueDifficultyMultiplier, int rewardGold)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._difficultyMultiplier = issueDifficultyMultiplier;
				this._tournamentTown = null;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004B5D RID: 19293 RVA: 0x0014F892 File Offset: 0x0014DA92
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x06004B5E RID: 19294 RVA: 0x0014F89C File Offset: 0x0014DA9C
			protected override void RegisterEvents()
			{
				CampaignEvents.PlayerStartedTournamentMatch.AddNonSerializedListener(this, new Action<Town>(this.OnPlayerStartedTournamentMatch));
				CampaignEvents.PlayerEliminatedFromTournament.AddNonSerializedListener(this, new Action<int, Town>(this.OnPlayerEliminatedFromTournament));
				CampaignEvents.TournamentFinished.AddNonSerializedListener(this, new Action<CharacterObject, MBReadOnlyList<CharacterObject>, Town, ItemObject>(this.OnTournamentFinished));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, new Action<Hero, Hero, KillCharacterAction.KillCharacterActionDetail, bool>(this.OnHeroKilled));
				CampaignEvents.OnSettlementLeftEvent.AddNonSerializedListener(this, new Action<MobileParty, Settlement>(this.OnSettlementLeft));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			// Token: 0x06004B5F RID: 19295 RVA: 0x0014F964 File Offset: 0x0014DB64
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if ((mapEvent.IsForcingSupplies || mapEvent.IsForcingVolunteers || mapEvent.IsRaid) && attackerParty == PartyBase.MainParty && mapEvent.MapEventSettlement.IsVillage && mapEvent.MapEventSettlement.OwnerClan == base.QuestGiver.Clan)
				{
					this.CriminalActionPerformedTowardsSettlement();
					return;
				}
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x06004B60 RID: 19296 RVA: 0x0014F9CE File Offset: 0x0014DBCE
			protected override void OnTimedOut()
			{
				base.OnTimedOut();
				this.PlayerFailedToJoinTournamentInTime();
			}

			// Token: 0x06004B61 RID: 19297 RVA: 0x0014F9DC File Offset: 0x0014DBDC
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=at0iWxo1}It is exciting to think a warrior of your caliber will be my champion. {TOURNAMENT_ROUND_GOAL}", null), null, null).Condition(new ConversationSentence.OnConditionDelegate(this.QuestAcceptedCondition))
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=iPcbFoDx}Are you prepared for the tournament? Eating well? Staying healthy?", null), null, null).Condition(() => CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject)
					.PlayerLine(new TextObject("{=YOmuyrIt}Do you know if there is a tournament starting soon?", null), null)
					.BeginNpcOptions()
					.NpcOption(new TextObject("{=CeYwClaG}Yes, there is one starting at {NEARBY_TOURNAMENTS_LIST}. I am sure the arena master can explain the rules, if you need to know them.", null), new ConversationSentence.OnConditionDelegate(this.NpcTournamentLocationCondition), null, null)
					.CloseDialog()
					.NpcDefaultOption("{=sUfSCLQx}Sadly, I've heard no news of an upcoming tournament. I am sure one will be held before too long.")
					.CloseDialog()
					.EndNpcOptions()
					.CloseDialog();
			}

			// Token: 0x06004B62 RID: 19298 RVA: 0x0014FABC File Offset: 0x0014DCBC
			private bool QuestAcceptedCondition()
			{
				if (this.TournamentRoundGoal == 5)
				{
					MBTextManager.SetTextVariable("TOURNAMENT_ROUND_GOAL", new TextObject("{=nctTI5mv}I have every reason to believe you'll win the tournament.", null), false);
				}
				else
				{
					TextObject textObject = new TextObject("{=3FMvLhWV}I have every reason to believe you'll reach round {ROUND_COUNT}.", null);
					textObject.SetTextVariable("ROUND_COUNT", this.TournamentRoundGoal);
					MBTextManager.SetTextVariable("TOURNAMENT_ROUND_GOAL", textObject, false);
				}
				return CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject;
			}

			// Token: 0x06004B63 RID: 19299 RVA: 0x0014FB26 File Offset: 0x0014DD26
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddLog(this.QuestStartLog, false);
			}

			// Token: 0x06004B64 RID: 19300 RVA: 0x0014FB3C File Offset: 0x0014DD3C
			private bool NpcTournamentLocationCondition()
			{
				List<Town> list = Town.AllTowns.Where((Town x) => Campaign.Current.TournamentManager.GetTournamentGame(x) != null && x != Settlement.CurrentSettlement.Town).ToList<Town>();
				list = list.OrderBy((Town x) => x.Settlement.Position2D.DistanceSquared(Settlement.CurrentSettlement.Position2D)).ToList<Town>();
				if (list.Count > 0)
				{
					MBTextManager.SetTextVariable("NEARBY_TOURNAMENTS_LIST", list[0].Name, false);
					return true;
				}
				return false;
			}

			// Token: 0x06004B65 RID: 19301 RVA: 0x0014FBC6 File Offset: 0x0014DDC6
			private void OnPlayerStartedTournamentMatch(Town town)
			{
				this._tournamentTown = town;
			}

			// Token: 0x06004B66 RID: 19302 RVA: 0x0014FBCF File Offset: 0x0014DDCF
			private void OnPlayerEliminatedFromTournament(int round, Town settlement)
			{
				if (this.TournamentRoundGoal > round + 1)
				{
					this.PlayerCouldntReachedTournamentRoundGoal();
					return;
				}
				this.PlayerReachedTournamentRoundGoal();
			}

			// Token: 0x06004B67 RID: 19303 RVA: 0x0014FBE9 File Offset: 0x0014DDE9
			private void OnTournamentFinished(CharacterObject winner, MBReadOnlyList<CharacterObject> participants, Town town, ItemObject prize)
			{
				if (town == this._tournamentTown && winner == CharacterObject.PlayerCharacter)
				{
					this.PlayerReachedTournamentRoundGoal();
				}
			}

			// Token: 0x06004B68 RID: 19304 RVA: 0x0014FC02 File Offset: 0x0014DE02
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this.WarDeclaredOnQuestGiversFactionCancelLog);
				}
			}

			// Token: 0x06004B69 RID: 19305 RVA: 0x0014FC2C File Offset: 0x0014DE2C
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.PlayerDeclaredWarQuestLogText, this.WarDeclaredOnQuestGiversFactionCancelLog);
			}

			// Token: 0x06004B6A RID: 19306 RVA: 0x0014FC43 File Offset: 0x0014DE43
			private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification)
			{
				if (victim == base.QuestGiver)
				{
					this.QuestGiverIsDead();
				}
			}

			// Token: 0x06004B6B RID: 19307 RVA: 0x0014FC54 File Offset: 0x0014DE54
			private void OnSettlementLeft(MobileParty party, Settlement settlement)
			{
				if (base.QuestGiver.CurrentSettlement == null)
				{
					this.QuestGiverLeftSettlement();
				}
			}

			// Token: 0x06004B6C RID: 19308 RVA: 0x0014FC6C File Offset: 0x0014DE6C
			private void PlayerReachedTournamentRoundGoal()
			{
				base.AddLog(this.PlayerWinsTournamentSuccessLog, false);
				Clan.PlayerClan.AddRenown(1f, true);
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, 5, true, true);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004B6D RID: 19309 RVA: 0x0014FCBD File Offset: 0x0014DEBD
			private void PlayerCouldntReachedTournamentRoundGoal()
			{
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, -5, true, true);
				base.CompleteQuestWithFail(this.PlayerFailedToReachTournamentLevelLog);
			}

			// Token: 0x06004B6E RID: 19310 RVA: 0x0014FCDA File Offset: 0x0014DEDA
			private void PlayerFailedToJoinTournamentInTime()
			{
				base.AddLog(this.PlayerFailedToJoinTournamentLog, false);
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, -5, true, true);
			}

			// Token: 0x06004B6F RID: 19311 RVA: 0x0014FCF9 File Offset: 0x0014DEF9
			private void QuestGiverIsDead()
			{
				base.CompleteQuestWithCancel(this.QuestGiverIsDeadCancelLog);
			}

			// Token: 0x06004B70 RID: 19312 RVA: 0x0014FD07 File Offset: 0x0014DF07
			private void QuestGiverLeftSettlement()
			{
				base.CompleteQuestWithCancel(this.QuestGiverLeftSettlementCancelLog);
			}

			// Token: 0x06004B71 RID: 19313 RVA: 0x0014FD18 File Offset: 0x0014DF18
			private void CriminalActionPerformedTowardsSettlement()
			{
				this.RelationshipChangeWithQuestGiver = -5;
				Tuple<TraitObject, int>[] array = new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -50)
				};
				TraitLevelingHelper.OnIssueSolvedThroughQuest(Hero.MainHero, array);
				base.CompleteQuestWithFail(this.MainHeroAttackedLadysClansVillageLog);
			}

			// Token: 0x040019D5 RID: 6613
			[SaveableField(1)]
			private readonly float _difficultyMultiplier;

			// Token: 0x040019D6 RID: 6614
			[SaveableField(2)]
			private Town _tournamentTown;
		}

		// Token: 0x0200062D RID: 1581
		public class LadysKnightOutIssueTypeDefiner : CampaignBehaviorBase.SaveableCampaignBehaviorTypeDefiner
		{
			// Token: 0x06004B73 RID: 19315 RVA: 0x0014FD6E File Offset: 0x0014DF6E
			public LadysKnightOutIssueTypeDefiner()
				: base(585700)
			{
			}

			// Token: 0x06004B74 RID: 19316 RVA: 0x0014FD7B File Offset: 0x0014DF7B
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LadysKnightOutIssueBehavior.LadysKnightOutIssue), 1, null);
				base.AddClassDefinition(typeof(LadysKnightOutIssueBehavior.LadysKnightOutIssueQuest), 2, null);
			}
		}
	}
}
