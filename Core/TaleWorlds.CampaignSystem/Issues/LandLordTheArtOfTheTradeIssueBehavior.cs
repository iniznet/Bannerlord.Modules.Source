using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000312 RID: 786
	public class LandLordTheArtOfTheTradeIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002CFC RID: 11516 RVA: 0x000BBBC0 File Offset: 0x000B9DC0
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002CFD RID: 11517 RVA: 0x000BBBD9 File Offset: 0x000B9DD9
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002CFE RID: 11518 RVA: 0x000BBBDC File Offset: 0x000B9DDC
		private bool ConditionsHold(Hero issueGiver)
		{
			if (issueGiver.IsRuralNotable)
			{
				Settlement currentSettlement = issueGiver.CurrentSettlement;
				Village village = ((currentSettlement != null) ? currentSettlement.Village : null);
				return village != null && village.Bound.Town.GetItemPrice(village.VillageType.PrimaryProduction, null, false) < village.VillageType.PrimaryProduction.Value;
			}
			return false;
		}

		// Token: 0x06002CFF RID: 11519 RVA: 0x000BBC3C File Offset: 0x000B9E3C
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002D00 RID: 11520 RVA: 0x000BBCA0 File Offset: 0x000B9EA0
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssue(issueOwner, issueOwner.CurrentSettlement.Village.VillageType.PrimaryProduction);
		}

		// Token: 0x04000D90 RID: 3472
		private const IssueBase.IssueFrequency LandLordTheArtOfTheTradeIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x04000D91 RID: 3473
		private const float TargetDenarsConstant = 0.55f;

		// Token: 0x02000639 RID: 1593
		public class LandLordTheArtOfTheTradeIssue : IssueBase
		{
			// Token: 0x06004C90 RID: 19600 RVA: 0x001546B1 File Offset: 0x001528B1
			internal static void AutoGeneratedStaticCollectObjectsLandLordTheArtOfTheTradeIssue(object o, List<object> collectedObjects)
			{
				((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004C91 RID: 19601 RVA: 0x001546BF File Offset: 0x001528BF
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x17001011 RID: 4113
			// (get) Token: 0x06004C92 RID: 19602 RVA: 0x001546C8 File Offset: 0x001528C8
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Duration;
				}
			}

			// Token: 0x17001012 RID: 4114
			// (get) Token: 0x06004C93 RID: 19603 RVA: 0x001546CB File Offset: 0x001528CB
			private int SelectedItemObjectCount
			{
				get
				{
					return MathF.Max(1, MathF.Round((float)((int)(5000f / (float)this._selectedItemObject.Value)) * base.IssueDifficultyMultiplier));
				}
			}

			// Token: 0x17001013 RID: 4115
			// (get) Token: 0x06004C94 RID: 19604 RVA: 0x001546F3 File Offset: 0x001528F3
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 2 + MathF.Ceiling(4f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17001014 RID: 4116
			// (get) Token: 0x06004C95 RID: 19605 RVA: 0x00154708 File Offset: 0x00152908
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 3 + MathF.Ceiling(5f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17001015 RID: 4117
			// (get) Token: 0x06004C96 RID: 19606 RVA: 0x0015471D File Offset: 0x0015291D
			protected override int RewardGold
			{
				get
				{
					return (int)((float)(this._selectedItemObject.Value * this.SelectedItemObjectCount) * this.RewardGoldDeterministicRandomContribution);
				}
			}

			// Token: 0x17001016 RID: 4118
			// (get) Token: 0x06004C97 RID: 19607 RVA: 0x0015473A File Offset: 0x0015293A
			private float RewardGoldDeterministicRandomContribution
			{
				get
				{
					return base.IssueOwner.RandomFloatWithSeed((uint)this.IssueCreationTime.ElapsedDaysUntilNow, 0.2f, 0.5f);
				}
			}

			// Token: 0x17001017 RID: 4119
			// (get) Token: 0x06004C98 RID: 19608 RVA: 0x00154760 File Offset: 0x00152960
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=AKdDSZoM}Yes. It's a good problem to have, though. As you know, I deal in {.%}{SELECTED_ITEM}{.%}. Production this year has been very good, and we can no longer make a profit on the local market. I cannot however, put together a caravan to sell it elsewhere. So, I propose a very simple deal.", null);
					if (this._selectedItemObject.HasHorseComponent || this._selectedItemObject.IsAnimal)
					{
						textObject = new TextObject("{=llVFTH6n}Yes. It's a good problem to have, though. As you may know, I deal in {PLURAL(SELECTED_ITEM)}. Our herds have increased this year, and we can no longer make a profit on the local market. I cannot however organize a drive to a new market. So, I propose a very simple deal.", null);
					}
					textObject.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
					return textObject;
				}
			}

			// Token: 0x17001018 RID: 4120
			// (get) Token: 0x06004C99 RID: 19609 RVA: 0x001547B7 File Offset: 0x001529B7
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=8jyUn6mb}You sell me the goods at a discount?", null);
				}
			}

			// Token: 0x17001019 RID: 4121
			// (get) Token: 0x06004C9A RID: 19610 RVA: 0x001547C4 File Offset: 0x001529C4
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=rWnvnufw}That could work, if you have the money. But if you don't, I'm willing to take a chance on you. I reckon for {SELECTED_ITEM_COUNT} {.%}{?SELECTED_ITEM_COUNT > 1}{PLURAL(SELECTED_ITEM)}{?}{SELECTED_ITEM}{\\?}{.%} you can probably find a market nearby where buyers will pay you a total of {TOTAL_GOLD}{GOLD_ICON}. Here's my offer. I loan you the product. You sell it at whatever price you like, and bring me back {TOTAL_GOLD}{GOLD_ICON} denars. I have little doubt you could find a market where you could get a better price than this, and make a profit.", null);
					if (this._selectedItemObject.HasHorseComponent || this._selectedItemObject.IsAnimal)
					{
						textObject = new TextObject("{=b19Hlp7h}That could work, if you have the money. But if you don't, I'm willing to take a chance on you. I reckon for {SELECTED_ITEM_COUNT} {?SELECTED_ITEM_COUNT > 1}{PLURAL(SELECTED_ITEM)}{?}{SELECTED_ITEM}{\\?} you can probably find a market nearby where buyers will pay you a total of {TOTAL_GOLD}{GOLD_ICON}. Here's my offer. I loan you the livestock. You sell at whatever price you like, and bring me back {TOTAL_GOLD}{GOLD_ICON} denars. I have little doubt you could find a market where you could get a better price than this, and make a profit.", null);
					}
					textObject.SetTextVariable("TOTAL_GOLD", (int)((float)(this._selectedItemObject.Value * this.SelectedItemObjectCount) * 0.55f));
					textObject.SetTextVariable("SELECTED_ITEM_COUNT", this.SelectedItemObjectCount);
					textObject.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x1700101A RID: 4122
			// (get) Token: 0x06004C9B RID: 19611 RVA: 0x00154864 File Offset: 0x00152A64
			public override TextObject IssuePlayerResponseAfterAlternativeExplanation
			{
				get
				{
					return new TextObject("{=w1rVTUIs}This seems like a simple errand. Would your offer still stand if I get someone else to do it for me?", null);
				}
			}

			// Token: 0x1700101B RID: 4123
			// (get) Token: 0x06004C9C RID: 19612 RVA: 0x00154871 File Offset: 0x00152A71
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=PE97ZWvX}Not just anybody. If you have a companion that has your complete trust, then I'll agree... Just make sure he is well guarded. Goods attract bandits, as I'm sure you know. I suppose {ALTERNATIVE_TROOP_AMOUNT} well-armed men would be enough.", null);
					textObject.SetTextVariable("ALTERNATIVE_TROOP_AMOUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					return textObject;
				}
			}

			// Token: 0x1700101C RID: 4124
			// (get) Token: 0x06004C9D RID: 19613 RVA: 0x00154890 File Offset: 0x00152A90
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=aB0TT6Ur}Fear not. I will find the right market for your {.%}{SELECTED_ITEM}{.%} myself.", null);
					if (this._selectedItemObject.HasHorseComponent || this._selectedItemObject.IsAnimal)
					{
						textObject = new TextObject("{=cBO49V5b}Fear not. I will find the right market for your {PLURAL(SELECTED_ITEM)} myself.", null);
					}
					textObject.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
					return textObject;
				}
			}

			// Token: 0x1700101D RID: 4125
			// (get) Token: 0x06004C9E RID: 19614 RVA: 0x001548E7 File Offset: 0x00152AE7
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=IFasMslv}I will assign a companion with {TROOP_COUNT} good men for {RETURN_DAYS} days.", null);
					textObject.SetTextVariable("TROOP_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			// Token: 0x1700101E RID: 4126
			// (get) Token: 0x06004C9F RID: 19615 RVA: 0x00154918 File Offset: 0x00152B18
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=dLywF1Uz}I have heard your companion has started to sell the goods. This was a good deal, {?PLAYER.GENDER}ma'am{?}sir{\\?}.", null);
				}
			}

			// Token: 0x1700101F RID: 4127
			// (get) Token: 0x06004CA0 RID: 19616 RVA: 0x00154925 File Offset: 0x00152B25
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=aUXAh8cE}Very well, {PLAYER.NAME}. If you're willing to vouch for your companion, I'm sure this will work.", null);
				}
			}

			// Token: 0x17001020 RID: 4128
			// (get) Token: 0x06004CA1 RID: 19617 RVA: 0x00154932 File Offset: 0x00152B32
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17001021 RID: 4129
			// (get) Token: 0x06004CA2 RID: 19618 RVA: 0x00154935 File Offset: 0x00152B35
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001022 RID: 4130
			// (get) Token: 0x06004CA3 RID: 19619 RVA: 0x00154938 File Offset: 0x00152B38
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=BK9ww4NU}{QUEST_GIVER.LINK} asked you to sell {?QUEST_GIVER.GENDER}her{?}his{\\?} goods for at least {UNIT_PRICE}{GOLD_ICON} per {UNIT_NAME} and return to {?QUEST_GIVER.GENDER}her{?}him{\\?}. {?QUEST_GIVER.GENDER}She{?}He{\\?} told you that any profit that the deal would make above this price is yours to keep. You asked {COMPANION.LINK} to take {TROOP_COUNT} of your best men to go and take care of it. They should report back to you in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, true);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("UNIT_NAME", "{=g72xNv75}load");
					if (this._selectedItemObject.HasHorseComponent || this._selectedItemObject.IsAnimal)
					{
						textObject.SetTextVariable("UNIT_NAME", "{=T9Tgi9is}animal");
					}
					textObject.SetTextVariable("UNIT_PRICE", this._selectedItemObject.Value);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("TROOP_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17001023 RID: 4131
			// (get) Token: 0x06004CA4 RID: 19620 RVA: 0x00154A0C File Offset: 0x00152C0C
			public override TextObject IssueAlternativeSolutionSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=BDAmZkJF}You received a message from {ISSUE_GIVER.LINK}. 'It was a pleasure doing business with you and your folks.'", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001024 RID: 4132
			// (get) Token: 0x06004CA5 RID: 19621 RVA: 0x00154A3E File Offset: 0x00152C3E
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=96m29Eb7}The Art of The Trade", null);
				}
			}

			// Token: 0x17001025 RID: 4133
			// (get) Token: 0x06004CA6 RID: 19622 RVA: 0x00154A4B File Offset: 0x00152C4B
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=BZwKEIm5}{ISSUE_GIVER.LINK} wants you to sell {?ISSUE_GIVER.GENDER}her{?}his{\\?} goods for a price above the global average.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, null, false);
					return textObject;
				}
			}

			// Token: 0x06004CA7 RID: 19623 RVA: 0x00154A70 File Offset: 0x00152C70
			public LandLordTheArtOfTheTradeIssue(Hero issueOwner, ItemObject villageProduction)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
				this._selectedItemObject = villageProduction;
			}

			// Token: 0x06004CA8 RID: 19624 RVA: 0x00154A8A File Offset: 0x00152C8A
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.VillageHearth)
				{
					return -0.1f;
				}
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x06004CA9 RID: 19625 RVA: 0x00154AAD File Offset: 0x00152CAD
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Trade) >= hero.GetSkillValue(DefaultSkills.Riding)) ? DefaultSkills.Trade : DefaultSkills.Riding, 120);
			}

			// Token: 0x06004CAA RID: 19626 RVA: 0x00154ADC File Offset: 0x00152CDC
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				int totalAlternativeSolutionNeededMenCount = base.GetTotalAlternativeSolutionNeededMenCount();
				if (this.GetNumberOfTier2Troops(troopRoster) < totalAlternativeSolutionNeededMenCount)
				{
					explanation = new TextObject("{=rJIY7OiR}You have to send {NEEDED_TROOP_COUNT} troops with at least tier 2 to this quest.", null);
					explanation.SetTextVariable("NEEDED_TROOP_COUNT", totalAlternativeSolutionNeededMenCount);
					return false;
				}
				explanation = TextObject.Empty;
				return true;
			}

			// Token: 0x06004CAB RID: 19627 RVA: 0x00154B20 File Offset: 0x00152D20
			private int GetNumberOfTier2Troops(TroopRoster troopRoster)
			{
				int num = 0;
				foreach (TroopRosterElement troopRosterElement in troopRoster.GetTroopRoster())
				{
					if (troopRosterElement.Character.Tier >= 2)
					{
						num += troopRoster.GetTroopCount(troopRosterElement.Character) - troopRoster.GetElementWoundedNumber(troopRoster.FindIndexOfTroop(troopRosterElement.Character));
					}
				}
				return num;
			}

			// Token: 0x06004CAC RID: 19628 RVA: 0x00154BA0 File Offset: 0x00152DA0
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x06004CAD RID: 19629 RVA: 0x00154BA4 File Offset: 0x00152DA4
			public override bool IssueStayAliveConditions()
			{
				return !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid && (float)base.IssueOwner.CurrentSettlement.Village.Bound.Town.GetItemPrice(base.IssueOwner.CurrentSettlement.Village.VillageType.PrimaryProduction, null, false) < (float)base.IssueOwner.CurrentSettlement.Village.VillageType.PrimaryProduction.Value * 1.3f;
			}

			// Token: 0x06004CAE RID: 19630 RVA: 0x00154C3C File Offset: 0x00152E3C
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flags, out Hero relationHero, out SkillObject skill)
			{
				flags = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flags |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.MapFaction, Hero.MainHero.MapFaction))
				{
					flags |= IssueBase.PreconditionFlags.AtWar;
				}
				return flags == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004CAF RID: 19631 RVA: 0x00154C8C File Offset: 0x00152E8C
			protected override void OnGameLoad()
			{
				this._selectedItemObject = base.IssueOwner.CurrentSettlement.Village.VillageType.PrimaryProduction;
			}

			// Token: 0x06004CB0 RID: 19632 RVA: 0x00154CAE File Offset: 0x00152EAE
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(30f), this._selectedItemObject, this.SelectedItemObjectCount);
			}

			// Token: 0x06004CB1 RID: 19633 RVA: 0x00154CD2 File Offset: 0x00152ED2
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x17001026 RID: 4134
			// (get) Token: 0x06004CB2 RID: 19634 RVA: 0x00154CD4 File Offset: 0x00152ED4
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(900f + 800f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x06004CB3 RID: 19635 RVA: 0x00154CE9 File Offset: 0x00152EE9
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				GainRenownAction.Apply(Hero.MainHero, 1f, false);
				this.RelationshipChangeWithIssueOwner = 10;
			}

			// Token: 0x04001A08 RID: 6664
			private const int IssueAndQuestDuration = 30;

			// Token: 0x04001A09 RID: 6665
			private const int CompanionRequiredSkillLevel = 120;

			// Token: 0x04001A0A RID: 6666
			private ItemObject _selectedItemObject;
		}

		// Token: 0x0200063A RID: 1594
		public class LandLordTheArtOfTheTradeIssueQuest : QuestBase
		{
			// Token: 0x06004CB4 RID: 19636 RVA: 0x00154D03 File Offset: 0x00152F03
			internal static void AutoGeneratedStaticCollectObjectsLandLordTheArtOfTheTradeIssueQuest(object o, List<object> collectedObjects)
			{
				((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004CB5 RID: 19637 RVA: 0x00154D11 File Offset: 0x00152F11
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._selectedItemObject);
				collectedObjects.Add(this._soldItemAmountLog);
				collectedObjects.Add(this._gatheredDenarsLog);
			}

			// Token: 0x06004CB6 RID: 19638 RVA: 0x00154D3E File Offset: 0x00152F3E
			internal static object AutoGeneratedGetMemberValue_selectedItemObject(object o)
			{
				return ((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o)._selectedItemObject;
			}

			// Token: 0x06004CB7 RID: 19639 RVA: 0x00154D4B File Offset: 0x00152F4B
			internal static object AutoGeneratedGetMemberValue_selectedItemObjectCount(object o)
			{
				return ((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o)._selectedItemObjectCount;
			}

			// Token: 0x06004CB8 RID: 19640 RVA: 0x00154D5D File Offset: 0x00152F5D
			internal static object AutoGeneratedGetMemberValue_soldCount(object o)
			{
				return ((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o)._soldCount;
			}

			// Token: 0x06004CB9 RID: 19641 RVA: 0x00154D6F File Offset: 0x00152F6F
			internal static object AutoGeneratedGetMemberValue_gatheredDenars(object o)
			{
				return ((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o)._gatheredDenars;
			}

			// Token: 0x06004CBA RID: 19642 RVA: 0x00154D81 File Offset: 0x00152F81
			internal static object AutoGeneratedGetMemberValue_daysPassed(object o)
			{
				return ((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o)._daysPassed;
			}

			// Token: 0x06004CBB RID: 19643 RVA: 0x00154D93 File Offset: 0x00152F93
			internal static object AutoGeneratedGetMemberValue_underSoldLogAdded(object o)
			{
				return ((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o)._underSoldLogAdded;
			}

			// Token: 0x06004CBC RID: 19644 RVA: 0x00154DA5 File Offset: 0x00152FA5
			internal static object AutoGeneratedGetMemberValue_soldItemAmountLog(object o)
			{
				return ((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o)._soldItemAmountLog;
			}

			// Token: 0x06004CBD RID: 19645 RVA: 0x00154DB2 File Offset: 0x00152FB2
			internal static object AutoGeneratedGetMemberValue_gatheredDenarsLog(object o)
			{
				return ((LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest)o)._gatheredDenarsLog;
			}

			// Token: 0x17001027 RID: 4135
			// (get) Token: 0x06004CBE RID: 19646 RVA: 0x00154DBF File Offset: 0x00152FBF
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=96m29Eb7}The Art of The Trade", null);
				}
			}

			// Token: 0x17001028 RID: 4136
			// (get) Token: 0x06004CBF RID: 19647 RVA: 0x00154DCC File Offset: 0x00152FCC
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001029 RID: 4137
			// (get) Token: 0x06004CC0 RID: 19648 RVA: 0x00154DD0 File Offset: 0x00152FD0
			private bool QuestCanBeFinalized
			{
				get
				{
					return Hero.OneToOneConversationHero != null && Hero.OneToOneConversationHero == base.QuestGiver && (this.ItemCountLeftToSell <= 0 || this._targetDenarsToAchieve <= this._gatheredDenars || (this._daysPassed >= 1 && this.CheckIfPlayerLostItem()));
				}
			}

			// Token: 0x1700102A RID: 4138
			// (get) Token: 0x06004CC1 RID: 19649 RVA: 0x00154E1D File Offset: 0x0015301D
			private int ItemCountLeftToSell
			{
				get
				{
					return this._selectedItemObjectCount - this._soldCount;
				}
			}

			// Token: 0x1700102B RID: 4139
			// (get) Token: 0x06004CC2 RID: 19650 RVA: 0x00154E2C File Offset: 0x0015302C
			private int RemainingDenars
			{
				get
				{
					return this._targetDenarsToAchieve - this._gatheredDenars;
				}
			}

			// Token: 0x1700102C RID: 4140
			// (get) Token: 0x06004CC3 RID: 19651 RVA: 0x00154E3C File Offset: 0x0015303C
			private TextObject QuestStartedLogText1
			{
				get
				{
					TextObject textObject = new TextObject("{=2bcNCnI3}{QUEST_GIVER.LINK} asked you to sell {?QUEST_GIVER.GENDER}her{?}his{\\?} goods for at least {UNIT_PRICE}{GOLD_ICON} per load and return to {?QUEST_GIVER.GENDER}her{?}him{\\?}. {?QUEST_GIVER.GENDER}She{?}He{\\?} told you that any profit would make above this price is yours to keep.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, true);
					textObject.SetTextVariable("UNIT_PRICE", this._targetDenarsToAchieve / this._selectedItemObjectCount);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x1700102D RID: 4141
			// (get) Token: 0x06004CC4 RID: 19652 RVA: 0x00154E98 File Offset: 0x00153098
			private TextObject QuestStartedLogText2
			{
				get
				{
					TextObject textObject = new TextObject("{=jI251oj9}{?QUEST_GIVER.GENDER}She{?}He{\\?} noted that {?QUEST_GIVER.GENDER}she{?}he{\\?} has {SELECTED_ITEM_COUNT} {.%}{?SELECTED_ITEM_COUNT > 1}{PLURAL(SELECTED_ITEM)}{?}{SELECTED_ITEM}{\\?}{.%}. {?QUEST_GIVER.GENDER}She{?}He{\\?} is expecting to earn {TOTAL_GOLD}{GOLD_ICON} denars from that.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("SELECTED_ITEM_COUNT", this._selectedItemObjectCount);
					textObject.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
					textObject.SetTextVariable("TOTAL_GOLD", this._targetDenarsToAchieve);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x1700102E RID: 4142
			// (get) Token: 0x06004CC5 RID: 19653 RVA: 0x00154F18 File Offset: 0x00153118
			private TextObject QuestStartedLogText3
			{
				get
				{
					TextObject textObject = new TextObject("{=tf04Piaj}You told {?QUEST_GIVER.GENDER}her{?}him{\\?} that you will sell the goods personally.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700102F RID: 4143
			// (get) Token: 0x06004CC6 RID: 19654 RVA: 0x00154F4A File Offset: 0x0015314A
			private TextObject QuestSuccessLogText
			{
				get
				{
					return new TextObject("{=EsNDadiR}You have completed your end of your bargain and made some denars simply by using your smarts.", null);
				}
			}

			// Token: 0x17001030 RID: 4144
			// (get) Token: 0x06004CC7 RID: 19655 RVA: 0x00154F58 File Offset: 0x00153158
			private TextObject QuestReadyToBeFinishedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=2GMOnUIM}{QUEST_GIVER.LINK} expects your return to have {?QUEST_GIVER.GENDER}her{?}his{\\?} share of the deal.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001031 RID: 4145
			// (get) Token: 0x06004CC8 RID: 19656 RVA: 0x00154F9C File Offset: 0x0015319C
			private TextObject QuestReadyToBeFinishedUnderSoldLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=IfPnl0B6}You have lost some of the wares you were supposed to be selling. You can speak with {QUEST_GIVER.LINK} to pay for a compensation.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001032 RID: 4146
			// (get) Token: 0x06004CC9 RID: 19657 RVA: 0x00154FD0 File Offset: 0x001531D0
			private TextObject QuestSuccessWithPayingGatheredDenarsLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=4bDHBIr1}You have completed your end of the bargain. {QUEST_GIVER.LINK} now considers you as a trustworthy {?PLAYER.GENDER}tradeswoman{?}tradesman{\\?}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001033 RID: 4147
			// (get) Token: 0x06004CCA RID: 19658 RVA: 0x00155014 File Offset: 0x00153214
			private TextObject QuestSuccessPlayerBoughtItemsLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=rYt43AWk}{QUEST_GIVER.LINK} accepted your offer to buy the products from an average price. You can now sell those for profits without any obligations to {?QUEST_GIVER.GENDER}her{?}him{\\?}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001034 RID: 4148
			// (get) Token: 0x06004CCB RID: 19659 RVA: 0x00155048 File Offset: 0x00153248
			private TextObject QuestFailedPlayerBrokeTheAgreementLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=1q2dxlol}You have failed to pay {TOTAL_DENAR}{GOLD_ICON} denars to {QUEST_GIVER.LINK}. {QUEST_GIVER_VILLAGE} and its locals are aware of your misdemeanor.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_VILLAGE", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("TOTAL_DENAR", this._targetDenarsToAchieve);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17001035 RID: 4149
			// (get) Token: 0x06004CCC RID: 19660 RVA: 0x001550BC File Offset: 0x001532BC
			private TextObject QuestCanceledWarDeclaredLog
			{
				get
				{
					TextObject textObject = new TextObject("{=vW6kBki9}Your clan is now at war with {QUEST_GIVER.LINK}'s realm. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001036 RID: 4150
			// (get) Token: 0x06004CCD RID: 19661 RVA: 0x001550F0 File Offset: 0x001532F0
			private TextObject PlayerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001037 RID: 4151
			// (get) Token: 0x06004CCE RID: 19662 RVA: 0x00155124 File Offset: 0x00153324
			private TextObject QuestGiverVillageRaided
			{
				get
				{
					TextObject textObject = new TextObject("{=w0FD9U98}{QUEST_GIVER.LINK}'s village is raided. Your agreement with {?QUEST_GIVER.GENDER}her{?}him{\\?} is moot.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17001038 RID: 4152
			// (get) Token: 0x06004CCF RID: 19663 RVA: 0x00155174 File Offset: 0x00153374
			private TextObject QuestFailedWithTimeOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=PQt8lfTX}You have failed to return to the {QUEST_GIVER.LINK} in time. {QUEST_GIVER_VILLAGE} and its locals are aware of your misdemeanor.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_GIVER_VILLAGE", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x06004CD0 RID: 19664 RVA: 0x001551C4 File Offset: 0x001533C4
			public LandLordTheArtOfTheTradeIssueQuest(string questId, Hero giverHero, CampaignTime duration, ItemObject selectedItemObject, int selectedItemObjectCount)
				: base(questId, giverHero, duration, 0)
			{
				this._selectedItemObject = selectedItemObject;
				this._selectedItemObjectCount = selectedItemObjectCount;
				this._targetDenarsToAchieve = (int)((float)(selectedItemObject.Value * selectedItemObjectCount) * 0.55f);
				this._daysPassed = 0;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004CD1 RID: 19665 RVA: 0x00155220 File Offset: 0x00153420
			protected override void SetDialogs()
			{
				TextObject textObject = new TextObject("{=3Sk0BQ4n}I will buy the products from you for {TOTAL_GOLD}{GOLD_ICON}. This way we both will get what we desire.", null);
				if (this._selectedItemObject.IsAnimal || this._selectedItemObject.HasHorseComponent)
				{
					textObject = new TextObject("{=7nBOWsg2}I will buy the livestock from you for {TOTAL_GOLD}{GOLD_ICON}. This way we both will get what we desire.", null);
				}
				textObject.SetTextVariable("TOTAL_GOLD", this._targetDenarsToAchieve);
				textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				TextObject textObject2 = new TextObject("{=iYtzlRSN}I would rather be your middleman on this matter. I need to keep my money. You can have your men load up the {.%}{SELECTED_ITEM}{.%} already.", null);
				if (this._selectedItemObject.IsAnimal || this._selectedItemObject.HasHorseComponent)
				{
					textObject2 = new TextObject("{=exmSGWUb}I would rather be your middleman on this matter. I need to keep my money. You can have your men get the herd ready.", null);
				}
				textObject2.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
				TextObject textObject3 = new TextObject("{=9d6WxRrj}Do you want to buy the goods yourself? Or will I retain ownership, and you just keep the extra profits? I am expecting to earn {TOTAL_DENARS}{GOLD_ICON} for {SELECTED_COUNT} loads of produce. If would like to buy it right away you can simply sell it yourself or do whatever you wish with it.", null);
				if (this._selectedItemObject.IsAnimal || this._selectedItemObject.HasHorseComponent)
				{
					textObject3 = new TextObject("{=GihVcxIB}Do you want to buy the livestock yourself? Or will I retain ownership, and you just keep the extra profits? I am expecting to earn {TOTAL_DENARS}{GOLD_ICON} in total. If would like to buy the livestock right away you can simply sell it yourself or do whatever you wish with it.", null);
				}
				textObject3.SetTextVariable("TOTAL_DENARS", this._targetDenarsToAchieve);
				textObject3.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				textObject3.SetTextVariable("SELECTED_COUNT", this._selectedItemObjectCount);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=NaoYCmC6}Good. Needless to say, by not taking any money up front, I am trusting in your honesty in your ability to protect those goods. But I am sure that trust will not be misplaced.", null), null, null).Condition(() => Hero.OneToOneConversationHero == this.QuestGiver)
					.NpcLine(textObject3, null, null)
					.BeginPlayerOptions()
					.PlayerOption(textObject, null)
					.ClickableCondition(new ConversationSentence.OnClickableConditionDelegate(this.PlayerBuyClickableOptionCondition))
					.NpcLine(new TextObject("{=LmTii9E2}It was a pleasure doing business with you. If only everyone was as honest as you.", null), null, null)
					.Consequence(delegate
					{
						this.StartQuest();
						this.QuestFinishedPlayerBoughtTheGoods();
					})
					.CloseDialog()
					.PlayerOption(textObject2, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
				TextObject playerMainOptionOneWithGold = new TextObject("{=1zdkXAwL}The market isn't what we expected. I am afraid I only made {GATHERED_DENARS}{GOLD_ICON} of the {TOTAL_DENARS}{GOLD_ICON} that we agreed upon.", null);
				playerMainOptionOneWithGold.SetTextVariable("GATHERED_DENARS", this._gatheredDenars);
				playerMainOptionOneWithGold.SetTextVariable("TOTAL_DENARS", this._targetDenarsToAchieve);
				playerMainOptionOneWithGold.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				TextObject playerMainOptionOneNoGold = new TextObject("{=52lNazA1}I'm afraid that things came up. I was not able to make the sale.", null);
				TextObject textObject4 = new TextObject("{=!}{PLAYER_OPTION}", null);
				TextObject textObject5 = new TextObject("{=THD3C7xc}I have. Here is the {TOTAL_DENARS}{GOLD_ICON} denars just as we agreed.", null);
				textObject5.SetTextVariable("TOTAL_DENARS", this._targetDenarsToAchieve);
				textObject5.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				TextObject textObject6 = new TextObject("{=z47GjqTZ}Yes, of course. This is the {TOTAL_DENARS}{GOLD_ICON} denars that I owe you.", null);
				textObject6.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				textObject6.SetTextVariable("TOTAL_DENARS", this._targetDenarsToAchieve);
				TextObject playerFailOptionWithGold = new TextObject("{=dtzKfkrh}We never agreed on this. I am not paying you any more than {GATHERED_DENARS}{GOLD_ICON}, and you cannot force me.", null);
				playerFailOptionWithGold.SetTextVariable("GATHERED_DENARS", this._gatheredDenars);
				TextObject playerFailOptionNoGold = new TextObject("{=aFDiKxhr}Our deal involved you getting your cut from the sales I made. No sale means no cut. I'm sure you understand.", null);
				TextObject textObject7 = new TextObject("{=!}{PLAYER_FAIL_OPTION}", null);
				TextObject textObject8 = new TextObject("{=41wb8QaV}I know I can not force you to pay you what you owe me. But I think you will find that a good name is worth more than a few loads of {SELECTED_ITEM}...", null);
				textObject8.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
				if (this._selectedItemObject.IsAnimal || this._selectedItemObject.HasHorseComponent)
				{
					textObject8 = new TextObject("{=pcrdOlE8}I know I can not force you to pay you what you owe me. But I think you will find that a good name is worth more than a bit of livestock...", null);
				}
				TextObject textObject9 = new TextObject("{=OIwtLKN3}I am a {?PLAYER.GENDER}woman{?}man{\\?} of my word. I will raise some money to pay you. Wait for my return {QUEST_GIVER.LINK}.", null);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject9, false);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject9, false);
				TextObject textObject10 = new TextObject("{=bPPXiybO}I just happened to be around. Have no fear {QUEST_GIVER.NAME}, your goods are fine.", null);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject10, false);
				TextObject textObject11 = new TextObject("{=ekSg8okD}I will be better once you return with the denars you owe me {PLAYER.NAME}.", null);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject10, false);
				TextObject textObject12 = new TextObject("{=bbsN6hOo}Have you already sold that {SELECTED_ITEM}? If so, that seems awfully quick.", null);
				textObject12.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).BeginNpcOptions().NpcOption(textObject12, () => Hero.OneToOneConversationHero != null && Hero.OneToOneConversationHero == this.QuestGiver && !this.QuestCanBeFinalized, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=gVad94Br}I was just checking in with you.", null), null)
					.Condition(() => !this.QuestCanBeFinalized)
					.NpcLine(textObject11, null, null)
					.CloseDialog()
					.PlayerOption(textObject10, null)
					.Condition(() => !this.QuestCanBeFinalized)
					.NpcLine(textObject11, null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.NpcOption(new TextObject("{=1q3FKY1s}Have you made your trip yet? I presume you were able to make a sale?", null), () => Hero.OneToOneConversationHero != null && Hero.OneToOneConversationHero == this.QuestGiver && this.QuestCanBeFinalized, null, null)
					.BeginPlayerOptions()
					.PlayerOption(textObject4, null)
					.Condition(delegate
					{
						if (this._gatheredDenars > 0)
						{
							playerMainOptionOneWithGold.SetTextVariable("GATHERED_DENARS", this._gatheredDenars);
							Campaign.Current.ConversationManager.GetCurrentDialogLine().SetTextVariable("PLAYER_OPTION", playerMainOptionOneWithGold);
						}
						else
						{
							Campaign.Current.ConversationManager.GetCurrentDialogLine().SetTextVariable("PLAYER_OPTION", playerMainOptionOneNoGold);
						}
						return this.QuestCanBeFinalized && this._productsUndersold;
					})
					.NpcLine(new TextObject("{=QlYUE00L}Well. We did have an agreement. I do expect you to pay the full amount.", null), null, null)
					.BeginPlayerOptions()
					.PlayerOption(textObject6, null)
					.ClickableCondition(new ConversationSentence.OnClickableConditionDelegate(this.PlayerPayAgreedDenarsClickableCondition))
					.NpcLine(new TextObject("{=gNHh9bvb}I am sorry that you did not manage to make a profit. But you are keeping your end of the bargain, and that is admirable.", null), null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.PlayerPaidAgreedDenarsQuestSuccess;
					})
					.CloseDialog()
					.PlayerOption(textObject7, null)
					.ClickableCondition(new ConversationSentence.OnClickableConditionDelegate(this.PlayerFailWithGoldClickableCondition))
					.Condition(delegate
					{
						if (this._gatheredDenars > 0)
						{
							playerFailOptionWithGold.SetTextVariable("GATHERED_DENARS", this._gatheredDenars);
							Campaign.Current.ConversationManager.GetCurrentDialogLine().SetTextVariable("PLAYER_FAIL_OPTION", playerFailOptionWithGold);
						}
						else
						{
							Campaign.Current.ConversationManager.GetCurrentDialogLine().SetTextVariable("PLAYER_FAIL_OPTION", playerFailOptionNoGold);
						}
						return true;
					})
					.NpcLine(textObject8, null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.QuestFailedPlayerBrokeTheAgreement;
					})
					.CloseDialog()
					.PlayerOption(textObject9, null)
					.NpcLine(new TextObject("{=RxjuaDum}I am glad of that. Don't make me wait too long. Some men say they will pay a debt, and you never see them again.", null), null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.PlayerOption(textObject5, null)
					.Condition(() => this.QuestCanBeFinalized && !this._productsUndersold)
					.NpcLine(new TextObject("{=9jFqXvHy}Excellent! I knew you were an honest soul. Trust is a fine thing, isn't it? Perhaps we can do more business in the future.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestSuccessPlayerSoldTheProducts))
					.CloseDialog()
					.EndPlayerOptions()
					.EndNpcOptions();
			}

			// Token: 0x06004CD2 RID: 19666 RVA: 0x001557D0 File Offset: 0x001539D0
			private void QuestSuccessPlayerSoldTheProducts()
			{
				base.AddLog(this.QuestSuccessLogText, false);
				GainRenownAction.Apply(Hero.MainHero, 1f, false);
				this.RelationshipChangeWithQuestGiver = 10;
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, base.QuestGiver, this._targetDenarsToAchieve, false);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004CD3 RID: 19667 RVA: 0x00155820 File Offset: 0x00153A20
			private void QuestFailedPlayerBrokeTheAgreement()
			{
				base.AddLog(this.QuestFailedPlayerBrokeTheAgreementLogText, false);
				ChangeCrimeRatingAction.Apply(base.QuestGiver.MapFaction, 5f, true);
				base.QuestGiver.AddPower(-5f);
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, base.QuestGiver, this._gatheredDenars, false);
				this.RelationshipChangeWithQuestGiver = -10 - this.RemainingDenars / 10;
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004CD4 RID: 19668 RVA: 0x00155894 File Offset: 0x00153A94
			private void PlayerPaidAgreedDenarsQuestSuccess()
			{
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, base.QuestGiver, this._targetDenarsToAchieve, false);
				this.RelationshipChangeWithQuestGiver = 10;
				GainRenownAction.Apply(Hero.MainHero, 1f, false);
				base.AddLog(this.QuestSuccessWithPayingGatheredDenarsLogText, false);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004CD5 RID: 19669 RVA: 0x001558E4 File Offset: 0x00153AE4
			private bool PlayerPayAgreedDenarsClickableCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				if (Hero.MainHero.Gold < this._targetDenarsToAchieve)
				{
					explanation = new TextObject("{=d0kbtGYn}You don't have enough gold.", null);
					return false;
				}
				MBTextManager.SetTextVariable("REMAINING_DENARS", this.RemainingDenars);
				return true;
			}

			// Token: 0x06004CD6 RID: 19670 RVA: 0x0015591F File Offset: 0x00153B1F
			private bool PlayerFailWithGoldClickableCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				if (this._gatheredDenars > 0 && Hero.MainHero.Gold < this._gatheredDenars)
				{
					explanation = new TextObject("{=d0kbtGYn}You don't have enough gold.", null);
					return false;
				}
				return true;
			}

			// Token: 0x06004CD7 RID: 19671 RVA: 0x00155954 File Offset: 0x00153B54
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddTrackedObject(base.QuestGiver.CurrentSettlement);
				MobileParty.MainParty.ItemRoster.AddToCounts(this._selectedItemObject, this._selectedItemObjectCount);
				TextObject textObject = new TextObject("{=jKHkGzUn}As agreed, {SELECTED_ITEM_COUNT} {?IS_PLURAL}{.%}{PLURAL(SELECTED_ITEM)}{.%} have been{?}{.%}{SELECTED_ITEM}{.%} has been{\\?} added to your inventory.", null);
				textObject.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
				textObject.SetTextVariable("SELECTED_ITEM_COUNT", this._selectedItemObjectCount);
				textObject.SetTextVariable("IS_PLURAL", (this._selectedItemObjectCount > 1) ? 1 : 0);
				MBInformationManager.AddQuickInformation(textObject, 0, null, "");
				base.AddLog(this.QuestStartedLogText1, false);
				base.AddLog(this.QuestStartedLogText2, false);
				base.AddLog(this.QuestStartedLogText3, false);
				TextObject textObject2 = new TextObject("{=GaXEmoFy}Sold {.%}{SELECTED_ITEM}{.%} amount:", null);
				textObject2.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
				TextObject textObject3 = new TextObject("{=pwnqk0Nj}Gathered denars from {.%}{SELECTED_ITEM}{.%}", null);
				textObject3.SetTextVariable("SELECTED_ITEM", this._selectedItemObject.Name);
				this._soldItemAmountLog = base.AddDiscreteLog(TextObject.Empty, textObject2, this._soldCount, this._selectedItemObjectCount, null, false);
				this._gatheredDenarsLog = base.AddDiscreteLog(TextObject.Empty, textObject3, this._gatheredDenars, this._targetDenarsToAchieve, null, false);
			}

			// Token: 0x06004CD8 RID: 19672 RVA: 0x00155AA0 File Offset: 0x00153CA0
			private void QuestFinishedPlayerBoughtTheGoods()
			{
				base.AddLog(this.QuestSuccessPlayerBoughtItemsLogText, false);
				MobileParty.MainParty.ItemRoster.AddToCounts(this._selectedItemObject, this._selectedItemObjectCount);
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, base.QuestGiver, this._targetDenarsToAchieve, false);
				GainRenownAction.Apply(Hero.MainHero, 1f, false);
				this.RelationshipChangeWithQuestGiver = 1;
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004CD9 RID: 19673 RVA: 0x00155B0B File Offset: 0x00153D0B
			private bool PlayerBuyClickableOptionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				if (Hero.MainHero.Gold < this._targetDenarsToAchieve)
				{
					explanation = new TextObject("{=d0kbtGYn}You don't have enough gold.", null);
					return false;
				}
				return true;
			}

			// Token: 0x06004CDA RID: 19674 RVA: 0x00155B36 File Offset: 0x00153D36
			protected override void OnTimedOut()
			{
				base.AddLog(this.QuestFailedWithTimeOutLogText, false);
				this.RelationshipChangeWithQuestGiver = -10;
				ChangeCrimeRatingAction.Apply(base.QuestGiver.MapFaction, 5f, true);
			}

			// Token: 0x06004CDB RID: 19675 RVA: 0x00155B64 File Offset: 0x00153D64
			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.VillageBeingRaided.AddNonSerializedListener(this, new Action<Village>(this.OnVillageRaided));
				CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.OnPlayerInventoryExchange));
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.OnHourlyTick));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			// Token: 0x06004CDC RID: 19676 RVA: 0x00155BFB File Offset: 0x00153DFB
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x06004CDD RID: 19677 RVA: 0x00155C0E File Offset: 0x00153E0E
			private void OnHourlyTick()
			{
				if (base.IsOngoing && !this._underSoldLogAdded && this.CheckIfPlayerLostItem())
				{
					base.AddLog(this.QuestReadyToBeFinishedUnderSoldLogText, false);
					this._daysPassed++;
					this._underSoldLogAdded = true;
				}
			}

			// Token: 0x06004CDE RID: 19678 RVA: 0x00155C4B File Offset: 0x00153E4B
			private bool CheckIfPlayerLostItem()
			{
				return this._soldCount + MobileParty.MainParty.ItemRoster.GetItemNumber(this._selectedItemObject) < this._selectedItemObjectCount;
			}

			// Token: 0x06004CDF RID: 19679 RVA: 0x00155C74 File Offset: 0x00153E74
			private void OnPlayerInventoryExchange(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
			{
				if (isTrading && this.ItemCountLeftToSell > 0)
				{
					foreach (ValueTuple<ItemRosterElement, int> valueTuple in soldItems)
					{
						ItemRosterElement itemRosterElement = valueTuple.Item1;
						if (itemRosterElement.EquipmentElement.Item == this._selectedItemObject)
						{
							int soldCount = this._soldCount;
							itemRosterElement = valueTuple.Item1;
							this._soldCount = soldCount + itemRosterElement.Amount;
							this._gatheredDenars += valueTuple.Item2;
						}
					}
					if (this.ItemCountLeftToSell <= 0)
					{
						base.AddLog(this.QuestReadyToBeFinishedLogText, false);
					}
					this._productsUndersold = this._gatheredDenars < this._targetDenarsToAchieve;
					this._soldItemAmountLog.UpdateCurrentProgress(this._soldCount);
					this._gatheredDenarsLog.UpdateCurrentProgress(this._gatheredDenars);
				}
			}

			// Token: 0x06004CE0 RID: 19680 RVA: 0x00155D68 File Offset: 0x00153F68
			private void OnVillageRaided(Village village)
			{
				if (village == base.QuestGiver.CurrentSettlement.Village)
				{
					base.AddLog(this.QuestGiverVillageRaided, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x06004CE1 RID: 19681 RVA: 0x00155D92 File Offset: 0x00153F92
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this.QuestCanceledWarDeclaredLog);
				}
			}

			// Token: 0x06004CE2 RID: 19682 RVA: 0x00155DC1 File Offset: 0x00153FC1
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.PlayerDeclaredWarQuestLogText, this.QuestCanceledWarDeclaredLog);
			}

			// Token: 0x06004CE3 RID: 19683 RVA: 0x00155DD8 File Offset: 0x00153FD8
			protected override void OnFinalize()
			{
			}

			// Token: 0x06004CE4 RID: 19684 RVA: 0x00155DDA File Offset: 0x00153FDA
			protected override void InitializeQuestOnGameLoad()
			{
				this._targetDenarsToAchieve = (int)((float)(this._selectedItemObject.Value * this._selectedItemObjectCount) * 0.55f);
				this._productsUndersold = this._gatheredDenars < this._targetDenarsToAchieve;
				this.SetDialogs();
			}

			// Token: 0x04001A0B RID: 6667
			[SaveableField(10)]
			private ItemObject _selectedItemObject;

			// Token: 0x04001A0C RID: 6668
			[SaveableField(20)]
			private int _selectedItemObjectCount;

			// Token: 0x04001A0D RID: 6669
			[SaveableField(30)]
			private int _soldCount;

			// Token: 0x04001A0E RID: 6670
			[SaveableField(40)]
			private int _gatheredDenars;

			// Token: 0x04001A0F RID: 6671
			private bool _productsUndersold = true;

			// Token: 0x04001A10 RID: 6672
			[SaveableField(60)]
			private int _daysPassed;

			// Token: 0x04001A11 RID: 6673
			[SaveableField(70)]
			private bool _underSoldLogAdded;

			// Token: 0x04001A12 RID: 6674
			private int _targetDenarsToAchieve;

			// Token: 0x04001A13 RID: 6675
			[SaveableField(80)]
			private JournalLog _soldItemAmountLog;

			// Token: 0x04001A14 RID: 6676
			[SaveableField(90)]
			private JournalLog _gatheredDenarsLog;
		}

		// Token: 0x0200063B RID: 1595
		public class LandLordTheArtOfTheTradeIssueBehaviorTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004CE5 RID: 19685 RVA: 0x00155E16 File Offset: 0x00154016
			public LandLordTheArtOfTheTradeIssueBehaviorTypeDefiner()
				: base(249000)
			{
			}

			// Token: 0x06004CE6 RID: 19686 RVA: 0x00155E23 File Offset: 0x00154023
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssue), 1, null);
				base.AddClassDefinition(typeof(LandLordTheArtOfTheTradeIssueBehavior.LandLordTheArtOfTheTradeIssueQuest), 2, null);
			}
		}
	}
}
