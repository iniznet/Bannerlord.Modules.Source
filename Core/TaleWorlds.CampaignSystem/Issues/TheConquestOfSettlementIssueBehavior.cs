using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x0200031F RID: 799
	public class TheConquestOfSettlementIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D87 RID: 11655 RVA: 0x000BE958 File Offset: 0x000BCB58
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D88 RID: 11656 RVA: 0x000BE974 File Offset: 0x000BCB74
		private void OnCheckForIssue(Hero hero)
		{
			Settlement settlement;
			if (this.ConditionsHold(hero, out settlement))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssue), IssueBase.IssueFrequency.VeryCommon, settlement));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002D89 RID: 11657 RVA: 0x000BE9DC File Offset: 0x000BCBDC
		private bool ConditionsHold(Hero issueGiver, out Settlement targetSettlement)
		{
			targetSettlement = null;
			if (issueGiver.IsLord && issueGiver.IsFactionLeader && !issueGiver.IsPrisoner && issueGiver.GetMapPoint() != null)
			{
				if (issueGiver.Clan.Settlements.Any((Settlement x) => x.IsFortification))
				{
					MBList<Settlement> mblist = new MBList<Settlement>();
					foreach (Town town in Campaign.Current.AllTowns)
					{
						if (town.MapFaction.IsAtWarWith(issueGiver.MapFaction) && town.Settlement.Position2D.DistanceSquared(issueGiver.GetMapPoint().Position2D) < 7500f)
						{
							mblist.Add(town.Settlement);
						}
					}
					foreach (Town town2 in Campaign.Current.AllCastles)
					{
						if (town2.MapFaction.IsAtWarWith(issueGiver.MapFaction) && town2.Settlement.Position2D.DistanceSquared(issueGiver.GetMapPoint().Position2D) < 7500f)
						{
							mblist.Add(town2.Settlement);
						}
					}
					if (mblist.Count > 0)
					{
						targetSettlement = mblist.GetRandomElement<Settlement>();
					}
				}
			}
			return targetSettlement != null;
		}

		// Token: 0x06002D8A RID: 11658 RVA: 0x000BEB78 File Offset: 0x000BCD78
		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			PotentialIssueData potentialIssueData = pid;
			return new TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssue(issueOwner, (Settlement)potentialIssueData.RelatedObject);
		}

		// Token: 0x06002D8B RID: 11659 RVA: 0x000BEB9E File Offset: 0x000BCD9E
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x04000DAF RID: 3503
		private const IssueBase.IssueFrequency TheConquestOfSettlementIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x0200066B RID: 1643
		public class TheConquestOfSettlementIssue : IssueBase
		{
			// Token: 0x0600510B RID: 20747 RVA: 0x00165213 File Offset: 0x00163413
			internal static void AutoGeneratedStaticCollectObjectsTheConquestOfSettlementIssue(object o, List<object> collectedObjects)
			{
				((TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x0600510C RID: 20748 RVA: 0x00165221 File Offset: 0x00163421
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._targetSettlement);
			}

			// Token: 0x0600510D RID: 20749 RVA: 0x00165236 File Offset: 0x00163436
			internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
			{
				return ((TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssue)o)._targetSettlement;
			}

			// Token: 0x1700117B RID: 4475
			// (get) Token: 0x0600510E RID: 20750 RVA: 0x00165243 File Offset: 0x00163443
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=mvzh0HVk}The Conquest of {TARGET_SETTLEMENT}", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x1700117C RID: 4476
			// (get) Token: 0x0600510F RID: 20751 RVA: 0x00165268 File Offset: 0x00163468
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=xeZR3r5u}{QUEST_GIVER.LINK} wants you siege and take over the {TARGET_SETTLEMENT}", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700117D RID: 4477
			// (get) Token: 0x06005110 RID: 20752 RVA: 0x001652B1 File Offset: 0x001634B1
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=Oi20UrO2}Our war with the {TARGET_SETTLEMENT_FACTION_INFORMAL_NAME} is going well enough. But there are some who say that we don't have enough to show for all the blood and silver we've spent. A clear victory at this stage would do a lot of good. I think I would like to see our banner flying from the towers of {TARGET_SETTLEMENT}.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT_FACTION_INFORMAL_NAME", this._targetSettlement.MapFaction.InformalName);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x1700117E RID: 4478
			// (get) Token: 0x06005111 RID: 20753 RVA: 0x001652F4 File Offset: 0x001634F4
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=qKrUyqsD}Of course, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}. But sieges are always costly...", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700117F RID: 4479
			// (get) Token: 0x06005112 RID: 20754 RVA: 0x00165328 File Offset: 0x00163528
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=yf3NVFi0}Yes, they are. That's why I am offering you the sum of {REWARD_GOLD}{GOLD_ICON} if you can take {TARGET_SETTLEMENT} within {TIME_LIMIT} days. I count you among the most resourceful of my captains. I think you can do this, with courage, Heaven's favor and a bit of luck. Can I tell my other lords that you will do this?", null);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					textObject.SetTextVariable("TIME_LIMIT", 60);
					return textObject;
				}
			}

			// Token: 0x17001180 RID: 4480
			// (get) Token: 0x06005113 RID: 20755 RVA: 0x00165377 File Offset: 0x00163577
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=scmTEn90}You may tell them. {TARGET_SETTLEMENT} will be ours within 60 days.", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17001181 RID: 4481
			// (get) Token: 0x06005114 RID: 20756 RVA: 0x0016539B File Offset: 0x0016359B
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001182 RID: 4482
			// (get) Token: 0x06005115 RID: 20757 RVA: 0x0016539E File Offset: 0x0016359E
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001183 RID: 4483
			// (get) Token: 0x06005116 RID: 20758 RVA: 0x001653A1 File Offset: 0x001635A1
			protected override int RewardGold
			{
				get
				{
					return 20000;
				}
			}

			// Token: 0x06005117 RID: 20759 RVA: 0x001653A8 File Offset: 0x001635A8
			public TheConquestOfSettlementIssue(Hero issueOwner, Settlement targetSettlement)
				: base(issueOwner, CampaignTime.DaysFromNow(60f))
			{
				this._targetSettlement = targetSettlement;
			}

			// Token: 0x06005118 RID: 20760 RVA: 0x001653C2 File Offset: 0x001635C2
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return -1f;
				}
				return 0f;
			}

			// Token: 0x06005119 RID: 20761 RVA: 0x001653D7 File Offset: 0x001635D7
			protected override void OnGameLoad()
			{
			}

			// Token: 0x0600511A RID: 20762 RVA: 0x001653D9 File Offset: 0x001635D9
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssueQuest(questId, base.IssueOwner, this._targetSettlement, CampaignTime.DaysFromNow(60f), this.RewardGold);
			}

			// Token: 0x0600511B RID: 20763 RVA: 0x001653FD File Offset: 0x001635FD
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x0600511C RID: 20764 RVA: 0x00165400 File Offset: 0x00163600
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flags, out Hero relationHero, out SkillObject skill)
			{
				relationHero = null;
				skill = null;
				flags = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flags |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flags |= IssueBase.PreconditionFlags.AtWar;
				}
				if (Clan.PlayerClan.Kingdom != issueGiver.MapFaction)
				{
					flags |= IssueBase.PreconditionFlags.NotInSameFaction;
				}
				if (Clan.PlayerClan.IsUnderMercenaryService)
				{
					flags |= IssueBase.PreconditionFlags.ClanIsMercenary;
				}
				return flags == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x0600511D RID: 20765 RVA: 0x00165484 File Offset: 0x00163684
			public override bool IssueStayAliveConditions()
			{
				if (this._targetSettlement.MapFaction.IsAtWarWith(base.IssueOwner.MapFaction))
				{
					return base.IssueOwner.Clan.Settlements.Any((Settlement x) => x.IsFortification);
				}
				return false;
			}

			// Token: 0x0600511E RID: 20766 RVA: 0x001654E4 File Offset: 0x001636E4
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x04001AF4 RID: 6900
			private const int QuestTimeLimit = 60;

			// Token: 0x04001AF5 RID: 6901
			[SaveableField(10)]
			private Settlement _targetSettlement;
		}

		// Token: 0x0200066C RID: 1644
		public class TheConquestOfSettlementIssueQuest : QuestBase
		{
			// Token: 0x0600511F RID: 20767 RVA: 0x001654E6 File Offset: 0x001636E6
			internal static void AutoGeneratedStaticCollectObjectsTheConquestOfSettlementIssueQuest(object o, List<object> collectedObjects)
			{
				((TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06005120 RID: 20768 RVA: 0x001654F4 File Offset: 0x001636F4
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._targetSettlement);
			}

			// Token: 0x06005121 RID: 20769 RVA: 0x00165509 File Offset: 0x00163709
			internal static object AutoGeneratedGetMemberValue_targetSettlement(object o)
			{
				return ((TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssueQuest)o)._targetSettlement;
			}

			// Token: 0x17001184 RID: 4484
			// (get) Token: 0x06005122 RID: 20770 RVA: 0x00165516 File Offset: 0x00163716
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=mvzh0HVk}The Conquest of {TARGET_SETTLEMENT}", null);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17001185 RID: 4485
			// (get) Token: 0x06005123 RID: 20771 RVA: 0x0016553A File Offset: 0x0016373A
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001186 RID: 4486
			// (get) Token: 0x06005124 RID: 20772 RVA: 0x00165540 File Offset: 0x00163740
			private TextObject QuestStartedLog
			{
				get
				{
					TextObject textObject = new TextObject("{=b1T6qywr}{QUEST_GIVER.LINK} from {QUEST_GIVER.FACTION} asked you to take over {TARGET_SETTLEMENT} in the name of {QUEST_GIVER.FACTION} to fortify war efforts. {QUEST_GIVER.LINK} said {?QUEST_GIVER.GENDER}she{?}he{\\?} will aid you with {REWARD}{GOLD_ICON} once the {TARGET_SETTLEMENT} is fallen.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, true);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x17001187 RID: 4487
			// (get) Token: 0x06005125 RID: 20773 RVA: 0x0016559C File Offset: 0x0016379C
			private TextObject WarDeclaredQuestCancelLog
			{
				get
				{
					TextObject textObject = new TextObject("{=PakhagOy}Your clan is now at war with {QUEST_GIVER.LINK}'s lord. Your agreement with {QUEST_GIVER.LINK} was canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001188 RID: 4488
			// (get) Token: 0x06005126 RID: 20774 RVA: 0x001655D0 File Offset: 0x001637D0
			private TextObject PlayerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001189 RID: 4489
			// (get) Token: 0x06005127 RID: 20775 RVA: 0x00165604 File Offset: 0x00163804
			private TextObject QuestTimeOutFailLog
			{
				get
				{
					TextObject textObject = new TextObject("{=lEcg67Qk}You have failed to take over {TARGET_SETTLEMENT} in time. {QUEST_GIVER.LINK} is disappointed that you have failed to take the fortress in time.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x1700118A RID: 4490
			// (get) Token: 0x06005128 RID: 20776 RVA: 0x00165650 File Offset: 0x00163850
			private TextObject QuestSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=6d2VIgH3}{QUEST_GIVER.LINK}: Thank you. My lords see you as an example, and see your conquest of {TARGET_SETTLEMENT} as be a stepping stone toward further victories. {?QUEST_GIVER.GENDER}She{?}He{\\?} is grateful for your service and gave you {REWARD}{GOLD_ICON}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					textObject.SetTextVariable("REWARD", this.RewardGold);
					return textObject;
				}
			}

			// Token: 0x1700118B RID: 4491
			// (get) Token: 0x06005129 RID: 20777 RVA: 0x001656AC File Offset: 0x001638AC
			private TextObject QuestLesserSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=1NtZ4BJh}{QUEST_GIVER.LINK}: Thank you. My lords see the conquest of {TARGET_SETTLEMENT} was a stepping stone toward further victories. {?QUEST_GIVER.GENDER}She{?}He{\\?} is grateful for your service. Because your side has contributed less than others {?QUEST_GIVER.GENDER}She{?}He{\\?} gave you {LESSER_REWARD}{GOLD_ICON} of denars.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x1700118C RID: 4492
			// (get) Token: 0x0600512A RID: 20778 RVA: 0x001656F8 File Offset: 0x001638F8
			private TextObject TargetSettlementTakenByAnotherFaction
			{
				get
				{
					TextObject textObject = new TextObject("{=diUtbbaH}{TARGET_SETTLEMENT} is taken by {NEW_OWNER_FACTION}. Your agreement with {QUEST_GIVER.LINK} is no longer valid.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x1700118D RID: 4493
			// (get) Token: 0x0600512B RID: 20779 RVA: 0x00165744 File Offset: 0x00163944
			private TextObject TargetSettlementTakenByPlayerFaction
			{
				get
				{
					TextObject textObject = new TextObject("{=bEak0k5N}{TARGET_SETTLEMENT} is taken. You did not participate in this battle. Your agreement with {QUEST_GIVER.LINK} is moot.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x1700118E RID: 4494
			// (get) Token: 0x0600512C RID: 20780 RVA: 0x00165790 File Offset: 0x00163990
			private TextObject LeftFaction
			{
				get
				{
					TextObject textObject = new TextObject("{=d8TeoRNf}You are no longer in the same faction with {QUEST_GIVER.LINK}. Your agreement with {QUEST_GIVER.LINK} is no longer valid.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700118F RID: 4495
			// (get) Token: 0x0600512D RID: 20781 RVA: 0x001657C4 File Offset: 0x001639C4
			private TextObject DefectedToAnotherFaction
			{
				get
				{
					TextObject textObject = new TextObject("{=8iVkBa6D}{TARGET_SETTLEMENT_OWNER.LINK} has defected to {FACTION_NAME} along with {TARGET_SETTLEMENT}. Your agreement with {QUEST_GIVER.LINK} is moot.", null);
					StringHelpers.SetCharacterProperties("TARGET_SETTLEMENT_OWNER", this._targetSettlement.OwnerClan.Leader.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17001190 RID: 4496
			// (get) Token: 0x0600512E RID: 20782 RVA: 0x00165830 File Offset: 0x00163A30
			private TextObject NoLongerEnemy
			{
				get
				{
					TextObject textObject = new TextObject("{=HknxaCpK}{TARGET_SETTLEMENT_OWNER.FACTION} and {QUEST_GIVER.FACTION} had made peace. Your agreement with {QUEST_GIVER.LINK} is moot.", null);
					StringHelpers.SetCharacterProperties("TARGET_SETTLEMENT_OWNER", this._targetSettlement.OwnerClan.Leader.CharacterObject, textObject, true);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, true);
					return textObject;
				}
			}

			// Token: 0x0600512F RID: 20783 RVA: 0x00165884 File Offset: 0x00163A84
			public TheConquestOfSettlementIssueQuest(string questId, Hero questGiver, Settlement targetSettlement, CampaignTime duration, int rewardGold)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._targetSettlement = targetSettlement;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06005130 RID: 20784 RVA: 0x001658A8 File Offset: 0x00163AA8
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=QP3BbOW3}Very good. You have my blessing to summon an army if you wish, or, if you prefer to strike quickly, you may do so on your own...", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				TextObject textObject = new TextObject("{=ICNtSonV}How are your preparations to take {TARGET_SETTLEMENT} coming along, {PLAYER.NAME}? I have assured my other lords that you will take it, so it will look bad if you fail.", null);
				textObject.SetTextVariable("TARGET_SETTLEMENT", this._targetSettlement.Name);
				TextObject textObject2 = new TextObject("{=m4pZhnyd}They are going as planned, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}...", null);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject2, false);
				TextObject textObject3 = new TextObject("{=jFXkosnJ}This may be tricky, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}...", null);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject3, false);
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(textObject, null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.BeginPlayerOptions()
					.PlayerOption(textObject2, null)
					.NpcLine(new TextObject("{=opMDusHz}Good. I look forward to presenting you with your reward.", null), null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += MapEventHelper.OnConversationEnd;
					})
					.CloseDialog()
					.PlayerOption(textObject3, null)
					.NpcLine(new TextObject("{=R85IMErK}Well, if you fail we will deal with that, but I would prefer not to.", null), null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += MapEventHelper.OnConversationEnd;
					})
					.CloseDialog()
					.EndPlayerOptions();
			}

			// Token: 0x06005131 RID: 20785 RVA: 0x00165A24 File Offset: 0x00163C24
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddLog(this.QuestStartedLog, false);
				base.AddTrackedObject(this._targetSettlement);
			}

			// Token: 0x06005132 RID: 20786 RVA: 0x00165A48 File Offset: 0x00163C48
			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
				CampaignEvents.SiegeCompletedEvent.AddNonSerializedListener(this, new Action<Settlement, MobileParty, bool, MapEvent.BattleTypes>(this.OnSiegeCompleted));
				CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, new Action<Settlement, bool, Hero, Hero, Hero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail>(this.OnSettlementOwnerChanged));
				CampaignEvents.MakePeace.AddNonSerializedListener(this, new Action<IFaction, IFaction, MakePeaceAction.MakePeaceDetail>(this.OnPeaceDeclared));
			}

			// Token: 0x06005133 RID: 20787 RVA: 0x00165ADF File Offset: 0x00163CDF
			private void OnPeaceDeclared(IFaction faction1, IFaction faction2, MakePeaceAction.MakePeaceDetail detail)
			{
				if (!base.QuestGiver.MapFaction.IsAtWarWith(this._targetSettlement.MapFaction))
				{
					base.CompleteQuestWithCancel(this.NoLongerEnemy);
				}
			}

			// Token: 0x06005134 RID: 20788 RVA: 0x00165B0C File Offset: 0x00163D0C
			private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
			{
				if (base.IsOngoing && settlement == this._targetSettlement)
				{
					if (newOwner == Hero.MainHero && detail == ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail.ByBarter)
					{
						this.QuestSuccess(2);
						return;
					}
				}
				else
				{
					this.TargetSettlementTakenByAnotherFaction.SetTextVariable("NEW_OWNER_FACTION", newOwner.MapFaction.EncyclopediaLinkWithName);
					if (newOwner.MapFaction != base.QuestGiver.MapFaction)
					{
						TextObject targetSettlementTakenByAnotherFaction = this.TargetSettlementTakenByAnotherFaction;
						targetSettlementTakenByAnotherFaction.SetTextVariable("NEW_OWNER_FACTION", newOwner.MapFaction.EncyclopediaLinkWithName);
						base.AddLog(targetSettlementTakenByAnotherFaction, false);
					}
				}
			}

			// Token: 0x06005135 RID: 20789 RVA: 0x00165B98 File Offset: 0x00163D98
			private void OnSiegeCompleted(Settlement siegeSettlement, MobileParty attackerParty, bool isWin, MapEvent.BattleTypes battleType)
			{
				if (isWin && siegeSettlement == this._targetSettlement)
				{
					if (attackerParty.MapFaction == base.QuestGiver.MapFaction)
					{
						if (attackerParty == MobileParty.MainParty)
						{
							this.QuestSuccess(10);
							return;
						}
						if (siegeSettlement.Party.MapEvent.InvolvedParties.Contains(PartyBase.MainParty))
						{
							float playerPartyContributionRate = attackerParty.MapEventSide.GetPlayerPartyContributionRate();
							this.QuestLesserSuccess(playerPartyContributionRate);
							return;
						}
						base.CompleteQuestWithCancel(this.TargetSettlementTakenByPlayerFaction);
						return;
					}
					else
					{
						TextObject targetSettlementTakenByAnotherFaction = this.TargetSettlementTakenByAnotherFaction;
						targetSettlementTakenByAnotherFaction.SetTextVariable("NEW_OWNER_FACTION", attackerParty.MapFaction.EncyclopediaLinkWithName);
						base.CompleteQuestWithCancel(targetSettlementTakenByAnotherFaction);
					}
				}
			}

			// Token: 0x06005136 RID: 20790 RVA: 0x00165C40 File Offset: 0x00163E40
			private void QuestLesserSuccess(float playerContribution)
			{
				TextObject questLesserSuccessLog = this.QuestLesserSuccessLog;
				int num = (int)((float)this.RewardGold * playerContribution);
				questLesserSuccessLog.SetTextVariable("LESSER_REWARD", num);
				base.AddLog(questLesserSuccessLog, false);
				GainRenownAction.Apply(Hero.MainHero, 5f, false);
				GiveGoldAction.ApplyForQuestBetweenCharacters(null, Hero.MainHero, num, false);
				this.RelationshipChangeWithQuestGiver = 1;
				foreach (Settlement settlement in base.QuestGiver.Clan.Settlements.Where((Settlement x) => x.IsFortification))
				{
					settlement.Town.Security += 2f;
					settlement.Town.Loyalty += 2f;
				}
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06005137 RID: 20791 RVA: 0x00165D34 File Offset: 0x00163F34
			private void QuestSuccess(int boost)
			{
				base.AddLog(this.QuestSuccessLog, false);
				this.RelationshipChangeWithQuestGiver = 5;
				GiveGoldAction.ApplyForQuestBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				foreach (Settlement settlement in base.QuestGiver.Clan.Settlements.Where((Settlement x) => x.IsFortification))
				{
					settlement.Town.Security += (float)boost;
					settlement.Town.Loyalty += (float)boost;
				}
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06005138 RID: 20792 RVA: 0x00165DFC File Offset: 0x00163FFC
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x06005139 RID: 20793 RVA: 0x00165E10 File Offset: 0x00164010
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (clan == Clan.PlayerClan && oldKingdom == base.QuestGiver.MapFaction)
				{
					base.AddLog(this.LeftFaction, false);
					base.CompleteQuestWithFail(null);
					return;
				}
				if (!clan.Settlements.Contains(this._targetSettlement))
				{
					if (base.QuestGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
					{
						base.CompleteQuestWithCancel(this.WarDeclaredQuestCancelLog);
					}
					return;
				}
				if (newKingdom == base.QuestGiver.MapFaction)
				{
					this.QuestSuccess(1);
					return;
				}
				TextObject defectedToAnotherFaction = this.DefectedToAnotherFaction;
				defectedToAnotherFaction.SetTextVariable("FACTION_NAME", newKingdom.EncyclopediaLinkWithName);
				base.CompleteQuestWithCancel(defectedToAnotherFaction);
			}

			// Token: 0x0600513A RID: 20794 RVA: 0x00165EBB File Offset: 0x001640BB
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.PlayerDeclaredWarQuestLogText, this.WarDeclaredQuestCancelLog);
			}

			// Token: 0x0600513B RID: 20795 RVA: 0x00165ED2 File Offset: 0x001640D2
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x0600513C RID: 20796 RVA: 0x00165EDC File Offset: 0x001640DC
			protected override void OnTimedOut()
			{
				base.AddLog(this.QuestTimeOutFailLog, false);
				this.RelationshipChangeWithQuestGiver = -10;
				foreach (Settlement settlement in base.QuestGiver.Clan.Settlements.Where((Settlement x) => x.IsFortification))
				{
					settlement.Town.Security += -10f;
					settlement.Town.Loyalty += -10f;
				}
			}

			// Token: 0x04001AF6 RID: 6902
			private const int SuccessLoyaltySecurityBoost = 10;

			// Token: 0x04001AF7 RID: 6903
			private const int LesserSuccessLoyaltySecurityBoost = 2;

			// Token: 0x04001AF8 RID: 6904
			private const int SuccessRelationBoost = 5;

			// Token: 0x04001AF9 RID: 6905
			private const int LesserSuccessRelationBoost = 1;

			// Token: 0x04001AFA RID: 6906
			private const int TimeoutSecurityLoyaltyPenalty = -10;

			// Token: 0x04001AFB RID: 6907
			private const int TimeoutRelationyPenalty = -10;

			// Token: 0x04001AFC RID: 6908
			[SaveableField(10)]
			private Settlement _targetSettlement;
		}

		// Token: 0x0200066D RID: 1645
		public class TheConquestOfSettlementIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x0600513F RID: 20799 RVA: 0x00165FB2 File Offset: 0x001641B2
			public TheConquestOfSettlementIssueTypeDefiner()
				: base(620000)
			{
			}

			// Token: 0x06005140 RID: 20800 RVA: 0x00165FBF File Offset: 0x001641BF
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssue), 1, null);
				base.AddClassDefinition(typeof(TheConquestOfSettlementIssueBehavior.TheConquestOfSettlementIssueQuest), 2, null);
			}
		}
	}
}
