using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Conversation.Persuasion;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	public class GangLeaderNeedsWeaponsIssueQuestBehavior : CampaignBehaviorBase
	{
		private static int CreatedPartyCount
		{
			get
			{
				return Campaign.Current.GetCampaignBehavior<GangLeaderNeedsWeaponsIssueQuestBehavior>()._createdPartyCount;
			}
		}

		public GangLeaderNeedsWeaponsIssueQuestBehavior()
		{
			this._createdPartyCount = 0;
		}

		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		public override void SyncData(IDataStore dataStore)
		{
			dataStore.SyncData<int>("_createdPartyCount", ref this._createdPartyCount);
		}

		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssue), IssueBase.IssueFrequency.Common, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssue), IssueBase.IssueFrequency.Common));
		}

		private bool ConditionsHold(Hero IssueOwner)
		{
			return IssueOwner.IsGangLeader && IssueOwner.CurrentSettlement != null && IssueOwner.CurrentSettlement.IsTown && IssueOwner.CurrentSettlement.Town.Loyalty < 60f;
		}

		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			this._createdPartyCount++;
			return new GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssue(issueOwner);
		}

		private static TextObject GetNeededClassTextObject(WeaponClass requestedWeaponClass)
		{
			if (requestedWeaponClass == WeaponClass.OneHandedAxe)
			{
				return new TextObject("{=tza4micZ}one-handed axes", null);
			}
			return new TextObject("{=!}Undefined!", null);
		}

		private const IssueBase.IssueFrequency GangLeaderNeedsWeaponsIssueFrequency = IssueBase.IssueFrequency.Common;

		private int _createdPartyCount;

		private static WeaponClass[] _canBeRequestedWeaponClassList = new WeaponClass[] { WeaponClass.OneHandedAxe };

		public class GangLeaderNeedsWeaponsIssue : IssueBase
		{
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsWeaponsIssue(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			internal static object AutoGeneratedGetMemberValue_requiredWeaponClassIndex(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssue)o)._requiredWeaponClassIndex;
			}

			internal static object AutoGeneratedGetMemberValue_averagePriceForItem(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssue)o)._averagePriceForItem;
			}

			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Duration;
				}
			}

			private int RequestedWeaponAmount
			{
				get
				{
					float num;
					if (base.IssueDifficultyMultiplier >= 0.1f && base.IssueDifficultyMultiplier < 0.3f)
					{
						num = 0.1f;
					}
					else if (base.IssueDifficultyMultiplier >= 0.3f && base.IssueDifficultyMultiplier < 0.6f)
					{
						num = 0.2f;
					}
					else
					{
						num = 0.3f;
					}
					if (3 + this._averagePriceForItem == 0)
					{
						return 0;
					}
					return (int)((float)(20000 / this._averagePriceForItem) * num);
				}
			}

			private int CompanionGoldNeedForAlternativeSolution
			{
				get
				{
					return this.RewardGold / 2 + this._averagePriceForItem * this.RequestedWeaponAmount / 4;
				}
			}

			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 2 + MathF.Ceiling(4f * base.IssueDifficultyMultiplier);
				}
			}

			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 7 + MathF.Ceiling(8f * base.IssueDifficultyMultiplier);
				}
			}

			protected override int RewardGold
			{
				get
				{
					return 500 + this._averagePriceForItem * this.RequestedWeaponAmount;
				}
			}

			private WeaponClass RequestedWeaponClass
			{
				get
				{
					return GangLeaderNeedsWeaponsIssueQuestBehavior._canBeRequestedWeaponClassList[this._requiredWeaponClassIndex];
				}
			}

			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=m24bXmOD}Yes, you can help me. Do you want to make some easy money? I need some 'tools' for my private business. Are you interested?[if:convo_bored][ib:confident2]", null);
				}
			}

			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=PFNXodyo}What sort of tools?", null);
				}
			}

			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=xBaL3RM4}Well, as you know we're not farmers or artisans. I need {NEEDED_AMOUNT} {.%}{NEEDED_TYPE}{.%}. Don't mind the quality, just buy the weapons. Bring them to me and {REWARD_GOLD}{GOLD_ICON} is yours. Got it?[if:convo_bored]", null);
					textObject.SetTextVariable("NEEDED_AMOUNT", this.RequestedWeaponAmount);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("NEEDED_TYPE", GangLeaderNeedsWeaponsIssueQuestBehavior.GetNeededClassTextObject(this.RequestedWeaponClass));
					return textObject;
				}
			}

			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=0i8RgslK}Or, maybe one of your trusted companions can buy the {ITEM_TYPE}. I reckon they'll cost {COMPANION_NEED_GOLD_AMOUNT}{GOLD_ICON} denars, and they'd best take at least {ALTERNATIVE_TROOP_AMOUNT} men for protection.[if:convo_bored]", null);
					textObject.SetTextVariable("COMPANION_NEED_GOLD_AMOUNT", this.CompanionGoldNeedForAlternativeSolution);
					textObject.SetTextVariable("ITEM_TYPE", GangLeaderNeedsWeaponsIssueQuestBehavior.GetNeededClassTextObject(this.RequestedWeaponClass));
					textObject.SetTextVariable("ALTERNATIVE_TROOP_AMOUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=ABYGws1M}I'll bring you {NEEDED_AMOUNT} of those by myself.", null);
					textObject.SetTextVariable("NEEDED_AMOUNT", this.RequestedWeaponAmount);
					return textObject;
				}
			}

			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=Ggjb9BVQ}Actually I prefer not to get involved in this kind of business personally but my men will help you out.", null);
				}
			}

			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=HawJormK}That's fine, so long as your men know well enough to handle this quietly. Good luck.", null);
				}
			}

			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=aG9iX1a8}We're looking forward to trying out our new \"tools\" on some bastard's head. Let your boys know that drinks are on us when they get here.", null);
				}
			}

			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=otwfa0K3}{QUEST_GIVER.LINK}, a gang leader from {SETTLEMENT} wanted you to buy some weapons for {?QUEST_GIVER.GENDER}her{?}his{\\?} private business. {?QUEST_GIVER.GENDER}She{?}He{\\?} offers you {REWARD_GOLD}{GOLD_ICON} on their delivery. You asked {COMPANION.LINK} to take some of your men and buy {NEEDED_AMOUNT} units of {NEEDED_TYPE} to deliver to {QUEST_GIVER.LINK} in {SETTLEMENT}. They should rejoin your party in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("NEEDED_AMOUNT", this.RequestedWeaponAmount);
					textObject.SetTextVariable("NEEDED_TYPE", GangLeaderNeedsWeaponsIssueQuestBehavior.GetNeededClassTextObject(this.RequestedWeaponClass));
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			public override TextObject Title
			{
				get
				{
					return new TextObject("{=zKHkS5Gf}Gang leader needs weapons", null);
				}
			}

			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=VYq93e36}A gang leader needs you to buy weapons for {?QUEST_GIVER.GENDER}her{?}his{\\?} men.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			public GangLeaderNeedsWeaponsIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(15f))
			{
				MBList<ValueTuple<WeaponClass, int>> mblist = new MBList<ValueTuple<WeaponClass, int>>();
				foreach (WeaponClass weaponClass in GangLeaderNeedsWeaponsIssueQuestBehavior._canBeRequestedWeaponClassList)
				{
					int num = this.CalculateAveragePriceForWeaponClass(weaponClass);
					if (num > 0)
					{
						mblist.Add(new ValueTuple<WeaponClass, int>(weaponClass, num));
					}
				}
				ValueTuple<WeaponClass, int> selectedItemAndPrize = mblist.GetRandomElement<ValueTuple<WeaponClass, int>>();
				this._averagePriceForItem = selectedItemAndPrize.Item2;
				this._requiredWeaponClassIndex = Array.FindIndex<WeaponClass>(GangLeaderNeedsWeaponsIssueQuestBehavior._canBeRequestedWeaponClassList, (WeaponClass x) => x == selectedItemAndPrize.Item1);
			}

			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return 1f;
				}
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.2f;
				}
				return 0f;
			}

			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Trade) >= hero.GetSkillValue(DefaultSkills.Crafting)) ? DefaultSkills.Trade : DefaultSkills.Crafting, 120);
			}

			private int CalculateAveragePriceForWeaponClass(WeaponClass weaponClass)
			{
				int num = 0;
				int num2 = 0;
				foreach (Settlement settlement in Settlement.All)
				{
					if (settlement.IsTown)
					{
						for (int i = 0; i < settlement.ItemRoster.Count; i++)
						{
							ItemRosterElement itemRosterElement = settlement.ItemRoster[i];
							WeaponComponent weaponComponent = itemRosterElement.EquipmentElement.Item.WeaponComponent;
							if (weaponComponent != null && weaponComponent.PrimaryWeapon.WeaponClass == weaponClass)
							{
								num2 += itemRosterElement.Amount;
								num += itemRosterElement.EquipmentElement.ItemValue;
							}
						}
					}
				}
				return num / ((num2 == 0) ? 1 : num2);
			}

			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(800f + 900f * base.IssueDifficultyMultiplier);
				}
			}

			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false) && QuestHelper.CheckGoldForAlternativeSolution(this.CompanionGoldNeedForAlternativeSolution, ref explanation);
			}

			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			public override void AlternativeSolutionStartConsequence()
			{
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, null, this.CompanionGoldNeedForAlternativeSolution, false);
			}

			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				ChangeCrimeRatingAction.Apply(base.IssueOwner.CurrentSettlement.MapFaction, 10f, true);
				base.IssueOwner.AddPower(10f);
				this.RelationshipChangeWithIssueOwner = 5;
				base.IssueOwner.CurrentSettlement.Town.Security -= 30f;
			}

			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				skill = null;
				relationHero = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (base.IssueOwner.CurrentSettlement.OwnerClan == Clan.PlayerClan)
				{
					flag |= IssueBase.PreconditionFlags.PlayerIsOwnerOfSettlement;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			public override bool IssueStayAliveConditions()
			{
				Settlement currentSettlement = base.IssueOwner.CurrentSettlement;
				return ((currentSettlement != null) ? currentSettlement.Town : null) != null && base.IssueOwner.CurrentSettlement.OwnerClan != Clan.PlayerClan && base.IssueOwner.CurrentSettlement.Town.Loyalty < 75f;
			}

			protected override void OnGameLoad()
			{
			}

			protected override void HourlyTick()
			{
			}

			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(25f), this.RewardGold, this._requiredWeaponClassIndex, this.RequestedWeaponAmount, base.IssueDifficultyMultiplier, this._averagePriceForItem);
			}

			private const int BaseNeededWeaponCount = 3;

			private const int BaseRewardGold = 500;

			private const int AlternativeSolutionTroopTierRequirement = 2;

			private const int RequiredSkillLevelForSendingComp = 120;

			private const int IssueDuration = 15;

			private const int QuestTimeLimit = 25;

			[SaveableField(20)]
			private int _requiredWeaponClassIndex;

			[SaveableField(30)]
			private int _averagePriceForItem;
		}

		public class GangLeaderNeedsWeaponsIssueQuest : QuestBase
		{
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsWeaponsIssueQuest(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._weaponsThatGuardTook);
				collectedObjects.Add(this._playerStartsQuestLog);
			}

			internal static object AutoGeneratedGetMemberValue_randomForRequiredWeaponClass(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._randomForRequiredWeaponClass;
			}

			internal static object AutoGeneratedGetMemberValue_requestedWeaponAmount(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._requestedWeaponAmount;
			}

			internal static object AutoGeneratedGetMemberValue_playerDodgedGuards(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._playerDodgedGuards;
			}

			internal static object AutoGeneratedGetMemberValue_collectedItemAmount(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._collectedItemAmount;
			}

			internal static object AutoGeneratedGetMemberValue_lowCrimeRatingWillBeApplied(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._lowCrimeRatingWillBeApplied;
			}

			internal static object AutoGeneratedGetMemberValue_highCrimeRatingWillBeApplied(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._highCrimeRatingWillBeApplied;
			}

			internal static object AutoGeneratedGetMemberValue_weaponsThatGuardTook(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._weaponsThatGuardTook;
			}

			internal static object AutoGeneratedGetMemberValue_issueDifficulty(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._issueDifficulty;
			}

			internal static object AutoGeneratedGetMemberValue_rewardGold(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._rewardGold;
			}

			internal static object AutoGeneratedGetMemberValue_bribeGold(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._bribeGold;
			}

			internal static object AutoGeneratedGetMemberValue_persuasionTriedOnce(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._persuasionTriedOnce;
			}

			internal static object AutoGeneratedGetMemberValue_playerStartsQuestLog(object o)
			{
				return ((GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest)o)._playerStartsQuestLog;
			}

			public override TextObject Title
			{
				get
				{
					return new TextObject("{=zKHkS5Gf}Gang leader needs weapons", null);
				}
			}

			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			private TextObject PlayerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=B3WyJjBx}{QUEST_GIVER.LINK}, a gang leader from {SETTLEMENT}, asked you to buy some weapons for {?QUEST_GIVER.GENDER}her{?}his{\\?} private business. {?QUEST_GIVER.GENDER}She{?}He{\\?} offered you {REWARD_GOLD}{GOLD_ICON} for their delivery. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to buy {NEEDED_AMOUNT} {NEEDED_TYPE} and deliver them to {SETTLEMENT} where {QUEST_GIVER.LINK}'s men will be waiting for you. {?QUEST_GIVER.GENDER}She{?}He{\\?} promised to give you {REWARD_GOLD}{GOLD_ICON} for your troubles.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("NEEDED_AMOUNT", this._requestedWeaponAmount);
					textObject.SetTextVariable("NEEDED_TYPE", GangLeaderNeedsWeaponsIssueQuestBehavior.GetNeededClassTextObject(this._requestedWeaponClass));
					textObject.SetTextVariable("REWARD_GOLD", this._rewardGold);
					GameTexts.SetVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			private TextObject SuccessQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=R6V2Jv3a}You have delivered the weapons to the {QUEST_GIVER.LINK} as promised.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject FailPlayerDefeatedAgainstGuardsLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=XrxCaoT2}You have failed to deliver the weapons to the {QUEST_GIVER.LINK}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject FailQuestTimedOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=4n71Xoyq}You have failed to bring the weapons to the {QUEST_GIVER.LINK} in time.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject OwnerOfQuestSettlementIsPlayerClanLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=Txtwv90o}Your clan has conquered the town into which you are trying to smuggle weapons. As the {?PLAYER.GENDER}lady{?}lord{\\?} of the town you cannot get involved in this kind of activity. Your agreement with the {QUEST_GIVER.LINK} has canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					return textObject;
				}
			}

			public GangLeaderNeedsWeaponsIssueQuest(string questId, Hero questGiver, CampaignTime dueTime, int rewardGold, int randomForRequiredWeaponClass, int requestedWeaponAmount, float issueDifficulty, int averagePrice)
				: base(questId, questGiver, dueTime, rewardGold)
			{
				this._randomForRequiredWeaponClass = randomForRequiredWeaponClass;
				this._requestedWeaponClass = GangLeaderNeedsWeaponsIssueQuestBehavior._canBeRequestedWeaponClassList[this._randomForRequiredWeaponClass];
				this._requestedWeaponAmount = requestedWeaponAmount;
				this._weaponsThatGuardTook = new Dictionary<EquipmentElement, int>();
				this._issueDifficulty = issueDifficulty;
				this._rewardGold = (float)rewardGold;
				this._bribeGold = averagePrice * requestedWeaponAmount / 4;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
				this._requestedWeaponClass = GangLeaderNeedsWeaponsIssueQuestBehavior._canBeRequestedWeaponClassList[this._randomForRequiredWeaponClass];
			}

			protected override void HourlyTick()
			{
			}

			protected override void RegisterEvents()
			{
				CampaignEvents.SettlementEntered.AddNonSerializedListener(this, new Action<MobileParty, Settlement, Hero>(this.OnSettlementEnter));
				CampaignEvents.OnSettlementLeftEvent.AddNonSerializedListener(this, new Action<MobileParty, Settlement>(this.OnSettlementLeft));
				CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.OnPlayerInventoryChanged));
				CampaignEvents.OnNewItemCraftedEvent.AddNonSerializedListener(this, new Action<ItemObject, ItemModifier, bool>(this.OnItemCrafted));
				CampaignEvents.GameMenuOpened.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.OnGameMenuOpened));
				CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, new Action<Settlement, bool, Hero, Hero, Hero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail>(this.OnSettlementOwnerChanged));
				CampaignEvents.OnEquipmentSmeltedByHeroEvent.AddNonSerializedListener(this, new Action<Hero, EquipmentElement>(this.OnEquipmentSmeltedByHero));
			}

			protected override void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
			{
				this.GiveBackPlayersWeaponsOnCancelOrTimeOut();
			}

			public override void OnCanceled()
			{
				this.GiveBackPlayersWeaponsOnCancelOrTimeOut();
			}

			private void GiveBackPlayersWeaponsOnCancelOrTimeOut()
			{
				if (this._weaponsThatGuardTook.Count > 0)
				{
					foreach (KeyValuePair<EquipmentElement, int> keyValuePair in this._weaponsThatGuardTook)
					{
						PartyBase.MainParty.ItemRoster.AddToCounts(keyValuePair.Key, keyValuePair.Value);
					}
				}
			}

			private void OnEquipmentSmeltedByHero(Hero hero, EquipmentElement equipmentElement)
			{
				if (hero.PartyBelongedTo == MobileParty.MainParty)
				{
					ItemObject item = equipmentElement.Item;
					if (item.WeaponComponent != null && item.WeaponComponent.PrimaryWeapon.WeaponClass == this._requestedWeaponClass)
					{
						this.SetCurrentItemAmount(this._collectedItemAmount - 1);
					}
				}
			}

			private void OnItemCrafted(ItemObject itemObject, ItemModifier overriddenItemModifier, bool isCraftingOrderItem)
			{
				if (!isCraftingOrderItem && itemObject.WeaponComponent != null && itemObject.WeaponComponent.PrimaryWeapon.WeaponClass == this._requestedWeaponClass)
				{
					this.SetCurrentItemAmount(this._collectedItemAmount + 1);
				}
			}

			private void SetCurrentItemAmount(int value)
			{
				this._collectedItemAmount = value;
				JournalLog playerStartsQuestLog = this._playerStartsQuestLog;
				if (playerStartsQuestLog == null)
				{
					return;
				}
				playerStartsQuestLog.UpdateCurrentProgress(this._collectedItemAmount);
			}

			private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
			{
				if (settlement == base.QuestGiver.CurrentSettlement && newOwner == Hero.MainHero)
				{
					base.AddLog(this.OwnerOfQuestSettlementIsPlayerClanLogText, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			private void OnGameMenuOpened(MenuCallbackArgs args)
			{
				if (args.MenuContext.GameMenu.StringId == "town" && Campaign.Current.GameMenuManager.NextLocation == null && GameStateManager.Current.ActiveState is MapState)
				{
					if (this._checkForBattleResult && PlayerEncounter.Battle != null && PlayerEncounter.Battle.InvolvedParties.Any((PartyBase x) => x == this._guardsParty.Party))
					{
						bool flag = PlayerEncounter.Battle.WinningSide == PlayerEncounter.Battle.PlayerSide;
						this._checkForBattleResult = false;
						PlayerEncounter.Finish(true);
						if (flag)
						{
							this.PlayerDodgedGuards();
						}
						else
						{
							this.PlayerDefeatedAgainstGuards();
						}
					}
					if (this._startBattleMission)
					{
						this._startBattleMission = false;
						this.StartFight();
					}
					if (this._playerGoBack)
					{
						PlayerEncounter.LeaveEncounter = true;
						PlayerEncounter.Finish(true);
						this._playerGoBack = false;
					}
				}
			}

			private void OnPlayerInventoryChanged(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
			{
				this.CalculateAndSetRequestedItemCountOnPlayer();
			}

			private void OnSettlementLeft(MobileParty party, Settlement settlement)
			{
				if (settlement == base.QuestGiver.CurrentSettlement && party == MobileParty.MainParty)
				{
					if (this._weaponsThatGuardTook.Count > 0)
					{
						int num = 1500;
						bool flag = false;
						foreach (KeyValuePair<EquipmentElement, int> keyValuePair in this._weaponsThatGuardTook.OrderBy((KeyValuePair<EquipmentElement, int> x) => x.Key.Item.Value).ToList<KeyValuePair<EquipmentElement, int>>())
						{
							int num2 = 0;
							int num3 = 0;
							while (num3 < keyValuePair.Value && num > 0)
							{
								if ((double)MBRandom.RandomFloat >= 0.6)
								{
									num2++;
									num -= keyValuePair.Key.Item.Value;
									flag = true;
								}
								num3++;
							}
							if (keyValuePair.Value > num2)
							{
								PartyBase.MainParty.ItemRoster.AddToCounts(keyValuePair.Key, keyValuePair.Value - num2);
							}
						}
						if (flag)
						{
							MBInformationManager.AddQuickInformation(new TextObject("{=Ibm1A68t}The guards gave your weapons back to you but you noticed something missing.", null), 0, null, "");
						}
						else
						{
							MBInformationManager.AddQuickInformation(new TextObject("{=isGIZ18i}The guards gave all your weapons back to you.", null), 0, null, "");
						}
						this._weaponsThatGuardTook.Clear();
						this.CalculateAndSetRequestedItemCountOnPlayer();
					}
					if (this._guardsParty != null)
					{
						EnterSettlementAction.ApplyForParty(this._guardsParty, base.QuestGiver.CurrentSettlement);
						this._guardsParty.IsVisible = false;
						this._guardsParty.IsActive = false;
					}
				}
			}

			private void OnSettlementEnter(MobileParty party, Settlement settlement, Hero hero)
			{
				if (!this._playerDodgedGuards && party == MobileParty.MainParty && settlement == base.QuestGiver.CurrentSettlement && MobileParty.MainParty.Army == null && Campaign.Current.GameMenuManager.NextLocation == null && GameStateManager.Current.ActiveState is MapState && PlayerEncounter.EncounterSettlement != null)
				{
					this.CalculateAndSetRequestedItemCountOnPlayer();
					if (this._collectedItemAmount >= this._requestedWeaponAmount / 3 && !this._playerGoBack)
					{
						if (this._guardsParty == null)
						{
							this.CreateGuardsParty();
						}
						ConversationCharacterData conversationCharacterData = new ConversationCharacterData(ConversationHelper.GetConversationCharacterPartyLeader(this._guardsParty.Party), null, false, false, false, true, false, false);
						CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter, PartyBase.MainParty, false, false, false, false, false, false), conversationCharacterData);
					}
				}
			}

			private void CreateGuardsParty()
			{
				this._guardsParty = MobileParty.CreateParty("weapon_smuggling_quest_guards_party_" + GangLeaderNeedsWeaponsIssueQuestBehavior.CreatedPartyCount, null, null);
				TextObject textObject = new TextObject("{=7aaAWc01}Guard's Party", null);
				this._guardsParty.InitializeMobilePartyAtPosition(new TroopRoster(this._guardsParty.Party), new TroopRoster(this._guardsParty.Party), base.QuestGiver.CurrentSettlement.GatePosition);
				this._guardsParty.SetCustomName(textObject);
				this._guardsParty.SetCustomHomeSettlement(base.QuestGiver.CurrentSettlement);
				this._guardsParty.Party.SetCustomOwner(base.QuestGiver.CurrentSettlement.OwnerClan.Leader);
				CharacterObject characterObject = CharacterObject.All.First((CharacterObject x) => x.StringId == "guard_" + this._guardsParty.HomeSettlement.Culture.StringId);
				this._guardsParty.MemberRoster.AddToCounts(characterObject, 1, true, 0, 0, true, -1);
				this._guardsParty.SetPartyUsedByQuest(true);
				this._guardsParty.Ai.DisableAi();
				float num = 5f + 15f * this._issueDifficulty;
				this._guardsParty.MemberRoster.AddToCounts(this._guardsParty.HomeSettlement.Culture.MeleeMilitiaTroop, (int)num, false, 0, 0, true, -1);
				EnterSettlementAction.ApplyForParty(this._guardsParty, base.QuestGiver.CurrentSettlement);
				this._guardsParty.IsVisible = false;
				this._guardsParty.ActualClan = base.QuestGiver.CurrentSettlement.OwnerClan;
			}

			protected override void SetDialogs()
			{
				Campaign.Current.ConversationManager.AddDialogFlow(this.GetGuardDialogFlow(), this);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=nQoAsBZY}When you enter the town my men will take the weapons from you. Good luck.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=CQH7E6Gr}What about my weapons?[if:convo_confused_normal][ib:hip]", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=RbToDs0n}Here is your cargo. Now it's time for payment.", null), null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.CheckIfPlayerHasEnoughRequestedWeapons))
					.NpcLine(new TextObject("{=nixINYwE}Yes of course. It was a pleasure doing business with you.[if:convo_mocking_aristocratic]", null), null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.PlayerSuccessfullyDeliveredWeapons;
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=bj49Bq15}It's not that easy to find what you wanted. Be patient, please.", null), null)
					.NpcLine(new TextObject("{=avFXbBLV}I know how it is. Just bring me the weapons.[if:convo_bored2]", null), null, null)
					.EndPlayerOptions()
					.CloseDialog();
			}

			private bool CheckIfPlayerHasEnoughRequestedWeapons()
			{
				this.CalculateAndSetRequestedItemCountOnPlayer();
				return this._collectedItemAmount >= this._requestedWeaponAmount;
			}

			private void CalculateAndSetRequestedItemCountOnPlayer()
			{
				int num = 0;
				foreach (ItemRosterElement itemRosterElement in PartyBase.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item != null && itemRosterElement.EquipmentElement.Item.WeaponComponent != null && itemRosterElement.EquipmentElement.Item.WeaponComponent.PrimaryWeapon.WeaponClass == this._requestedWeaponClass)
					{
						num += itemRosterElement.Amount;
					}
				}
				this.SetCurrentItemAmount(num);
			}

			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				this._playerStartsQuestLog = base.AddDiscreteLog(this.PlayerStartsQuestLogText, new TextObject("{=9j7LJk60}Collected Items", null), this._collectedItemAmount, this._requestedWeaponAmount, null, false);
				this.CalculateAndSetRequestedItemCountOnPlayer();
			}

			private DialogFlow GetGuardDialogFlow()
			{
				TextObject textObject = new TextObject("{=wBBidWVw}What have we here? You can't enter the town with so many weapons. Hand them over! You can retrieve them when you leave.[if:convo_thinking][closed2]", null);
				TextObject textObject2 = new TextObject("{=oVAtPtsu}Clear the way! We don't want to use force!", null);
				TextObject textObject3 = new TextObject("{=JL204Kc0}Sure... sure. We'll hand them over..", null);
				TextObject textObject4 = new TextObject("{=nlCa3tW8}You seem like a reasonable man. What is your price?", null);
				TextObject textObject5 = new TextObject("{=VUjaLmIH}Relax. We have permission. Let us pass. ", null);
				TextObject textObject6 = new TextObject("{=tGFgar0U}Fine. We won't enter at all, then. Good bye.", null);
				TextObject textObject7 = new TextObject("{=Qb7N6txQ}Mmm. For {BRIBE_COST}{GOLD_ICON} denars, I could be persuaded that this is just harmless scrap metal...[if:convo_mocking_aristocratic][ib:confident]", null);
				textObject7.SetTextVariable("BRIBE_COST", this._bribeGold);
				textObject7.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				DialogFlow dialogFlow = DialogFlow.CreateDialogFlow("start", 125).NpcLine(textObject, null, null).Condition(new ConversationSentence.OnConditionDelegate(this.DialogStartCondition))
					.Consequence(delegate
					{
						this._task = this.GetPersuasionTask();
					})
					.BeginPlayerOptions()
					.PlayerOption(textObject2, null)
					.ClickableCondition(new ConversationSentence.OnClickableConditionDelegate(this.CheckPlayerHealth))
					.BeginNpcOptions()
					.NpcOption(new TextObject("{=NcQZz4N2}This is my last warning! It would be better for both sides if you don't resist.[if:convo_grave][ib:closed]", null), new ConversationSentence.OnConditionDelegate(this.CheckPlayersPartySize), null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=NTlbbrwB}If there will be a fight, then we will fight", null), null)
					.NpcLine(new TextObject("{=h5np5kcC}All right, all right... We don't want any trouble here, okay? Go on.[if:convo_contemptuous]", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.PlayerDodgeGuardsLowCrimeRating))
					.CloseDialog()
					.PlayerOption(new TextObject("{=pfxG5Ubu}Fine, fine. Take our weapons.", null), null)
					.NpcLine(new TextObject("{=A8lvIDVw}Wise decision! Now move along![if:convo_angry] ", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.DeleteAllWeaponsFromPlayer))
					.CloseDialog()
					.EndPlayerOptions()
					.NpcOption(new TextObject("{=G632MneX}This is my last warning! Hand over your weapons![if:convo_thinking][ib:closed]", null), null, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=NTlbbrwB}If there will be a fight, then we will fight", null), null)
					.NpcLine(new TextObject("{=8WaoQpYn}Oh there will be one, all right.[if:convo_predatory][ib:warrior]", null), null, null)
					.Consequence(delegate
					{
						this._startBattleMission = true;
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=pfxG5Ubu}Fine, fine. Take our weapons.", null), null)
					.NpcLine(new TextObject("{=3xyd2Dxu}Good. That saves us all trouble.[if:convo_grave][ib:warrior2]", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.DeleteAllWeaponsFromPlayer))
					.CloseDialog()
					.EndPlayerOptions()
					.EndNpcOptions()
					.PlayerOption(textObject3, null)
					.NpcLine(new TextObject("{=GyI86plp}Don't worry. I guarantee your property will be returned, if everything's in order like you say...[if:convo_calm_friendly][ib:closed]", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.DeleteAllWeaponsFromPlayer))
					.CloseDialog()
					.PlayerOption(textObject4, null)
					.NpcLine(textObject7, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=Obk7j3ai}Here it is. Now let us pass", null), null)
					.ClickableCondition(new ConversationSentence.OnClickableConditionDelegate(this.HasPlayerEnoughMoneyToBribe))
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.PlayerBribeGuard))
					.NpcLine(new TextObject("{=musbt5Hm}Sorry for the interruption. Go on please...[if:convo_bored2]", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=d5ztuP3P}That's too much.", null), null)
					.NpcLine(new TextObject("{=49IwOe5E}As you wish...[if:convo_normal]", null), null, null)
					.GotoDialogState("start")
					.EndPlayerOptions()
					.PlayerOption(textObject5, null)
					.Condition(() => !this._persuasionTriedOnce)
					.Consequence(delegate
					{
						this._persuasionTriedOnce = true;
					})
					.GotoDialogState("start_guard_persuasion")
					.PlayerOption(textObject6, null)
					.NpcLine(new TextObject("{=xvYDbEUa}All right. Go on.[if:convo_bored]", null), null, null)
					.Consequence(delegate
					{
						this._playerGoBack = true;
					})
					.CloseDialog()
					.EndPlayerOptions();
				this.AddPersuasionDialogs(dialogFlow);
				return dialogFlow;
			}

			private bool CheckPlayerHealth(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				if (Hero.MainHero.IsWounded)
				{
					explanation = new TextObject("{=yNMrF2QF}You are wounded", null);
					return false;
				}
				return true;
			}

			private void AddPersuasionDialogs(DialogFlow dialog)
			{
				dialog.AddDialogLine("guard_persuation_weapon_smuggling_check_accepted", "start_guard_persuasion", "guard_persuation_weapon_smuggling_start_reservation", "{=v5tPWFFu}Then, what is the purpose of this?", new ConversationSentence.OnConditionDelegate(this.persuasion_start_with_guards_on_condition), new ConversationSentence.OnConsequenceDelegate(this.persuasion_start_with_guards_on_consequence), this, 100, null, null, null);
				dialog.AddDialogLine("guard_persuation_weapon_smuggling_rejected", "guard_persuation_weapon_smuggling_start_reservation", "start", "{=!}{FAILED_PERSUASION_LINE}", new ConversationSentence.OnConditionDelegate(this.persuasion_failed_with_guards_on_condition), new ConversationSentence.OnConsequenceDelegate(this.persuasion_rejected_with_guards_on_consequence), this, 100, null, null, null);
				dialog.AddDialogLine("guard_persuation_weapon_smuggling_attempt", "guard_persuation_weapon_smuggling_start_reservation", "guard_persuation_weapon_smuggling_select_option", "{=D9SS2Oh0}I'm going to need you to tell me a little more.", () => !this.persuasion_failed_with_guards_on_condition(), null, this, 100, null, null, null);
				dialog.AddDialogLine("guard_persuation_weapon_smuggling_success", "guard_persuation_weapon_smuggling_start_reservation", "close_window", "{=kD8yLgRv}Go on. But I have my eye on you.", new ConversationSentence.OnConditionDelegate(ConversationManager.GetPersuasionProgressSatisfied), new ConversationSentence.OnConsequenceDelegate(this.persuasion_complete_with_guards_on_consequence), this, 200, null, null, null);
				string text = "guard_persuation_weapon_smuggling_select_option_1";
				string text2 = "guard_persuation_weapon_smuggling_select_option";
				string text3 = "guard_persuation_weapon_smuggling_selected_option_response";
				string text4 = "{=!}{GUARDS_PERSUADE_ATTEMPT_1}";
				ConversationSentence.OnConditionDelegate onConditionDelegate = new ConversationSentence.OnConditionDelegate(this.guard_persuation_weapon_smuggling_select_option_1_on_condition);
				ConversationSentence.OnConsequenceDelegate onConsequenceDelegate = new ConversationSentence.OnConsequenceDelegate(this.guard_persuation_weapon_smuggling_select_option_1_on_consequence);
				ConversationSentence.OnPersuasionOptionDelegate onPersuasionOptionDelegate = new ConversationSentence.OnPersuasionOptionDelegate(this.guard_persuation_weapon_smuggling_setup_option_1);
				ConversationSentence.OnClickableConditionDelegate onClickableConditionDelegate = new ConversationSentence.OnClickableConditionDelegate(this.guard_persuation_weapon_smuggling_clickable_option_1_on_condition);
				dialog.AddPlayerLine(text, text2, text3, text4, onConditionDelegate, onConsequenceDelegate, this, 100, onClickableConditionDelegate, onPersuasionOptionDelegate, null, null);
				string text5 = "guard_persuation_weapon_smuggling_select_option_2";
				string text6 = "guard_persuation_weapon_smuggling_select_option";
				string text7 = "guard_persuation_weapon_smuggling_selected_option_response";
				string text8 = "{=!}{GUARDS_PERSUADE_ATTEMPT_2}";
				ConversationSentence.OnConditionDelegate onConditionDelegate2 = new ConversationSentence.OnConditionDelegate(this.guard_persuation_weapon_smuggling_select_option_2_on_condition);
				ConversationSentence.OnConsequenceDelegate onConsequenceDelegate2 = new ConversationSentence.OnConsequenceDelegate(this.guard_persuation_weapon_smuggling_select_option_2_on_consequence);
				onPersuasionOptionDelegate = new ConversationSentence.OnPersuasionOptionDelegate(this.guard_persuation_weapon_smuggling_setup_option_2);
				onClickableConditionDelegate = new ConversationSentence.OnClickableConditionDelegate(this.guard_persuation_weapon_smuggling_clickable_option_2_on_condition);
				dialog.AddPlayerLine(text5, text6, text7, text8, onConditionDelegate2, onConsequenceDelegate2, this, 100, onClickableConditionDelegate, onPersuasionOptionDelegate, null, null);
				string text9 = "guard_persuation_weapon_smuggling_select_option_3";
				string text10 = "guard_persuation_weapon_smuggling_select_option";
				string text11 = "guard_persuation_weapon_smuggling_selected_option_response";
				string text12 = "{=!}{GUARDS_PERSUADE_ATTEMPT_3}";
				ConversationSentence.OnConditionDelegate onConditionDelegate3 = new ConversationSentence.OnConditionDelegate(this.guard_persuation_weapon_smuggling_select_option_3_on_condition);
				ConversationSentence.OnConsequenceDelegate onConsequenceDelegate3 = new ConversationSentence.OnConsequenceDelegate(this.guard_persuation_weapon_smuggling_select_option_3_on_consequence);
				onPersuasionOptionDelegate = new ConversationSentence.OnPersuasionOptionDelegate(this.guard_persuation_weapon_smuggling_setup_option_3);
				onClickableConditionDelegate = new ConversationSentence.OnClickableConditionDelegate(this.guard_persuation_weapon_smuggling_clickable_option_3_on_condition);
				dialog.AddPlayerLine(text9, text10, text11, text12, onConditionDelegate3, onConsequenceDelegate3, this, 100, onClickableConditionDelegate, onPersuasionOptionDelegate, null, null);
				dialog.AddDialogLine("guard_persuation_weapon_smuggling_select_option_reaction", "guard_persuation_weapon_smuggling_selected_option_response", "guard_persuation_weapon_smuggling_start_reservation", "{=!}{PERSUASION_REACTION}", new ConversationSentence.OnConditionDelegate(this.guard_persuation_weapon_smuggling_selected_option_response_on_condition), new ConversationSentence.OnConsequenceDelegate(this.guard_persuation_weapon_smuggling_selected_option_response_on_consequence), this, 100, null, null, null);
			}

			private void persuasion_start_with_guards_on_consequence()
			{
				ConversationManager.StartPersuasion(2f, 1f, 0f, 2f, 2f, 0f, PersuasionDifficulty.VeryHard);
			}

			private bool persuasion_start_with_guards_on_condition()
			{
				return this._guardsParty != null && CharacterObject.OneToOneConversationCharacter == ConversationHelper.GetConversationCharacterPartyLeader(this._guardsParty.Party);
			}

			private bool persuasion_failed_with_guards_on_condition()
			{
				if (this._task.Options.All((PersuasionOptionArgs x) => x.IsBlocked) && !ConversationManager.GetPersuasionProgressSatisfied())
				{
					MBTextManager.SetTextVariable("FAILED_PERSUASION_LINE", this._task.FinalFailLine, false);
					return true;
				}
				return false;
			}

			private void persuasion_rejected_with_guards_on_consequence()
			{
				PlayerEncounter.LeaveEncounter = false;
				ConversationManager.EndPersuasion();
			}

			private void persuasion_complete_with_guards_on_consequence()
			{
				this.PlayerDodgedGuards();
				PlayerEncounter.LeaveEncounter = true;
				ConversationManager.EndPersuasion();
			}

			private PersuasionTask GetPersuasionTask()
			{
				PersuasionTask persuasionTask = new PersuasionTask(0);
				persuasionTask.FinalFailLine = new TextObject("{=XCJGl82o}Do you think you can pull one over on me? Now hand over the weapons![if:convo_furious][ib:aggressive]", null);
				persuasionTask.TryLaterLine = new TextObject("{=!}TODO", null);
				persuasionTask.SpokenLine = new TextObject("{=6P1ruzsC}Maybe...", null);
				PersuasionOptionArgs persuasionOptionArgs = new PersuasionOptionArgs(DefaultSkills.Roguery, DefaultTraits.RogueSkills, TraitEffect.Positive, PersuasionArgumentStrength.Hard, false, new TextObject("{=1hbos200}Here are some documents from the chancellery.", null), null, false, false, false);
				persuasionTask.AddOptionToTask(persuasionOptionArgs);
				PersuasionOptionArgs persuasionOptionArgs2 = new PersuasionOptionArgs(DefaultSkills.Roguery, DefaultTraits.Calculating, TraitEffect.Positive, PersuasionArgumentStrength.Normal, false, new TextObject("{=UHCKXapl}The metalworkers' guild asked for them. Don't worry, they'll be melted into scrap.", null), null, false, false, false);
				persuasionTask.AddOptionToTask(persuasionOptionArgs2);
				PersuasionOptionArgs persuasionOptionArgs3 = new PersuasionOptionArgs(DefaultSkills.Charm, DefaultTraits.RogueSkills, TraitEffect.Positive, PersuasionArgumentStrength.VeryHard, false, new TextObject("{=8Wa6OxG8}It's secret. You must be new in your post if you don't know who I am and what I do.", null), null, false, false, false);
				persuasionTask.AddOptionToTask(persuasionOptionArgs3);
				return persuasionTask;
			}

			private bool guard_persuation_weapon_smuggling_selected_option_response_on_condition()
			{
				PersuasionOptionResult item = ConversationManager.GetPersuasionChosenOptions().Last<Tuple<PersuasionOptionArgs, PersuasionOptionResult>>().Item2;
				MBTextManager.SetTextVariable("PERSUASION_REACTION", PersuasionHelper.GetDefaultPersuasionOptionReaction(item), false);
				if (item == PersuasionOptionResult.CriticalFailure)
				{
					this._task.BlockAllOptions();
				}
				return true;
			}

			private void guard_persuation_weapon_smuggling_selected_option_response_on_consequence()
			{
				Tuple<PersuasionOptionArgs, PersuasionOptionResult> tuple = ConversationManager.GetPersuasionChosenOptions().Last<Tuple<PersuasionOptionArgs, PersuasionOptionResult>>();
				float difficulty = Campaign.Current.Models.PersuasionModel.GetDifficulty(PersuasionDifficulty.VeryHard);
				float num;
				float num2;
				Campaign.Current.Models.PersuasionModel.GetEffectChances(tuple.Item1, out num, out num2, difficulty);
				this._task.ApplyEffects(num, num2);
			}

			private bool guard_persuation_weapon_smuggling_select_option_1_on_condition()
			{
				if (this._task.Options.Count > 0)
				{
					TextObject textObject = new TextObject("{=bSo9hKwr}{PERSUASION_OPTION_LINE} {SUCCESS_CHANCE}", null);
					textObject.SetTextVariable("SUCCESS_CHANCE", PersuasionHelper.ShowSuccess(this._task.Options.ElementAt(0), false));
					textObject.SetTextVariable("PERSUASION_OPTION_LINE", this._task.Options.ElementAt(0).Line);
					MBTextManager.SetTextVariable("GUARDS_PERSUADE_ATTEMPT_1", textObject, false);
					return true;
				}
				return false;
			}

			private bool guard_persuation_weapon_smuggling_select_option_2_on_condition()
			{
				if (this._task.Options.Count > 1)
				{
					TextObject textObject = new TextObject("{=bSo9hKwr}{PERSUASION_OPTION_LINE} {SUCCESS_CHANCE}", null);
					textObject.SetTextVariable("SUCCESS_CHANCE", PersuasionHelper.ShowSuccess(this._task.Options.ElementAt(1), false));
					textObject.SetTextVariable("PERSUASION_OPTION_LINE", this._task.Options.ElementAt(1).Line);
					MBTextManager.SetTextVariable("GUARDS_PERSUADE_ATTEMPT_2", textObject, false);
					return true;
				}
				return false;
			}

			private bool guard_persuation_weapon_smuggling_select_option_3_on_condition()
			{
				if (this._task.Options.Count > 2)
				{
					TextObject textObject = new TextObject("{=bSo9hKwr}{PERSUASION_OPTION_LINE} {SUCCESS_CHANCE}", null);
					textObject.SetTextVariable("SUCCESS_CHANCE", PersuasionHelper.ShowSuccess(this._task.Options.ElementAt(2), false));
					textObject.SetTextVariable("PERSUASION_OPTION_LINE", this._task.Options.ElementAt(2).Line);
					MBTextManager.SetTextVariable("GUARDS_PERSUADE_ATTEMPT_3", textObject, false);
					return true;
				}
				return false;
			}

			private void guard_persuation_weapon_smuggling_select_option_1_on_consequence()
			{
				if (this._task.Options.Count > 0)
				{
					this._task.Options[0].BlockTheOption(true);
				}
			}

			private void guard_persuation_weapon_smuggling_select_option_2_on_consequence()
			{
				if (this._task.Options.Count > 1)
				{
					this._task.Options[1].BlockTheOption(true);
				}
			}

			private void guard_persuation_weapon_smuggling_select_option_3_on_consequence()
			{
				if (this._task.Options.Count > 2)
				{
					this._task.Options[2].BlockTheOption(true);
				}
			}

			private PersuasionOptionArgs guard_persuation_weapon_smuggling_setup_option_1()
			{
				return this._task.Options.ElementAt(0);
			}

			private PersuasionOptionArgs guard_persuation_weapon_smuggling_setup_option_2()
			{
				return this._task.Options.ElementAt(1);
			}

			private PersuasionOptionArgs guard_persuation_weapon_smuggling_setup_option_3()
			{
				return this._task.Options.ElementAt(2);
			}

			private bool guard_persuation_weapon_smuggling_clickable_option_1_on_condition(out TextObject hintText)
			{
				hintText = new TextObject("{=9ACJsI6S}Blocked", null);
				if (this._task.Options.Count > 0)
				{
					hintText = (this._task.Options.ElementAt(0).IsBlocked ? hintText : TextObject.Empty);
					return !this._task.Options.ElementAt(0).IsBlocked;
				}
				return false;
			}

			private bool guard_persuation_weapon_smuggling_clickable_option_2_on_condition(out TextObject hintText)
			{
				hintText = new TextObject("{=9ACJsI6S}Blocked", null);
				if (this._task.Options.Count > 1)
				{
					hintText = (this._task.Options.ElementAt(1).IsBlocked ? hintText : TextObject.Empty);
					return !this._task.Options.ElementAt(1).IsBlocked;
				}
				return false;
			}

			private bool guard_persuation_weapon_smuggling_clickable_option_3_on_condition(out TextObject hintText)
			{
				hintText = new TextObject("{=9ACJsI6S}Blocked", null);
				if (this._task.Options.Count > 2)
				{
					hintText = (this._task.Options.ElementAt(2).IsBlocked ? hintText : TextObject.Empty);
					return !this._task.Options.ElementAt(2).IsBlocked;
				}
				return false;
			}

			private bool DialogStartCondition()
			{
				return !this._playerDodgedGuards && this._guardsParty != null && CharacterObject.OneToOneConversationCharacter == ConversationHelper.GetConversationCharacterPartyLeader(this._guardsParty.Party);
			}

			private void StartFight()
			{
				int num = (base.QuestGiver.CurrentSettlement.IsTown ? base.QuestGiver.CurrentSettlement.Town.GetWallLevel() : 1);
				this._highCrimeRatingWillBeApplied = true;
				if (this._guardsParty.CurrentSettlement == null)
				{
					this._guardsParty.CurrentSettlement = base.QuestGiver.CurrentSettlement;
				}
				PlayerEncounter.RestartPlayerEncounter(this._guardsParty.Party, PartyBase.MainParty, false);
				PlayerEncounter.StartBattle();
				GameMenu.ActivateGameMenu("town");
				int num2 = (int)(5f + 15f * this._issueDifficulty);
				CampaignMission.OpenBattleMissionWhileEnteringSettlement(base.QuestGiver.CurrentSettlement.LocationComplex.GetLocationWithId("center").GetSceneName(num), num, num2, num2);
				this._checkForBattleResult = true;
			}

			private void PlayerDodgeGuardsLowCrimeRating()
			{
				this.PlayerDodgedGuards();
				this._lowCrimeRatingWillBeApplied = true;
			}

			private bool CheckPlayersPartySize()
			{
				return MobileParty.MainParty.MemberRoster.TotalRegulars - MobileParty.MainParty.MemberRoster.TotalWoundedRegulars > 30;
			}

			private void PlayerDodgedGuards()
			{
				MBInformationManager.AddQuickInformation(new TextObject("{=vYRbyXkz}The guards won't come after you anymore.", null), 0, null, "");
				if (this._guardsParty.IsActive && this._guardsParty.IsVisible)
				{
					DestroyPartyAction.Apply(PartyBase.MainParty, this._guardsParty);
				}
				this._playerDodgedGuards = true;
			}

			private void PlayerBribeGuard()
			{
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, null, this._bribeGold, false);
				this.PlayerDodgedGuards();
			}

			private void DeleteAllWeaponsFromPlayer()
			{
				Dictionary<EquipmentElement, int> dictionary = new Dictionary<EquipmentElement, int>();
				foreach (ItemRosterElement itemRosterElement in PartyBase.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item != null && !itemRosterElement.EquipmentElement.IsQuestItem && itemRosterElement.EquipmentElement.Item.WeaponComponent != null && itemRosterElement.Amount > 0 && !dictionary.ContainsKey(itemRosterElement.EquipmentElement))
					{
						dictionary.Add(itemRosterElement.EquipmentElement, itemRosterElement.Amount);
						PartyBase.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -itemRosterElement.Amount);
					}
				}
				this._weaponsThatGuardTook = dictionary;
				this.CalculateAndSetRequestedItemCountOnPlayer();
			}

			private void QuestSuccessDeleteWeaponsFromPlayer()
			{
				int num = this._requestedWeaponAmount;
				for (int i = PartyBase.MainParty.ItemRoster.Count - 1; i >= 0; i--)
				{
					ItemRosterElement itemRosterElement = PartyBase.MainParty.ItemRoster[i];
					if (itemRosterElement.EquipmentElement.Item != null && itemRosterElement.EquipmentElement.Item.WeaponComponent != null && itemRosterElement.EquipmentElement.Item.WeaponComponent.PrimaryWeapon.WeaponClass == this._requestedWeaponClass && itemRosterElement.Amount > 0)
					{
						if (num < itemRosterElement.Amount)
						{
							PartyBase.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -num);
							return;
						}
						PartyBase.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement, -itemRosterElement.Amount);
						num -= itemRosterElement.Amount;
					}
					if (num == 0)
					{
						break;
					}
				}
			}

			private bool HasPlayerEnoughMoneyToBribe(out TextObject hintText)
			{
				hintText = TextObject.Empty;
				if (Hero.MainHero.Gold < this._bribeGold)
				{
					hintText = new TextObject("{=1V6DRayw}You don't have {BRIBE_COST} denars.", null);
					hintText.SetTextVariable("BRIBE_COST", this._bribeGold);
					return false;
				}
				return true;
			}

			private void PlayerDefeatedAgainstGuards()
			{
				base.AddLog(this.FailPlayerDefeatedAgainstGuardsLogText, false);
				base.QuestGiver.AddPower(-10f);
				this.RelationshipChangeWithQuestGiver = -5;
				base.CompleteQuestWithFail(null);
			}

			private void PlayerSuccessfullyDeliveredWeapons()
			{
				base.AddLog(this.SuccessQuestLogText, false);
				GainRenownAction.Apply(Hero.MainHero, 2f, false);
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, (int)this._rewardGold, false);
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = 5;
				this.QuestSuccessDeleteWeaponsFromPlayer();
				this._weaponsThatGuardTook.Clear();
				base.QuestGiver.CurrentSettlement.Town.Security -= 30f;
				if (this._lowCrimeRatingWillBeApplied)
				{
					ChangeCrimeRatingAction.Apply(base.QuestGiver.CurrentSettlement.MapFaction, 30f, true);
				}
				if (this._highCrimeRatingWillBeApplied)
				{
					ChangeCrimeRatingAction.Apply(base.QuestGiver.CurrentSettlement.MapFaction, 60f, true);
				}
				base.CompleteQuestWithSuccess();
			}

			public override void OnFailed()
			{
				if (this._lowCrimeRatingWillBeApplied)
				{
					ChangeCrimeRatingAction.Apply(base.QuestGiver.CurrentSettlement.MapFaction, 30f, true);
				}
				if (this._highCrimeRatingWillBeApplied)
				{
					ChangeCrimeRatingAction.Apply(base.QuestGiver.CurrentSettlement.MapFaction, 60f, true);
				}
			}

			protected override void OnFinalize()
			{
				if (this._guardsParty != null && this._guardsParty.IsActive)
				{
					DestroyPartyAction.Apply(PartyBase.MainParty, this._guardsParty);
				}
			}

			protected override void OnTimedOut()
			{
				base.AddLog(this.FailQuestTimedOutLogText, false);
				base.QuestGiver.AddPower(-10f);
				this.RelationshipChangeWithQuestGiver = -5;
			}

			private const int LowCrimeRatingValue = 30;

			private const int HighCrimeRatingValue = 60;

			private WeaponClass _requestedWeaponClass;

			[SaveableField(10)]
			private int _randomForRequiredWeaponClass;

			[SaveableField(20)]
			private int _requestedWeaponAmount;

			[SaveableField(30)]
			private bool _playerDodgedGuards;

			[SaveableField(40)]
			private int _collectedItemAmount;

			[SaveableField(50)]
			private bool _lowCrimeRatingWillBeApplied;

			[SaveableField(60)]
			private bool _highCrimeRatingWillBeApplied;

			[SaveableField(71)]
			private Dictionary<EquipmentElement, int> _weaponsThatGuardTook;

			[SaveableField(80)]
			private float _issueDifficulty;

			[SaveableField(90)]
			private float _rewardGold;

			[SaveableField(100)]
			private int _bribeGold;

			[SaveableField(101)]
			private bool _persuasionTriedOnce;

			private bool _checkForBattleResult;

			private MobileParty _guardsParty;

			private bool _startBattleMission;

			private bool _playerGoBack;

			private PersuasionTask _task;

			private const PersuasionDifficulty Difficulty = PersuasionDifficulty.VeryHard;

			[SaveableField(110)]
			private JournalLog _playerStartsQuestLog;
		}

		public class GangLeaderNeedsWeaponsIssueTypeDefiner : SaveableTypeDefiner
		{
			public GangLeaderNeedsWeaponsIssueTypeDefiner()
				: base(3940000)
			{
			}

			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssue), 1, null);
				base.AddClassDefinition(typeof(GangLeaderNeedsWeaponsIssueQuestBehavior.GangLeaderNeedsWeaponsIssueQuest), 2, null);
			}
		}
	}
}
