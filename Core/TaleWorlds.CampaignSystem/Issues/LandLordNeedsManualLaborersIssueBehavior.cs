using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.GameState;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	public class LandLordNeedsManualLaborersIssueBehavior : CampaignBehaviorBase
	{
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		public override void SyncData(IDataStore dataStore)
		{
		}

		private bool ConditionsHold(Hero issueGiver)
		{
			if (issueGiver.CurrentSettlement != null && issueGiver.IsRuralNotable && issueGiver.GetTraitLevel(DefaultTraits.Mercy) <= 0)
			{
				Village village = issueGiver.CurrentSettlement.Village;
				return village != null && (village.VillageType == DefaultVillageTypes.IronMine || village.VillageType == DefaultVillageTypes.ClayMine || village.VillageType == DefaultVillageTypes.SaltMine || village.VillageType == DefaultVillageTypes.SilverMine);
			}
			return false;
		}

		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssue(issueOwner);
		}

		private const IssueBase.IssueFrequency NeedsLaborersIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		public class LandLordNeedsManualLaborersIssue : IssueBase
		{
			internal static void AutoGeneratedStaticCollectObjectsLandLordNeedsManualLaborersIssue(object o, List<object> collectedObjects)
			{
				((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.RequiredTroops;
				}
			}

			private int RequestedPrisonerCount
			{
				get
				{
					return 6 + MathF.Ceiling(30f * base.IssueDifficultyMultiplier);
				}
			}

			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 8 + MathF.Ceiling(12f * base.IssueDifficultyMultiplier);
				}
			}

			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 5 + MathF.Ceiling(5f * base.IssueDifficultyMultiplier);
				}
			}

			protected override int RewardGold
			{
				get
				{
					return this.RequestedPrisonerCount * 50;
				}
			}

			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject;
					if (base.IssueOwner.CharacterObject.GetTraitLevel(DefaultTraits.Mercy) < 0)
					{
						textObject = new TextObject("{=QEhapwtN}I own a mine near here. Normally I can find willing villagers to work it, but these days they've been demanding higher and higher wages. Fine. They're out of a job, but I still need to work the mine. If you could perhaps find me some prisoners...[if:convo_normal][ib:confident2]", null);
					}
					else
					{
						textObject = new TextObject("{=1LFcSRPw}I have a mine near here. We had an unfortunate accident a week back. Two workers were crushed to death. It's a great shame... but work must go on. Trouble is, no one wants to come back. If perhaps you could find me some prisoners...[if:convo_thinking][ib:hip]", null);
					}
					return textObject;
				}
			}

			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=DSMMIrz9}Prisoners... You want criminals or war captives?", null);
				}
			}

			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=ji5kkqXy}They need to be criminals, bandits, for me to do this legally. I need at least {WANTED_PRISONER_AMOUNT} of them. But if you can bring more I will gladly accept. I'm willing to pay ten times more than their market price for each. What do you say?[if:convo_nonchalant]", null);
					textObject.SetTextVariable("WANTED_PRISONER_AMOUNT", this.RequestedPrisonerCount);
					return textObject;
				}
			}

			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=WpidwcAV}If you have a companion who understands this type of work and {ALTERNATIVE_TROOP_AMOUNT} men, I can tell them where to go to get their hands on some prisoners.", null);
					textObject.SetTextVariable("ALTERNATIVE_TROOP_AMOUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					return textObject;
				}
			}

			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=C06TxxnM}I'll bring you at least {WANTED_PRISONER_AMOUNT} prisoners as soon as possible.", null);
					textObject.SetTextVariable("WANTED_PRISONER_AMOUNT", this.RequestedPrisonerCount);
					return textObject;
				}
			}

			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=QH3shVzb}My people can bring you your laborers.", null);
				}
			}

			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=XXOlu6z0}Thank you for sparing some of your men to save my business. I am looking forward to resuming work.[if:convo_mocking_teasing]", null);
				}
			}

			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=PrzguaEq}Thank you. I appreciate your people's help.", null);
				}
			}

			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=MYeCnHTb}You asked {COMPANION.LINK} to deliver at least {WANTED_PRISONER_AMOUNT} prisoners to {ISSUE_GIVER.LINK} in {SETTLEMENT}. They should rejoin your party in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("WANTED_PRISONER_AMOUNT", this.RequestedPrisonerCount);
					textObject.SetTextVariable("SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			public override TextObject Title
			{
				get
				{
					return new TextObject("{=hVIsGd2y}Landowner Needs Manual Laborers", null);
				}
			}

			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=5of4a1kg}A landowner needs your help to find prisoners to use in {?ISSUE_GIVER.GENDER}her{?}his{\\?} mines as manual laborers.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, null, false);
					return textObject;
				}
			}

			public LandLordNeedsManualLaborersIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
			}

			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.VillageHearth)
				{
					return -0.3f;
				}
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.1f;
				}
				return 0f;
			}

			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Athletics) >= hero.GetSkillValue(DefaultSkills.Leadership)) ? DefaultSkills.Athletics : DefaultSkills.Leadership, 120);
			}

			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			public override bool IssueStayAliveConditions()
			{
				return !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid;
			}

			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flags, out Hero relationHero, out SkillObject skill)
			{
				flags = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flags |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.MapFaction, Hero.MainHero.MapFaction))
				{
					flags |= IssueBase.PreconditionFlags.AtWar;
				}
				return flags == IssueBase.PreconditionFlags.None;
			}

			protected override void OnGameLoad()
			{
			}

			protected override void HourlyTick()
			{
			}

			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(20f), this.RequestedPrisonerCount);
			}

			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(500f + 700f * base.IssueDifficultyMultiplier);
				}
			}

			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.IssueOwner, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				base.IssueOwner.AddPower(10f);
				this.RelationshipChangeWithIssueOwner = 5;
			}

			private const int IssueDuration = 30;

			private const int QuestDuration = 20;

			private const int AlternativeSolutionTroopTierRequirement = 2;

			private const int CompanionRequiredSkillLevel = 120;
		}

		public class LandLordNeedsManualLaborersIssueQuest : QuestBase
		{
			internal static void AutoGeneratedStaticCollectObjectsLandLordNeedsManualLaborersIssueQuest(object o, List<object> collectedObjects)
			{
				((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._questProgressLogTest);
			}

			internal static object AutoGeneratedGetMemberValue_requestedPrisonerCount(object o)
			{
				return ((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o)._requestedPrisonerCount;
			}

			internal static object AutoGeneratedGetMemberValue_shareProfit(object o)
			{
				return ((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o)._shareProfit;
			}

			internal static object AutoGeneratedGetMemberValue_counterOfferGiven(object o)
			{
				return ((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o)._counterOfferGiven;
			}

			internal static object AutoGeneratedGetMemberValue_deliveredPrisonerCount(object o)
			{
				return ((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o)._deliveredPrisonerCount;
			}

			internal static object AutoGeneratedGetMemberValue_rewardGold(object o)
			{
				return ((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o)._rewardGold;
			}

			internal static object AutoGeneratedGetMemberValue_maximumPrisonerCount(object o)
			{
				return ((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o)._maximumPrisonerCount;
			}

			internal static object AutoGeneratedGetMemberValue_playerReachedMaximumAmount(object o)
			{
				return ((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o)._playerReachedMaximumAmount;
			}

			internal static object AutoGeneratedGetMemberValue_questProgressLogTest(object o)
			{
				return ((LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest)o)._questProgressLogTest;
			}

			public override TextObject Title
			{
				get
				{
					return new TextObject("{=hVIsGd2y}Landowner Needs Manual Laborers", null);
				}
			}

			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			private bool IsQuestWithCounterOffer
			{
				get
				{
					if (base.QuestGiver.CharacterObject.GetTraitLevel(DefaultTraits.Mercy) < 0)
					{
						return base.QuestGiver.CurrentSettlement.Notables.FirstOrDefault((Hero x) => x.IsHeadman) != null;
					}
					return false;
				}
			}

			private TextObject QuestStartedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=7XR4MJci}{QUEST_GIVER.LINK}, a landowner in {SETTLEMENT}, told you that {?QUEST_GIVER.GENDER}she{?}he{\\?} needs prisoners to use in {?QUEST_GIVER.GENDER}her{?}his{\\?} mines as manual laborers. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to bring at least {NEEDED_PRISONER_AMOUNT} bandit prisoners, but {?QUEST_GIVER.GENDER}she{?}he{\\?} will pay extra if you bring more. You have agreed to bring {?QUEST_GIVER.GENDER}her{?}him{\\?} at least {NEEDED_PRISONER_AMOUNT} bandit prisoner and you will be paid ten times more than their market price for each prisoner you bring.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("NEEDED_PRISONER_AMOUNT", this._requestedPrisonerCount);
					return textObject;
				}
			}

			private TextObject QuestCanceledWarDeclaredLog
			{
				get
				{
					TextObject textObject = new TextObject("{=vW6kBki9}Your clan is now at war with {QUEST_GIVER.LINK}'s realm. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject PlayerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject QuestGiverVillageRaided
			{
				get
				{
					TextObject textObject = new TextObject("{=gJG0xmAq}{QUEST_GIVER.LINK}'s village {QUEST_SETTLEMENT} was raided. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			private TextObject QuestSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=ucu9u1nS}You delivered the prisoners to {QUEST_GIVER.LINK} as promised.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject PlayerSharedTheProfitWithHeadManLogText
			{
				get
				{
					return new TextObject("{=ULpP07bg}You promised to share half of the profit with the headman and the villager.", null);
				}
			}

			private TextObject QuestSuccessWithProfitShareLog
			{
				get
				{
					TextObject textObject = new TextObject("{=SyuxD1aY}You delivered the prisoners to {QUEST_GIVER.LINK} as promised and you shared half of the profit with the headman and the villagers.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject QuestFailPlayerAcceptedCounterOfferLog
			{
				get
				{
					TextObject textObject = new TextObject("{=u8DJ8a2D}You agreed with the headman to break your agreement with {QUEST_GIVER.LINK}. By doing so you protected the villagers' jobs and now they are grateful to you.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject QuestFailedWithTimeOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=b1lsZNxE}You failed to deliver enough prisoners in time. {QUEST_GIVER.LINK} must be disappointed.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			public LandLordNeedsManualLaborersIssueQuest(string questId, Hero giverHero, CampaignTime duration, int requestedPrisonerCount)
				: base(questId, giverHero, duration, 0)
			{
				this._requestedPrisonerCount = requestedPrisonerCount;
				this._shareProfit = false;
				this._deliveredPrisonerCount = 0;
				this._rewardGold = 0;
				this._counterOfferGiven = false;
				this._maximumPrisonerCount = MBRandom.RandomInt(40, 60);
				this._playerReachedMaximumAmount = false;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddTrackedObject(base.QuestGiver.CurrentSettlement);
				TextObject textObject = new TextObject("{=N4eLGduQ}Delivered Prisoners ({TOTAL_REWARD}{GOLD_ICON})", null);
				textObject.SetTextVariable("TOTAL_REWARD", this._rewardGold);
				textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
				this._questProgressLogTest = base.AddDiscreteLog(this.QuestStartedLogText, textObject, this._deliveredPrisonerCount, this._requestedPrisonerCount, null, false);
			}

			private DialogFlow GetCounterOfferDialogFlow()
			{
				TextObject textObject = new TextObject("{=aJHMafam}{?PLAYER.GENDER}Madam{?}Sir{\\?} - a moment of your time! [if:convo_undecided_open][ib:nervous2]You're on a job for {ISSUE_GIVER.LINK}, am I right? Look - our people are depending on those jobs. {?ISSUE_GIVER.GENDER}She{?}He{\\?} doesn't need to pay us a living wage if {?ISSUE_GIVER.GENDER}she{?}he{\\?} can do the work with prisoners. Please - break your agreement. You don't have to do this.", null);
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
				StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.QuestGiver.CharacterObject, textObject, false);
				TextObject textObject2 = new TextObject("{=8BdJ2MZj}I don't want to hurt your people. I'll forget my deal with {ISSUE_GIVER.LINK}.", null);
				StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.QuestGiver.CharacterObject, textObject2, false);
				return DialogFlow.CreateDialogFlow("start", 125).NpcLine(textObject, null, null).Condition(delegate
				{
					if (!this._counterOfferGiven && Hero.OneToOneConversationHero != null)
					{
						return Hero.OneToOneConversationHero == base.QuestGiver.CurrentSettlement.Notables.FirstOrDefault((Hero x) => x.IsHeadman);
					}
					return false;
				})
					.Consequence(delegate
					{
						this._counterOfferGiven = true;
					})
					.BeginPlayerOptions()
					.PlayerOption("{=rOWyAHPo}Mind your own business, Headman.", null)
					.NpcLine("{=tLapkQqg}We won't forget this![if:convo_thinking][ib:aggressive]", null, null)
					.Consequence(delegate
					{
						ChangeRelationAction.ApplyPlayerRelation(Hero.OneToOneConversationHero, -3, true, true);
					})
					.CloseDialog()
					.PlayerOption("{=I3GUAb9a}I understand your concern, Headman, but I made an agreement. How about I share the profit with you and your people?", null)
					.NpcLine("{=MmQt0TD3}This is not we want, but it's more than nothing.[if:convo_dismayed][ib:normal]", null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.ShareTheProfit))
					.CloseDialog()
					.PlayerOption(textObject2, null)
					.NpcLine("{=E5yAFR6y}Good to hear that. Thank you.[if:convo_relaxed_happy][ib:normal]", null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestFailPlayerAcceptedCounterOffer))
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			private void ShareTheProfit()
			{
				base.AddLog(this.PlayerSharedTheProfitWithHeadManLogText, false);
				ChangeRelationAction.ApplyPlayerRelation(Hero.OneToOneConversationHero, 3, true, true);
				this._shareProfit = true;
			}

			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=l7dL6arZ}Thank you. Remember - they need to be looters or bandits. Anyone else I can't put to work.[if:convo_mocking_teasing][ib:closed]", null), null, null).Condition(() => Hero.OneToOneConversationHero == this.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				TextObject npcDiscussLine = new TextObject("{=!}{MANUAL_LABORERS_QUEST_NOTABLE_DISCUSS}", null);
				TextObject npcResponseLine = new TextObject("{=!}{MANUAL_LABORERS_QUEST_NOTABLE_RESPONSE}", null);
				bool changeDialogAfterTransfer = false;
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).BeginNpcOptions().NpcOption(new TextObject("{=VRLbAaYe}Thank you for saving my business {?PLAYER.GENDER}madam{?}sir{\\?}. Here is your payment.", null), () => Hero.OneToOneConversationHero == this.QuestGiver && this._playerReachedMaximumAmount, null, null)
					.Consequence(delegate
					{
						this.ApplyQuestSuccessConsequences();
						this.CompleteQuestWithSuccess();
					})
					.CloseDialog()
					.NpcOption(npcDiscussLine, delegate
					{
						if (Hero.OneToOneConversationHero != this.QuestGiver)
						{
							return false;
						}
						if (!changeDialogAfterTransfer)
						{
							npcDiscussLine.SetTextVariable("MANUAL_LABORERS_QUEST_NOTABLE_DISCUSS", new TextObject("{=B0YOpGsZ}Any news about my prisoners?[if:convo_mocking_teasing][ib:hip]", null));
						}
						else
						{
							npcDiscussLine.SetTextVariable("MANUAL_LABORERS_QUEST_NOTABLE_DISCUSS", new TextObject("{=ds294zxi}Anything else?", null));
							changeDialogAfterTransfer = false;
						}
						return true;
					}, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=QbaOoilS}Yes, I have brought you a few men.", null), null)
					.Condition(() => this.CheckIfThereIsSuitablePrisonerInPlayer() && !this._playerReachedMaximumAmount)
					.NpcLine(npcResponseLine, null, null)
					.Condition(delegate
					{
						if (this._playerReachedMaximumAmount)
						{
							return false;
						}
						if ((float)this._deliveredPrisonerCount < (float)this._maximumPrisonerCount * 0.75f)
						{
							npcResponseLine.SetTextVariable("MANUAL_LABORERS_QUEST_NOTABLE_RESPONSE", new TextObject("{=0ewaZnfe}Very good. Keep them coming.[if:convo_mocking_aristocratic]", null));
						}
						else
						{
							TextObject textObject = new TextObject("{=CBBPWMZd}Thanks to you, my mines are full {?PLAYER.GENDER}madam{?}sir{\\?}. I will only buy {X} more then we're done.", null);
							textObject.SetTextVariable("X", this._maximumPrisonerCount - this._deliveredPrisonerCount);
							npcResponseLine.SetTextVariable("MANUAL_LABORERS_QUEST_NOTABLE_RESPONSE", textObject);
							changeDialogAfterTransfer = false;
						}
						return true;
					})
					.PlayerLine(new TextObject("{=IULW8h03}Sure.", null), null)
					.Consequence(delegate
					{
						changeDialogAfterTransfer = true;
						this.OpenPrisonerDeliveryScreen();
					})
					.NpcLine(new TextObject("{=!}Party screen goes here.", null), null, null)
					.GotoDialogState("quest_discuss")
					.PlayerOption(new TextObject("{=UOE7ejgq}Here is all I've got. Let's settle up and finish this business.", null), null)
					.Condition(() => !this._playerReachedMaximumAmount && this._deliveredPrisonerCount >= this._requestedPrisonerCount)
					.NpcLine(new TextObject("{=YZ6UmX5o}Certainly. Here is your payment as I promised. Thank you.[if:convo_mocking_teasing][ib:confident3]", null), null, null)
					.Consequence(delegate
					{
						this.ApplyQuestSuccessConsequences();
						this.CompleteQuestWithSuccess();
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=wErSpkjy}I'm still working on it.", null), null)
					.NpcLine(new TextObject("{=oiLdjqwe}I am glad to hear that.[if:convo_nonchalant]", null), null, null)
					.CloseDialog()
					.EndPlayerOptions();
				if (this.IsQuestWithCounterOffer)
				{
					this.QuestCharacterDialogFlow = this.GetCounterOfferDialogFlow();
				}
			}

			private void OpenPrisonerDeliveryScreen()
			{
				PartyScreenManager.OpenScreenWithCondition(new IsTroopTransferableDelegate(this.IsTroopTransferable), new PartyPresentationDoneButtonConditionDelegate(this.DoneButtonCondition), new PartyPresentationDoneButtonDelegate(this.OnDoneClicked), new PartyPresentationCancelButtonDelegate(this.OnCancelClicked), PartyScreenLogic.TransferState.NotTransferable, PartyScreenLogic.TransferState.Transferable, base.QuestGiver.Name, 150, false, false, PartyScreenMode.PrisonerManage, null, null);
			}

			private void OnCancelClicked()
			{
				Campaign.Current.ConversationManager.ContinueConversation();
			}

			private Tuple<bool, TextObject> DoneButtonCondition(TroopRoster leftMemberRoster, TroopRoster leftPrisonRoster, TroopRoster rightMemberRoster, TroopRoster rightPrisonRoster, int leftLimitNum, int rightLimitNum)
			{
				if (this._maximumPrisonerCount - this._deliveredPrisonerCount < leftPrisonRoster.TotalManCount)
				{
					int num = this._maximumPrisonerCount - this._deliveredPrisonerCount;
					TextObject textObject = new TextObject("{=bgXebaRF}You can only transfer {X} prisoner{?IS_PLURAL}s{?}{\\?}.", null);
					textObject.SetTextVariable("IS_PLURAL", (num > 1) ? 1 : 0);
					textObject.SetTextVariable("X", num);
					return new Tuple<bool, TextObject>(false, textObject);
				}
				return new Tuple<bool, TextObject>(true, null);
			}

			private bool OnDoneClicked(TroopRoster leftMemberRoster, TroopRoster leftPrisonRoster, TroopRoster rightMemberRoster, TroopRoster rightPrisonRoster, FlattenedTroopRoster takenPrisonerRoster, FlattenedTroopRoster releasedPrisonerRoster, bool isForced, PartyBase leftParty, PartyBase rightParty)
			{
				foreach (TroopRosterElement troopRosterElement in leftPrisonRoster.GetTroopRoster())
				{
					this._rewardGold += Campaign.Current.Models.RansomValueCalculationModel.PrisonerRansomValue(troopRosterElement.Character, Hero.MainHero) * troopRosterElement.Number * 5;
					this._deliveredPrisonerCount += troopRosterElement.Number;
				}
				this._questProgressLogTest.UpdateCurrentProgress(this._deliveredPrisonerCount);
				this._questProgressLogTest.TaskName.SetTextVariable("TOTAL_REWARD", this._rewardGold);
				if (this._deliveredPrisonerCount == this._maximumPrisonerCount)
				{
					this._playerReachedMaximumAmount = true;
				}
				Campaign.Current.ConversationManager.ContinueConversation();
				return true;
			}

			private bool IsTroopTransferable(CharacterObject character, PartyScreenLogic.TroopType type, PartyScreenLogic.PartyRosterSide side, PartyBase leftOwnerParty)
			{
				return side == PartyScreenLogic.PartyRosterSide.Left || (this._maximumPrisonerCount - this._deliveredPrisonerCount >= 0 && MobileParty.MainParty.PrisonRoster.Contains(character) && character.Occupation == Occupation.Bandit);
			}

			private bool CheckIfThereIsSuitablePrisonerInPlayer()
			{
				bool flag = false;
				using (List<TroopRosterElement>.Enumerator enumerator = MobileParty.MainParty.PrisonRoster.GetTroopRoster().GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						if (enumerator.Current.Character.Occupation == Occupation.Bandit)
						{
							flag = true;
							break;
						}
					}
				}
				return flag;
			}

			private void ApplyQuestSuccessConsequences()
			{
				if (this._shareProfit)
				{
					base.AddLog(this.QuestSuccessWithProfitShareLog, false);
					TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
					{
						new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
					});
					GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this._rewardGold / 2, false);
					if (this.IsQuestWithCounterOffer)
					{
						base.QuestGiver.CurrentSettlement.Notables.First((Hero x) => x.IsHeadman).AddPower(5f);
					}
				}
				else
				{
					base.AddLog(this.QuestSuccessLog, false);
					TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
					{
						new Tuple<TraitObject, int>(DefaultTraits.Honor, 30),
						new Tuple<TraitObject, int>(DefaultTraits.Mercy, -20)
					});
					GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this._rewardGold, false);
					if (this.IsQuestWithCounterOffer && this._counterOfferGiven)
					{
						ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver.CurrentSettlement.Notables.First((Hero x) => x.IsHeadman), -5, true, true);
						base.QuestGiver.CurrentSettlement.Notables.First((Hero x) => x.IsHeadman).AddPower(-10f);
					}
				}
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = 5;
			}

			private void QuestFailPlayerAcceptedCounterOffer()
			{
				base.AddLog(this.QuestFailPlayerAcceptedCounterOfferLog, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Mercy, 20),
					new Tuple<TraitObject, int>(DefaultTraits.Generosity, 20),
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				base.QuestGiver.AddPower(-10f);
				this.RelationshipChangeWithQuestGiver = -3;
				Hero hero = base.QuestGiver.CurrentSettlement.Notables.First((Hero x) => x.IsHeadman);
				hero.AddPower(10f);
				ChangeRelationAction.ApplyPlayerRelation(hero, 5, true, true);
				base.CompleteQuestWithFail(null);
			}

			protected override void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
			{
				if (this._deliveredPrisonerCount >= this._requestedPrisonerCount)
				{
					completeWithSuccess = true;
					this.ApplyQuestSuccessConsequences();
				}
			}

			protected override void OnTimedOut()
			{
				base.AddLog(this.QuestFailedWithTimeOutLogText, false);
				base.QuestGiver.AddPower(-10f);
				this.RelationshipChangeWithQuestGiver = -5;
			}

			protected override void HourlyTick()
			{
			}

			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.OnClanChangedKingdomEvent.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.VillageBeingRaided.AddNonSerializedListener(this, new Action<Village>(this.OnVillageRaided));
				CampaignEvents.GameMenuOpened.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.OnGameMenuOpened));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			private void OnGameMenuOpened(MenuCallbackArgs args)
			{
				if (this.IsQuestWithCounterOffer && !this._counterOfferGiven && args.MenuContext.GameMenu.StringId == "village" && Settlement.CurrentSettlement == base.QuestGiver.CurrentSettlement && Campaign.Current.GameMenuManager.NextLocation == null && GameStateManager.Current.ActiveState is MapState && PlayerEncounter.EncounterSettlement != null && this.CheckIfThereIsSuitablePrisonerInPlayer())
				{
					Hero hero = base.QuestGiver.CurrentSettlement.Notables.First((Hero x) => x.IsHeadman);
					CampaignMapConversation.OpenConversation(new ConversationCharacterData(CharacterObject.PlayerCharacter, PartyBase.MainParty, false, false, false, false, false, false), new ConversationCharacterData(hero.CharacterObject, null, false, false, false, false, false, false));
				}
			}

			private void OnVillageRaided(Village village)
			{
				if (village == base.QuestGiver.CurrentSettlement.Village)
				{
					base.AddLog(this.QuestGiverVillageRaided, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this.QuestCanceledWarDeclaredLog);
				}
			}

			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.PlayerDeclaredWarQuestLogText, this.QuestCanceledWarDeclaredLog, false);
			}

			protected override void OnFinalize()
			{
			}

			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			private const int MaximumPrisonerLimitMinValue = 40;

			private const int MaximumPrisonerLimitMaxValue = 60;

			[SaveableField(1)]
			private int _requestedPrisonerCount;

			[SaveableField(2)]
			private bool _shareProfit;

			[SaveableField(4)]
			private bool _counterOfferGiven;

			[SaveableField(5)]
			private int _deliveredPrisonerCount;

			[SaveableField(6)]
			private int _rewardGold;

			[SaveableField(8)]
			private int _maximumPrisonerCount;

			[SaveableField(9)]
			private bool _playerReachedMaximumAmount;

			[SaveableField(7)]
			private JournalLog _questProgressLogTest;
		}

		public class LandLordNeedsManualLaborersIssueBehaviorTypeDefiner : SaveableTypeDefiner
		{
			public LandLordNeedsManualLaborersIssueBehaviorTypeDefiner()
				: base(810000)
			{
			}

			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssue), 1, null);
				base.AddClassDefinition(typeof(LandLordNeedsManualLaborersIssueBehavior.LandLordNeedsManualLaborersIssueQuest), 2, null);
			}
		}
	}
}
