using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Settlements.Locations;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x020002FD RID: 765
	public class IssueManager : CampaignEventReceiver
	{
		// Token: 0x06002C3A RID: 11322 RVA: 0x000B8A2D File Offset: 0x000B6C2D
		internal static void AutoGeneratedStaticCollectObjectsIssueManager(object o, List<object> collectedObjects)
		{
			((IssueManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06002C3B RID: 11323 RVA: 0x000B8A3B File Offset: 0x000B6C3B
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._issues);
			collectedObjects.Add(this._issuesCoolDownData);
			collectedObjects.Add(this._issuesWaitingForPlayerCaptivity);
		}

		// Token: 0x06002C3C RID: 11324 RVA: 0x000B8A61 File Offset: 0x000B6C61
		internal static object AutoGeneratedGetMemberValue_nextIssueUniqueIndex(object o)
		{
			return ((IssueManager)o)._nextIssueUniqueIndex;
		}

		// Token: 0x06002C3D RID: 11325 RVA: 0x000B8A73 File Offset: 0x000B6C73
		internal static object AutoGeneratedGetMemberValue_issues(object o)
		{
			return ((IssueManager)o)._issues;
		}

		// Token: 0x06002C3E RID: 11326 RVA: 0x000B8A80 File Offset: 0x000B6C80
		internal static object AutoGeneratedGetMemberValue_issuesCoolDownData(object o)
		{
			return ((IssueManager)o)._issuesCoolDownData;
		}

		// Token: 0x06002C3F RID: 11327 RVA: 0x000B8A8D File Offset: 0x000B6C8D
		internal static object AutoGeneratedGetMemberValue_issuesWaitingForPlayerCaptivity(object o)
		{
			return ((IssueManager)o)._issuesWaitingForPlayerCaptivity;
		}

		// Token: 0x17000ACC RID: 2764
		// (get) Token: 0x06002C40 RID: 11328 RVA: 0x000B8A9A File Offset: 0x000B6C9A
		public IEnumerable<Hero> IssueSolvingCompanionList
		{
			get
			{
				foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
				{
					if (keyValuePair.Value.IsSolvingWithAlternative)
					{
						yield return keyValuePair.Value.AlternativeSolutionHero;
					}
				}
				Dictionary<Hero, IssueBase>.Enumerator enumerator = default(Dictionary<Hero, IssueBase>.Enumerator);
				yield break;
				yield break;
			}
		}

		// Token: 0x06002C41 RID: 11329 RVA: 0x000B8AAA File Offset: 0x000B6CAA
		public IssueManager()
		{
			this._issues = new Dictionary<Hero, IssueBase>();
			this._issuesCoolDownData = new Dictionary<string, List<IssueCoolDownData>>();
			this._issueArgs = new Dictionary<Hero, List<PotentialIssueData>>();
			this.Initialize();
		}

		// Token: 0x06002C42 RID: 11330 RVA: 0x000B8AE4 File Offset: 0x000B6CE4
		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this._issueArgs = new Dictionary<Hero, List<PotentialIssueData>>();
			this.Initialize();
		}

		// Token: 0x06002C43 RID: 11331 RVA: 0x000B8AF7 File Offset: 0x000B6CF7
		private void Initialize()
		{
			this.Issues = this._issues.GetReadOnlyDictionary<Hero, IssueBase>();
			this.AssignIssuesToHeroes();
		}

		// Token: 0x06002C44 RID: 11332 RVA: 0x000B8B10 File Offset: 0x000B6D10
		private void AssignIssuesToHeroes()
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this._issues)
			{
				keyValuePair.Key.OnIssueCreatedForHero(keyValuePair.Value);
			}
		}

		// Token: 0x06002C45 RID: 11333 RVA: 0x000B8B70 File Offset: 0x000B6D70
		public void InitializeForSavedGame()
		{
			if (this._issuesWaitingForPlayerCaptivity == null)
			{
				this._issuesWaitingForPlayerCaptivity = new List<IssueBase>();
			}
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this._issues.ToList<KeyValuePair<Hero, IssueBase>>())
			{
				IssueBase value = keyValuePair.Value;
				if (value == null)
				{
					this._issues.Remove(keyValuePair.Key);
				}
				else
				{
					value.InitializeIssueBaseOnLoad();
					if (value.IssueOwner != keyValuePair.Key)
					{
						Debug.FailedAssert("Issue owner is not the same as key!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Issues\\IssueManager.cs", "InitializeForSavedGame", 106);
					}
				}
			}
			this.ExpireInvalidData();
		}

		// Token: 0x06002C46 RID: 11334 RVA: 0x000B8C28 File Offset: 0x000B6E28
		public bool CreateNewIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			PotentialIssueData potentialIssueData = pid;
			IssueBase issueBase = potentialIssueData.OnStartIssue(pid, issueOwner);
			issueBase.StringId = "issue_" + this._nextIssueUniqueIndex;
			this._nextIssueUniqueIndex++;
			issueBase.AfterCreation();
			this._issues.Add(issueOwner, issueBase);
			issueOwner.OnIssueCreatedForHero(issueBase);
			if (issueOwner.PartyBelongedTo != null)
			{
				issueBase.AddTrackedObject(issueOwner.PartyBelongedTo);
			}
			CampaignEventDispatcher.Instance.OnNewIssueCreated(issueBase);
			return true;
		}

		// Token: 0x06002C47 RID: 11335 RVA: 0x000B8CAE File Offset: 0x000B6EAE
		public bool StartIssueQuest(Hero issueOwner)
		{
			if (this.Issues[issueOwner].StartIssueWithQuest())
			{
				return true;
			}
			this.Issues[issueOwner].CompleteIssueWithStayAliveConditionsFailed();
			return false;
		}

		// Token: 0x06002C48 RID: 11336 RVA: 0x000B8CD8 File Offset: 0x000B6ED8
		public void DeactivateIssue(IssueBase issue)
		{
			if (issue.IssueQuest == null)
			{
				issue.IssueOwner.OnIssueDeactivatedForHero();
				Campaign.Current.ConversationManager.RemoveRelatedLines(issue);
				if (this.Issues.ContainsKey(issue.IssueOwner))
				{
					this._issues.Remove(issue.IssueOwner);
				}
				return;
			}
			QuestBase issueQuest = issue.IssueQuest;
			if (issueQuest == null)
			{
				return;
			}
			issueQuest.CompleteQuestWithCancel(null);
		}

		// Token: 0x06002C49 RID: 11337 RVA: 0x000B8D40 File Offset: 0x000B6F40
		public void ChangeIssueOwner(IssueBase issue, Hero newOwner)
		{
			Hero issueOwner = issue.IssueOwner;
			issueOwner.OnIssueDeactivatedForHero();
			newOwner.OnIssueCreatedForHero(issue);
			issue.IssueOwner = newOwner;
			this._issues.Remove(issueOwner);
			this._issues.Add(newOwner, issue);
			CampaignEventDispatcher.Instance.OnIssueOwnerChanged(issue, issueOwner);
		}

		// Token: 0x06002C4A RID: 11338 RVA: 0x000B8D90 File Offset: 0x000B6F90
		private void PrepareIssueArguments(Hero hero)
		{
			List<PotentialIssueData> list;
			if (this._issueArgs.TryGetValue(hero, out list))
			{
				list.Clear();
				return;
			}
			this._issueArgs.Add(hero, new List<PotentialIssueData>());
		}

		// Token: 0x06002C4B RID: 11339 RVA: 0x000B8DC5 File Offset: 0x000B6FC5
		public void AddPotentialIssueData(Hero hero, PotentialIssueData issueData)
		{
			this._issueArgs[hero].Add(issueData);
		}

		// Token: 0x06002C4C RID: 11340 RVA: 0x000B8DD9 File Offset: 0x000B6FD9
		private List<PotentialIssueData> GetPotentialIssues(Hero hero)
		{
			return this._issueArgs[hero];
		}

		// Token: 0x06002C4D RID: 11341 RVA: 0x000B8DE7 File Offset: 0x000B6FE7
		public List<PotentialIssueData> CheckForIssues(Hero issueOwner)
		{
			this.PrepareIssueArguments(issueOwner);
			if (!this.Issues.ContainsKey(issueOwner))
			{
				CampaignEventDispatcher.Instance.OnCheckForIssue(issueOwner);
			}
			return this.GetPotentialIssues(issueOwner);
		}

		// Token: 0x06002C4E RID: 11342 RVA: 0x000B8E10 File Offset: 0x000B7010
		public override void DailyTick()
		{
			this.ExpireInvalidData();
			List<IssueBase> list = new List<IssueBase>();
			List<IssueBase> list2 = new List<IssueBase>();
			List<IssueBase> list3 = new List<IssueBase>();
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				IssueBase value = keyValuePair.Value;
				bool flag = false;
				if (value.IsSolvingWithAlternative)
				{
					if (value.AlternativeSolutionReturnTimeForTroops.IsPast)
					{
						if (!this._issuesWaitingForPlayerCaptivity.Contains(value))
						{
							if (Hero.MainHero.IsPrisoner)
							{
								this._issuesWaitingForPlayerCaptivity.Add(value);
							}
							else
							{
								list2.Add(value);
							}
						}
					}
					else
					{
						if ((int)value.AlternativeSolutionIssueEffectClearTime.ToDays == (int)CampaignTime.Now.ToDays)
						{
							value.OnAlternativeSolutionSolvedAndTroopsAreReturning();
						}
						JournalLog journalLog = value.JournalEntries[0];
						int num = ((journalLog.CurrentProgress + 1 > journalLog.Range) ? journalLog.Range : (journalLog.CurrentProgress + 1));
						journalLog.UpdateCurrentProgress(num);
					}
				}
				if (value.IsOngoingWithoutQuest && !value.IssueStayAliveConditions())
				{
					list3.Add(value);
					flag = true;
				}
				if (value.IssueDueTime.IsPast && value.IsOngoingWithoutQuest && !flag && MBRandom.RandomFloat <= 0.2f)
				{
					list.Add(value);
				}
			}
			foreach (IssueBase issueBase in list2)
			{
				issueBase.CompleteIssueWithAlternativeSolution();
			}
			foreach (IssueBase issueBase2 in list)
			{
				issueBase2.CompleteIssueWithTimedOut();
			}
			foreach (IssueBase issueBase3 in list3)
			{
				issueBase3.CompleteIssueWithStayAliveConditionsFailed();
			}
		}

		// Token: 0x06002C4F RID: 11343 RVA: 0x000B9070 File Offset: 0x000B7270
		public override void HourlyTick()
		{
			if (!Hero.MainHero.IsPrisoner && this._issuesWaitingForPlayerCaptivity.Count > 0)
			{
				TextObject textObject = new TextObject("{=l0NTCps3}As you emerge from captivity, {COMPANION.NAME} is waiting outside and greets you. {?COMPANION.GENDER}She{?}He{\\?} says {?COMPANION.GENDER}she{?}he{\\?} has returned from {?COMPANION.GENDER}her{?}his{\\?} mission with {NUMBER} {?(NUMBER > 1)}troops{?}troop{\\?} and they are all ready to rejoin your party.", null);
				for (int i = this._issuesWaitingForPlayerCaptivity.Count - 1; i >= 0; i--)
				{
					IssueBase item = this._issuesWaitingForPlayerCaptivity[i];
					this._issuesWaitingForPlayerCaptivity.RemoveAt(i);
					StringHelpers.SetCharacterProperties("COMPANION", item.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("NUMBER", item.AlternativeSolutionSentTroops.TotalManCount);
					InformationManager.ShowInquiry(new InquiryData(string.Empty, textObject.ToString(), true, false, GameTexts.FindText("str_ok", null).ToString(), null, delegate
					{
						item.CompleteIssueWithAlternativeSolution();
					}, null, "", 0f, null, null, null), true, false);
				}
			}
		}

		// Token: 0x06002C50 RID: 11344 RVA: 0x000B9168 File Offset: 0x000B7368
		private void ExpireInvalidData()
		{
			foreach (KeyValuePair<string, List<IssueCoolDownData>> keyValuePair in this._issuesCoolDownData)
			{
				List<IssueCoolDownData> list = new List<IssueCoolDownData>();
				foreach (IssueCoolDownData issueCoolDownData in keyValuePair.Value)
				{
					if (!issueCoolDownData.IsValid())
					{
						list.Add(issueCoolDownData);
					}
				}
				foreach (IssueCoolDownData issueCoolDownData2 in list)
				{
					keyValuePair.Value.Remove(issueCoolDownData2);
				}
			}
		}

		// Token: 0x06002C51 RID: 11345 RVA: 0x000B9254 File Offset: 0x000B7454
		public bool IsThereActiveIssueWithTypeInSettlement(Type type, Settlement settlement)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				if (keyValuePair.Value.GetType() == type && keyValuePair.Value.IssueSettlement == settlement)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x06002C52 RID: 11346 RVA: 0x000B92CC File Offset: 0x000B74CC
		public int GetNumOfAvailableIssuesInSettlement(Settlement settlement)
		{
			List<IssueBase> list = new List<IssueBase>();
			int num = 0;
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				int num2 = ((keyValuePair.Value.IsSolvingWithAlternative || keyValuePair.Value.IsSolvingWithLordSolution || keyValuePair.Value.IsSolvingWithQuest) ? 1 : 0);
				bool flag = keyValuePair.Value.IssueSettlement == settlement || keyValuePair.Value.IssueOwner.CurrentSettlement == settlement;
				if (num2 == 0 && flag && keyValuePair.Value.IssueQuest == null)
				{
					if (keyValuePair.Value.IssueStayAliveConditions())
					{
						num++;
					}
					else if (keyValuePair.Value.IsOngoingWithoutQuest)
					{
						list.Add(keyValuePair.Value);
					}
				}
			}
			foreach (IssueBase issueBase in list)
			{
				issueBase.CompleteIssueWithStayAliveConditionsFailed();
			}
			return num;
		}

		// Token: 0x06002C53 RID: 11347 RVA: 0x000B93FC File Offset: 0x000B75FC
		public int GetNumOfActiveIssuesInSettlement(Settlement settlement, bool includeQuests)
		{
			int num = 0;
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				bool flag = keyValuePair.Value.IsSolvingWithAlternative || keyValuePair.Value.IsSolvingWithLordSolution || keyValuePair.Value.IsSolvingWithQuest;
				bool flag2 = keyValuePair.Value.IssueSettlement == settlement || keyValuePair.Value.IssueOwner.CurrentSettlement == settlement;
				if (flag && flag2 && includeQuests == (keyValuePair.Value.IssueQuest != null))
				{
					num++;
				}
			}
			return num;
		}

		// Token: 0x06002C54 RID: 11348 RVA: 0x000B94B8 File Offset: 0x000B76B8
		private IEnumerable<Hero> GetHeroesThatHaveIssueForSettlement(Settlement settlement)
		{
			foreach (Hero hero in settlement.HeroesWithoutParty)
			{
				if (hero.Issue != null)
				{
					yield return hero;
				}
			}
			List<Hero>.Enumerator enumerator = default(List<Hero>.Enumerator);
			foreach (MobileParty mobileParty in Settlement.CurrentSettlement.Parties)
			{
				foreach (TroopRosterElement troopRosterElement in from x in mobileParty.MemberRoster.GetTroopRoster()
					where x.Character.IsHero
					select x)
				{
					if (troopRosterElement.Character.HeroObject.Issue != null)
					{
						yield return troopRosterElement.Character.HeroObject;
					}
				}
				IEnumerator<TroopRosterElement> enumerator3 = null;
			}
			List<MobileParty>.Enumerator enumerator2 = default(List<MobileParty>.Enumerator);
			yield break;
			yield break;
		}

		// Token: 0x06002C55 RID: 11349 RVA: 0x000B94C8 File Offset: 0x000B76C8
		public GameMenuOption.IssueQuestFlags CheckIssueForMenuLocations(List<Location> currentLocations, bool getIssuesWithoutAQuest = false)
		{
			GameMenuOption.IssueQuestFlags issueQuestFlags = GameMenuOption.IssueQuestFlags.None;
			if (Settlement.CurrentSettlement == null || !this.Issues.Any<KeyValuePair<Hero, IssueBase>>())
			{
				return issueQuestFlags;
			}
			foreach (Location location in currentLocations)
			{
				foreach (LocationCharacter locationCharacter in location.GetCharacterList())
				{
					Hero heroObject = locationCharacter.Character.HeroObject;
					if (heroObject != null && heroObject.Issue != null)
					{
						if (getIssuesWithoutAQuest)
						{
							IssueBase issue = heroObject.Issue;
							if (((issue != null) ? issue.IssueQuest : null) != null)
							{
								continue;
							}
						}
						if (!(location.StringId != "prison") || !heroObject.IsPrisoner)
						{
							QuestBase issueQuest = heroObject.Issue.IssueQuest;
							if ((issueQuest != null && issueQuest.IsOngoing) || heroObject.Issue.IsSolvingWithAlternative || heroObject.Issue.IsSolvingWithLordSolution)
							{
								issueQuestFlags |= GameMenuOption.IssueQuestFlags.ActiveIssue;
							}
							else
							{
								issueQuestFlags |= GameMenuOption.IssueQuestFlags.AvailableIssue;
							}
						}
					}
				}
			}
			return issueQuestFlags;
		}

		// Token: 0x06002C56 RID: 11350 RVA: 0x000B95F4 File Offset: 0x000B77F4
		public override void OnQuestCompleted(QuestBase quest, QuestBase.QuestCompleteDetails detail)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				if (keyValuePair.Value.IssueQuest == quest)
				{
					switch (detail)
					{
					case QuestBase.QuestCompleteDetails.Success:
						keyValuePair.Value.CompleteIssueWithQuest();
						return;
					case QuestBase.QuestCompleteDetails.Cancel:
						keyValuePair.Value.CompleteIssueWithCancel(null);
						return;
					case QuestBase.QuestCompleteDetails.Fail:
						keyValuePair.Value.CompleteIssueWithFail(null);
						return;
					case QuestBase.QuestCompleteDetails.Timeout:
						keyValuePair.Value.CompleteIssueWithTimedOut();
						return;
					case QuestBase.QuestCompleteDetails.FailWithBetrayal:
						keyValuePair.Value.CompleteIssueWithBetrayal();
						return;
					default:
						keyValuePair.Value.CompleteIssueWithQuest();
						return;
					}
				}
			}
		}

		// Token: 0x06002C57 RID: 11351 RVA: 0x000B96CC File Offset: 0x000B78CC
		public override void OnSettlementEntered(MobileParty party, Settlement settlement, Hero hero)
		{
			if (party == MobileParty.MainParty)
			{
				foreach (Hero hero2 in this.GetHeroesThatHaveIssueForSettlement(Settlement.CurrentSettlement))
				{
					if (hero2.Issue.IsOngoingWithoutQuest && !hero2.Issue.IssueStayAliveConditions())
					{
						hero2.Issue.CompleteIssueWithStayAliveConditionsFailed();
					}
				}
			}
		}

		// Token: 0x06002C58 RID: 11352 RVA: 0x000B9744 File Offset: 0x000B7944
		public override void OnSettlementLeft(MobileParty party, Settlement settlement)
		{
			if (this.IssueDeactivationCommonCondition(party.LeaderHero))
			{
				party.LeaderHero.Issue.CompleteIssueWithStayAliveConditionsFailed();
			}
		}

		// Token: 0x06002C59 RID: 11353 RVA: 0x000B9764 File Offset: 0x000B7964
		public override void OnCharacterPortraitPopUpOpened(CharacterObject character)
		{
			if (this.IssueDeactivationCommonCondition(character.HeroObject))
			{
				character.HeroObject.Issue.CompleteIssueWithStayAliveConditionsFailed();
			}
		}

		// Token: 0x06002C5A RID: 11354 RVA: 0x000B9784 File Offset: 0x000B7984
		private bool IssueDeactivationCommonCondition(Hero hero)
		{
			return hero != null && hero.Issue != null && hero.Issue.IsOngoingWithoutQuest && !hero.Issue.IssueStayAliveConditions();
		}

		// Token: 0x06002C5B RID: 11355 RVA: 0x000B97B0 File Offset: 0x000B79B0
		public override void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification)
		{
			TextObject textObject;
			if (killer != null)
			{
				textObject = GameTexts.FindText("str_responsible_of_death_link_news", null);
				StringHelpers.SetCharacterProperties("HERO_1", killer.CharacterObject, textObject, false);
				StringHelpers.SetCharacterProperties("HERO_2", victim.CharacterObject, textObject, false);
			}
			else
			{
				textObject = GameTexts.FindText("str_murdered_passive_news", null);
				StringHelpers.SetCharacterProperties("HERO_2", victim.CharacterObject, textObject, false);
			}
			List<IssueBase> list = new List<IssueBase>();
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				if (keyValuePair.Key == victim)
				{
					list.Add(keyValuePair.Value);
				}
			}
			foreach (IssueBase issueBase in list)
			{
				issueBase.CompleteIssueWithCancel(textObject);
			}
		}

		// Token: 0x06002C5C RID: 11356 RVA: 0x000B98AC File Offset: 0x000B7AAC
		public override void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
		{
			if ((newOwner != null && newOwner.Clan == Clan.PlayerClan) || (oldOwner != null && oldOwner.Clan == Clan.PlayerClan))
			{
				foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
				{
					if (keyValuePair.Key.IsNotable)
					{
						if (keyValuePair.Value.IssueSettlement == settlement)
						{
							keyValuePair.Value.InitializeIssueOnSettlementOwnerChange();
						}
						if (settlement.IsFortification && keyValuePair.Value.IssueSettlement.IsVillage && keyValuePair.Value.IssueSettlement.Village.Bound == settlement)
						{
							keyValuePair.Value.InitializeIssueOnSettlementOwnerChange();
						}
					}
				}
			}
		}

		// Token: 0x06002C5D RID: 11357 RVA: 0x000B998C File Offset: 0x000B7B8C
		public void ToggleAllIssueTracks(bool enableTrack)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.ToggleTrackedObjects(enableTrack);
			}
		}

		// Token: 0x06002C5E RID: 11358 RVA: 0x000B99E8 File Offset: 0x000B7BE8
		public void AddIssueCoolDownData(Type type, IssueCoolDownData data)
		{
			string name = type.Name;
			if (!this._issuesCoolDownData.ContainsKey(name))
			{
				this._issuesCoolDownData.Add(name, new List<IssueCoolDownData>());
			}
			this._issuesCoolDownData[name].Add(data);
		}

		// Token: 0x06002C5F RID: 11359 RVA: 0x000B9A30 File Offset: 0x000B7C30
		public bool HasIssueCoolDown(Type type, Hero hero)
		{
			string name = type.Name;
			bool flag = false;
			List<IssueCoolDownData> list;
			if (this._issuesCoolDownData.TryGetValue(name, out list))
			{
				foreach (IssueCoolDownData issueCoolDownData in list)
				{
					if (issueCoolDownData.IsValid() && issueCoolDownData.IsRelatedTo(hero))
					{
						flag = true;
						break;
					}
				}
			}
			return flag;
		}

		// Token: 0x06002C60 RID: 11360 RVA: 0x000B9AAC File Offset: 0x000B7CAC
		public override void CanHaveQuestsOrIssues(Hero hero, ref bool result)
		{
			IssueBase issueBase;
			if (this.Issues.TryGetValue(hero, out issueBase))
			{
				result = false;
				return;
			}
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.OnHeroCanHaveQuestOrIssueInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
				if ((keyValuePair.Value.IsSolvingWithAlternative && keyValuePair.Value.AlternativeSolutionHero == hero) || keyValuePair.Value.CounterOfferHero == hero)
				{
					result = false;
					break;
				}
			}
		}

		// Token: 0x06002C61 RID: 11361 RVA: 0x000B9B54 File Offset: 0x000B7D54
		public override void CanHeroDie(Hero hero, KillCharacterAction.KillCharacterActionDetail causeOfDeath, ref bool result)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.OnHeroCanDieInfoIsRequested(hero, causeOfDeath, ref result);
				if (keyValuePair.Value.AlternativeSolutionHero == hero)
				{
					result = false;
				}
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06002C62 RID: 11362 RVA: 0x000B9BC8 File Offset: 0x000B7DC8
		public override void CanHeroBecomePrisoner(Hero hero, ref bool result)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.OnHeroCanBecomePrisonerInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06002C63 RID: 11363 RVA: 0x000B9C28 File Offset: 0x000B7E28
		public override void CanHeroMarry(Hero hero, ref bool result)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.OnHeroCanMarryInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06002C64 RID: 11364 RVA: 0x000B9C88 File Offset: 0x000B7E88
		public override void CanHeroEquipmentBeChanged(Hero hero, ref bool result)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.OnHeroCanBeSelectedInInventoryInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06002C65 RID: 11365 RVA: 0x000B9CE8 File Offset: 0x000B7EE8
		public override void CanHeroLeadParty(Hero hero, ref bool result)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.OnHeroCanLeadPartyInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06002C66 RID: 11366 RVA: 0x000B9D48 File Offset: 0x000B7F48
		public override void CanMoveToSettlement(Hero hero, ref bool result)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.OnHeroCanMoveToSettlementInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06002C67 RID: 11367 RVA: 0x000B9DA8 File Offset: 0x000B7FA8
		public override void CanBeGovernorOrHavePartyRole(Hero hero, ref bool result)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in this.Issues)
			{
				keyValuePair.Value.OnHeroCanHavePartyRoleOrBeGovernorInfoIsRequested(hero, ref result);
				if (!result)
				{
					break;
				}
			}
		}

		// Token: 0x06002C68 RID: 11368 RVA: 0x000B9E08 File Offset: 0x000B8008
		public static void FillIssueCountsPerSettlement(Dictionary<Settlement, int> issueCountPerSettlement)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in Campaign.Current.IssueManager.Issues)
			{
				Settlement issueSettlement = keyValuePair.Value.IssueSettlement;
				if (issueSettlement != null)
				{
					if (!issueCountPerSettlement.ContainsKey(issueSettlement))
					{
						issueCountPerSettlement[issueSettlement] = 1;
					}
					else
					{
						Settlement settlement = issueSettlement;
						issueCountPerSettlement[settlement]++;
					}
				}
			}
		}

		// Token: 0x06002C69 RID: 11369 RVA: 0x000B9E98 File Offset: 0x000B8098
		public static IEnumerable<IssueBase> GetIssuesInSettlement(Settlement settlement, bool onlyNotables = true)
		{
			foreach (Hero hero in settlement.Notables)
			{
				if (hero.Issue != null)
				{
					yield return hero.Issue;
				}
			}
			List<Hero>.Enumerator enumerator = default(List<Hero>.Enumerator);
			if (!onlyNotables)
			{
				foreach (Hero hero2 in settlement.HeroesWithoutParty)
				{
					if (hero2.Issue != null && !hero2.IsNotable)
					{
						yield return hero2.Issue;
					}
				}
				enumerator = default(List<Hero>.Enumerator);
				foreach (MobileParty settlementParty in settlement.Parties)
				{
					int num;
					for (int i = 0; i < settlementParty.MemberRoster.Count; i = num + 1)
					{
						CharacterObject characterAtIndex = settlementParty.MemberRoster.GetCharacterAtIndex(i);
						Hero hero3 = ((characterAtIndex != null) ? characterAtIndex.HeroObject : null);
						if (hero3 != null && hero3.Issue != null)
						{
							yield return hero3.Issue;
						}
						num = i;
					}
					settlementParty = null;
				}
				List<MobileParty>.Enumerator enumerator2 = default(List<MobileParty>.Enumerator);
			}
			yield break;
			yield break;
		}

		// Token: 0x06002C6A RID: 11370 RVA: 0x000B9EB0 File Offset: 0x000B80B0
		public static IssueBase GetIssueOfQuest(QuestBase quest)
		{
			foreach (KeyValuePair<Hero, IssueBase> keyValuePair in Campaign.Current.IssueManager.Issues)
			{
				if (keyValuePair.Value.IssueQuest == quest)
				{
					return keyValuePair.Value;
				}
			}
			return null;
		}

		// Token: 0x06002C6B RID: 11371 RVA: 0x000B9F24 File Offset: 0x000B8124
		public static void FillIssueCountsPerClan(Dictionary<Clan, int> issueCountPerClan, IEnumerable<Clan> clans)
		{
			foreach (Clan clan in clans)
			{
				int num = 0;
				using (List<Hero>.Enumerator enumerator2 = clan.Heroes.GetEnumerator())
				{
					while (enumerator2.MoveNext())
					{
						if (enumerator2.Current.Issue != null)
						{
							num++;
						}
					}
				}
				issueCountPerClan.Add(clan, num);
			}
		}

		// Token: 0x04000D5F RID: 3423
		[SaveableField(0)]
		private int _nextIssueUniqueIndex;

		// Token: 0x04000D60 RID: 3424
		public MBReadOnlyDictionary<Hero, IssueBase> Issues;

		// Token: 0x04000D61 RID: 3425
		[SaveableField(1)]
		private readonly Dictionary<Hero, IssueBase> _issues;

		// Token: 0x04000D62 RID: 3426
		[SaveableField(2)]
		private Dictionary<string, List<IssueCoolDownData>> _issuesCoolDownData;

		// Token: 0x04000D63 RID: 3427
		[CachedData]
		private Dictionary<Hero, List<PotentialIssueData>> _issueArgs;

		// Token: 0x04000D64 RID: 3428
		[SaveableField(3)]
		private List<IssueBase> _issuesWaitingForPlayerCaptivity = new List<IssueBase>();

		// Token: 0x04000D65 RID: 3429
		public const string IssueOfferToken = "issue_offer";

		// Token: 0x04000D66 RID: 3430
		public const string HeroMainOptionsToken = "hero_main_options";

		// Token: 0x04000D67 RID: 3431
		public const string IssueClassicQuestStartToken = "issue_classic_quest_start";

		// Token: 0x04000D68 RID: 3432
		public const string IssueDiscussAlternativeSolution = "issue_discuss_alternative_solution";

		// Token: 0x04000D69 RID: 3433
		private const float IssueCancelChance = 0.2f;
	}
}
