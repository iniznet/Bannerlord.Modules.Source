using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000320 RID: 800
	public class VillageNeedsCraftingMaterialsIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D8D RID: 11661 RVA: 0x000BEBA8 File Offset: 0x000BCDA8
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D8E RID: 11662 RVA: 0x000BEBC4 File Offset: 0x000BCDC4
		private void OnCheckForIssue(Hero hero)
		{
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, this.ConditionsHold(hero) ? new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssue), IssueBase.IssueFrequency.Rare, null) : new PotentialIssueData(typeof(VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssue), IssueBase.IssueFrequency.Rare));
		}

		// Token: 0x06002D8F RID: 11663 RVA: 0x000BEC19 File Offset: 0x000BCE19
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.IsRuralNotable && !issueGiver.MapFaction.IsAtWarWith(Clan.PlayerClan);
		}

		// Token: 0x06002D90 RID: 11664 RVA: 0x000BEC38 File Offset: 0x000BCE38
		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			return new VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssue(issueOwner);
		}

		// Token: 0x06002D91 RID: 11665 RVA: 0x000BEC40 File Offset: 0x000BCE40
		private static ItemObject SelectCraftingMaterial()
		{
			int num = MBRandom.RandomInt(0, 2);
			if (num == 0)
			{
				return DefaultItems.IronIngot1;
			}
			if (num != 1)
			{
				return DefaultItems.IronIngot1;
			}
			return DefaultItems.IronIngot2;
		}

		// Token: 0x06002D92 RID: 11666 RVA: 0x000BEC6F File Offset: 0x000BCE6F
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x04000DB0 RID: 3504
		private const IssueBase.IssueFrequency VillageNeedsCraftingMaterialsIssueFrequency = IssueBase.IssueFrequency.Rare;

		// Token: 0x0200066F RID: 1647
		public class VillageNeedsCraftingMaterialsIssue : IssueBase
		{
			// Token: 0x06005144 RID: 20804 RVA: 0x00166001 File Offset: 0x00164201
			internal static void AutoGeneratedStaticCollectObjectsVillageNeedsCraftingMaterialsIssue(object o, List<object> collectedObjects)
			{
				((VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06005145 RID: 20805 RVA: 0x0016600F File Offset: 0x0016420F
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._requestedItem);
			}

			// Token: 0x06005146 RID: 20806 RVA: 0x00166024 File Offset: 0x00164224
			internal static object AutoGeneratedGetMemberValue_requestedItem(object o)
			{
				return ((VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssue)o)._requestedItem;
			}

			// Token: 0x06005147 RID: 20807 RVA: 0x00166031 File Offset: 0x00164231
			internal static object AutoGeneratedGetMemberValue_promisedPayment(object o)
			{
				return ((VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssue)o)._promisedPayment;
			}

			// Token: 0x17001191 RID: 4497
			// (get) Token: 0x06005148 RID: 20808 RVA: 0x00166043 File Offset: 0x00164243
			private int _numberOfRequestedItem
			{
				get
				{
					return MathF.Round((float)((int)(750f / (float)this._requestedItem.Value)) * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17001192 RID: 4498
			// (get) Token: 0x06005149 RID: 20809 RVA: 0x00166065 File Offset: 0x00164265
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return 500 + (int)(700f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17001193 RID: 4499
			// (get) Token: 0x0600514A RID: 20810 RVA: 0x0016607A File Offset: 0x0016427A
			protected override bool IssueQuestCanBeDuplicated
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001194 RID: 4500
			// (get) Token: 0x0600514B RID: 20811 RVA: 0x0016607D File Offset: 0x0016427D
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 4;
				}
			}

			// Token: 0x17001195 RID: 4501
			// (get) Token: 0x0600514C RID: 20812 RVA: 0x00166080 File Offset: 0x00164280
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return (int)(2f + 4f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x0600514D RID: 20813 RVA: 0x00166095 File Offset: 0x00164295
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.VillageHearth)
				{
					return -0.2f;
				}
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x0600514E RID: 20814 RVA: 0x001660B8 File Offset: 0x001642B8
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>(DefaultSkills.Crafting, 120);
			}

			// Token: 0x0600514F RID: 20815 RVA: 0x001660C6 File Offset: 0x001642C6
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 0, false);
			}

			// Token: 0x06005150 RID: 20816 RVA: 0x001660E8 File Offset: 0x001642E8
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.GetPayment(), false);
				this.RelationshipChangeWithIssueOwner = 5;
				base.IssueSettlement.Village.Hearth += 60f;
				base.IssueOwner.AddPower(10f);
			}

			// Token: 0x06005151 RID: 20817 RVA: 0x0016613A File Offset: 0x0016433A
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 0, false);
			}

			// Token: 0x17001196 RID: 4502
			// (get) Token: 0x06005152 RID: 20818 RVA: 0x00166152 File Offset: 0x00164352
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=eR7P1cVA}{VILLAGE} Needs Crafting Materials", null);
					textObject.SetTextVariable("VILLAGE", base.IssueOwner.CurrentSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17001197 RID: 4503
			// (get) Token: 0x06005153 RID: 20819 RVA: 0x0016617B File Offset: 0x0016437B
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=5CJrR0X3}{ISSUE_GIVER.LINK} in the village requested crafting materials for their ongoing project.", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x17001198 RID: 4504
			// (get) Token: 0x06005154 RID: 20820 RVA: 0x0016619F File Offset: 0x0016439F
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=095beaQ5}Yes, there's a lot of work we need to do around the village, and we're short on the materials that our smith needs to make us tools and fittings. Do you think you could get us some? We'll pay well.", null);
				}
			}

			// Token: 0x17001199 RID: 4505
			// (get) Token: 0x06005155 RID: 20821 RVA: 0x001661AC File Offset: 0x001643AC
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=xmu89biL}Maybe I can help. What do you need exactly?", null);
				}
			}

			// Token: 0x1700119A RID: 4506
			// (get) Token: 0x06005156 RID: 20822 RVA: 0x001661BC File Offset: 0x001643BC
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=PftlaE0x}We need {REQUESTED_ITEM_COUNT} {?(REQUESTED_ITEM_COUNT > 1)}{PLURAL(REQUESTED_ITEM)}{?}{REQUESTED_ITEM}{\\?} in {NUMBER_OF_DAYS} days. We need to repair some roofs before the next big storms. I can offer {PAYMENT}{GOLD_ICON}. What do you say?", null);
					textObject.SetTextVariable("PAYMENT", this.GetPayment());
					textObject.SetTextVariable("REQUESTED_ITEM", this._requestedItem.Name);
					textObject.SetTextVariable("REQUESTED_ITEM_COUNT", this._numberOfRequestedItem);
					textObject.SetTextVariable("NUMBER_OF_DAYS", 30);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x1700119B RID: 4507
			// (get) Token: 0x06005157 RID: 20823 RVA: 0x0016622E File Offset: 0x0016442E
			public override TextObject IssuePlayerResponseAfterAlternativeExplanation
			{
				get
				{
					return new TextObject("{=i96OaGH3}Is there anything else I could do to help?", null);
				}
			}

			// Token: 0x1700119C RID: 4508
			// (get) Token: 0x06005158 RID: 20824 RVA: 0x0016623B File Offset: 0x0016443B
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=WzdhPF7M}Well, if we had some extra skilled labor, we could probably melt down old tools and reforge them. That's too much work for just our smith by himself, but maybe he could do it with someone proficient in crafting to help him.", null);
				}
			}

			// Token: 0x1700119D RID: 4509
			// (get) Token: 0x06005159 RID: 20825 RVA: 0x00166248 File Offset: 0x00164448
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=WsmH9Cfd}I will provide what you need.", null);
				}
			}

			// Token: 0x1700119E RID: 4510
			// (get) Token: 0x0600515A RID: 20826 RVA: 0x00166255 File Offset: 0x00164455
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=8DWTTnpP}My comrade will help your smith to produce what you need.", null);
				}
			}

			// Token: 0x1700119F RID: 4511
			// (get) Token: 0x0600515B RID: 20827 RVA: 0x00166262 File Offset: 0x00164462
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=xlagNKZ2}Thank you. With their help, we should be able to make what we need.", null);
				}
			}

			// Token: 0x170011A0 RID: 4512
			// (get) Token: 0x0600515C RID: 20828 RVA: 0x0016626F File Offset: 0x0016446F
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=P3Uu0Ham}Your companion is still working with our smith. I hope they will finish the order in time.", null);
				}
			}

			// Token: 0x170011A1 RID: 4513
			// (get) Token: 0x0600515D RID: 20829 RVA: 0x0016627C File Offset: 0x0016447C
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x170011A2 RID: 4514
			// (get) Token: 0x0600515E RID: 20830 RVA: 0x0016627F File Offset: 0x0016447F
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x170011A3 RID: 4515
			// (get) Token: 0x0600515F RID: 20831 RVA: 0x00166282 File Offset: 0x00164482
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Duration;
				}
			}

			// Token: 0x170011A4 RID: 4516
			// (get) Token: 0x06005160 RID: 20832 RVA: 0x00166288 File Offset: 0x00164488
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=1XuYGQcT}{ISSUE_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}her{?}his{\\?} local smith needs {REQUESTED_ITEM} to forge more tools. You asked your companion {COMPANION.LINK} to help the local smith and craft {REQUESTED_ITEM_COUNT} {?(REQUESTED_ITEM_COUNT > 1)}{PLURAL(REQUESTED_ITEM)}{?}{REQUESTED_ITEM}{\\?} for the village. Your companion will rejoin your party in {RETURN_DAYS} days.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("REQUESTED_ITEM", this._requestedItem.Name);
					textObject.SetTextVariable("REQUESTED_ITEM_COUNT", this._numberOfRequestedItem);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			// Token: 0x170011A5 RID: 4517
			// (get) Token: 0x06005161 RID: 20833 RVA: 0x0016632C File Offset: 0x0016452C
			public override TextObject IssueAlternativeSolutionSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=n86jgG3m}Your companion {COMPANION.LINK} has helped the local smith and produced {REQUESTED_AMOUNT} {?(REQUESTED_AMOUNT > 1)}{PLURAL(REQUESTED_GOOD)}{?}{REQUESTED_GOOD}{\\?} as you promised.", null);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("REQUESTED_AMOUNT", this._numberOfRequestedItem);
					textObject.SetTextVariable("REQUESTED_GOOD", this._requestedItem.Name);
					return textObject;
				}
			}

			// Token: 0x06005162 RID: 20834 RVA: 0x00166387 File Offset: 0x00164587
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06005163 RID: 20835 RVA: 0x00166389 File Offset: 0x00164589
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(30f), this.GetPayment(), this._requestedItem, this._numberOfRequestedItem);
			}

			// Token: 0x06005164 RID: 20836 RVA: 0x001663B3 File Offset: 0x001645B3
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Rare;
			}

			// Token: 0x06005165 RID: 20837 RVA: 0x001663B6 File Offset: 0x001645B6
			public override void AlternativeSolutionStartConsequence()
			{
				this._promisedPayment = this.GetPayment();
			}

			// Token: 0x06005166 RID: 20838 RVA: 0x001663C4 File Offset: 0x001645C4
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flags, out Hero relationHero, out SkillObject skill)
			{
				flags = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flags |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.MapFaction, Hero.MainHero.MapFaction))
				{
					flags |= IssueBase.PreconditionFlags.AtWar;
				}
				return flags == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06005167 RID: 20839 RVA: 0x00166414 File Offset: 0x00164614
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x06005168 RID: 20840 RVA: 0x00166416 File Offset: 0x00164616
			public override bool IssueStayAliveConditions()
			{
				return !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid;
			}

			// Token: 0x06005169 RID: 20841 RVA: 0x0016643F File Offset: 0x0016463F
			public VillageNeedsCraftingMaterialsIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
				this._requestedItem = VillageNeedsCraftingMaterialsIssueBehavior.SelectCraftingMaterial();
			}

			// Token: 0x0600516A RID: 20842 RVA: 0x00166460 File Offset: 0x00164660
			private int GetPayment()
			{
				if (this._promisedPayment != 0)
				{
					return this._promisedPayment;
				}
				return 750 + (base.IssueSettlement.Village.Bound.Town.MarketData.GetPrice(this._requestedItem, null, false, null) + QuestHelper.GetAveragePriceOfItemInTheWorld(this._requestedItem) / 2) * this._numberOfRequestedItem;
			}

			// Token: 0x04001AFF RID: 6911
			private const int TimeLimit = 30;

			// Token: 0x04001B00 RID: 6912
			private const int PowerChangeForQuestGiver = 10;

			// Token: 0x04001B01 RID: 6913
			private const int RelationWithIssueOwnerRewardOnSuccess = 5;

			// Token: 0x04001B02 RID: 6914
			private const int VillageHeartChangeOnAlternativeSuccess = 60;

			// Token: 0x04001B03 RID: 6915
			private const int RequiredSkillValueForAlternativeSolution = 120;

			// Token: 0x04001B04 RID: 6916
			[SaveableField(1)]
			private readonly ItemObject _requestedItem;

			// Token: 0x04001B05 RID: 6917
			[SaveableField(4)]
			private int _promisedPayment;
		}

		// Token: 0x02000670 RID: 1648
		public class VillageNeedsCraftingMaterialsIssueQuest : QuestBase
		{
			// Token: 0x0600516B RID: 20843 RVA: 0x001664BF File Offset: 0x001646BF
			internal static void AutoGeneratedStaticCollectObjectsVillageNeedsCraftingMaterialsIssueQuest(object o, List<object> collectedObjects)
			{
				((VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x0600516C RID: 20844 RVA: 0x001664CD File Offset: 0x001646CD
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._requestedItem);
				collectedObjects.Add(this._playerAcceptedQuestLog);
				collectedObjects.Add(this._playerHasNeededItemsLog);
			}

			// Token: 0x0600516D RID: 20845 RVA: 0x001664FA File Offset: 0x001646FA
			internal static object AutoGeneratedGetMemberValue_requestedItemAmount(object o)
			{
				return ((VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssueQuest)o)._requestedItemAmount;
			}

			// Token: 0x0600516E RID: 20846 RVA: 0x0016650C File Offset: 0x0016470C
			internal static object AutoGeneratedGetMemberValue_requestedItem(object o)
			{
				return ((VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssueQuest)o)._requestedItem;
			}

			// Token: 0x0600516F RID: 20847 RVA: 0x00166519 File Offset: 0x00164719
			internal static object AutoGeneratedGetMemberValue_playerAcceptedQuestLog(object o)
			{
				return ((VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssueQuest)o)._playerAcceptedQuestLog;
			}

			// Token: 0x06005170 RID: 20848 RVA: 0x00166526 File Offset: 0x00164726
			internal static object AutoGeneratedGetMemberValue_playerHasNeededItemsLog(object o)
			{
				return ((VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssueQuest)o)._playerHasNeededItemsLog;
			}

			// Token: 0x170011A6 RID: 4518
			// (get) Token: 0x06005171 RID: 20849 RVA: 0x00166534 File Offset: 0x00164734
			private TextObject QuestStartedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=YZeKScP5}{QUEST_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}her{?}his{\\?} local smith needs {REQUESTED_ITEM} to forge more tools. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to bring {REQUESTED_ITEM_AMOUNT} {?(REQUESTED_ITEM_AMOUNT > 1)}{PLURAL(REQUESTED_ITEM)}{?}{REQUESTED_ITEM}{\\?} to {?QUEST_GIVER.GENDER}her{?}him{\\?}.", null);
					textObject.SetTextVariable("REQUESTED_ITEM_AMOUNT", this._requestedItemAmount);
					textObject.SetTextVariable("REQUESTED_ITEM", this._requestedItem.Name);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170011A7 RID: 4519
			// (get) Token: 0x06005172 RID: 20850 RVA: 0x00166590 File Offset: 0x00164790
			private TextObject QuestSuccessLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=LiDSTrvV}You brought {REQUESTED_ITEM_AMOUNT} {?(REQUESTED_ITEM_AMOUNT > 1)}{PLURAL(REQUESTED_ITEM)}{?}{REQUESTED_ITEM}{\\?} to {?QUEST_GIVER.GENDER}her{?}him{\\?} as promised.", null);
					textObject.SetTextVariable("REQUESTED_ITEM_AMOUNT", this._requestedItemAmount);
					textObject.SetTextVariable("REQUESTED_ITEM", this._requestedItem.Name);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170011A8 RID: 4520
			// (get) Token: 0x06005173 RID: 20851 RVA: 0x001665EC File Offset: 0x001647EC
			private TextObject QuestCanceledWarDeclaredLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=vW6kBki9}Your clan is now at war with {QUEST_GIVER.LINK}'s realm. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170011A9 RID: 4521
			// (get) Token: 0x06005174 RID: 20852 RVA: 0x00166620 File Offset: 0x00164820
			private TextObject QuestGiverVillageRaidedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=gJG0xmAq}{QUEST_GIVER.LINK}'s village {QUEST_SETTLEMENT} was raided. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x170011AA RID: 4522
			// (get) Token: 0x06005175 RID: 20853 RVA: 0x00166670 File Offset: 0x00164870
			private TextObject QuestFailedWithTimeOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=xvCzjcjU}You failed to deliver {REQUESTED_ITEM_AMOUNT} {?(REQUESTED_ITEM_AMOUNT > 1)}{PLURAL(REQUESTED_ITEM)}{?}{REQUESTED_ITEM}{\\?} to {QUEST_GIVER.LINK} in time.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("REQUESTED_ITEM_AMOUNT", this._requestedItemAmount);
					textObject.SetTextVariable("REQUESTED_ITEM", this._requestedItem.Name);
					return textObject;
				}
			}

			// Token: 0x170011AB RID: 4523
			// (get) Token: 0x06005176 RID: 20854 RVA: 0x001666CB File Offset: 0x001648CB
			private TextObject PlayerHasNeededItemsLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=MxpPkytG}You now have enough {ITEM} to complete the quest. Return to {QUEST_SETTLEMENT} to hand them over.", null);
					textObject.SetTextVariable("ITEM", this._requestedItem.Name);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x06005177 RID: 20855 RVA: 0x0016670B File Offset: 0x0016490B
			public VillageNeedsCraftingMaterialsIssueQuest(string questId, Hero questGiver, CampaignTime duration, int rewardGold, ItemObject requestedItem, int requestedItemAmount)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._requestedItem = requestedItem;
				this._requestedItemAmount = requestedItemAmount;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x170011AC RID: 4524
			// (get) Token: 0x06005178 RID: 20856 RVA: 0x00166734 File Offset: 0x00164934
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=LgiRMbgE}{ISSUE_SETTLEMENT} Needs Crafting Materials", null);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x170011AD RID: 4525
			// (get) Token: 0x06005179 RID: 20857 RVA: 0x0016675D File Offset: 0x0016495D
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x0600517A RID: 20858 RVA: 0x00166760 File Offset: 0x00164960
			protected override void SetDialogs()
			{
				TextObject textObject = new TextObject("{=UbUokDyI}Thank you. We'd appreciate it if you got the goods to us as quickly as possible. Good luck!", null);
				TextObject textObject2 = new TextObject("{=4c9ySfVj}Did you find what we needed, {?PLAYER.GENDER}madam{?}sir{\\?}?", null);
				TextObject textObject3 = new TextObject("{=nEGe8rUd}Thank you for your help, {?PLAYER.GENDER}madam{?}sir{\\?}. Here is what we promised.", null);
				TextObject textObject4 = new TextObject("{=sTfr1C8H}Thank you. But if the storms come before you find them, well, that would be bad for us.", null);
				textObject2.SetCharacterProperties("PLAYER", Hero.MainHero.CharacterObject, false);
				textObject3.SetCharacterProperties("PLAYER", Hero.MainHero.CharacterObject, false);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(textObject, null, null).Condition(() => CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(textObject2, null, null).Condition(() => CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=bLRGix1b}Yes, I have them with me.", null), null)
					.ClickableCondition(new ConversationSentence.OnClickableConditionDelegate(this.CompleteQuestClickableConditions))
					.NpcLine(textObject3, null, null)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += this.Success;
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=D8KFcE2i}Not yet, I am still working on it.", null), null)
					.NpcLine(textObject4, null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x0600517B RID: 20859 RVA: 0x001668A4 File Offset: 0x00164AA4
			private bool CompleteQuestClickableConditions(out TextObject explanation)
			{
				if (this._playerAcceptedQuestLog.CurrentProgress >= this._requestedItemAmount)
				{
					explanation = TextObject.Empty;
					return true;
				}
				explanation = new TextObject("{=EmBla2xa}You don't have enough {ITEM}", null);
				explanation.SetTextVariable("ITEM", this._requestedItem.Name);
				return false;
			}

			// Token: 0x0600517C RID: 20860 RVA: 0x001668F3 File Offset: 0x00164AF3
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x0600517D RID: 20861 RVA: 0x001668FC File Offset: 0x00164AFC
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				int requiredItemCountOnPlayer = this.GetRequiredItemCountOnPlayer();
				TextObject textObject = new TextObject("{=nAEhfGJk}Collect {ITEM}", null);
				textObject.SetTextVariable("ITEM", this._requestedItem.Name);
				this._playerAcceptedQuestLog = base.AddDiscreteLog(this.QuestStartedLogText, textObject, requiredItemCountOnPlayer, this._requestedItemAmount, null, false);
			}

			// Token: 0x0600517E RID: 20862 RVA: 0x00166955 File Offset: 0x00164B55
			protected override void OnTimedOut()
			{
				this.Fail();
			}

			// Token: 0x0600517F RID: 20863 RVA: 0x00166960 File Offset: 0x00164B60
			private void Success()
			{
				base.AddLog(this.QuestSuccessLogText, false);
				GiveItemAction.ApplyForParties(PartyBase.MainParty, Settlement.CurrentSettlement.Party, this._requestedItem, this._requestedItemAmount);
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(Hero.MainHero, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				base.QuestGiver.AddPower(10f);
				this.RelationshipChangeWithQuestGiver = 5;
				base.QuestGiver.CurrentSettlement.Village.Hearth += 30f;
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06005180 RID: 20864 RVA: 0x00166A0C File Offset: 0x00164C0C
			private void Fail()
			{
				base.AddLog(this.QuestFailedWithTimeOutLogText, false);
				base.QuestGiver.AddPower(-10f);
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.CurrentSettlement.Village.Hearth += -40f;
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06005181 RID: 20865 RVA: 0x00166A68 File Offset: 0x00164C68
			private int GetRequiredItemCountOnPlayer()
			{
				int itemNumber = PartyBase.MainParty.ItemRoster.GetItemNumber(this._requestedItem);
				if (itemNumber >= this._requestedItemAmount)
				{
					TextObject textObject = new TextObject("{=MTCrXEvj}You have enough {ITEM} to complete the quest. Return to {QUEST_SETTLEMENT} to hand it over.", null);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					textObject.SetTextVariable("ITEM", this._requestedItem.Name);
					MBInformationManager.AddQuickInformation(textObject, 0, null, "");
				}
				if (itemNumber <= this._requestedItemAmount)
				{
					return itemNumber;
				}
				return this._requestedItemAmount;
			}

			// Token: 0x06005182 RID: 20866 RVA: 0x00166AF0 File Offset: 0x00164CF0
			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.RaidCompletedEvent.AddNonSerializedListener(this, new Action<BattleSideEnum, RaidEventComponent>(this.OnRaidCompleted));
				CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.OnPlayerInventoryExchange));
				CampaignEvents.OnNewItemCraftedEvent.AddNonSerializedListener(this, new Action<ItemObject, Crafting.OverrideData, bool>(this.OnItemCrafted));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			// Token: 0x06005183 RID: 20867 RVA: 0x00166B87 File Offset: 0x00164D87
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.QuestCanceledWarDeclaredLogText, this.QuestCanceledWarDeclaredLogText);
			}

			// Token: 0x06005184 RID: 20868 RVA: 0x00166B9E File Offset: 0x00164D9E
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x06005185 RID: 20869 RVA: 0x00166BB1 File Offset: 0x00164DB1
			private void OnItemCrafted(ItemObject item, Crafting.OverrideData overrideData, bool arg3)
			{
				if (item == this._requestedItem)
				{
					this._playerAcceptedQuestLog.UpdateCurrentProgress(this.GetRequiredItemCountOnPlayer());
					this.CheckIfPlayerReadyToReturnItems();
				}
			}

			// Token: 0x06005186 RID: 20870 RVA: 0x00166BD4 File Offset: 0x00164DD4
			private void OnPlayerInventoryExchange(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
			{
				bool flag = false;
				foreach (ValueTuple<ItemRosterElement, int> valueTuple in purchasedItems)
				{
					ItemRosterElement itemRosterElement = valueTuple.Item1;
					if (itemRosterElement.EquipmentElement.Item == this._requestedItem)
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					foreach (ValueTuple<ItemRosterElement, int> valueTuple2 in soldItems)
					{
						ItemRosterElement itemRosterElement = valueTuple2.Item1;
						if (itemRosterElement.EquipmentElement.Item == this._requestedItem)
						{
							flag = true;
							break;
						}
					}
				}
				if (flag)
				{
					this._playerAcceptedQuestLog.UpdateCurrentProgress(this.GetRequiredItemCountOnPlayer());
					this.CheckIfPlayerReadyToReturnItems();
				}
			}

			// Token: 0x06005187 RID: 20871 RVA: 0x00166CB8 File Offset: 0x00164EB8
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this.QuestCanceledWarDeclaredLogText);
				}
			}

			// Token: 0x06005188 RID: 20872 RVA: 0x00166CE7 File Offset: 0x00164EE7
			private void OnRaidCompleted(BattleSideEnum battleSide, RaidEventComponent mapEvent)
			{
				if (mapEvent.MapEventSettlement == base.QuestGiver.CurrentSettlement)
				{
					base.CompleteQuestWithCancel(this.QuestGiverVillageRaidedLogText);
				}
			}

			// Token: 0x06005189 RID: 20873 RVA: 0x00166D08 File Offset: 0x00164F08
			private void CheckIfPlayerReadyToReturnItems()
			{
				if (this._playerHasNeededItemsLog == null && this._playerAcceptedQuestLog.CurrentProgress >= this._requestedItemAmount)
				{
					this._playerHasNeededItemsLog = base.AddLog(this.PlayerHasNeededItemsLogText, false);
					return;
				}
				if (this._playerHasNeededItemsLog != null && this._playerAcceptedQuestLog.CurrentProgress < this._requestedItemAmount)
				{
					base.RemoveLog(this._playerHasNeededItemsLog);
					this._playerHasNeededItemsLog = null;
				}
			}

			// Token: 0x04001B06 RID: 6918
			[SaveableField(10)]
			private readonly int _requestedItemAmount;

			// Token: 0x04001B07 RID: 6919
			[SaveableField(20)]
			private readonly ItemObject _requestedItem;

			// Token: 0x04001B08 RID: 6920
			[SaveableField(30)]
			private JournalLog _playerAcceptedQuestLog;

			// Token: 0x04001B09 RID: 6921
			[SaveableField(40)]
			private JournalLog _playerHasNeededItemsLog;

			// Token: 0x04001B0A RID: 6922
			private const int SuccessRelationBonus = 5;

			// Token: 0x04001B0B RID: 6923
			private const int FailRelationPenalty = -5;

			// Token: 0x04001B0C RID: 6924
			private const int SuccessPowerBonus = 10;

			// Token: 0x04001B0D RID: 6925
			private const int FailPowerPenalty = -10;

			// Token: 0x04001B0E RID: 6926
			private const int SuccessHonorBonus = 30;

			// Token: 0x04001B0F RID: 6927
			private const int FailWithCrimeHonorPenalty = -50;

			// Token: 0x04001B10 RID: 6928
			private const int SuccessHearthBonus = 30;

			// Token: 0x04001B11 RID: 6929
			private const int FailToDeliverInTimeHearthPenalty = -40;
		}

		// Token: 0x02000671 RID: 1649
		public class VillageNeedsCraftingMaterialsIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x0600518D RID: 20877 RVA: 0x00166DB7 File Offset: 0x00164FB7
			public VillageNeedsCraftingMaterialsIssueTypeDefiner()
				: base(601000)
			{
			}

			// Token: 0x0600518E RID: 20878 RVA: 0x00166DC4 File Offset: 0x00164FC4
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssue), 1, null);
				base.AddClassDefinition(typeof(VillageNeedsCraftingMaterialsIssueBehavior.VillageNeedsCraftingMaterialsIssueQuest), 2, null);
			}
		}
	}
}
