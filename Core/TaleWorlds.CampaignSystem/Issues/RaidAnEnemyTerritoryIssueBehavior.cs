using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x0200031C RID: 796
	public class RaidAnEnemyTerritoryIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D4D RID: 11597 RVA: 0x000BD1C2 File Offset: 0x000BB3C2
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D4E RID: 11598 RVA: 0x000BD1DC File Offset: 0x000BB3DC
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002D4F RID: 11599 RVA: 0x000BD240 File Offset: 0x000BB440
		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.IsLord && issueGiver.MapFaction.IsKingdomFaction && issueGiver == ((Kingdom)issueGiver.MapFaction).Leader && issueGiver.GetTraitLevel(DefaultTraits.Mercy) <= 0 && issueGiver.GetTraitLevel(DefaultTraits.Calculating) >= 0 && this.GetAtWarWithFactionCount(issueGiver) >= 1;
		}

		// Token: 0x06002D50 RID: 11600 RVA: 0x000BD2A0 File Offset: 0x000BB4A0
		private int GetAtWarWithFactionCount(Hero issueGiver)
		{
			int num = 0;
			foreach (Kingdom kingdom in Kingdom.All)
			{
				if (issueGiver.MapFaction != kingdom && issueGiver.MapFaction.IsAtWarWith(kingdom) && kingdom.Settlements.Count > 1)
				{
					num++;
				}
			}
			return num;
		}

		// Token: 0x06002D51 RID: 11601 RVA: 0x000BD318 File Offset: 0x000BB518
		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			return new RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryIssue(issueOwner);
		}

		// Token: 0x06002D52 RID: 11602 RVA: 0x000BD320 File Offset: 0x000BB520
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x04000DA5 RID: 3493
		private const int BaseRewardGold = 15000;

		// Token: 0x04000DA6 RID: 3494
		private const int ExtraRewardMultiplier = 3000;

		// Token: 0x04000DA7 RID: 3495
		private const int TargetRaidVillageCount = 3;

		// Token: 0x04000DA8 RID: 3496
		private const IssueBase.IssueFrequency RaidAnEnemyTerritoryIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x0200065B RID: 1627
		public class RaidAnEnemyTerritoryIssue : IssueBase
		{
			// Token: 0x06005012 RID: 20498 RVA: 0x001622CE File Offset: 0x001604CE
			internal static void AutoGeneratedStaticCollectObjectsRaidAnEnemyTerritoryIssue(object o, List<object> collectedObjects)
			{
				((RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06005013 RID: 20499 RVA: 0x001622DC File Offset: 0x001604DC
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._enemyKingdom);
			}

			// Token: 0x06005014 RID: 20500 RVA: 0x001622F1 File Offset: 0x001604F1
			internal static object AutoGeneratedGetMemberValue_enemyKingdom(object o)
			{
				return ((RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryIssue)o)._enemyKingdom;
			}

			// Token: 0x1700113D RID: 4413
			// (get) Token: 0x06005015 RID: 20501 RVA: 0x00162300 File Offset: 0x00160500
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=CrzFdo2H}Yes. It's about the war with the {ENEMYFACTION_INFORMALNAME}. We need to tie up some of their forces. A relatively small force moving quickly through their lands and raiding their villages should be a good distraction. Their lords will need to chase the raiders and won't be able to threaten us elsewhere. You seem to be the right {?PLAYER.GENDER}warrior{?}man{\\?} for the job. What do you say? You'll have my gratitude and you'll be well rewarded if you succeed.", null);
					textObject.SetTextVariable("ENEMYFACTION_INFORMALNAME", this._enemyKingdom.InformalName);
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700113E RID: 4414
			// (get) Token: 0x06005016 RID: 20502 RVA: 0x00162344 File Offset: 0x00160544
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=bLfXzCyc}I'm at your service my {?ISSUE_OWNER.GENDER}lady{?}lord{\\?}. Just tell me the details.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700113F RID: 4415
			// (get) Token: 0x06005017 RID: 20503 RVA: 0x00162376 File Offset: 0x00160576
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=aRfMtTUT}Good. See if you can hit {NUMBER_OF_TARGET_VILLAGE} villages. They won't be able to ignore that kind of damage. I'll give you {BASE_REWARD}{GOLD_ICON} for doing that, and {EXTRA_REWARD}{GOLD_ICON} more for every extra one that you raid. Agreed?", null);
					textObject.SetTextVariable("NUMBER_OF_TARGET_VILLAGE", 3);
					textObject.SetTextVariable("BASE_REWARD", 15000);
					textObject.SetTextVariable("EXTRA_REWARD", 3000);
					return textObject;
				}
			}

			// Token: 0x17001140 RID: 4416
			// (get) Token: 0x06005018 RID: 20504 RVA: 0x001623B4 File Offset: 0x001605B4
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=nrRvyKgL}I'll strike into their territory as you command, my {?ISSUE_OWNER.GENDER}lady{?}lord{\\?}.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001141 RID: 4417
			// (get) Token: 0x06005019 RID: 20505 RVA: 0x001623E6 File Offset: 0x001605E6
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001142 RID: 4418
			// (get) Token: 0x0600501A RID: 20506 RVA: 0x001623E9 File Offset: 0x001605E9
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001143 RID: 4419
			// (get) Token: 0x0600501B RID: 20507 RVA: 0x001623EC File Offset: 0x001605EC
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=DSlhMswt}Raid an Enemy Territory", null);
				}
			}

			// Token: 0x17001144 RID: 4420
			// (get) Token: 0x0600501C RID: 20508 RVA: 0x001623FC File Offset: 0x001605FC
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=JEuZoV1E}{ISSUE_OWNER.LINK} asks you to raid enemy villages to distract enemy war parties.", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x0600501D RID: 20509 RVA: 0x0016242E File Offset: 0x0016062E
			public RaidAnEnemyTerritoryIssue(Hero issueGiver)
				: base(issueGiver, CampaignTime.DaysFromNow(60f))
			{
				this._enemyKingdom = Kingdom.All.Where((Kingdom k) => k.IsAtWarWith(base.IssueOwner.MapFaction)).GetRandomElementInefficiently<Kingdom>();
			}

			// Token: 0x0600501E RID: 20510 RVA: 0x00162462 File Offset: 0x00160662
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.ClanInfluence)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x0600501F RID: 20511 RVA: 0x00162477 File Offset: 0x00160677
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06005020 RID: 20512 RVA: 0x00162479 File Offset: 0x00160679
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(60f), this._enemyKingdom);
			}

			// Token: 0x06005021 RID: 20513 RVA: 0x00162497 File Offset: 0x00160697
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x06005022 RID: 20514 RVA: 0x0016249C File Offset: 0x0016069C
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					relationHero = issueGiver;
					flag |= IssueBase.PreconditionFlags.Relation;
				}
				if (Clan.PlayerClan.Kingdom != issueGiver.MapFaction)
				{
					flag |= IssueBase.PreconditionFlags.NotInSameFaction;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06005023 RID: 20515 RVA: 0x001624EA File Offset: 0x001606EA
			public override bool IssueStayAliveConditions()
			{
				return this._enemyKingdom.IsAtWarWith(base.IssueOwner.MapFaction) && !this._enemyKingdom.IsEliminated;
			}

			// Token: 0x06005024 RID: 20516 RVA: 0x00162514 File Offset: 0x00160714
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x04001AAA RID: 6826
			private const int IssueDurationInDays = 60;

			// Token: 0x04001AAB RID: 6827
			private const int RelationLimitWithPlayer = -10;

			// Token: 0x04001AAC RID: 6828
			[SaveableField(10)]
			private readonly Kingdom _enemyKingdom;
		}

		// Token: 0x0200065C RID: 1628
		public class RaidAnEnemyTerritoryQuest : QuestBase
		{
			// Token: 0x06005026 RID: 20518 RVA: 0x00162529 File Offset: 0x00160729
			internal static void AutoGeneratedStaticCollectObjectsRaidAnEnemyTerritoryQuest(object o, List<object> collectedObjects)
			{
				((RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06005027 RID: 20519 RVA: 0x00162537 File Offset: 0x00160737
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._raidedVillagesTrackLog);
				collectedObjects.Add(this._enemyKingdom);
				collectedObjects.Add(this._raidedVillages);
			}

			// Token: 0x06005028 RID: 20520 RVA: 0x00162564 File Offset: 0x00160764
			internal static object AutoGeneratedGetMemberValue_raidedVillagesTrackLog(object o)
			{
				return ((RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryQuest)o)._raidedVillagesTrackLog;
			}

			// Token: 0x06005029 RID: 20521 RVA: 0x00162571 File Offset: 0x00160771
			internal static object AutoGeneratedGetMemberValue_enemyKingdom(object o)
			{
				return ((RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryQuest)o)._enemyKingdom;
			}

			// Token: 0x0600502A RID: 20522 RVA: 0x0016257E File Offset: 0x0016077E
			internal static object AutoGeneratedGetMemberValue_raidedVillages(object o)
			{
				return ((RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryQuest)o)._raidedVillages;
			}

			// Token: 0x17001145 RID: 4421
			// (get) Token: 0x0600502B RID: 20523 RVA: 0x0016258B File Offset: 0x0016078B
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=DSlhMswt}Raid an Enemy Territory", null);
				}
			}

			// Token: 0x17001146 RID: 4422
			// (get) Token: 0x0600502C RID: 20524 RVA: 0x00162598 File Offset: 0x00160798
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001147 RID: 4423
			// (get) Token: 0x0600502D RID: 20525 RVA: 0x0016259C File Offset: 0x0016079C
			private TextObject _questAcceptedByPlayerLog
			{
				get
				{
					TextObject textObject = new TextObject("{=sYfvsMwN}{QUEST_GIVER.LINK} asked you to raid {NUMBER_OF_TARGET_VILLAGE} {ENEMYFACTION_INFORMALNAME} villages to distract their lords and weaken their armies. {?QUEST_GIVER.GENDER}She{?}He{\\?} offers {REWARD_GOLD}{GOLD_ICON} to thank you for your deeds.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("NUMBER_OF_TARGET_VILLAGE", 3);
					textObject.SetTextVariable("ENEMYFACTION_INFORMALNAME", this._enemyKingdom.InformalName);
					textObject.SetTextVariable("EXTRA_REWARD", 3000);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("REWARD_GOLD", 15000);
					return textObject;
				}
			}

			// Token: 0x17001148 RID: 4424
			// (get) Token: 0x0600502E RID: 20526 RVA: 0x00162625 File Offset: 0x00160825
			private TextObject _mainHeroRaidedAllVillagesLog
			{
				get
				{
					return new TextObject("{=gMvDCnlx}You have successfully raided enemy villages and distracted enemy forces as promised.", null);
				}
			}

			// Token: 0x17001149 RID: 4425
			// (get) Token: 0x0600502F RID: 20527 RVA: 0x00162634 File Offset: 0x00160834
			private TextObject _mainHeroCouldNotRaidedAllVillagesLog
			{
				get
				{
					TextObject textObject = new TextObject("{=nRkLFBMl}You failed to raid at least {NUMBER_OF_TARGET_VILLAGE} villages and then report back. {QUEST_GIVER.LINK} is disappointed.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700114A RID: 4426
			// (get) Token: 0x06005030 RID: 20528 RVA: 0x00162668 File Offset: 0x00160868
			private TextObject _questGiverDiedLog
			{
				get
				{
					TextObject textObject = new TextObject("{=65BTaOl8}{QUEST_GIVER.LINK} died and your mission is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700114B RID: 4427
			// (get) Token: 0x06005031 RID: 20529 RVA: 0x0016269C File Offset: 0x0016089C
			private TextObject _enemyIsOutOfVillagesLog
			{
				get
				{
					TextObject textObject = new TextObject("{=bIDvq6wA}The enemy no longer holds any villages. {QUEST_GIVER.LINK} has canceled your mission.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700114C RID: 4428
			// (get) Token: 0x06005032 RID: 20530 RVA: 0x001626D0 File Offset: 0x001608D0
			private TextObject _declaredWarOnQuestGiverFactionLog
			{
				get
				{
					TextObject textObject = new TextObject("{=2diuD0rT}Your clan/faction is now at war with {QUEST_GIVER.LINK}'s faction. Your agreement with {QUEST_GIVER.LINK} has been canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700114D RID: 4429
			// (get) Token: 0x06005033 RID: 20531 RVA: 0x00162704 File Offset: 0x00160904
			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700114E RID: 4430
			// (get) Token: 0x06005034 RID: 20532 RVA: 0x00162738 File Offset: 0x00160938
			private TextObject _declaredPeaceBetweenQuestGiverAndEnemyFactionsLog
			{
				get
				{
					TextObject textObject = new TextObject("{=AXsbnTBb}{QUEST_GIVER.LINK} has made peace with the {ENEMYFACTION_INFORMALNAME}. Your agreement with {QUEST_GIVER.LINK} has been canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("ENEMYFACTION_INFORMALNAME", this._enemyKingdom.InformalName);
					return textObject;
				}
			}

			// Token: 0x1700114F RID: 4431
			// (get) Token: 0x06005035 RID: 20533 RVA: 0x00162781 File Offset: 0x00160981
			private TextObject _factionLeftLog
			{
				get
				{
					TextObject textObject = new TextObject("{=c63DWZhr}You left {FACTION}. Your agreement with {QUEST_GIVER.LINK} is terminated.", null);
					textObject.SetTextVariable("FACTION", base.QuestGiver.MapFaction.EncyclopediaLinkWithName);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x06005036 RID: 20534 RVA: 0x001627C1 File Offset: 0x001609C1
			public RaidAnEnemyTerritoryQuest(string questId, Hero questGiver, CampaignTime duration, Kingdom enemyKingdom)
				: base(questId, questGiver, duration, 15000)
			{
				this._enemyKingdom = enemyKingdom;
				this._raidedVillages = new List<Settlement>();
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06005037 RID: 20535 RVA: 0x001627F0 File Offset: 0x001609F0
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x06005038 RID: 20536 RVA: 0x001627F8 File Offset: 0x001609F8
			protected override void OnTimedOut()
			{
				base.OnTimedOut();
				this.MainHeroCouldNotRaidedAllVillages();
			}

			// Token: 0x06005039 RID: 20537 RVA: 0x00162808 File Offset: 0x00160A08
			protected override void RegisterEvents()
			{
				base.RegisterEvents();
				CampaignEvents.DailyTickEvent.AddNonSerializedListener(this, new Action(this.DailyTick));
				CampaignEvents.RaidCompletedEvent.AddNonSerializedListener(this, new Action<BattleSideEnum, RaidEventComponent>(this.OnRaidCompleted));
				CampaignEvents.HeroKilledEvent.AddNonSerializedListener(this, new Action<Hero, Hero, KillCharacterAction.KillCharacterActionDetail, bool>(this.OnHeroKilled));
				CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, new Action<Settlement, bool, Hero, Hero, Hero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail>(this.OnSettlementOwnerChanged));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.MakePeace.AddNonSerializedListener(this, new Action<IFaction, IFaction, MakePeaceAction.MakePeaceDetail>(this.OnMakePeace));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
			}

			// Token: 0x0600503A RID: 20538 RVA: 0x001628BC File Offset: 0x00160ABC
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (clan == Clan.PlayerClan && oldKingdom == base.QuestGiver.MapFaction)
				{
					this.FactionLeft();
				}
			}

			// Token: 0x0600503B RID: 20539 RVA: 0x001628DC File Offset: 0x00160ADC
			private void DailyTick()
			{
				if (base.QuestDueTime.IsPast && this._raidedVillages.Count >= 3)
				{
					this.MainHeroRaidedAllVillages();
				}
			}

			// Token: 0x0600503C RID: 20540 RVA: 0x00162910 File Offset: 0x00160B10
			private void OnRaidCompleted(BattleSideEnum winnerSide, RaidEventComponent raidEvent)
			{
				MapEvent mapEvent = raidEvent.MapEvent;
				if (mapEvent.IsRaid && mapEvent.IsPlayerMapEvent && mapEvent.MapEventSettlement.IsVillage && mapEvent.PlayerSide == winnerSide && !this._raidedVillages.Contains(mapEvent.MapEventSettlement))
				{
					this._raidedVillages.Add(mapEvent.MapEventSettlement);
					this._raidedVillagesTrackLog.UpdateCurrentProgress(this._raidedVillages.Count);
				}
			}

			// Token: 0x0600503D RID: 20541 RVA: 0x00162984 File Offset: 0x00160B84
			private void OnHeroKilled(Hero victim, Hero killer, KillCharacterAction.KillCharacterActionDetail detail, bool showNotification = true)
			{
				if (victim == base.QuestGiver)
				{
					if (this._raidedVillages.Count < 3)
					{
						this.QuestGiverDied();
						return;
					}
					this.MainHeroRaidedAllVillages();
				}
			}

			// Token: 0x0600503E RID: 20542 RVA: 0x001629AC File Offset: 0x00160BAC
			private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
			{
				if (oldOwner.MapFaction == this._enemyKingdom && this._enemyKingdom.Settlements.Count < 3 - this._raidedVillages.Count)
				{
					if (this._raidedVillages.Count < 3)
					{
						this.EnemyIsOutOfVillages();
						return;
					}
					this.MainHeroRaidedAllVillages();
				}
			}

			// Token: 0x0600503F RID: 20543 RVA: 0x00162A04 File Offset: 0x00160C04
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				if ((faction1 == base.QuestGiver.MapFaction && faction2 == Clan.PlayerClan) || (faction1 == Clan.PlayerClan && faction2 == base.QuestGiver.MapFaction))
				{
					if (this._raidedVillages.Count < 3)
					{
						QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._declaredWarOnQuestGiverFactionLog);
						return;
					}
					this.MainHeroRaidedAllVillages();
				}
			}

			// Token: 0x06005040 RID: 20544 RVA: 0x00162A68 File Offset: 0x00160C68
			private void OnMakePeace(IFaction side1Faction, IFaction side2Faction, MakePeaceAction.MakePeaceDetail detail)
			{
				if ((side1Faction == base.QuestGiver.MapFaction && side2Faction == this._enemyKingdom) || (side1Faction == this._enemyKingdom && side2Faction == base.QuestGiver.MapFaction))
				{
					if (this._raidedVillages.Count < 3)
					{
						this.DeclaredPeaceBetweenQuestGiverAndEnemyFactions();
						return;
					}
					this.MainHeroRaidedAllVillages();
				}
			}

			// Token: 0x06005041 RID: 20545 RVA: 0x00162AC0 File Offset: 0x00160CC0
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=R21SLyGK}Excellent. You are a brave and loyal warrior. You have my thanks.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedByPlayerConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=x3TO0gkN}Is there any progress on the task I gave you?", null), null, null).Condition(new ConversationSentence.OnConditionDelegate(this.DiscussCondition))
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=XOv5B84a}Yes, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}. I raided {RAIDED_VILLAGE_COUNT} villages as you commanded.", null), null)
					.Condition(() => this._raidedVillages.Count >= 3)
					.NpcLine(new TextObject("{=J4yakjtP}Splendid. You have served me well. Take your well-earned reward.", null), null, null)
					.Consequence(delegate
					{
						this.MainHeroRaidedAllVillages();
						MapEventHelper.OnConversationEnd();
					})
					.CloseDialog()
					.PlayerOption(new TextObject("{=8JvcDnh6}Not yet my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}. I am working on it.", null), null)
					.NpcLine(new TextObject("{=EuhvSsPZ}Good. Keep them busy.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(MapEventHelper.OnConversationEnd))
					.CloseDialog()
					.PlayerOption(new TextObject("{=pnQN6LrV}The time is not quite right, my {?QUEST_GIVER.GENDER}lady{?}lord{\\?}. I don't want to ride into a trap.", null), null)
					.NpcLine(new TextObject("{=DXD3ag49}Well... I hope this delay is for a good reason.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(MapEventHelper.OnConversationEnd))
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x06005042 RID: 20546 RVA: 0x00162C18 File Offset: 0x00160E18
			private void QuestAcceptedByPlayerConsequences()
			{
				base.StartQuest();
				this._raidedVillagesTrackLog = base.AddDiscreteLog(this._questAcceptedByPlayerLog, new TextObject("{=RFH1lDMj}Raided Village Count", null), 0, 3, null, false);
			}

			// Token: 0x06005043 RID: 20547 RVA: 0x00162C41 File Offset: 0x00160E41
			private bool DiscussCondition()
			{
				if (Hero.OneToOneConversationHero == base.QuestGiver)
				{
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, null, false);
					MBTextManager.SetTextVariable("RAIDED_VILLAGE_COUNT", this._raidedVillages.Count);
					return true;
				}
				return false;
			}

			// Token: 0x06005044 RID: 20548 RVA: 0x00162C80 File Offset: 0x00160E80
			private void MainHeroRaidedAllVillages()
			{
				base.AddLog(this._mainHeroRaidedAllVillagesLog, false);
				Clan.PlayerClan.AddRenown(5f, true);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(Hero.MainHero, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 10)
				});
				ChangeClanInfluenceAction.Apply(Clan.PlayerClan, 20f);
				this.RelationshipChangeWithQuestGiver = 10;
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				if (this._raidedVillages.Count > 3)
				{
					int num = (this._raidedVillages.Count - 3) * 3000;
					GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num, false);
				}
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06005045 RID: 20549 RVA: 0x00162D28 File Offset: 0x00160F28
			private void MainHeroCouldNotRaidedAllVillages()
			{
				base.AddLog(this._mainHeroCouldNotRaidedAllVillagesLog, false);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(Hero.MainHero, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				this.RelationshipChangeWithQuestGiver = -5;
			}

			// Token: 0x06005046 RID: 20550 RVA: 0x00162D5F File Offset: 0x00160F5F
			private void QuestGiverDied()
			{
				base.AddLog(this._questGiverDiedLog, false);
				base.CompleteQuestWithCancel(null);
			}

			// Token: 0x06005047 RID: 20551 RVA: 0x00162D76 File Offset: 0x00160F76
			private void EnemyIsOutOfVillages()
			{
				base.AddLog(this._enemyIsOutOfVillagesLog, false);
				base.CompleteQuestWithCancel(null);
			}

			// Token: 0x06005048 RID: 20552 RVA: 0x00162D8D File Offset: 0x00160F8D
			private void DeclaredPeaceBetweenQuestGiverAndEnemyFactions()
			{
				base.AddLog(this._declaredPeaceBetweenQuestGiverAndEnemyFactionsLog, false);
				base.CompleteQuestWithCancel(null);
			}

			// Token: 0x06005049 RID: 20553 RVA: 0x00162DA4 File Offset: 0x00160FA4
			private void FactionLeft()
			{
				base.AddLog(this._factionLeftLog, false);
				base.CompleteQuestWithCancel(null);
			}

			// Token: 0x04001AAD RID: 6829
			private const int RenownBonus = 5;

			// Token: 0x04001AAE RID: 6830
			private const int HonorXpBonus = 10;

			// Token: 0x04001AAF RID: 6831
			private const int InfluenceBonus = 20;

			// Token: 0x04001AB0 RID: 6832
			private const int RelationBonusWithQuestGiver = 10;

			// Token: 0x04001AB1 RID: 6833
			private const int HonorXpPenalty = -10;

			// Token: 0x04001AB2 RID: 6834
			private const int RelationPenaltyWithQuestGiver = -5;

			// Token: 0x04001AB3 RID: 6835
			[SaveableField(10)]
			private JournalLog _raidedVillagesTrackLog;

			// Token: 0x04001AB4 RID: 6836
			[SaveableField(20)]
			private readonly Kingdom _enemyKingdom;

			// Token: 0x04001AB5 RID: 6837
			[SaveableField(30)]
			private readonly List<Settlement> _raidedVillages;
		}

		// Token: 0x0200065D RID: 1629
		public class RaidAnEnemyTerritoryIssueTypeDefiner : CampaignBehaviorBase.SaveableCampaignBehaviorTypeDefiner
		{
			// Token: 0x0600504D RID: 20557 RVA: 0x00162DEA File Offset: 0x00160FEA
			public RaidAnEnemyTerritoryIssueTypeDefiner()
				: base(586800)
			{
			}

			// Token: 0x0600504E RID: 20558 RVA: 0x00162DF7 File Offset: 0x00160FF7
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryIssue), 1, null);
				base.AddClassDefinition(typeof(RaidAnEnemyTerritoryIssueBehavior.RaidAnEnemyTerritoryQuest), 2, null);
			}
		}
	}
}
