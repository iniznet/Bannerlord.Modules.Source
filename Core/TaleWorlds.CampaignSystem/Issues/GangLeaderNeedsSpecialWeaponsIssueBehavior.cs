using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CampaignBehaviors;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.CraftingSystem;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	public class GangLeaderNeedsSpecialWeaponsIssueBehavior : CampaignBehaviorBase
	{
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		private void OnCheckForIssue(Hero hero)
		{
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, this.ConditionsHold(hero) ? new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssue), IssueBase.IssueFrequency.VeryCommon, null) : new PotentialIssueData(typeof(GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		private bool ConditionsHold(Hero issueGiver)
		{
			return issueGiver.CurrentSettlement != null && issueGiver.IsGangLeader && issueGiver.CurrentSettlement.IsTown && Campaign.Current.GetCampaignBehavior<ICraftingCampaignBehavior>() != null;
		}

		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			return new GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssue(issueOwner);
		}

		public override void SyncData(IDataStore dataStore)
		{
		}

		private const IssueBase.IssueFrequency SpecialWeaponOrderIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		public class GangLeaderNeedsSpecialWeaponsIssue : IssueBase
		{
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsSpecialWeaponsIssue(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			public int NumberOfDaggersRequested
			{
				get
				{
					return 2 + MathF.Ceiling(4f * base.IssueDifficultyMultiplier);
				}
			}

			public int BaseGoldRewardPerDagger
			{
				get
				{
					return 200 + MathF.Ceiling(500f * base.IssueDifficultyMultiplier);
				}
			}

			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			protected override bool IssueQuestCanBeDuplicated
			{
				get
				{
					return false;
				}
			}

			public GangLeaderNeedsSpecialWeaponsIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
			}

			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=fmjWsUB6}Yeah... I've heard about your skills as a crafter of weapons. Now, nothing inspires my lads to shed my enemies' blood than the feel of a really well-made blade in their hands. Could you make me some? I'll pay well.", null);
				}
			}

			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=UdnXHLSh}What do you want exactly?", null);
				}
			}

			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=xmETCOam}Daggers. Good, sharp, light daggers that they can hide under their clothes, so the guards won't stop them. We want to order {REQUESTED_AMOUNT} daggers and I guarantee a minimum of {REWARD_PER_DAGGER} denars for each, more if they're of exceptional quality. Also I can arrange things with the smith of {QUEST_SETTLEMENT} for you to work in his workshop.", null);
					textObject.SetTextVariable("REQUESTED_AMOUNT", this.NumberOfDaggersRequested);
					textObject.SetTextVariable("REWARD_PER_DAGGER", this.BaseGoldRewardPerDagger);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.IssueOwner.CurrentSettlement.Name);
					return textObject;
				}
			}

			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=goLdeLsT}Alright I will forge your daggers.", null);
				}
			}

			public override TextObject Title
			{
				get
				{
					return new TextObject("{=tm9PiOMA}Special Weapon Order", null);
				}
			}

			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=auIV2JoK}{ISSUE_GIVER.LINK} is looking for someone to craft special weapons for {?ISSUE_GIVER.GENDER}her{?}his{\\?} men.", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					return textObject;
				}
			}

			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				relationHero = issueGiver;
				skill = DefaultSkills.Crafting;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.MapFaction, Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (Hero.MainHero.GetSkillValue(skill) < 30)
				{
					flag |= IssueBase.PreconditionFlags.Skill;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.1f;
				}
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return 0.5f;
				}
				return 0f;
			}

			public override bool IssueStayAliveConditions()
			{
				return true;
			}

			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			protected override void OnGameLoad()
			{
			}

			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest(questId, base.IssueOwner, this.NumberOfDaggersRequested, this.BaseGoldRewardPerDagger, CampaignTime.DaysFromNow(30f), this.RewardGold);
			}

			protected override void HourlyTick()
			{
			}

			private const int IssueAndQuestDuration = 30;
		}

		public class GangLeaderNeedsSpecialWeaponsIssueQuest : QuestBase
		{
			internal static void AutoGeneratedStaticCollectObjectsGangLeaderNeedsSpecialWeaponsIssueQuest(object o, List<object> collectedObjects)
			{
				((GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._currentCraftingOrder);
				collectedObjects.Add(this._playerAcceptedQuestLog);
				collectedObjects.Add(this._playerHasNeededItemsLog);
			}

			internal static object AutoGeneratedGetMemberValue_numberOfDaggersRequested(object o)
			{
				return ((GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest)o)._numberOfDaggersRequested;
			}

			internal static object AutoGeneratedGetMemberValue_baseGoldRewardPerDagger(object o)
			{
				return ((GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest)o)._baseGoldRewardPerDagger;
			}

			internal static object AutoGeneratedGetMemberValue_currentCraftingOrder(object o)
			{
				return ((GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest)o)._currentCraftingOrder;
			}

			internal static object AutoGeneratedGetMemberValue_completedCraftingOrders(object o)
			{
				return ((GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest)o)._completedCraftingOrders;
			}

			internal static object AutoGeneratedGetMemberValue_playerAcceptedQuestLog(object o)
			{
				return ((GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest)o)._playerAcceptedQuestLog;
			}

			internal static object AutoGeneratedGetMemberValue_playerHasNeededItemsLog(object o)
			{
				return ((GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest)o)._playerHasNeededItemsLog;
			}

			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			private TextObject QuestStartedLog
			{
				get
				{
					TextObject textObject = new TextObject("{=zo1shYCL}{QUEST_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}her{?}his{\\?} men need a special dagger that should be light and small enough to hide from the city guards. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to forge {REQUESTED_AMOUNT} daggers at the smith of {QUEST_SETTLEMENT}. {?QUEST_GIVER.GENDER}She{?}He{\\?} guaranteed to pay at least {REWARD_PER_ITEM} denars for each dagger and he is ready to pay extra depending on the quality of the weapons.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					textObject.SetTextVariable("REQUESTED_AMOUNT", this._numberOfDaggersRequested);
					textObject.SetTextVariable("REWARD_PER_ITEM", this._baseGoldRewardPerDagger);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					return textObject;
				}
			}

			private TextObject QuestSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=3uvbVxfx}You have delivered the weapons to {QUEST_GIVER.LINK} as promised.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			private TextObject QuestCanceledWarDeclaredLog
			{
				get
				{
					TextObject textObject = new TextObject("{=vW6kBki9}Your clan is now at war with {QUEST_GIVER.LINK}'s realm. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject QuestFailedLog
			{
				get
				{
					TextObject textObject = new TextObject("{=iTgVn26a}You have failed to bring the weapons to {QUEST_GIVER.LINK} in time.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			public override TextObject Title
			{
				get
				{
					return new TextObject("{=tm9PiOMA}Special Weapon Order", null);
				}
			}

			private TextObject PlayerHasNeededItemsLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=kHio2hlU}You now have enough daggers to complete the quest. Return to {QUEST_GIVER.LINK} to hand them over.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			public GangLeaderNeedsSpecialWeaponsIssueQuest(string questId, Hero questGiver, int numberOfDaggersRequested, int baseGoldRewardPerDagger, CampaignTime duration, int rewardGold)
				: base(questId, questGiver, duration, rewardGold)
			{
				this._numberOfDaggersRequested = numberOfDaggersRequested;
				this._baseGoldRewardPerDagger = baseGoldRewardPerDagger;
				this._craftingBehavior = Campaign.Current.GetCampaignBehavior<ICraftingCampaignBehavior>();
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			protected override void SetDialogs()
			{
				TextObject textObject = new TextObject("{=siofh72D}Thank you, my friend. I'm looking forward to giving my boys their new toys.", null);
				TextObject textObject2 = new TextObject("{=cJOGUpSS}Any news about my orders?", null);
				TextObject textObject3 = new TextObject("{=R9NDaOhb}The daggers are almost ready. They just need a little more work...", null);
				TextObject textObject4 = new TextObject("{=CDXUehf0}Good, good.", null);
				TextObject textObject5 = new TextObject("{=wErSpkjy}I'm still working on it.", null);
				TextObject textObject6 = new TextObject("{=r2g61BjX}Well, my lads are anxiously waiting...", null);
				TextObject textObject7 = new TextObject("{=TBuyyh2S}There you go, that should be enough daggers for your men.", null);
				TextObject textObject8 = new TextObject("{=QCzB8DDX}Ah excellent, these will come in handy.", null);
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(textObject, null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(textObject2, null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.BeginPlayerOptions()
					.PlayerOption(textObject3, null)
					.NpcLine(textObject4, null, null)
					.CloseDialog()
					.PlayerOption(textObject5, null)
					.NpcLine(textObject6, null, null)
					.CloseDialog()
					.PlayerOption(textObject7, null)
					.ClickableCondition(new ConversationSentence.OnClickableConditionDelegate(this.CheckPlayerHasCompletedEnoughOrdersClickableCondition))
					.NpcLine(textObject8, null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.SucceedQuest))
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			private bool CheckPlayerHasCompletedEnoughOrdersClickableCondition(out TextObject explanation)
			{
				if (this._completedCraftingOrders >= this._numberOfDaggersRequested)
				{
					explanation = TextObject.Empty;
					return true;
				}
				explanation = new TextObject("{=mAvJcyY1}You haven't completed enough crafting orders yet.", null);
				return false;
			}

			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				this._currentCraftingOrder = this.GetDaggerCraftingOrder();
				this._playerAcceptedQuestLog = base.AddDiscreteLog(this.QuestStartedLog, new TextObject("{=scjHmuyF}Complete Crafting Orders", null), this._completedCraftingOrders, this._numberOfDaggersRequested, null, false);
			}

			private void CheckIfPlayerReadyToReturnItems()
			{
				if (this._playerHasNeededItemsLog == null && this._playerAcceptedQuestLog.CurrentProgress >= this._numberOfDaggersRequested)
				{
					this._playerHasNeededItemsLog = base.AddLog(this.PlayerHasNeededItemsLogText, false);
					return;
				}
				if (this._playerHasNeededItemsLog != null && this._playerAcceptedQuestLog.CurrentProgress < this._numberOfDaggersRequested)
				{
					base.RemoveLog(this._playerHasNeededItemsLog);
					this._playerHasNeededItemsLog = null;
				}
			}

			protected override void OnTimedOut()
			{
				if (this._playerHasNeededItemsLog != null && this._playerHasNeededItemsLog.CurrentProgress >= this._numberOfDaggersRequested)
				{
					this.SucceedQuest();
					return;
				}
				this.FailQuest();
			}

			private void SucceedQuest()
			{
				base.AddLog(this.QuestSuccessLog, false);
				TraitLevelingHelper.OnIssueFailed(Hero.MainHero, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				this.RelationshipChangeWithQuestGiver = 5;
				base.QuestGiver.AddPower(10f);
				if (this._currentCraftingOrder != null)
				{
					this._craftingBehavior.CancelCustomOrder(base.QuestGiver.CurrentSettlement.Town, this._currentCraftingOrder);
				}
				GiveGoldAction.ApplyForQuestBetweenCharacters(base.QuestGiver, Hero.MainHero, this._baseGoldRewardPerDagger * this._completedCraftingOrders, false);
				base.CompleteQuestWithSuccess();
			}

			private void FailQuest()
			{
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-10f);
				this._craftingBehavior.CancelCustomOrder(base.QuestGiver.CurrentSettlement.Town, this._currentCraftingOrder);
				base.CompleteQuestWithFail(this.QuestFailedLog);
			}

			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.OnCraftingOrderCompletedEvent.AddNonSerializedListener(this, new Action<Town, CraftingOrder, ItemObject, Hero>(this.OnCraftingOrderCompleted));
			}

			private void OnCraftingOrderCompleted(Town town, CraftingOrder craftingOrder, ItemObject craftedItem, Hero completerHero)
			{
				if (craftingOrder == this._currentCraftingOrder)
				{
					this._completedCraftingOrders++;
					if (this._completedCraftingOrders == this._numberOfDaggersRequested)
					{
						TextObject textObject = new TextObject("{=T4q1DkfF}You have completed {QUEST_GIVER.NAME}'s request, you can go back to receive your reward or keep working on more orders.", null);
						textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
						MBInformationManager.AddQuickInformation(textObject, 0, null, "");
					}
					if (this._completedCraftingOrders < 10)
					{
						this._playerAcceptedQuestLog.UpdateCurrentProgress(this._completedCraftingOrders);
						this.CheckIfPlayerReadyToReturnItems();
						this._currentCraftingOrder = this.GetDaggerCraftingOrder();
						return;
					}
					if (this._completedCraftingOrders == 10)
					{
						this._currentCraftingOrder = null;
						TextObject textObject2 = new TextObject("{=1WbsW7I7}{QUEST_GIVER.NAME} won’t need anymore daggers. You can go back to {?QUEST_GIVER.GENDER}her{?}him{\\?} to get your reward.", null);
						textObject2.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
						MBInformationManager.AddQuickInformation(textObject2, 0, null, "");
					}
				}
			}

			private CraftingOrder GetDaggerCraftingOrder()
			{
				CraftingTemplate randomElementWithPredicate = CraftingTemplate.All.GetRandomElementWithPredicate((CraftingTemplate x) => x.TemplateName.ToString() == "Dagger");
				CraftingOrder craftingOrder = this._craftingBehavior.CreateCustomOrderForHero(base.QuestGiver, this.GetCraftingDifficulty(), null, randomElementWithPredicate);
				base.AddTrackedObject(craftingOrder);
				return craftingOrder;
			}

			private float GetCraftingDifficulty()
			{
				return MathF.Clamp((float)MathF.Min(Hero.MainHero.GetSkillValue(DefaultSkills.Crafting), 100), 10f, 100f) + (float)MBRandom.RandomInt(-10, 10);
			}

			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail declareWarDetail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, declareWarDetail, this.QuestCanceledWarDeclaredLog, this.QuestCanceledWarDeclaredLog, false);
			}

			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
				this._craftingBehavior = Campaign.Current.GetCampaignBehavior<ICraftingCampaignBehavior>();
				if (this._craftingBehavior == null)
				{
					base.CompleteQuestWithCancel(null);
				}
			}

			protected override void HourlyTick()
			{
			}

			[SaveableField(1)]
			private readonly int _numberOfDaggersRequested;

			[SaveableField(2)]
			private readonly int _baseGoldRewardPerDagger;

			[SaveableField(3)]
			private CraftingOrder _currentCraftingOrder;

			[SaveableField(4)]
			private int _completedCraftingOrders;

			[SaveableField(5)]
			private JournalLog _playerAcceptedQuestLog;

			[SaveableField(6)]
			private JournalLog _playerHasNeededItemsLog;

			private const int SuccessRelationBonus = 5;

			private const int SuccessPowerBonus = 10;

			private const int FailRelationPenalty = -5;

			private const int FailPowerPenalty = -10;

			private const int MaxCraftingOrderDifficulty = 100;

			private const int CraftingOrderDifficultyVariance = 10;

			private const int MaxNumberOfCraftingOrdersAvailable = 10;

			private const string DaggerCraftingTemplateId = "Dagger";

			private ICraftingCampaignBehavior _craftingBehavior;
		}

		public class GangLeaderNeedsSpecialWeaponsIssueTypeDefiner : SaveableTypeDefiner
		{
			public GangLeaderNeedsSpecialWeaponsIssueTypeDefiner()
				: base(596061)
			{
			}

			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssue), 1, null);
				base.AddClassDefinition(typeof(GangLeaderNeedsSpecialWeaponsIssueBehavior.GangLeaderNeedsSpecialWeaponsIssueQuest), 2, null);
			}
		}
	}
}
