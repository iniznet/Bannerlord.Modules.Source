using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x0200030D RID: 781
	public class HeadmanVillageNeedsDraughtAnimalsIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002CDC RID: 11484 RVA: 0x000BB3EF File Offset: 0x000B95EF
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002CDD RID: 11485 RVA: 0x000BB408 File Offset: 0x000B9608
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002CDE RID: 11486 RVA: 0x000BB40C File Offset: 0x000B960C
		private bool ConditionsHold(Hero issueGiver)
		{
			if (issueGiver.CurrentSettlement != null && issueGiver.IsHeadman)
			{
				Village village = issueGiver.CurrentSettlement.Village;
				return (village.GetProsperityLevel() == SettlementComponent.ProsperityLevel.Low || village.GetProsperityLevel() == SettlementComponent.ProsperityLevel.Mid) && (village.VillageType == DefaultVillageTypes.IronMine || village.VillageType == DefaultVillageTypes.ClayMine || village.VillageType == DefaultVillageTypes.SaltMine || village.VillageType == DefaultVillageTypes.SilverMine || village.VillageType == DefaultVillageTypes.Lumberjack);
			}
			return false;
		}

		// Token: 0x06002CDF RID: 11487 RVA: 0x000BB490 File Offset: 0x000B9690
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002CE0 RID: 11488 RVA: 0x000BB4F4 File Offset: 0x000B96F4
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssue(issueOwner);
		}

		// Token: 0x04000D89 RID: 3465
		private const IssueBase.IssueFrequency HeadmanVillageNeedsDraughtAnimalsIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x02000628 RID: 1576
		public class HeadmanVillageNeedsDraughtAnimalsIssue : IssueBase
		{
			// Token: 0x06004AE1 RID: 19169 RVA: 0x0014DEB8 File Offset: 0x0014C0B8
			internal static void AutoGeneratedStaticCollectObjectsHeadmanVillageNeedsDraughtAnimalsIssue(object o, List<object> collectedObjects)
			{
				((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004AE2 RID: 19170 RVA: 0x0014DEC6 File Offset: 0x0014C0C6
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._selectedAnimal);
			}

			// Token: 0x06004AE3 RID: 19171 RVA: 0x0014DEDB File Offset: 0x0014C0DB
			internal static object AutoGeneratedGetMemberValue_selectedAnimal(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssue)o)._selectedAnimal;
			}

			// Token: 0x06004AE4 RID: 19172 RVA: 0x0014DEE8 File Offset: 0x0014C0E8
			internal static object AutoGeneratedGetMemberValue_isQuestWithMeatOffer(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssue)o)._isQuestWithMeatOffer;
			}

			// Token: 0x06004AE5 RID: 19173 RVA: 0x0014DEFA File Offset: 0x0014C0FA
			internal static object AutoGeneratedGetMemberValue_requestedAnimalAmount(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssue)o)._requestedAnimalAmount;
			}

			// Token: 0x17000F85 RID: 3973
			// (get) Token: 0x06004AE6 RID: 19174 RVA: 0x0014DF0C File Offset: 0x0014C10C
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Duration;
				}
			}

			// Token: 0x17000F86 RID: 3974
			// (get) Token: 0x06004AE7 RID: 19175 RVA: 0x0014DF0F File Offset: 0x0014C10F
			private ItemObject _meatItem
			{
				get
				{
					return Game.Current.ObjectManager.GetObject<ItemObject>("meat");
				}
			}

			// Token: 0x17000F87 RID: 3975
			// (get) Token: 0x06004AE8 RID: 19176 RVA: 0x0014DF25 File Offset: 0x0014C125
			private int OfferedMeatAmount
			{
				get
				{
					return (300 + this._selectedAnimal.Value * this._requestedAnimalAmount) / this._meatItem.Value * 2;
				}
			}

			// Token: 0x17000F88 RID: 3976
			// (get) Token: 0x06004AE9 RID: 19177 RVA: 0x0014DF4D File Offset: 0x0014C14D
			private int GoldRequiredForAlternativeSolution
			{
				get
				{
					return (int)((float)(this._selectedAnimal.Value * this._requestedAnimalAmount) * 0.7f);
				}
			}

			// Token: 0x17000F89 RID: 3977
			// (get) Token: 0x06004AEA RID: 19178 RVA: 0x0014DF69 File Offset: 0x0014C169
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 3 + MathF.Ceiling(3f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F8A RID: 3978
			// (get) Token: 0x06004AEB RID: 19179 RVA: 0x0014DF7E File Offset: 0x0014C17E
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 3 + MathF.Ceiling(5f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17000F8B RID: 3979
			// (get) Token: 0x06004AEC RID: 19180 RVA: 0x0014DF93 File Offset: 0x0014C193
			protected override int RewardGold
			{
				get
				{
					if (this._isQuestWithMeatOffer)
					{
						return 0;
					}
					return 500 + this._selectedAnimal.Value * this._requestedAnimalAmount;
				}
			}

			// Token: 0x17000F8C RID: 3980
			// (get) Token: 0x06004AED RID: 19181 RVA: 0x0014DFB7 File Offset: 0x0014C1B7
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=9nxTUZkO}We do have a problem. Last winter was hard on our animals. A number died from disease, and others were taken by wolves. We'd go to town to buy more, but, well, herds make a tempting target for bandits and we're not really suited to fight them. We can't afford to slaughter even the oldest and weakest of our animals because we need them to pull the plough. Maybe you can help us?", null);
				}
			}

			// Token: 0x17000F8D RID: 3981
			// (get) Token: 0x06004AEE RID: 19182 RVA: 0x0014DFC4 File Offset: 0x0014C1C4
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=nvaLVB5f}Tell me your needs.", null);
				}
			}

			// Token: 0x17000F8E RID: 3982
			// (get) Token: 0x06004AEF RID: 19183 RVA: 0x0014DFD4 File Offset: 0x0014C1D4
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = TextObject.Empty;
					if (this._isQuestWithMeatOffer)
					{
						textObject = new TextObject("{=aExKdXmx}We need {REQUESTED_ANIMAL_AMOUNT} {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{PLURAL(SELECTED_ANIMAL)}{?}{SELECTED_ANIMAL}{\\?}{.%}. To be honest our village is poor and our coffers are empty. We can make payment only as meat - the meat of the old animals that we'll slaughter as soon as you bring us the new ones. We can offer {MEAT_AMOUNT} loads of meat, will you accept that, {?PLAYER.GENDER}madam{?}sir{\\?}?", null);
						textObject.SetTextVariable("MEAT_AMOUNT", this.OfferedMeatAmount);
					}
					else
					{
						textObject = new TextObject("{=TEhwK74M}We are willing to pay {REWARD}{GOLD_ICON} denars for {REQUESTED_ANIMAL_AMOUNT} healthy and strong {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{PLURAL(SELECTED_ANIMAL)}{?}{SELECTED_ANIMAL}{\\?}{.%}. Unlike us, I'm sure you can travel distant villages easily and find the finest and cheapest ones there.", null);
						textObject.SetTextVariable("REWARD", this.RewardGold);
					}
					textObject.SetTextVariable("REQUESTED_ANIMAL_AMOUNT", this._requestedAnimalAmount);
					textObject.SetTextVariable("SELECTED_ANIMAL", this._selectedAnimal.Name);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F8F RID: 3983
			// (get) Token: 0x06004AF0 RID: 19184 RVA: 0x0014E068 File Offset: 0x0014C268
			public override TextObject IssuePlayerResponseAfterAlternativeExplanation
			{
				get
				{
					return new TextObject("{=qYSrlr4q}Maybe I should send one of my men to find the animals you need.", null);
				}
			}

			// Token: 0x17000F90 RID: 3984
			// (get) Token: 0x06004AF1 RID: 19185 RVA: 0x0014E078 File Offset: 0x0014C278
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=bvEOmHWd}I think a man who knows how to trade alongside {ALTERNATIVE_TROOP_AMOUNT} fighters can get the job done without trouble. they will need {GOLD_REQUIRED_FOR_ALTERNATIVE_SOLUTION}{GOLD_ICON} denars to buy the animals. You or one of your companions, {?PLAYER.GENDER}madam{?}sir{\\?} - it doesn't matter for us as long as you find the animals we need...", null);
					textObject.SetTextVariable("ALTERNATIVE_TROOP_AMOUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("GOLD_REQUIRED_FOR_ALTERNATIVE_SOLUTION", this.GoldRequiredForAlternativeSolution);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000F91 RID: 3985
			// (get) Token: 0x06004AF2 RID: 19186 RVA: 0x0014E0C5 File Offset: 0x0014C2C5
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=iq3yEuO9}All right. I will bring your animals by myself.", null);
				}
			}

			// Token: 0x17000F92 RID: 3986
			// (get) Token: 0x06004AF3 RID: 19187 RVA: 0x0014E0D2 File Offset: 0x0014C2D2
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=BMQQSeTp}I'm sure my men will find what you need and bring them to you in time.", null);
				}
			}

			// Token: 0x17000F93 RID: 3987
			// (get) Token: 0x06004AF4 RID: 19188 RVA: 0x0014E0DF File Offset: 0x0014C2DF
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=D9LxQxNa}Thank you for your help {?PLAYER.GENDER}madam{?}sir{\\?}. We will be waiting for your men. Good luck to you all.", null);
				}
			}

			// Token: 0x17000F94 RID: 3988
			// (get) Token: 0x06004AF5 RID: 19189 RVA: 0x0014E0EC File Offset: 0x0014C2EC
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=jol73R8f}We are still waiting for your men to arrive, {?PLAYER.GENDER}ma'am{?}sir{\\?}. The village needs the animals they are bringing.", null);
				}
			}

			// Token: 0x17000F95 RID: 3989
			// (get) Token: 0x06004AF6 RID: 19190 RVA: 0x0014E0F9 File Offset: 0x0014C2F9
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17000F96 RID: 3990
			// (get) Token: 0x06004AF7 RID: 19191 RVA: 0x0014E0FC File Offset: 0x0014C2FC
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F97 RID: 3991
			// (get) Token: 0x06004AF8 RID: 19192 RVA: 0x0014E100 File Offset: 0x0014C300
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=F16k4H7R}{QUEST_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}she{?}he{\\?} needs {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{PLURAL(SELECTED_ANIMAL)}{?}{SELECTED_ANIMAL}{\\?}{.%} for {?QUEST_GIVER.GENDER}her{?}his{\\?} village. {?QUEST_GIVER.GENDER}She{?}He{\\?} will pay you {REWARD_GOLD}{GOLD_ICON} denars when the animals are delivered. You asked your {COMPANION.LINK} and {ALTERNATIVE_TROOP_AMOUNT} of your men to deliver {REQUESTED_ANIMAL_AMOUNT} {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{PLURAL(SELECTED_ANIMAL)}{?}{SELECTED_ANIMAL}{\\?}{.%} to {QUEST_GIVER.LINK}. They will rejoin your party in {RETURN_DAYS} days.", null);
					textObject.SetTextVariable("ALTERNATIVE_TROOP_AMOUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("REQUESTED_ANIMAL_AMOUNT", this._requestedAnimalAmount);
					textObject.SetTextVariable("SELECTED_ANIMAL", this._selectedAnimal.Name);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F98 RID: 3992
			// (get) Token: 0x06004AF9 RID: 19193 RVA: 0x0014E1BA File Offset: 0x0014C3BA
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=MXLcZPaO}Village Needs Draught Animals", null);
				}
			}

			// Token: 0x17000F99 RID: 3993
			// (get) Token: 0x06004AFA RID: 19194 RVA: 0x0014E1C7 File Offset: 0x0014C3C7
			public override TextObject Description
			{
				get
				{
					return new TextObject("{=Ntv5KPFe}Headman in the village requested draught animals to replace them with old ones.", null);
				}
			}

			// Token: 0x06004AFB RID: 19195 RVA: 0x0014E1D4 File Offset: 0x0014C3D4
			public HeadmanVillageNeedsDraughtAnimalsIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
				this._selectedAnimal = this._possibleAnimals.GetRandomElement<ItemObject>();
				this._isQuestWithMeatOffer = issueOwner.CurrentSettlement.Village.Hearth <= 300f;
				this._requestedAnimalAmount = MathF.Round((float)((int)(5000f / (float)this._selectedAnimal.Value)) * base.IssueDifficultyMultiplier);
			}

			// Token: 0x06004AFC RID: 19196 RVA: 0x0014E2A2 File Offset: 0x0014C4A2
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.VillageHearth)
				{
					return -0.2f;
				}
				if (issueEffect == DefaultIssueEffects.IssueOwnerPower)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x06004AFD RID: 19197 RVA: 0x0014E2C5 File Offset: 0x0014C4C5
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004AFE RID: 19198 RVA: 0x0014E2DD File Offset: 0x0014C4DD
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			// Token: 0x06004AFF RID: 19199 RVA: 0x0014E2EB File Offset: 0x0014C4EB
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Riding) >= hero.GetSkillValue(DefaultSkills.Trade)) ? DefaultSkills.Riding : DefaultSkills.Trade, 120);
			}

			// Token: 0x06004B00 RID: 19200 RVA: 0x0014E318 File Offset: 0x0014C518
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false) && QuestHelper.CheckGoldForAlternativeSolution(this.GoldRequiredForAlternativeSolution, ref explanation);
			}

			// Token: 0x06004B01 RID: 19201 RVA: 0x0014E349 File Offset: 0x0014C549
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x06004B02 RID: 19202 RVA: 0x0014E34C File Offset: 0x0014C54C
			public override bool IssueStayAliveConditions()
			{
				return !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid;
			}

			// Token: 0x06004B03 RID: 19203 RVA: 0x0014E375 File Offset: 0x0014C575
			public override void AlternativeSolutionStartConsequence()
			{
				GiveGoldAction.ApplyBetweenCharacters(Hero.MainHero, null, this.GoldRequiredForAlternativeSolution, false);
			}

			// Token: 0x06004B04 RID: 19204 RVA: 0x0014E38C File Offset: 0x0014C58C
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flags, out Hero relationHero, out SkillObject skill)
			{
				flags = IssueBase.PreconditionFlags.None;
				relationHero = null;
				skill = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flags |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.MapFaction, Hero.MainHero.MapFaction))
				{
					flags |= IssueBase.PreconditionFlags.AtWar;
				}
				return flags == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004B05 RID: 19205 RVA: 0x0014E3DC File Offset: 0x0014C5DC
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004B06 RID: 19206 RVA: 0x0014E3DE File Offset: 0x0014C5DE
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(30f), this._selectedAnimal, this._requestedAnimalAmount, this._isQuestWithMeatOffer, this.OfferedMeatAmount, this.RewardGold);
			}

			// Token: 0x06004B07 RID: 19207 RVA: 0x0014E414 File Offset: 0x0014C614
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x17000F9A RID: 3994
			// (get) Token: 0x06004B08 RID: 19208 RVA: 0x0014E416 File Offset: 0x0014C616
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(500f + 700f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x06004B09 RID: 19209 RVA: 0x0014E42C File Offset: 0x0014C62C
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				base.IssueOwner.AddPower(10f);
				ChangeRelationAction.ApplyPlayerRelation(base.IssueOwner, 5, true, true);
				base.IssueOwner.CurrentSettlement.Village.Hearth += 30f;
				if (this._isQuestWithMeatOffer)
				{
					ItemObject @object = Game.Current.ObjectManager.GetObject<ItemObject>("meat");
					MobileParty.MainParty.ItemRoster.AddToCounts(@object, this.OfferedMeatAmount);
				}
			}

			// Token: 0x040019C1 RID: 6593
			private const int IssueActiveTime = 30;

			// Token: 0x040019C2 RID: 6594
			private const int QuestDuration = 30;

			// Token: 0x040019C3 RID: 6595
			private const int VillageHearthConstant = 300;

			// Token: 0x040019C4 RID: 6596
			private const int AlternativeSolutionTroopTierRequirement = 2;

			// Token: 0x040019C5 RID: 6597
			private const int CompanionRequiredSkillLevel = 120;

			// Token: 0x040019C6 RID: 6598
			[CachedData]
			private readonly MBList<ItemObject> _possibleAnimals = new MBList<ItemObject>
			{
				Game.Current.ObjectManager.GetObject<ItemObject>("cow"),
				Game.Current.ObjectManager.GetObject<ItemObject>("mule"),
				Game.Current.ObjectManager.GetObject<ItemObject>("sumpter_horse")
			};

			// Token: 0x040019C7 RID: 6599
			[SaveableField(1)]
			private ItemObject _selectedAnimal;

			// Token: 0x040019C8 RID: 6600
			[SaveableField(2)]
			private bool _isQuestWithMeatOffer;

			// Token: 0x040019C9 RID: 6601
			[SaveableField(3)]
			private int _requestedAnimalAmount;
		}

		// Token: 0x02000629 RID: 1577
		public class HeadmanVillageNeedsDraughtAnimalsIssueQuest : QuestBase
		{
			// Token: 0x06004B0A RID: 19210 RVA: 0x0014E4AC File Offset: 0x0014C6AC
			internal static void AutoGeneratedStaticCollectObjectsHeadmanVillageNeedsDraughtAnimalsIssueQuest(object o, List<object> collectedObjects)
			{
				((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004B0B RID: 19211 RVA: 0x0014E4BA File Offset: 0x0014C6BA
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._requestedAnimal);
				collectedObjects.Add(this._questProgressLogTest);
			}

			// Token: 0x06004B0C RID: 19212 RVA: 0x0014E4DB File Offset: 0x0014C6DB
			internal static object AutoGeneratedGetMemberValue_requestedAnimal(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest)o)._requestedAnimal;
			}

			// Token: 0x06004B0D RID: 19213 RVA: 0x0014E4E8 File Offset: 0x0014C6E8
			internal static object AutoGeneratedGetMemberValue_requestedAnimalAmount(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest)o)._requestedAnimalAmount;
			}

			// Token: 0x06004B0E RID: 19214 RVA: 0x0014E4FA File Offset: 0x0014C6FA
			internal static object AutoGeneratedGetMemberValue_isQuestWithMeatOffer(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest)o)._isQuestWithMeatOffer;
			}

			// Token: 0x06004B0F RID: 19215 RVA: 0x0014E50C File Offset: 0x0014C70C
			internal static object AutoGeneratedGetMemberValue_discountValue(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest)o)._discountValue;
			}

			// Token: 0x06004B10 RID: 19216 RVA: 0x0014E51E File Offset: 0x0014C71E
			internal static object AutoGeneratedGetMemberValue_offeredMeatAmount(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest)o)._offeredMeatAmount;
			}

			// Token: 0x06004B11 RID: 19217 RVA: 0x0014E530 File Offset: 0x0014C730
			internal static object AutoGeneratedGetMemberValue_questProgressLogTest(object o)
			{
				return ((HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest)o)._questProgressLogTest;
			}

			// Token: 0x17000F9B RID: 3995
			// (get) Token: 0x06004B12 RID: 19218 RVA: 0x0014E53D File Offset: 0x0014C73D
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=MXLcZPaO}Village Needs Draught Animals", null);
				}
			}

			// Token: 0x17000F9C RID: 3996
			// (get) Token: 0x06004B13 RID: 19219 RVA: 0x0014E54A File Offset: 0x0014C74A
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17000F9D RID: 3997
			// (get) Token: 0x06004B14 RID: 19220 RVA: 0x0014E550 File Offset: 0x0014C750
			private TextObject QuestStartedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=V7YG3nKb}{QUEST_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}she{?}he{\\?} needs {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{PLURAL(SELECTED_ANIMAL)}{?}{SELECTED_ANIMAL}{\\?}{.%} for {?QUEST_GIVER.GENDER}her{?}his{\\?} village. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to bring {REQUESTED_ANIMAL_AMOUNT} {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{PLURAL(SELECTED_ANIMAL)}{?}{SELECTED_ANIMAL}{\\?}{.%} to {?QUEST_GIVER.GENDER}her{?}him{\\?}.", null);
					textObject.SetTextVariable("REQUESTED_ANIMAL_AMOUNT", this._requestedAnimalAmount);
					textObject.SetTextVariable("SELECTED_ANIMAL", this._requestedAnimal.Name);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000F9E RID: 3998
			// (get) Token: 0x06004B15 RID: 19221 RVA: 0x0014E5AC File Offset: 0x0014C7AC
			private TextObject QuestStartedLogTextWithMeat
			{
				get
				{
					TextObject textObject = new TextObject("{=7VUNi3zy}{QUEST_GIVER.LINK} will make payment as {MEAT_AMOUNT} meat when the task is done.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("MEAT_AMOUNT", this._offeredMeatAmount);
					return textObject;
				}
			}

			// Token: 0x17000F9F RID: 3999
			// (get) Token: 0x06004B16 RID: 19222 RVA: 0x0014E5F0 File Offset: 0x0014C7F0
			private TextObject QuestSuccessLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=uubL3Uck}You brought {REQUESTED_ANIMAL_AMOUNT} {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{PLURAL(SELECTED_ANIMAL)}{?}{SELECTED_ANIMAL}{\\?}{.%} to {?QUEST_GIVER.GENDER}her{?}him{\\?} as promised.", null);
					textObject.SetTextVariable("REQUESTED_ANIMAL_AMOUNT", this._requestedAnimalAmount);
					textObject.SetTextVariable("SELECTED_ANIMAL", this._requestedAnimal.Name);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FA0 RID: 4000
			// (get) Token: 0x06004B17 RID: 19223 RVA: 0x0014E64C File Offset: 0x0014C84C
			private TextObject QuestStartedLogTextWithDenars
			{
				get
				{
					TextObject textObject = new TextObject("{=7LjTNs1k}{QUEST_GIVER.LINK} will pay you {REWARD_GOLD}{GOLD_ICON} denars when the task is done.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17000FA1 RID: 4001
			// (get) Token: 0x06004B18 RID: 19224 RVA: 0x0014E6A4 File Offset: 0x0014C8A4
			private TextObject QuestCanceledWarDeclaredLog
			{
				get
				{
					TextObject textObject = new TextObject("{=vW6kBki9}Your clan is now at war with {QUEST_GIVER.LINK}'s realm. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FA2 RID: 4002
			// (get) Token: 0x06004B19 RID: 19225 RVA: 0x0014E6D8 File Offset: 0x0014C8D8
			private TextObject PlayerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17000FA3 RID: 4003
			// (get) Token: 0x06004B1A RID: 19226 RVA: 0x0014E70C File Offset: 0x0014C90C
			private TextObject QuestGiverVillageRaided
			{
				get
				{
					TextObject textObject = new TextObject("{=gJG0xmAq}{QUEST_GIVER.LINK}'s village {QUEST_SETTLEMENT} was raided. Your agreement with {QUEST_GIVER.LINK} is canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17000FA4 RID: 4004
			// (get) Token: 0x06004B1B RID: 19227 RVA: 0x0014E75C File Offset: 0x0014C95C
			private TextObject QuestFailedWithTimeOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=xvCzjcjU}You failed to deliver {REQUESTED_ANIMAL_AMOUNT} {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{REQUESTED_ANIMAL}{.s}{?}{REQUESTED_ANIMAL}{\\?}{.%} to {QUEST_GIVER.LINK} in time.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("REQUESTED_ANIMAL_AMOUNT", this._requestedAnimalAmount);
					textObject.SetTextVariable("REQUESTED_ANIMAL", this._requestedAnimal.Name);
					return textObject;
				}
			}

			// Token: 0x06004B1C RID: 19228 RVA: 0x0014E7B8 File Offset: 0x0014C9B8
			public HeadmanVillageNeedsDraughtAnimalsIssueQuest(string questId, Hero giverHero, CampaignTime duration, ItemObject requestedAnimal, int requestedAnimalAmount, bool isQuestWithMeatOffer, int offeredMeatAmount, int rewardGold)
				: base(questId, giverHero, duration, rewardGold)
			{
				this._isQuestWithMeatOffer = isQuestWithMeatOffer;
				this._requestedAnimal = requestedAnimal;
				this._requestedAnimalAmount = requestedAnimalAmount;
				this._offeredMeatAmount = offeredMeatAmount;
				this.CalculateRequestedAnimalCountOnPlayer();
				this.SetDialogs();
				base.InitializeQuestOnCreation();
				if (!isQuestWithMeatOffer && MBRandom.RandomFloat <= 0.7f)
				{
					this._discountValue = (int)((float)this.RewardGold * 0.3f);
				}
			}

			// Token: 0x06004B1D RID: 19229 RVA: 0x0014E828 File Offset: 0x0014CA28
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddTrackedObject(base.QuestGiver.CurrentSettlement);
				TextObject textObject = new TextObject("{=yc9rGlzb}Ready to deliver {.%}{?(REQUESTED_ANIMAL_AMOUNT > 1)}{PLURAL(SELECTED_ANIMAL)}{?}{SELECTED_ANIMAL}{\\?}:{.%}", null);
				textObject.SetTextVariable("SELECTED_ANIMAL", this._requestedAnimal.Name);
				textObject.SetTextVariable("REQUESTED_ANIMAL_AMOUNT", this._requestedAnimalAmount);
				this._questProgressLogTest = base.AddDiscreteLog(this.QuestStartedLogText, textObject, this._currentAnimalAmount, this._requestedAnimalAmount, null, false);
				base.AddLog(this._isQuestWithMeatOffer ? this.QuestStartedLogTextWithMeat : this.QuestStartedLogTextWithDenars, false);
			}

			// Token: 0x06004B1E RID: 19230 RVA: 0x0014E8C0 File Offset: 0x0014CAC0
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=msDCQIY7}Thank you, {?PLAYER.GENDER}madam{?}sir{\\?}. In these hard times, people like you are a gift from Heaven… The village will never forget that you were willing to help. Good luck.", null), null, null).Condition(() => Hero.OneToOneConversationHero == this.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				TextObject textObject = new TextObject("{=rRGbn0Sm}Thank you {?PLAYER.GENDER}madam{?}sir{\\?}. You did a great favor to people of {ISSUE_VILLAGE}.", null);
				textObject.SetTextVariable("ISSUE_VILLAGE", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
				TextObject npcDiscountLine = new TextObject("{=p9rzYV4T}Things have gotten worse for the village, since we last met {?PLAYER.GENDER}madam{?}sir{\\?}. Is it possible that we could pay you a bit less, what about {DISCOUNTED_REWARD}{GOLD_ICON} denars?", null);
				TextObject textObject2 = new TextObject("{=4kealpZK}Have you brought the animals {?PLAYER.GENDER}madam{?}sir{\\?}?", null);
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(textObject2, null, null).Condition(() => Hero.OneToOneConversationHero == this.QuestGiver)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=CjuVoxaC}Yes, Here are your animals.", null), null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.CheckIfPlayerHasEnoughAnimals))
					.BeginNpcOptions()
					.NpcOption(npcDiscountLine, delegate
					{
						if (this._discountValue > 0)
						{
							npcDiscountLine.SetTextVariable("DISCOUNTED_REWARD", this.RewardGold - this._discountValue);
							npcDiscountLine.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
							return true;
						}
						return false;
					}, null, null)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=KBmAqg54}No problem, you can pay what you can afford.", null), null)
					.NpcLine(textObject, null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestSuccessPlayerDeliveredAnimalsWithAcceptingDiscount))
					.CloseDialog()
					.PlayerOption(new TextObject("{=kYc90hEl}Sorry, but the price is what we agreed on. I can't lower it.", null), null)
					.NpcLine(new TextObject("{=r4pLtP5V}You're right. We agreed on this price. Thank you for your efforts.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestSuccessPlayerDeliveredAnimalsWithoutAcceptingDiscount))
					.CloseDialog()
					.EndPlayerOptions()
					.NpcOption(new TextObject("{=l8ezl95j}Thank you {?PLAYER.GENDER}madam{?}sir{\\?}. Here is what we promised.", null), null, null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestSuccessPlayerDeliveredAnimalsNormal))
					.CloseDialog()
					.EndNpcOptions()
					.PlayerOption(new TextObject("{=PI6ikMsc}I'm working on it.", null), null)
					.NpcLine(new TextObject("{=4MQQf3wp}We are waiting for your arrival. ", null), null, null)
					.CloseDialog()
					.EndPlayerOptions();
			}

			// Token: 0x06004B1F RID: 19231 RVA: 0x0014EAA8 File Offset: 0x0014CCA8
			private void CalculateRequestedAnimalCountOnPlayer()
			{
				int num = 0;
				foreach (ItemRosterElement itemRosterElement in MobileParty.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item == this._requestedAnimal)
					{
						num += itemRosterElement.Amount;
					}
				}
				this._currentAnimalAmount = num;
			}

			// Token: 0x06004B20 RID: 19232 RVA: 0x0014EB1C File Offset: 0x0014CD1C
			private bool CheckIfPlayerHasEnoughAnimals()
			{
				this.CalculateRequestedAnimalCountOnPlayer();
				return this._currentAnimalAmount >= this._requestedAnimalAmount;
			}

			// Token: 0x06004B21 RID: 19233 RVA: 0x0014EB35 File Offset: 0x0014CD35
			private void QuestSuccessPlayerDeliveredAnimalsNormal()
			{
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, 5, true, true);
				base.QuestGiver.CurrentSettlement.Village.Hearth += 30f;
				this.ApplyRewards(false);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004B22 RID: 19234 RVA: 0x0014EB74 File Offset: 0x0014CD74
			private void QuestSuccessPlayerDeliveredAnimalsWithAcceptingDiscount()
			{
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, 8, true, true);
				TraitLevelingHelper.OnIssueSolvedThroughBetrayal(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Mercy, 30)
				});
				base.QuestGiver.CurrentSettlement.Village.Hearth += 80f;
				this.ApplyRewards(true);
				foreach (Hero hero in base.QuestGiver.CurrentSettlement.Notables)
				{
					if (hero != base.QuestGiver)
					{
						ChangeRelationAction.ApplyPlayerRelation(hero, 3, true, true);
					}
				}
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004B23 RID: 19235 RVA: 0x0014EC38 File Offset: 0x0014CE38
			private void QuestSuccessPlayerDeliveredAnimalsWithoutAcceptingDiscount()
			{
				TraitLevelingHelper.OnIssueSolvedThroughBetrayal(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Mercy, -20)
				});
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, 5, true, true);
				base.QuestGiver.CurrentSettlement.Village.Hearth += 50f;
				this.ApplyRewards(false);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004B24 RID: 19236 RVA: 0x0014ECA4 File Offset: 0x0014CEA4
			private void ApplyRewards(bool applyDiscount)
			{
				if (this._isQuestWithMeatOffer)
				{
					ItemObject @object = Game.Current.ObjectManager.GetObject<ItemObject>("meat");
					MobileParty.MainParty.ItemRoster.AddToCounts(@object, this._offeredMeatAmount);
					using (List<Hero>.Enumerator enumerator = base.QuestGiver.CurrentSettlement.Notables.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							Hero hero = enumerator.Current;
							if (hero != base.QuestGiver)
							{
								ChangeRelationAction.ApplyPlayerRelation(hero, 3, true, true);
							}
						}
						return;
					}
				}
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, applyDiscount ? (this.RewardGold - this._discountValue) : this.RewardGold, false);
			}

			// Token: 0x06004B25 RID: 19237 RVA: 0x0014ED64 File Offset: 0x0014CF64
			protected override void OnCompleteWithSuccess()
			{
				base.AddLog(this.QuestSuccessLogText, false);
				MobileParty.MainParty.ItemRoster.FindIndexOfItem(this._requestedAnimal);
				int num = 0;
				foreach (ItemRosterElement itemRosterElement in MobileParty.MainParty.ItemRoster)
				{
					if (itemRosterElement.EquipmentElement.Item == this._requestedAnimal)
					{
						int num2 = ((itemRosterElement.Amount >= this._requestedAnimalAmount) ? (this._requestedAnimalAmount - num) : itemRosterElement.Amount);
						MobileParty.MainParty.ItemRoster.AddToCounts(itemRosterElement.EquipmentElement.Item, -num2);
						num += itemRosterElement.Amount;
						if (num >= this._requestedAnimalAmount)
						{
							break;
						}
					}
				}
				TraitLevelingHelper.OnIssueSolvedThroughBetrayal(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				base.QuestGiver.AddPower(10f);
			}

			// Token: 0x06004B26 RID: 19238 RVA: 0x0014EE74 File Offset: 0x0014D074
			protected override void OnTimedOut()
			{
				base.AddLog(this.QuestFailedWithTimeOutLogText, false);
				base.QuestGiver.AddPower(-10f);
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, -5, true, true);
				base.QuestGiver.CurrentSettlement.Village.Hearth -= 30f;
			}

			// Token: 0x06004B27 RID: 19239 RVA: 0x0014EED0 File Offset: 0x0014D0D0
			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.VillageBeingRaided.AddNonSerializedListener(this, new Action<Village>(this.OnVillageRaided));
				CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.OnPlayerInventoryExchange));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			// Token: 0x06004B28 RID: 19240 RVA: 0x0014EF50 File Offset: 0x0014D150
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x06004B29 RID: 19241 RVA: 0x0014EF64 File Offset: 0x0014D164
			private void OnPlayerInventoryExchange(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
			{
				int num = 0;
				foreach (ValueTuple<ItemRosterElement, int> valueTuple in purchasedItems)
				{
					ItemRosterElement itemRosterElement = valueTuple.Item1;
					if (itemRosterElement.EquipmentElement.Item == this._requestedAnimal)
					{
						int num2 = num;
						itemRosterElement = valueTuple.Item1;
						num = num2 + itemRosterElement.Amount;
					}
				}
				foreach (ValueTuple<ItemRosterElement, int> valueTuple2 in soldItems)
				{
					ItemRosterElement itemRosterElement = valueTuple2.Item1;
					if (itemRosterElement.EquipmentElement.Item == this._requestedAnimal)
					{
						int num3 = num;
						itemRosterElement = valueTuple2.Item1;
						num = num3 - itemRosterElement.Amount;
					}
				}
				this._currentAnimalAmount += num;
				this._currentAnimalAmount = (int)MathF.Clamp((float)this._currentAnimalAmount, 0f, (float)this._requestedAnimalAmount);
				this._questProgressLogTest.UpdateCurrentProgress(this._currentAnimalAmount);
			}

			// Token: 0x06004B2A RID: 19242 RVA: 0x0014F084 File Offset: 0x0014D284
			private void OnVillageRaided(Village village)
			{
				if (village == base.QuestGiver.CurrentSettlement.Village)
				{
					base.AddLog(this.QuestGiverVillageRaided, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x06004B2B RID: 19243 RVA: 0x0014F0AE File Offset: 0x0014D2AE
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this.QuestCanceledWarDeclaredLog);
				}
			}

			// Token: 0x06004B2C RID: 19244 RVA: 0x0014F0DD File Offset: 0x0014D2DD
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.PlayerDeclaredWarQuestLogText, this.QuestCanceledWarDeclaredLog);
			}

			// Token: 0x06004B2D RID: 19245 RVA: 0x0014F0F4 File Offset: 0x0014D2F4
			protected override void OnFinalize()
			{
			}

			// Token: 0x06004B2E RID: 19246 RVA: 0x0014F0F6 File Offset: 0x0014D2F6
			protected override void InitializeQuestOnGameLoad()
			{
				this.CalculateRequestedAnimalCountOnPlayer();
				this.SetDialogs();
			}

			// Token: 0x040019CA RID: 6602
			[SaveableField(1)]
			private ItemObject _requestedAnimal;

			// Token: 0x040019CB RID: 6603
			[SaveableField(2)]
			private int _requestedAnimalAmount;

			// Token: 0x040019CC RID: 6604
			private int _currentAnimalAmount;

			// Token: 0x040019CD RID: 6605
			[SaveableField(3)]
			private bool _isQuestWithMeatOffer;

			// Token: 0x040019CE RID: 6606
			[SaveableField(4)]
			private int _discountValue;

			// Token: 0x040019CF RID: 6607
			[SaveableField(5)]
			private int _offeredMeatAmount;

			// Token: 0x040019D0 RID: 6608
			[SaveableField(6)]
			private JournalLog _questProgressLogTest;
		}

		// Token: 0x0200062A RID: 1578
		public class HeadmanVillageNeedsDraughtAnimalsIssueBehaviorTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004B2F RID: 19247 RVA: 0x0014F104 File Offset: 0x0014D304
			public HeadmanVillageNeedsDraughtAnimalsIssueBehaviorTypeDefiner()
				: base(812000)
			{
			}

			// Token: 0x06004B30 RID: 19248 RVA: 0x0014F111 File Offset: 0x0014D311
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssue), 1, null);
				base.AddClassDefinition(typeof(HeadmanVillageNeedsDraughtAnimalsIssueBehavior.HeadmanVillageNeedsDraughtAnimalsIssueQuest), 2, null);
			}
		}
	}
}
