using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000313 RID: 787
	public class LandlordTrainingForRetainersIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D02 RID: 11522 RVA: 0x000BBCC5 File Offset: 0x000B9EC5
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D03 RID: 11523 RVA: 0x000BBCDE File Offset: 0x000B9EDE
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002D04 RID: 11524 RVA: 0x000BBCE0 File Offset: 0x000B9EE0
		private bool ConditionsHold(Hero issueGiver)
		{
			Settlement currentSettlement = issueGiver.CurrentSettlement;
			ItemObject itemObject;
			if (currentSettlement == null)
			{
				itemObject = null;
			}
			else
			{
				Village village = currentSettlement.Village;
				if (village == null)
				{
					itemObject = null;
				}
				else
				{
					VillageType villageType = village.VillageType;
					itemObject = ((villageType != null) ? villageType.PrimaryProduction : null);
				}
			}
			ItemObject itemObject2 = itemObject;
			return issueGiver.IsRuralNotable && issueGiver.CurrentSettlement.IsVillage && itemObject2.HasHorseComponent && (itemObject2.ItemCategory == DefaultItemCategories.Horse || itemObject2.ItemCategory == DefaultItemCategories.NobleHorse || itemObject2.ItemCategory == DefaultItemCategories.WarHorse);
		}

		// Token: 0x06002D05 RID: 11525 RVA: 0x000BBD60 File Offset: 0x000B9F60
		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002D06 RID: 11526 RVA: 0x000BBDC4 File Offset: 0x000B9FC4
		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue(issueOwner);
		}

		// Token: 0x04000D92 RID: 3474
		private const IssueBase.IssueFrequency LandlordTrainingForRetainersIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x0200063C RID: 1596
		public class LandlordTrainingForRetainersIssue : IssueBase
		{
			// Token: 0x06004CE7 RID: 19687 RVA: 0x00155E49 File Offset: 0x00154049
			internal static void AutoGeneratedStaticCollectObjectsLandlordTrainingForRetainersIssue(object o, List<object> collectedObjects)
			{
				((LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004CE8 RID: 19688 RVA: 0x00155E57 File Offset: 0x00154057
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x17001039 RID: 4153
			// (get) Token: 0x06004CE9 RID: 19689 RVA: 0x00155E60 File Offset: 0x00154060
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Casualties | IssueBase.AlternativeSolutionScaleFlag.FailureRisk;
				}
			}

			// Token: 0x1700103A RID: 4154
			// (get) Token: 0x06004CEA RID: 19690 RVA: 0x00155E64 File Offset: 0x00154064
			private int BorrowedTroopCount
			{
				get
				{
					return 3 + MathF.Ceiling(17f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x1700103B RID: 4155
			// (get) Token: 0x06004CEB RID: 19691 RVA: 0x00155E79 File Offset: 0x00154079
			protected override bool IssueQuestCanBeDuplicated
			{
				get
				{
					return false;
				}
			}

			// Token: 0x1700103C RID: 4156
			// (get) Token: 0x06004CEC RID: 19692 RVA: 0x00155E7C File Offset: 0x0015407C
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 8 + MathF.Ceiling(19f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x1700103D RID: 4157
			// (get) Token: 0x06004CED RID: 19693 RVA: 0x00155E91 File Offset: 0x00154091
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 9 + MathF.Ceiling(10f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x1700103E RID: 4158
			// (get) Token: 0x06004CEE RID: 19694 RVA: 0x00155EA7 File Offset: 0x001540A7
			protected override int RewardGold
			{
				get
				{
					return (int)(2000f + 4000f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x1700103F RID: 4159
			// (get) Token: 0x06004CEF RID: 19695 RVA: 0x00155EBC File Offset: 0x001540BC
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=q2aed7tv}Train troops for {ISSUE_OWNER.NAME}", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001040 RID: 4160
			// (get) Token: 0x06004CF0 RID: 19696 RVA: 0x00155EF0 File Offset: 0x001540F0
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=va7rEVZn}{ISSUE_OWNER.NAME}, a landowner in {ISSUE_SETTLEMENT}, needs some of his watchmen and retainers to gain some real war experience. {?ISSUE_OWNER.GENDER}She{?}He{\\?} wants you to take them with you on some fairly safe expeditions, such as hunting some bandits. ", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.IssueSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17001041 RID: 4161
			// (get) Token: 0x06004CF1 RID: 19697 RVA: 0x00155F39 File Offset: 0x00154139
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(500f + 700f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x17001042 RID: 4162
			// (get) Token: 0x06004CF2 RID: 19698 RVA: 0x00155F4E File Offset: 0x0015414E
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=dBphGKTI}Things are getting a bit rough around these parts. I have some lads who help me out with local troublemakers, but they wouldn't last long against real warriors. Maybe you could take them out, show them what actual war is about. I'm not expecting you to make them fit for a noble's retinue, but at least I want to give the bandits around here some pause for thought.", null);
				}
			}

			// Token: 0x17001043 RID: 4163
			// (get) Token: 0x06004CF3 RID: 19699 RVA: 0x00155F5B File Offset: 0x0015415B
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=1REltXXz}I'll help if I can.", null);
				}
			}

			// Token: 0x17001044 RID: 4164
			// (get) Token: 0x06004CF4 RID: 19700 RVA: 0x00155F68 File Offset: 0x00154168
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=uLiRasv1}Maybe you could take them in your party for a while, until they get a bit of experience?", null);
				}
			}

			// Token: 0x17001045 RID: 4165
			// (get) Token: 0x06004CF5 RID: 19701 RVA: 0x00155F75 File Offset: 0x00154175
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=rutgr1VF}Or if you can assign a companion for a while, they can stay here and train the men... I will also give you some provisions and money for their expenses and your trouble.", null);
				}
			}

			// Token: 0x17001046 RID: 4166
			// (get) Token: 0x06004CF6 RID: 19702 RVA: 0x00155F82 File Offset: 0x00154182
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=QxEPwLyp}I'll take your men into my party and show them a bit of the world.", null);
				}
			}

			// Token: 0x17001047 RID: 4167
			// (get) Token: 0x06004CF7 RID: 19703 RVA: 0x00155F8F File Offset: 0x0015418F
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=oT4JNyFp}I will assign one of my companions to train your men.", null);
				}
			}

			// Token: 0x17001048 RID: 4168
			// (get) Token: 0x06004CF8 RID: 19704 RVA: 0x00155F9C File Offset: 0x0015419C
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=dE3vxfTo}Excellent. I'm sure they can learn a lot from your veterans.", null);
				}
			}

			// Token: 0x17001049 RID: 4169
			// (get) Token: 0x06004CF9 RID: 19705 RVA: 0x00155FA9 File Offset: 0x001541A9
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=QRRgXOrN}As expected, your veterans have really sharpened up our boys. Please pass on my thanks to them, {?PLAYER.GENDER}madam{?}sir{\\?}.", null);
				}
			}

			// Token: 0x1700104A RID: 4170
			// (get) Token: 0x06004CFA RID: 19706 RVA: 0x00155FB6 File Offset: 0x001541B6
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x1700104B RID: 4171
			// (get) Token: 0x06004CFB RID: 19707 RVA: 0x00155FB9 File Offset: 0x001541B9
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x1700104C RID: 4172
			// (get) Token: 0x06004CFC RID: 19708 RVA: 0x00155FBC File Offset: 0x001541BC
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=Ci8NCwgW}{ISSUE_GIVER.LINK} a landowner in {SETTLEMENT}, asked you to train recruits for {?QUEST_GIVER.GENDER}her{?}him{\\?}. {?QUEST_GIVER.GENDER}She{?}He{\\?} gave you {NUMBER_OF_MEN} men, hoping to take them back when once they are veterans.{newline}You sent them with one of your companions {COMPANION.LINK} to hunt down some easy targets. You arranged to meet them in {RETURN_DAYS} days.", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					textObject.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("NUMBER_OF_MEN", base.GetTotalAlternativeSolutionNeededMenCount());
					return textObject;
				}
			}

			// Token: 0x1700104D RID: 4173
			// (get) Token: 0x06004CFD RID: 19709 RVA: 0x00156044 File Offset: 0x00154244
			public override TextObject IssueAlternativeSolutionSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=AndfZYIJ}Your companion managed to return all of the troops {ISSUE_GIVER.LINK} gave you to train. {?ISSUE_GIVER.GENDER}She{?}He{\\?} sends you the following letter.\n\n“{?PLAYER.GENDER}Madam{?}Sir{\\?}, Thank you for looking after my men. You honored our agreement, and you have my gratitude. Please accept this {GOLD}{GOLD_ICON}.", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					textObject.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, false);
					textObject.SetTextVariable("GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x06004CFE RID: 19710 RVA: 0x001560A7 File Offset: 0x001542A7
			public LandlordTrainingForRetainersIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
			}

			// Token: 0x06004CFF RID: 19711 RVA: 0x001560BA File Offset: 0x001542BA
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return -1f;
				}
				return 0f;
			}

			// Token: 0x06004D00 RID: 19712 RVA: 0x001560CF File Offset: 0x001542CF
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Steward) >= hero.GetSkillValue(DefaultSkills.Leadership)) ? DefaultSkills.Steward : DefaultSkills.Leadership, 120);
			}

			// Token: 0x06004D01 RID: 19713 RVA: 0x001560FC File Offset: 0x001542FC
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004D02 RID: 19714 RVA: 0x0015611D File Offset: 0x0015431D
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				this.RelationshipChangeWithIssueOwner = 5;
				base.IssueOwner.AddPower(10f);
			}

			// Token: 0x06004D03 RID: 19715 RVA: 0x00156136 File Offset: 0x00154336
			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				this.RelationshipChangeWithIssueOwner = -5;
				base.IssueOwner.AddPower(-10f);
			}

			// Token: 0x06004D04 RID: 19716 RVA: 0x00156150 File Offset: 0x00154350
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x06004D05 RID: 19717 RVA: 0x00156168 File Offset: 0x00154368
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			// Token: 0x06004D06 RID: 19718 RVA: 0x00156176 File Offset: 0x00154376
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x06004D07 RID: 19719 RVA: 0x00156179 File Offset: 0x00154379
			public override bool IssueStayAliveConditions()
			{
				return !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid;
			}

			// Token: 0x06004D08 RID: 19720 RVA: 0x001561A2 File Offset: 0x001543A2
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x06004D09 RID: 19721 RVA: 0x001561A4 File Offset: 0x001543A4
			protected override void OnGameLoad()
			{
			}

			// Token: 0x06004D0A RID: 19722 RVA: 0x001561A6 File Offset: 0x001543A6
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(60f), base.IssueDifficultyMultiplier, this.RewardGold);
			}

			// Token: 0x06004D0B RID: 19723 RVA: 0x001561CC File Offset: 0x001543CC
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				skill = null;
				relationHero = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.CurrentSettlement.MapFaction, Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (MobileParty.MainParty.MemberRoster.TotalManCount + this.BorrowedTroopCount > PartyBase.MainParty.PartySizeLimit)
				{
					flag |= IssueBase.PreconditionFlags.PartySizeLimit;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x06004D0C RID: 19724 RVA: 0x00156250 File Offset: 0x00154450
			private int GetTier2TroopCount(TroopRoster troopRoster)
			{
				int num = 0;
				foreach (TroopRosterElement troopRosterElement in troopRoster.GetTroopRoster())
				{
					if (troopRosterElement.Character.Tier >= 2 && !troopRosterElement.Character.IsNotTransferableInPartyScreen)
					{
						num += troopRoster.GetTroopCount(troopRosterElement.Character);
					}
				}
				return num;
			}

			// Token: 0x04001A15 RID: 6677
			private const int QuestTimeLimit = 60;

			// Token: 0x04001A16 RID: 6678
			private const int IssueDuration = 30;

			// Token: 0x04001A17 RID: 6679
			private const int AlternativeSolutionTroopTierRequirement = 2;

			// Token: 0x04001A18 RID: 6680
			private const int SkillLimit = 120;
		}

		// Token: 0x0200063D RID: 1597
		public class LandlordTrainingForRetainersIssueQuest : QuestBase
		{
			// Token: 0x06004D0D RID: 19725 RVA: 0x001562CC File Offset: 0x001544CC
			internal static void AutoGeneratedStaticCollectObjectsLandlordTrainingForRetainersIssueQuest(object o, List<object> collectedObjects)
			{
				((LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06004D0E RID: 19726 RVA: 0x001562DA File Offset: 0x001544DA
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._playerStartsQuestLog);
			}

			// Token: 0x06004D0F RID: 19727 RVA: 0x001562EF File Offset: 0x001544EF
			internal static object AutoGeneratedGetMemberValue_difficultyMultiplier(object o)
			{
				return ((LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest)o)._difficultyMultiplier;
			}

			// Token: 0x06004D10 RID: 19728 RVA: 0x00156301 File Offset: 0x00154501
			internal static object AutoGeneratedGetMemberValue_playerStartsQuestLog(object o)
			{
				return ((LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest)o)._playerStartsQuestLog;
			}

			// Token: 0x1700104E RID: 4174
			// (get) Token: 0x06004D11 RID: 19729 RVA: 0x0015630E File Offset: 0x0015450E
			private int _borrowedTroopCount
			{
				get
				{
					return 3 + MathF.Ceiling(17f * this._difficultyMultiplier);
				}
			}

			// Token: 0x1700104F RID: 4175
			// (get) Token: 0x06004D12 RID: 19730 RVA: 0x00156324 File Offset: 0x00154524
			private TextObject _questStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=fcRLq8LL}{QUEST_GIVER.LINK}, a landowner in {QUEST_SETTLEMENT}, asked you to train some recruits for {?QUEST_GIVER.GENDER}her{?}him{\\?}. {?QUEST_GIVER.GENDER}She{?}He{\\?} gave you {NUMBER_OF_MEN} men, hoping to take them back when once they have some experience.\nThe easiest way to train them without putting them in too much danger is to attack weak parties.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					textObject.SetTextVariable("NUMBER_OF_MEN", this._borrowedTroopCount);
					return textObject;
				}
			}

			// Token: 0x17001050 RID: 4176
			// (get) Token: 0x06004D13 RID: 19731 RVA: 0x00156384 File Offset: 0x00154584
			private TextObject _totalSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=4RNREbPW}You managed to return all of the troops {QUEST_GIVER.LINK} gave you to train. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter.{newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, Thank you for looking after my men. You honored our agreement, and you have my gratitude. Please accept this {GOLD}{GOLD_ICON}.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x17001051 RID: 4177
			// (get) Token: 0x06004D14 RID: 19732 RVA: 0x001563DC File Offset: 0x001545DC
			private TextObject _partialSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=yjAHh66a}You managed to return more than half of the troops {QUEST_GIVER.LINK} gave you to train. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. {newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, Thank you for returning my men to me. The losses they suffered are somewhat higher than I thought. I can only hope you did what you could to honor our agreement and try to keep them alive.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001052 RID: 4178
			// (get) Token: 0x06004D15 RID: 19733 RVA: 0x00156410 File Offset: 0x00154610
			private TextObject _weakSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=NXs7kr2B}You managed to return a fraction of the troops {QUEST_GIVER.LINK} gave you to train. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. {newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, Thank you for returning my men to me. The losses they suffered are somewhat higher than I thought. I can only hope you did what you could do to honor our agreement and try to keep them alive.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001053 RID: 4179
			// (get) Token: 0x06004D16 RID: 19734 RVA: 0x00156444 File Offset: 0x00154644
			private TextObject _failLog
			{
				get
				{
					TextObject textObject = new TextObject("{=YBEB7GLa}All the borrowed troops in your party are gone. You are unable to return any of the troops {QUEST_GIVER.LINK} gave you to train. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. {newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, I understand that all my men are dead. I asked you to try and keep them alive. I do not know what to say to their kinfolk. This is a breach of my trust.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001054 RID: 4180
			// (get) Token: 0x06004D17 RID: 19735 RVA: 0x00156478 File Offset: 0x00154678
			private TextObject _epicFailLog
			{
				get
				{
					TextObject textObject = new TextObject("{=eSpRuda1}You have decided to keep the borrowed troops {QUEST_GIVER.LINK} gave you to train. When {?QUEST_GIVER.GENDER}She{?}He{\\?} hears about this {?QUEST_GIVER.GENDER}she{?}he{\\?} sends you the following letter. {newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, I made it clear that I expected my men to be returned to me. I consider this a betrayal of my trust.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001055 RID: 4181
			// (get) Token: 0x06004D18 RID: 19736 RVA: 0x001564AC File Offset: 0x001546AC
			private TextObject _cancelLogOnWarDeclared
			{
				get
				{
					TextObject textObject = new TextObject("{=TrewB5c7}Now your {?IS_MAP_FACTION}clan{?}kingdom{\\?} is at war with the {QUEST_GIVER.LINK}'s lord. Your agreement with {QUEST_GIVER.LINK} becomes invalid.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("IS_MAP_FACTION", Clan.PlayerClan.IsMapFaction ? 1 : 0);
					return textObject;
				}
			}

			// Token: 0x17001056 RID: 4182
			// (get) Token: 0x06004D19 RID: 19737 RVA: 0x001564FC File Offset: 0x001546FC
			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001057 RID: 4183
			// (get) Token: 0x06004D1A RID: 19738 RVA: 0x00156530 File Offset: 0x00154730
			private TextObject _timeoutLog
			{
				get
				{
					TextObject textObject = new TextObject("{=txtsL6QQ}You failed to train the troops by the time {QUEST_GIVER.LINK} needed them back. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. “{?PLAYER.GENDER}Madam{?}Sir{\\?}, I expected my men to be returned to me. I consider this a breach of our agreement.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001058 RID: 4184
			// (get) Token: 0x06004D1B RID: 19739 RVA: 0x00156562 File Offset: 0x00154762
			private TextObject _crimeLog
			{
				get
				{
					TextObject textObject = new TextObject("{=faZuFQUF}You are accused in {SETTLEMENT} of a crime, and {QUEST_GIVER.LINK} no longer wants your help.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x17001059 RID: 4185
			// (get) Token: 0x06004D1C RID: 19740 RVA: 0x001565A2 File Offset: 0x001547A2
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=q2aed7tv}Train troops for {ISSUE_OWNER.NAME}", null);
					textObject.SetCharacterProperties("ISSUE_OWNER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			// Token: 0x1700105A RID: 4186
			// (get) Token: 0x06004D1D RID: 19741 RVA: 0x001565C6 File Offset: 0x001547C6
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x06004D1E RID: 19742 RVA: 0x001565C9 File Offset: 0x001547C9
			public LandlordTrainingForRetainersIssueQuest(string questId, Hero giverHero, CampaignTime duration, float difficultyMultiplier, int rewardGold)
				: base(questId, giverHero, duration, rewardGold)
			{
				this._difficultyMultiplier = difficultyMultiplier;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x06004D1F RID: 19743 RVA: 0x001565EC File Offset: 0x001547EC
			protected override void InitializeQuestOnGameLoad()
			{
				this._questGivenChar = MBObjectManager.Instance.GetObject<CharacterObject>("borrowed_troop");
				this._questGivenChar.SetTransferableInPartyScreen(false);
				this._questTargetChar = MBObjectManager.Instance.GetObject<CharacterObject>("veteran_borrowed_troop");
				this._questTargetChar.SetTransferableInPartyScreen(false);
				if (this._playerStartsQuestLog == null)
				{
					this._playerStartsQuestLog = base.JournalEntries.First<JournalLog>();
					base.UpdateQuestTaskStage(this._playerStartsQuestLog, PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar));
				}
				this.SetDialogs();
			}

			// Token: 0x06004D20 RID: 19744 RVA: 0x0015667C File Offset: 0x0015487C
			protected override void RegisterEvents()
			{
				CampaignEvents.OnTroopsDesertedEvent.AddNonSerializedListener(this, new Action<MobileParty, TroopRoster>(this.OnTroopsDeserted));
				CampaignEvents.OnPlayerBattleEndEvent.AddNonSerializedListener(this, new Action<MapEvent>(this.OnPlayerBattleEnd));
				CampaignEvents.PlayerUpgradedTroopsEvent.AddNonSerializedListener(this, new Action<CharacterObject, CharacterObject, int>(this.OnPlayerUpgradedTroops));
				CampaignEvents.OnSettlementLeftEvent.AddNonSerializedListener(this, new Action<MobileParty, Settlement>(this.OnSettlementLeft));
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.HourlyTick));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
				CampaignEvents.OnTroopGivenToSettlementEvent.AddNonSerializedListener(this, new Action<Hero, Settlement, TroopRoster>(this.OnTroopGivenToSettlement));
			}

			// Token: 0x06004D21 RID: 19745 RVA: 0x00156758 File Offset: 0x00154958
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=J8qFgwal}Excellent. I'll tell the lads to join your party.", null), null, null).Condition(() => CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.NpcLineWithVariation("{=7lee0h29}One thing - if one or two die, that's the fortunes of war, things could go even worse if we get raided and have no one who can fight back... But try not to get them all massacred. These men will take some risks for me, but not have their lives thrown away to no purpose.", null, null)
					.Variation("{=EaPQ2mm7}One thing - if possible, try not to get them all killed, will you? Green troops aren't much use to me, but corpses are even less.", new object[] { "UngratefulTag", 1, "MercyTag", -1 })
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=r9F1W4KZ}Yes? Have you been able to train my men?", null), null, null).Condition(() => CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=PVO3YFSq}Yes we are heading out now.", null), null)
					.NpcLine(new TextObject("{=3SBDbPjD}Good to hear that! Safe journeys.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=wErSpkjy}I'm still working on it.", null), null)
					.NpcLine(new TextObject("{=3SBDbPjD}Good to hear that! Safe journeys.", null), null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x06004D22 RID: 19746 RVA: 0x00156884 File Offset: 0x00154A84
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				this._questGivenChar = MBObjectManager.Instance.GetObject<CharacterObject>("borrowed_troop");
				this._questGivenChar.SetTransferableInPartyScreen(false);
				this._questTargetChar = MBObjectManager.Instance.GetObject<CharacterObject>("veteran_borrowed_troop");
				this._questTargetChar.SetTransferableInPartyScreen(false);
				PartyBase.MainParty.AddElementToMemberRoster(this._questGivenChar, this._borrowedTroopCount, false);
				PartyBase.MainParty.ItemRoster.AddToCounts(DefaultItems.Grain, 3);
				this._playerStartsQuestLog = base.AddDiscreteLog(this._questStartLog, new TextObject("{=wUb5h4a3}Trained Troops", null), PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar), this._borrowedTroopCount, null, false);
			}

			// Token: 0x06004D23 RID: 19747 RVA: 0x00156941 File Offset: 0x00154B41
			private void OnPlayerBattleEnd(MapEvent mapEvent)
			{
				if (mapEvent.IsPlayerMapEvent)
				{
					this.CheckFail();
				}
			}

			// Token: 0x06004D24 RID: 19748 RVA: 0x00156952 File Offset: 0x00154B52
			private void OnTroopsDeserted(MobileParty mobileParty, TroopRoster desertedTroops)
			{
				if (mobileParty.IsMainParty)
				{
					this.CheckFail();
				}
			}

			// Token: 0x06004D25 RID: 19749 RVA: 0x00156964 File Offset: 0x00154B64
			private void OnPlayerUpgradedTroops(CharacterObject upgradeFromTroop, CharacterObject upgradeToTroop, int number)
			{
				if (upgradeFromTroop == this._questGivenChar && upgradeToTroop == this._questTargetChar && number > 0)
				{
					base.UpdateQuestTaskStage(this._playerStartsQuestLog, PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar));
				}
				if (!this.CheckFail())
				{
					this.CheckSuccess(false);
				}
			}

			// Token: 0x06004D26 RID: 19750 RVA: 0x001569B7 File Offset: 0x00154BB7
			private void OnSettlementLeft(MobileParty party, Settlement settlement)
			{
				if (!this.CheckFail())
				{
					this.CheckSuccess(false);
				}
			}

			// Token: 0x06004D27 RID: 19751 RVA: 0x001569C8 File Offset: 0x00154BC8
			private void HourlyTick()
			{
				if (base.IsOngoing && !this.CheckFail())
				{
					this.CheckSuccess(false);
				}
			}

			// Token: 0x06004D28 RID: 19752 RVA: 0x001569E4 File Offset: 0x00154BE4
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if ((mapEvent.IsForcingSupplies || mapEvent.IsForcingVolunteers || mapEvent.IsRaid) && attackerParty == PartyBase.MainParty && mapEvent.MapEventSettlement.IsVillage && mapEvent.MapEventSettlement == base.QuestGiver.CurrentSettlement)
				{
					this.CriminalActionPerformedTowardsSettlement();
				}
			}

			// Token: 0x06004D29 RID: 19753 RVA: 0x00156A37 File Offset: 0x00154C37
			private void OnTroopGivenToSettlement(Hero giverHero, Settlement recipientSettlement, TroopRoster roster)
			{
				if (giverHero == Hero.MainHero && !this.CheckFail())
				{
					this.CheckSuccess(false);
				}
			}

			// Token: 0x06004D2A RID: 19754 RVA: 0x00156A50 File Offset: 0x00154C50
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this._cancelLogOnWarDeclared);
				}
			}

			// Token: 0x06004D2B RID: 19755 RVA: 0x00156A7F File Offset: 0x00154C7F
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._cancelLogOnWarDeclared);
			}

			// Token: 0x06004D2C RID: 19756 RVA: 0x00156A98 File Offset: 0x00154C98
			private void RemoveBorrowedTroopsFromParty(PartyBase party)
			{
				int troopCount = party.MemberRoster.GetTroopCount(this._questTargetChar);
				if (troopCount > 0)
				{
					party.MemberRoster.AddToCounts(this._questTargetChar, -troopCount, false, 0, 0, true, -1);
				}
				int troopCount2 = party.MemberRoster.GetTroopCount(this._questGivenChar);
				if (troopCount2 > 0)
				{
					party.MemberRoster.AddToCounts(this._questGivenChar, -troopCount2, false, 0, 0, true, -1);
				}
			}

			// Token: 0x06004D2D RID: 19757 RVA: 0x00156B04 File Offset: 0x00154D04
			private void TurnRemainingQuestTroopsIntoNormalTroops(PartyBase party)
			{
				int elementNumber = party.MemberRoster.GetElementNumber(this._questGivenChar);
				int elementNumber2 = party.MemberRoster.GetElementNumber(this._questTargetChar);
				int elementNumber3 = party.PrisonRoster.GetElementNumber(this._questGivenChar);
				int elementNumber4 = party.PrisonRoster.GetElementNumber(this._questTargetChar);
				if (elementNumber > 0)
				{
					party.MemberRoster.AddToCounts(this._questGivenChar, -elementNumber, false, 0, 0, true, -1);
					party.MemberRoster.AddToCounts(base.QuestGiver.Culture.BasicTroop, elementNumber, false, 0, 0, true, -1);
				}
				if (elementNumber2 > 0)
				{
					party.MemberRoster.AddToCounts(this._questTargetChar, -elementNumber2, false, 0, 0, true, -1);
					party.MemberRoster.AddToCounts(base.QuestGiver.Culture.EliteBasicTroop, elementNumber2, false, 0, 0, true, -1);
				}
				if (elementNumber3 > 0)
				{
					party.PrisonRoster.AddToCounts(this._questGivenChar, -elementNumber3, false, 0, 0, true, -1);
					party.PrisonRoster.AddToCounts(base.QuestGiver.Culture.BasicTroop, elementNumber3, false, 0, 0, true, -1);
				}
				if (elementNumber4 > 0)
				{
					party.PrisonRoster.AddToCounts(this._questTargetChar, -elementNumber4, false, 0, 0, true, -1);
					party.PrisonRoster.AddToCounts(base.QuestGiver.Culture.EliteBasicTroop, elementNumber4, false, 0, 0, true, -1);
				}
			}

			// Token: 0x06004D2E RID: 19758 RVA: 0x00156C55 File Offset: 0x00154E55
			private bool CheckFail()
			{
				if (PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar) == 0 && PartyBase.MainParty.MemberRoster.GetTroopCount(this._questGivenChar) == 0)
				{
					this.Fail();
					return true;
				}
				return false;
			}

			// Token: 0x06004D2F RID: 19759 RVA: 0x00156C90 File Offset: 0x00154E90
			private void CheckSuccess(bool isConversationEnded = false)
			{
				if (PartyBase.MainParty.MemberRoster.GetTroopCount(this._questGivenChar) == 0 && PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar) > 0 && !this._popUpOpened && (Campaign.Current.ConversationManager.OneToOneConversationHero == null || isConversationEnded))
				{
					this.OpenDecisionPopUp();
				}
			}

			// Token: 0x06004D30 RID: 19760 RVA: 0x00156CF0 File Offset: 0x00154EF0
			private void OpenDecisionPopUp()
			{
				this._popUpOpened = true;
				this._campaignTimeControlModeCacheForDecisionPopUp = Campaign.Current.TimeControlMode;
				Campaign.Current.TimeControlMode = CampaignTimeControlMode.Stop;
				TextObject textObject = new TextObject("{=LO7EjoY7}The borrowed troops remaining in your party are now all experienced. You can send them back to {QUEST_GIVER.LINK}.", null);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
				InformationManager.ShowInquiry(new InquiryData("", textObject.ToString(), true, true, new TextObject("{=ikDX1Fd7}Send the troops back", null).ToString(), new TextObject("{=yFahppU2}Hold on to them", null).ToString(), new Action(this.CompleteQuestSuccessfully), new Action(this.EpicFail), "", 0f, null, null, null), false, false);
			}

			// Token: 0x06004D31 RID: 19761 RVA: 0x00156DA4 File Offset: 0x00154FA4
			private void CompleteQuestSuccessfully()
			{
				Campaign.Current.TimeControlMode = this._campaignTimeControlModeCacheForDecisionPopUp;
				int troopCount = PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar);
				PartyBase.MainParty.MemberRoster.AddToCounts(this._questTargetChar, -troopCount, false, 0, 0, true, -1);
				int troopCount2 = PartyBase.MainParty.MemberRoster.GetTroopCount(this._questGivenChar);
				PartyBase.MainParty.MemberRoster.AddToCounts(this._questGivenChar, -troopCount2, false, 0, 0, true, -1);
				if (troopCount >= this._borrowedTroopCount)
				{
					this.TotalSuccess();
					return;
				}
				if ((float)this._borrowedTroopCount * 0.5f < (float)troopCount && troopCount < this._borrowedTroopCount)
				{
					this.PartialSuccess();
					return;
				}
				if (0 < troopCount && (float)troopCount <= (float)this._borrowedTroopCount * 0.5f)
				{
					this.WeakSuccess();
				}
			}

			// Token: 0x06004D32 RID: 19762 RVA: 0x00156E74 File Offset: 0x00155074
			private void TotalSuccess()
			{
				Clan.PlayerClan.AddRenown(2f, true);
				this.RelationshipChangeWithQuestGiver = 5;
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 50)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				base.QuestGiver.AddPower(10f);
				base.AddLog(this._totalSuccessLog, false);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004D33 RID: 19763 RVA: 0x00156EF0 File Offset: 0x001550F0
			private void PartialSuccess()
			{
				Clan.PlayerClan.AddRenown(1f, true);
				this.RelationshipChangeWithQuestGiver = 3;
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				base.QuestGiver.AddPower(10f);
				base.AddLog(this._partialSuccessLog, false);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004D34 RID: 19764 RVA: 0x00156F6C File Offset: 0x0015516C
			private void WeakSuccess()
			{
				Clan.PlayerClan.AddRenown(1f, true);
				this.RelationshipChangeWithQuestGiver = 1;
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 10)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				base.QuestGiver.AddPower(10f);
				base.AddLog(this._weakSuccessLog, false);
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x06004D35 RID: 19765 RVA: 0x00156FE6 File Offset: 0x001551E6
			private void Fail()
			{
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-10f);
				base.AddLog(this._failLog, false);
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004D36 RID: 19766 RVA: 0x00157018 File Offset: 0x00155218
			private void EpicFail()
			{
				Campaign.Current.TimeControlMode = this._campaignTimeControlModeCacheForDecisionPopUp;
				this.RelationshipChangeWithQuestGiver = -10;
				base.QuestGiver.AddPower(-10f);
				ChangeCrimeRatingAction.Apply(base.QuestGiver.MapFaction, 10f, true);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				base.AddLog(this._epicFailLog, false);
				base.CompleteQuestWithFail(null);
			}

			// Token: 0x06004D37 RID: 19767 RVA: 0x00157098 File Offset: 0x00155298
			private void CriminalActionPerformedTowardsSettlement()
			{
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-10f);
				Tuple<TraitObject, int>[] array = new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -50)
				};
				TraitLevelingHelper.OnIssueSolvedThroughQuest(Hero.MainHero, array);
				base.CompleteQuestWithFail(this._crimeLog);
			}

			// Token: 0x06004D38 RID: 19768 RVA: 0x001570EC File Offset: 0x001552EC
			protected override void OnFinalize()
			{
				this._questGivenChar = MBObjectManager.Instance.GetObject<CharacterObject>("borrowed_troop");
				this._questTargetChar = MBObjectManager.Instance.GetObject<CharacterObject>("veteran_borrowed_troop");
				foreach (MobileParty mobileParty in MobileParty.All.ToList<MobileParty>())
				{
					if (!mobileParty.IsMilitia)
					{
						this.TurnRemainingQuestTroopsIntoNormalTroops(mobileParty.Party);
					}
				}
			}

			// Token: 0x06004D39 RID: 19769 RVA: 0x0015717C File Offset: 0x0015537C
			protected override void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
			{
				if (PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar) > 0)
				{
					doNotResolveTheQuest = true;
					if (!this._popUpOpened && MobileParty.MainParty.MapEvent == null)
					{
						this.OpenDecisionPopUp();
					}
				}
			}

			// Token: 0x06004D3A RID: 19770 RVA: 0x001571B3 File Offset: 0x001553B3
			protected override void OnTimedOut()
			{
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-10f);
				this.RemoveBorrowedTroopsFromParty(PartyBase.MainParty);
				base.AddLog(this._timeoutLog, false);
			}

			// Token: 0x04001A19 RID: 6681
			private bool _popUpOpened;

			// Token: 0x04001A1A RID: 6682
			private CharacterObject _questGivenChar;

			// Token: 0x04001A1B RID: 6683
			private CharacterObject _questTargetChar;

			// Token: 0x04001A1C RID: 6684
			[SaveableField(1)]
			private readonly float _difficultyMultiplier;

			// Token: 0x04001A1D RID: 6685
			private CampaignTimeControlMode _campaignTimeControlModeCacheForDecisionPopUp;

			// Token: 0x04001A1E RID: 6686
			[SaveableField(2)]
			private JournalLog _playerStartsQuestLog;
		}

		// Token: 0x0200063E RID: 1598
		public class LandlordTrainingForRetainersIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06004D3D RID: 19773 RVA: 0x0015720E File Offset: 0x0015540E
			public LandlordTrainingForRetainersIssueTypeDefiner()
				: base(410000)
			{
			}

			// Token: 0x06004D3E RID: 19774 RVA: 0x0015721B File Offset: 0x0015541B
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue), 1, null);
				base.AddClassDefinition(typeof(LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest), 2, null);
			}
		}
	}
}
