using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	public class LandlordTrainingForRetainersIssueBehavior : CampaignBehaviorBase
	{
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		public override void SyncData(IDataStore dataStore)
		{
		}

		private bool ConditionsHold(Hero issueGiver)
		{
			Settlement currentSettlement = issueGiver.CurrentSettlement;
			ItemObject itemObject;
			if (currentSettlement == null)
			{
				itemObject = null;
			}
			else
			{
				Village village = currentSettlement.Village;
				if (village == null)
				{
					itemObject = null;
				}
				else
				{
					VillageType villageType = village.VillageType;
					itemObject = ((villageType != null) ? villageType.PrimaryProduction : null);
				}
			}
			ItemObject itemObject2 = itemObject;
			return issueGiver.IsRuralNotable && issueGiver.CurrentSettlement.IsVillage && itemObject2.HasHorseComponent && (itemObject2.ItemCategory == DefaultItemCategories.Horse || itemObject2.ItemCategory == DefaultItemCategories.NobleHorse || itemObject2.ItemCategory == DefaultItemCategories.WarHorse);
		}

		public void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnSelected), typeof(LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue), IssueBase.IssueFrequency.VeryCommon, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		private IssueBase OnSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue(issueOwner);
		}

		private const IssueBase.IssueFrequency LandlordTrainingForRetainersIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		public class LandlordTrainingForRetainersIssue : IssueBase
		{
			internal static void AutoGeneratedStaticCollectObjectsLandlordTrainingForRetainersIssue(object o, List<object> collectedObjects)
			{
				((LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Casualties | IssueBase.AlternativeSolutionScaleFlag.FailureRisk;
				}
			}

			private int BorrowedTroopCount
			{
				get
				{
					return 3 + MathF.Ceiling(17f * base.IssueDifficultyMultiplier);
				}
			}

			protected override bool IssueQuestCanBeDuplicated
			{
				get
				{
					return false;
				}
			}

			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 8 + MathF.Ceiling(19f * base.IssueDifficultyMultiplier);
				}
			}

			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 9 + MathF.Ceiling(10f * base.IssueDifficultyMultiplier);
				}
			}

			protected override int RewardGold
			{
				get
				{
					return (int)(2000f + 4000f * base.IssueDifficultyMultiplier);
				}
			}

			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=q2aed7tv}Train troops for {ISSUE_OWNER.NAME}", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=va7rEVZn}{ISSUE_OWNER.NAME}, a landowner in {ISSUE_SETTLEMENT}, needs some of his watchmen and retainers to gain some real war experience. {?ISSUE_OWNER.GENDER}She{?}He{\\?} wants you to take them with you on some fairly safe expeditions, such as hunting some bandits. ", null);
					StringHelpers.SetCharacterProperties("ISSUE_OWNER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.IssueSettlement.Name);
					return textObject;
				}
			}

			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(500f + 700f * base.IssueDifficultyMultiplier);
				}
			}

			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=dBphGKTI}Things are getting a bit rough around these parts. I have some lads who help me out with local troublemakers, but they wouldn't last long against real warriors. Maybe you could take them out, show them what actual war is about. I'm not expecting you to make them fit for a noble's retinue, but at least I want to give the bandits around here some pause for thought.", null);
				}
			}

			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=1REltXXz}I'll help if I can.", null);
				}
			}

			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=uLiRasv1}Maybe you could take them in your party for a while, until they get a bit of experience?", null);
				}
			}

			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=rutgr1VF}Or if you can assign a companion for a while, they can stay here and train the men... I will also give you some provisions and money for their expenses and your trouble.", null);
				}
			}

			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=QxEPwLyp}I'll take your men into my party and show them a bit of the world.", null);
				}
			}

			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=oT4JNyFp}I will assign one of my companions to train your men.", null);
				}
			}

			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=dE3vxfTo}Excellent. I'm sure they can learn a lot from your veterans.", null);
				}
			}

			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=QRRgXOrN}As expected, your veterans have really sharpened up our boys. Please pass on my thanks to them, {?PLAYER.GENDER}madam{?}sir{\\?}.", null);
				}
			}

			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=Ci8NCwgW}{ISSUE_GIVER.LINK} a landowner in {SETTLEMENT}, asked you to train recruits for {?QUEST_GIVER.GENDER}her{?}him{\\?}. {?QUEST_GIVER.GENDER}She{?}He{\\?} gave you {NUMBER_OF_MEN} men, hoping to take them back when once they are veterans.{newline}You sent them with one of your companions {COMPANION.LINK} to hunt down some easy targets. You arranged to meet them in {RETURN_DAYS} days.", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					textObject.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.IssueOwner.CurrentSettlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					textObject.SetTextVariable("NUMBER_OF_MEN", base.GetTotalAlternativeSolutionNeededMenCount());
					return textObject;
				}
			}

			public override TextObject IssueAlternativeSolutionSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=AndfZYIJ}Your companion managed to return all of the troops {ISSUE_GIVER.LINK} gave you to train. {?ISSUE_GIVER.GENDER}She{?}He{\\?} sends you the following letter.\n\n“{?PLAYER.GENDER}Madam{?}Sir{\\?}, Thank you for looking after my men. You honored our agreement, and you have my gratitude. Please accept this {GOLD}{GOLD_ICON}.", null);
					textObject.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, false);
					textObject.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, false);
					textObject.SetTextVariable("GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			public LandlordTrainingForRetainersIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
			}

			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return -1f;
				}
				return 0f;
			}

			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Steward) >= hero.GetSkillValue(DefaultSkills.Leadership)) ? DefaultSkills.Steward : DefaultSkills.Leadership, 120);
			}

			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				this.RelationshipChangeWithIssueOwner = 5;
				base.IssueOwner.AddPower(10f);
			}

			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				this.RelationshipChangeWithIssueOwner = -5;
				base.IssueOwner.AddPower(-10f);
			}

			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			public override bool IssueStayAliveConditions()
			{
				return !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid;
			}

			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			protected override void OnGameLoad()
			{
			}

			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest(questId, base.IssueOwner, CampaignTime.DaysFromNow(60f), base.IssueDifficultyMultiplier, this.RewardGold);
			}

			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				skill = null;
				relationHero = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (FactionManager.IsAtWarAgainstFaction(issueGiver.CurrentSettlement.MapFaction, Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (MobileParty.MainParty.MemberRoster.TotalManCount + this.BorrowedTroopCount > PartyBase.MainParty.PartySizeLimit)
				{
					flag |= IssueBase.PreconditionFlags.PartySizeLimit;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			private int GetTier2TroopCount(TroopRoster troopRoster)
			{
				int num = 0;
				foreach (TroopRosterElement troopRosterElement in troopRoster.GetTroopRoster())
				{
					if (troopRosterElement.Character.Tier >= 2 && !troopRosterElement.Character.IsNotTransferableInPartyScreen)
					{
						num += troopRoster.GetTroopCount(troopRosterElement.Character);
					}
				}
				return num;
			}

			private const int QuestTimeLimit = 60;

			private const int IssueDuration = 30;

			private const int AlternativeSolutionTroopTierRequirement = 2;

			private const int SkillLimit = 120;
		}

		public class LandlordTrainingForRetainersIssueQuest : QuestBase
		{
			internal static void AutoGeneratedStaticCollectObjectsLandlordTrainingForRetainersIssueQuest(object o, List<object> collectedObjects)
			{
				((LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._playerStartsQuestLog);
			}

			internal static object AutoGeneratedGetMemberValue_difficultyMultiplier(object o)
			{
				return ((LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest)o)._difficultyMultiplier;
			}

			internal static object AutoGeneratedGetMemberValue_playerStartsQuestLog(object o)
			{
				return ((LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest)o)._playerStartsQuestLog;
			}

			private int _borrowedTroopCount
			{
				get
				{
					return 3 + MathF.Ceiling(17f * this._difficultyMultiplier);
				}
			}

			private TextObject _questStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=fcRLq8LL}{QUEST_GIVER.LINK}, a landowner in {QUEST_SETTLEMENT}, asked you to train some recruits for {?QUEST_GIVER.GENDER}her{?}him{\\?}. {?QUEST_GIVER.GENDER}She{?}He{\\?} gave you {NUMBER_OF_MEN} men, hoping to take them back when once they have some experience.\nThe easiest way to train them without putting them in too much danger is to attack weak parties.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					textObject.SetTextVariable("NUMBER_OF_MEN", this._borrowedTroopCount);
					return textObject;
				}
			}

			private TextObject _totalSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=4RNREbPW}You managed to return all of the troops {QUEST_GIVER.LINK} gave you to train. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter.{newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, Thank you for looking after my men. You honored our agreement, and you have my gratitude. Please accept this {GOLD}{GOLD_ICON}.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			private TextObject _partialSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=yjAHh66a}You managed to return more than half of the troops {QUEST_GIVER.LINK} gave you to train. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. {newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, Thank you for returning my men to me. The losses they suffered are somewhat higher than I thought. I can only hope you did what you could to honor our agreement and try to keep them alive.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _weakSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=NXs7kr2B}You managed to return a fraction of the troops {QUEST_GIVER.LINK} gave you to train. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. {newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, Thank you for returning my men to me. The losses they suffered are somewhat higher than I thought. I can only hope you did what you could do to honor our agreement and try to keep them alive.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _failLog
			{
				get
				{
					TextObject textObject = new TextObject("{=YBEB7GLa}All the borrowed troops in your party are gone. You are unable to return any of the troops {QUEST_GIVER.LINK} gave you to train. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. {newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, I understand that all my men are dead. I asked you to try and keep them alive. I do not know what to say to their kinfolk. This is a breach of my trust.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _epicFailLog
			{
				get
				{
					TextObject textObject = new TextObject("{=eSpRuda1}You have decided to keep the borrowed troops {QUEST_GIVER.LINK} gave you to train. When {?QUEST_GIVER.GENDER}She{?}He{\\?} hears about this {?QUEST_GIVER.GENDER}she{?}he{\\?} sends you the following letter. {newline}“{?PLAYER.GENDER}Madam{?}Sir{\\?}, I made it clear that I expected my men to be returned to me. I consider this a betrayal of my trust.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _cancelLogOnWarDeclared
			{
				get
				{
					TextObject textObject = new TextObject("{=TrewB5c7}Now your {?IS_MAP_FACTION}clan{?}kingdom{\\?} is at war with the {QUEST_GIVER.LINK}'s lord. Your agreement with {QUEST_GIVER.LINK} becomes invalid.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("IS_MAP_FACTION", Clan.PlayerClan.IsMapFaction ? 1 : 0);
					return textObject;
				}
			}

			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _timeoutLog
			{
				get
				{
					TextObject textObject = new TextObject("{=txtsL6QQ}You failed to train the troops by the time {QUEST_GIVER.LINK} needed them back. {?QUEST_GIVER.GENDER}She{?}He{\\?} sends you the following letter. “{?PLAYER.GENDER}Madam{?}Sir{\\?}, I expected my men to be returned to me. I consider this a breach of our agreement.”", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _crimeLog
			{
				get
				{
					TextObject textObject = new TextObject("{=faZuFQUF}You are accused in {SETTLEMENT} of a crime, and {QUEST_GIVER.LINK} no longer wants your help.", null);
					textObject.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.QuestGiver.CurrentSettlement.Name);
					return textObject;
				}
			}

			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=q2aed7tv}Train troops for {ISSUE_OWNER.NAME}", null);
					textObject.SetCharacterProperties("ISSUE_OWNER", base.QuestGiver.CharacterObject, false);
					return textObject;
				}
			}

			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			public LandlordTrainingForRetainersIssueQuest(string questId, Hero giverHero, CampaignTime duration, float difficultyMultiplier, int rewardGold)
				: base(questId, giverHero, duration, rewardGold)
			{
				this._difficultyMultiplier = difficultyMultiplier;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			protected override void InitializeQuestOnGameLoad()
			{
				this._questGivenChar = MBObjectManager.Instance.GetObject<CharacterObject>("borrowed_troop");
				this._questGivenChar.SetTransferableInPartyScreen(false);
				this._questTargetChar = MBObjectManager.Instance.GetObject<CharacterObject>("veteran_borrowed_troop");
				this._questTargetChar.SetTransferableInPartyScreen(false);
				if (this._playerStartsQuestLog == null)
				{
					this._playerStartsQuestLog = base.JournalEntries.First<JournalLog>();
					base.UpdateQuestTaskStage(this._playerStartsQuestLog, PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar));
				}
				this.SetDialogs();
			}

			protected override void RegisterEvents()
			{
				CampaignEvents.OnTroopsDesertedEvent.AddNonSerializedListener(this, new Action<MobileParty, TroopRoster>(this.OnTroopsDeserted));
				CampaignEvents.OnPlayerBattleEndEvent.AddNonSerializedListener(this, new Action<MapEvent>(this.OnPlayerBattleEnd));
				CampaignEvents.PlayerUpgradedTroopsEvent.AddNonSerializedListener(this, new Action<CharacterObject, CharacterObject, int>(this.OnPlayerUpgradedTroops));
				CampaignEvents.OnSettlementLeftEvent.AddNonSerializedListener(this, new Action<MobileParty, Settlement>(this.OnSettlementLeft));
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.HourlyTick));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
				CampaignEvents.OnTroopGivenToSettlementEvent.AddNonSerializedListener(this, new Action<Hero, Settlement, TroopRoster>(this.OnTroopGivenToSettlement));
			}

			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=J8qFgwal}Excellent. I'll tell the lads to join your party.", null), null, null).Condition(() => CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.NpcLineWithVariation("{=7lee0h29}One thing - if one or two die, that's the fortunes of war, things could go even worse if we get raided and have no one who can fight back... But try not to get them all massacred. These men will take some risks for me, but not have their lives thrown away to no purpose.", null, null)
					.Variation("{=EaPQ2mm7}One thing - if possible, try not to get them all killed, will you? Green troops aren't much use to me, but corpses are even less.", new object[] { "UngratefulTag", 1, "MercyTag", -1 })
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=r9F1W4KZ}Yes? Have you been able to train my men?", null), null, null).Condition(() => CharacterObject.OneToOneConversationCharacter == base.QuestGiver.CharacterObject)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=PVO3YFSq}Yes we are heading out now.", null), null)
					.NpcLine(new TextObject("{=3SBDbPjD}Good to hear that! Safe journeys.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=wErSpkjy}I'm still working on it.", null), null)
					.NpcLine(new TextObject("{=3SBDbPjD}Good to hear that! Safe journeys.", null), null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				this._questGivenChar = MBObjectManager.Instance.GetObject<CharacterObject>("borrowed_troop");
				this._questGivenChar.SetTransferableInPartyScreen(false);
				this._questTargetChar = MBObjectManager.Instance.GetObject<CharacterObject>("veteran_borrowed_troop");
				this._questTargetChar.SetTransferableInPartyScreen(false);
				PartyBase.MainParty.AddElementToMemberRoster(this._questGivenChar, this._borrowedTroopCount, false);
				PartyBase.MainParty.ItemRoster.AddToCounts(DefaultItems.Grain, 3);
				this._playerStartsQuestLog = base.AddDiscreteLog(this._questStartLog, new TextObject("{=wUb5h4a3}Trained Troops", null), PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar), this._borrowedTroopCount, null, false);
			}

			private void OnPlayerBattleEnd(MapEvent mapEvent)
			{
				if (mapEvent.IsPlayerMapEvent)
				{
					this.CheckFail();
				}
			}

			private void OnTroopsDeserted(MobileParty mobileParty, TroopRoster desertedTroops)
			{
				if (mobileParty.IsMainParty)
				{
					this.CheckFail();
				}
			}

			private void OnPlayerUpgradedTroops(CharacterObject upgradeFromTroop, CharacterObject upgradeToTroop, int number)
			{
				if (upgradeFromTroop == this._questGivenChar && upgradeToTroop == this._questTargetChar && number > 0)
				{
					base.UpdateQuestTaskStage(this._playerStartsQuestLog, PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar));
				}
				if (!this.CheckFail())
				{
					this.CheckSuccess(false);
				}
			}

			private void OnSettlementLeft(MobileParty party, Settlement settlement)
			{
				if (!this.CheckFail())
				{
					this.CheckSuccess(false);
				}
			}

			private void HourlyTick()
			{
				if (base.IsOngoing && !this.CheckFail())
				{
					this.CheckSuccess(false);
				}
			}

			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if ((mapEvent.IsForcingSupplies || mapEvent.IsForcingVolunteers || mapEvent.IsRaid) && attackerParty == PartyBase.MainParty && mapEvent.MapEventSettlement.IsVillage && mapEvent.MapEventSettlement == base.QuestGiver.CurrentSettlement)
				{
					this.CriminalActionPerformedTowardsSettlement();
				}
			}

			private void OnTroopGivenToSettlement(Hero giverHero, Settlement recipientSettlement, TroopRoster roster)
			{
				if (giverHero == Hero.MainHero && !this.CheckFail())
				{
					this.CheckSuccess(false);
				}
			}

			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this._cancelLogOnWarDeclared);
				}
			}

			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._cancelLogOnWarDeclared);
			}

			private void RemoveBorrowedTroopsFromParty(PartyBase party)
			{
				int troopCount = party.MemberRoster.GetTroopCount(this._questTargetChar);
				if (troopCount > 0)
				{
					party.MemberRoster.AddToCounts(this._questTargetChar, -troopCount, false, 0, 0, true, -1);
				}
				int troopCount2 = party.MemberRoster.GetTroopCount(this._questGivenChar);
				if (troopCount2 > 0)
				{
					party.MemberRoster.AddToCounts(this._questGivenChar, -troopCount2, false, 0, 0, true, -1);
				}
			}

			private void TurnRemainingQuestTroopsIntoNormalTroops(PartyBase party)
			{
				int elementNumber = party.MemberRoster.GetElementNumber(this._questGivenChar);
				int elementNumber2 = party.MemberRoster.GetElementNumber(this._questTargetChar);
				int elementNumber3 = party.PrisonRoster.GetElementNumber(this._questGivenChar);
				int elementNumber4 = party.PrisonRoster.GetElementNumber(this._questTargetChar);
				if (elementNumber > 0)
				{
					party.MemberRoster.AddToCounts(this._questGivenChar, -elementNumber, false, 0, 0, true, -1);
					party.MemberRoster.AddToCounts(base.QuestGiver.Culture.BasicTroop, elementNumber, false, 0, 0, true, -1);
				}
				if (elementNumber2 > 0)
				{
					party.MemberRoster.AddToCounts(this._questTargetChar, -elementNumber2, false, 0, 0, true, -1);
					party.MemberRoster.AddToCounts(base.QuestGiver.Culture.EliteBasicTroop, elementNumber2, false, 0, 0, true, -1);
				}
				if (elementNumber3 > 0)
				{
					party.PrisonRoster.AddToCounts(this._questGivenChar, -elementNumber3, false, 0, 0, true, -1);
					party.PrisonRoster.AddToCounts(base.QuestGiver.Culture.BasicTroop, elementNumber3, false, 0, 0, true, -1);
				}
				if (elementNumber4 > 0)
				{
					party.PrisonRoster.AddToCounts(this._questTargetChar, -elementNumber4, false, 0, 0, true, -1);
					party.PrisonRoster.AddToCounts(base.QuestGiver.Culture.EliteBasicTroop, elementNumber4, false, 0, 0, true, -1);
				}
			}

			private bool CheckFail()
			{
				if (PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar) == 0 && PartyBase.MainParty.MemberRoster.GetTroopCount(this._questGivenChar) == 0)
				{
					this.Fail();
					return true;
				}
				return false;
			}

			private void CheckSuccess(bool isConversationEnded = false)
			{
				if (PartyBase.MainParty.MemberRoster.GetTroopCount(this._questGivenChar) == 0 && PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar) > 0 && !this._popUpOpened && (Campaign.Current.ConversationManager.OneToOneConversationHero == null || isConversationEnded))
				{
					this.OpenDecisionPopUp();
				}
			}

			private void OpenDecisionPopUp()
			{
				this._popUpOpened = true;
				this._campaignTimeControlModeCacheForDecisionPopUp = Campaign.Current.TimeControlMode;
				Campaign.Current.TimeControlMode = CampaignTimeControlMode.Stop;
				TextObject textObject = new TextObject("{=LO7EjoY7}The borrowed troops remaining in your party are now all experienced. You can send them back to {QUEST_GIVER.LINK}.", null);
				StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
				InformationManager.ShowInquiry(new InquiryData("", textObject.ToString(), true, true, new TextObject("{=ikDX1Fd7}Send the troops back", null).ToString(), new TextObject("{=yFahppU2}Hold on to them", null).ToString(), new Action(this.CompleteQuestSuccessfully), new Action(this.EpicFail), "", 0f, null, null, null), false, false);
			}

			private void CompleteQuestSuccessfully()
			{
				Campaign.Current.TimeControlMode = this._campaignTimeControlModeCacheForDecisionPopUp;
				int troopCount = PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar);
				PartyBase.MainParty.MemberRoster.AddToCounts(this._questTargetChar, -troopCount, false, 0, 0, true, -1);
				int troopCount2 = PartyBase.MainParty.MemberRoster.GetTroopCount(this._questGivenChar);
				PartyBase.MainParty.MemberRoster.AddToCounts(this._questGivenChar, -troopCount2, false, 0, 0, true, -1);
				if (troopCount >= this._borrowedTroopCount)
				{
					this.TotalSuccess();
					return;
				}
				if ((float)this._borrowedTroopCount * 0.5f < (float)troopCount && troopCount < this._borrowedTroopCount)
				{
					this.PartialSuccess();
					return;
				}
				if (0 < troopCount && (float)troopCount <= (float)this._borrowedTroopCount * 0.5f)
				{
					this.WeakSuccess();
				}
			}

			private void TotalSuccess()
			{
				Clan.PlayerClan.AddRenown(2f, true);
				this.RelationshipChangeWithQuestGiver = 5;
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 50)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				base.QuestGiver.AddPower(10f);
				base.AddLog(this._totalSuccessLog, false);
				base.CompleteQuestWithSuccess();
			}

			private void PartialSuccess()
			{
				Clan.PlayerClan.AddRenown(1f, true);
				this.RelationshipChangeWithQuestGiver = 3;
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				base.QuestGiver.AddPower(10f);
				base.AddLog(this._partialSuccessLog, false);
				base.CompleteQuestWithSuccess();
			}

			private void WeakSuccess()
			{
				Clan.PlayerClan.AddRenown(1f, true);
				this.RelationshipChangeWithQuestGiver = 1;
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 10)
				});
				GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, this.RewardGold, false);
				base.QuestGiver.AddPower(10f);
				base.AddLog(this._weakSuccessLog, false);
				base.CompleteQuestWithSuccess();
			}

			private void Fail()
			{
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-10f);
				base.AddLog(this._failLog, false);
				base.CompleteQuestWithFail(null);
			}

			private void EpicFail()
			{
				Campaign.Current.TimeControlMode = this._campaignTimeControlModeCacheForDecisionPopUp;
				this.RelationshipChangeWithQuestGiver = -10;
				base.QuestGiver.AddPower(-10f);
				ChangeCrimeRatingAction.Apply(base.QuestGiver.MapFaction, 10f, true);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -10)
				});
				base.AddLog(this._epicFailLog, false);
				base.CompleteQuestWithFail(null);
			}

			private void CriminalActionPerformedTowardsSettlement()
			{
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-10f);
				Tuple<TraitObject, int>[] array = new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -50)
				};
				TraitLevelingHelper.OnIssueSolvedThroughQuest(Hero.MainHero, array);
				base.CompleteQuestWithFail(this._crimeLog);
			}

			protected override void OnFinalize()
			{
				this._questGivenChar = MBObjectManager.Instance.GetObject<CharacterObject>("borrowed_troop");
				this._questTargetChar = MBObjectManager.Instance.GetObject<CharacterObject>("veteran_borrowed_troop");
				foreach (MobileParty mobileParty in MobileParty.All.ToList<MobileParty>())
				{
					if (!mobileParty.IsMilitia)
					{
						this.TurnRemainingQuestTroopsIntoNormalTroops(mobileParty.Party);
					}
				}
			}

			protected override void OnBeforeTimedOut(ref bool completeWithSuccess, ref bool doNotResolveTheQuest)
			{
				if (PartyBase.MainParty.MemberRoster.GetTroopCount(this._questTargetChar) > 0)
				{
					doNotResolveTheQuest = true;
					if (!this._popUpOpened && MobileParty.MainParty.MapEvent == null)
					{
						this.OpenDecisionPopUp();
					}
				}
			}

			protected override void OnTimedOut()
			{
				this.RelationshipChangeWithQuestGiver = -5;
				base.QuestGiver.AddPower(-10f);
				this.RemoveBorrowedTroopsFromParty(PartyBase.MainParty);
				base.AddLog(this._timeoutLog, false);
			}

			private bool _popUpOpened;

			private CharacterObject _questGivenChar;

			private CharacterObject _questTargetChar;

			[SaveableField(1)]
			private readonly float _difficultyMultiplier;

			private CampaignTimeControlMode _campaignTimeControlModeCacheForDecisionPopUp;

			[SaveableField(2)]
			private JournalLog _playerStartsQuestLog;
		}

		public class LandlordTrainingForRetainersIssueTypeDefiner : SaveableTypeDefiner
		{
			public LandlordTrainingForRetainersIssueTypeDefiner()
				: base(410000)
			{
			}

			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssue), 1, null);
				base.AddClassDefinition(typeof(LandlordTrainingForRetainersIssueBehavior.LandlordTrainingForRetainersIssueQuest), 2, null);
			}
		}
	}
}
