using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x02000321 RID: 801
	public class VillageNeedsToolsIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D94 RID: 11668 RVA: 0x000BEC79 File Offset: 0x000BCE79
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D95 RID: 11669 RVA: 0x000BEC94 File Offset: 0x000BCE94
		private void OnCheckForIssue(Hero hero)
		{
			ItemObject tools = DefaultItems.Tools;
			if (this.ConditionsHold(hero, tools))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue), IssueBase.IssueFrequency.VeryCommon, tools));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002D96 RID: 11670 RVA: 0x000BED00 File Offset: 0x000BCF00
		private bool ConditionsHold(Hero issueGiver, ItemObject item)
		{
			Settlement currentSettlement = issueGiver.CurrentSettlement;
			if (issueGiver.IsHeadman && currentSettlement != null && currentSettlement.IsVillage && currentSettlement.Village.GetProsperityLevel() < SettlementComponent.ProsperityLevel.Mid && currentSettlement.Village.VillageType.Productions.Count > 0)
			{
				if (currentSettlement.Village.VillageType.Productions.All((ValueTuple<ItemObject, float> x) => !x.Item1.IsAnimal))
				{
					return currentSettlement.ItemRoster.GetItemNumber(item) == 0;
				}
			}
			return false;
		}

		// Token: 0x06002D97 RID: 11671 RVA: 0x000BED94 File Offset: 0x000BCF94
		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			PotentialIssueData potentialIssueData = pid;
			return new VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue(issueOwner, (ItemObject)potentialIssueData.RelatedObject);
		}

		// Token: 0x06002D98 RID: 11672 RVA: 0x000BEDBA File Offset: 0x000BCFBA
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x04000DB1 RID: 3505
		private const IssueBase.IssueFrequency VillageNeedsToolsIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x02000672 RID: 1650
		public class VillageNeedsToolsIssue : IssueBase
		{
			// Token: 0x0600518F RID: 20879 RVA: 0x00166DEA File Offset: 0x00164FEA
			internal static void AutoGeneratedStaticCollectObjectsVillageNeedsToolsIssue(object o, List<object> collectedObjects)
			{
				((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x06005190 RID: 20880 RVA: 0x00166DF8 File Offset: 0x00164FF8
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._requestedItem);
				collectedObjects.Add(this._exchangeItem);
			}

			// Token: 0x06005191 RID: 20881 RVA: 0x00166E19 File Offset: 0x00165019
			internal static object AutoGeneratedGetMemberValue_requestedItem(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue)o)._requestedItem;
			}

			// Token: 0x06005192 RID: 20882 RVA: 0x00166E26 File Offset: 0x00165026
			internal static object AutoGeneratedGetMemberValue_exchangeItem(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue)o)._exchangeItem;
			}

			// Token: 0x06005193 RID: 20883 RVA: 0x00166E33 File Offset: 0x00165033
			internal static object AutoGeneratedGetMemberValue_numberOfExchangeItem(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue)o)._numberOfExchangeItem;
			}

			// Token: 0x06005194 RID: 20884 RVA: 0x00166E45 File Offset: 0x00165045
			internal static object AutoGeneratedGetMemberValue_numberOfRequestedItem(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue)o)._numberOfRequestedItem;
			}

			// Token: 0x06005195 RID: 20885 RVA: 0x00166E57 File Offset: 0x00165057
			internal static object AutoGeneratedGetMemberValue_payment(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue)o)._payment;
			}

			// Token: 0x170011AE RID: 4526
			// (get) Token: 0x06005196 RID: 20886 RVA: 0x00166E69 File Offset: 0x00165069
			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Duration;
				}
			}

			// Token: 0x170011AF RID: 4527
			// (get) Token: 0x06005197 RID: 20887 RVA: 0x00166E6C File Offset: 0x0016506C
			protected override int RewardGold
			{
				get
				{
					return 500 + this._numberOfRequestedItem * (int)((float)(base.IssueSettlement.SettlementComponent.GetItemPrice(this._requestedItem, null, false) + this._requestedItem.Value) / 2f);
				}
			}

			// Token: 0x170011B0 RID: 4528
			// (get) Token: 0x06005198 RID: 20888 RVA: 0x00166EA7 File Offset: 0x001650A7
			private int CostOfToolsForAlternativeSolution
			{
				get
				{
					return (int)((float)(this._requestedItem.Value * this._numberOfRequestedItem) * 0.7f);
				}
			}

			// Token: 0x170011B1 RID: 4529
			// (get) Token: 0x06005199 RID: 20889 RVA: 0x00166EC3 File Offset: 0x001650C3
			protected override int CompanionSkillRewardXP
			{
				get
				{
					return 500 + (int)(700f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x170011B2 RID: 4530
			// (get) Token: 0x0600519A RID: 20890 RVA: 0x00166ED8 File Offset: 0x001650D8
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=gnuojd9u}{VILLAGE} Needs Tools", null);
					textObject.SetTextVariable("VILLAGE", base.IssueOwner.CurrentSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x170011B3 RID: 4531
			// (get) Token: 0x0600519B RID: 20891 RVA: 0x00166F01 File Offset: 0x00165101
			public override TextObject Description
			{
				get
				{
					return new TextObject("{=Td2RGRBn}Headman in the village requested tools to increase production.", null);
				}
			}

			// Token: 0x170011B4 RID: 4532
			// (get) Token: 0x0600519C RID: 20892 RVA: 0x00166F0E File Offset: 0x0016510E
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=BGJpwxvm}We do have some problems. A sickness passed through here last month. Praise the Heavens, only a few people died, but many were weakened and we couldn't get much work done. Now we need to hire some laborers from nearby settlements to make up the shortfall, but we don't have the tools for them. We're in a bit of a rush - do you think you could find tools for us?", null);
				}
			}

			// Token: 0x170011B5 RID: 4533
			// (get) Token: 0x0600519D RID: 20893 RVA: 0x00166F1B File Offset: 0x0016511B
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=3EL0wY1h}Tell me about the details.", null);
				}
			}

			// Token: 0x170011B6 RID: 4534
			// (get) Token: 0x0600519E RID: 20894 RVA: 0x00166F28 File Offset: 0x00165128
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject;
					if (this._exchangeItem == null)
					{
						textObject = new TextObject("{=daXZlOBi}We need {REQUESTED_ITEM_COUNT} {.%}{?(REQUESTED_ITEM_COUNT > 1)}{PLURAL(REQUESTED_ITEM)}{?}{REQUESTED_ITEM}{\\?}{.%} in {NUMBER_OF_DAYS} days. We can offer {PAYMENT}{GOLD_ICON} for the tools and your services. What do you say?", null);
						textObject.SetTextVariable("PAYMENT", this._payment);
					}
					else
					{
						textObject = new TextObject("{=uwmfgcM3}We need {REQUESTED_ITEM_COUNT} {.%}{?(REQUESTED_ITEM_COUNT > 1)}{PLURAL(REQUESTED_ITEM)}{?}{REQUESTED_ITEM}{\\?}{.%} in {NUMBER_OF_DAYS} days. The village is short on denars so we can make the payment in kind - with {?NUMBER_OF_EXCHANGE_ITEM > 1}{NUMBER_OF_EXCHANGE_ITEM} {._}{PLURAL(EXCHANGE_ITEM)}{?}one {._}{EXCHANGE_ITEM}{\\?}. What do you say?", null);
						textObject.SetTextVariable("EXCHANGE_ITEM", this._exchangeItem.Name);
						textObject.SetTextVariable("NUMBER_OF_EXCHANGE_ITEM", this._numberOfExchangeItem);
					}
					textObject.SetTextVariable("REQUESTED_ITEM", this._requestedItem.Name);
					textObject.SetTextVariable("REQUESTED_ITEM_COUNT", this._numberOfRequestedItem);
					textObject.SetTextVariable("NUMBER_OF_DAYS", 30);
					return textObject;
				}
			}

			// Token: 0x170011B7 RID: 4535
			// (get) Token: 0x0600519F RID: 20895 RVA: 0x00166FCA File Offset: 0x001651CA
			public override TextObject IssuePlayerResponseAfterAlternativeExplanation
			{
				get
				{
					return new TextObject("{=Tp4X51vX}Maybe my men can handle this for you.", null);
				}
			}

			// Token: 0x170011B8 RID: 4536
			// (get) Token: 0x060051A0 RID: 20896 RVA: 0x00166FD8 File Offset: 0x001651D8
			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=8llksa4h}If so, you'll need a man with good understanding of trade. Also you will need at least {NUMBER_OF_TROOPS} fighting men to protect the goods while taking them to market and back. Your companion will also probably need around {GOLD_COST}{GOLD_ICON} in order to buy the tools.", null);
					textObject.SetTextVariable("NUMBER_OF_TROOPS", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("GOLD_COST", this.CostOfToolsForAlternativeSolution);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					return textObject;
				}
			}

			// Token: 0x170011B9 RID: 4537
			// (get) Token: 0x060051A1 RID: 20897 RVA: 0x00167025 File Offset: 0x00165225
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=ggGmjgIS}I think I can handle this myself.", null);
				}
			}

			// Token: 0x170011BA RID: 4538
			// (get) Token: 0x060051A2 RID: 20898 RVA: 0x00167032 File Offset: 0x00165232
			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=5aDpzB1F}My men will deliver your goods on time don't worry.", null);
				}
			}

			// Token: 0x170011BB RID: 4539
			// (get) Token: 0x060051A3 RID: 20899 RVA: 0x0016703F File Offset: 0x0016523F
			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=bkZOcbGu}Your men are still getting us the tools. I ask for your patience. We very much appreciate this.", null);
				}
			}

			// Token: 0x170011BC RID: 4540
			// (get) Token: 0x060051A4 RID: 20900 RVA: 0x0016704C File Offset: 0x0016524C
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			// Token: 0x170011BD RID: 4541
			// (get) Token: 0x060051A5 RID: 20901 RVA: 0x0016704F File Offset: 0x0016524F
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x170011BE RID: 4542
			// (get) Token: 0x060051A6 RID: 20902 RVA: 0x00167052 File Offset: 0x00165252
			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 4 + MathF.Ceiling(5f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x170011BF RID: 4543
			// (get) Token: 0x060051A7 RID: 20903 RVA: 0x00167067 File Offset: 0x00165267
			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 2 + MathF.Ceiling(4f * base.IssueDifficultyMultiplier);
				}
			}

			// Token: 0x170011C0 RID: 4544
			// (get) Token: 0x060051A8 RID: 20904 RVA: 0x0016707C File Offset: 0x0016527C
			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=JxUrkzd1}Thank you. I hope your men can get us the tools on time. Good luck.", null);
				}
			}

			// Token: 0x170011C1 RID: 4545
			// (get) Token: 0x060051A9 RID: 20905 RVA: 0x0016708C File Offset: 0x0016528C
			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=qycE7IO0}{QUEST_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}she{?}he{\\?} needs {._}{ITEM} for {?QUEST_GIVER.GENDER}her{?}his{\\?} village. {?QUEST_GIVER.GENDER}She{?}He{\\?} offers you {REWARD_GOLD}{GOLD_ICON} for the delivery of the tools. You asked your companion {COMPANION.LINK} and {NEEDED_MEN_COUNT} of your men to deliver {NUMBER_OF_ITEM} {?NUMBER_OF_ITEM>1}units{?}unit{\\?} of {._}{ITEM} to {QUEST_GIVER.LINK}. They will rejoin your party in {ALTERNATIVE_SOLUTION_DURATION} days.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("ITEM", this._requestedItem.Name);
					textObject.SetTextVariable("NUMBER_OF_ITEM", this._numberOfRequestedItem);
					textObject.SetTextVariable("REWARD_GOLD", this.RewardGold);
					textObject.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					textObject.SetTextVariable("NEEDED_MEN_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("ALTERNATIVE_SOLUTION_DURATION", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			// Token: 0x170011C2 RID: 4546
			// (get) Token: 0x060051AA RID: 20906 RVA: 0x00167148 File Offset: 0x00165348
			public override TextObject IssueAlternativeSolutionSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=W0w0Eunx}Your companion {COMPANION.LINK} has delivered {ISSUE_GIVER.LINK}'s goods as you promised.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x060051AB RID: 20907 RVA: 0x00167194 File Offset: 0x00165394
			public VillageNeedsToolsIssue(Hero issueOwner, ItemObject requestedItem)
				: base(issueOwner, CampaignTime.DaysFromNow(30f))
			{
				this._requestedItem = requestedItem;
				int itemPrice = issueOwner.CurrentSettlement.SettlementComponent.GetItemPrice(this._requestedItem, null, false);
				this._numberOfRequestedItem = MathF.Round((float)((int)(2500f / (float)this._requestedItem.Value)) * base.IssueDifficultyMultiplier);
				int num = 500 + this._numberOfRequestedItem * (int)((float)(itemPrice + this._requestedItem.Value) / 2f);
				if (issueOwner.CurrentSettlement.Village.Hearth < 300f)
				{
					this._exchangeItem = issueOwner.CurrentSettlement.Village.VillageType.PrimaryProduction;
					this._numberOfExchangeItem = MathF.Ceiling((float)num * 0.7f / (float)this._exchangeItem.Value);
					return;
				}
				this._payment = num;
				this._numberOfExchangeItem = 0;
				this._exchangeItem = null;
			}

			// Token: 0x060051AC RID: 20908 RVA: 0x00167283 File Offset: 0x00165483
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.VillageHearth)
				{
					return -0.2f;
				}
				return 0f;
			}

			// Token: 0x060051AD RID: 20909 RVA: 0x00167298 File Offset: 0x00165498
			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				return new ValueTuple<SkillObject, int>((hero.GetSkillValue(DefaultSkills.Engineering) >= hero.GetSkillValue(DefaultSkills.Crafting)) ? DefaultSkills.Engineering : DefaultSkills.Crafting, 120);
			}

			// Token: 0x060051AE RID: 20910 RVA: 0x001672C5 File Offset: 0x001654C5
			protected override void OnGameLoad()
			{
			}

			// Token: 0x060051AF RID: 20911 RVA: 0x001672C7 File Offset: 0x001654C7
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest(questId, base.IssueOwner, this._requestedItem, this._numberOfRequestedItem, this._exchangeItem, this._numberOfExchangeItem, this._payment, CampaignTime.DaysFromNow(30f));
			}

			// Token: 0x060051B0 RID: 20912 RVA: 0x001672FD File Offset: 0x001654FD
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x060051B1 RID: 20913 RVA: 0x00167300 File Offset: 0x00165500
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				bool flag2 = issueGiver.GetRelationWithPlayer() >= -10f && !issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction);
				flag = (flag2 ? IssueBase.PreconditionFlags.None : ((!issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction)) ? IssueBase.PreconditionFlags.Relation : IssueBase.PreconditionFlags.AtWar));
				relationHero = issueGiver;
				skill = null;
				return flag2;
			}

			// Token: 0x060051B2 RID: 20914 RVA: 0x00167364 File Offset: 0x00165564
			public override bool IssueStayAliveConditions()
			{
				return base.IssueOwner.CurrentSettlement.ItemRoster.GetItemNumber(this._requestedItem) == 0 && !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid;
			}

			// Token: 0x060051B3 RID: 20915 RVA: 0x001673B5 File Offset: 0x001655B5
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x060051B4 RID: 20916 RVA: 0x001673B7 File Offset: 0x001655B7
			public override void AlternativeSolutionStartConsequence()
			{
				GiveGoldAction.ApplyForCharacterToParty(Hero.MainHero, null, this.CostOfToolsForAlternativeSolution, false);
			}

			// Token: 0x060051B5 RID: 20917 RVA: 0x001673CB File Offset: 0x001655CB
			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			// Token: 0x060051B6 RID: 20918 RVA: 0x001673E3 File Offset: 0x001655E3
			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			// Token: 0x060051B7 RID: 20919 RVA: 0x001673F1 File Offset: 0x001655F1
			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false) && QuestHelper.CheckGoldForAlternativeSolution(this.CostOfToolsForAlternativeSolution, ref explanation);
			}

			// Token: 0x060051B8 RID: 20920 RVA: 0x00167424 File Offset: 0x00165624
			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest.GiveTradeOrExchangeRewardToMainParty(base.IssueOwner, this._payment, this._exchangeItem, this._numberOfExchangeItem);
				ChangeRelationAction.ApplyPlayerRelation(base.IssueOwner, 5, true, true);
				base.IssueOwner.AddPower(10f);
				base.IssueOwner.CurrentSettlement.Village.Hearth += 50f;
			}

			// Token: 0x04001B12 RID: 6930
			private const int TimeLimit = 30;

			// Token: 0x04001B13 RID: 6931
			private const int TroopTierForAlternativeSolution = 2;

			// Token: 0x04001B14 RID: 6932
			public const int PowerRewardForQuestGiverOnSuccess = 10;

			// Token: 0x04001B15 RID: 6933
			private const int RelationWithIssueOwnerRewardOnSuccess = 5;

			// Token: 0x04001B16 RID: 6934
			private const int VillageHeartChangeOnSuccess = 50;

			// Token: 0x04001B17 RID: 6935
			private const int RequiredSkillValueForAlternativeSolution = 120;

			// Token: 0x04001B18 RID: 6936
			[SaveableField(10)]
			private readonly ItemObject _requestedItem;

			// Token: 0x04001B19 RID: 6937
			[SaveableField(20)]
			private readonly ItemObject _exchangeItem;

			// Token: 0x04001B1A RID: 6938
			[SaveableField(30)]
			private readonly int _numberOfExchangeItem;

			// Token: 0x04001B1B RID: 6939
			[SaveableField(40)]
			private readonly int _numberOfRequestedItem;

			// Token: 0x04001B1C RID: 6940
			[SaveableField(50)]
			private readonly int _payment;
		}

		// Token: 0x02000673 RID: 1651
		public class VillageNeedsToolsIssueQuest : QuestBase
		{
			// Token: 0x060051B9 RID: 20921 RVA: 0x0016748D File Offset: 0x0016568D
			internal static void AutoGeneratedStaticCollectObjectsVillageNeedsToolsIssueQuest(object o, List<object> collectedObjects)
			{
				((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060051BA RID: 20922 RVA: 0x0016749B File Offset: 0x0016569B
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._requestedTradeGood);
				collectedObjects.Add(this._exchangeItem);
				collectedObjects.Add(this._numberOfToolsLog);
			}

			// Token: 0x060051BB RID: 20923 RVA: 0x001674C8 File Offset: 0x001656C8
			internal static object AutoGeneratedGetMemberValue_requestedTradeGood(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest)o)._requestedTradeGood;
			}

			// Token: 0x060051BC RID: 20924 RVA: 0x001674D5 File Offset: 0x001656D5
			internal static object AutoGeneratedGetMemberValue_numberOfRequestedGood(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest)o)._numberOfRequestedGood;
			}

			// Token: 0x060051BD RID: 20925 RVA: 0x001674E7 File Offset: 0x001656E7
			internal static object AutoGeneratedGetMemberValue_exchangeItem(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest)o)._exchangeItem;
			}

			// Token: 0x060051BE RID: 20926 RVA: 0x001674F4 File Offset: 0x001656F4
			internal static object AutoGeneratedGetMemberValue_numberOfExchangeItem(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest)o)._numberOfExchangeItem;
			}

			// Token: 0x060051BF RID: 20927 RVA: 0x00167506 File Offset: 0x00165706
			internal static object AutoGeneratedGetMemberValue_numberOfToolsLog(object o)
			{
				return ((VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest)o)._numberOfToolsLog;
			}

			// Token: 0x170011C3 RID: 4547
			// (get) Token: 0x060051C0 RID: 20928 RVA: 0x00167513 File Offset: 0x00165713
			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=gnuojd9u}{VILLAGE} Needs Tools", null);
					textObject.SetTextVariable("VILLAGE", base.QuestGiver.CurrentSettlement.Name);
					return textObject;
				}
			}

			// Token: 0x170011C4 RID: 4548
			// (get) Token: 0x060051C1 RID: 20929 RVA: 0x0016753C File Offset: 0x0016573C
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x170011C5 RID: 4549
			// (get) Token: 0x060051C2 RID: 20930 RVA: 0x00167540 File Offset: 0x00165740
			private TextObject QuestStartedLog
			{
				get
				{
					TextObject textObject = new TextObject("{=BOp61V4A}{QUEST_GIVER.LINK} told you that {?QUEST_GIVER.GENDER}she{?}he{\\?} needs {._}{REQUIRED_ITEM} for {?QUEST_GIVER.GENDER}her{?}his{\\?} village. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to bring {ITEM_COUNT} {._}{REQUIRED_ITEM} to {?QUEST_GIVER.GENDER}her{?}him{\\?}. {PAYMENT_DESCRIPTION}", null);
					textObject.SetTextVariable("REQUIRED_ITEM", this._requestedTradeGood.Name);
					textObject.SetTextVariable("ITEM_COUNT", this._numberOfRequestedGood);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					TextObject textObject2;
					if (this._exchangeItem == null)
					{
						textObject2 = new TextObject("{=ZOTBiLiS}{?QUEST_GIVER.GENDER}She{?}He{\\?} will pay you {PAYMENT}{GOLD_ICON} when the task is done.", null);
						textObject2.SetTextVariable("PAYMENT", this.RewardGold);
						textObject2.SetTextVariable("GOLD_ICON", "{=!}<img src=\"General\\Icons\\Coin@2x\" extend=\"8\">");
					}
					else
					{
						textObject2 = new TextObject("{=eQzskygV}{?QUEST_GIVER.GENDER}She{?}He{\\?} will make payment as {EXCHANGE_ITEM_COUNT} {?EXCHANGE_ITEM_COUNT>1}units{?}unit{\\?} of {._}{EXCHANGE_ITEM} when the task is done.", null);
						textObject2.SetTextVariable("EXCHANGE_ITEM", this._exchangeItem.Name);
						textObject2.SetTextVariable("EXCHANGE_ITEM_COUNT", this._numberOfExchangeItem);
					}
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject2, false);
					textObject.SetTextVariable("PAYMENT_DESCRIPTION", textObject2);
					return textObject;
				}
			}

			// Token: 0x170011C6 RID: 4550
			// (get) Token: 0x060051C3 RID: 20931 RVA: 0x00167630 File Offset: 0x00165830
			private TextObject WarDeclaredQuestCancelLog
			{
				get
				{
					TextObject textObject = new TextObject("{=PakhagOy}Your clan is now at war with {QUEST_GIVER.LINK}'s lord. Your agreement with {QUEST_GIVER.LINK} was canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170011C7 RID: 4551
			// (get) Token: 0x060051C4 RID: 20932 RVA: 0x00167664 File Offset: 0x00165864
			private TextObject PlayerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x170011C8 RID: 4552
			// (get) Token: 0x060051C5 RID: 20933 RVA: 0x00167698 File Offset: 0x00165898
			private TextObject VillageRaidedQuestCancelLog
			{
				get
				{
					TextObject textObject = new TextObject("{=9zJNjWes}{SETTLEMENT} was raided. Your agreement with {QUEST_GIVER.LINK} was canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("SETTLEMENT", base.QuestGiver.CurrentSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x170011C9 RID: 4553
			// (get) Token: 0x060051C6 RID: 20934 RVA: 0x001676E8 File Offset: 0x001658E8
			private TextObject QuestTimeOutFailLog
			{
				get
				{
					TextObject textObject = new TextObject("{=jXTshvhV}You couldn't fully bring {ITEM} to {?QUEST_GIVER.GENDER}her{?}him{\\?} on time.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("ITEM", this._requestedTradeGood.Name);
					return textObject;
				}
			}

			// Token: 0x170011CA RID: 4554
			// (get) Token: 0x060051C7 RID: 20935 RVA: 0x00167734 File Offset: 0x00165934
			private TextObject QuestSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=ytqqEyFw}You brought {NUMBER_OF_ITEM} {?NUMBER_OF_ITEM>1}units{?}unit{\\?} of {ITEM} to {?QUEST_GIVER.GENDER}her{?}him{\\?} as promised.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("ITEM", this._requestedTradeGood.Name);
					textObject.SetTextVariable("NUMBER_OF_ITEM", this._numberOfRequestedGood);
					return textObject;
				}
			}

			// Token: 0x060051C8 RID: 20936 RVA: 0x0016778F File Offset: 0x0016598F
			public VillageNeedsToolsIssueQuest(string questId, Hero questGiver, ItemObject requestedItem, int numberOfRequestedGood, ItemObject exchangeItem, int numberOfExchangeItem, int payment, CampaignTime duration)
				: base(questId, questGiver, duration, payment)
			{
				this._requestedTradeGood = requestedItem;
				this._numberOfRequestedGood = numberOfRequestedGood;
				this._exchangeItem = exchangeItem;
				this._numberOfExchangeItem = numberOfExchangeItem;
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x060051C9 RID: 20937 RVA: 0x001677C8 File Offset: 0x001659C8
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=ELxhTMuy}Excellent. But please hurry - we need to put the men we hired to work right away. Good luck.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(delegate
					{
						base.StartQuest();
						TextObject textObject = new TextObject("{=M8PXWpyV}Collected {ITEM}", null);
						textObject.SetTextVariable("ITEM", this._requestedTradeGood.Name);
						this._numberOfToolsLog = base.AddDiscreteLog(this.QuestStartedLog, textObject, 0, this._numberOfRequestedGood, null, false);
						this.UpdateToolsAmount();
					})
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=dJVjbgyu}Any news about our tools {?PLAYER.GENDER}madame{?}sir{\\?}?", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=yvXNvh2B}Yes, I brought your tools.", null), null)
					.Condition(new ConversationSentence.OnConditionDelegate(this.PlayerHasTools))
					.NpcLine(new TextObject("{=yF3cBat5}Thank you {?PLAYER.GENDER}madame{?}sir{\\?}. Here is what we promised.", null), null, null)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.FinishQuestSuccess1))
					.CloseDialog()
					.PlayerOption(new TextObject("{=ULWYVuVw}I'm still looking for your goods.", null), null)
					.NpcLine(new TextObject("{=tkaEZNpB}Of course. But… please hurry, {?PLAYER.GENDER}madame{?}sir{\\?}. We can't afford to pay the hired men to sit around. We don't have much money to spare, {?PLAYER.GENDER}madame{?}sir{\\?}.", null), null, null)
					.CloseDialog()
					.EndPlayerOptions();
			}

			// Token: 0x060051CA RID: 20938 RVA: 0x001678D1 File Offset: 0x00165AD1
			private bool PlayerHasTools()
			{
				return this.GetCurrentToolsAmountInPlayerRoster() >= this._numberOfRequestedGood;
			}

			// Token: 0x060051CB RID: 20939 RVA: 0x001678E4 File Offset: 0x00165AE4
			protected override void RegisterEvents()
			{
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.RaidCompletedEvent.AddNonSerializedListener(this, new Action<BattleSideEnum, RaidEventComponent>(this.RaidCompleted));
				CampaignEvents.PlayerInventoryExchangeEvent.AddNonSerializedListener(this, new Action<List<ValueTuple<ItemRosterElement, int>>, List<ValueTuple<ItemRosterElement, int>>, bool>(this.OnInventoryExchange));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			// Token: 0x060051CC RID: 20940 RVA: 0x00167964 File Offset: 0x00165B64
			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
				{
					QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
				}
			}

			// Token: 0x060051CD RID: 20941 RVA: 0x00167977 File Offset: 0x00165B77
			private void RaidCompleted(BattleSideEnum winnerSide, RaidEventComponent raidEvent)
			{
				if (raidEvent.MapEventSettlement == base.QuestGiver.CurrentSettlement)
				{
					base.CompleteQuestWithCancel(this.VillageRaidedQuestCancelLog);
				}
			}

			// Token: 0x060051CE RID: 20942 RVA: 0x00167998 File Offset: 0x00165B98
			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this.PlayerDeclaredWarQuestLogText, this.WarDeclaredQuestCancelLog);
			}

			// Token: 0x060051CF RID: 20943 RVA: 0x001679AF File Offset: 0x00165BAF
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this.WarDeclaredQuestCancelLog);
				}
			}

			// Token: 0x060051D0 RID: 20944 RVA: 0x001679DE File Offset: 0x00165BDE
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x060051D1 RID: 20945 RVA: 0x001679E6 File Offset: 0x00165BE6
			private void OnInventoryExchange(List<ValueTuple<ItemRosterElement, int>> purchasedItems, List<ValueTuple<ItemRosterElement, int>> soldItems, bool isTrading)
			{
				this.UpdateToolsAmount();
			}

			// Token: 0x060051D2 RID: 20946 RVA: 0x001679EE File Offset: 0x00165BEE
			private int GetCurrentToolsAmountInPlayerRoster()
			{
				return MobileParty.MainParty.ItemRoster.GetItemNumber(this._requestedTradeGood);
			}

			// Token: 0x060051D3 RID: 20947 RVA: 0x00167A05 File Offset: 0x00165C05
			private void UpdateToolsAmount()
			{
				this._numberOfToolsLog.UpdateCurrentProgress((int)MathF.Clamp((float)this.GetCurrentToolsAmountInPlayerRoster(), 0f, (float)this._numberOfRequestedGood));
			}

			// Token: 0x060051D4 RID: 20948 RVA: 0x00167A2C File Offset: 0x00165C2C
			protected override void OnTimedOut()
			{
				base.AddLog(this.QuestTimeOutFailLog, false);
				base.QuestGiver.AddPower(-10f);
				base.QuestGiver.CurrentSettlement.Village.Hearth += -30f;
				ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, -5, true, true);
			}

			// Token: 0x060051D5 RID: 20949 RVA: 0x00167A88 File Offset: 0x00165C88
			private void FinishQuestSuccess1()
			{
				base.AddLog(this.QuestSuccessLog, false);
				base.QuestGiver.AddPower(10f);
				TraitLevelingHelper.OnIssueSolvedThroughQuest(Hero.MainHero, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 30)
				});
				PartyBase.MainParty.ItemRoster.AddToCounts(this._requestedTradeGood, -this._numberOfRequestedGood);
				VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest.GiveTradeOrExchangeRewardToMainParty(base.QuestGiver, this.RewardGold, this._exchangeItem, this._numberOfExchangeItem);
				int num;
				if (this._exchangeItem != null)
				{
					ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, 7, true, true);
					foreach (Hero hero in base.QuestGiver.CurrentSettlement.Notables)
					{
						if (hero != base.QuestGiver)
						{
							ChangeRelationAction.ApplyPlayerRelation(hero, 2, true, true);
						}
					}
					num = 40;
				}
				else
				{
					ChangeRelationAction.ApplyPlayerRelation(base.QuestGiver, 5, true, true);
					num = 20;
				}
				base.QuestGiver.CurrentSettlement.Village.Hearth += (float)num;
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x060051D6 RID: 20950 RVA: 0x00167BB8 File Offset: 0x00165DB8
			public static void GiveTradeOrExchangeRewardToMainParty(Hero questGiver, int gold, ItemObject exchangeItem, int exchangeItemCount)
			{
				if (exchangeItem != null)
				{
					questGiver.CurrentSettlement.ItemRoster.AddToCounts(exchangeItem, exchangeItemCount);
					GiveItemAction.ApplyForParties(questGiver.CurrentSettlement.Party, PartyBase.MainParty, exchangeItem, exchangeItemCount);
					return;
				}
				GiveGoldAction.ApplyForQuestBetweenCharacters(questGiver, Hero.MainHero, gold, false);
			}

			// Token: 0x04001B1D RID: 6941
			private const int VillageHeartChangeOnExchangeSuccess = 40;

			// Token: 0x04001B1E RID: 6942
			private const int VillageHeartChangeOnTradeSuccess = 20;

			// Token: 0x04001B1F RID: 6943
			private const int TraitChangeOnSuccess = 30;

			// Token: 0x04001B20 RID: 6944
			private const int RelationChangeWithQuestGiverOnExchangeSuccess = 7;

			// Token: 0x04001B21 RID: 6945
			private const int RelationChangeWithNotablesOnExchangeSuccess = 2;

			// Token: 0x04001B22 RID: 6946
			private const int RelationChangeWithQuestGiverOnTradeSuccess = 5;

			// Token: 0x04001B23 RID: 6947
			private const int RelationChangeWithQuestGiverOnFail = -5;

			// Token: 0x04001B24 RID: 6948
			private const int QuestGiverPowerChangeOnFail = -10;

			// Token: 0x04001B25 RID: 6949
			private const int VillageHeartChangeOnFail = -30;

			// Token: 0x04001B26 RID: 6950
			[SaveableField(10)]
			private readonly ItemObject _requestedTradeGood;

			// Token: 0x04001B27 RID: 6951
			[SaveableField(20)]
			private readonly int _numberOfRequestedGood;

			// Token: 0x04001B28 RID: 6952
			[SaveableField(30)]
			private readonly ItemObject _exchangeItem;

			// Token: 0x04001B29 RID: 6953
			[SaveableField(40)]
			private readonly int _numberOfExchangeItem;

			// Token: 0x04001B2A RID: 6954
			[SaveableField(50)]
			private JournalLog _numberOfToolsLog;
		}

		// Token: 0x02000674 RID: 1652
		public class VillageNeedsToolsIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x060051DA RID: 20954 RVA: 0x00167C6B File Offset: 0x00165E6B
			public VillageNeedsToolsIssueTypeDefiner()
				: base(600000)
			{
			}

			// Token: 0x060051DB RID: 20955 RVA: 0x00167C78 File Offset: 0x00165E78
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssue), 1, null);
				base.AddClassDefinition(typeof(VillageNeedsToolsIssueBehavior.VillageNeedsToolsIssueQuest), 2, null);
			}
		}
	}
}
