using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Extensions;
using TaleWorlds.CampaignSystem.GameMenus;
using TaleWorlds.CampaignSystem.Map;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Party.PartyComponents;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	public class ExtortionByDesertersIssueBehavior : CampaignBehaviorBase
	{
		private void OnCheckForIssue(Hero hero)
		{
			if (this.ConditionsHold(hero))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnIssueSelected), typeof(ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssue), IssueBase.IssueFrequency.Common, null));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssue), IssueBase.IssueFrequency.Common));
		}

		private IssueBase OnIssueSelected(in PotentialIssueData pid, Hero issueOwner)
		{
			return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssue(issueOwner);
		}

		private bool ConditionsHold(Hero issueGiver)
		{
			if (issueGiver.IsHeadman)
			{
				Settlement currentSettlement = issueGiver.CurrentSettlement;
				if (currentSettlement.IsVillage && currentSettlement.Culture != null)
				{
					Settlement bound = currentSettlement.Village.Bound;
					Town town = ((bound != null) ? bound.Town : null);
					if (town != null)
					{
						return town.Security <= 50f;
					}
				}
			}
			return false;
		}

		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		public override void SyncData(IDataStore dataStore)
		{
		}

		private const IssueBase.IssueFrequency ExtortionByDesertersIssueFrequency = IssueBase.IssueFrequency.Common;

		public class ExtortionByDesertersIssue : IssueBase
		{
			internal static void AutoGeneratedStaticCollectObjectsExtortionByDesertersIssue(object o, List<object> collectedObjects)
			{
				((ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			public override IssueBase.AlternativeSolutionScaleFlag AlternativeSolutionScaleFlags
			{
				get
				{
					return IssueBase.AlternativeSolutionScaleFlag.Casualties | IssueBase.AlternativeSolutionScaleFlag.FailureRisk;
				}
			}

			protected override int CompanionSkillRewardXP
			{
				get
				{
					return (int)(800f + 1000f * base.IssueDifficultyMultiplier);
				}
			}

			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=NhDEwaab}Well, if you know how to fight... Yes, we could use help. A group of deserters is camped out near here. They come every few weeks, demanding food and money. They've killed two villagers who resisted them. We asked our {?LORD.GENDER}mistress{?}lord{\\?}, {LORD.NAME}, for help but {?LORD.GENDER}her{?}his{\\?} men never get here in time.", null);
					StringHelpers.SetCharacterProperties("LORD", base.IssueSettlement.OwnerClan.Leader.CharacterObject, textObject, false);
					if (base.IssueSettlement.OwnerClan.Leader == Hero.MainHero)
					{
						textObject = new TextObject("{=dYO8piOM}Yes, my {?PLAYER.GENDER}lady{?}lord{\\?}. It is good of you to ask. A group of deserters is camped out near here. They come every few weeks, demanding food and money. They've killed two villagers who resisted them.", null);
					}
					return textObject;
				}
			}

			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					return new TextObject("{=WO3EaqB3}How can I help you?", null);
				}
			}

			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					return new TextObject("{=tb0gqxDZ}Here's the plan. We lay an ambush in the village. When they show up, we spring. If you join us, I think we've got a good chance of ridding ourselves of this scourge before they murder us one by one.", null);
				}
			}

			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=vKxiFQRA}All right. I'll wait here and join you in your fight.", null);
				}
			}

			public override TextObject IssueAlternativeSolutionSuccessLog
			{
				get
				{
					TextObject textObject = new TextObject("{=CLvxAzyV}Following your orders, {COMPANION.LINK} and your men has defeated the deserters and saved the people of {SETTLEMENT}.", null);
					textObject.SetTextVariable("SETTLEMENT", base.IssueSettlement.EncyclopediaLinkWithName);
					textObject.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, false);
					return textObject;
				}
			}

			public override bool IsThereAlternativeSolution
			{
				get
				{
					return true;
				}
			}

			public override int AlternativeSolutionBaseNeededMenCount
			{
				get
				{
					return 21 + MathF.Ceiling(25f * base.IssueDifficultyMultiplier);
				}
			}

			protected override int AlternativeSolutionBaseDurationInDaysInternal
			{
				get
				{
					return 3 + MathF.Ceiling(5f * base.IssueDifficultyMultiplier);
				}
			}

			protected override int RewardGold
			{
				get
				{
					return 800 + MathF.Ceiling(4200f * base.IssueDifficultyMultiplier);
				}
			}

			public override TextObject IssueAlternativeSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=J0Clb1RD}If you don't have the time, at least send one of your best companions with {TROOP_COUNT} experienced men for {RETURN_DAYS} days.", null);
					textObject.SetTextVariable("TROOP_COUNT", base.GetTotalAlternativeSolutionNeededMenCount());
					textObject.SetTextVariable("RETURN_DAYS", base.GetTotalAlternativeSolutionDurationInDays());
					return textObject;
				}
			}

			public override TextObject IssueAlternativeSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=A4oWozvO}I don't have time for this, but my companion and my men will wait here with you.", null);
				}
			}

			public override TextObject IssueDiscussAlternativeSolution
			{
				get
				{
					return new TextObject("{=YwMMZFSm}We're working with your men to plan the ambush, {?PLAYER.GENDER}madam{?}sir{\\?}. These thieves will regret the day they ever thought we were easy pickings.", null);
				}
			}

			public override TextObject IssueAlternativeSolutionResponseByIssueGiver
			{
				get
				{
					return new TextObject("{=OLcbuZSa}Thank you. Your help is much appreciated.", null);
				}
			}

			protected override TextObject AlternativeSolutionStartLog
			{
				get
				{
					TextObject textObject = new TextObject("{=MTVhHmbb}{ISSUE_GIVER.LINK} told you that a group of deserters have been raiding their village regularly. You asked your companion {COMPANION.LINK} to take {TROOP_COUNT} men to stay with {ISSUE_GIVER.LINK} and defend the people of {ISSUE_SETTLEMENT}.", null);
					StringHelpers.SetCharacterProperties("ISSUE_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					StringHelpers.SetCharacterProperties("COMPANION", base.AlternativeSolutionHero.CharacterObject, textObject, false);
					textObject.SetTextVariable("ISSUE_SETTLEMENT", base.IssueSettlement.Name);
					textObject.SetTextVariable("TROOP_COUNT", this.AlternativeSolutionSentTroops.TotalManCount - 1);
					return textObject;
				}
			}

			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			public override bool DoTroopsSatisfyAlternativeSolution(TroopRoster troopRoster, out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(troopRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			public override bool AlternativeSolutionCondition(out TextObject explanation)
			{
				explanation = TextObject.Empty;
				return QuestHelper.CheckRosterForAlternativeSolution(MobileParty.MainParty.MemberRoster, base.GetTotalAlternativeSolutionNeededMenCount(), ref explanation, 2, false);
			}

			public override bool IsTroopTypeNeededByAlternativeSolution(CharacterObject character)
			{
				return character.Tier >= 2;
			}

			protected override void AlternativeSolutionEndWithSuccessConsequence()
			{
				this.RelationshipChangeWithIssueOwner = 8;
				base.IssueOwner.AddPower(15f);
				base.IssueSettlement.Village.Bound.Town.Security += 10f;
				base.IssueSettlement.Village.Bound.Prosperity += 100f;
				TraitLevelingHelper.OnIssueSolvedThroughQuest(base.IssueOwner, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, 60)
				});
			}

			protected override void AlternativeSolutionEndWithFailureConsequence()
			{
				base.IssueSettlement.Village.Bound.Town.Security += -10f;
				base.IssueSettlement.Village.Bound.Prosperity += -50f;
				this.RelationshipChangeWithIssueOwner = -10;
				base.IssueOwner.AddPower(-10f);
				TraitLevelingHelper.OnIssueFailed(base.IssueOwner, new Tuple<TraitObject, int>[]
				{
					new Tuple<TraitObject, int>(DefaultTraits.Honor, -20)
				});
			}

			protected override void OnGameLoad()
			{
			}

			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest(questId, base.IssueOwner, base.IssueDifficultyMultiplier, this.RewardGold, CampaignTime.DaysFromNow(12f));
			}

			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.Common;
			}

			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				flag = IssueBase.PreconditionFlags.None;
				skill = null;
				relationHero = null;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					relationHero = issueGiver;
					flag |= IssueBase.PreconditionFlags.Relation;
				}
				Settlement currentSettlement = issueGiver.CurrentSettlement;
				if (currentSettlement != null && FactionManager.IsAtWarAgainstFaction(currentSettlement.MapFaction, Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (MobileParty.MainParty.MemberRoster.TotalHealthyCount < 20)
				{
					flag |= IssueBase.PreconditionFlags.NotEnoughTroops;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			public override bool IssueStayAliveConditions()
			{
				return base.IssueSettlement.Village.Bound.Town.Security <= 80f && !base.IssueOwner.CurrentSettlement.IsRaided && !base.IssueOwner.CurrentSettlement.IsUnderRaid;
			}

			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=P2VNGJDa}Extortion by Deserters at {SETTLEMENT}", null);
					textObject.SetTextVariable("SETTLEMENT", base.IssueSettlement.Name);
					return textObject;
				}
			}

			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=atk3PTae}Deserters are extorting from the villagers of {SETTLEMENT} and have killed several who resisted.", null);
					textObject.SetTextVariable("SETTLEMENT", base.IssueSettlement.Name);
					return textObject;
				}
			}

			public override TextObject IssueAsRumorInSettlement
			{
				get
				{
					TextObject textObject = new TextObject("{=Fv8CKNU2}I hope {QUEST_GIVER.NAME} knows what {?QUEST_GIVER.GENDER}she's{?}he's{\\?} doing with that plan to get rid of the deserters.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			public ExtortionByDesertersIssue(Hero issueOwner)
				: base(issueOwner, CampaignTime.DaysFromNow(15f))
			{
			}

			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.SettlementProsperity)
				{
					return -1f;
				}
				if (issueEffect == DefaultIssueEffects.SettlementSecurity)
				{
					return -1f;
				}
				if (issueEffect == DefaultIssueEffects.SettlementLoyalty)
				{
					return -0.5f;
				}
				return 0f;
			}

			public override ValueTuple<SkillObject, int> GetAlternativeSolutionSkill(Hero hero)
			{
				int skillValue = hero.GetSkillValue(DefaultSkills.Bow);
				int skillValue2 = hero.GetSkillValue(DefaultSkills.Crossbow);
				int skillValue3 = hero.GetSkillValue(DefaultSkills.Throwing);
				int skillValue4 = hero.GetSkillValue(DefaultSkills.Engineering);
				if (skillValue >= skillValue2 && skillValue >= skillValue3 && skillValue >= skillValue4)
				{
					return new ValueTuple<SkillObject, int>(DefaultSkills.Bow, 150);
				}
				if (skillValue2 >= skillValue3 && skillValue2 >= skillValue4)
				{
					return new ValueTuple<SkillObject, int>(DefaultSkills.Crossbow, 150);
				}
				if (skillValue3 < skillValue4)
				{
					return new ValueTuple<SkillObject, int>(DefaultSkills.Engineering, 120);
				}
				return new ValueTuple<SkillObject, int>(DefaultSkills.Throwing, 150);
			}

			internal const int IssuePreConditionMaxSecurityLevel = 50;

			internal const int IssueStayAliveConditionMaxSecurityLevel = 80;

			internal const float IssuePreConditionMinPlayerRelation = -10f;

			internal const int MinimumRequiredMenCount = 20;

			internal const int IssueDuration = 15;

			internal const int QuestTimeLimit = 12;

			internal const int AlternativeSolutionTroopTierRequirement = 2;

			private const int AlternativeSolutionRangedSkillThreshold = 150;

			private const int AlternativeSolutionEngineeringSkillThreshold = 120;

			private const int AlternativeSolutionHonorRewardOnSuccess = 60;

			private const int AlternativeSolutionHonorPenaltyOnFail = -20;

			private const int AlternativeSolutionRelationRewardOnSuccess = 8;

			private const int AlternativeSolutionRelationPenaltyOnFail = -10;

			private const int AlternativeSolutionIssueOwnerPowerBonusOnSuccess = 15;

			private const int AlternativeSolutionIssueOwnerPowerPenaltyOnFail = -10;

			private const int AlternativeSolutionTownSecurityBonusOnSuccess = 10;

			private const int AlternativeSolutionTownSecurityPenaltyOnFail = -10;

			private const int AlternativeSolutionTownProsperityBonusOnSuccess = 100;

			private const int AlternativeSolutionTownProsperityPenaltyOnFail = -50;

			private const int AlternativeSolutionPlayerRenownBonusOnSuccess = 2;
		}

		public class ExtortionByDesertersIssueQuest : QuestBase
		{
			internal static void AutoGeneratedStaticCollectObjectsExtortionByDesertersIssueQuest(object o, List<object> collectedObjects)
			{
				((ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._deserterMobileParty);
				collectedObjects.Add(this._defenderMobileParty);
			}

			internal static object AutoGeneratedGetMemberValue_deserterMobileParty(object o)
			{
				return ((ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest)o)._deserterMobileParty;
			}

			internal static object AutoGeneratedGetMemberValue_defenderMobileParty(object o)
			{
				return ((ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest)o)._defenderMobileParty;
			}

			internal static object AutoGeneratedGetMemberValue_currentState(object o)
			{
				return ((ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest)o)._currentState;
			}

			internal static object AutoGeneratedGetMemberValue_questDifficultyMultiplier(object o)
			{
				return ((ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest)o)._questDifficultyMultiplier;
			}

			internal static object AutoGeneratedGetMemberValue_deserterBattleFinalizedForTheFirstTime(object o)
			{
				return ((ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest)o)._deserterBattleFinalizedForTheFirstTime;
			}

			public override TextObject Title
			{
				get
				{
					TextObject textObject = new TextObject("{=vbiA31xT}Extortion by Deserters at {SETTLEMENT}", null);
					textObject.SetTextVariable("SETTLEMENT", this.QuestSettlement.Name);
					return textObject;
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultSuccess1
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(0, 20, 1f, 4, 5, 10, 0, true);
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultSuccess2
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(1, 40, 0.5f, 6, 10, 10, 25, true);
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultSuccess3
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(2, 60, 0f, 8, 15, 10, 100, true);
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultFail1
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(0, -20, 0f, -10, -10, -10, -50, false);
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultFail2
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(0, -20, 0f, -10, -10, -10, -50, false);
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultFail3
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(0, -50, 0f, -5, -10, -10, -50, false);
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultTimeOut
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(0, -20, 0f, -10, 0, 0, 0, false);
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultCancel1
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(0, 0, 0f, 0, 0, 0, 0, false);
				}
			}

			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult _questResultCancel2
			{
				get
				{
					return new ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult(0, 0, 0f, 0, 0, 0, 0, false);
				}
			}

			private TextObject _onQuestStartedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=pWxXvtXP}{QUEST_GIVER.LINK}, a headman of {QUEST_SETTLEMENT} told you that a group of deserters have been raiding their village regularly. {?QUEST_GIVER.GENDER}She{?}He{\\?} asked you to wait in {QUEST_SETTLEMENT} until the deserters arrive...", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", this.QuestSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			private TextObject _onQuestSucceededLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=IXkgPlKR}You have defeated the deserters and saved the people of {QUEST_SETTLEMENT}.", null);
					textObject.SetTextVariable("QUEST_SETTLEMENT", this.QuestSettlement.Name);
					return textObject;
				}
			}

			private TextObject _onQuestFailed1LogText
			{
				get
				{
					return new TextObject("{=bdWc1VEl}You've lost track of the deserter party.", null);
				}
			}

			private TextObject _onQuestFailed2LogText
			{
				get
				{
					return new TextObject("{=oYJCP3mt}You've failed to stop the deserters. The deserters ravaged the village and left.", null);
				}
			}

			private TextObject _onQuestFailed3LogText
			{
				get
				{
					TextObject textObject = new TextObject("{=GLuN0dZg}Your criminal action towards {QUEST_SETTLEMENT} has angered {QUEST_GIVER.LINK} and {?QUEST_GIVER.GENDER}she{?}he{\\?} broke off the agreement that you had.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", this.QuestSettlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			private TextObject _onQuestTimedOutLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=YjxCkglX}You've failed to complete this quest in time. Your agreement with {QUEST_GIVER.LINK} was canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _onQuestCancel1LogText
			{
				get
				{
					TextObject textObject = new TextObject("{=x346Rqle}Your clan is now at war with the {QUEST_GIVER.LINK}'s lord. Your agreement was canceled.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _playerDeclaredWarQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=bqeWVVEE}Your actions have started a war with {QUEST_GIVER.LINK}'s faction. {?QUEST_GIVER.GENDER}She{?}He{\\?} cancels your agreement and the quest is a failure.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _onQuestCancel2LogText
			{
				get
				{
					TextObject textObject = new TextObject("{=wTx2MNIJ}{QUEST_SETTLEMENT} was raided. {QUEST_GIVER.LINK} can no longer fulfill your contract. Agreement was canceled.", null);
					textObject.SetTextVariable("QUEST_SETTLEMENT", this.QuestSettlement.Name);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _onDeserterPartyDefeatedLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=sRBvUj6U}The deserter party is defeated. Return back to {QUEST_GIVER.LINK} to claim your rewards.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			private TextObject _onPlayerLeftQuestSettlementNotificationText
			{
				get
				{
					TextObject textObject = new TextObject("{=qjuiWN4K}{PLAYER.NAME}, you should wait with us in the village to ambush the deserters!", null);
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					return textObject;
				}
			}

			private TextObject _onPlayerDefeatedDesertersNotificationText
			{
				get
				{
					TextObject textObject = new TextObject("{=EfZaCzb0}{PLAYER.NAME}, please return back to {QUEST_SETTLEMENT} to claim your rewards.", null);
					StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, textObject, false);
					textObject.SetTextVariable("QUEST_SETTLEMENT", this.QuestSettlement.Name);
					return textObject;
				}
			}

			private TextObject _onDesertersNoticedPlayerNotificationText
			{
				get
				{
					return new TextObject("{=9vzm2j5T}Deserters have noticed our presence, they are running away!", null);
				}
			}

			private DialogFlow QuestCompletionDialogFlow
			{
				get
				{
					return DialogFlow.CreateDialogFlow("start", 125).NpcLine("{=SCaWkKF1}Here is what we've promised, {GOLD_REWARD}{GOLD_ICON} denars. I hope this makes it worth the blood spilled.", null, null).Condition(delegate
					{
						MBTextManager.SetTextVariable("GOLD_REWARD", this.RewardGold);
						return Hero.OneToOneConversationHero == base.QuestGiver && this._currentState == ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersAreDefeated;
					})
						.BeginPlayerOptions()
						.PlayerOption("{=Bb3oHQNa}Thanks, this will come in handy.", null)
						.NpcLine("{=khIuyBAi}Thank you for your help. Farewell.", null, null)
						.Consequence(delegate
						{
							ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult questResultSuccess = this._questResultSuccess1;
							this.ApplyQuestResult(questResultSuccess);
							base.AddLog(this._onQuestSucceededLogText, false);
							base.CompleteQuestWithSuccess();
						})
						.CloseDialog()
						.PlayerOption("{=xcyr5Oq2}Half of the coin is enough for our needs.", null)
						.NpcLine("{=SVrCpvpZ}Thank you {PLAYER.NAME}. Our people are grateful to you for what you have done today. Farewell.", null, null)
						.Condition(() => true)
						.Consequence(delegate
						{
							ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult questResultSuccess2 = this._questResultSuccess2;
							this.ApplyQuestResult(questResultSuccess2);
							base.AddLog(this._onQuestSucceededLogText, false);
							base.CompleteQuestWithSuccess();
						})
						.CloseDialog()
						.PlayerOption("{=52GFRUTE}Keep your coin, headman. Your people's blessings are enough.", null)
						.NpcLine("{=1l5dKk1c}Oh, thank you {PLAYER.NAME}. You will always be remembered by our people. Farewell.", null, null)
						.Condition(() => true)
						.Consequence(delegate
						{
							ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult questResultSuccess3 = this._questResultSuccess3;
							this.ApplyQuestResult(questResultSuccess3);
							base.AddLog(this._onQuestSucceededLogText, false);
							base.CompleteQuestWithSuccess();
						})
						.CloseDialog()
						.EndPlayerOptions()
						.CloseDialog();
				}
			}

			private DialogFlow DeserterPartyAmbushedDialogFlow
			{
				get
				{
					return DialogFlow.CreateDialogFlow("start", 125).NpcLine("{=s2btPjJf}Who the hell are you? If you live in this village, you'd better rustle up some silver and wine. Look lively, eh?", null, null).Condition(() => this._deserterMobileParty != null && this._deserterMobileParty.IsActive && CharacterObject.OneToOneConversationCharacter == ConversationHelper.GetConversationCharacterPartyLeader(this._deserterMobileParty.Party) && this._deserterMobileParty.Position2D.Distance(this.QuestSettlement.Position2D) <= 5f)
						.PlayerLine("{=Pp3koSqA}This time you'll have to fight for it!", null)
						.CloseDialog();
				}
			}

			private int DeserterPartyMenCount
			{
				get
				{
					return 24 + MathF.Ceiling(24f * this._questDifficultyMultiplier);
				}
			}

			private int DefenderPartyMenCount
			{
				get
				{
					return 16 + MathF.Ceiling(16f * this._questDifficultyMultiplier);
				}
			}

			public Settlement QuestSettlement
			{
				get
				{
					return base.QuestGiver.CurrentSettlement;
				}
			}

			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			public ExtortionByDesertersIssueQuest(string questId, Hero questGiver, float difficultyMultiplier, int rewardGold, CampaignTime duration)
				: base(questId, questGiver, duration, rewardGold)
			{
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, null, false);
				this._questDifficultyMultiplier = difficultyMultiplier;
				this._defenderMobileParty = null;
				this._deserterBattleFinalizedForTheFirstTime = false;
				this._playerAwayFromSettlementNotificationSent = false;
				this.CreateDeserterParty();
				this._currentState = ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersMovingToSettlement;
				base.AddTrackedObject(this._deserterMobileParty);
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			protected override void InitializeQuestOnGameLoad()
			{
				StringHelpers.SetCharacterProperties("PLAYER", CharacterObject.PlayerCharacter, null, false);
				this._playerAwayFromSettlementNotificationSent = false;
				if (this._currentState == ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersMovingToSettlement)
				{
					float num = this._deserterMobileParty.Position2D.Distance(MobileParty.MainParty.Position2D);
					bool flag = PlayerEncounter.Current != null && PlayerEncounter.EncounterSettlement == this.QuestSettlement;
					bool flag2 = num <= this._deserterMobileParty.SeeingRange * 0.8f;
					this._playerAwayFromSettlementNotificationSent = !flag && !flag2;
				}
				this.SetDialogs();
				Campaign.Current.ConversationManager.AddDialogFlow(this.QuestCompletionDialogFlow, this);
				Campaign.Current.ConversationManager.AddDialogFlow(this.DeserterPartyAmbushedDialogFlow, this);
			}

			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine("{=PnRVabwv}Thank you. Just wait in the village. We'll stand lookout and lure them into your ambush. Just wait for the signal.", null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.OnQuestAccepted))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine("{=iN1kBsac}I don't think they'll be long now. Our hunters have spotted them making ready. Keep waiting.", null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.BeginPlayerOptions()
					.PlayerOption("{=IJihRdfF}Don't worry, we'll be ready for the fight.", null)
					.NpcLine("{=U0UoayfA}Good, good. Thank you again.", null, null)
					.CloseDialog()
					.PlayerOption("{=bcGzpFSg}Are you sure about what your hunters saw? My men are starting to run out of patience.", null)
					.NpcLine("{=YsASaPKq}I'm sure they'll be here soon. Please don't leave the village, or we'll stand no chance...", null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
				this.QuestCharacterDialogFlow = DialogFlow.CreateDialogFlow("start", 125).NpcLine("{=rAqyKcKZ}Who the hell are you? What do you want from us?", null, null).Condition(() => this._deserterMobileParty != null && this._deserterMobileParty.IsActive && CharacterObject.OneToOneConversationCharacter == ConversationHelper.GetConversationCharacterPartyLeader(this._deserterMobileParty.Party) && this._deserterMobileParty.Position2D.Distance(this.QuestSettlement.Position2D) >= 5f)
					.BeginPlayerOptions()
					.PlayerOption("{=Ljs9ahMk}I know your intentions. I will not let you steal from those poor villagers!", null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			private void OnQuestAccepted()
			{
				base.StartQuest();
				Campaign.Current.ConversationManager.AddDialogFlow(this.QuestCompletionDialogFlow, this);
				Campaign.Current.ConversationManager.AddDialogFlow(this.DeserterPartyAmbushedDialogFlow, this);
				base.AddLog(this._onQuestStartedLogText, false);
			}

			private void ApplyQuestResult(in ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult result)
			{
				int num = (int)(result.GoldMultiplier * (float)this.RewardGold);
				if (num > 0)
				{
					GiveGoldAction.ApplyBetweenCharacters(null, Hero.MainHero, num, false);
				}
				if (result.QuestGiverPowerChange != 0)
				{
					base.QuestGiver.AddPower((float)result.QuestGiverPowerChange);
				}
				if (result.TownSecurityChange != 0)
				{
					this.QuestSettlement.Village.Bound.Town.Security += (float)result.TownSecurityChange;
				}
				if (result.TownProsperityChange != 0)
				{
					this.QuestSettlement.Village.Bound.Town.Settlement.Prosperity += (float)result.TownProsperityChange;
				}
				if (result.HonorChange != 0)
				{
					if (result.IsSuccess)
					{
						TraitLevelingHelper.OnIssueSolvedThroughQuest(base.QuestGiver, new Tuple<TraitObject, int>[]
						{
							new Tuple<TraitObject, int>(DefaultTraits.Honor, result.HonorChange)
						});
					}
					else
					{
						TraitLevelingHelper.OnIssueFailed(base.QuestGiver, new Tuple<TraitObject, int>[]
						{
							new Tuple<TraitObject, int>(DefaultTraits.Honor, result.HonorChange)
						});
					}
				}
				if (result.QuestGiverRelationChange != 0)
				{
					this.RelationshipChangeWithQuestGiver = result.QuestGiverRelationChange;
				}
				if (result.RenownChange > 0)
				{
					GainRenownAction.Apply(Hero.MainHero, (float)result.RenownChange, false);
				}
			}

			protected override void RegisterEvents()
			{
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.OnHourlyTickEvent));
				CampaignEvents.MapEventEnded.AddNonSerializedListener(this, new Action<MapEvent>(this.MapEventEnded));
				CampaignEvents.GameMenuOpened.AddNonSerializedListener(this, new Action<MenuCallbackArgs>(this.GameMenuOpened));
				CampaignEvents.WarDeclared.AddNonSerializedListener(this, new Action<IFaction, IFaction, DeclareWarAction.DeclareWarDetail>(this.OnWarDeclared));
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.SettlementEntered.AddNonSerializedListener(this, new Action<MobileParty, Settlement, Hero>(this.SettlementEntered));
				CampaignEvents.GameMenuOptionSelectedEvent.AddNonSerializedListener(this, new Action<GameMenuOption>(this.GameMenuOptionSelected));
				CampaignEvents.VillageBeingRaided.AddNonSerializedListener(this, new Action<Village>(this.OnVillageBeingRaided));
				CampaignEvents.MapEventStarted.AddNonSerializedListener(this, new Action<MapEvent, PartyBase, PartyBase>(this.OnMapEventStarted));
			}

			private void OnMapEventStarted(MapEvent mapEvent, PartyBase attackerParty, PartyBase defenderParty)
			{
				if (attackerParty == PartyBase.MainParty)
				{
					if (mapEvent.IsFieldBattle && defenderParty.IsMobile && defenderParty.MobileParty.HomeSettlement == this.QuestSettlement)
					{
						base.CompleteQuestWithFail(this._onQuestFailed3LogText);
						ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult questResultFail = this._questResultFail3;
						this.ApplyQuestResult(questResultFail);
						return;
					}
					if (QuestHelper.CheckMinorMajorCoercion(this, mapEvent, attackerParty))
					{
						QuestHelper.ApplyGenericMinorMajorCoercionConsequences(this, mapEvent);
					}
				}
			}

			protected override void OnFinalize()
			{
				this.DestroyDefenderParty();
				this.ReleaseDeserterParty();
			}

			private void TickDesertersPartyLogic()
			{
				if ((this._deserterMobileParty == null || this._deserterMobileParty.MapEvent == null) && base.IsOngoing)
				{
					switch (this._currentState)
					{
					case ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersMovingToSettlement:
					{
						float num = this._deserterMobileParty.Position2D.Distance(MobileParty.MainParty.Position2D);
						bool flag = PlayerEncounter.Current != null && PlayerEncounter.EncounterSettlement == this.QuestSettlement;
						bool flag2 = num <= this._deserterMobileParty.SeeingRange * 0.8f;
						if (!flag)
						{
							if (flag2)
							{
								MBInformationManager.AddQuickInformation(this._onDesertersNoticedPlayerNotificationText, 0, Hero.MainHero.CharacterObject, "");
								this.HandleDesertersRunningAway();
								this._currentState = ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersRunningAwayFromPlayer;
								return;
							}
							if (!this._playerAwayFromSettlementNotificationSent)
							{
								MBInformationManager.AddQuickInformation(this._onPlayerLeftQuestSettlementNotificationText, 0, base.QuestGiver.CharacterObject, "");
								this._playerAwayFromSettlementNotificationSent = true;
								return;
							}
						}
						else if (!this._deserterMobileParty.IsCurrentlyGoingToSettlement)
						{
							SetPartyAiAction.GetActionForVisitingSettlement(this._deserterMobileParty, this.QuestSettlement);
							return;
						}
						break;
					}
					case ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersRunningAwayFromPlayer:
						if (this._deserterMobileParty.Position2D.Distance(MobileParty.MainParty.Position2D) > MobileParty.MainParty.SeeingRange + 3f)
						{
							ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult questResultFail = this._questResultFail1;
							this.ApplyQuestResult(questResultFail);
							base.CompleteQuestWithFail(this._onQuestFailed1LogText);
							return;
						}
						this.HandleDesertersRunningAway();
						return;
					case ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersDefeatedPlayer:
						if (!this._deserterMobileParty.IsCurrentlyGoingToSettlement)
						{
							SetPartyAiAction.GetActionForVisitingSettlement(this._deserterMobileParty, this.QuestSettlement);
						}
						break;
					default:
						return;
					}
				}
			}

			private void OnHourlyTickEvent()
			{
				this.TickDesertersPartyLogic();
			}

			private void MapEventEnded(MapEvent mapEvent)
			{
				if (mapEvent.IsPlayerMapEvent && this._deserterMobileParty != null && mapEvent.InvolvedParties.Contains(this._deserterMobileParty.Party))
				{
					this._deserterBattleFinalizedForTheFirstTime = true;
					if (mapEvent.WinningSide == mapEvent.PlayerSide)
					{
						base.AddLog(this._onDeserterPartyDefeatedLogText, false);
						if (!base.IsTracked(base.QuestGiver))
						{
							base.AddTrackedObject(base.QuestGiver);
						}
						if (!base.IsTracked(this.QuestSettlement))
						{
							base.AddTrackedObject(this.QuestSettlement);
						}
						MBInformationManager.AddQuickInformation(this._onPlayerDefeatedDesertersNotificationText, 0, base.QuestGiver.CharacterObject, "");
						this._currentState = ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersAreDefeated;
						return;
					}
					if (!this._deserterMobileParty.IsCurrentlyGoingToSettlement)
					{
						SetPartyAiAction.GetActionForVisitingSettlement(this._deserterMobileParty, this.QuestSettlement);
					}
					this._currentState = ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersDefeatedPlayer;
				}
			}

			private void GameMenuOpened(MenuCallbackArgs mArgs)
			{
				if (mArgs.MenuContext.GameMenu.StringId == "encounter" && this._deserterBattleFinalizedForTheFirstTime)
				{
					this._deserterBattleFinalizedForTheFirstTime = false;
					if (this._currentState == ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersAreDefeated)
					{
						this.DestroyDeserterParty();
					}
					this.DestroyDefenderParty();
				}
			}

			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (base.QuestGiver.CurrentSettlement.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					base.CompleteQuestWithCancel(this._onQuestCancel1LogText);
					ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult questResultCancel = this._questResultCancel1;
					this.ApplyQuestResult(questResultCancel);
				}
			}

			private void OnWarDeclared(IFaction faction1, IFaction faction2, DeclareWarAction.DeclareWarDetail detail)
			{
				QuestHelper.CheckWarDeclarationAndFailOrCancelTheQuest(this, faction1, faction2, detail, this._playerDeclaredWarQuestLogText, this._onQuestCancel1LogText);
			}

			private void OnVillageBeingRaided(Village village)
			{
				if (village.Settlement == this.QuestSettlement)
				{
					ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult extortionByDesertersQuestResult;
					if (village.Settlement.Party.MapEvent.AttackerSide.LeaderParty == PartyBase.MainParty)
					{
						extortionByDesertersQuestResult = this._questResultFail3;
						this.ApplyQuestResult(extortionByDesertersQuestResult);
						base.CompleteQuestWithFail(this._onQuestFailed3LogText);
						return;
					}
					extortionByDesertersQuestResult = this._questResultCancel2;
					this.ApplyQuestResult(extortionByDesertersQuestResult);
					base.CompleteQuestWithCancel(this._onQuestCancel2LogText);
				}
			}

			private void SettlementEntered(MobileParty party, Settlement settlement, Hero hero)
			{
				if (party == this._deserterMobileParty && settlement == this.QuestSettlement)
				{
					bool flag = PlayerEncounter.Current != null && PlayerEncounter.EncounterSettlement == this.QuestSettlement;
					if (this._currentState != ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState.DesertersDefeatedPlayer && flag)
					{
						this.StartAmbushEncounter();
						return;
					}
					ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult questResultFail = this._questResultFail2;
					this.ApplyQuestResult(questResultFail);
					base.CompleteQuestWithFail(this._onQuestFailed2LogText);
				}
			}

			private void GameMenuOptionSelected(GameMenuOption option)
			{
				if (option.IsLeave)
				{
					this.TickDesertersPartyLogic();
				}
			}

			protected override void OnTimedOut()
			{
				ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestResult questResultTimeOut = this._questResultTimeOut;
				this.ApplyQuestResult(questResultTimeOut);
				base.AddLog(this._onQuestTimedOutLogText, false);
			}

			private void CreateDeserterParty()
			{
				Settlement settlement = SettlementHelper.FindNearestHideout(null, null);
				Clan clan = null;
				if (settlement != null)
				{
					CultureObject banditCulture = settlement.Culture;
					clan = Clan.BanditFactions.FirstOrDefault((Clan x) => x.Culture == banditCulture);
				}
				if (clan == null)
				{
					clan = Clan.All.GetRandomElementWithPredicate((Clan x) => x.IsBanditFaction);
				}
				PartyTemplateObject defaultPartyTemplate = this.QuestSettlement.Culture.DefaultPartyTemplate;
				this._deserterMobileParty = BanditPartyComponent.CreateBanditParty("ebdi_deserters_party_1", clan, settlement.Hideout, false);
				TextObject textObject = new TextObject("{=zT2b0v8y}Deserters Party", null);
				Vec2 vec = this.FindBestSpawnPositionForDeserterParty();
				this._deserterMobileParty.InitializeMobilePartyAtPosition(defaultPartyTemplate, vec, this.DeserterPartyMenCount);
				this._deserterMobileParty.SetCustomName(textObject);
				int num = 0;
				foreach (TroopRosterElement troopRosterElement in this._deserterMobileParty.MemberRoster.GetTroopRoster())
				{
					if (!troopRosterElement.Character.HasMount())
					{
						num += troopRosterElement.Number;
					}
				}
				ItemObject itemObject = Items.All.GetRandomElementWithPredicate((ItemObject x) => x.IsMountable && x.Culture == this.QuestSettlement.Culture && !x.NotMerchandise && x.Tier == ItemObject.ItemTiers.Tier2);
				if (itemObject == null)
				{
					itemObject = MBObjectManager.Instance.GetObject<ItemObject>("vlandia_horse") ?? MBObjectManager.Instance.GetObject<ItemObject>("sumpter_horse");
				}
				if (itemObject != null)
				{
					this._deserterMobileParty.ItemRoster.AddToCounts(itemObject, num);
				}
				float num2 = MathF.Abs(this._deserterMobileParty.FoodChange);
				int num3 = MathF.Ceiling(base.QuestDueTime.RemainingDaysFromNow * num2);
				int num4 = num3 / 2;
				this._deserterMobileParty.ItemRoster.AddToCounts(DefaultItems.Grain, num4);
				int num5 = num3 - num4;
				this._deserterMobileParty.ItemRoster.AddToCounts(DefaultItems.Meat, num5);
				this._deserterMobileParty.SetPartyUsedByQuest(true);
				this._deserterMobileParty.IgnoreByOtherPartiesTill(CampaignTime.Never);
				this._deserterMobileParty.Aggressiveness = 0f;
				this._deserterMobileParty.Ai.SetDoNotMakeNewDecisions(true);
				this._deserterMobileParty.Party.Visuals.SetMapIconAsDirty();
				SetPartyAiAction.GetActionForVisitingSettlement(this._deserterMobileParty, this.QuestSettlement);
			}

			private Vec2 FindBestSpawnPositionForDeserterParty()
			{
				MobileParty mainParty = MobileParty.MainParty;
				Vec2 getPosition2D = mainParty.GetPosition2D;
				float seeingRange = mainParty.SeeingRange;
				float num = seeingRange + 3f;
				float num2 = num * 1.25f;
				float num3 = num2 * 3f;
				Vec2 vec = getPosition2D;
				float num4 = float.MaxValue;
				int num5 = 0;
				MapDistanceModel mapDistanceModel = Campaign.Current.Models.MapDistanceModel;
				do
				{
					Vec2 vec2 = MobilePartyHelper.FindReachablePointAroundPosition(getPosition2D, num, seeingRange);
					float num6;
					if (mapDistanceModel.GetDistance(mainParty, vec2, num3, out num6))
					{
						if (num6 < num4)
						{
							vec = vec2;
							num4 = num6;
						}
						if (num6 < num2)
						{
							break;
						}
					}
					num5++;
				}
				while (num5 < 16);
				return vec;
			}

			private void DestroyDeserterParty()
			{
				if (this._deserterMobileParty != null && this._deserterMobileParty.IsActive)
				{
					DestroyPartyAction.Apply(null, this._deserterMobileParty);
					this._deserterMobileParty = null;
				}
			}

			private void ReleaseDeserterParty()
			{
				if (this._deserterMobileParty != null && this._deserterMobileParty.IsActive)
				{
					this._deserterMobileParty.SetPartyUsedByQuest(false);
					this._deserterMobileParty.IgnoreByOtherPartiesTill(CampaignTime.HoursFromNow(0f));
					this._deserterMobileParty.Aggressiveness = 1f;
					if (this._deserterMobileParty.CurrentSettlement != null)
					{
						LeaveSettlementAction.ApplyForParty(this._deserterMobileParty);
					}
					this._deserterMobileParty.Ai.SetDoNotMakeNewDecisions(false);
					this._deserterMobileParty.SetCustomName(null);
					this._deserterMobileParty.Party.Visuals.SetMapIconAsDirty();
				}
			}

			private void CreateDefenderParty()
			{
				PartyTemplateObject militiaPartyTemplate = this.QuestSettlement.Culture.MilitiaPartyTemplate;
				this._defenderMobileParty = MobileParty.CreateParty("ebdi_defender_party_1", null, null);
				TextObject textObject = new TextObject("{=dPU8UbKA}{QUEST_GIVER}'s Party", null);
				textObject.SetTextVariable("QUEST_GIVER", base.QuestGiver.Name);
				this._defenderMobileParty.InitializeMobilePartyAroundPosition(militiaPartyTemplate, this.QuestSettlement.GetPosition2D, 1f, 0.5f, this.DefenderPartyMenCount);
				this._defenderMobileParty.SetCustomName(textObject);
				this._defenderMobileParty.SetPartyUsedByQuest(true);
				this._defenderMobileParty.Party.SetCustomOwner(base.QuestGiver);
				this._defenderMobileParty.Aggressiveness = 1f;
				this._defenderMobileParty.ShouldJoinPlayerBattles = true;
			}

			private void DestroyDefenderParty()
			{
				if (this._defenderMobileParty != null && this._defenderMobileParty.IsActive)
				{
					DestroyPartyAction.Apply(null, this._defenderMobileParty);
					this._defenderMobileParty = null;
				}
			}

			private void HandleDesertersRunningAway()
			{
				Vec2 vec = this._deserterMobileParty.Position2D - MobileParty.MainParty.Position2D;
				vec.Normalize();
				float num = this._deserterMobileParty.Speed * 1.5f;
				Vec2 vec2 = this._deserterMobileParty.Position2D + vec * num;
				float num2;
				vec2 = this.FindFreePositionBetweenPointAndParty(this._deserterMobileParty, vec2, out num2, 10f, 1E-05f, 1000f, 1.5f);
				PathFaceRecord pathFaceRecord = Campaign.Current.MapSceneWrapper.GetFaceIndex(vec2);
				float num3 = 0.34906584f;
				int num4 = 0;
				while (num4 < 10 && (pathFaceRecord.FaceIndex == -1 || pathFaceRecord.FaceIslandIndex == -1))
				{
					vec.RotateCCW(num3);
					vec.Normalize();
					MobileParty deserterMobileParty = this._deserterMobileParty;
					Vec2 vec3 = this._deserterMobileParty.Position2D + vec * num;
					float num5;
					vec2 = this.FindFreePositionBetweenPointAndParty(deserterMobileParty, vec3, out num5, 10f, 1E-05f, 1000f, 1.5f);
					pathFaceRecord = Campaign.Current.MapSceneWrapper.GetFaceIndex(vec2);
					num4++;
				}
				if (num2 <= 1E-05f)
				{
					vec.RotateCCW(-1.5707964f + (float)MBRandom.RandomInt(0, 2) * 3.1415927f);
					vec2 = this._deserterMobileParty.Position2D + vec * num;
					vec2 = this.FindFreePositionBetweenPointAndParty(this._deserterMobileParty, vec2, out num2, 10f, 1E-05f, 1000f, 1.5f);
				}
				this._deserterMobileParty.Ai.SetMoveGoToPoint(vec2);
			}

			private void StartAmbushEncounter()
			{
				this.CreateDefenderParty();
				this._deserterMobileParty.IgnoreByOtherPartiesTill(CampaignTime.Now - CampaignTime.Hours(1f));
				EncounterManager.StartPartyEncounter(this._deserterMobileParty.Party, MobileParty.MainParty.Party);
			}

			private Vec2 FindFreePositionBetweenPointAndParty(MobileParty party, in Vec2 point, out float distance, float maxIterations = 10f, float acceptThres = 1E-05f, float maxPathDistance = 1000f, float euclideanThressholdFactor = 1.5f)
			{
				IMapScene mapSceneWrapper = Campaign.Current.MapSceneWrapper;
				Vec2 position2D = party.Position2D;
				PathFaceRecord faceIndex = mapSceneWrapper.GetFaceIndex(position2D);
				Vec2 vec = position2D;
				distance = 0f;
				if (!PartyBase.IsPositionOkForTraveling(position2D))
				{
					Debug.FailedAssert("Origin point not valid!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\Issues\\ExtortionByDesertersIssueBehavior.cs", "FindFreePositionBetweenPointAndParty", 1364);
				}
				else
				{
					Vec2 vec2 = point;
					PathFaceRecord pathFaceRecord = mapSceneWrapper.GetFaceIndex(vec2);
					Vec2 vec3 = point;
					float num = acceptThres * acceptThres;
					int num2 = 0;
					while ((float)num2 < maxIterations && vec.DistanceSquared(point) > num && pathFaceRecord.IsValid())
					{
						float num3 = position2D.Distance(vec2);
						float num4;
						bool pathDistanceBetweenAIFaces = Campaign.Current.MapSceneWrapper.GetPathDistanceBetweenAIFaces(faceIndex, pathFaceRecord, position2D, vec2, 0.2f, maxPathDistance, out num4);
						bool flag = num4 < num3 * euclideanThressholdFactor;
						if (pathDistanceBetweenAIFaces && flag)
						{
							vec = vec2;
							distance = num3;
							vec2 = 0.5f * (vec2 + vec3);
						}
						else
						{
							vec3 = vec2;
							vec2 = 0.5f * (vec + vec3);
						}
						pathFaceRecord = mapSceneWrapper.GetFaceIndex(vec2);
						num2++;
					}
				}
				return vec;
			}

			private const float SightOffsetToLoseDeserterParty = 3f;

			private const float SightRatioToStartEvadingPlayerParty = 0.8f;

			[SaveableField(1)]
			private MobileParty _deserterMobileParty;

			[SaveableField(2)]
			private MobileParty _defenderMobileParty;

			[SaveableField(3)]
			private ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState _currentState;

			[SaveableField(4)]
			private readonly float _questDifficultyMultiplier;

			[SaveableField(5)]
			private bool _deserterBattleFinalizedForTheFirstTime;

			private bool _playerAwayFromSettlementNotificationSent;

			private readonly struct ExtortionByDesertersQuestResult
			{
				public ExtortionByDesertersQuestResult(int renownChange, int honorChange, float goldMultiplier, int questGiverRelationChange, int questGiverPowerChange, int townSecurityChange, int townProsperityChange, bool isSuccess)
				{
					this.RenownChange = renownChange;
					this.HonorChange = honorChange;
					this.GoldMultiplier = goldMultiplier;
					this.QuestGiverRelationChange = questGiverRelationChange;
					this.QuestGiverPowerChange = questGiverPowerChange;
					this.TownSecurityChange = townSecurityChange;
					this.TownProsperityChange = townProsperityChange;
					this.IsSuccess = isSuccess;
				}

				public readonly int RenownChange;

				public readonly int HonorChange;

				public readonly float GoldMultiplier;

				public readonly int QuestGiverRelationChange;

				public readonly int QuestGiverPowerChange;

				public readonly int TownSecurityChange;

				public readonly int TownProsperityChange;

				public readonly bool IsSuccess;
			}

			internal enum ExtortionByDesertersQuestState
			{
				DesertersMovingToSettlement,
				DesertersRunningAwayFromPlayer,
				DesertersDefeatedPlayer,
				DesertersAreDefeated
			}
		}

		public class ExtortionByDesertersIssueBehaviorTypeDefiner : SaveableTypeDefiner
		{
			public ExtortionByDesertersIssueBehaviorTypeDefiner()
				: base(490000)
			{
			}

			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssue), 1, null);
				base.AddClassDefinition(typeof(ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest), 2, null);
			}

			protected override void DefineEnumTypes()
			{
				base.AddEnumDefinition(typeof(ExtortionByDesertersIssueBehavior.ExtortionByDesertersIssueQuest.ExtortionByDesertersQuestState), 3, null);
			}
		}
	}
}
