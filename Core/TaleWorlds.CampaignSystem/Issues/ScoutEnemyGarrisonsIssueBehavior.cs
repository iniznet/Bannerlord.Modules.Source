using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Conversation;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.Issues
{
	// Token: 0x0200031E RID: 798
	public class ScoutEnemyGarrisonsIssueBehavior : CampaignBehaviorBase
	{
		// Token: 0x06002D80 RID: 11648 RVA: 0x000BE784 File Offset: 0x000BC984
		public override void RegisterEvents()
		{
			CampaignEvents.OnCheckForIssueEvent.AddNonSerializedListener(this, new Action<Hero>(this.OnCheckForIssue));
		}

		// Token: 0x06002D81 RID: 11649 RVA: 0x000BE7A0 File Offset: 0x000BC9A0
		public void OnCheckForIssue(Hero hero)
		{
			List<Settlement> list;
			if (this.ConditionsHold(hero, out list))
			{
				Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(new PotentialIssueData.StartIssueDelegate(this.OnStartIssue), typeof(ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsIssue), IssueBase.IssueFrequency.VeryCommon, list));
				return;
			}
			Campaign.Current.IssueManager.AddPotentialIssueData(hero, new PotentialIssueData(typeof(ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsIssue), IssueBase.IssueFrequency.VeryCommon));
		}

		// Token: 0x06002D82 RID: 11650 RVA: 0x000BE808 File Offset: 0x000BCA08
		private bool ConditionsHold(Hero issueGiver, out List<Settlement> settlements)
		{
			settlements = new List<Settlement>();
			if (issueGiver.IsFactionLeader && !issueGiver.IsMinorFactionHero && !issueGiver.IsPrisoner)
			{
				if (issueGiver.GetMapPoint() != null)
				{
					Kingdom randomElementWithPredicate = Kingdom.All.GetRandomElementWithPredicate((Kingdom x) => x.IsAtWarWith(issueGiver.MapFaction));
					if (randomElementWithPredicate != null)
					{
						List<Settlement> list = randomElementWithPredicate.Settlements.Where((Settlement x) => ScoutEnemyGarrisonsIssueBehavior.SuitableSettlementCondition(x, issueGiver)).ToList<Settlement>();
						if (list.Count >= 5)
						{
							list = list.OrderBy((Settlement y) => issueGiver.GetMapPoint().Position2D.Distance(y.Position2D)).ToList<Settlement>();
							settlements = list.Take(3).ToList<Settlement>();
							return true;
						}
					}
				}
				return false;
			}
			return false;
		}

		// Token: 0x06002D83 RID: 11651 RVA: 0x000BE8D0 File Offset: 0x000BCAD0
		private IssueBase OnStartIssue(in PotentialIssueData pid, Hero issueOwner)
		{
			PotentialIssueData potentialIssueData = pid;
			return new ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsIssue(issueOwner, potentialIssueData.RelatedObject as List<Settlement>);
		}

		// Token: 0x06002D84 RID: 11652 RVA: 0x000BE8F6 File Offset: 0x000BCAF6
		public override void SyncData(IDataStore dataStore)
		{
		}

		// Token: 0x06002D85 RID: 11653 RVA: 0x000BE8F8 File Offset: 0x000BCAF8
		private static bool SuitableSettlementCondition(Settlement settlement, Hero issueGiver)
		{
			return settlement.IsFortification && settlement.MapFaction.IsAtWarWith(issueGiver.MapFaction) && (!settlement.IsUnderSiege || settlement.SiegeEvent.BesiegerCamp.BesiegerParty.MapFaction != Hero.MainHero.MapFaction);
		}

		// Token: 0x04000DAD RID: 3501
		private const IssueBase.IssueFrequency ScoutEnemyGarrisonsIssueFrequency = IssueBase.IssueFrequency.VeryCommon;

		// Token: 0x04000DAE RID: 3502
		private const int QuestDurationInDays = 15;

		// Token: 0x02000666 RID: 1638
		public class ScoutEnemyGarrisonsIssue : IssueBase
		{
			// Token: 0x060050C3 RID: 20675 RVA: 0x00164423 File Offset: 0x00162623
			internal static void AutoGeneratedStaticCollectObjectsScoutEnemyGarrisonsIssue(object o, List<object> collectedObjects)
			{
				((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsIssue)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060050C4 RID: 20676 RVA: 0x00164431 File Offset: 0x00162631
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._settlement1);
				collectedObjects.Add(this._settlement2);
				collectedObjects.Add(this._settlement3);
			}

			// Token: 0x060050C5 RID: 20677 RVA: 0x0016445E File Offset: 0x0016265E
			internal static object AutoGeneratedGetMemberValue_settlement1(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsIssue)o)._settlement1;
			}

			// Token: 0x060050C6 RID: 20678 RVA: 0x0016446B File Offset: 0x0016266B
			internal static object AutoGeneratedGetMemberValue_settlement2(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsIssue)o)._settlement2;
			}

			// Token: 0x060050C7 RID: 20679 RVA: 0x00164478 File Offset: 0x00162678
			internal static object AutoGeneratedGetMemberValue_settlement3(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsIssue)o)._settlement3;
			}

			// Token: 0x17001166 RID: 4454
			// (get) Token: 0x060050C8 RID: 20680 RVA: 0x00164485 File Offset: 0x00162685
			public override bool IsThereAlternativeSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001167 RID: 4455
			// (get) Token: 0x060050C9 RID: 20681 RVA: 0x00164488 File Offset: 0x00162688
			public override bool IsThereLordSolution
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001168 RID: 4456
			// (get) Token: 0x060050CA RID: 20682 RVA: 0x0016448B File Offset: 0x0016268B
			protected override int RewardGold
			{
				get
				{
					return 0;
				}
			}

			// Token: 0x17001169 RID: 4457
			// (get) Token: 0x060050CB RID: 20683 RVA: 0x0016448E File Offset: 0x0016268E
			public override TextObject IssueBriefByIssueGiver
			{
				get
				{
					return new TextObject("{=rrCkJgtd}We don't know enough about the enemy, where they are strong and where they are weak. I don't want to lead a huge army through their territory on a wild goose hunt. We need someone to ride through there swiftly, scouting out their garrisons. Can you do this?", null);
				}
			}

			// Token: 0x1700116A RID: 4458
			// (get) Token: 0x060050CC RID: 20684 RVA: 0x0016449C File Offset: 0x0016269C
			public override TextObject IssueAcceptByPlayer
			{
				get
				{
					TextObject textObject = new TextObject("{=dGakGflE}Yes, your {?QUEST_GIVER.GENDER}ladyship{?}lordship{\\?}, I'll gladly do it.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x1700116B RID: 4459
			// (get) Token: 0x060050CD RID: 20685 RVA: 0x001644D0 File Offset: 0x001626D0
			public override TextObject IssueQuestSolutionExplanationByIssueGiver
			{
				get
				{
					TextObject textObject = new TextObject("{=seEyGLMz}Go deep into {ENEMY} territory, to {SETTLEMENT_1}, {SETTLEMENT_2} and {SETTLEMENT_3}. I want to know every detail about them, what sort of fortifications they have, whether the walls are well-manned or undergarrisoned, and any other enemy forces in the vicinity.", null);
					textObject.SetTextVariable("ENEMY", this._settlement1.MapFaction.Name);
					textObject.SetTextVariable("SETTLEMENT_1", this._settlement1.Name);
					textObject.SetTextVariable("SETTLEMENT_2", this._settlement2.Name);
					textObject.SetTextVariable("SETTLEMENT_3", this._settlement3.Name);
					return textObject;
				}
			}

			// Token: 0x1700116C RID: 4460
			// (get) Token: 0x060050CE RID: 20686 RVA: 0x00164549 File Offset: 0x00162749
			public override TextObject IssueQuestSolutionAcceptByPlayer
			{
				get
				{
					return new TextObject("{=g6P6nKIf}Consider it done, commander.", null);
				}
			}

			// Token: 0x1700116D RID: 4461
			// (get) Token: 0x060050CF RID: 20687 RVA: 0x00164556 File Offset: 0x00162756
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=G79IzJsZ}Scout Enemy Garrisons", null);
				}
			}

			// Token: 0x1700116E RID: 4462
			// (get) Token: 0x060050D0 RID: 20688 RVA: 0x00164564 File Offset: 0x00162764
			public override TextObject Description
			{
				get
				{
					TextObject textObject = new TextObject("{=AdoaDR26}{QUEST_GIVER.LINK} asks you to scout {SETTLEMENT_1}, {SETTLEMENT_2} and {SETTLEMENT_3}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.IssueOwner.CharacterObject, textObject, false);
					textObject.SetTextVariable("SETTLEMENT_1", this._settlement1.Name);
					textObject.SetTextVariable("SETTLEMENT_2", this._settlement2.Name);
					textObject.SetTextVariable("SETTLEMENT_3", this._settlement3.Name);
					return textObject;
				}
			}

			// Token: 0x060050D1 RID: 20689 RVA: 0x001645DB File Offset: 0x001627DB
			public ScoutEnemyGarrisonsIssue(Hero issueOwner, List<Settlement> settlements)
				: base(issueOwner, CampaignTime.DaysFromNow(15f))
			{
				this._settlement1 = settlements[0];
				this._settlement2 = settlements[1];
				this._settlement3 = settlements[2];
			}

			// Token: 0x060050D2 RID: 20690 RVA: 0x00164615 File Offset: 0x00162815
			protected override void OnGameLoad()
			{
			}

			// Token: 0x060050D3 RID: 20691 RVA: 0x00164617 File Offset: 0x00162817
			protected override QuestBase GenerateIssueQuest(string questId)
			{
				return new ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsQuest(questId, base.IssueOwner, this._settlement1, this._settlement2, this._settlement3);
			}

			// Token: 0x060050D4 RID: 20692 RVA: 0x00164637 File Offset: 0x00162837
			public override IssueBase.IssueFrequency GetFrequency()
			{
				return IssueBase.IssueFrequency.VeryCommon;
			}

			// Token: 0x060050D5 RID: 20693 RVA: 0x0016463C File Offset: 0x0016283C
			protected override bool CanPlayerTakeQuestConditions(Hero issueGiver, out IssueBase.PreconditionFlags flag, out Hero relationHero, out SkillObject skill)
			{
				relationHero = null;
				skill = null;
				flag = IssueBase.PreconditionFlags.None;
				if (issueGiver.GetRelationWithPlayer() < -10f)
				{
					flag |= IssueBase.PreconditionFlags.Relation;
					relationHero = issueGiver;
				}
				if (Hero.MainHero.MapFaction.IsKingdomFaction && Hero.MainHero.IsFactionLeader)
				{
					flag |= IssueBase.PreconditionFlags.MainHeroIsKingdomLeader;
				}
				if (issueGiver.MapFaction.IsAtWarWith(Hero.MainHero.MapFaction))
				{
					flag |= IssueBase.PreconditionFlags.AtWar;
				}
				if (Clan.PlayerClan.Tier < 2)
				{
					flag |= IssueBase.PreconditionFlags.ClanTier;
				}
				if (Hero.MainHero.GetSkillValue(DefaultSkills.Scouting) < 30)
				{
					flag |= IssueBase.PreconditionFlags.Skill;
					skill = DefaultSkills.Scouting;
				}
				if (Hero.MainHero.MapFaction != base.IssueOwner.MapFaction)
				{
					flag |= IssueBase.PreconditionFlags.NotInSameFaction;
				}
				return flag == IssueBase.PreconditionFlags.None;
			}

			// Token: 0x060050D6 RID: 20694 RVA: 0x0016470C File Offset: 0x0016290C
			public override bool IssueStayAliveConditions()
			{
				bool flag = this._settlement1.MapFaction.IsAtWarWith(base.IssueOwner.MapFaction) && this._settlement2.MapFaction.IsAtWarWith(base.IssueOwner.MapFaction) && this._settlement3.MapFaction.IsAtWarWith(base.IssueOwner.MapFaction);
				if (!flag)
				{
					flag = this.TryToUpdateSettlements();
				}
				return flag;
			}

			// Token: 0x060050D7 RID: 20695 RVA: 0x0016477D File Offset: 0x0016297D
			protected override float GetIssueEffectAmountInternal(IssueEffect issueEffect)
			{
				if (issueEffect == DefaultIssueEffects.ClanInfluence)
				{
					return -0.1f;
				}
				return 0f;
			}

			// Token: 0x060050D8 RID: 20696 RVA: 0x00164794 File Offset: 0x00162994
			private bool TryToUpdateSettlements()
			{
				Kingdom randomElementWithPredicate = Kingdom.All.GetRandomElementWithPredicate((Kingdom x) => x.IsAtWarWith(base.IssueOwner.MapFaction));
				if (randomElementWithPredicate != null)
				{
					List<Settlement> list = randomElementWithPredicate.Settlements.Where((Settlement x) => ScoutEnemyGarrisonsIssueBehavior.SuitableSettlementCondition(x, base.IssueOwner)).ToList<Settlement>();
					if (list.Count >= 5)
					{
						list = list.Take(3).ToList<Settlement>();
						this._settlement1 = list[0];
						this._settlement2 = list[1];
						this._settlement3 = list[2];
						return true;
					}
				}
				return false;
			}

			// Token: 0x060050D9 RID: 20697 RVA: 0x00164818 File Offset: 0x00162A18
			protected override void CompleteIssueWithTimedOutConsequences()
			{
			}

			// Token: 0x04001AE6 RID: 6886
			private const int MinimumRelationToTakeQuest = -10;

			// Token: 0x04001AE7 RID: 6887
			[SaveableField(10)]
			private Settlement _settlement1;

			// Token: 0x04001AE8 RID: 6888
			[SaveableField(20)]
			private Settlement _settlement2;

			// Token: 0x04001AE9 RID: 6889
			[SaveableField(30)]
			private Settlement _settlement3;
		}

		// Token: 0x02000667 RID: 1639
		public class ScoutEnemyGarrisonsQuest : QuestBase
		{
			// Token: 0x060050DC RID: 20700 RVA: 0x0016483B File Offset: 0x00162A3B
			internal static void AutoGeneratedStaticCollectObjectsScoutEnemyGarrisonsQuest(object o, List<object> collectedObjects)
			{
				((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsQuest)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060050DD RID: 20701 RVA: 0x00164849 File Offset: 0x00162A49
			protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				base.AutoGeneratedInstanceCollectObjects(collectedObjects);
				collectedObjects.Add(this._questSettlement1);
				collectedObjects.Add(this._questSettlement2);
				collectedObjects.Add(this._questSettlement3);
				collectedObjects.Add(this._startQuestLog);
			}

			// Token: 0x060050DE RID: 20702 RVA: 0x00164882 File Offset: 0x00162A82
			internal static object AutoGeneratedGetMemberValue_questSettlement1(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsQuest)o)._questSettlement1;
			}

			// Token: 0x060050DF RID: 20703 RVA: 0x0016488F File Offset: 0x00162A8F
			internal static object AutoGeneratedGetMemberValue_questSettlement2(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsQuest)o)._questSettlement2;
			}

			// Token: 0x060050E0 RID: 20704 RVA: 0x0016489C File Offset: 0x00162A9C
			internal static object AutoGeneratedGetMemberValue_questSettlement3(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsQuest)o)._questSettlement3;
			}

			// Token: 0x060050E1 RID: 20705 RVA: 0x001648A9 File Offset: 0x00162AA9
			internal static object AutoGeneratedGetMemberValue_scoutedSettlementCount(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsQuest)o)._scoutedSettlementCount;
			}

			// Token: 0x060050E2 RID: 20706 RVA: 0x001648BB File Offset: 0x00162ABB
			internal static object AutoGeneratedGetMemberValue_startQuestLog(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsQuest)o)._startQuestLog;
			}

			// Token: 0x1700116F RID: 4463
			// (get) Token: 0x060050E3 RID: 20707 RVA: 0x001648C8 File Offset: 0x00162AC8
			public override bool IsRemainingTimeHidden
			{
				get
				{
					return false;
				}
			}

			// Token: 0x17001170 RID: 4464
			// (get) Token: 0x060050E4 RID: 20708 RVA: 0x001648CB File Offset: 0x00162ACB
			public override TextObject Title
			{
				get
				{
					return new TextObject("{=G79IzJsZ}Scout Enemy Garrisons", null);
				}
			}

			// Token: 0x17001171 RID: 4465
			// (get) Token: 0x060050E5 RID: 20709 RVA: 0x001648D8 File Offset: 0x00162AD8
			private TextObject _playerStartsQuestLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=8avwit9N}{QUEST_GIVER.LINK}, the army commander of {FACTION} has told you that they need detailed information about enemy fortifications and troop numbers of the enemy. {?QUEST_GIVER.GENDER}She{?}He{\\?} wanted you to scout {SETTLEMENT_1}, {SETTLEMENT_2} and {SETTLEMENT_3}.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					textObject.SetTextVariable("FACTION", base.QuestGiver.MapFaction.EncyclopediaLinkWithName);
					textObject.SetTextVariable("SETTLEMENT_1", this._questSettlement1.Settlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("SETTLEMENT_2", this._questSettlement2.Settlement.EncyclopediaLinkWithName);
					textObject.SetTextVariable("SETTLEMENT_3", this._questSettlement3.Settlement.EncyclopediaLinkWithName);
					return textObject;
				}
			}

			// Token: 0x17001172 RID: 4466
			// (get) Token: 0x060050E6 RID: 20710 RVA: 0x0016497A File Offset: 0x00162B7A
			private TextObject _settlementBecomeNeutralLogText
			{
				get
				{
					return new TextObject("{=wgX2nL5Z}{SETTLEMENT} is no longer in control of enemy. There is no need to scout that settlement.", null);
				}
			}

			// Token: 0x17001173 RID: 4467
			// (get) Token: 0x060050E7 RID: 20711 RVA: 0x00164987 File Offset: 0x00162B87
			private TextObject _armyDisbandedQuestCancelLogText
			{
				get
				{
					return new TextObject("{=JiHaL6IV}Army has disbanded and your mission has been canceled.", null);
				}
			}

			// Token: 0x17001174 RID: 4468
			// (get) Token: 0x060050E8 RID: 20712 RVA: 0x00164994 File Offset: 0x00162B94
			private TextObject _noLongerAllyQuestCancelLogText
			{
				get
				{
					TextObject textObject = new TextObject("{=vTnSa9rr}You are no longer allied with {QUEST_GIVER.LINK}'s faction. Your agreement with {QUEST_GIVER.LINK} was terminated.", null);
					StringHelpers.SetCharacterProperties("QUEST_GIVER", base.QuestGiver.CharacterObject, textObject, false);
					return textObject;
				}
			}

			// Token: 0x17001175 RID: 4469
			// (get) Token: 0x060050E9 RID: 20713 RVA: 0x001649C6 File Offset: 0x00162BC6
			private TextObject _allTargetsAreNeutral
			{
				get
				{
					return new TextObject("{=LC2F84GR}None of the target settlements are in control of the enemy. Army Commander has canceled the mission.", null);
				}
			}

			// Token: 0x17001176 RID: 4470
			// (get) Token: 0x060050EA RID: 20714 RVA: 0x001649D3 File Offset: 0x00162BD3
			private TextObject _scoutFinishedForSettlementWallLevel1LogText
			{
				get
				{
					return new TextObject("{=5kxDhBWk}Your scouts have returned from {SETTLEMENT}. According to their report {SETTLEMENT}'s garrison has {GARRISON_SIZE} men and walls are not high enough but can be useful with sufficient garrison support.", null);
				}
			}

			// Token: 0x17001177 RID: 4471
			// (get) Token: 0x060050EB RID: 20715 RVA: 0x001649E0 File Offset: 0x00162BE0
			private TextObject _scoutFinishedForSettlementWallLevel2LogText
			{
				get
				{
					return new TextObject("{=GUqjL6xk}Your scouts have returned from {SETTLEMENT}. According to their report {SETTLEMENT}'s garrison has {GARRISON_SIZE} men and walls are high enough to defend against invaders.", null);
				}
			}

			// Token: 0x17001178 RID: 4472
			// (get) Token: 0x060050EC RID: 20716 RVA: 0x001649ED File Offset: 0x00162BED
			private TextObject _scoutFinishedForSettlementWallLevel3LogText
			{
				get
				{
					return new TextObject("{=YErURO5l}Your scouts have returned from {SETTLEMENT}. According to their report {SETTLEMENT}'s garrison has {GARRISON_SIZE} men and walls are too high and hard to breach.", null);
				}
			}

			// Token: 0x17001179 RID: 4473
			// (get) Token: 0x060050ED RID: 20717 RVA: 0x001649FA File Offset: 0x00162BFA
			private TextObject _questSuccess
			{
				get
				{
					return new TextObject("{=Qy7Zmmvk}You have successfully scouted the target settlements.", null);
				}
			}

			// Token: 0x1700117A RID: 4474
			// (get) Token: 0x060050EE RID: 20718 RVA: 0x00164A07 File Offset: 0x00162C07
			private TextObject _questTimedOut
			{
				get
				{
					return new TextObject("{=GzodT3vS}You have failed to scout the enemy settlements in time.", null);
				}
			}

			// Token: 0x060050EF RID: 20719 RVA: 0x00164A14 File Offset: 0x00162C14
			public ScoutEnemyGarrisonsQuest(string questId, Hero questGiver, Settlement settlement1, Settlement settlement2, Settlement settlement3)
				: base(questId, questGiver, CampaignTime.DaysFromNow(15f), 0)
			{
				this._questSettlement1 = new ScoutEnemyGarrisonsIssueBehavior.QuestSettlement(settlement1, 0);
				this._questSettlement2 = new ScoutEnemyGarrisonsIssueBehavior.QuestSettlement(settlement2, 0);
				this._questSettlement3 = new ScoutEnemyGarrisonsIssueBehavior.QuestSettlement(settlement3, 0);
				this.SetDialogs();
				base.InitializeQuestOnCreation();
			}

			// Token: 0x060050F0 RID: 20720 RVA: 0x00164A69 File Offset: 0x00162C69
			protected override void InitializeQuestOnGameLoad()
			{
				this.SetDialogs();
			}

			// Token: 0x060050F1 RID: 20721 RVA: 0x00164A74 File Offset: 0x00162C74
			protected override void SetDialogs()
			{
				this.OfferDialogFlow = DialogFlow.CreateDialogFlow("issue_classic_quest_start", 100).NpcLine(new TextObject("{=lyGvyZK4}Very well. When you reach one of their fortresses, spend some time observing. Don't move on to the next one at once. You don't need to find me to report back the details, just send your messengers.", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(new ConversationSentence.OnConsequenceDelegate(this.QuestAcceptedConsequences))
					.CloseDialog();
				this.DiscussDialogFlow = DialogFlow.CreateDialogFlow("quest_discuss", 100).NpcLine(new TextObject("{=x3TO0gkN}Is there any progress on the task I gave you?", null), null, null).Condition(() => Hero.OneToOneConversationHero == base.QuestGiver)
					.Consequence(delegate
					{
						Campaign.Current.ConversationManager.ConversationEndOneShot += MapEventHelper.OnConversationEnd;
					})
					.BeginPlayerOptions()
					.PlayerOption(new TextObject("{=W5ab31gQ}Soon, commander. We are still working on it.", null), null)
					.NpcLine(new TextObject("{=U3LR7dyK}Good. I'll be waiting for your messengers.", null), null, null)
					.CloseDialog()
					.PlayerOption(new TextObject("{=v75k1FoT}Not yet. We need to make more preparations.", null), null)
					.NpcLine(new TextObject("{=zYKeYZAo}All right. Don't rush this but also don't wait too long.", null), null, null)
					.CloseDialog()
					.EndPlayerOptions()
					.CloseDialog();
			}

			// Token: 0x060050F2 RID: 20722 RVA: 0x00164B84 File Offset: 0x00162D84
			private void QuestAcceptedConsequences()
			{
				base.StartQuest();
				base.AddTrackedObject(this._questSettlement1.Settlement);
				base.AddTrackedObject(this._questSettlement2.Settlement);
				base.AddTrackedObject(this._questSettlement3.Settlement);
				this._scoutedSettlementCount = 0;
				this._startQuestLog = base.AddDiscreteLog(this._playerStartsQuestLogText, new TextObject("{=jpBpwgAs}Settlements", null), this._scoutedSettlementCount, 3, null, false);
			}

			// Token: 0x060050F3 RID: 20723 RVA: 0x00164BF8 File Offset: 0x00162DF8
			protected override void RegisterEvents()
			{
				CampaignEvents.ClanChangedKingdom.AddNonSerializedListener(this, new Action<Clan, Kingdom, Kingdom, ChangeKingdomAction.ChangeKingdomActionDetail, bool>(this.OnClanChangedKingdom));
				CampaignEvents.ArmyDispersed.AddNonSerializedListener(this, new Action<Army, Army.ArmyDispersionReason, bool>(this.OnArmyDispersed));
				CampaignEvents.OnSettlementOwnerChangedEvent.AddNonSerializedListener(this, new Action<Settlement, bool, Hero, Hero, Hero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail>(this.OnSettlementOwnerChanged));
				CampaignEvents.HourlyTickEvent.AddNonSerializedListener(this, new Action(this.OnHourlyTick));
			}

			// Token: 0x060050F4 RID: 20724 RVA: 0x00164C64 File Offset: 0x00162E64
			private void OnHourlyTick()
			{
				if (base.IsOngoing)
				{
					List<ScoutEnemyGarrisonsIssueBehavior.QuestSettlement> list = new List<ScoutEnemyGarrisonsIssueBehavior.QuestSettlement> { this._questSettlement1, this._questSettlement2, this._questSettlement3 };
					if (list.TrueForAll((ScoutEnemyGarrisonsIssueBehavior.QuestSettlement x) => !x.Settlement.MapFaction.IsAtWarWith(base.QuestGiver.MapFaction)))
					{
						base.AddLog(this._allTargetsAreNeutral, false);
						base.CompleteQuestWithCancel(null);
						return;
					}
					foreach (ScoutEnemyGarrisonsIssueBehavior.QuestSettlement questSettlement in list)
					{
						if (!questSettlement.IsScoutingCompleted())
						{
							if (Campaign.Current.Models.MapDistanceModel.GetDistance(MobileParty.MainParty, questSettlement.Settlement) <= MobileParty.MainParty.SeeingRange)
							{
								questSettlement.CurrentScoutProgress++;
								if (questSettlement.CurrentScoutProgress == 1)
								{
									TextObject textObject = new TextObject("{=qfjRGjM4}Your scouts started to gather information about {SETTLEMENT}.", null);
									textObject.SetTextVariable("SETTLEMENT", questSettlement.Settlement.Name);
									MBInformationManager.AddQuickInformation(textObject, 0, null, "");
								}
								else if (questSettlement.IsScoutingCompleted())
								{
									JournalLog startQuestLog = this._startQuestLog;
									int num = this._scoutedSettlementCount + 1;
									this._scoutedSettlementCount = num;
									startQuestLog.UpdateCurrentProgress(num);
									base.RemoveTrackedObject(questSettlement.Settlement);
									TextObject textObject2 = TextObject.Empty;
									if (questSettlement.Settlement.Town.GetWallLevel() == 1)
									{
										textObject2 = this._scoutFinishedForSettlementWallLevel1LogText;
									}
									else if (questSettlement.Settlement.Town.GetWallLevel() == 2)
									{
										textObject2 = this._scoutFinishedForSettlementWallLevel2LogText;
									}
									else
									{
										textObject2 = this._scoutFinishedForSettlementWallLevel3LogText;
									}
									textObject2.SetTextVariable("SETTLEMENT", questSettlement.Settlement.EncyclopediaLinkWithName);
									MobileParty garrisonParty = questSettlement.Settlement.Town.GarrisonParty;
									int num2 = ((garrisonParty != null) ? garrisonParty.MemberRoster.TotalHealthyCount : 0);
									int num3 = (int)questSettlement.Settlement.Militia;
									textObject2.SetTextVariable("GARRISON_SIZE", num2 + num3);
									base.AddLog(textObject2, false);
								}
							}
							else
							{
								questSettlement.ResetCurrentProgress();
							}
						}
					}
					if (list.TrueForAll((ScoutEnemyGarrisonsIssueBehavior.QuestSettlement x) => x.IsScoutingCompleted()))
					{
						this.AllScoutingDone();
					}
				}
			}

			// Token: 0x060050F5 RID: 20725 RVA: 0x00164EB4 File Offset: 0x001630B4
			private void OnSettlementOwnerChanged(Settlement settlement, bool openToClaim, Hero newOwner, Hero oldOwner, Hero capturerHero, ChangeOwnerOfSettlementAction.ChangeOwnerOfSettlementDetail detail)
			{
				List<ScoutEnemyGarrisonsIssueBehavior.QuestSettlement> list = new List<ScoutEnemyGarrisonsIssueBehavior.QuestSettlement> { this._questSettlement1, this._questSettlement2, this._questSettlement3 };
				foreach (ScoutEnemyGarrisonsIssueBehavior.QuestSettlement questSettlement in list)
				{
					if (settlement == questSettlement.Settlement && (newOwner.MapFaction == base.QuestGiver.MapFaction || !newOwner.MapFaction.IsAtWarWith(base.QuestGiver.MapFaction)))
					{
						questSettlement.IsCompletedThroughBeingNeutral = true;
						questSettlement.SetScoutingCompleted();
						JournalLog startQuestLog = this._startQuestLog;
						int num = this._scoutedSettlementCount + 1;
						this._scoutedSettlementCount = num;
						startQuestLog.UpdateCurrentProgress(num);
						if (base.IsTracked(questSettlement.Settlement))
						{
							base.RemoveTrackedObject(questSettlement.Settlement);
						}
						TextObject settlementBecomeNeutralLogText = this._settlementBecomeNeutralLogText;
						settlementBecomeNeutralLogText.SetTextVariable("SETTLEMENT", questSettlement.Settlement.EncyclopediaLinkWithName);
						base.AddLog(settlementBecomeNeutralLogText, false);
						if (list.TrueForAll((ScoutEnemyGarrisonsIssueBehavior.QuestSettlement x) => x.IsCompletedThroughBeingNeutral))
						{
							base.AddLog(this._allTargetsAreNeutral, false);
							base.CompleteQuestWithCancel(null);
							break;
						}
						break;
					}
				}
			}

			// Token: 0x060050F6 RID: 20726 RVA: 0x0016501C File Offset: 0x0016321C
			private void OnArmyDispersed(Army army, Army.ArmyDispersionReason reason, bool isPlayersArmy)
			{
				if (army.ArmyOwner == base.QuestGiver)
				{
					base.AddLog(this._armyDisbandedQuestCancelLogText, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x060050F7 RID: 20727 RVA: 0x00165041 File Offset: 0x00163241
			private void OnClanChangedKingdom(Clan clan, Kingdom oldKingdom, Kingdom newKingdom, ChangeKingdomAction.ChangeKingdomActionDetail detail, bool showNotification = true)
			{
				if (clan == Clan.PlayerClan && oldKingdom == base.QuestGiver.MapFaction)
				{
					base.AddLog(this._noLongerAllyQuestCancelLogText, false);
					base.CompleteQuestWithCancel(null);
				}
			}

			// Token: 0x060050F8 RID: 20728 RVA: 0x0016506E File Offset: 0x0016326E
			private void AllScoutingDone()
			{
				base.AddLog(this._questSuccess, false);
				GainRenownAction.Apply(Hero.MainHero, 3f, false);
				GainKingdomInfluenceAction.ApplyForDefault(Hero.MainHero, 10f);
				this.RelationshipChangeWithQuestGiver = 3;
				base.CompleteQuestWithSuccess();
			}

			// Token: 0x060050F9 RID: 20729 RVA: 0x001650AA File Offset: 0x001632AA
			protected override void OnTimedOut()
			{
				base.AddLog(this._questTimedOut, false);
				this.RelationshipChangeWithQuestGiver = -2;
			}

			// Token: 0x04001AEA RID: 6890
			[SaveableField(10)]
			private ScoutEnemyGarrisonsIssueBehavior.QuestSettlement _questSettlement1;

			// Token: 0x04001AEB RID: 6891
			[SaveableField(20)]
			private ScoutEnemyGarrisonsIssueBehavior.QuestSettlement _questSettlement2;

			// Token: 0x04001AEC RID: 6892
			[SaveableField(30)]
			private ScoutEnemyGarrisonsIssueBehavior.QuestSettlement _questSettlement3;

			// Token: 0x04001AED RID: 6893
			[SaveableField(40)]
			private int _scoutedSettlementCount;

			// Token: 0x04001AEE RID: 6894
			[SaveableField(50)]
			private JournalLog _startQuestLog;
		}

		// Token: 0x02000668 RID: 1640
		public class QuestSettlement
		{
			// Token: 0x060050FD RID: 20733 RVA: 0x00165100 File Offset: 0x00163300
			internal static void AutoGeneratedStaticCollectObjectsQuestSettlement(object o, List<object> collectedObjects)
			{
				((ScoutEnemyGarrisonsIssueBehavior.QuestSettlement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
			}

			// Token: 0x060050FE RID: 20734 RVA: 0x0016510E File Offset: 0x0016330E
			protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
			{
				collectedObjects.Add(this.Settlement);
			}

			// Token: 0x060050FF RID: 20735 RVA: 0x0016511C File Offset: 0x0016331C
			internal static object AutoGeneratedGetMemberValueSettlement(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.QuestSettlement)o).Settlement;
			}

			// Token: 0x06005100 RID: 20736 RVA: 0x00165129 File Offset: 0x00163329
			internal static object AutoGeneratedGetMemberValueCurrentScoutProgress(object o)
			{
				return ((ScoutEnemyGarrisonsIssueBehavior.QuestSettlement)o).CurrentScoutProgress;
			}

			// Token: 0x06005101 RID: 20737 RVA: 0x0016513B File Offset: 0x0016333B
			public QuestSettlement(Settlement settlement, int currentScoutProgress)
			{
				this.Settlement = settlement;
				this.CurrentScoutProgress = currentScoutProgress;
				this.IsCompletedThroughBeingNeutral = false;
			}

			// Token: 0x06005102 RID: 20738 RVA: 0x00165158 File Offset: 0x00163358
			public bool IsScoutingCompleted()
			{
				return this.CurrentScoutProgress >= 8;
			}

			// Token: 0x06005103 RID: 20739 RVA: 0x00165166 File Offset: 0x00163366
			public void SetScoutingCompleted()
			{
				this.CurrentScoutProgress = 8;
			}

			// Token: 0x06005104 RID: 20740 RVA: 0x0016516F File Offset: 0x0016336F
			public void ResetCurrentProgress()
			{
				this.CurrentScoutProgress = 0;
			}

			// Token: 0x04001AEF RID: 6895
			private const int CompleteScoutAfterHours = 8;

			// Token: 0x04001AF0 RID: 6896
			[SaveableField(10)]
			public Settlement Settlement;

			// Token: 0x04001AF1 RID: 6897
			[SaveableField(20)]
			public int CurrentScoutProgress;

			// Token: 0x04001AF2 RID: 6898
			public bool IsCompletedThroughBeingNeutral;
		}

		// Token: 0x02000669 RID: 1641
		public class ScoutEnemyGarrisonsIssueTypeDefiner : SaveableTypeDefiner
		{
			// Token: 0x06005105 RID: 20741 RVA: 0x00165178 File Offset: 0x00163378
			public ScoutEnemyGarrisonsIssueTypeDefiner()
				: base(97600)
			{
			}

			// Token: 0x06005106 RID: 20742 RVA: 0x00165185 File Offset: 0x00163385
			protected override void DefineClassTypes()
			{
				base.AddClassDefinition(typeof(ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsIssue), 1, null);
				base.AddClassDefinition(typeof(ScoutEnemyGarrisonsIssueBehavior.ScoutEnemyGarrisonsQuest), 2, null);
				base.AddClassDefinition(typeof(ScoutEnemyGarrisonsIssueBehavior.QuestSettlement), 3, null);
			}
		}
	}
}
