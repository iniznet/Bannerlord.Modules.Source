using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.MapEvents
{
	public class MapEventManager
	{
		internal static void AutoGeneratedStaticCollectObjectsMapEventManager(object o, List<object> collectedObjects)
		{
			((MapEventManager)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._mapEvents);
		}

		internal static object AutoGeneratedGetMemberValue_mapEvents(object o)
		{
			return ((MapEventManager)o)._mapEvents;
		}

		public List<MapEvent> MapEvents
		{
			get
			{
				return this._mapEvents;
			}
		}

		internal MapEventManager()
		{
			this._mapEvents = new List<MapEvent>();
		}

		internal void OnAfterLoad()
		{
			foreach (MapEvent mapEvent in this._mapEvents)
			{
				mapEvent.OnAfterLoad();
			}
		}

		public void OnMapEventCreated(MapEvent mapEvent)
		{
			this._mapEvents.Add(mapEvent);
		}

		internal void Tick()
		{
			for (int i = this._mapEvents.Count - 1; i >= 0; i--)
			{
				if (this._mapEvents[i].IsFinished)
				{
					this._mapEvents.RemoveAt(i);
				}
				else if (this._mapEvents[i].IsRaid || this._mapEvents[i] != MobileParty.MainParty.MapEvent)
				{
					this._mapEvents[i].Update();
				}
			}
		}

		public MapEvent GetMapEvent(int attackerPartyIndex)
		{
			return this._mapEvents.FirstOrDefault((MapEvent mapEvent) => mapEvent.AttackerSide.LeaderParty.Index == attackerPartyIndex);
		}

		public List<MapEvent> GetMapEventsBetweenFactions(IFaction faction1, IFaction faction2)
		{
			List<MapEvent> list = new List<MapEvent>();
			Func<MapEventParty, bool> <>9__0;
			Func<MapEventParty, bool> <>9__1;
			Func<MapEventParty, bool> <>9__2;
			Func<MapEventParty, bool> <>9__3;
			foreach (MapEvent mapEvent in this._mapEvents)
			{
				MBReadOnlyList<MapEventParty> mbreadOnlyList = mapEvent.PartiesOnSide(BattleSideEnum.Defender);
				MBReadOnlyList<MapEventParty> mbreadOnlyList2 = mapEvent.PartiesOnSide(BattleSideEnum.Attacker);
				IEnumerable<MapEventParty> enumerable = mbreadOnlyList;
				Func<MapEventParty, bool> func;
				if ((func = <>9__0) == null)
				{
					func = (<>9__0 = (MapEventParty mapEventParty) => mapEventParty.Party.MapFaction == faction1);
				}
				if (enumerable.Any(func))
				{
					IEnumerable<MapEventParty> enumerable2 = mbreadOnlyList2;
					Func<MapEventParty, bool> func2;
					if ((func2 = <>9__1) == null)
					{
						func2 = (<>9__1 = (MapEventParty mapEventParty) => mapEventParty.Party.MapFaction == faction2);
					}
					if (enumerable2.Any(func2))
					{
						goto IL_ED;
					}
				}
				IEnumerable<MapEventParty> enumerable3 = mbreadOnlyList;
				Func<MapEventParty, bool> func3;
				if ((func3 = <>9__2) == null)
				{
					func3 = (<>9__2 = (MapEventParty mapEventParty) => mapEventParty.Party.MapFaction == faction2);
				}
				if (!enumerable3.Any(func3))
				{
					continue;
				}
				IEnumerable<MapEventParty> enumerable4 = mbreadOnlyList2;
				Func<MapEventParty, bool> func4;
				if ((func4 = <>9__3) == null)
				{
					func4 = (<>9__3 = (MapEventParty mapEventParty) => mapEventParty.Party.MapFaction == faction1);
				}
				if (!enumerable4.Any(func4))
				{
					continue;
				}
				IL_ED:
				list.Add(mapEvent);
			}
			return list;
		}

		public void FinalizePlayerMapEvent(MapEvent mapEvent = null)
		{
			if (MobileParty.MainParty.MapEvent == null)
			{
				throw new MBNotFoundException("Trying to finalize a non-existing map event.");
			}
			PartyBase.MainParty.MapEvent.FinalizeEvent();
			PlayerEncounter.Finish(true);
		}

		public MapEvent StartSiegeMapEvent(PartyBase attackerParty, PartyBase defenderParty)
		{
			MapEvent mapEvent = new MapEvent();
			mapEvent.Initialize(attackerParty, defenderParty, null, MapEvent.BattleTypes.Siege);
			this.OnMapEventCreated(mapEvent);
			return mapEvent;
		}

		public MapEvent StartSallyOutMapEvent(PartyBase attackerParty, PartyBase defenderParty)
		{
			MapEvent mapEvent = new MapEvent();
			mapEvent.Initialize(attackerParty, defenderParty, null, MapEvent.BattleTypes.SallyOut);
			this.OnMapEventCreated(mapEvent);
			return mapEvent;
		}

		public MapEvent StartSiegeOutsideMapEvent(PartyBase attackerParty, PartyBase defenderParty)
		{
			MapEvent mapEvent = new MapEvent();
			mapEvent.Initialize(attackerParty, defenderParty, null, MapEvent.BattleTypes.SiegeOutside);
			this.OnMapEventCreated(mapEvent);
			return mapEvent;
		}

		[SaveableField(1)]
		private List<MapEvent> _mapEvents;
	}
}
