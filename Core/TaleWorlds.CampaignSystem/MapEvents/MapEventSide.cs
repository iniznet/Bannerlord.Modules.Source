using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.CampaignSystem.Settlements;
using TaleWorlds.CampaignSystem.Siege;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.LinQuick;
using TaleWorlds.Localization;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.MapEvents
{
	// Token: 0x020002C0 RID: 704
	public class MapEventSide
	{
		// Token: 0x060028E3 RID: 10467 RVA: 0x000ADCB4 File Offset: 0x000ABEB4
		internal static void AutoGeneratedStaticCollectObjectsMapEventSide(object o, List<object> collectedObjects)
		{
			((MapEventSide)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060028E4 RID: 10468 RVA: 0x000ADCC4 File Offset: 0x000ABEC4
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._battleParties);
			collectedObjects.Add(this._mapEvent);
			collectedObjects.Add(this._mapFaction);
			UniqueTroopDescriptor.AutoGeneratedStaticCollectObjectsUniqueTroopDescriptor(this._selectedSimulationTroopDescriptor, collectedObjects);
			collectedObjects.Add(this._selectedSimulationTroop);
			collectedObjects.Add(this._nearbyPartiesAddedToPlayerMapEvent);
			collectedObjects.Add(this.LeaderParty);
		}

		// Token: 0x060028E5 RID: 10469 RVA: 0x000ADD2A File Offset: 0x000ABF2A
		internal static object AutoGeneratedGetMemberValueLeaderParty(object o)
		{
			return ((MapEventSide)o).LeaderParty;
		}

		// Token: 0x060028E6 RID: 10470 RVA: 0x000ADD37 File Offset: 0x000ABF37
		internal static object AutoGeneratedGetMemberValueMissionSide(object o)
		{
			return ((MapEventSide)o).MissionSide;
		}

		// Token: 0x060028E7 RID: 10471 RVA: 0x000ADD49 File Offset: 0x000ABF49
		internal static object AutoGeneratedGetMemberValueCasualtyStrength(object o)
		{
			return ((MapEventSide)o).CasualtyStrength;
		}

		// Token: 0x060028E8 RID: 10472 RVA: 0x000ADD5B File Offset: 0x000ABF5B
		internal static object AutoGeneratedGetMemberValueStrengthRatio(object o)
		{
			return ((MapEventSide)o).StrengthRatio;
		}

		// Token: 0x060028E9 RID: 10473 RVA: 0x000ADD6D File Offset: 0x000ABF6D
		internal static object AutoGeneratedGetMemberValueRenownValue(object o)
		{
			return ((MapEventSide)o).RenownValue;
		}

		// Token: 0x060028EA RID: 10474 RVA: 0x000ADD7F File Offset: 0x000ABF7F
		internal static object AutoGeneratedGetMemberValueInfluenceValue(object o)
		{
			return ((MapEventSide)o).InfluenceValue;
		}

		// Token: 0x060028EB RID: 10475 RVA: 0x000ADD91 File Offset: 0x000ABF91
		internal static object AutoGeneratedGetMemberValueCasualties(object o)
		{
			return ((MapEventSide)o).Casualties;
		}

		// Token: 0x060028EC RID: 10476 RVA: 0x000ADDA3 File Offset: 0x000ABFA3
		internal static object AutoGeneratedGetMemberValueIsSurrendered(object o)
		{
			return ((MapEventSide)o).IsSurrendered;
		}

		// Token: 0x060028ED RID: 10477 RVA: 0x000ADDB5 File Offset: 0x000ABFB5
		internal static object AutoGeneratedGetMemberValue_battleParties(object o)
		{
			return ((MapEventSide)o)._battleParties;
		}

		// Token: 0x060028EE RID: 10478 RVA: 0x000ADDC2 File Offset: 0x000ABFC2
		internal static object AutoGeneratedGetMemberValue_mapEvent(object o)
		{
			return ((MapEventSide)o)._mapEvent;
		}

		// Token: 0x060028EF RID: 10479 RVA: 0x000ADDCF File Offset: 0x000ABFCF
		internal static object AutoGeneratedGetMemberValue_mapFaction(object o)
		{
			return ((MapEventSide)o)._mapFaction;
		}

		// Token: 0x060028F0 RID: 10480 RVA: 0x000ADDDC File Offset: 0x000ABFDC
		internal static object AutoGeneratedGetMemberValue_selectedSimulationTroopIndex(object o)
		{
			return ((MapEventSide)o)._selectedSimulationTroopIndex;
		}

		// Token: 0x060028F1 RID: 10481 RVA: 0x000ADDEE File Offset: 0x000ABFEE
		internal static object AutoGeneratedGetMemberValue_selectedSimulationTroopDescriptor(object o)
		{
			return ((MapEventSide)o)._selectedSimulationTroopDescriptor;
		}

		// Token: 0x060028F2 RID: 10482 RVA: 0x000ADE00 File Offset: 0x000AC000
		internal static object AutoGeneratedGetMemberValue_selectedSimulationTroop(object o)
		{
			return ((MapEventSide)o)._selectedSimulationTroop;
		}

		// Token: 0x060028F3 RID: 10483 RVA: 0x000ADE0D File Offset: 0x000AC00D
		internal static object AutoGeneratedGetMemberValue_nearbyPartiesAddedToPlayerMapEvent(object o)
		{
			return ((MapEventSide)o)._nearbyPartiesAddedToPlayerMapEvent;
		}

		// Token: 0x17000A32 RID: 2610
		// (get) Token: 0x060028F4 RID: 10484 RVA: 0x000ADE1A File Offset: 0x000AC01A
		// (set) Token: 0x060028F5 RID: 10485 RVA: 0x000ADE22 File Offset: 0x000AC022
		[SaveableProperty(4)]
		public PartyBase LeaderParty { get; internal set; }

		// Token: 0x17000A33 RID: 2611
		// (get) Token: 0x060028F6 RID: 10486 RVA: 0x000ADE2B File Offset: 0x000AC02B
		public MBReadOnlyList<MapEventParty> Parties
		{
			get
			{
				return this._battleParties;
			}
		}

		// Token: 0x17000A34 RID: 2612
		// (get) Token: 0x060028F7 RID: 10487 RVA: 0x000ADE33 File Offset: 0x000AC033
		// (set) Token: 0x060028F8 RID: 10488 RVA: 0x000ADE3B File Offset: 0x000AC03B
		[SaveableProperty(7)]
		public BattleSideEnum MissionSide { get; private set; }

		// Token: 0x17000A35 RID: 2613
		// (get) Token: 0x060028F9 RID: 10489 RVA: 0x000ADE44 File Offset: 0x000AC044
		private IBattleObserver BattleObserver
		{
			get
			{
				return this._mapEvent.BattleObserver;
			}
		}

		// Token: 0x17000A36 RID: 2614
		// (get) Token: 0x060028FA RID: 10490 RVA: 0x000ADE51 File Offset: 0x000AC051
		public int TroopCount
		{
			get
			{
				return this.RecalculateMemberCountOfSide();
			}
		}

		// Token: 0x060028FB RID: 10491 RVA: 0x000ADE5C File Offset: 0x000AC05C
		public int CountTroops(Func<FlattenedTroopRosterElement, bool> pred)
		{
			int num = 0;
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				foreach (FlattenedTroopRosterElement flattenedTroopRosterElement in mapEventParty.Troops)
				{
					if (pred(flattenedTroopRosterElement))
					{
						num++;
					}
				}
			}
			return num;
		}

		// Token: 0x060028FC RID: 10492 RVA: 0x000ADEEC File Offset: 0x000AC0EC
		public int GetTotalHealthyTroopCountOfSide()
		{
			int num = 0;
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				num += mapEventParty.Party.MemberRoster.TotalHealthyCount;
			}
			return num;
		}

		// Token: 0x060028FD RID: 10493 RVA: 0x000ADF50 File Offset: 0x000AC150
		public int GetTotalHealthyHeroCountOfSide()
		{
			int num = 0;
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				TroopRoster memberRoster = mapEventParty.Party.MemberRoster;
				num += memberRoster.TotalHeroes - memberRoster.TotalWoundedHeroes;
			}
			return num;
		}

		// Token: 0x17000A37 RID: 2615
		// (get) Token: 0x060028FE RID: 10494 RVA: 0x000ADFBC File Offset: 0x000AC1BC
		public int NumRemainingSimulationTroops
		{
			get
			{
				List<UniqueTroopDescriptor> simulationTroopList = this._simulationTroopList;
				if (simulationTroopList == null)
				{
					return 0;
				}
				return simulationTroopList.Count;
			}
		}

		// Token: 0x17000A38 RID: 2616
		// (get) Token: 0x060028FF RID: 10495 RVA: 0x000ADFCF File Offset: 0x000AC1CF
		// (set) Token: 0x06002900 RID: 10496 RVA: 0x000ADFD7 File Offset: 0x000AC1D7
		[SaveableProperty(15)]
		public float CasualtyStrength { get; private set; }

		// Token: 0x17000A39 RID: 2617
		// (get) Token: 0x06002901 RID: 10497 RVA: 0x000ADFE0 File Offset: 0x000AC1E0
		public MapEvent MapEvent
		{
			get
			{
				return this._mapEvent;
			}
		}

		// Token: 0x17000A3A RID: 2618
		// (get) Token: 0x06002902 RID: 10498 RVA: 0x000ADFE8 File Offset: 0x000AC1E8
		public MapEventSide OtherSide
		{
			get
			{
				return this._mapEvent.GetMapEventSide((this.MissionSide == BattleSideEnum.Defender) ? BattleSideEnum.Attacker : BattleSideEnum.Defender);
			}
		}

		// Token: 0x17000A3B RID: 2619
		// (get) Token: 0x06002903 RID: 10499 RVA: 0x000AE001 File Offset: 0x000AC201
		public IFaction MapFaction
		{
			get
			{
				return this._mapFaction ?? this.LeaderParty.MapFaction;
			}
		}

		// Token: 0x06002904 RID: 10500 RVA: 0x000AE018 File Offset: 0x000AC218
		internal MapEventSide(MapEvent mapEvent, BattleSideEnum missionSide, PartyBase leaderParty)
		{
			this._mapEvent = mapEvent;
			this.LeaderParty = leaderParty;
			this.MissionSide = missionSide;
			this._mapFaction = leaderParty.MapFaction;
			this._battleParties = new MBList<MapEventParty>();
		}

		// Token: 0x06002905 RID: 10501 RVA: 0x000AE06D File Offset: 0x000AC26D
		internal void AddPartyInternal(PartyBase party)
		{
			this._battleParties.Add(new MapEventParty(party));
			this._mapEvent.AddInvolvedPartyInternal(party, this.MissionSide);
		}

		// Token: 0x06002906 RID: 10502 RVA: 0x000AE094 File Offset: 0x000AC294
		internal void RemovePartyInternal(PartyBase party)
		{
			int num = this._battleParties.FindIndexQ((MapEventParty p) => p.Party == party);
			this._battleParties.RemoveAt(num);
			this._mapEvent.RemoveInvolvedPartyInternal(party);
			if (this.LeaderParty == party && this._battleParties.Count > 0)
			{
				this.LeaderParty = this._battleParties[0].Party;
			}
		}

		// Token: 0x06002907 RID: 10503 RVA: 0x000AE118 File Offset: 0x000AC318
		public int RecalculateMemberCountOfSide()
		{
			int num = 0;
			foreach (MapEventParty mapEventParty in this.Parties)
			{
				num += mapEventParty.Party.NumberOfHealthyMembers;
			}
			return num;
		}

		// Token: 0x06002908 RID: 10504 RVA: 0x000AE178 File Offset: 0x000AC378
		public float RecalculateStrengthOfSide()
		{
			float num = 0f;
			foreach (MapEventParty mapEventParty in this.Parties)
			{
				num += mapEventParty.Party.TotalStrength;
			}
			return num;
		}

		// Token: 0x06002909 RID: 10505 RVA: 0x000AE1DC File Offset: 0x000AC3DC
		internal void DistributeLootAmongWinners(LootCollector lootCollector)
		{
			int num = this.CalculateTotalContribution();
			lootCollector.MakeFreedHeroesEscape(lootCollector.LootedPrisoners, this.MapEvent.IsPlayerMapEvent && this.MapEvent.PlayerSide == this.MapEvent.WinningSide);
			bool flag = this.MapEvent.IsSiegeAssault || this.MapEvent.IsSiegeOutside;
			if (flag)
			{
				int num2 = this._battleParties.FindIndexQ((MapEventParty x) => x.Party == PartyBase.MainParty);
				if (num2 != -1)
				{
					MapEventParty mapEventParty = this._battleParties[num2];
					int num3 = this.CalculateContributionAndGiveShareToParty(lootCollector, mapEventParty, num);
					num -= num3;
				}
				Settlement settlement;
				if ((settlement = this.MapEvent.MapEventSettlement) == null)
				{
					PartyBase leaderParty = this.MapEvent.DefenderSide.LeaderParty;
					if (leaderParty == null)
					{
						settlement = null;
					}
					else
					{
						MobileParty mobileParty = leaderParty.MobileParty;
						settlement = ((mobileParty != null) ? mobileParty.BesiegedSettlement : null);
					}
				}
				Settlement settlement2 = settlement;
				if (settlement2 != null)
				{
					for (int i = lootCollector.LootedMembers.Count - 1; i >= 0; i--)
					{
						TroopRosterElement elementCopyAtIndex = lootCollector.LootedMembers.GetElementCopyAtIndex(i);
						Hero heroObject = elementCopyAtIndex.Character.HeroObject;
						if (heroObject != null)
						{
							lootCollector.LootedMembers.RemoveTroop(elementCopyAtIndex.Character, 1, default(UniqueTroopDescriptor), 0);
							TakePrisonerAction.Apply(settlement2.Party, heroObject);
						}
					}
					settlement2.Party.PrisonRoster.Add(lootCollector.LootedMembers);
					lootCollector.LootedMembers.Clear();
				}
				else
				{
					Debug.FailedAssert("Map event settlement is null!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.CampaignSystem\\MapEvents\\MapEventSide.cs", "DistributeLootAmongWinners", 495);
				}
			}
			if ((float)num > 1E-07f)
			{
				MapEventParty[] array = new MapEventParty[this._battleParties.Count];
				this._battleParties.CopyTo(array);
				foreach (MapEventParty mapEventParty2 in array)
				{
					if (!flag || mapEventParty2.Party != PartyBase.MainParty)
					{
						int num4 = this.CalculateContributionAndGiveShareToParty(lootCollector, mapEventParty2, num);
						num -= num4;
					}
				}
			}
			lootCollector.MakeRemainingPrisonerHeroesEscape();
		}

		// Token: 0x0600290A RID: 10506 RVA: 0x000AE3E4 File Offset: 0x000AC5E4
		private int CalculateContributionAndGiveShareToParty(LootCollector lootCollector, MapEventParty partyRec, int totalContribution)
		{
			if (partyRec.Party.MemberRoster.Count > 0)
			{
				float num = (float)partyRec.ContributionToBattle / (float)totalContribution;
				lootCollector.GiveShareOfLootToParty(partyRec.RosterToReceiveLootMembers, partyRec.RosterToReceiveLootPrisoners, partyRec.RosterToReceiveLootItems, partyRec.Party, num, this._mapEvent);
				return partyRec.ContributionToBattle;
			}
			return 0;
		}

		// Token: 0x0600290B RID: 10507 RVA: 0x000AE43C File Offset: 0x000AC63C
		public bool IsMainPartyAmongParties()
		{
			return this.Parties.AnyQ((MapEventParty party) => party.Party == PartyBase.MainParty);
		}

		// Token: 0x0600290C RID: 10508 RVA: 0x000AE468 File Offset: 0x000AC668
		public float GetPlayerPartyContributionRate()
		{
			int num = this.CalculateTotalContribution();
			if (num == 0)
			{
				return 0f;
			}
			int num2 = 0;
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				if (mapEventParty.Party == PartyBase.MainParty)
				{
					num2 = mapEventParty.ContributionToBattle;
					break;
				}
			}
			return (float)num2 / (float)num;
		}

		// Token: 0x0600290D RID: 10509 RVA: 0x000AE4E4 File Offset: 0x000AC6E4
		internal int CalculateTotalContribution()
		{
			int num = 0;
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				if (mapEventParty.Party.MemberRoster.Count > 0)
				{
					num += mapEventParty.ContributionToBattle;
				}
			}
			return num;
		}

		// Token: 0x0600290E RID: 10510 RVA: 0x000AE550 File Offset: 0x000AC750
		public void CalculateRenownAndInfluenceValues(float[] strengthOfSide)
		{
			int missionSide = (int)this.MissionSide;
			int oppositeSide = (int)this.MissionSide.GetOppositeSide();
			float num = 1f;
			float num2 = 1f;
			if (this._mapEvent.IsSiegeAssault)
			{
				float settlementAdvantage = Campaign.Current.Models.CombatSimulationModel.GetSettlementAdvantage(this._mapEvent.MapEventSettlement);
				if (this.MissionSide == BattleSideEnum.Defender)
				{
					num2 = settlementAdvantage;
				}
				else
				{
					num = settlementAdvantage;
				}
			}
			float num3 = (this._mapEvent.IsSiegeAssault ? 0.7f : ((this._mapEvent.IsSallyOut || this._mapEvent.IsRaid || this._mapEvent.MapEventSettlement != null) ? 0.6f : 0.5f));
			this.StrengthRatio = (strengthOfSide[oppositeSide] * MathF.Sqrt(num) + 10f) / (strengthOfSide[missionSide] * num2 + 10f);
			this.StrengthRatio = ((this.StrengthRatio > 10f) ? 10f : this.StrengthRatio);
			if (strengthOfSide[missionSide] > 0f)
			{
				this.RenownValue = MathF.Pow(strengthOfSide[oppositeSide] * MathF.Sqrt(num), 0.75f) * MathF.Pow(this.StrengthRatio, 0.45f) * num3 * 0.75f;
				this.InfluenceValue = MathF.Pow(strengthOfSide[oppositeSide] * MathF.Sqrt(num), 0.75f) * MathF.Pow(this.StrengthRatio, 0.15f) * 0.6f;
			}
		}

		// Token: 0x0600290F RID: 10511 RVA: 0x000AE6B4 File Offset: 0x000AC8B4
		internal void CommitXpGains()
		{
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				mapEventParty.CommitXpGain();
			}
		}

		// Token: 0x06002910 RID: 10512 RVA: 0x000AE704 File Offset: 0x000AC904
		public virtual void DistributeRenownAndInfluence(MapEventResultExplainer resultExplainers = null, bool forScoreboard = false)
		{
			int num = this.CalculateTotalContribution();
			float renownValue = this.RenownValue;
			float influenceValue = this.InfluenceValue;
			List<MobileParty> list = new List<MobileParty>();
			List<MobileParty> list2 = new List<MobileParty>();
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				PartyBase party = mapEventParty.Party;
				if (party.IsMobile && party.MobileParty.IsVillager)
				{
					list.Add(party.MobileParty);
				}
				if (party.IsMobile && party.MobileParty.IsCaravan)
				{
					list2.Add(party.MobileParty);
				}
			}
			foreach (MapEventParty mapEventParty2 in this._battleParties)
			{
				PartyBase party2 = mapEventParty2.Party;
				if (num > 0)
				{
					float num2 = (float)mapEventParty2.ContributionToBattle / (float)num;
					ExplainedNumber explainedNumber = new ExplainedNumber(0f, true, null);
					ExplainedNumber explainedNumber2 = new ExplainedNumber(0f, true, null);
					ExplainedNumber explainedNumber3 = new ExplainedNumber(0f, true, null);
					explainedNumber3 = Campaign.Current.Models.BattleRewardModel.CalculateMoraleGainVictory(party2, renownValue, num2);
					mapEventParty2.MoraleChange = explainedNumber3.ResultNumber;
					if (resultExplainers != null && Hero.MainHero == party2.LeaderHero)
					{
						resultExplainers.MoraleExplainedNumber = explainedNumber3;
					}
					if (party2.LeaderHero != null)
					{
						foreach (MobileParty mobileParty in list)
						{
							if (mobileParty.HomeSettlement.OwnerClan != party2.LeaderHero.Clan && !mobileParty.HomeSettlement.OwnerClan.IsEliminated && !party2.LeaderHero.Clan.IsEliminated)
							{
								int num3 = MBRandom.RoundRandomized(4f * num2);
								if (num3 > 0)
								{
									ChangeRelationAction.ApplyRelationChangeBetweenHeroes(mobileParty.HomeSettlement.OwnerClan.Leader, party2.LeaderHero.Clan.Leader, num3, true);
								}
								num3 = MBRandom.RoundRandomized(2f * num2);
								foreach (Hero hero in mobileParty.HomeSettlement.Notables)
								{
									ChangeRelationAction.ApplyRelationChangeBetweenHeroes(hero, party2.LeaderHero.Clan.Leader, num3, true);
								}
							}
						}
						foreach (MobileParty mobileParty2 in list2)
						{
							if (mobileParty2.HomeSettlement != null && mobileParty2.HomeSettlement.OwnerClan != null && party2.LeaderHero != null && mobileParty2.HomeSettlement.OwnerClan.Leader.Clan != party2.LeaderHero.Clan && mobileParty2.Party.Owner != null && mobileParty2.Party.Owner != Hero.MainHero && mobileParty2.Party.Owner.IsAlive && party2.LeaderHero.Clan.Leader != null && party2.LeaderHero.Clan.Leader.IsAlive && !mobileParty2.IsCurrentlyUsedByAQuest)
							{
								int num4 = MBRandom.RoundRandomized(6f * num2);
								ChangeRelationAction.ApplyRelationChangeBetweenHeroes(mobileParty2.Party.Owner, party2.LeaderHero.Clan.Leader, num4, true);
							}
						}
						if (this.MapEvent.IsRaid && this.MissionSide == BattleSideEnum.Defender && this == this.MapEvent.Winner)
						{
							ChangeRelationAction.ApplyRelationChangeBetweenHeroes(this.MapEvent.MapEventSettlement.Notables.GetRandomElement<Hero>(), party2.LeaderHero, 5, true);
						}
					}
					if (party2.LeaderHero != null && (party2 != PartyBase.MainParty || (PlayerEncounter.Current != null && !PlayerEncounter.Current.IsSallyOutAmbush)))
					{
						explainedNumber = Campaign.Current.Models.BattleRewardModel.CalculateRenownGain(party2, renownValue, num2);
						explainedNumber2 = Campaign.Current.Models.BattleRewardModel.CalculateInfluenceGain(party2, influenceValue, num2);
						float num5 = this._mapEvent.StrengthOfSide[(int)this.MissionSide.GetOppositeSide()];
						float num6 = num5;
						foreach (MapEventParty mapEventParty3 in this.OtherSide.Parties)
						{
							num6 -= mapEventParty3.Party.TotalStrength;
						}
						mapEventParty2.GainedRenown = explainedNumber.ResultNumber * num6 / num5;
						mapEventParty2.GainedInfluence = explainedNumber2.ResultNumber * num6 / num5;
						if (resultExplainers != null && Hero.MainHero == party2.LeaderHero)
						{
							resultExplainers.RenownExplainedNumber = new ExplainedNumber(mapEventParty2.GainedRenown, false, null);
							resultExplainers.InfluenceExplainedNumber = new ExplainedNumber(mapEventParty2.GainedInfluence, false, null);
						}
					}
				}
			}
			if (!forScoreboard)
			{
				this._mapEvent.RecalculateStrengthOfSides();
				this.CalculateRenownAndInfluenceValues(this._mapEvent.StrengthOfSide);
			}
		}

		// Token: 0x06002911 RID: 10513 RVA: 0x000AECD8 File Offset: 0x000ACED8
		public void ApplyRenownAndInfluenceChanges()
		{
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				PartyBase party = mapEventParty.Party;
				Hero hero = ((party == PartyBase.MainParty) ? Hero.MainHero : party.LeaderHero);
				if (hero != null)
				{
					if (mapEventParty.GainedRenown > 0.001f)
					{
						GainRenownAction.Apply(hero, mapEventParty.GainedRenown, true);
						mapEventParty.GainedRenown = 0f;
					}
					if (mapEventParty.GainedInfluence > 0.001f)
					{
						GainKingdomInfluenceAction.ApplyForBattle(hero, mapEventParty.GainedInfluence);
						mapEventParty.GainedInfluence = 0f;
					}
				}
			}
		}

		// Token: 0x06002912 RID: 10514 RVA: 0x000AED90 File Offset: 0x000ACF90
		public void ApplyFinalRewardsAndChanges()
		{
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				PartyBase party = mapEventParty.Party;
				Hero hero = ((party == PartyBase.MainParty) ? Hero.MainHero : party.LeaderHero);
				if (party.MobileParty != null)
				{
					party.MobileParty.RecentEventsMorale += mapEventParty.MoraleChange;
				}
				if (hero != null)
				{
					if ((float)mapEventParty.PlunderedGold > 0.001f)
					{
						if (hero == Hero.MainHero)
						{
							MBTextManager.SetTextVariable("GOLD", mapEventParty.PlunderedGold);
							MBInformationManager.AddQuickInformation(GameTexts.FindText("str_plunder_gain_message", null), 0, null, "");
						}
						GiveGoldAction.ApplyBetweenCharacters(null, hero, mapEventParty.PlunderedGold, true);
					}
					if ((float)mapEventParty.GoldLost > 0.001f)
					{
						GiveGoldAction.ApplyBetweenCharacters(hero, null, mapEventParty.GoldLost, true);
					}
				}
				else if (party.IsMobile && party.MobileParty.IsPartyTradeActive)
				{
					party.MobileParty.PartyTradeGold -= mapEventParty.GoldLost;
					party.MobileParty.PartyTradeGold += mapEventParty.PlunderedGold;
				}
			}
		}

		// Token: 0x06002913 RID: 10515 RVA: 0x000AEEDC File Offset: 0x000AD0DC
		public virtual void CalculatePlunderedGoldShare(float totalPlunderedGold, MapEventResultExplainer resultExplainers = null)
		{
			int num = this.CalculateTotalContribution();
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				if (num > 0)
				{
					float num2 = (float)mapEventParty.ContributionToBattle / (float)num;
					num -= mapEventParty.ContributionToBattle;
					int num3 = (int)(num2 * totalPlunderedGold);
					totalPlunderedGold -= (float)num3;
					mapEventParty.PlunderedGold = num3;
				}
			}
		}

		// Token: 0x06002914 RID: 10516 RVA: 0x000AEF58 File Offset: 0x000AD158
		public void UpdatePartiesMoveState()
		{
			foreach (MapEventParty mapEventParty in this.Parties)
			{
				if (mapEventParty.Party.IsMobile && mapEventParty.Party.MobileParty.IsActive && mapEventParty.Party.MobileParty.CurrentSettlement == null && ((this._mapEvent.IsRaid && this._mapEvent.MapEventSettlement.SettlementHitPoints <= 0f) || this._mapEvent.IsSiegeAssault) && mapEventParty.Party.MobileParty.Army != null && mapEventParty.Party.MobileParty.Army.AiBehaviorObject == this._mapEvent.MapEventSettlement)
				{
					mapEventParty.Party.MobileParty.Army.AIBehavior = Army.AIBehaviorFlags.Unassigned;
				}
			}
		}

		// Token: 0x06002915 RID: 10517 RVA: 0x000AF05C File Offset: 0x000AD25C
		public void HandleMapEventEnd()
		{
			while (this.Parties.Count > 0)
			{
				MapEventParty mapEventParty = this.Parties.FirstOrDefault((MapEventParty x) => !x.Party.IsMobile || x.Party.MobileParty.Army == null || x.Party.MobileParty.Army.LeaderParty != x.Party.MobileParty) ?? this.Parties[this.Parties.Count - 1];
				this.HandleMapEventEndForPartyInternal(mapEventParty.Party);
			}
		}

		// Token: 0x06002916 RID: 10518 RVA: 0x000AF0CC File Offset: 0x000AD2CC
		internal void HandleMapEventEndForPartyInternal(PartyBase party)
		{
			IEnumerable<TroopRosterElement> enumerable = party.MemberRoster.GetTroopRoster().WhereQ((TroopRosterElement x) => x.Character.IsHero && x.Character.HeroObject.IsAlive && x.Character.HeroObject.DeathMark == KillCharacterAction.KillCharacterActionDetail.DiedInBattle);
			PartyBase leaderParty = this._mapEvent.GetLeaderParty(party.OpponentSide);
			bool flag = this._mapEvent.IsWinnerSide(party.Side);
			bool attackersRanAway = this._mapEvent.AttackersRanAway;
			party.MapEventSide = null;
			foreach (TroopRosterElement troopRosterElement in enumerable)
			{
				KillCharacterAction.ApplyByBattle(troopRosterElement.Character.HeroObject, this.OtherSide.LeaderParty.LeaderHero, true);
			}
			if (party.IsMobile && (party.NumberOfAllMembers == 0 || (!flag && !attackersRanAway && (party.NumberOfHealthyMembers == 0 || (this._mapEvent.BattleState != BattleState.None && party.MobileParty.IsMilitia)) && (party.MobileParty.Army == null || party.MobileParty.Army.LeaderParty.Party.NumberOfHealthyMembers == 0))) && party != PartyBase.MainParty && party.IsActive && (!party.MobileParty.IsDisbanding || party.MemberRoster.Count == 0))
			{
				DestroyPartyAction.Apply(leaderParty, party.MobileParty);
			}
			if (party.IsMobile && party.MobileParty.IsActive && party.MobileParty.CurrentSettlement == null)
			{
				IPartyVisual visuals = party.Visuals;
				if (visuals == null)
				{
					return;
				}
				visuals.SetMapIconAsDirty();
			}
		}

		// Token: 0x06002917 RID: 10519 RVA: 0x000AF264 File Offset: 0x000AD464
		public void AddHeroDamage(Hero character, int damage)
		{
			character.HitPoints -= damage;
		}

		// Token: 0x06002918 RID: 10520 RVA: 0x000AF274 File Offset: 0x000AD474
		public void AllocateTroops(ref List<UniqueTroopDescriptor> troopsList, int number = -1, Func<UniqueTroopDescriptor, MapEventParty, bool> customAllocationConditions = null)
		{
			if (troopsList == null)
			{
				troopsList = new List<UniqueTroopDescriptor>();
			}
			else
			{
				troopsList.Clear();
			}
			int k = ((number >= 0) ? number : 100000000);
			while (k > 0)
			{
				int num = -1;
				float num2 = float.MinValue;
				for (int j = 0; j < this._readyTroopsPriorityList.Count; j++)
				{
					if (this._readyTroopsPriorityList[j].Item3 > num2)
					{
						num2 = this._readyTroopsPriorityList[j].Item3;
						num = j;
					}
				}
				if (num == -1)
				{
					break;
				}
				ValueTuple<FlattenedTroopRosterElement, MapEventParty, float> valueTuple = this._readyTroopsPriorityList[num];
				UniqueTroopDescriptor descriptor = valueTuple.Item1.Descriptor;
				MapEventParty item = valueTuple.Item2;
				this._readyTroopsPriorityList[num] = new ValueTuple<FlattenedTroopRosterElement, MapEventParty, float>(FlattenedTroopRosterElement.DefaultFlattenedTroopRosterElement, null, float.MinValue);
				if (customAllocationConditions == null || customAllocationConditions(descriptor, item))
				{
					troopsList.Add(descriptor);
					this._allocatedTroops.Add(descriptor, item);
					k--;
					if (this.BattleObserver != null)
					{
						this.BattleObserver.TroopNumberChanged(this.MissionSide, item.Party, item.Troops[descriptor].Troop, 1, 0, 0, 0, 0, 0);
						if (this._troopUpgradeTracker == null)
						{
							this._troopUpgradeTracker = new TroopUpgradeTracker();
						}
						this._troopUpgradeTracker.AddTrackedTroop(item.Party, item.Troops[descriptor].Troop);
					}
				}
			}
			this._readyTroopsPriorityList.RemoveAll((ValueTuple<FlattenedTroopRosterElement, MapEventParty, float> i) => i.Item3 <= float.MinValue);
			this._requiresTroopCacheUpdate = true;
		}

		// Token: 0x06002919 RID: 10521 RVA: 0x000AF41C File Offset: 0x000AD61C
		public void GetAllTroops(ref List<UniqueTroopDescriptor> troopsList)
		{
			if (troopsList == null)
			{
				troopsList = new List<UniqueTroopDescriptor>();
			}
			else
			{
				troopsList.Clear();
			}
			foreach (ValueTuple<FlattenedTroopRosterElement, MapEventParty, float> valueTuple in this._readyTroopsPriorityList)
			{
				List<UniqueTroopDescriptor> list = troopsList;
				FlattenedTroopRosterElement item = valueTuple.Item1;
				list.Add(item.Descriptor);
			}
			foreach (UniqueTroopDescriptor uniqueTroopDescriptor in this._allocatedTroops.Keys)
			{
				troopsList.Add(uniqueTroopDescriptor);
			}
		}

		// Token: 0x0600291A RID: 10522 RVA: 0x000AF4DC File Offset: 0x000AD6DC
		public CharacterObject GetAllocatedTroop(UniqueTroopDescriptor troopDesc0)
		{
			MapEventParty mapEventParty;
			if (this._allocatedTroops.TryGetValue(troopDesc0, out mapEventParty))
			{
				return mapEventParty.Troops[troopDesc0].Troop;
			}
			return null;
		}

		// Token: 0x0600291B RID: 10523 RVA: 0x000AF510 File Offset: 0x000AD710
		public CharacterObject GetReadyTroop(UniqueTroopDescriptor troopDesc0)
		{
			this.CheckReadyTroopsTemporaryCache();
			MapEventParty mapEventParty;
			if (this._readyTroopsTemporaryCache.TryGetValue(troopDesc0, out mapEventParty))
			{
				return mapEventParty.Troops[troopDesc0].Troop;
			}
			return null;
		}

		// Token: 0x0600291C RID: 10524 RVA: 0x000AF54C File Offset: 0x000AD74C
		public PartyBase GetAllocatedTroopParty(UniqueTroopDescriptor troopDescriptor)
		{
			MapEventParty mapEventParty;
			if (this._allocatedTroops.TryGetValue(troopDescriptor, out mapEventParty))
			{
				return mapEventParty.Party;
			}
			return null;
		}

		// Token: 0x0600291D RID: 10525 RVA: 0x000AF574 File Offset: 0x000AD774
		public PartyBase GetReadyTroopParty(UniqueTroopDescriptor troopDescriptor)
		{
			this.CheckReadyTroopsTemporaryCache();
			MapEventParty mapEventParty;
			if (this._readyTroopsTemporaryCache.TryGetValue(troopDescriptor, out mapEventParty))
			{
				return mapEventParty.Party;
			}
			return null;
		}

		// Token: 0x0600291E RID: 10526 RVA: 0x000AF5A0 File Offset: 0x000AD7A0
		public void OnTroopWounded(UniqueTroopDescriptor troopDesc1)
		{
			MapEventParty mapEventParty = this._allocatedTroops[troopDesc1];
			mapEventParty.OnTroopWounded(troopDesc1);
			CharacterObject troop = mapEventParty.GetTroop(troopDesc1);
			float troopPowerBasedOnContext = Campaign.Current.Models.MilitaryPowerModel.GetTroopPowerBasedOnContext(troop, this._mapEvent.EventType, this.MissionSide, this.MapEvent.IsPlayerMapEvent && PlayerEncounter.Current != null && PlayerEncounter.Current.BattleSimulation != null);
			this.CasualtyStrength += troopPowerBasedOnContext;
			this.Casualties++;
		}

		// Token: 0x0600291F RID: 10527 RVA: 0x000AF630 File Offset: 0x000AD830
		public void OnTroopKilled(UniqueTroopDescriptor troopDesc1)
		{
			MapEventParty mapEventParty = this._allocatedTroops[troopDesc1];
			mapEventParty.OnTroopKilled(troopDesc1);
			CharacterObject troop = mapEventParty.GetTroop(troopDesc1);
			this.CasualtyStrength += Campaign.Current.Models.MilitaryPowerModel.GetTroopPowerBasedOnContext(troop, this._mapEvent.EventType, this.MissionSide, this.MapEvent.IsPlayerMapEvent && PlayerEncounter.Current != null && PlayerEncounter.Current.BattleSimulation != null);
			this.Casualties++;
		}

		// Token: 0x06002920 RID: 10528 RVA: 0x000AF6BC File Offset: 0x000AD8BC
		public void OnTroopRouted(UniqueTroopDescriptor troopDesc1)
		{
			MapEventParty mapEventParty = this._allocatedTroops[troopDesc1];
			mapEventParty.OnTroopRouted(troopDesc1);
			CharacterObject troop = mapEventParty.GetTroop(troopDesc1);
			float troopPowerBasedOnContext = Campaign.Current.Models.MilitaryPowerModel.GetTroopPowerBasedOnContext(troop, this._mapEvent.EventType, this.MissionSide, this.MapEvent.IsPlayerMapEvent && PlayerEncounter.Current != null && PlayerEncounter.Current.BattleSimulation != null);
			this.CasualtyStrength += troopPowerBasedOnContext * 0.1f;
		}

		// Token: 0x06002921 RID: 10529 RVA: 0x000AF742 File Offset: 0x000AD942
		public void OnTroopScoreHit(UniqueTroopDescriptor troopDesc1, CharacterObject attackedTroop, int damage, bool isFatal, bool isTeamKill, WeaponComponentData attackerWeapon, bool isSimulatedHit)
		{
			this._allocatedTroops[troopDesc1].OnTroopScoreHit(troopDesc1, attackedTroop, damage, isFatal, isTeamKill, attackerWeapon, isSimulatedHit);
		}

		// Token: 0x06002922 RID: 10530 RVA: 0x000AF760 File Offset: 0x000AD960
		private void MakeReady(bool includeHumanPlayers, FlattenedTroopRoster priorTroops = null, int sizeOfSide = -1)
		{
			if (this._readyTroopsPriorityList == null || this._allocatedTroops == null)
			{
				this._readyTroopsPriorityList = new List<ValueTuple<FlattenedTroopRosterElement, MapEventParty, float>>();
				this._allocatedTroops = new Dictionary<UniqueTroopDescriptor, MapEventParty>();
			}
			else
			{
				this._readyTroopsPriorityList.Clear();
				this._allocatedTroops.Clear();
			}
			if (sizeOfSide <= 0)
			{
				sizeOfSide = 0;
				foreach (MapEventParty mapEventParty in this._battleParties)
				{
					sizeOfSide += mapEventParty.Party.NumberOfHealthyMembers;
				}
			}
			foreach (MapEventParty mapEventParty2 in this._battleParties)
			{
				this.MakeReadyParty(mapEventParty2, priorTroops, includeHumanPlayers, sizeOfSide);
			}
			this._requiresTroopCacheUpdate = true;
		}

		// Token: 0x06002923 RID: 10531 RVA: 0x000AF84C File Offset: 0x000ADA4C
		private void MakeReadyParty(MapEventParty battleParty, FlattenedTroopRoster priorityTroops, bool includePlayers, int sizeOfSide)
		{
			battleParty.Update();
			bool flag = priorityTroops != null && this._mapEvent.PlayerSide == this.MissionSide && (this._mapEvent.IsHideoutBattle || (this._mapEvent.IsSiegeAssault && PlayerSiege.BesiegedSettlement != null && PlayerSiege.BesiegedSettlement.CurrentSiegeState == Settlement.SiegeState.InTheLordsHall));
			Campaign.Current.Models.TroopSupplierProbabilityModel.EnqueueTroopSpawnProbabilitiesAccordingToUnitSpawnPrioritization(battleParty, priorityTroops, includePlayers, sizeOfSide, flag, this._readyTroopsPriorityList);
		}

		// Token: 0x06002924 RID: 10532 RVA: 0x000AF8D0 File Offset: 0x000ADAD0
		private void CheckReadyTroopsTemporaryCache()
		{
			if (this._readyTroopsTemporaryCache == null)
			{
				this._readyTroopsTemporaryCache = new Dictionary<UniqueTroopDescriptor, MapEventParty>();
			}
			if (this._requiresTroopCacheUpdate)
			{
				this._readyTroopsTemporaryCache.Clear();
				foreach (ValueTuple<FlattenedTroopRosterElement, MapEventParty, float> valueTuple in this._readyTroopsPriorityList)
				{
					Dictionary<UniqueTroopDescriptor, MapEventParty> readyTroopsTemporaryCache = this._readyTroopsTemporaryCache;
					FlattenedTroopRosterElement item = valueTuple.Item1;
					readyTroopsTemporaryCache.Add(item.Descriptor, valueTuple.Item2);
				}
				this._requiresTroopCacheUpdate = false;
			}
		}

		// Token: 0x06002925 RID: 10533 RVA: 0x000AF968 File Offset: 0x000ADB68
		public void MakeReadyForSimulation(FlattenedTroopRoster priorTroops, int sizeOfSide = -1)
		{
			this.MakeReady(false, priorTroops, sizeOfSide);
			this.AllocateTroops(ref this._simulationTroopList, sizeOfSide, null);
		}

		// Token: 0x06002926 RID: 10534 RVA: 0x000AF981 File Offset: 0x000ADB81
		public void MakeReadyForMission(FlattenedTroopRoster priorTroops)
		{
			this.MakeReady(true, priorTroops, -1);
		}

		// Token: 0x06002927 RID: 10535 RVA: 0x000AF98C File Offset: 0x000ADB8C
		public void EndSimulation()
		{
			this._simulationTroopList.Clear();
			this._readyTroopsPriorityList.Clear();
			this._requiresTroopCacheUpdate = true;
			this._allocatedTroops.Clear();
		}

		// Token: 0x06002928 RID: 10536 RVA: 0x000AF9B8 File Offset: 0x000ADBB8
		internal void ResetContributionToBattleToStrength()
		{
			foreach (MapEventParty mapEventParty in this._battleParties)
			{
				mapEventParty.ResetContributionToBattleToStrength();
			}
		}

		// Token: 0x06002929 RID: 10537 RVA: 0x000AFA08 File Offset: 0x000ADC08
		internal void CollectAll(LootCollector lootCollector, out bool playerCaptured)
		{
			playerCaptured = false;
			bool flag = false;
			ExplainedNumber explainedNumber = new ExplainedNumber(1f, false, null);
			float num = 0f;
			foreach (MapEventParty mapEventParty in this.OtherSide.Parties)
			{
				if (mapEventParty != null)
				{
					PartyBase party = mapEventParty.Party;
					bool? flag2;
					if (party == null)
					{
						flag2 = null;
					}
					else
					{
						MobileParty mobileParty = party.MobileParty;
						flag2 = ((mobileParty != null) ? new bool?(mobileParty.HasPerk(DefaultPerks.Roguery.KnowHow, false)) : null);
					}
					bool? flag3 = flag2;
					bool flag4 = true;
					if ((flag3.GetValueOrDefault() == flag4) & (flag3 != null))
					{
						flag = true;
					}
				}
				bool flag5;
				if (mapEventParty == null)
				{
					flag5 = null != null;
				}
				else
				{
					PartyBase party2 = mapEventParty.Party;
					flag5 = ((party2 != null) ? party2.LeaderHero : null) != null;
				}
				if (flag5 && mapEventParty.Party.LeaderHero.GetPerkValue(DefaultPerks.Roguery.RogueExtraordinaire) && num < (float)mapEventParty.Party.LeaderHero.GetSkillValue(DefaultSkills.Roguery))
				{
					num = (float)mapEventParty.Party.LeaderHero.GetSkillValue(DefaultSkills.Roguery);
					PerkHelper.AddEpicPerkBonusForCharacter(DefaultPerks.Roguery.RogueExtraordinaire, mapEventParty.Party.LeaderHero.CharacterObject, DefaultSkills.Roguery, true, ref explainedNumber, 200);
				}
			}
			foreach (MapEventParty mapEventParty2 in this._battleParties)
			{
				PartyBase party3 = mapEventParty2.Party;
				MapEventSide.CaptureWoundedTroops(lootCollector, party3, this.IsSurrendered, ref playerCaptured);
				lootCollector.LootedPrisoners.Add(party3.PrisonRoster);
				bool flag6 = false;
				for (int i = party3.PrisonRoster.Count - 1; i >= 0; i--)
				{
					TroopRosterElement troopRosterElement = party3.PrisonRoster.data[i];
					if (!troopRosterElement.Character.IsHero)
					{
						party3.PrisonRoster.RemoveTroop(troopRosterElement.Character, troopRosterElement.Number, default(UniqueTroopDescriptor), 0);
						flag6 = true;
					}
				}
				if (flag6)
				{
					party3.PrisonRoster.RemoveZeroCounts();
				}
				float num2 = 0.5f;
				num2 *= explainedNumber.ResultNumber;
				if (party3.IsMobile)
				{
					if (flag && (party3.MobileParty.IsCaravan || party3.MobileParty.IsVillager))
					{
						num2 *= 1f + DefaultPerks.Roguery.KnowHow.PrimaryBonus;
					}
				}
				else if (party3.IsSettlement)
				{
					Settlement settlement = party3.Settlement;
					if (settlement.IsTown)
					{
						num2 = 0f;
					}
					else if (settlement.IsVillage)
					{
						num2 = ((settlement.SettlementHitPoints > 0f) ? 0f : 1f);
					}
					else
					{
						num2 = 1f;
					}
				}
				num2 = ((1f > num2) ? num2 : 1f);
				if (party3 == PartyBase.MainParty)
				{
					MBList<ItemRosterElement> mblist = party3.ItemRoster.Where((ItemRosterElement x) => x.EquipmentElement.Item.IsMountable).ToMBList<ItemRosterElement>();
					mblist.Shuffle<ItemRosterElement>();
					Dictionary<ItemRosterElement, int> dictionary = new Dictionary<ItemRosterElement, int>();
					int num3 = 0;
					foreach (ItemRosterElement itemRosterElement in mblist)
					{
						int num4 = MathF.Min(itemRosterElement.Amount, 3 - num3);
						dictionary.Add(itemRosterElement, num4);
						num3 += num4;
						if (num3 == 3)
						{
							break;
						}
					}
					ItemRoster itemRoster = new ItemRoster(party3.ItemRoster);
					for (int j = 0; j < itemRoster.Count; j++)
					{
						ItemRosterElement itemRosterElement2 = itemRoster[j];
						if (!itemRosterElement2.EquipmentElement.Item.NotMerchandise && !itemRosterElement2.EquipmentElement.IsQuestItem && !itemRosterElement2.EquipmentElement.Item.IsBannerItem)
						{
							int num5;
							dictionary.TryGetValue(itemRosterElement2, out num5);
							int num6 = itemRosterElement2.Amount - num5;
							if (num6 > 0)
							{
								int num7 = MBRandom.RoundRandomized((float)num6 * num2);
								lootCollector.AddLootedItems(party3, itemRosterElement2.EquipmentElement, num7);
								party3.ItemRoster.AddToCounts(itemRosterElement2.EquipmentElement, -num6);
							}
						}
					}
				}
				else
				{
					ItemRoster itemRoster2 = new ItemRoster(party3.ItemRoster);
					for (int k = 0; k < itemRoster2.Count; k++)
					{
						ItemRosterElement itemRosterElement3 = itemRoster2[k];
						if (!itemRosterElement3.EquipmentElement.Item.NotMerchandise && !itemRosterElement3.EquipmentElement.IsQuestItem)
						{
							int num8 = MBRandom.RoundRandomized((float)itemRosterElement3.Amount * num2 * (itemRosterElement3.EquipmentElement.Item.IsMountable ? 0.33f : 1f));
							if (num8 > 0)
							{
								lootCollector.AddLootedItems(party3, itemRosterElement3.EquipmentElement, num8);
								party3.ItemRoster.AddToCounts(itemRosterElement3.EquipmentElement, -num8);
							}
						}
					}
				}
				lootCollector.CasualtiesInBattle.Add(mapEventParty2.DiedInBattle);
				lootCollector.CasualtiesInBattle.Add(mapEventParty2.WoundedInBattle);
				MapEventSide.OnPartyDefeated(party3);
			}
		}

		// Token: 0x0600292A RID: 10538 RVA: 0x000AFF90 File Offset: 0x000AE190
		private static void OnPartyDefeated(PartyBase defeatedParty)
		{
			if (!defeatedParty.IsMobile)
			{
				return;
			}
			defeatedParty.MobileParty.RecentEventsMorale += Campaign.Current.Models.PartyMoraleModel.GetDefeatMoraleChange(defeatedParty);
			if (defeatedParty.NumberOfHealthyMembers > 0 && (!defeatedParty.IsMobile || !defeatedParty.MobileParty.IsGarrison))
			{
				defeatedParty.MobileParty.Position2D = MobilePartyHelper.FindReachablePointAroundPosition(defeatedParty.MobileParty.Position2D, 4f, 3f);
				defeatedParty.MobileParty.Ai.ForceDefaultBehaviorUpdate();
			}
		}

		// Token: 0x0600292B RID: 10539 RVA: 0x000B0020 File Offset: 0x000AE220
		private static void CaptureWoundedTroops(LootCollector lootCollector, PartyBase defeatedParty, bool isSurrender, ref bool playerCaptured)
		{
			MapEventSide.CaptureRegularTroops(lootCollector, defeatedParty, isSurrender);
			if (defeatedParty == PartyBase.MainParty)
			{
				bool flag;
				MapEventSide.CaptureWoundedHeroesForMainParty(lootCollector, defeatedParty, isSurrender, out flag);
				if (flag)
				{
					playerCaptured = true;
				}
			}
			else if (defeatedParty.LeaderHero != null)
			{
				MapEventSide.CaptureWoundedHeroes(lootCollector, defeatedParty, isSurrender);
			}
			defeatedParty.MemberRoster.RemoveZeroCounts();
		}

		// Token: 0x0600292C RID: 10540 RVA: 0x000B006C File Offset: 0x000AE26C
		private static void CaptureWoundedHeroesForMainParty(LootCollector lootCollector, PartyBase defeatedParty, bool isSurrender, out bool playerCaptured)
		{
			playerCaptured = false;
			bool flag = false;
			if (defeatedParty != PartyBase.MainParty)
			{
				foreach (TroopRosterElement troopRosterElement in defeatedParty.MemberRoster.GetTroopRoster())
				{
					if (troopRosterElement.Character != null && troopRosterElement.Character.IsHero && !troopRosterElement.Character.HeroObject.IsWounded)
					{
						flag = true;
					}
				}
			}
			if (!flag || isSurrender)
			{
				playerCaptured = true;
				for (int i = 0; i < defeatedParty.MemberRoster.Count; i++)
				{
					TroopRosterElement elementCopyAtIndex = defeatedParty.MemberRoster.GetElementCopyAtIndex(i);
					if (elementCopyAtIndex.Character.IsHero)
					{
						if (elementCopyAtIndex.Character.HeroObject.DeathMark != KillCharacterAction.KillCharacterActionDetail.DiedInBattle)
						{
							defeatedParty.MemberRoster.AddToCountsAtIndex(i, -1, 0, 0, false);
							if (elementCopyAtIndex.Character.HeroObject != Hero.MainHero && MBRandom.RandomFloat < 0.5f)
							{
								MakeHeroFugitiveAction.Apply(elementCopyAtIndex.Character.HeroObject);
							}
							else if (!elementCopyAtIndex.Character.HeroObject.IsDead)
							{
								lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, 1, false, 0, 0, true, -1);
							}
							if (defeatedParty.LeaderHero == elementCopyAtIndex.Character.HeroObject && defeatedParty.IsMobile)
							{
								defeatedParty.MobileParty.RemovePartyLeader();
							}
						}
					}
					else if (elementCopyAtIndex.Number > 0)
					{
						defeatedParty.MemberRoster.AddToCountsAtIndex(i, -elementCopyAtIndex.Number, 0, 0, false);
						lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, elementCopyAtIndex.Number, false, 0, 0, true, -1);
					}
				}
			}
		}

		// Token: 0x0600292D RID: 10541 RVA: 0x000B022C File Offset: 0x000AE42C
		private static void CaptureRegularTroops(LootCollector lootCollector, PartyBase defeatedParty, bool isSurrender)
		{
			for (int i = 0; i < defeatedParty.MemberRoster.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = defeatedParty.MemberRoster.GetElementCopyAtIndex(i);
				if (!elementCopyAtIndex.Character.IsHero && (elementCopyAtIndex.WoundedNumber > 0 || (isSurrender && elementCopyAtIndex.Number > 0)))
				{
					int num = (isSurrender ? elementCopyAtIndex.Number : elementCopyAtIndex.WoundedNumber);
					lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, num, false, 0, 0, true, -1);
					defeatedParty.MemberRoster.AddToCountsAtIndex(i, -num, -elementCopyAtIndex.WoundedNumber, 0, false);
				}
			}
		}

		// Token: 0x0600292E RID: 10542 RVA: 0x000B02C8 File Offset: 0x000AE4C8
		private static void CaptureWoundedHeroes(LootCollector lootCollector, PartyBase defeatedParty, bool isSurrender)
		{
			if (defeatedParty.LeaderHero.IsWounded || isSurrender)
			{
				for (int i = 0; i < defeatedParty.MemberRoster.Count; i++)
				{
					TroopRosterElement elementCopyAtIndex = defeatedParty.MemberRoster.GetElementCopyAtIndex(i);
					if (elementCopyAtIndex.Character.IsHero)
					{
						if (elementCopyAtIndex.Character.HeroObject.DeathMark != KillCharacterAction.KillCharacterActionDetail.DiedInBattle)
						{
							lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, 1, false, 0, 0, true, -1);
							if (defeatedParty.LeaderHero == elementCopyAtIndex.Character.HeroObject && defeatedParty.IsMobile)
							{
								defeatedParty.MobileParty.RemovePartyLeader();
							}
							defeatedParty.MemberRoster.AddToCountsAtIndex(i, -1, 0, 0, false);
						}
					}
					else if (elementCopyAtIndex.Number > 0)
					{
						lootCollector.LootedMembers.AddToCounts(elementCopyAtIndex.Character, elementCopyAtIndex.Number, false, 0, 0, true, -1);
						defeatedParty.MemberRoster.AddToCountsAtIndex(i, -elementCopyAtIndex.Number, 0, 0, false);
					}
				}
			}
		}

		// Token: 0x0600292F RID: 10543 RVA: 0x000B03C4 File Offset: 0x000AE5C4
		public ItemRoster ItemRosterForPlayerLootShare(PartyBase playerParty)
		{
			int num = this._battleParties.FindIndexQ((MapEventParty p) => p.Party == playerParty);
			return this._battleParties[num].RosterToReceiveLootItems;
		}

		// Token: 0x06002930 RID: 10544 RVA: 0x000B0408 File Offset: 0x000AE608
		public TroopRoster MemberRosterForPlayerLootShare(PartyBase playerParty)
		{
			int num = this._battleParties.FindIndexQ((MapEventParty p) => p.Party == playerParty);
			return this._battleParties[num].RosterToReceiveLootMembers;
		}

		// Token: 0x06002931 RID: 10545 RVA: 0x000B044C File Offset: 0x000AE64C
		public TroopRoster PrisonerRosterForPlayerLootShare(PartyBase playerParty)
		{
			int num = this._battleParties.FindIndexQ((MapEventParty p) => p.Party == playerParty);
			return this._battleParties[num].RosterToReceiveLootPrisoners;
		}

		// Token: 0x06002932 RID: 10546 RVA: 0x000B048F File Offset: 0x000AE68F
		public void Clear()
		{
			this._battleParties.Clear();
		}

		// Token: 0x06002933 RID: 10547 RVA: 0x000B049C File Offset: 0x000AE69C
		public UniqueTroopDescriptor SelectRandomSimulationTroop()
		{
			this._selectedSimulationTroopIndex = MBRandom.RandomInt(this.NumRemainingSimulationTroops);
			this._selectedSimulationTroopDescriptor = this._simulationTroopList[this._selectedSimulationTroopIndex];
			this._selectedSimulationTroop = this.GetAllocatedTroop(this._selectedSimulationTroopDescriptor);
			return this._selectedSimulationTroopDescriptor;
		}

		// Token: 0x06002934 RID: 10548 RVA: 0x000B04EC File Offset: 0x000AE6EC
		private void RemoveSelectedTroopFromSimulationList()
		{
			this._simulationTroopList[this._selectedSimulationTroopIndex] = this._simulationTroopList[this._simulationTroopList.Count - 1];
			this._simulationTroopList.RemoveAt(this._simulationTroopList.Count - 1);
			this._selectedSimulationTroopIndex = -1;
			this._selectedSimulationTroopDescriptor = UniqueTroopDescriptor.Invalid;
			this._selectedSimulationTroop = null;
		}

		// Token: 0x06002935 RID: 10549 RVA: 0x000B0554 File Offset: 0x000AE754
		internal bool ApplySimulationDamageToSelectedTroop(int damage, DamageTypes damageType, PartyBase strikerParty)
		{
			bool flag = false;
			if (this._selectedSimulationTroop.IsHero)
			{
				this.AddHeroDamage(this._selectedSimulationTroop.HeroObject, damage);
				if (this._selectedSimulationTroop.HeroObject.IsWounded)
				{
					PartyHealingModel partyHealingModel = Campaign.Current.Models.PartyHealingModel;
					MobileParty partyBelongedTo = this._selectedSimulationTroop.HeroObject.PartyBelongedTo;
					float survivalChance = partyHealingModel.GetSurvivalChance(((partyBelongedTo != null) ? partyBelongedTo.Party : null) ?? null, this._selectedSimulationTroop, damageType, strikerParty);
					if (MBRandom.RandomFloat > survivalChance && this._selectedSimulationTroop.HeroObject.CanDie(KillCharacterAction.KillCharacterActionDetail.DiedInBattle))
					{
						this.OnTroopKilled(this._selectedSimulationTroopDescriptor);
						IBattleObserver battleObserver = this.BattleObserver;
						if (battleObserver != null)
						{
							battleObserver.TroopNumberChanged(this.MissionSide, this.GetAllocatedTroopParty(this._selectedSimulationTroopDescriptor), this._selectedSimulationTroop, -1, 1, 0, 0, 0, 0);
						}
						KillCharacterAction.ApplyByBattle(this._selectedSimulationTroop.HeroObject, null, false);
					}
					else
					{
						this.OnTroopWounded(this._selectedSimulationTroopDescriptor);
						IBattleObserver battleObserver2 = this.BattleObserver;
						if (battleObserver2 != null)
						{
							battleObserver2.TroopNumberChanged(this.MissionSide, this.GetAllocatedTroopParty(this._selectedSimulationTroopDescriptor), this._selectedSimulationTroop, -1, 0, 1, 0, 0, 0);
						}
					}
					flag = true;
				}
			}
			else if (MBRandom.RandomInt(this._selectedSimulationTroop.MaxHitPoints()) < damage)
			{
				PartyBase party = this._allocatedTroops[this._selectedSimulationTroopDescriptor].Party;
				float survivalChance2 = Campaign.Current.Models.PartyHealingModel.GetSurvivalChance(party, this._selectedSimulationTroop, damageType, strikerParty);
				if (MBRandom.RandomFloat < survivalChance2)
				{
					this.OnTroopWounded(this._selectedSimulationTroopDescriptor);
					IBattleObserver battleObserver3 = this.BattleObserver;
					if (battleObserver3 != null)
					{
						battleObserver3.TroopNumberChanged(this.MissionSide, this.GetAllocatedTroopParty(this._selectedSimulationTroopDescriptor), this._selectedSimulationTroop, -1, 0, 1, 0, 0, 0);
					}
					SkillLevelingManager.OnSurgeryApplied(party.MobileParty, true, this._selectedSimulationTroop.Tier);
					if (((strikerParty != null) ? strikerParty.MobileParty : null) != null && strikerParty.MobileParty.HasPerk(DefaultPerks.Medicine.DoctorsOath, false))
					{
						SkillLevelingManager.OnSurgeryApplied(strikerParty.MobileParty, true, this._selectedSimulationTroop.Tier);
					}
				}
				else
				{
					this.OnTroopKilled(this._selectedSimulationTroopDescriptor);
					IBattleObserver battleObserver4 = this.BattleObserver;
					if (battleObserver4 != null)
					{
						battleObserver4.TroopNumberChanged(this.MissionSide, this.GetAllocatedTroopParty(this._selectedSimulationTroopDescriptor), this._selectedSimulationTroop, -1, 1, 0, 0, 0, 0);
					}
					SkillLevelingManager.OnSurgeryApplied(party.MobileParty, false, this._selectedSimulationTroop.Tier);
					if (((strikerParty != null) ? strikerParty.MobileParty : null) != null && strikerParty.MobileParty.HasPerk(DefaultPerks.Medicine.DoctorsOath, false))
					{
						SkillLevelingManager.OnSurgeryApplied(strikerParty.MobileParty, false, this._selectedSimulationTroop.Tier);
					}
				}
				flag = true;
			}
			if (flag)
			{
				this.RemoveSelectedTroopFromSimulationList();
			}
			return flag;
		}

		// Token: 0x06002936 RID: 10550 RVA: 0x000B0808 File Offset: 0x000AEA08
		public void ApplySimulatedHitRewardToSelectedTroop(CharacterObject strikerTroop, CharacterObject attackedTroop, int damage, bool isFinishingStrike)
		{
			EquipmentElement equipmentElement = strikerTroop.FirstBattleEquipment[EquipmentIndex.WeaponItemBeginSlot];
			UniqueTroopDescriptor selectedSimulationTroopDescriptor = this._selectedSimulationTroopDescriptor;
			bool flag = false;
			ItemObject item = equipmentElement.Item;
			this.OnTroopScoreHit(selectedSimulationTroopDescriptor, attackedTroop, damage, isFinishingStrike, flag, (item != null) ? item.PrimaryWeapon : null, true);
			PartyBase party = this._allocatedTroops[this._selectedSimulationTroopDescriptor].Party;
			if (isFinishingStrike && (!attackedTroop.IsHero || !attackedTroop.HeroObject.IsDead))
			{
				SkillLevelingManager.OnSimulationCombatKill(this._selectedSimulationTroop, attackedTroop, party, this.LeaderParty);
			}
			if (this.BattleObserver != null)
			{
				if (isFinishingStrike)
				{
					this.BattleObserver.TroopNumberChanged(this.MissionSide, party, this._selectedSimulationTroop, 0, 0, 0, 0, 1, 0);
				}
				if (this._selectedSimulationTroop.IsHero)
				{
					using (List<SkillObject>.Enumerator enumerator = this._troopUpgradeTracker.CheckSkillUpgrades(this._selectedSimulationTroop.HeroObject).ToList<SkillObject>().GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							SkillObject skillObject = enumerator.Current;
							this.BattleObserver.HeroSkillIncreased(this.MissionSide, party, this._selectedSimulationTroop, skillObject);
						}
						return;
					}
				}
				int num = this._troopUpgradeTracker.CheckUpgradedCount(party, this._selectedSimulationTroop);
				if (num != 0)
				{
					this.BattleObserver.TroopNumberChanged(this.MissionSide, party, this._selectedSimulationTroop, 0, 0, 0, 0, 0, num);
				}
			}
		}

		// Token: 0x06002937 RID: 10551 RVA: 0x000B0968 File Offset: 0x000AEB68
		public void Surrender()
		{
			MapEventSide.SurrenderParty(this.LeaderParty);
			this.IsSurrendered = true;
		}

		// Token: 0x06002938 RID: 10552 RVA: 0x000B097C File Offset: 0x000AEB7C
		private static void SurrenderParty(PartyBase party)
		{
			for (int i = 0; i < party.MemberRoster.Count; i++)
			{
				TroopRosterElement elementCopyAtIndex = party.MemberRoster.GetElementCopyAtIndex(i);
				if (!elementCopyAtIndex.Character.IsHero)
				{
					party.MemberRoster.AddToCountsAtIndex(i, 0, elementCopyAtIndex.Number - elementCopyAtIndex.WoundedNumber, 0, true);
				}
			}
		}

		// Token: 0x06002939 RID: 10553 RVA: 0x000B09D8 File Offset: 0x000AEBD8
		internal void AddNearbyPartyToPlayerMapEvent(MobileParty party)
		{
			if (party.MapEventSide != this)
			{
				party.MapEventSide = this;
				this._nearbyPartiesAddedToPlayerMapEvent.Add(party);
				CampaignEventDispatcher.Instance.OnNearbyPartyAddedToPlayerMapEvent(party);
			}
		}

		// Token: 0x0600293A RID: 10554 RVA: 0x000B0A04 File Offset: 0x000AEC04
		internal void RemoveNearbyPartiesFromPlayerMapEvent()
		{
			foreach (MobileParty mobileParty in this._nearbyPartiesAddedToPlayerMapEvent)
			{
				mobileParty.MapEventSide = null;
			}
			this._nearbyPartiesAddedToPlayerMapEvent.Clear();
		}

		// Token: 0x04000C6F RID: 3183
		[CachedData]
		private List<ValueTuple<FlattenedTroopRosterElement, MapEventParty, float>> _readyTroopsPriorityList;

		// Token: 0x04000C70 RID: 3184
		[CachedData]
		private Dictionary<UniqueTroopDescriptor, MapEventParty> _readyTroopsTemporaryCache;

		// Token: 0x04000C71 RID: 3185
		[CachedData]
		private bool _requiresTroopCacheUpdate;

		// Token: 0x04000C72 RID: 3186
		[CachedData]
		private Dictionary<UniqueTroopDescriptor, MapEventParty> _allocatedTroops;

		// Token: 0x04000C74 RID: 3188
		[SaveableField(30)]
		private readonly MBList<MapEventParty> _battleParties;

		// Token: 0x04000C76 RID: 3190
		[SaveableField(9)]
		public float StrengthRatio = 1f;

		// Token: 0x04000C77 RID: 3191
		[SaveableField(10)]
		public float RenownValue;

		// Token: 0x04000C78 RID: 3192
		[SaveableField(11)]
		public float InfluenceValue;

		// Token: 0x04000C79 RID: 3193
		[SaveableField(14)]
		public int Casualties;

		// Token: 0x04000C7B RID: 3195
		[SaveableField(16)]
		private readonly MapEvent _mapEvent;

		// Token: 0x04000C7C RID: 3196
		[CachedData]
		private List<UniqueTroopDescriptor> _simulationTroopList;

		// Token: 0x04000C7D RID: 3197
		[SaveableField(130)]
		private IFaction _mapFaction;

		// Token: 0x04000C7E RID: 3198
		[SaveableField(23)]
		private int _selectedSimulationTroopIndex;

		// Token: 0x04000C7F RID: 3199
		[SaveableField(24)]
		private UniqueTroopDescriptor _selectedSimulationTroopDescriptor;

		// Token: 0x04000C80 RID: 3200
		[SaveableField(25)]
		private CharacterObject _selectedSimulationTroop;

		// Token: 0x04000C81 RID: 3201
		private TroopUpgradeTracker _troopUpgradeTracker;

		// Token: 0x04000C82 RID: 3202
		[SaveableField(26)]
		internal bool IsSurrendered;

		// Token: 0x04000C83 RID: 3203
		[SaveableField(27)]
		private List<MobileParty> _nearbyPartiesAddedToPlayerMapEvent = new List<MobileParty>();
	}
}
