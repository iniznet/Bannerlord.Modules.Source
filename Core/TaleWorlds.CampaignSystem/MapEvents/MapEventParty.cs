using System;
using System.Collections.Generic;
using Helpers;
using TaleWorlds.CampaignSystem.CharacterDevelopment;
using TaleWorlds.CampaignSystem.ComponentInterfaces;
using TaleWorlds.CampaignSystem.Encounters;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.CampaignSystem.MapEvents
{
	public class MapEventParty
	{
		internal static void AutoGeneratedStaticCollectObjectsMapEventParty(object o, List<object> collectedObjects)
		{
			((MapEventParty)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._roster);
			collectedObjects.Add(this._woundedInBattle);
			collectedObjects.Add(this._diedInBattle);
			collectedObjects.Add(this.Party);
		}

		internal static object AutoGeneratedGetMemberValueParty(object o)
		{
			return ((MapEventParty)o).Party;
		}

		internal static object AutoGeneratedGetMemberValueGainedRenown(object o)
		{
			return ((MapEventParty)o).GainedRenown;
		}

		internal static object AutoGeneratedGetMemberValueGainedInfluence(object o)
		{
			return ((MapEventParty)o).GainedInfluence;
		}

		internal static object AutoGeneratedGetMemberValueMoraleChange(object o)
		{
			return ((MapEventParty)o).MoraleChange;
		}

		internal static object AutoGeneratedGetMemberValuePlunderedGold(object o)
		{
			return ((MapEventParty)o).PlunderedGold;
		}

		internal static object AutoGeneratedGetMemberValueGoldLost(object o)
		{
			return ((MapEventParty)o).GoldLost;
		}

		internal static object AutoGeneratedGetMemberValue_roster(object o)
		{
			return ((MapEventParty)o)._roster;
		}

		internal static object AutoGeneratedGetMemberValue_contributionToBattle(object o)
		{
			return ((MapEventParty)o)._contributionToBattle;
		}

		internal static object AutoGeneratedGetMemberValue_healthyManCountAtStart(object o)
		{
			return ((MapEventParty)o)._healthyManCountAtStart;
		}

		internal static object AutoGeneratedGetMemberValue_woundedInBattle(object o)
		{
			return ((MapEventParty)o)._woundedInBattle;
		}

		internal static object AutoGeneratedGetMemberValue_diedInBattle(object o)
		{
			return ((MapEventParty)o)._diedInBattle;
		}

		[SaveableProperty(1)]
		public PartyBase Party { get; private set; }

		public int HealthyManCountAtStart
		{
			get
			{
				return this._healthyManCountAtStart;
			}
		}

		internal TroopRoster DiedInBattle
		{
			get
			{
				return this._diedInBattle;
			}
		}

		internal TroopRoster WoundedInBattle
		{
			get
			{
				return this._woundedInBattle;
			}
		}

		public int ContributionToBattle
		{
			get
			{
				return this._contributionToBattle;
			}
		}

		internal void ResetContributionToBattleToStrength()
		{
			this._contributionToBattle = (int)MathF.Sqrt(this.Party.TotalStrength);
		}

		public FlattenedTroopRoster Troops
		{
			get
			{
				return this._roster;
			}
		}

		internal MapEventParty(PartyBase party)
		{
			this.Party = party;
			this.Update();
			this._healthyManCountAtStart = party.NumberOfHealthyMembers;
		}

		public void Update()
		{
			if (this._roster == null)
			{
				this._roster = new FlattenedTroopRoster(this.Party.MemberRoster.TotalManCount);
			}
			this._roster.Clear();
			foreach (TroopRosterElement troopRosterElement in this.Party.MemberRoster.GetTroopRoster())
			{
				if (troopRosterElement.Character.IsHero)
				{
					if (!this._woundedInBattle.Contains(troopRosterElement.Character) && !this._diedInBattle.Contains(troopRosterElement.Character))
					{
						this._roster.Add(troopRosterElement.Character, troopRosterElement.Character.HeroObject.IsWounded, troopRosterElement.Xp);
					}
				}
				else
				{
					this._roster.Add(troopRosterElement.Character, troopRosterElement.Number, troopRosterElement.WoundedNumber);
				}
			}
		}

		public bool IsNpcParty
		{
			get
			{
				return this.Party != PartyBase.MainParty;
			}
		}

		public TroopRoster RosterToReceiveLootMembers
		{
			get
			{
				if (!this.IsNpcParty)
				{
					return PlayerEncounter.Current.RosterToReceiveLootMembers;
				}
				return this.Party.MemberRoster;
			}
		}

		public TroopRoster RosterToReceiveLootPrisoners
		{
			get
			{
				if (!this.IsNpcParty)
				{
					return PlayerEncounter.Current.RosterToReceiveLootPrisoners;
				}
				return this.Party.PrisonRoster;
			}
		}

		public ItemRoster RosterToReceiveLootItems
		{
			get
			{
				if (!this.IsNpcParty)
				{
					return PlayerEncounter.Current.RosterToReceiveLootItems;
				}
				return this.Party.ItemRoster;
			}
		}

		[SaveableProperty(7)]
		public float GainedRenown { get; set; }

		[SaveableProperty(8)]
		public float GainedInfluence { get; set; }

		[SaveableProperty(9)]
		public float MoraleChange { get; set; }

		[SaveableProperty(10)]
		public int PlunderedGold { get; set; }

		[SaveableProperty(11)]
		public int GoldLost { get; set; }

		public void OnTroopKilled(UniqueTroopDescriptor troopSeed)
		{
			FlattenedTroopRosterElement flattenedTroopRosterElement = this._roster[troopSeed];
			CharacterObject troop = flattenedTroopRosterElement.Troop;
			this.Party.MemberRoster.AddTroopTempXp(troop, -flattenedTroopRosterElement.XpGained);
			if (!troop.IsHero && this.Party.IsActive)
			{
				this.Party.MemberRoster.RemoveTroop(troop, 1, troopSeed, 0);
			}
			this._roster.OnTroopKilled(troopSeed);
			this.DiedInBattle.AddToCounts(this._roster[troopSeed].Troop, 1, false, 0, 0, true, -1);
			this._contributionToBattle++;
		}

		public void OnTroopWounded(UniqueTroopDescriptor troopSeed)
		{
			this.Party.MemberRoster.WoundTroop(this._roster[troopSeed].Troop, 1, troopSeed);
			this._roster.OnTroopWounded(troopSeed);
			this.WoundedInBattle.AddToCounts(this._roster[troopSeed].Troop, 1, false, 1, 0, true, -1);
		}

		public void OnTroopRouted(UniqueTroopDescriptor troopSeed)
		{
		}

		public CharacterObject GetTroop(UniqueTroopDescriptor troopSeed)
		{
			return this._roster[troopSeed].Troop;
		}

		public void OnTroopScoreHit(UniqueTroopDescriptor attackerTroopDesc, CharacterObject attackedTroop, int damage, bool isFatal, bool isTeamKill, WeaponComponentData attackerWeapon, bool isSimulatedHit)
		{
			CharacterObject troop = this._roster[attackerTroopDesc].Troop;
			if (!isTeamKill)
			{
				int num;
				Campaign.Current.Models.CombatXpModel.GetXpFromHit(troop, null, attackedTroop, this.Party, damage, isFatal, isSimulatedHit ? CombatXpModel.MissionTypeEnum.SimulationBattle : CombatXpModel.MissionTypeEnum.Battle, out num);
				num += MBRandom.RoundRandomized((float)num);
				if (!troop.IsHero)
				{
					if (num > 0)
					{
						int num2 = this._roster.OnTroopGainXp(attackerTroopDesc, num);
						this.Party.MemberRoster.AddTroopTempXp(troop, num2);
					}
				}
				else
				{
					CampaignEventDispatcher.Instance.OnHeroCombatHit(troop, attackedTroop, this.Party, attackerWeapon, isFatal, num);
				}
				this._contributionToBattle += num;
			}
		}

		public void CommitXpGain()
		{
			if (this.Party.MobileParty == null)
			{
				return;
			}
			int num = 0;
			foreach (FlattenedTroopRosterElement flattenedTroopRosterElement in this._roster)
			{
				CharacterObject troop = flattenedTroopRosterElement.Troop;
				int num2;
				if (!flattenedTroopRosterElement.IsKilled && flattenedTroopRosterElement.XpGained > 0 && MobilePartyHelper.CanTroopGainXp(this.Party, troop, out num2))
				{
					int num3 = Campaign.Current.Models.PartyTrainingModel.CalculateXpGainFromBattles(flattenedTroopRosterElement, this.Party);
					int num4 = Campaign.Current.Models.PartyTrainingModel.GenerateSharedXp(troop, num3, this.Party.MobileParty);
					if (num4 > 0)
					{
						num += num4;
						num3 -= num4;
					}
					if (!troop.IsHero)
					{
						this.Party.MemberRoster.AddXpToTroop(num3, troop);
					}
				}
			}
			MobilePartyHelper.PartyAddSharedXp(this.Party.MobileParty, (float)num);
			SkillLevelingManager.OnBattleEnd(this.Party, this._roster);
		}

		[SaveableField(2)]
		private FlattenedTroopRoster _roster;

		[SaveableField(3)]
		private int _contributionToBattle = 1;

		[SaveableField(9)]
		private int _healthyManCountAtStart = 1;

		[SaveableField(7)]
		private TroopRoster _woundedInBattle = TroopRoster.CreateDummyTroopRoster();

		[SaveableField(8)]
		private TroopRoster _diedInBattle = TroopRoster.CreateDummyTroopRoster();
	}
}
