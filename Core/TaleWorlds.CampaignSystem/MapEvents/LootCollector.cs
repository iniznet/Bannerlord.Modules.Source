using System;
using System.Collections.Generic;
using System.Linq;
using Helpers;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem.Roster;
using TaleWorlds.Core;
using TaleWorlds.Library;

namespace TaleWorlds.CampaignSystem.MapEvents
{
	internal class LootCollector
	{
		internal static void AutoGeneratedStaticCollectObjectsLootCollector(object o, List<object> collectedObjects)
		{
			((LootCollector)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		internal TroopRoster LootedMembers { get; private set; }

		internal TroopRoster LootedPrisoners { get; private set; }

		internal Dictionary<PartyBase, ItemRoster> LootedItems { get; private set; }

		public TroopRoster CasualtiesInBattle { get; private set; }

		internal LootCollector()
		{
			this.LootedMembers = TroopRoster.CreateDummyTroopRoster();
			this.LootedPrisoners = TroopRoster.CreateDummyTroopRoster();
			this.LootedItems = new Dictionary<PartyBase, ItemRoster>();
			this.CasualtiesInBattle = TroopRoster.CreateDummyTroopRoster();
		}

		internal void AddLootedItems(PartyBase lootedParty, EquipmentElement equipmentElement, int number)
		{
			ItemRoster itemRoster;
			if (this.LootedItems.TryGetValue(lootedParty, out itemRoster))
			{
				itemRoster.AddToCounts(equipmentElement, number);
				return;
			}
			ItemRoster itemRoster2 = new ItemRoster();
			itemRoster2.AddToCounts(equipmentElement, number);
			this.LootedItems.Add(lootedParty, itemRoster2);
		}

		public void MakeRemainingPrisonerHeroesEscape()
		{
			foreach (TroopRosterElement troopRosterElement in this.LootedMembers.RemoveIf((TroopRosterElement lordElement) => lordElement.Character.IsHero && !lordElement.Character.HeroObject.IsHumanPlayerCharacter && !lordElement.Character.HeroObject.CanBecomePrisoner()))
			{
				MakeHeroFugitiveAction.Apply(troopRosterElement.Character.HeroObject);
			}
		}

		internal void MakeFreedHeroesEscape(TroopRoster freedTroops, bool wonByPlayer = false)
		{
			for (int i = freedTroops.Count - 1; i >= 0; i--)
			{
				CharacterObject characterAtIndex = freedTroops.GetCharacterAtIndex(i);
				if (characterAtIndex.IsHero && !wonByPlayer)
				{
					if (!characterAtIndex.IsPlayerCharacter)
					{
						EndCaptivityAction.ApplyByReleasedAfterBattle(characterAtIndex.HeroObject);
					}
					freedTroops.RemoveTroop(characterAtIndex, 1, default(UniqueTroopDescriptor), 0);
				}
			}
		}

		internal void GiveShareOfLootToParty(TroopRoster memberRoster, TroopRoster prisonerRoster, ItemRoster itemRoster, PartyBase winnerParty, float lootAmount, MapEvent mapEvent)
		{
			bool flag = winnerParty == PartyBase.MainParty;
			List<TroopRosterElement> list = new List<TroopRosterElement>((int)((float)this.LootedMembers.TotalManCount * MathF.Min(lootAmount * 1.3f, 1f)));
			foreach (TroopRosterElement troopRosterElement in this.LootedMembers.GetTroopRoster())
			{
				int number = troopRosterElement.Number;
				CharacterObject character = troopRosterElement.Character;
				if (character.IsPlayerCharacter)
				{
					TroopRosterElement troopRosterElement2 = new TroopRosterElement(character)
					{
						Number = 1,
						WoundedNumber = 1
					};
					list.Add(troopRosterElement2);
				}
				else
				{
					for (int i = 0; i < number; i++)
					{
						if (MBRandom.RandomFloat < lootAmount)
						{
							TroopRosterElement troopRosterElement3 = new TroopRosterElement(character)
							{
								Number = 1,
								WoundedNumber = 1
							};
							list.Add(troopRosterElement3);
						}
					}
				}
			}
			foreach (TroopRosterElement troopRosterElement4 in list)
			{
				this.LootedMembers.AddToCounts(troopRosterElement4.Character, -1, false, 0, 0, true, -1);
			}
			foreach (TroopRosterElement troopRosterElement5 in list)
			{
				if (troopRosterElement5.Character.IsHero)
				{
					if (!flag && winnerParty.IsMobile)
					{
						TakePrisonerAction.Apply(winnerParty, troopRosterElement5.Character.HeroObject);
					}
					else
					{
						prisonerRoster.AddToCounts(troopRosterElement5.Character, troopRosterElement5.Number, false, 0, 0, true, -1);
					}
				}
				else
				{
					prisonerRoster.AddToCounts(troopRosterElement5.Character, troopRosterElement5.Number, false, 0, 0, true, -1);
				}
			}
			float partySavePrisonerAsMemberShareProbability = Campaign.Current.Models.BattleRewardModel.GetPartySavePrisonerAsMemberShareProbability(winnerParty, lootAmount);
			int num = (winnerParty.IsMobile ? winnerParty.MobileParty.LimitedPartySize : winnerParty.PartySizeLimit);
			if (partySavePrisonerAsMemberShareProbability > 0f)
			{
				for (int j = this.LootedPrisoners.Count - 1; j >= 0; j--)
				{
					int elementNumber = this.LootedPrisoners.GetElementNumber(j);
					CharacterObject characterAtIndex = this.LootedPrisoners.GetCharacterAtIndex(j);
					int num2 = 0;
					for (int k = 0; k < elementNumber; k++)
					{
						if ((!characterAtIndex.IsHero || !characterAtIndex.HeroObject.IsReleased) && MBRandom.RandomFloat < partySavePrisonerAsMemberShareProbability && (flag || elementNumber + memberRoster.TotalManCount <= num))
						{
							if (characterAtIndex.IsHero && !flag)
							{
								EndCaptivityAction.ApplyByReleasedAfterBattle(characterAtIndex.HeroObject);
							}
							else
							{
								memberRoster.AddToCounts(characterAtIndex, 1, false, 0, 0, true, -1);
							}
							num2++;
						}
					}
					if (num2 > 0)
					{
						this.LootedPrisoners.AddToCounts(characterAtIndex, -num2, false, 0, 0, true, -1);
					}
				}
			}
			MBList<TroopRosterElement> mblist = new MBList<TroopRosterElement>();
			for (int l = this.CasualtiesInBattle.Count - 1; l >= 0; l--)
			{
				int elementNumber2 = this.CasualtiesInBattle.GetElementNumber(l);
				CharacterObject characterAtIndex2 = this.CasualtiesInBattle.GetCharacterAtIndex(l);
				int num3 = 0;
				TroopRosterElement troopRosterElement6 = new TroopRosterElement(characterAtIndex2);
				for (int m = 0; m < elementNumber2; m++)
				{
					if (MBRandom.RandomFloat < lootAmount)
					{
						mblist.Add(troopRosterElement6);
						num3++;
					}
				}
				if (num3 > 0)
				{
					this.CasualtiesInBattle.AddToCounts(characterAtIndex2, -num3, false, 0, 0, true, -1);
				}
			}
			ItemRoster itemRoster2 = new ItemRoster();
			CampaignEventDispatcher.Instance.CollectLoots(mapEvent, winnerParty, this.LootedItems, itemRoster2, mblist, lootAmount);
			for (int n = 0; n < itemRoster2.Count; n++)
			{
				itemRoster.Add(itemRoster2[n]);
			}
			CampaignEventDispatcher.Instance.OnLootDistributedToParty(mapEvent, winnerParty, this.LootedItems);
			ExplainedNumber explainedNumber = new ExplainedNumber(1f, false, null);
			if (winnerParty.IsMobile)
			{
				CharacterObject effectivePartyLeaderForSkill = SkillHelper.GetEffectivePartyLeaderForSkill(winnerParty);
				if (effectivePartyLeaderForSkill != null)
				{
					SkillHelper.AddSkillBonusForCharacter(DefaultSkills.Roguery, DefaultSkillEffects.RogueryLootBonus, effectivePartyLeaderForSkill, ref explainedNumber, -1, true, 0);
				}
			}
			if (winnerParty == PartyBase.MainParty)
			{
				IEnumerable<ItemRosterElement> enumerable = this.LootCasualties(mblist, explainedNumber.ResultNumber);
				itemRoster.Add(enumerable);
				return;
			}
			if (winnerParty.LeaderHero != null)
			{
				int num4 = MathF.Round((float)this.LootCasualtiesToGold(mblist, explainedNumber.ResultNumber) * explainedNumber.ResultNumber);
				num4 = (int)((float)num4 * Campaign.Current.Models.BattleRewardModel.GetAITradePenalty());
				winnerParty.LeaderHero.Gold += num4;
			}
		}

		private IEnumerable<ItemRosterElement> LootCasualties(ICollection<TroopRosterElement> shareFromCasualties, float lootFactor)
		{
			ItemRoster itemRoster = new ItemRoster();
			List<EquipmentElement> list = new List<EquipmentElement>();
			foreach (TroopRosterElement troopRosterElement in shareFromCasualties)
			{
				for (int i = 0; i < 1; i++)
				{
					list.Clear();
					int num = MBRandom.RoundRandomized(lootFactor);
					for (int j = 0; j < num; j++)
					{
						float num2 = Campaign.Current.Models.BattleRewardModel.GetExpectedLootedItemValue(troopRosterElement.Character);
						num2 *= MBRandom.RandomFloatRanged(0.75f, 1.25f);
						EquipmentElement lootedItem = Campaign.Current.Models.BattleRewardModel.GetLootedItemFromTroop(troopRosterElement.Character, num2);
						if (lootedItem.Item != null && !lootedItem.Item.NotMerchandise && list.Count((EquipmentElement x) => x.Item.Type == lootedItem.Item.Type) == 0)
						{
							itemRoster.AddToCounts(lootedItem, 1);
						}
					}
				}
			}
			return itemRoster;
		}

		private int LootCasualtiesToGold(ICollection<TroopRosterElement> shareFromCasualties, float lootFactor)
		{
			float num = 0f;
			foreach (TroopRosterElement troopRosterElement in shareFromCasualties)
			{
				num += Campaign.Current.Models.BattleRewardModel.GetExpectedLootedItemValue(troopRosterElement.Character) * lootFactor;
			}
			return (int)num;
		}
	}
}
