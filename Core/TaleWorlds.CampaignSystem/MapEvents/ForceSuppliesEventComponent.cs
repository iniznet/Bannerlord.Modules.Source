using System;
using System.Collections.Generic;
using TaleWorlds.CampaignSystem.Actions;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.Core;

namespace TaleWorlds.CampaignSystem.MapEvents
{
	public class ForceSuppliesEventComponent : MapEventComponent
	{
		internal static void AutoGeneratedStaticCollectObjectsForceSuppliesEventComponent(object o, List<object> collectedObjects)
		{
			((ForceSuppliesEventComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected ForceSuppliesEventComponent(MapEvent mapEvent)
			: base(mapEvent)
		{
		}

		public static ForceSuppliesEventComponent CreateForceSuppliesEvent(PartyBase attackerParty, PartyBase defenderParty)
		{
			MapEvent mapEvent = new MapEvent();
			ForceSuppliesEventComponent forceSuppliesEventComponent = new ForceSuppliesEventComponent(mapEvent);
			mapEvent.Initialize(attackerParty, defenderParty, forceSuppliesEventComponent, MapEvent.BattleTypes.IsForcingSupplies);
			Campaign.Current.MapEventManager.OnMapEventCreated(mapEvent);
			return forceSuppliesEventComponent;
		}

		public static ForceSuppliesEventComponent CreateComponentForOldSaves(MapEvent mapEvent)
		{
			return new ForceSuppliesEventComponent(mapEvent);
		}

		protected override void OnInitialize()
		{
			ChangeVillageStateAction.ApplyBySettingToBeingForcedForSupplies(base.MapEvent.MapEventSettlement, base.MapEvent.AttackerSide.LeaderParty.MobileParty);
		}

		protected override void OnFinalize()
		{
			CampaignEventDispatcher.Instance.ForceSuppliesCompleted((base.MapEvent.BattleState == BattleState.AttackerVictory) ? BattleSideEnum.Attacker : BattleSideEnum.Defender, this);
			ChangeVillageStateAction.ApplyBySettingToNormal(base.MapEvent.MapEventSettlement);
		}
	}
}
