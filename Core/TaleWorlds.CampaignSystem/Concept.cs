using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Core;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.CampaignSystem
{
	public class Concept : MBObjectBase
	{
		internal static void AutoGeneratedStaticCollectObjectsConcept(object o, List<object> collectedObjects)
		{
			((Concept)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public TextObject Title { get; set; }

		public TextObject Description { get; set; }

		public string FilterGroup { get; set; }

		public string LinkID { get; private set; }

		public static MBReadOnlyList<Concept> All
		{
			get
			{
				return Campaign.Current.Concepts;
			}
		}

		public string EncyclopediaLink
		{
			get
			{
				return Campaign.Current.EncyclopediaManager.GetIdentifier(typeof(Concept)) + "-" + base.StringId;
			}
		}

		public TextObject EncyclopediaLinkWithName
		{
			get
			{
				return HyperlinkTexts.GetConceptHyperlinkText(this.EncyclopediaLink, this.Title);
			}
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Title = new TextObject(node.Attributes["title"].Value, null);
			this.Description = new TextObject(node.Attributes["text"].Value, null);
			this.FilterGroup = ((node.Attributes["group"] != null) ? node.Attributes["group"].Value : "");
			this.LinkID = node.Attributes["link_id"].Value;
		}

		public static bool IsGroupMember(string groupName, Concept c)
		{
			return c.FilterGroup == groupName;
		}

		public static void SetConceptTextLinks()
		{
			foreach (Concept concept in Concept.All)
			{
				MBTextManager.SetTextVariable(concept.LinkID, concept.EncyclopediaLinkWithName, false);
			}
		}
	}
}
