using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using TaleWorlds.Library;

namespace TaleWorlds.DotNet
{
	// Token: 0x0200001F RID: 31
	public static class Managed
	{
		// Token: 0x1700000D RID: 13
		// (get) Token: 0x06000070 RID: 112 RVA: 0x00002E01 File Offset: 0x00001001
		// (set) Token: 0x06000071 RID: 113 RVA: 0x00002E08 File Offset: 0x00001008
		internal static bool Closing { get; private set; } = false;

		// Token: 0x1700000E RID: 14
		// (get) Token: 0x06000072 RID: 114 RVA: 0x00002E10 File Offset: 0x00001010
		internal static Dictionary<string, Type> ModuleTypes
		{
			get
			{
				return Managed._moduleTypes;
			}
		}

		// Token: 0x1700000F RID: 15
		// (get) Token: 0x06000073 RID: 115 RVA: 0x00002E17 File Offset: 0x00001017
		// (set) Token: 0x06000074 RID: 116 RVA: 0x00002E1E File Offset: 0x0000101E
		internal static NativeTelemetryManager NativeTelemetryManager { get; private set; } = new NativeTelemetryManager();

		// Token: 0x06000075 RID: 117 RVA: 0x00002E28 File Offset: 0x00001028
		static Managed()
		{
			Debug.TelemetryManager = Managed.NativeTelemetryManager;
		}

		// Token: 0x17000010 RID: 16
		// (get) Token: 0x06000076 RID: 118 RVA: 0x00002EAB File Offset: 0x000010AB
		public static string ManagedCallbacksDll
		{
			get
			{
				return ManagedDllFolder.Name + "TaleWorlds.DotNet.AutoGenerated.dll";
			}
		}

		// Token: 0x06000077 RID: 119 RVA: 0x00002EBC File Offset: 0x000010BC
		[LibraryCallback]
		internal static void SetLogsFolder(string logFolder)
		{
		}

		// Token: 0x06000078 RID: 120 RVA: 0x00002EC0 File Offset: 0x000010C0
		[LibraryCallback]
		public static string GetStackTraceStr(int skipCount = 0)
		{
			string text = new StackTrace(skipCount, true).ToString();
			text = text.Replace("\r", "");
			text = text.Replace("   ", "");
			if (text.Length >= 16)
			{
				return text;
			}
			return "";
		}

		// Token: 0x06000079 RID: 121 RVA: 0x00002F0D File Offset: 0x0000110D
		[LibraryCallback]
		public static string GetStackTraceRaw(int skipCount = 0)
		{
			return Managed.GetStackTraceRaw(new StackTrace(0, false), skipCount);
		}

		// Token: 0x0600007A RID: 122 RVA: 0x00002F1C File Offset: 0x0000111C
		public static string GetStackTraceRaw(StackTrace stack, int skipCount = 0)
		{
			MBStringBuilder mbstringBuilder = default(MBStringBuilder);
			mbstringBuilder.Initialize(16, "GetStackTraceRaw");
			for (int i = 0; i < stack.FrameCount; i++)
			{
				if (i >= skipCount)
				{
					string text = "unknown_module.dll";
					try
					{
						StackFrame frame = stack.GetFrame(i);
						MethodBase method = frame.GetMethod();
						text = method.Module.Assembly.Location;
						int iloffset = frame.GetILOffset();
						int metadataToken = method.MetadataToken;
						mbstringBuilder.AppendLine<string>(string.Concat(new object[] { text, "@", metadataToken, "@", iloffset }));
					}
					catch
					{
						mbstringBuilder.AppendLine<string>(text + "@-1@-1");
					}
				}
			}
			return mbstringBuilder.ToStringAndRelease();
		}

		// Token: 0x0600007B RID: 123 RVA: 0x00002FFC File Offset: 0x000011FC
		[LibraryCallback]
		public static string GetModuleList()
		{
			Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
			string text = "";
			foreach (Assembly assembly in assemblies)
			{
				try
				{
					text += assembly.Location;
					text += "\n";
				}
				catch
				{
				}
			}
			return text;
		}

		// Token: 0x0600007C RID: 124 RVA: 0x0000305C File Offset: 0x0000125C
		[LibraryCallback]
		public static void GetVersionInts(ref int major, ref int minor, ref int revision)
		{
			ApplicationVersion applicationVersion = ApplicationVersion.FromParametersFile(null);
			major = applicationVersion.Major;
			minor = applicationVersion.Minor;
			revision = applicationVersion.Revision;
		}

		// Token: 0x0600007D RID: 125 RVA: 0x0000308B File Offset: 0x0000128B
		[LibraryCallback]
		internal static DotNetObject CreateCustomParameterStringArray(int length)
		{
			return new CustomParameter<string[]>(new string[length]);
		}

		// Token: 0x0600007E RID: 126 RVA: 0x00003098 File Offset: 0x00001298
		internal static DotNetObject AddCustomParameter<T>(T parameterData) where T : class
		{
			return new CustomParameter<T>(parameterData);
		}

		// Token: 0x0600007F RID: 127 RVA: 0x000030A0 File Offset: 0x000012A0
		[LibraryCallback]
		internal static void GarbageCollect(bool forceTimer)
		{
			Common.MemoryCleanupGC(forceTimer);
		}

		// Token: 0x06000080 RID: 128 RVA: 0x000030A8 File Offset: 0x000012A8
		[LibraryCallback]
		internal static void SetStringArrayValueAtIndex(string[] array, int index, string value)
		{
			array[index] = value;
		}

		// Token: 0x06000081 RID: 129 RVA: 0x000030AE File Offset: 0x000012AE
		[LibraryCallback]
		internal static string GetStringArrayValueAtIndex(string[] array, int index)
		{
			return array[index];
		}

		// Token: 0x06000082 RID: 130 RVA: 0x000030B3 File Offset: 0x000012B3
		internal static void PassInitializationMethodPointersForMono(IntPtr a, IntPtr b)
		{
			Managed.PassManagedInitializeMethodPointerMono = (Managed.PassManagedInitializeMethodPointerDelegate)Marshal.GetDelegateForFunctionPointer(a, typeof(Managed.PassManagedInitializeMethodPointerDelegate));
			Managed.PassManagedEngineCallbackMethodPointersMono = (Managed.PassManagedCallbackMethodPointersDelegate)Marshal.GetDelegateForFunctionPointer(b, typeof(Managed.PassManagedCallbackMethodPointersDelegate));
		}

		// Token: 0x06000083 RID: 131 RVA: 0x000030E9 File Offset: 0x000012E9
		public static void PassInitializationMethodPointersForDotNet(Delegate a, Delegate b)
		{
			Managed.PassManagedInitializeMethodPointerMono = a;
			Managed.PassManagedEngineCallbackMethodPointersMono = b;
		}

		// Token: 0x06000084 RID: 132 RVA: 0x000030F8 File Offset: 0x000012F8
		public static void Start(IEnumerable<IManagedComponent> components)
		{
			Managed._components.AddRange(components);
			Common.SetInvariantCulture();
			AppDomain.CurrentDomain.AppendPrivatePath(ManagedDllFolder.Name);
			AssemblyLoader.Initialize();
			Managed._initializer = new ManagedInitializeMethod(Managed.Initialize);
			Managed.PassManagedInitializeMethodPointer(Managed._initializer);
			for (int i = 0; i < Managed._components.Count; i++)
			{
				Managed._components[i].OnStart();
			}
		}

		// Token: 0x06000085 RID: 133 RVA: 0x0000316C File Offset: 0x0000136C
		[MonoPInvokeCallback(typeof(ManagedInitializeMethod))]
		private static void Initialize()
		{
			Common.SetInvariantCulture();
			Type[] types = AssemblyLoader.LoadFrom(Managed.ManagedCallbacksDll, true).GetTypes();
			Type type = null;
			foreach (Type type2 in types)
			{
				if (type2.GetInterfaces().Contains(typeof(ICallbackManager)))
				{
					type = type2;
					break;
				}
			}
			Managed._callbackManager = type.GetConstructor(new Type[0]).Invoke(new object[0]) as ICallbackManager;
			Managed._callbackManager.Initialize();
			Delegate[] delegates = Managed._callbackManager.GetDelegates();
			for (int j = 0; j < delegates.Length; j++)
			{
				try
				{
					Managed.PassManagedEngineCallbackMethodPointers(delegates[j]);
				}
				catch (Exception ex)
				{
					Managed.PassManagedEngineCallbackMethodPointers(null);
					Console.WriteLine(ex + " " + j);
				}
			}
			LibraryApplicationInterface.SetObjects(Managed._callbackManager.GetScriptingInterfaceObjects());
		}

		// Token: 0x06000086 RID: 134 RVA: 0x00003254 File Offset: 0x00001454
		[LibraryCallback]
		internal static void CheckSharedStructureSizes()
		{
			Managed._callbackManager.CheckSharedStructureSizes();
		}

		// Token: 0x06000087 RID: 135 RVA: 0x00003260 File Offset: 0x00001460
		[LibraryCallback]
		internal static void SetClosing()
		{
			Managed.Closing = true;
		}

		// Token: 0x06000088 RID: 136 RVA: 0x00003268 File Offset: 0x00001468
		[LibraryCallback]
		internal static void PreFinalize()
		{
			Managed.Closing = true;
			Managed._moduleTypes = null;
			ManagedObjectOwner.PreFinalizeManagedObjects();
			Common.MemoryCleanupGC(false);
		}

		// Token: 0x06000089 RID: 137 RVA: 0x00003281 File Offset: 0x00001481
		[LibraryCallback]
		internal static void OnFinalize()
		{
			ManagedObject.FinalizeManagedObjects();
			Common.MemoryCleanupGC(false);
			ManagedObjectOwner.LogFinalize();
		}

		// Token: 0x0600008A RID: 138 RVA: 0x00003294 File Offset: 0x00001494
		[LibraryCallback]
		internal static void ApplicationTick(float dt)
		{
			ManagedObject.HandleManagedObjects();
			DotNetObject.HandleDotNetObjects();
			NativeObject.HandleNativeObjects();
			ManagedObjectOwner.GarbageCollect();
			Managed.NativeTelemetryManager.Update();
			for (int i = 0; i < Managed._components.Count; i++)
			{
				Managed._components[i].OnApplicationTick(dt);
			}
		}

		// Token: 0x0600008B RID: 139 RVA: 0x000032E8 File Offset: 0x000014E8
		[LibraryCallback]
		internal static void ApplicationTickLight(float dt)
		{
			DotNetObject.HandleDotNetObjects();
			NativeObject.HandleNativeObjects();
			Managed.NativeTelemetryManager.Update();
			for (int i = 0; i < Managed._components.Count; i++)
			{
				Managed._components[i].OnApplicationTick(dt);
			}
		}

		// Token: 0x0600008C RID: 140 RVA: 0x0000332F File Offset: 0x0000152F
		[LibraryCallback]
		internal static bool CheckClassNameIsValid(string className)
		{
			return Managed._moduleTypes.ContainsKey(className);
		}

		// Token: 0x0600008D RID: 141 RVA: 0x0000333C File Offset: 0x0000153C
		[LibraryCallback]
		internal static int GetStringArrayLength(string[] array)
		{
			return array.Length;
		}

		// Token: 0x0600008E RID: 142 RVA: 0x00003344 File Offset: 0x00001544
		[LibraryCallback]
		internal static string[] GetClassFields(string className, bool recursive, bool includeInternal, bool includeProtected, bool includePrivate)
		{
			List<string> list = new List<string>();
			Type type;
			if (Managed._moduleTypes.TryGetValue(className, out type))
			{
				FieldInfo[] fields = type.GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
				for (int i = 0; i < fields.Length; i++)
				{
					FieldInfo fieldInfo = fields[i];
					if (false || fieldInfo.IsPublic || (includePrivate && fieldInfo.IsPrivate) || (includeProtected && fieldInfo.IsFamily) || (includeInternal && fieldInfo.IsAssembly))
					{
						list.Add(fields[i].Name);
					}
				}
			}
			return list.ToArray();
		}

		// Token: 0x0600008F RID: 143 RVA: 0x000033DC File Offset: 0x000015DC
		[LibraryCallback]
		internal static ManagedObject CreateObjectClassInstanceWithPointer(string className, IntPtr pointer)
		{
			ConstructorInfo constructor = Managed._moduleTypes[className].GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, new Type[] { typeof(IntPtr) }, null);
			if (constructor != null)
			{
				object obj = constructor.Invoke(new object[] { pointer });
				if (obj != null)
				{
					return obj as ManagedObject;
				}
			}
			return null;
		}

		// Token: 0x06000090 RID: 144 RVA: 0x00003440 File Offset: 0x00001640
		internal static string GetClassNamesAux(Type type)
		{
			string text = "";
			Predicate<Type> <>9__0;
			foreach (Assembly assembly in AppDomain.CurrentDomain.GetAssemblies())
			{
				if (!assembly.GlobalAssemblyCache)
				{
					try
					{
						Type[] types = assembly.GetTypes();
						Predicate<Type> predicate;
						if ((predicate = <>9__0) == null)
						{
							predicate = (<>9__0 = (Type t) => (t.Equals(type) || t.IsSubclassOf(type)) && !t.IsAbstract);
						}
						string[] array = Array.ConvertAll<Type, string>(Array.FindAll<Type>(types, predicate), (Type t) => t.Name);
						if (array.Length != 0)
						{
							if (text != "")
							{
								text += " ";
							}
							text += string.Join(" ", array);
						}
					}
					catch (ReflectionTypeLoadException ex)
					{
						Debug.Print(ex.Message + " " + ex.GetType(), 0, Debug.DebugColor.White, 17592186044416UL);
						foreach (object obj in ex.Data.Values)
						{
							Debug.Print(obj.ToString(), 0, Debug.DebugColor.White, 17592186044416UL);
						}
					}
				}
			}
			return text;
		}

		// Token: 0x06000091 RID: 145 RVA: 0x000035B4 File Offset: 0x000017B4
		[LibraryCallback]
		internal static ManagedObject CreateObjectClassInstanceWithInteger(string className, int value)
		{
			ConstructorInfo constructor = Managed._moduleTypes[className].GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, new Type[] { typeof(int) }, null);
			if (constructor != null)
			{
				object obj = constructor.Invoke(new object[] { value });
				if (obj != null)
				{
					return obj as ManagedObject;
				}
			}
			return null;
		}

		// Token: 0x06000092 RID: 146 RVA: 0x00003616 File Offset: 0x00001816
		[LibraryCallback]
		internal static void SetCurrentStringReturnValue(IntPtr pointer)
		{
			Managed.ReturnValueFromEngine = Marshal.PtrToStringAnsi(pointer);
		}

		// Token: 0x06000093 RID: 147 RVA: 0x00003624 File Offset: 0x00001824
		[LibraryCallback]
		internal static void SetCurrentStringReturnValueAsUnicode(IntPtr pointer)
		{
			Managed.ReturnValueFromEngine = Marshal.PtrToStringAnsi(pointer);
			byte[] bytes = Encoding.Default.GetBytes(Managed.ReturnValueFromEngine);
			byte[] array = Encoding.Convert(Encoding.UTF8, Encoding.Unicode, bytes);
			Managed.ReturnValueFromEngine = Encoding.Unicode.GetString(array);
		}

		// Token: 0x06000094 RID: 148 RVA: 0x00003670 File Offset: 0x00001870
		[LibraryCallback]
		internal static string GetObjectClassName(string className)
		{
			Type type;
			if (Managed._moduleTypes.TryGetValue(className, out type))
			{
				return type.Name;
			}
			return "unknown";
		}

		// Token: 0x06000095 RID: 149 RVA: 0x00003698 File Offset: 0x00001898
		[LibraryCallback]
		internal static void EngineApiMethodInterfaceInitializer(int id, IntPtr pointer)
		{
			Managed._engineApiPointers.Add(id, pointer);
		}

		// Token: 0x06000096 RID: 150 RVA: 0x000036A8 File Offset: 0x000018A8
		[LibraryCallback]
		internal static void FillEngineApiPointers()
		{
			foreach (KeyValuePair<int, IntPtr> keyValuePair in Managed._engineApiPointers)
			{
				try
				{
					Managed._callbackManager.SetFunctionPointer(keyValuePair.Key, keyValuePair.Value);
				}
				catch (Exception ex)
				{
					Console.WriteLine(string.Concat(new object[] { "error: ", keyValuePair.Key, " ", ex }));
				}
			}
		}

		// Token: 0x06000097 RID: 151 RVA: 0x00003750 File Offset: 0x00001950
		[LibraryCallback]
		internal static long GetMemoryUsage()
		{
			return GC.GetTotalMemory(false);
		}

		// Token: 0x06000098 RID: 152 RVA: 0x00003758 File Offset: 0x00001958
		[LibraryCallback]
		internal static void PassCustomCallbackMethodPointers(string name, IntPtr initalizer)
		{
			Delegate delegateForFunctionPointer = Marshal.GetDelegateForFunctionPointer(initalizer, typeof(Managed.InitializerDelegate));
			for (int i = 0; i < Managed._components.Count; i++)
			{
				Managed._components[i].OnCustomCallbackMethodPassed(name, delegateForFunctionPointer);
			}
		}

		// Token: 0x06000099 RID: 153 RVA: 0x000037A0 File Offset: 0x000019A0
		[LibraryCallback]
		internal static string CallCommandlineFunction(string functionName, string arguments)
		{
			bool flag;
			return CommandLineFunctionality.CallFunction(functionName, arguments, out flag);
		}

		// Token: 0x0600009A RID: 154 RVA: 0x000037B8 File Offset: 0x000019B8
		public static void InitializeTypes(Dictionary<string, Type> types)
		{
			Managed._moduleTypes = types;
			foreach (KeyValuePair<string, Type> keyValuePair in types)
			{
				Dictionary<string, FieldInfo> dictionary = new Dictionary<string, FieldInfo>();
				Dictionary<string, FieldInfo> dictionary2 = new Dictionary<string, FieldInfo>();
				BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
				foreach (FieldInfo fieldInfo in keyValuePair.Value.GetFields(bindingFlags))
				{
					string name = fieldInfo.Name;
					object[] customAttributes = fieldInfo.GetCustomAttributes(typeof(EditableScriptComponentVariable), true);
					bool flag = false;
					if (customAttributes.Length != 0)
					{
						flag = ((EditableScriptComponentVariable)customAttributes[0]).Visible;
					}
					else if (!fieldInfo.IsPrivate && !fieldInfo.IsFamily)
					{
						flag = true;
					}
					if (flag)
					{
						dictionary2.Add(name, fieldInfo);
					}
					dictionary.Add(name, fieldInfo);
				}
				Managed._fieldsOfScriptsCached.Add(keyValuePair.Key, dictionary);
				Managed._editableFieldsOfScriptsCached.Add(keyValuePair.Key, dictionary2);
				bindingFlags |= BindingFlags.CreateInstance;
				ConstructorInfo constructor = keyValuePair.Value.GetConstructor(bindingFlags, null, new Type[0], null);
				Managed._constructorsOfScriptsCached.Add(keyValuePair.Key, constructor);
			}
		}

		// Token: 0x0600009B RID: 155 RVA: 0x00003910 File Offset: 0x00001B10
		public static void AddTypes(Dictionary<string, Type> types)
		{
			Managed._moduleTypes = Managed._moduleTypes.Union(types).ToDictionary((KeyValuePair<string, Type> k) => k.Key, (KeyValuePair<string, Type> v) => v.Value);
			foreach (KeyValuePair<string, Type> keyValuePair in types)
			{
				Dictionary<string, FieldInfo> dictionary = new Dictionary<string, FieldInfo>();
				Dictionary<string, FieldInfo> dictionary2 = new Dictionary<string, FieldInfo>();
				BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic;
				foreach (FieldInfo fieldInfo in keyValuePair.Value.GetFields(bindingFlags))
				{
					string name = fieldInfo.Name;
					object[] customAttributes = fieldInfo.GetCustomAttributes(typeof(EditableScriptComponentVariable), true);
					bool flag = false;
					if (customAttributes.Length != 0)
					{
						flag = ((EditableScriptComponentVariable)customAttributes[0]).Visible;
					}
					else if (!fieldInfo.IsPrivate && !fieldInfo.IsFamily)
					{
						flag = true;
					}
					if (flag)
					{
						dictionary2.Add(name, fieldInfo);
					}
					dictionary.Add(name, fieldInfo);
				}
				Managed._fieldsOfScriptsCached.Add(keyValuePair.Key, dictionary);
				Managed._editableFieldsOfScriptsCached.Add(keyValuePair.Key, dictionary2);
				bindingFlags |= BindingFlags.CreateInstance;
				ConstructorInfo constructor = keyValuePair.Value.GetConstructor(bindingFlags, null, new Type[0], null);
				Managed._constructorsOfScriptsCached.Add(keyValuePair.Key, constructor);
			}
		}

		// Token: 0x0600009C RID: 156 RVA: 0x00003AB4 File Offset: 0x00001CB4
		public static void AddConstructorDelegateOfClass<T>()
		{
			Type typeFromHandle = typeof(T);
			string name = typeFromHandle.Name;
			if (!Managed._constructorDelegatesOfScriptsCached.ContainsKey(name))
			{
				Managed._constructorDelegatesOfScriptsCached[name] = Expression.Lambda<Func<T>>(Expression.New(typeFromHandle), Array.Empty<ParameterExpression>()).Compile();
			}
		}

		// Token: 0x0600009D RID: 157 RVA: 0x00003B00 File Offset: 0x00001D00
		public static void AddConstructorDelegateOfWeakReferenceClass<T>()
		{
			Type typeFromHandle = typeof(T);
			if (!Managed._constructorDelegatesOfWeakReferencesCached.ContainsKey(typeFromHandle))
			{
				Managed._constructorDelegatesOfWeakReferencesCached[typeFromHandle] = Expression.Lambda<Func<T>>(Expression.New(typeFromHandle), Array.Empty<ParameterExpression>()).Compile();
			}
		}

		// Token: 0x0600009E RID: 158 RVA: 0x00003B45 File Offset: 0x00001D45
		private static void PassManagedInitializeMethodPointer(Delegate initializer)
		{
			Delegate passManagedInitializeMethodPointerMono = Managed.PassManagedInitializeMethodPointerMono;
			if (passManagedInitializeMethodPointerMono == null)
			{
				return;
			}
			passManagedInitializeMethodPointerMono.DynamicInvoke(new object[] { initializer });
		}

		// Token: 0x0600009F RID: 159 RVA: 0x00003B61 File Offset: 0x00001D61
		private static void PassManagedEngineCallbackMethodPointers(Delegate methodDelegate)
		{
			Delegate passManagedEngineCallbackMethodPointersMono = Managed.PassManagedEngineCallbackMethodPointersMono;
			if (passManagedEngineCallbackMethodPointersMono == null)
			{
				return;
			}
			passManagedEngineCallbackMethodPointersMono.DynamicInvoke(new object[] { methodDelegate });
		}

		// Token: 0x060000A0 RID: 160 RVA: 0x00003B80 File Offset: 0x00001D80
		[LibraryCallback]
		internal static void LoadManagedComponent(string assemblyName, string managedInterface)
		{
			IManagedComponent managedComponent = (IManagedComponent)Activator.CreateInstance(AssemblyLoader.LoadFrom(ManagedDllFolder.Name + assemblyName + ".dll", true).GetType(managedInterface));
			Managed._components.Add(managedComponent);
			managedComponent.OnStart();
		}

		// Token: 0x060000A1 RID: 161 RVA: 0x00003BC8 File Offset: 0x00001DC8
		internal static Dictionary<string, FieldInfo> GetEditableFieldsOfClass(string className)
		{
			Dictionary<string, FieldInfo> dictionary;
			Managed._editableFieldsOfScriptsCached.TryGetValue(className, out dictionary);
			return dictionary;
		}

		// Token: 0x060000A2 RID: 162 RVA: 0x00003BE4 File Offset: 0x00001DE4
		internal static FieldInfo GetFieldOfClass(string className, string fieldName)
		{
			Dictionary<string, FieldInfo> dictionary;
			if (Managed._fieldsOfScriptsCached.TryGetValue(className, out dictionary))
			{
				FieldInfo fieldInfo;
				dictionary.TryGetValue(fieldName, out fieldInfo);
				return fieldInfo;
			}
			return null;
		}

		// Token: 0x060000A3 RID: 163 RVA: 0x00003C10 File Offset: 0x00001E10
		internal static ConstructorInfo GetConstructorOfClass(string className)
		{
			ConstructorInfo constructorInfo;
			Managed._constructorsOfScriptsCached.TryGetValue(className, out constructorInfo);
			return constructorInfo;
		}

		// Token: 0x060000A4 RID: 164 RVA: 0x00003C2C File Offset: 0x00001E2C
		internal static Delegate GetConstructorDelegateOfClass(string className)
		{
			Delegate @delegate;
			Managed._constructorDelegatesOfScriptsCached.TryGetValue(className, out @delegate);
			return @delegate;
		}

		// Token: 0x060000A5 RID: 165 RVA: 0x00003C48 File Offset: 0x00001E48
		internal static Delegate GetConstructorDelegateOfWeakReferenceClass(Type classType)
		{
			return Managed._constructorDelegatesOfWeakReferencesCached[classType];
		}

		// Token: 0x060000A6 RID: 166 RVA: 0x00003C55 File Offset: 0x00001E55
		[LibraryCallback]
		internal static bool IsClassFieldExists(string className, string fieldName)
		{
			return Managed.GetFieldOfClass(className, fieldName) != null;
		}

		// Token: 0x060000A7 RID: 167 RVA: 0x00003C64 File Offset: 0x00001E64
		[LibraryCallback]
		internal static string GetEnumNamesOfField(string className, string fieldName)
		{
			string text = Managed.GetFieldOfClass(className, fieldName).FieldType.FullName;
			string text2 = text.Substring(0, text.IndexOf('.'));
			if (text2 != null && text2 != "" && text2 != Assembly.GetExecutingAssembly().GetName().Name)
			{
				text = text + ", " + text2;
			}
			Type type = Type.GetType(text);
			if (type == null)
			{
				int num = text.IndexOf(',');
				text = text.Remove(num);
				Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
				for (int i = 0; i < assemblies.Length; i++)
				{
					type = assemblies[i].GetType(text);
					if (type != null)
					{
						break;
					}
				}
			}
			type.GetEnumValues();
			string[] enumNames = type.GetEnumNames();
			return string.Join(" ", enumNames);
		}

		// Token: 0x060000A8 RID: 168 RVA: 0x00003D38 File Offset: 0x00001F38
		[CommandLineFunctionality.CommandLineArgumentFunction("show_version", "dotnet")]
		public static string ShowDotNetVersion(List<string> strings)
		{
			string frameworkDescription = RuntimeInformation.FrameworkDescription;
			Debug.Print("Version:" + frameworkDescription, 0, Debug.DebugColor.White, 17592186044416UL);
			return frameworkDescription;
		}

		// Token: 0x0400002E RID: 46
		private static List<IManagedComponent> _components = new List<IManagedComponent>();

		// Token: 0x04000030 RID: 48
		private static ICallbackManager _callbackManager;

		// Token: 0x04000031 RID: 49
		internal static string ReturnValueFromEngine = "";

		// Token: 0x04000032 RID: 50
		private static ManagedInitializeMethod _initializer;

		// Token: 0x04000033 RID: 51
		private static Dictionary<string, Type> _moduleTypes;

		// Token: 0x04000034 RID: 52
		private static Dictionary<int, IntPtr> _engineApiPointers = new Dictionary<int, IntPtr>();

		// Token: 0x04000035 RID: 53
		private static Dictionary<string, Dictionary<string, FieldInfo>> _fieldsOfScriptsCached = new Dictionary<string, Dictionary<string, FieldInfo>>();

		// Token: 0x04000036 RID: 54
		private static Dictionary<string, Dictionary<string, FieldInfo>> _editableFieldsOfScriptsCached = new Dictionary<string, Dictionary<string, FieldInfo>>();

		// Token: 0x04000037 RID: 55
		private static Dictionary<string, ConstructorInfo> _constructorsOfScriptsCached = new Dictionary<string, ConstructorInfo>();

		// Token: 0x04000038 RID: 56
		private static Dictionary<string, Delegate> _constructorDelegatesOfScriptsCached = new Dictionary<string, Delegate>();

		// Token: 0x04000039 RID: 57
		private static Dictionary<Type, Delegate> _constructorDelegatesOfWeakReferencesCached = new Dictionary<Type, Delegate>();

		// Token: 0x0400003B RID: 59
		private static Delegate PassManagedInitializeMethodPointerMono = null;

		// Token: 0x0400003C RID: 60
		private static Delegate PassManagedEngineCallbackMethodPointersMono = null;

		// Token: 0x02000035 RID: 53
		// (Invoke) Token: 0x06000132 RID: 306
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		[MonoNativeFunctionWrapper]
		public delegate void PassManagedInitializeMethodPointerDelegate([MarshalAs(UnmanagedType.FunctionPtr)] Delegate initalizer);

		// Token: 0x02000036 RID: 54
		// (Invoke) Token: 0x06000136 RID: 310
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		[MonoNativeFunctionWrapper]
		public delegate void PassManagedCallbackMethodPointersDelegate([MarshalAs(UnmanagedType.FunctionPtr)] Delegate methodDelegate);

		// Token: 0x02000037 RID: 55
		// (Invoke) Token: 0x0600013A RID: 314
		[MonoNativeFunctionWrapper]
		public delegate void InitializerDelegate(Delegate argument);

		// Token: 0x02000038 RID: 56
		public enum RglScriptFieldType
		{
			// Token: 0x04000095 RID: 149
			RglSftString,
			// Token: 0x04000096 RID: 150
			RglSftDouble,
			// Token: 0x04000097 RID: 151
			RglSftFloat,
			// Token: 0x04000098 RID: 152
			RglSftBool,
			// Token: 0x04000099 RID: 153
			RglSftInt,
			// Token: 0x0400009A RID: 154
			RglSftVec3,
			// Token: 0x0400009B RID: 155
			RglSftEntity,
			// Token: 0x0400009C RID: 156
			RglSftTexture,
			// Token: 0x0400009D RID: 157
			RglSftMesh,
			// Token: 0x0400009E RID: 158
			RglSftEnum,
			// Token: 0x0400009F RID: 159
			RglSftMaterial,
			// Token: 0x040000A0 RID: 160
			RglSftButton,
			// Token: 0x040000A1 RID: 161
			RglSftColor,
			// Token: 0x040000A2 RID: 162
			RglSftMatrixFrame
		}
	}
}
