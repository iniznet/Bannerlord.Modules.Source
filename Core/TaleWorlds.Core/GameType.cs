using System;
using System.Collections.Generic;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	public abstract class GameType
	{
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		public virtual bool SupportsSaving
		{
			get
			{
				return false;
			}
		}

		public Game CurrentGame { get; internal set; }

		public MBObjectManager ObjectManager
		{
			get
			{
				return this.CurrentGame.ObjectManager;
			}
		}

		public GameManagerBase GameManager
		{
			get
			{
				return this.CurrentGame.GameManager;
			}
		}

		public virtual bool IsInventoryAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsQuestScreenAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsCharacterWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsPartyWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsKingdomWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsClanWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsEncyclopediaWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsBannerWindowAccessibleAtMission
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsDevelopment
		{
			get
			{
				return false;
			}
		}

		public virtual bool IsCoreOnlyGameMode
		{
			get
			{
				return false;
			}
		}

		public virtual bool RequiresTutorial
		{
			get
			{
				return true;
			}
		}

		public GameType()
		{
			this._stepNo = GameTypeLoadingStates.InitializeFirstStep;
		}

		public abstract void OnStateChanged(GameState oldState);

		protected internal abstract void BeforeRegisterTypes(MBObjectManager objectManager);

		protected internal abstract void OnRegisterTypes(MBObjectManager objectManager);

		protected internal abstract void OnInitialize();

		protected abstract void DoLoadingForGameType(GameTypeLoadingStates gameTypeLoadingState, out GameTypeLoadingStates nextState);

		public bool DoLoadingForGameType()
		{
			bool flag = false;
			GameTypeLoadingStates gameTypeLoadingStates = GameTypeLoadingStates.None;
			switch (this._stepNo)
			{
			case GameTypeLoadingStates.InitializeFirstStep:
				this.DoLoadingForGameType(GameTypeLoadingStates.InitializeFirstStep, out gameTypeLoadingStates);
				if (gameTypeLoadingStates == GameTypeLoadingStates.WaitSecondStep)
				{
					this._stepNo++;
				}
				break;
			case GameTypeLoadingStates.WaitSecondStep:
				this.DoLoadingForGameType(GameTypeLoadingStates.WaitSecondStep, out gameTypeLoadingStates);
				if (gameTypeLoadingStates == GameTypeLoadingStates.LoadVisualsThirdState)
				{
					this._stepNo++;
				}
				break;
			case GameTypeLoadingStates.LoadVisualsThirdState:
				this.DoLoadingForGameType(GameTypeLoadingStates.LoadVisualsThirdState, out gameTypeLoadingStates);
				if (gameTypeLoadingStates == GameTypeLoadingStates.PostInitializeFourthState)
				{
					this._stepNo++;
				}
				break;
			case GameTypeLoadingStates.PostInitializeFourthState:
				this.DoLoadingForGameType(GameTypeLoadingStates.PostInitializeFourthState, out gameTypeLoadingStates);
				if (gameTypeLoadingStates == GameTypeLoadingStates.None)
				{
					this._stepNo++;
					flag = true;
				}
				break;
			}
			return flag;
		}

		public abstract void OnDestroy();

		public virtual void OnMissionIsStarting(string missionName, MissionInitializerRecord rec)
		{
		}

		public virtual void InitializeParameters()
		{
		}

		private GameTypeLoadingStates _stepNo;
	}
}
