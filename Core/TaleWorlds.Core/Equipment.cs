using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	public class Equipment
	{
		internal static void AutoGeneratedStaticCollectObjectsEquipment(object o, List<object> collectedObjects)
		{
			((Equipment)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._itemSlots);
		}

		internal static object AutoGeneratedGetMemberValue_equipmentType(object o)
		{
			return ((Equipment)o)._equipmentType;
		}

		internal static object AutoGeneratedGetMemberValue_itemSlots(object o)
		{
			return ((Equipment)o)._itemSlots;
		}

		public bool IsValid
		{
			get
			{
				return this._equipmentType != Equipment.EquipmentType.Invalid;
			}
		}

		public bool IsCivilian
		{
			get
			{
				return this._equipmentType == Equipment.EquipmentType.Civilian;
			}
		}

		public Equipment()
		{
			this._itemSlots = new EquipmentElement[12];
			this._equipmentType = Equipment.EquipmentType.Invalid;
		}

		public Equipment(bool isCivilian)
			: this()
		{
			this._itemSlots = new EquipmentElement[12];
			this._equipmentType = (isCivilian ? Equipment.EquipmentType.Civilian : Equipment.EquipmentType.Battle);
		}

		public Equipment(Equipment equipment)
		{
			this._itemSlots = new EquipmentElement[12];
			for (int i = 0; i < 12; i++)
			{
				this._itemSlots[i] = new EquipmentElement(equipment[i]);
			}
			this._equipmentType = equipment._equipmentType;
		}

		public EquipmentElement this[int index]
		{
			get
			{
				return this._itemSlots[index];
			}
			set
			{
				Equipment.IsItemFitsToSlot((EquipmentIndex)index, value.Item);
				this._itemSlots[index] = value;
			}
		}

		public EquipmentElement this[EquipmentIndex index]
		{
			get
			{
				return this._itemSlots[(int)index];
			}
			set
			{
				this[(int)index] = value;
			}
		}

		public EquipmentElement Horse
		{
			get
			{
				return this._itemSlots[10];
			}
		}

		private void SetItem(int index, EquipmentElement element)
		{
			this[index] = element;
		}

		public Equipment Clone(bool cloneWithoutWeapons = false)
		{
			Equipment equipment = new Equipment(this.IsCivilian);
			for (int i = 0; i < 12; i++)
			{
				bool flag = cloneWithoutWeapons && i >= 0 && i < 5;
				equipment.SetItem(i, flag ? EquipmentElement.Invalid : this[i]);
			}
			return equipment;
		}

		public void FillFrom(Equipment sourceEquipment, bool useSourceEquipmentType = true)
		{
			if (useSourceEquipmentType)
			{
				this._equipmentType = sourceEquipment._equipmentType;
			}
			for (int i = 0; i < 12; i++)
			{
				this[i] = sourceEquipment[i];
			}
		}

		public void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				this.DeserializeNode(objectManager, xmlNode);
			}
		}

		public void DeserializeNode(MBObjectManager objectManager, XmlNode node)
		{
			if (node.NodeType == XmlNodeType.Comment)
			{
				return;
			}
			XmlAttributeCollection attributes = node.Attributes;
			XmlAttribute xmlAttribute = attributes["id"];
			XmlAttribute xmlAttribute2 = attributes["slot"];
			string text = (xmlAttribute.Value.Contains(".") ? xmlAttribute.Value.Split(new char[] { '.' })[1] : xmlAttribute.Value);
			EquipmentIndex equipmentIndexFromOldEquipmentIndexName = Equipment.GetEquipmentIndexFromOldEquipmentIndexName(xmlAttribute2.Value);
			ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>(text);
			if (Equipment.IsItemFitsToSlot(equipmentIndexFromOldEquipmentIndexName, @object))
			{
				this[equipmentIndexFromOldEquipmentIndexName] = new EquipmentElement(@object, null, null, false);
				return;
			}
			Debug.FailedAssert(((@object == null) ? TextObject.Empty : @object.Name) + " does not fit to slot " + equipmentIndexFromOldEquipmentIndexName, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\Equipment.cs", "DeserializeNode", 161);
		}

		public static EquipmentIndex GetEquipmentIndexFromOldEquipmentIndexName(string oldEquipmentIndexName)
		{
			string text;
			if (!(oldEquipmentIndexName == "Item0"))
			{
				if (!(oldEquipmentIndexName == "Item1"))
				{
					if (!(oldEquipmentIndexName == "Item2"))
					{
						if (!(oldEquipmentIndexName == "Item3"))
						{
							if (!(oldEquipmentIndexName == "Item4"))
							{
								text = oldEquipmentIndexName;
							}
							else
							{
								text = "ExtraWeaponSlot";
							}
						}
						else
						{
							text = "Weapon3";
						}
					}
					else
					{
						text = "Weapon2";
					}
				}
				else
				{
					text = "Weapon1";
				}
			}
			else
			{
				text = "Weapon0";
			}
			return (EquipmentIndex)Enum.Parse(typeof(EquipmentIndex), text);
		}

		public bool IsEmpty()
		{
			return this._itemSlots.All((EquipmentElement itemRosterElement) => itemRosterElement.Item == null);
		}

		public float GetTotalWeightOfArmor(bool forHuman)
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = (forHuman ? EquipmentIndex.NumAllWeaponSlots : EquipmentIndex.HorseHarness); equipmentIndex < (forHuman ? EquipmentIndex.ArmorItemEndSlot : EquipmentIndex.NumEquipmentSetSlots); equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (!equipmentElement.IsEmpty)
				{
					num += equipmentElement.GetEquipmentElementWeight();
				}
			}
			return num;
		}

		public float GetTotalWeightOfWeapons()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex < EquipmentIndex.NumAllWeaponSlots; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (!equipmentElement.IsEmpty)
				{
					num += equipmentElement.GetEquipmentElementWeight();
				}
			}
			return num;
		}

		public float GetHeadArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedHeadArmor();
				}
			}
			return num;
		}

		public float GetHumanBodyArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedBodyArmor();
				}
			}
			return num;
		}

		public float GetLegArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedLegArmor();
				}
			}
			return num;
		}

		public float GetArmArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedArmArmor();
				}
			}
			return num;
		}

		public float GetHorseArmorSum()
		{
			float num = 0f;
			EquipmentIndex equipmentIndex = EquipmentIndex.HorseHarness;
			EquipmentElement equipmentElement = this[equipmentIndex];
			if (equipmentElement.Item != null)
			{
				num += (float)equipmentElement.GetModifiedMountBodyArmor();
			}
			return num;
		}

		public ArmorComponent.HairCoverTypes HairCoverType
		{
			get
			{
				ArmorComponent.HairCoverTypes hairCoverTypes = ArmorComponent.HairCoverTypes.None;
				ItemObject item = this[EquipmentIndex.NumAllWeaponSlots].Item;
				if (item != null)
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					hairCoverTypes = ((armorComponent != null) ? armorComponent.HairCoverType : ArmorComponent.HairCoverTypes.None);
				}
				else if (this[EquipmentIndex.Body].Item == null)
				{
					hairCoverTypes = ArmorComponent.HairCoverTypes.Type4;
				}
				return hairCoverTypes;
			}
		}

		public ArmorComponent.BeardCoverTypes BeardCoverType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.NumAllWeaponSlots].Item;
				ArmorComponent.BeardCoverTypes? beardCoverTypes;
				if (item == null)
				{
					beardCoverTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					beardCoverTypes = ((armorComponent != null) ? new ArmorComponent.BeardCoverTypes?(armorComponent.BeardCoverType) : null);
				}
				ArmorComponent.BeardCoverTypes? beardCoverTypes2 = beardCoverTypes;
				if (beardCoverTypes2 == null)
				{
					return ArmorComponent.BeardCoverTypes.None;
				}
				return beardCoverTypes2.GetValueOrDefault();
			}
		}

		public ArmorComponent.HorseHarnessCoverTypes ManeCoverType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.HorseHarness].Item;
				ArmorComponent.HorseHarnessCoverTypes? horseHarnessCoverTypes;
				if (item == null)
				{
					horseHarnessCoverTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					horseHarnessCoverTypes = ((armorComponent != null) ? new ArmorComponent.HorseHarnessCoverTypes?(armorComponent.ManeCoverType) : null);
				}
				ArmorComponent.HorseHarnessCoverTypes? horseHarnessCoverTypes2 = horseHarnessCoverTypes;
				if (horseHarnessCoverTypes2 == null)
				{
					return ArmorComponent.HorseHarnessCoverTypes.None;
				}
				return horseHarnessCoverTypes2.GetValueOrDefault();
			}
		}

		public string ReinsMeshName
		{
			get
			{
				ItemObject item = this[EquipmentIndex.HorseHarness].Item;
				string text;
				if (item == null)
				{
					text = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					text = ((armorComponent != null) ? armorComponent.ReinsMesh : null);
				}
				return text ?? "";
			}
		}

		public bool EarsAreHidden
		{
			get
			{
				return this.HairCoverType != ArmorComponent.HairCoverTypes.None && this.HairCoverType != ArmorComponent.HairCoverTypes.Type1 && this.HairCoverType != ArmorComponent.HairCoverTypes.Type4;
			}
		}

		public bool MouthIsHidden
		{
			get
			{
				return this.BeardCoverType == ArmorComponent.BeardCoverTypes.All;
			}
		}

		public ArmorComponent.BodyMeshTypes BodyMeshType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.Body].Item;
				ArmorComponent.BodyMeshTypes? bodyMeshTypes;
				if (item == null)
				{
					bodyMeshTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					bodyMeshTypes = ((armorComponent != null) ? new ArmorComponent.BodyMeshTypes?(armorComponent.BodyMeshType) : null);
				}
				ArmorComponent.BodyMeshTypes? bodyMeshTypes2 = bodyMeshTypes;
				if (bodyMeshTypes2 == null)
				{
					return ArmorComponent.BodyMeshTypes.Normal;
				}
				return bodyMeshTypes2.GetValueOrDefault();
			}
		}

		public ArmorComponent.BodyDeformTypes BodyDeformType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.Body].Item;
				ArmorComponent.BodyDeformTypes? bodyDeformTypes;
				if (item == null)
				{
					bodyDeformTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					bodyDeformTypes = ((armorComponent != null) ? new ArmorComponent.BodyDeformTypes?(armorComponent.BodyDeformType) : null);
				}
				ArmorComponent.BodyDeformTypes? bodyDeformTypes2 = bodyDeformTypes;
				if (bodyDeformTypes2 == null)
				{
					return ArmorComponent.BodyDeformTypes.Medium;
				}
				return bodyDeformTypes2.GetValueOrDefault();
			}
		}

		public Equipment.UnderwearTypes GetUnderwearType(bool isFemale)
		{
			ItemObject item = this[EquipmentIndex.Body].Item;
			Equipment.UnderwearTypes underwearTypes;
			if (item == null)
			{
				underwearTypes = Equipment.UnderwearTypes.FullUnderwear;
			}
			else if (isFemale && item.DoesNotHideChest)
			{
				underwearTypes = Equipment.UnderwearTypes.OnlyTop;
			}
			else
			{
				underwearTypes = Equipment.UnderwearTypes.NoUnderwear;
			}
			return underwearTypes;
		}

		public bool HasWeapon()
		{
			for (int i = 0; i < 5; i++)
			{
				EquipmentElement equipmentElement = this._itemSlots[i];
				if (!equipmentElement.IsEmpty && equipmentElement.Item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.WeaponMask))
				{
					return true;
				}
			}
			return false;
		}

		public bool HasWeaponOfClass(WeaponClass weaponClass)
		{
			for (int i = 0; i < 5; i++)
			{
				EquipmentElement equipmentElement = this._itemSlots[i];
				if (!equipmentElement.IsEmpty && equipmentElement.Item.PrimaryWeapon.WeaponClass == weaponClass)
				{
					return true;
				}
			}
			return false;
		}

		public static Equipment CreateFromEquipmentCode(string equipmentCode)
		{
			Equipment equipment = new Equipment();
			for (int i = 0; i < 12; i++)
			{
				equipment[i] = default(EquipmentElement);
			}
			string[] array = equipmentCode.Split(new char[] { '+' }, StringSplitOptions.RemoveEmptyEntries);
			for (int j = 0; j < array.Length; j++)
			{
				string[] array2 = array[j].Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
				int num = Convert.ToInt32(array2[0]);
				string text = array2[1];
				if (text != "@null")
				{
					ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>(text);
					string text2 = array2[2];
					ItemModifier itemModifier = null;
					if (text2 != "@null")
					{
						itemModifier = MBObjectManager.Instance.GetObject<ItemModifier>(text2);
					}
					EquipmentElement equipmentElement = new EquipmentElement(@object, itemModifier, null, false);
					equipment[num] = equipmentElement;
				}
			}
			return equipment;
		}

		public string CalculateEquipmentCode()
		{
			MBStringBuilder mbstringBuilder = default(MBStringBuilder);
			mbstringBuilder.Initialize(16, "CalculateEquipmentCode");
			for (int i = 0; i < 12; i++)
			{
				EquipmentElement equipmentElement = this[i];
				string text = ((equipmentElement.Item != null) ? equipmentElement.Item.StringId : "@null");
				string text2 = ((equipmentElement.ItemModifier != null) ? equipmentElement.ItemModifier.StringId : "@null");
				if (string.IsNullOrEmpty(text))
				{
					text = "@null";
				}
				if (string.IsNullOrEmpty(text2))
				{
					text2 = "@null";
				}
				mbstringBuilder.Append('+');
				mbstringBuilder.Append(i);
				mbstringBuilder.Append('-');
				mbstringBuilder.Append<string>(text);
				mbstringBuilder.Append('-');
				mbstringBuilder.Append<string>(text2);
			}
			return mbstringBuilder.ToStringAndRelease();
		}

		public void AddEquipmentToSlotWithoutAgent(EquipmentIndex equipmentIndex, EquipmentElement itemRosterElement)
		{
			this[equipmentIndex] = itemRosterElement;
		}

		public EquipmentElement GetEquipmentFromSlot(EquipmentIndex equipmentIndex)
		{
			return this[equipmentIndex];
		}

		public static bool IsItemFitsToSlot(EquipmentIndex slotIndex, ItemObject item)
		{
			bool flag = false;
			if (item == null)
			{
				flag = true;
			}
			else
			{
				switch (item.ItemType)
				{
				case ItemObject.ItemTypeEnum.Invalid:
					flag = false;
					break;
				case ItemObject.ItemTypeEnum.Horse:
					flag = slotIndex == EquipmentIndex.ArmorItemEndSlot;
					break;
				case ItemObject.ItemTypeEnum.OneHandedWeapon:
				case ItemObject.ItemTypeEnum.TwoHandedWeapon:
				case ItemObject.ItemTypeEnum.Polearm:
				case ItemObject.ItemTypeEnum.Arrows:
				case ItemObject.ItemTypeEnum.Bolts:
				case ItemObject.ItemTypeEnum.Shield:
				case ItemObject.ItemTypeEnum.Bow:
				case ItemObject.ItemTypeEnum.Crossbow:
				case ItemObject.ItemTypeEnum.Thrown:
				case ItemObject.ItemTypeEnum.Pistol:
				case ItemObject.ItemTypeEnum.Musket:
				case ItemObject.ItemTypeEnum.Bullets:
				case ItemObject.ItemTypeEnum.Banner:
					if (item.ItemFlags.HasAnyFlag(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction))
					{
						flag = slotIndex == EquipmentIndex.ExtraWeaponSlot;
					}
					else
					{
						flag = slotIndex == EquipmentIndex.WeaponItemBeginSlot || slotIndex == EquipmentIndex.Weapon1 || slotIndex == EquipmentIndex.Weapon2 || slotIndex == EquipmentIndex.Weapon3;
					}
					break;
				case ItemObject.ItemTypeEnum.HeadArmor:
					flag = slotIndex == EquipmentIndex.NumAllWeaponSlots;
					break;
				case ItemObject.ItemTypeEnum.BodyArmor:
					flag = slotIndex == EquipmentIndex.Body;
					break;
				case ItemObject.ItemTypeEnum.LegArmor:
					flag = slotIndex == EquipmentIndex.Leg;
					break;
				case ItemObject.ItemTypeEnum.HandArmor:
					flag = slotIndex == EquipmentIndex.Gloves;
					break;
				case ItemObject.ItemTypeEnum.Animal:
					flag = slotIndex == EquipmentIndex.ArmorItemEndSlot;
					break;
				case ItemObject.ItemTypeEnum.Book:
					flag = false;
					break;
				case ItemObject.ItemTypeEnum.Cape:
					flag = slotIndex == EquipmentIndex.Cape;
					break;
				case ItemObject.ItemTypeEnum.HorseHarness:
					flag = slotIndex == EquipmentIndex.HorseHarness;
					break;
				}
			}
			return flag;
		}

		public EquipmentIndex GetWeaponPickUpSlotIndex(EquipmentElement itemRosterElement, bool isStuckMissile)
		{
			if (itemRosterElement.Item.ItemFlags.HasAnyFlag(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction))
			{
				return EquipmentIndex.ExtraWeaponSlot;
			}
			EquipmentIndex equipmentIndex = EquipmentIndex.None;
			if (equipmentIndex == EquipmentIndex.None)
			{
				for (EquipmentIndex equipmentIndex2 = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex2 < EquipmentIndex.ExtraWeaponSlot; equipmentIndex2++)
				{
					if (this[(int)equipmentIndex2].Item == null)
					{
						equipmentIndex = equipmentIndex2;
						break;
					}
				}
			}
			return equipmentIndex;
		}

		public bool IsEquipmentEqualTo(Equipment other)
		{
			if (other == null)
			{
				return false;
			}
			for (int i = 0; i < 12; i++)
			{
				if (!this[i].IsEqualTo(other[i]))
				{
					return false;
				}
			}
			return this.IsCivilian == other.IsCivilian;
		}

		public static Equipment GetRandomEquipmentElements(BasicCharacterObject character, bool randomEquipmentModifier, bool isCivilianEquipment = false, int seed = -1)
		{
			Equipment equipment = new Equipment(isCivilianEquipment);
			List<Equipment> list = character.AllEquipments.Where((Equipment eq) => eq.IsCivilian == isCivilianEquipment && !eq.IsEmpty()).ToList<Equipment>();
			if (list.IsEmpty<Equipment>())
			{
				return equipment;
			}
			int count = list.Count;
			Random random = new Random(seed);
			int num = MBRandom.RandomInt(count);
			int num2 = MBRandom.RandomInt(count);
			int num3 = MBRandom.RandomInt(count);
			for (int i = 0; i < 12; i++)
			{
				if (seed != -1)
				{
					num = random.Next() % count;
					num2 = random.Next() % count;
					num3 = random.Next() % count;
				}
				if (i > 1)
				{
					if (i - 2 > 1)
					{
						equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, num3, randomEquipmentModifier);
					}
					else
					{
						equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, num2, randomEquipmentModifier);
					}
				}
				else
				{
					equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, num, randomEquipmentModifier);
				}
			}
			return equipment;
		}

		public static void SwapWeapons(Equipment equipment, EquipmentIndex index1, EquipmentIndex index2)
		{
			EquipmentElement equipmentElement = equipment[index1];
			equipment[index1] = equipment[index2];
			equipment[index2] = equipmentElement;
		}

		private static EquipmentElement GetRandomizedEquipment(List<Equipment> equipmentSets, EquipmentIndex weaponSlot, int weaponSetNo, bool randomEquipmentModifier)
		{
			EquipmentElement equipmentFromSlot = equipmentSets[weaponSetNo].GetEquipmentFromSlot(weaponSlot);
			if (randomEquipmentModifier)
			{
				ItemObject item = equipmentFromSlot.Item;
				ItemModifier itemModifier;
				if (item == null)
				{
					itemModifier = null;
				}
				else
				{
					ItemComponent itemComponent = item.ItemComponent;
					if (itemComponent == null)
					{
						itemModifier = null;
					}
					else
					{
						ItemModifierGroup itemModifierGroup = itemComponent.ItemModifierGroup;
						itemModifier = ((itemModifierGroup != null) ? itemModifierGroup.GetRandomItemModifierLootScoreBased() : null);
					}
				}
				ItemModifier itemModifier2 = itemModifier;
				if (itemModifier2 != null)
				{
					equipmentFromSlot.SetModifier(itemModifier2);
				}
			}
			return equipmentFromSlot;
		}

		public void GetInitialWeaponIndicesToEquip(out EquipmentIndex mainHandWeaponIndex, out EquipmentIndex offHandWeaponIndex, out bool isMainHandNotUsableWithOneHand)
		{
			mainHandWeaponIndex = EquipmentIndex.None;
			offHandWeaponIndex = EquipmentIndex.None;
			isMainHandNotUsableWithOneHand = false;
			foreach (EquipmentIndex equipmentIndex in new EquipmentIndex[]
			{
				EquipmentIndex.ExtraWeaponSlot,
				EquipmentIndex.WeaponItemBeginSlot,
				EquipmentIndex.Weapon1,
				EquipmentIndex.Weapon2,
				EquipmentIndex.Weapon3
			})
			{
				if (!this[equipmentIndex].IsEmpty)
				{
					ItemObject item = this[equipmentIndex].Item;
					if (mainHandWeaponIndex == EquipmentIndex.None && !item.ItemFlags.HasAnyFlag(ItemFlags.HeldInOffHand))
					{
						mainHandWeaponIndex = equipmentIndex;
						if (item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
						{
							isMainHandNotUsableWithOneHand = true;
						}
					}
					else if (offHandWeaponIndex == EquipmentIndex.None && item.ItemFlags.HasAnyFlag(ItemFlags.HeldInOffHand))
					{
						offHandWeaponIndex = equipmentIndex;
						if (item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
						{
							mainHandWeaponIndex = EquipmentIndex.None;
							return;
						}
					}
				}
			}
		}

		[SaveableField(1)]
		private Equipment.EquipmentType _equipmentType;

		public const int EquipmentSlotLength = 12;

		[SaveableField(2)]
		private readonly EquipmentElement[] _itemSlots;

		public bool SyncEquipments;

		public const string NullCode = "@null";

		public enum EquipmentType
		{
			Invalid = -1,
			Battle,
			Civilian
		}

		public enum UnderwearTypes
		{
			NoUnderwear,
			FullUnderwear,
			OnlyTop
		}
	}
}
