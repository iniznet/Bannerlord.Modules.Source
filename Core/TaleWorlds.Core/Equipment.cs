using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000029 RID: 41
	public class Equipment
	{
		// Token: 0x0600028C RID: 652 RVA: 0x0000B581 File Offset: 0x00009781
		internal static void AutoGeneratedStaticCollectObjectsEquipment(object o, List<object> collectedObjects)
		{
			((Equipment)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600028D RID: 653 RVA: 0x0000B58F File Offset: 0x0000978F
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._itemSlots);
		}

		// Token: 0x0600028E RID: 654 RVA: 0x0000B59D File Offset: 0x0000979D
		internal static object AutoGeneratedGetMemberValue_equipmentType(object o)
		{
			return ((Equipment)o)._equipmentType;
		}

		// Token: 0x0600028F RID: 655 RVA: 0x0000B5AF File Offset: 0x000097AF
		internal static object AutoGeneratedGetMemberValue_itemSlots(object o)
		{
			return ((Equipment)o)._itemSlots;
		}

		// Token: 0x170000C5 RID: 197
		// (get) Token: 0x06000290 RID: 656 RVA: 0x0000B5BC File Offset: 0x000097BC
		public bool IsValid
		{
			get
			{
				return this._equipmentType != Equipment.EquipmentType.Invalid;
			}
		}

		// Token: 0x170000C6 RID: 198
		// (get) Token: 0x06000291 RID: 657 RVA: 0x0000B5CA File Offset: 0x000097CA
		public bool IsCivilian
		{
			get
			{
				return this._equipmentType == Equipment.EquipmentType.Civilian;
			}
		}

		// Token: 0x06000292 RID: 658 RVA: 0x0000B5D5 File Offset: 0x000097D5
		public Equipment()
		{
			this._itemSlots = new EquipmentElement[12];
			this._equipmentType = Equipment.EquipmentType.Invalid;
		}

		// Token: 0x06000293 RID: 659 RVA: 0x0000B5F1 File Offset: 0x000097F1
		public Equipment(bool isCivilian)
			: this()
		{
			this._itemSlots = new EquipmentElement[12];
			this._equipmentType = (isCivilian ? Equipment.EquipmentType.Civilian : Equipment.EquipmentType.Battle);
		}

		// Token: 0x06000294 RID: 660 RVA: 0x0000B614 File Offset: 0x00009814
		public Equipment(Equipment equipment)
		{
			this._itemSlots = new EquipmentElement[12];
			for (int i = 0; i < 12; i++)
			{
				this._itemSlots[i] = new EquipmentElement(equipment[i]);
			}
			this._equipmentType = equipment._equipmentType;
		}

		// Token: 0x170000C7 RID: 199
		public EquipmentElement this[int index]
		{
			get
			{
				return this._itemSlots[index];
			}
			set
			{
				Equipment.IsItemFitsToSlot((EquipmentIndex)index, value.Item);
				this._itemSlots[index] = value;
			}
		}

		// Token: 0x170000C8 RID: 200
		public EquipmentElement this[EquipmentIndex index]
		{
			get
			{
				return this._itemSlots[(int)index];
			}
			set
			{
				this[(int)index] = value;
			}
		}

		// Token: 0x170000C9 RID: 201
		// (get) Token: 0x06000299 RID: 665 RVA: 0x0000B6A8 File Offset: 0x000098A8
		public EquipmentElement Horse
		{
			get
			{
				return this._itemSlots[10];
			}
		}

		// Token: 0x0600029A RID: 666 RVA: 0x0000B6B7 File Offset: 0x000098B7
		private void SetItem(int index, EquipmentElement element)
		{
			this[index] = element;
		}

		// Token: 0x0600029B RID: 667 RVA: 0x0000B6C4 File Offset: 0x000098C4
		public Equipment Clone(bool cloneWithoutWeapons = false)
		{
			Equipment equipment = new Equipment(this.IsCivilian);
			for (int i = 0; i < 12; i++)
			{
				bool flag = cloneWithoutWeapons && i >= 0 && i < 5;
				equipment.SetItem(i, flag ? EquipmentElement.Invalid : this[i]);
			}
			return equipment;
		}

		// Token: 0x0600029C RID: 668 RVA: 0x0000B714 File Offset: 0x00009914
		public void FillFrom(Equipment sourceEquipment, bool useSourceEquipmentType = true)
		{
			if (useSourceEquipmentType)
			{
				this._equipmentType = sourceEquipment._equipmentType;
			}
			for (int i = 0; i < 12; i++)
			{
				this[i] = sourceEquipment[i];
			}
		}

		// Token: 0x0600029D RID: 669 RVA: 0x0000B74C File Offset: 0x0000994C
		public void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				this.DeserializeNode(objectManager, xmlNode);
			}
		}

		// Token: 0x0600029E RID: 670 RVA: 0x0000B7A8 File Offset: 0x000099A8
		public void DeserializeNode(MBObjectManager objectManager, XmlNode node)
		{
			if (node.NodeType == XmlNodeType.Comment)
			{
				return;
			}
			XmlAttributeCollection attributes = node.Attributes;
			XmlAttribute xmlAttribute = attributes["id"];
			XmlAttribute xmlAttribute2 = attributes["slot"];
			string text = (xmlAttribute.Value.Contains(".") ? xmlAttribute.Value.Split(new char[] { '.' })[1] : xmlAttribute.Value);
			EquipmentIndex equipmentIndexFromOldEquipmentIndexName = Equipment.GetEquipmentIndexFromOldEquipmentIndexName(xmlAttribute2.Value);
			ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>(text);
			if (Equipment.IsItemFitsToSlot(equipmentIndexFromOldEquipmentIndexName, @object))
			{
				this[equipmentIndexFromOldEquipmentIndexName] = new EquipmentElement(@object, null, null, false);
				return;
			}
			Debug.FailedAssert(((@object == null) ? TextObject.Empty : @object.Name) + " does not fit to slot " + equipmentIndexFromOldEquipmentIndexName, "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\Equipment.cs", "DeserializeNode", 161);
		}

		// Token: 0x0600029F RID: 671 RVA: 0x0000B87C File Offset: 0x00009A7C
		public static EquipmentIndex GetEquipmentIndexFromOldEquipmentIndexName(string oldEquipmentIndexName)
		{
			string text;
			if (!(oldEquipmentIndexName == "Item0"))
			{
				if (!(oldEquipmentIndexName == "Item1"))
				{
					if (!(oldEquipmentIndexName == "Item2"))
					{
						if (!(oldEquipmentIndexName == "Item3"))
						{
							if (!(oldEquipmentIndexName == "Item4"))
							{
								text = oldEquipmentIndexName;
							}
							else
							{
								text = "ExtraWeaponSlot";
							}
						}
						else
						{
							text = "Weapon3";
						}
					}
					else
					{
						text = "Weapon2";
					}
				}
				else
				{
					text = "Weapon1";
				}
			}
			else
			{
				text = "Weapon0";
			}
			return (EquipmentIndex)Enum.Parse(typeof(EquipmentIndex), text);
		}

		// Token: 0x060002A0 RID: 672 RVA: 0x0000B90B File Offset: 0x00009B0B
		public bool IsEmpty()
		{
			return this._itemSlots.All((EquipmentElement itemRosterElement) => itemRosterElement.Item == null);
		}

		// Token: 0x060002A1 RID: 673 RVA: 0x0000B938 File Offset: 0x00009B38
		public float GetTotalWeightOfArmor(bool forHuman)
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = (forHuman ? EquipmentIndex.NumAllWeaponSlots : EquipmentIndex.HorseHarness); equipmentIndex < (forHuman ? EquipmentIndex.ArmorItemEndSlot : EquipmentIndex.NumEquipmentSetSlots); equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (!equipmentElement.IsEmpty)
				{
					num += equipmentElement.GetEquipmentElementWeight();
				}
			}
			return num;
		}

		// Token: 0x060002A2 RID: 674 RVA: 0x0000B984 File Offset: 0x00009B84
		public float GetTotalWeightOfWeapons()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex < EquipmentIndex.NumAllWeaponSlots; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (!equipmentElement.IsEmpty)
				{
					num += equipmentElement.GetEquipmentElementWeight();
				}
			}
			return num;
		}

		// Token: 0x060002A3 RID: 675 RVA: 0x0000B9C0 File Offset: 0x00009BC0
		public float GetHeadArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedHeadArmor();
				}
			}
			return num;
		}

		// Token: 0x060002A4 RID: 676 RVA: 0x0000BA00 File Offset: 0x00009C00
		public float GetHumanBodyArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedBodyArmor();
				}
			}
			return num;
		}

		// Token: 0x060002A5 RID: 677 RVA: 0x0000BA40 File Offset: 0x00009C40
		public float GetLegArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedLegArmor();
				}
			}
			return num;
		}

		// Token: 0x060002A6 RID: 678 RVA: 0x0000BA80 File Offset: 0x00009C80
		public float GetArmArmorSum()
		{
			float num = 0f;
			for (EquipmentIndex equipmentIndex = EquipmentIndex.NumAllWeaponSlots; equipmentIndex < EquipmentIndex.ArmorItemEndSlot; equipmentIndex++)
			{
				EquipmentElement equipmentElement = this[equipmentIndex];
				if (equipmentElement.Item != null)
				{
					num += (float)equipmentElement.GetModifiedArmArmor();
				}
			}
			return num;
		}

		// Token: 0x060002A7 RID: 679 RVA: 0x0000BAC0 File Offset: 0x00009CC0
		public float GetHorseArmorSum()
		{
			float num = 0f;
			EquipmentIndex equipmentIndex = EquipmentIndex.HorseHarness;
			EquipmentElement equipmentElement = this[equipmentIndex];
			if (equipmentElement.Item != null)
			{
				num += (float)equipmentElement.GetModifiedMountBodyArmor();
			}
			return num;
		}

		// Token: 0x170000CA RID: 202
		// (get) Token: 0x060002A8 RID: 680 RVA: 0x0000BAF4 File Offset: 0x00009CF4
		public ArmorComponent.HairCoverTypes HairCoverType
		{
			get
			{
				ArmorComponent.HairCoverTypes hairCoverTypes = ArmorComponent.HairCoverTypes.None;
				ItemObject item = this[EquipmentIndex.NumAllWeaponSlots].Item;
				if (item != null)
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					hairCoverTypes = ((armorComponent != null) ? armorComponent.HairCoverType : ArmorComponent.HairCoverTypes.None);
				}
				else if (this[EquipmentIndex.Body].Item == null)
				{
					hairCoverTypes = ArmorComponent.HairCoverTypes.Type4;
				}
				return hairCoverTypes;
			}
		}

		// Token: 0x170000CB RID: 203
		// (get) Token: 0x060002A9 RID: 681 RVA: 0x0000BB40 File Offset: 0x00009D40
		public ArmorComponent.BeardCoverTypes BeardCoverType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.NumAllWeaponSlots].Item;
				ArmorComponent.BeardCoverTypes? beardCoverTypes;
				if (item == null)
				{
					beardCoverTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					beardCoverTypes = ((armorComponent != null) ? new ArmorComponent.BeardCoverTypes?(armorComponent.BeardCoverType) : null);
				}
				ArmorComponent.BeardCoverTypes? beardCoverTypes2 = beardCoverTypes;
				if (beardCoverTypes2 == null)
				{
					return ArmorComponent.BeardCoverTypes.None;
				}
				return beardCoverTypes2.GetValueOrDefault();
			}
		}

		// Token: 0x170000CC RID: 204
		// (get) Token: 0x060002AA RID: 682 RVA: 0x0000BB9C File Offset: 0x00009D9C
		public ArmorComponent.HorseHarnessCoverTypes ManeCoverType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.HorseHarness].Item;
				ArmorComponent.HorseHarnessCoverTypes? horseHarnessCoverTypes;
				if (item == null)
				{
					horseHarnessCoverTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					horseHarnessCoverTypes = ((armorComponent != null) ? new ArmorComponent.HorseHarnessCoverTypes?(armorComponent.ManeCoverType) : null);
				}
				ArmorComponent.HorseHarnessCoverTypes? horseHarnessCoverTypes2 = horseHarnessCoverTypes;
				if (horseHarnessCoverTypes2 == null)
				{
					return ArmorComponent.HorseHarnessCoverTypes.None;
				}
				return horseHarnessCoverTypes2.GetValueOrDefault();
			}
		}

		// Token: 0x170000CD RID: 205
		// (get) Token: 0x060002AB RID: 683 RVA: 0x0000BBFC File Offset: 0x00009DFC
		public string ReinsMeshName
		{
			get
			{
				ItemObject item = this[EquipmentIndex.HorseHarness].Item;
				string text;
				if (item == null)
				{
					text = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					text = ((armorComponent != null) ? armorComponent.ReinsMesh : null);
				}
				return text ?? "";
			}
		}

		// Token: 0x170000CE RID: 206
		// (get) Token: 0x060002AC RID: 684 RVA: 0x0000BC3A File Offset: 0x00009E3A
		public bool EarsAreHidden
		{
			get
			{
				return this.HairCoverType != ArmorComponent.HairCoverTypes.None && this.HairCoverType != ArmorComponent.HairCoverTypes.Type1 && this.HairCoverType != ArmorComponent.HairCoverTypes.Type4;
			}
		}

		// Token: 0x170000CF RID: 207
		// (get) Token: 0x060002AD RID: 685 RVA: 0x0000BC5B File Offset: 0x00009E5B
		public bool MouthIsHidden
		{
			get
			{
				return this.BeardCoverType == ArmorComponent.BeardCoverTypes.All;
			}
		}

		// Token: 0x170000D0 RID: 208
		// (get) Token: 0x060002AE RID: 686 RVA: 0x0000BC68 File Offset: 0x00009E68
		public ArmorComponent.BodyMeshTypes BodyMeshType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.Body].Item;
				ArmorComponent.BodyMeshTypes? bodyMeshTypes;
				if (item == null)
				{
					bodyMeshTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					bodyMeshTypes = ((armorComponent != null) ? new ArmorComponent.BodyMeshTypes?(armorComponent.BodyMeshType) : null);
				}
				ArmorComponent.BodyMeshTypes? bodyMeshTypes2 = bodyMeshTypes;
				if (bodyMeshTypes2 == null)
				{
					return ArmorComponent.BodyMeshTypes.Normal;
				}
				return bodyMeshTypes2.GetValueOrDefault();
			}
		}

		// Token: 0x170000D1 RID: 209
		// (get) Token: 0x060002AF RID: 687 RVA: 0x0000BCC4 File Offset: 0x00009EC4
		public ArmorComponent.BodyDeformTypes BodyDeformType
		{
			get
			{
				ItemObject item = this[EquipmentIndex.Body].Item;
				ArmorComponent.BodyDeformTypes? bodyDeformTypes;
				if (item == null)
				{
					bodyDeformTypes = null;
				}
				else
				{
					ArmorComponent armorComponent = item.ArmorComponent;
					bodyDeformTypes = ((armorComponent != null) ? new ArmorComponent.BodyDeformTypes?(armorComponent.BodyDeformType) : null);
				}
				ArmorComponent.BodyDeformTypes? bodyDeformTypes2 = bodyDeformTypes;
				if (bodyDeformTypes2 == null)
				{
					return ArmorComponent.BodyDeformTypes.Medium;
				}
				return bodyDeformTypes2.GetValueOrDefault();
			}
		}

		// Token: 0x060002B0 RID: 688 RVA: 0x0000BD20 File Offset: 0x00009F20
		public Equipment.UnderwearTypes GetUnderwearType(bool isFemale)
		{
			ItemObject item = this[EquipmentIndex.Body].Item;
			Equipment.UnderwearTypes underwearTypes;
			if (item == null)
			{
				underwearTypes = Equipment.UnderwearTypes.FullUnderwear;
			}
			else if (isFemale && item.DoesNotHideChest)
			{
				underwearTypes = Equipment.UnderwearTypes.OnlyTop;
			}
			else
			{
				underwearTypes = Equipment.UnderwearTypes.NoUnderwear;
			}
			return underwearTypes;
		}

		// Token: 0x060002B1 RID: 689 RVA: 0x0000BD58 File Offset: 0x00009F58
		public bool HasWeapon()
		{
			for (int i = 0; i < 5; i++)
			{
				EquipmentElement equipmentElement = this._itemSlots[i];
				if (!equipmentElement.IsEmpty && equipmentElement.Item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.WeaponMask))
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060002B2 RID: 690 RVA: 0x0000BDA4 File Offset: 0x00009FA4
		public bool HasWeaponOfClass(WeaponClass weaponClass)
		{
			for (int i = 0; i < 5; i++)
			{
				EquipmentElement equipmentElement = this._itemSlots[i];
				if (!equipmentElement.IsEmpty && equipmentElement.Item.PrimaryWeapon.WeaponClass == weaponClass)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060002B3 RID: 691 RVA: 0x0000BDEC File Offset: 0x00009FEC
		public static Equipment CreateFromEquipmentCode(string equipmentCode)
		{
			Equipment equipment = new Equipment();
			for (int i = 0; i < 12; i++)
			{
				equipment[i] = default(EquipmentElement);
			}
			string[] array = equipmentCode.Split(new char[] { '+' }, StringSplitOptions.RemoveEmptyEntries);
			for (int j = 0; j < array.Length; j++)
			{
				string[] array2 = array[j].Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
				int num = Convert.ToInt32(array2[0]);
				string text = array2[1];
				if (text != "@null")
				{
					ItemObject @object = MBObjectManager.Instance.GetObject<ItemObject>(text);
					string text2 = array2[2];
					ItemModifier itemModifier = null;
					if (text2 != "@null")
					{
						itemModifier = MBObjectManager.Instance.GetObject<ItemModifier>(text2);
					}
					EquipmentElement equipmentElement = new EquipmentElement(@object, itemModifier, null, false);
					equipment[num] = equipmentElement;
				}
			}
			return equipment;
		}

		// Token: 0x060002B4 RID: 692 RVA: 0x0000BEC8 File Offset: 0x0000A0C8
		public string CalculateEquipmentCode()
		{
			MBStringBuilder mbstringBuilder = default(MBStringBuilder);
			mbstringBuilder.Initialize(16, "CalculateEquipmentCode");
			for (int i = 0; i < 12; i++)
			{
				EquipmentElement equipmentElement = this[i];
				string text = ((equipmentElement.Item != null) ? equipmentElement.Item.StringId : "@null");
				string text2 = ((equipmentElement.ItemModifier != null) ? equipmentElement.ItemModifier.StringId : "@null");
				if (string.IsNullOrEmpty(text))
				{
					text = "@null";
				}
				if (string.IsNullOrEmpty(text2))
				{
					text2 = "@null";
				}
				mbstringBuilder.Append('+');
				mbstringBuilder.Append(i);
				mbstringBuilder.Append('-');
				mbstringBuilder.Append<string>(text);
				mbstringBuilder.Append('-');
				mbstringBuilder.Append<string>(text2);
			}
			return mbstringBuilder.ToStringAndRelease();
		}

		// Token: 0x060002B5 RID: 693 RVA: 0x0000BFA0 File Offset: 0x0000A1A0
		public void AddEquipmentToSlotWithoutAgent(EquipmentIndex equipmentIndex, EquipmentElement itemRosterElement)
		{
			this[equipmentIndex] = itemRosterElement;
		}

		// Token: 0x060002B6 RID: 694 RVA: 0x0000BFAA File Offset: 0x0000A1AA
		public EquipmentElement GetEquipmentFromSlot(EquipmentIndex equipmentIndex)
		{
			return this[equipmentIndex];
		}

		// Token: 0x060002B7 RID: 695 RVA: 0x0000BFB4 File Offset: 0x0000A1B4
		public static bool IsItemFitsToSlot(EquipmentIndex slotIndex, ItemObject item)
		{
			bool flag = false;
			if (item == null)
			{
				flag = true;
			}
			else
			{
				switch (item.ItemType)
				{
				case ItemObject.ItemTypeEnum.Invalid:
					flag = false;
					break;
				case ItemObject.ItemTypeEnum.Horse:
					flag = slotIndex == EquipmentIndex.ArmorItemEndSlot;
					break;
				case ItemObject.ItemTypeEnum.OneHandedWeapon:
				case ItemObject.ItemTypeEnum.TwoHandedWeapon:
				case ItemObject.ItemTypeEnum.Polearm:
				case ItemObject.ItemTypeEnum.Arrows:
				case ItemObject.ItemTypeEnum.Bolts:
				case ItemObject.ItemTypeEnum.Shield:
				case ItemObject.ItemTypeEnum.Bow:
				case ItemObject.ItemTypeEnum.Crossbow:
				case ItemObject.ItemTypeEnum.Thrown:
				case ItemObject.ItemTypeEnum.Pistol:
				case ItemObject.ItemTypeEnum.Musket:
				case ItemObject.ItemTypeEnum.Bullets:
				case ItemObject.ItemTypeEnum.Banner:
					if (item.ItemFlags.HasAnyFlag(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction))
					{
						flag = slotIndex == EquipmentIndex.ExtraWeaponSlot;
					}
					else
					{
						flag = slotIndex == EquipmentIndex.WeaponItemBeginSlot || slotIndex == EquipmentIndex.Weapon1 || slotIndex == EquipmentIndex.Weapon2 || slotIndex == EquipmentIndex.Weapon3;
					}
					break;
				case ItemObject.ItemTypeEnum.HeadArmor:
					flag = slotIndex == EquipmentIndex.NumAllWeaponSlots;
					break;
				case ItemObject.ItemTypeEnum.BodyArmor:
					flag = slotIndex == EquipmentIndex.Body;
					break;
				case ItemObject.ItemTypeEnum.LegArmor:
					flag = slotIndex == EquipmentIndex.Leg;
					break;
				case ItemObject.ItemTypeEnum.HandArmor:
					flag = slotIndex == EquipmentIndex.Gloves;
					break;
				case ItemObject.ItemTypeEnum.Animal:
					flag = slotIndex == EquipmentIndex.ArmorItemEndSlot;
					break;
				case ItemObject.ItemTypeEnum.Book:
					flag = false;
					break;
				case ItemObject.ItemTypeEnum.Cape:
					flag = slotIndex == EquipmentIndex.Cape;
					break;
				case ItemObject.ItemTypeEnum.HorseHarness:
					flag = slotIndex == EquipmentIndex.HorseHarness;
					break;
				}
			}
			return flag;
		}

		// Token: 0x060002B8 RID: 696 RVA: 0x0000C0B4 File Offset: 0x0000A2B4
		public EquipmentIndex GetWeaponPickUpSlotIndex(EquipmentElement itemRosterElement, bool isStuckMissile)
		{
			if (itemRosterElement.Item.ItemFlags.HasAnyFlag(ItemFlags.DropOnWeaponChange | ItemFlags.DropOnAnyAction))
			{
				return EquipmentIndex.ExtraWeaponSlot;
			}
			EquipmentIndex equipmentIndex = EquipmentIndex.None;
			if (equipmentIndex == EquipmentIndex.None)
			{
				for (EquipmentIndex equipmentIndex2 = EquipmentIndex.WeaponItemBeginSlot; equipmentIndex2 < EquipmentIndex.ExtraWeaponSlot; equipmentIndex2++)
				{
					if (this[(int)equipmentIndex2].Item == null)
					{
						equipmentIndex = equipmentIndex2;
						break;
					}
				}
			}
			return equipmentIndex;
		}

		// Token: 0x060002B9 RID: 697 RVA: 0x0000C104 File Offset: 0x0000A304
		public bool IsEquipmentEqualTo(Equipment other)
		{
			if (other == null)
			{
				return false;
			}
			for (int i = 0; i < 12; i++)
			{
				if (!this[i].IsEqualTo(other[i]))
				{
					return false;
				}
			}
			return this.IsCivilian == other.IsCivilian;
		}

		// Token: 0x060002BA RID: 698 RVA: 0x0000C14C File Offset: 0x0000A34C
		public static Equipment GetRandomEquipmentElements(BasicCharacterObject character, bool randomEquipmentModifier, bool isCivilianEquipment = false, int seed = -1)
		{
			Equipment equipment = new Equipment(isCivilianEquipment);
			List<Equipment> list = character.AllEquipments.Where((Equipment eq) => eq.IsCivilian == isCivilianEquipment && !eq.IsEmpty()).ToList<Equipment>();
			if (list.IsEmpty<Equipment>())
			{
				return equipment;
			}
			int count = list.Count;
			Random random = new Random(seed);
			int num = MBRandom.RandomInt(count);
			int num2 = MBRandom.RandomInt(count);
			int num3 = MBRandom.RandomInt(count);
			for (int i = 0; i < 12; i++)
			{
				if (seed != -1)
				{
					num = random.Next() % count;
					num2 = random.Next() % count;
					num3 = random.Next() % count;
				}
				if (i > 1)
				{
					if (i - 2 > 1)
					{
						equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, num3, randomEquipmentModifier);
					}
					else
					{
						equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, num2, randomEquipmentModifier);
					}
				}
				else
				{
					equipment[i] = Equipment.GetRandomizedEquipment(list, (EquipmentIndex)i, num, randomEquipmentModifier);
				}
			}
			return equipment;
		}

		// Token: 0x060002BB RID: 699 RVA: 0x0000C244 File Offset: 0x0000A444
		public static void SwapWeapons(Equipment equipment, EquipmentIndex index1, EquipmentIndex index2)
		{
			EquipmentElement equipmentElement = equipment[index1];
			equipment[index1] = equipment[index2];
			equipment[index2] = equipmentElement;
		}

		// Token: 0x060002BC RID: 700 RVA: 0x0000C270 File Offset: 0x0000A470
		private static EquipmentElement GetRandomizedEquipment(List<Equipment> equipmentSets, EquipmentIndex weaponSlot, int weaponSetNo, bool randomEquipmentModifier)
		{
			EquipmentElement equipmentFromSlot = equipmentSets[weaponSetNo].GetEquipmentFromSlot(weaponSlot);
			if (randomEquipmentModifier)
			{
				ItemObject item = equipmentFromSlot.Item;
				ItemModifier itemModifier;
				if (item == null)
				{
					itemModifier = null;
				}
				else
				{
					ItemComponent itemComponent = item.ItemComponent;
					if (itemComponent == null)
					{
						itemModifier = null;
					}
					else
					{
						ItemModifierGroup itemModifierGroup = itemComponent.ItemModifierGroup;
						itemModifier = ((itemModifierGroup != null) ? itemModifierGroup.GetRandomItemModifierLootScoreBased() : null);
					}
				}
				ItemModifier itemModifier2 = itemModifier;
				if (itemModifier2 != null)
				{
					equipmentFromSlot.SetModifier(itemModifier2);
				}
			}
			return equipmentFromSlot;
		}

		// Token: 0x060002BD RID: 701 RVA: 0x0000C2C8 File Offset: 0x0000A4C8
		public void GetInitialWeaponIndicesToEquip(out EquipmentIndex mainHandWeaponIndex, out EquipmentIndex offHandWeaponIndex, out bool isMainHandNotUsableWithOneHand)
		{
			mainHandWeaponIndex = EquipmentIndex.None;
			offHandWeaponIndex = EquipmentIndex.None;
			isMainHandNotUsableWithOneHand = false;
			foreach (EquipmentIndex equipmentIndex in new EquipmentIndex[]
			{
				EquipmentIndex.ExtraWeaponSlot,
				EquipmentIndex.WeaponItemBeginSlot,
				EquipmentIndex.Weapon1,
				EquipmentIndex.Weapon2,
				EquipmentIndex.Weapon3
			})
			{
				if (!this[equipmentIndex].IsEmpty)
				{
					ItemObject item = this[equipmentIndex].Item;
					if (mainHandWeaponIndex == EquipmentIndex.None && !item.ItemFlags.HasAnyFlag(ItemFlags.HeldInOffHand))
					{
						mainHandWeaponIndex = equipmentIndex;
						if (item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
						{
							isMainHandNotUsableWithOneHand = true;
						}
					}
					else if (offHandWeaponIndex == EquipmentIndex.None && item.ItemFlags.HasAnyFlag(ItemFlags.HeldInOffHand))
					{
						offHandWeaponIndex = equipmentIndex;
						if (item.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
						{
							mainHandWeaponIndex = EquipmentIndex.None;
							return;
						}
					}
				}
			}
		}

		// Token: 0x040001AD RID: 429
		[SaveableField(1)]
		private Equipment.EquipmentType _equipmentType;

		// Token: 0x040001AE RID: 430
		public const int EquipmentSlotLength = 12;

		// Token: 0x040001AF RID: 431
		[SaveableField(2)]
		private readonly EquipmentElement[] _itemSlots;

		// Token: 0x040001B0 RID: 432
		public bool SyncEquipments;

		// Token: 0x040001B1 RID: 433
		public const string NullCode = "@null";

		// Token: 0x020000DE RID: 222
		public enum EquipmentType
		{
			// Token: 0x04000636 RID: 1590
			Invalid = -1,
			// Token: 0x04000637 RID: 1591
			Battle,
			// Token: 0x04000638 RID: 1592
			Civilian
		}

		// Token: 0x020000DF RID: 223
		public enum UnderwearTypes
		{
			// Token: 0x0400063A RID: 1594
			NoUnderwear,
			// Token: 0x0400063B RID: 1595
			FullUnderwear,
			// Token: 0x0400063C RID: 1596
			OnlyTop
		}
	}
}
