using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000037 RID: 55
	public sealed class SiegeEngineType : MBObjectBase
	{
		// Token: 0x060003ED RID: 1005 RVA: 0x0000F794 File Offset: 0x0000D994
		internal static void AutoGeneratedStaticCollectObjectsSiegeEngineType(object o, List<object> collectedObjects)
		{
			((SiegeEngineType)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060003EE RID: 1006 RVA: 0x0000F7A2 File Offset: 0x0000D9A2
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x17000149 RID: 329
		// (get) Token: 0x060003EF RID: 1007 RVA: 0x0000F7AB File Offset: 0x0000D9AB
		// (set) Token: 0x060003F0 RID: 1008 RVA: 0x0000F7B3 File Offset: 0x0000D9B3
		public int Difficulty { get; private set; }

		// Token: 0x1700014A RID: 330
		// (get) Token: 0x060003F1 RID: 1009 RVA: 0x0000F7BC File Offset: 0x0000D9BC
		// (set) Token: 0x060003F2 RID: 1010 RVA: 0x0000F7C4 File Offset: 0x0000D9C4
		public int BaseHitPoints { get; private set; }

		// Token: 0x1700014B RID: 331
		// (get) Token: 0x060003F3 RID: 1011 RVA: 0x0000F7CD File Offset: 0x0000D9CD
		// (set) Token: 0x060003F4 RID: 1012 RVA: 0x0000F7D5 File Offset: 0x0000D9D5
		public int ToolCost { get; private set; }

		// Token: 0x1700014C RID: 332
		// (get) Token: 0x060003F5 RID: 1013 RVA: 0x0000F7DE File Offset: 0x0000D9DE
		// (set) Token: 0x060003F6 RID: 1014 RVA: 0x0000F7E6 File Offset: 0x0000D9E6
		public float HitChance { get; private set; }

		// Token: 0x1700014D RID: 333
		// (get) Token: 0x060003F7 RID: 1015 RVA: 0x0000F7EF File Offset: 0x0000D9EF
		// (set) Token: 0x060003F8 RID: 1016 RVA: 0x0000F7F7 File Offset: 0x0000D9F7
		public bool IsAntiPersonnel { get; private set; }

		// Token: 0x1700014E RID: 334
		// (get) Token: 0x060003F9 RID: 1017 RVA: 0x0000F800 File Offset: 0x0000DA00
		// (set) Token: 0x060003FA RID: 1018 RVA: 0x0000F808 File Offset: 0x0000DA08
		public float AntiPersonnelHitChance { get; private set; }

		// Token: 0x1700014F RID: 335
		// (get) Token: 0x060003FB RID: 1019 RVA: 0x0000F811 File Offset: 0x0000DA11
		// (set) Token: 0x060003FC RID: 1020 RVA: 0x0000F819 File Offset: 0x0000DA19
		public bool IsConstructible { get; private set; }

		// Token: 0x17000150 RID: 336
		// (get) Token: 0x060003FD RID: 1021 RVA: 0x0000F822 File Offset: 0x0000DA22
		// (set) Token: 0x060003FE RID: 1022 RVA: 0x0000F82A File Offset: 0x0000DA2A
		public bool IsRanged { get; private set; }

		// Token: 0x17000151 RID: 337
		// (get) Token: 0x060003FF RID: 1023 RVA: 0x0000F833 File Offset: 0x0000DA33
		// (set) Token: 0x06000400 RID: 1024 RVA: 0x0000F83B File Offset: 0x0000DA3B
		public int Damage { get; private set; }

		// Token: 0x17000152 RID: 338
		// (get) Token: 0x06000401 RID: 1025 RVA: 0x0000F844 File Offset: 0x0000DA44
		// (set) Token: 0x06000402 RID: 1026 RVA: 0x0000F84C File Offset: 0x0000DA4C
		public int ManDayCost { get; private set; }

		// Token: 0x17000153 RID: 339
		// (get) Token: 0x06000403 RID: 1027 RVA: 0x0000F855 File Offset: 0x0000DA55
		// (set) Token: 0x06000404 RID: 1028 RVA: 0x0000F85D File Offset: 0x0000DA5D
		public float CampaignRateOfFirePerDay { get; private set; }

		// Token: 0x17000154 RID: 340
		// (get) Token: 0x06000405 RID: 1029 RVA: 0x0000F866 File Offset: 0x0000DA66
		// (set) Token: 0x06000406 RID: 1030 RVA: 0x0000F86E File Offset: 0x0000DA6E
		public float MovementSpeed { get; private set; }

		// Token: 0x17000155 RID: 341
		// (get) Token: 0x06000407 RID: 1031 RVA: 0x0000F877 File Offset: 0x0000DA77
		// (set) Token: 0x06000408 RID: 1032 RVA: 0x0000F87F File Offset: 0x0000DA7F
		public float ProjectileSpeed { get; private set; }

		// Token: 0x17000156 RID: 342
		// (get) Token: 0x06000409 RID: 1033 RVA: 0x0000F888 File Offset: 0x0000DA88
		// (set) Token: 0x0600040A RID: 1034 RVA: 0x0000F890 File Offset: 0x0000DA90
		public TextObject Name { get; private set; }

		// Token: 0x17000157 RID: 343
		// (get) Token: 0x0600040B RID: 1035 RVA: 0x0000F899 File Offset: 0x0000DA99
		// (set) Token: 0x0600040C RID: 1036 RVA: 0x0000F8A1 File Offset: 0x0000DAA1
		public TextObject Description { get; private set; }

		// Token: 0x0600040D RID: 1037 RVA: 0x0000F8AA File Offset: 0x0000DAAA
		public override string ToString()
		{
			return this.Name.ToString();
		}

		// Token: 0x0600040E RID: 1038 RVA: 0x0000F8B8 File Offset: 0x0000DAB8
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(node.Attributes["name"].InnerText, null);
			this.Description = new TextObject(node.Attributes["description"].InnerText, null);
			XmlAttribute xmlAttribute = node.Attributes["max_hit_points"];
			if (xmlAttribute != null)
			{
				this.BaseHitPoints = Convert.ToInt32(xmlAttribute.Value);
			}
			else
			{
				this.BaseHitPoints = 1;
			}
			XmlAttribute xmlAttribute2 = node.Attributes["difficulty"];
			this.Difficulty = Convert.ToInt32((xmlAttribute2 != null) ? xmlAttribute2.Value : null);
			this.ToolCost = Convert.ToInt32(node.Attributes["tool_cost"].Value);
			this.HitChance = (float)Convert.ToDouble(node.Attributes["hit_chance"].Value);
			this.IsAntiPersonnel = Convert.ToBoolean(node.Attributes["is_anti_personnel"].Value);
			this.AntiPersonnelHitChance = (this.IsAntiPersonnel ? ((float)Convert.ToDouble(node.Attributes["anti_personnel_hit_chance"].Value)) : 0f);
			this.IsConstructible = Convert.ToBoolean(node.Attributes["is_constructible"].Value);
			this.IsRanged = Convert.ToBoolean(node.Attributes["is_ranged"].Value);
			this.Damage = Convert.ToInt32(node.Attributes["damage"].Value);
			this.ManDayCost = Convert.ToInt32(node.Attributes["man_day_cost"].Value);
			this.CampaignRateOfFirePerDay = (float)Convert.ToDouble(node.Attributes["campaign_rate_of_fire_per_day"].Value);
			this.MovementSpeed = (float)Convert.ToDouble(node.Attributes["movement_speed"].Value);
			this.ProjectileSpeed = (float)Convert.ToDouble(node.Attributes["projectile_speed"].Value);
		}
	}
}
