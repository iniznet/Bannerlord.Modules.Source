using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	public sealed class SiegeEngineType : MBObjectBase
	{
		internal static void AutoGeneratedStaticCollectObjectsSiegeEngineType(object o, List<object> collectedObjects)
		{
			((SiegeEngineType)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public int Difficulty { get; private set; }

		public int BaseHitPoints { get; private set; }

		public int ToolCost { get; private set; }

		public float HitChance { get; private set; }

		public bool IsAntiPersonnel { get; private set; }

		public float AntiPersonnelHitChance { get; private set; }

		public bool IsConstructible { get; private set; }

		public bool IsRanged { get; private set; }

		public int Damage { get; private set; }

		public int ManDayCost { get; private set; }

		public float CampaignRateOfFirePerDay { get; private set; }

		public float MovementSpeed { get; private set; }

		public float ProjectileSpeed { get; private set; }

		public TextObject Name { get; private set; }

		public TextObject Description { get; private set; }

		public override string ToString()
		{
			return this.Name.ToString();
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(node.Attributes["name"].InnerText, null);
			this.Description = new TextObject(node.Attributes["description"].InnerText, null);
			XmlAttribute xmlAttribute = node.Attributes["max_hit_points"];
			if (xmlAttribute != null)
			{
				this.BaseHitPoints = Convert.ToInt32(xmlAttribute.Value);
			}
			else
			{
				this.BaseHitPoints = 1;
			}
			XmlAttribute xmlAttribute2 = node.Attributes["difficulty"];
			this.Difficulty = Convert.ToInt32((xmlAttribute2 != null) ? xmlAttribute2.Value : null);
			this.ToolCost = Convert.ToInt32(node.Attributes["tool_cost"].Value);
			this.HitChance = (float)Convert.ToDouble(node.Attributes["hit_chance"].Value);
			this.IsAntiPersonnel = Convert.ToBoolean(node.Attributes["is_anti_personnel"].Value);
			this.AntiPersonnelHitChance = (this.IsAntiPersonnel ? ((float)Convert.ToDouble(node.Attributes["anti_personnel_hit_chance"].Value)) : 0f);
			this.IsConstructible = Convert.ToBoolean(node.Attributes["is_constructible"].Value);
			this.IsRanged = Convert.ToBoolean(node.Attributes["is_ranged"].Value);
			this.Damage = Convert.ToInt32(node.Attributes["damage"].Value);
			this.ManDayCost = Convert.ToInt32(node.Attributes["man_day_cost"].Value);
			this.CampaignRateOfFirePerDay = (float)Convert.ToDouble(node.Attributes["campaign_rate_of_fire_per_day"].Value);
			this.MovementSpeed = (float)Convert.ToDouble(node.Attributes["movement_speed"].Value);
			this.ProjectileSpeed = (float)Convert.ToDouble(node.Attributes["projectile_speed"].Value);
		}
	}
}
