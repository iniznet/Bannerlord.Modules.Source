using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	public class ItemModifierGroup : MBObjectBase
	{
		internal static void AutoGeneratedStaticCollectObjectsItemModifierGroup(object o, List<object> collectedObjects)
		{
			((ItemModifierGroup)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public int NoModifierLootScore { get; private set; }

		public int NoModifierProductionScore { get; private set; }

		public MBReadOnlyList<ItemModifier> ItemModifiers
		{
			get
			{
				return this._itemModifiers;
			}
		}

		public ItemModifierGroup()
			: base("")
		{
		}

		public ItemModifierGroup(string id)
			: base(id)
		{
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.NoModifierLootScore = XmlHelper.ReadInt(node, "no_modifier_loot_score");
			this.NoModifierProductionScore = XmlHelper.ReadInt(node, "no_modifier_production_score");
		}

		public void AddItemModifier(ItemModifier itemModifier)
		{
			this._itemModifiers.Add(itemModifier);
		}

		public ItemModifier GetRandomItemModifierLootScoreBased()
		{
			return this.GetRandomItemModifier(true);
		}

		public ItemModifier GetRandomItemModifierProductionScoreBased()
		{
			return this.GetRandomItemModifier(false);
		}

		private ItemModifier GetRandomItemModifier(bool useLootScores)
		{
			List<ValueTuple<ItemModifier, float>> list = (from modifier in this.ItemModifiers
				let score = useLootScores ? modifier.LootDropScore : modifier.ProductionDropScore
				select new ValueTuple<ItemModifier, float>(modifier, score)).ToList<ValueTuple<ItemModifier, float>>();
			ValueTuple<ItemModifier, float> valueTuple = new ValueTuple<ItemModifier, float>(null, (float)(useLootScores ? this.NoModifierLootScore : this.NoModifierProductionScore));
			list.Add(valueTuple);
			return MBRandom.ChooseWeighted<ItemModifier>(list);
		}

		private readonly MBList<ItemModifier> _itemModifiers = new MBList<ItemModifier>();
	}
}
