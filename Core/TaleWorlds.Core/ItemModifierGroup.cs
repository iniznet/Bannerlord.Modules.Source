using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000030 RID: 48
	public class ItemModifierGroup : MBObjectBase
	{
		// Token: 0x06000335 RID: 821 RVA: 0x0000D070 File Offset: 0x0000B270
		internal static void AutoGeneratedStaticCollectObjectsItemModifierGroup(object o, List<object> collectedObjects)
		{
			((ItemModifierGroup)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000336 RID: 822 RVA: 0x0000D07E File Offset: 0x0000B27E
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x170000FE RID: 254
		// (get) Token: 0x06000337 RID: 823 RVA: 0x0000D087 File Offset: 0x0000B287
		// (set) Token: 0x06000338 RID: 824 RVA: 0x0000D08F File Offset: 0x0000B28F
		public int NoModifierLootScore { get; private set; }

		// Token: 0x170000FF RID: 255
		// (get) Token: 0x06000339 RID: 825 RVA: 0x0000D098 File Offset: 0x0000B298
		// (set) Token: 0x0600033A RID: 826 RVA: 0x0000D0A0 File Offset: 0x0000B2A0
		public int NoModifierProductionScore { get; private set; }

		// Token: 0x17000100 RID: 256
		// (get) Token: 0x0600033B RID: 827 RVA: 0x0000D0A9 File Offset: 0x0000B2A9
		public MBReadOnlyList<ItemModifier> ItemModifiers
		{
			get
			{
				return this._itemModifiers;
			}
		}

		// Token: 0x0600033C RID: 828 RVA: 0x0000D0B1 File Offset: 0x0000B2B1
		public ItemModifierGroup()
			: base("")
		{
		}

		// Token: 0x0600033D RID: 829 RVA: 0x0000D0C9 File Offset: 0x0000B2C9
		public ItemModifierGroup(string id)
			: base(id)
		{
		}

		// Token: 0x0600033E RID: 830 RVA: 0x0000D0DD File Offset: 0x0000B2DD
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.NoModifierLootScore = XmlHelper.ReadInt(node, "no_modifier_loot_score");
			this.NoModifierProductionScore = XmlHelper.ReadInt(node, "no_modifier_production_score");
		}

		// Token: 0x0600033F RID: 831 RVA: 0x0000D109 File Offset: 0x0000B309
		public void AddItemModifier(ItemModifier itemModifier)
		{
			this._itemModifiers.Add(itemModifier);
		}

		// Token: 0x06000340 RID: 832 RVA: 0x0000D117 File Offset: 0x0000B317
		public ItemModifier GetRandomItemModifierLootScoreBased()
		{
			return this.GetRandomItemModifier(true);
		}

		// Token: 0x06000341 RID: 833 RVA: 0x0000D120 File Offset: 0x0000B320
		public ItemModifier GetRandomItemModifierProductionScoreBased()
		{
			return this.GetRandomItemModifier(false);
		}

		// Token: 0x06000342 RID: 834 RVA: 0x0000D12C File Offset: 0x0000B32C
		private ItemModifier GetRandomItemModifier(bool useLootScores)
		{
			List<ValueTuple<ItemModifier, float>> list = (from modifier in this.ItemModifiers
				let score = useLootScores ? modifier.LootDropScore : modifier.ProductionDropScore
				select new ValueTuple<ItemModifier, float>(modifier, score)).ToList<ValueTuple<ItemModifier, float>>();
			ValueTuple<ItemModifier, float> valueTuple = new ValueTuple<ItemModifier, float>(null, (float)(useLootScores ? this.NoModifierLootScore : this.NoModifierProductionScore));
			list.Add(valueTuple);
			return MBRandom.ChooseWeighted<ItemModifier>(list);
		}

		// Token: 0x040001DB RID: 475
		private readonly MBList<ItemModifier> _itemModifiers = new MBList<ItemModifier>();
	}
}
