using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x0200002F RID: 47
	public sealed class ItemModifier : MBObjectBase
	{
		// Token: 0x0600031C RID: 796 RVA: 0x0000CD11 File Offset: 0x0000AF11
		internal static void AutoGeneratedStaticCollectObjectsItemModifier(object o, List<object> collectedObjects)
		{
			((ItemModifier)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600031D RID: 797 RVA: 0x0000CD1F File Offset: 0x0000AF1F
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x170000FA RID: 250
		// (get) Token: 0x0600031E RID: 798 RVA: 0x0000CD28 File Offset: 0x0000AF28
		// (set) Token: 0x0600031F RID: 799 RVA: 0x0000CD30 File Offset: 0x0000AF30
		[CachedData]
		public TextObject Name { get; private set; }

		// Token: 0x170000FB RID: 251
		// (get) Token: 0x06000320 RID: 800 RVA: 0x0000CD39 File Offset: 0x0000AF39
		// (set) Token: 0x06000321 RID: 801 RVA: 0x0000CD41 File Offset: 0x0000AF41
		public float LootDropScore { get; private set; }

		// Token: 0x170000FC RID: 252
		// (get) Token: 0x06000322 RID: 802 RVA: 0x0000CD4A File Offset: 0x0000AF4A
		// (set) Token: 0x06000323 RID: 803 RVA: 0x0000CD52 File Offset: 0x0000AF52
		public float ProductionDropScore { get; private set; }

		// Token: 0x170000FD RID: 253
		// (get) Token: 0x06000324 RID: 804 RVA: 0x0000CD5B File Offset: 0x0000AF5B
		// (set) Token: 0x06000325 RID: 805 RVA: 0x0000CD63 File Offset: 0x0000AF63
		public float PriceMultiplier { get; private set; }

		// Token: 0x06000326 RID: 806 RVA: 0x0000CD6C File Offset: 0x0000AF6C
		public ItemModifier()
		{
			this.Name = TextObject.Empty;
		}

		// Token: 0x06000327 RID: 807 RVA: 0x0000CD80 File Offset: 0x0000AF80
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(XmlHelper.ReadString(node, "name"), null);
			this._damage = XmlHelper.ReadInt(node, "damage");
			this._speed = XmlHelper.ReadInt(node, "speed");
			this._missileSpeed = XmlHelper.ReadInt(node, "missile_speed");
			this._armor = XmlHelper.ReadInt(node, "armor");
			this._mountSpeed = XmlHelper.ReadFloat(node, "horse_speed", 0f);
			this._maneuver = XmlHelper.ReadFloat(node, "maneuver", 0f);
			this._chargeDamage = XmlHelper.ReadFloat(node, "charge_damage", 0f);
			this._mountHitPoints = XmlHelper.ReadFloat(node, "horse_hit_points", 0f);
			this._hitPoints = (short)XmlHelper.ReadInt(node, "hit_points");
			this._stackCount = (short)XmlHelper.ReadInt(node, "stack_count");
			this.LootDropScore = (float)XmlHelper.ReadInt(node, "loot_drop_score");
			this.ProductionDropScore = (float)XmlHelper.ReadInt(node, "production_drop_score");
			this.PriceMultiplier = XmlHelper.ReadFloat(node, "price_factor", 1f);
			ItemModifierGroup itemModifierGroup = MBObjectManager.Instance.ReadObjectReferenceFromXml<ItemModifierGroup>("modifier_group", node);
			if (itemModifierGroup == null)
			{
				return;
			}
			itemModifierGroup.AddItemModifier(this);
		}

		// Token: 0x06000328 RID: 808 RVA: 0x0000CEC1 File Offset: 0x0000B0C1
		public bool Equals(ItemModifier other)
		{
			return other != null && base.StringId == other.StringId;
		}

		// Token: 0x06000329 RID: 809 RVA: 0x0000CED9 File Offset: 0x0000B0D9
		public override int GetHashCode()
		{
			return base.StringId.GetDeterministicHashCode();
		}

		// Token: 0x0600032A RID: 810 RVA: 0x0000CEE6 File Offset: 0x0000B0E6
		private static int ModifyFactor(int baseValue, float factor)
		{
			if (baseValue == 0)
			{
				return 0;
			}
			if (!MBMath.ApproximatelyEquals(factor, 0f, 1E-05f))
			{
				baseValue = ((factor < 1f) ? MathF.Ceiling(factor * (float)baseValue) : MathF.Floor(factor * (float)baseValue));
			}
			return baseValue;
		}

		// Token: 0x0600032B RID: 811 RVA: 0x0000CF20 File Offset: 0x0000B120
		public int ModifyDamage(int baseDamage)
		{
			int num = baseDamage + this._damage;
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600032C RID: 812 RVA: 0x0000CF40 File Offset: 0x0000B140
		public int ModifySpeed(int baseSpeed)
		{
			int num = baseSpeed + this._speed;
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600032D RID: 813 RVA: 0x0000CF60 File Offset: 0x0000B160
		public int ModifyMountSpeed(int baseSpeed)
		{
			int num = ItemModifier.ModifyFactor(baseSpeed, this._mountSpeed);
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600032E RID: 814 RVA: 0x0000CF84 File Offset: 0x0000B184
		public int ModifyMountManeuver(int baseManeuver)
		{
			int num = ItemModifier.ModifyFactor(baseManeuver, this._maneuver);
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x0600032F RID: 815 RVA: 0x0000CFA8 File Offset: 0x0000B1A8
		public int ModifyMountCharge(int baseCharge)
		{
			int num = ItemModifier.ModifyFactor(baseCharge, this._chargeDamage);
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x06000330 RID: 816 RVA: 0x0000CFCC File Offset: 0x0000B1CC
		public int ModifyMountHitPoints(int baseCharge)
		{
			int num = ItemModifier.ModifyFactor(baseCharge, this._mountHitPoints);
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x06000331 RID: 817 RVA: 0x0000CFF0 File Offset: 0x0000B1F0
		public int ModifyMissileSpeed(int baseSpeed)
		{
			int num = baseSpeed + this._missileSpeed;
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x06000332 RID: 818 RVA: 0x0000D010 File Offset: 0x0000B210
		public int ModifyArmor(int armorValue)
		{
			int num = armorValue + this._armor;
			return MBMath.ClampInt(num, 1, num);
		}

		// Token: 0x06000333 RID: 819 RVA: 0x0000D030 File Offset: 0x0000B230
		public short ModifyHitPoints(short baseHitPoints)
		{
			short num = baseHitPoints + this._hitPoints;
			return (short)MBMath.ClampInt((int)num, 1, (int)num);
		}

		// Token: 0x06000334 RID: 820 RVA: 0x0000D050 File Offset: 0x0000B250
		public short ModifyStackCount(short baseStackCount)
		{
			short num = baseStackCount + this._stackCount;
			return (short)MBMath.ClampInt((int)num, 1, (int)num);
		}

		// Token: 0x040001CC RID: 460
		private int _damage;

		// Token: 0x040001CD RID: 461
		private int _speed;

		// Token: 0x040001CE RID: 462
		private int _missileSpeed;

		// Token: 0x040001CF RID: 463
		private int _armor;

		// Token: 0x040001D0 RID: 464
		private short _hitPoints;

		// Token: 0x040001D1 RID: 465
		private short _stackCount;

		// Token: 0x040001D2 RID: 466
		private float _mountSpeed;

		// Token: 0x040001D3 RID: 467
		private float _maneuver;

		// Token: 0x040001D4 RID: 468
		private float _chargeDamage;

		// Token: 0x040001D5 RID: 469
		private float _mountHitPoints;
	}
}
