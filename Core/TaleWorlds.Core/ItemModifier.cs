using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	public sealed class ItemModifier : MBObjectBase
	{
		internal static void AutoGeneratedStaticCollectObjectsItemModifier(object o, List<object> collectedObjects)
		{
			((ItemModifier)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		[CachedData]
		public TextObject Name { get; private set; }

		public float LootDropScore { get; private set; }

		public float ProductionDropScore { get; private set; }

		public float PriceMultiplier { get; private set; }

		public ItemModifier()
		{
			this.Name = TextObject.Empty;
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Name = new TextObject(XmlHelper.ReadString(node, "name"), null);
			this._damage = XmlHelper.ReadInt(node, "damage");
			this._speed = XmlHelper.ReadInt(node, "speed");
			this._missileSpeed = XmlHelper.ReadInt(node, "missile_speed");
			this._armor = XmlHelper.ReadInt(node, "armor");
			this._mountSpeed = XmlHelper.ReadFloat(node, "horse_speed", 0f);
			this._maneuver = XmlHelper.ReadFloat(node, "maneuver", 0f);
			this._chargeDamage = XmlHelper.ReadFloat(node, "charge_damage", 0f);
			this._mountHitPoints = XmlHelper.ReadFloat(node, "horse_hit_points", 0f);
			this._hitPoints = (short)XmlHelper.ReadInt(node, "hit_points");
			this._stackCount = (short)XmlHelper.ReadInt(node, "stack_count");
			this.LootDropScore = (float)XmlHelper.ReadInt(node, "loot_drop_score");
			this.ProductionDropScore = (float)XmlHelper.ReadInt(node, "production_drop_score");
			this.PriceMultiplier = XmlHelper.ReadFloat(node, "price_factor", 1f);
			ItemModifierGroup itemModifierGroup = MBObjectManager.Instance.ReadObjectReferenceFromXml<ItemModifierGroup>("modifier_group", node);
			if (itemModifierGroup == null)
			{
				return;
			}
			itemModifierGroup.AddItemModifier(this);
		}

		public bool Equals(ItemModifier other)
		{
			return other != null && base.StringId == other.StringId;
		}

		public override int GetHashCode()
		{
			return base.StringId.GetDeterministicHashCode();
		}

		private static int ModifyFactor(int baseValue, float factor)
		{
			if (baseValue == 0)
			{
				return 0;
			}
			if (!MBMath.ApproximatelyEquals(factor, 0f, 1E-05f))
			{
				baseValue = ((factor < 1f) ? MathF.Ceiling(factor * (float)baseValue) : MathF.Floor(factor * (float)baseValue));
			}
			return baseValue;
		}

		public int ModifyDamage(int baseDamage)
		{
			int num = baseDamage + this._damage;
			return MBMath.ClampInt(num, 1, num);
		}

		public int ModifySpeed(int baseSpeed)
		{
			int num = baseSpeed + this._speed;
			return MBMath.ClampInt(num, 1, num);
		}

		public int ModifyMountSpeed(int baseSpeed)
		{
			int num = ItemModifier.ModifyFactor(baseSpeed, this._mountSpeed);
			return MBMath.ClampInt(num, 1, num);
		}

		public int ModifyMountManeuver(int baseManeuver)
		{
			int num = ItemModifier.ModifyFactor(baseManeuver, this._maneuver);
			return MBMath.ClampInt(num, 1, num);
		}

		public int ModifyMountCharge(int baseCharge)
		{
			int num = ItemModifier.ModifyFactor(baseCharge, this._chargeDamage);
			return MBMath.ClampInt(num, 1, num);
		}

		public int ModifyMountHitPoints(int baseCharge)
		{
			int num = ItemModifier.ModifyFactor(baseCharge, this._mountHitPoints);
			return MBMath.ClampInt(num, 1, num);
		}

		public int ModifyMissileSpeed(int baseSpeed)
		{
			int num = baseSpeed + this._missileSpeed;
			return MBMath.ClampInt(num, 1, num);
		}

		public int ModifyArmor(int armorValue)
		{
			int num = armorValue + this._armor;
			return MBMath.ClampInt(num, 1, num);
		}

		public short ModifyHitPoints(short baseHitPoints)
		{
			short num = baseHitPoints + this._hitPoints;
			return (short)MBMath.ClampInt((int)num, 1, (int)num);
		}

		public short ModifyStackCount(short baseStackCount)
		{
			short num = baseStackCount + this._stackCount;
			return (short)MBMath.ClampInt((int)num, 1, (int)num);
		}

		private int _damage;

		private int _speed;

		private int _missileSpeed;

		private int _armor;

		private short _hitPoints;

		private short _stackCount;

		private float _mountSpeed;

		private float _maneuver;

		private float _chargeDamage;

		private float _mountHitPoints;
	}
}
