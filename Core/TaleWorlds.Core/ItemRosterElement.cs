using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	public struct ItemRosterElement : ISerializableObject, ISavedStruct
	{
		public static void AutoGeneratedStaticCollectObjectsItemRosterElement(object o, List<object> collectedObjects)
		{
			((ItemRosterElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			EquipmentElement.AutoGeneratedStaticCollectObjectsEquipmentElement(this.EquipmentElement, collectedObjects);
		}

		internal static object AutoGeneratedGetMemberValueEquipmentElement(object o)
		{
			return ((ItemRosterElement)o).EquipmentElement;
		}

		internal static object AutoGeneratedGetMemberValue_amount(object o)
		{
			return ((ItemRosterElement)o)._amount;
		}

		public static ItemRosterElement Invalid
		{
			get
			{
				return ItemRosterElement.StaticInvalidElement;
			}
		}

		[SaveableProperty(21)]
		public EquipmentElement EquipmentElement { get; private set; }

		public int Amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if (value < 0)
				{
					throw new MBUnderFlowException("ItemRosterElement::Amount");
				}
				this._amount = value;
			}
		}

		public bool IsEmpty
		{
			get
			{
				return this.EquipmentElement.Item == null;
			}
		}

		public ItemRosterElement(ItemObject item, int amount = 0, ItemModifier itemModifier = null)
		{
			this = default(ItemRosterElement);
			this.EquipmentElement = new EquipmentElement(item, itemModifier, null, false);
			this._amount = amount;
		}

		public ItemRosterElement(EquipmentElement equipmentElement, int amount)
		{
			this.EquipmentElement = equipmentElement;
			this._amount = amount;
		}

		public override int GetHashCode()
		{
			return this.EquipmentElement.GetHashCode();
		}

		public override string ToString()
		{
			return this.EquipmentElement.Item.ToString() + " x" + this.Amount.ToString();
		}

		public ItemRosterElement(ItemRosterElement itemRosterElement)
		{
			this = new ItemRosterElement(itemRosterElement.EquipmentElement.Item, itemRosterElement.Amount, itemRosterElement.EquipmentElement.ItemModifier);
		}

		public void Clear()
		{
			this.EquipmentElement.Clear();
			this.Amount = 0;
		}

		public bool IsEqualTo(ItemRosterElement other)
		{
			return this.Amount == other.Amount && this.EquipmentElement.IsEqualTo(other.EquipmentElement);
		}

		public override bool Equals(object obj)
		{
			if (obj is ItemRosterElement)
			{
				ItemRosterElement itemRosterElement = (ItemRosterElement)obj;
				return this.IsEqualTo(itemRosterElement);
			}
			return false;
		}

		public float GetRosterElementWeight()
		{
			return this.EquipmentElement.GetEquipmentElementWeight() * (float)this.Amount;
		}

		void ISerializableObject.DeserializeFrom(IReader reader)
		{
			this.Amount = reader.ReadInt();
			string text = reader.ReadString();
			ItemModifier itemModifier = null;
			if (text != "")
			{
				itemModifier = Game.Current.ObjectManager.GetObject<ItemModifier>(text);
			}
			MBGUID mbguid = new MBGUID(reader.ReadUInt());
			ItemObject itemObject = MBObjectManager.Instance.GetObject(mbguid) as ItemObject;
			this.EquipmentElement = new EquipmentElement(itemObject, itemModifier, null, false);
		}

		void ISerializableObject.SerializeTo(IWriter writer)
		{
			writer.WriteInt(this.Amount);
			writer.WriteString((this.EquipmentElement.ItemModifier != null) ? this.EquipmentElement.ItemModifier.StringId : "");
			ItemObject item = this.EquipmentElement.Item;
			writer.WriteUInt((item != null) ? item.Id.InternalValue : 0U);
		}

		bool ISavedStruct.IsDefault()
		{
			return this.EquipmentElement.Item == null && this.EquipmentElement.ItemModifier == null && this.Amount == 0;
		}

		private static readonly ItemRosterElement StaticInvalidElement = new ItemRosterElement(null, 0, null);

		[SaveableField(11)]
		private int _amount;
	}
}
