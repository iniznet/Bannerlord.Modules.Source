using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	public class WeaponDesignElement
	{
		internal static void AutoGeneratedStaticCollectObjectsWeaponDesignElement(object o, List<object> collectedObjects)
		{
			((WeaponDesignElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this._craftingPiece);
		}

		internal static object AutoGeneratedGetMemberValueScalePercentage(object o)
		{
			return ((WeaponDesignElement)o).ScalePercentage;
		}

		internal static object AutoGeneratedGetMemberValue_craftingPiece(object o)
		{
			return ((WeaponDesignElement)o)._craftingPiece;
		}

		public float ScaleFactor
		{
			get
			{
				return (float)this.ScalePercentage * 0.01f;
			}
		}

		public bool IsPieceScaled
		{
			get
			{
				return this.ScalePercentage != 100;
			}
		}

		public CraftingPiece CraftingPiece
		{
			get
			{
				return this._craftingPiece;
			}
		}

		public bool IsValid
		{
			get
			{
				return this.CraftingPiece.IsValid;
			}
		}

		public float ScaledLength
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.Length;
				}
				return this.CraftingPiece.Length * this.ScaleFactor;
			}
		}

		public float ScaledWeight
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.Weight;
				}
				float num = (this._craftingPiece.FullScale ? (this.ScaleFactor * this.ScaleFactor * this.ScaleFactor) : this.ScaleFactor);
				return this.CraftingPiece.Weight * num;
			}
		}

		public float ScaledCenterOfMass
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.CenterOfMass;
				}
				return this.CraftingPiece.CenterOfMass * this.ScaleFactor;
			}
		}

		public float ScaledDistanceToNextPiece
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.DistanceToNextPiece;
				}
				return this.CraftingPiece.DistanceToNextPiece * this.ScaleFactor;
			}
		}

		public float ScaledDistanceToPreviousPiece
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.DistanceToPreviousPiece;
				}
				return this.CraftingPiece.DistanceToPreviousPiece * this.ScaleFactor;
			}
		}

		public float ScaledBladeLength
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.BladeData.BladeLength;
				}
				return this.CraftingPiece.BladeData.BladeLength * this.ScaleFactor;
			}
		}

		public float ScaledPieceOffset
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.PieceOffset;
				}
				return this.CraftingPiece.PieceOffset * this.ScaleFactor;
			}
		}

		public float ScaledPreviousPieceOffset
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.PreviousPieceOffset;
				}
				return this.CraftingPiece.PreviousPieceOffset * this.ScaleFactor;
			}
		}

		public float ScaledNextPieceOffset
		{
			get
			{
				if (!this.IsPieceScaled)
				{
					return this.CraftingPiece.NextPieceOffset;
				}
				return this.CraftingPiece.NextPieceOffset * this.ScaleFactor;
			}
		}

		public void SetScale(int scalePercentage)
		{
			this.ScalePercentage = scalePercentage;
		}

		private WeaponDesignElement(CraftingPiece craftingPiece, int scalePercentage = 100)
		{
			this._craftingPiece = craftingPiece;
			this.ScalePercentage = scalePercentage;
		}

		public WeaponDesignElement GetCopy()
		{
			return new WeaponDesignElement(this.CraftingPiece, this.ScalePercentage);
		}

		public static WeaponDesignElement GetInvalidPieceForType(CraftingPiece.PieceTypes pieceType)
		{
			return new WeaponDesignElement(CraftingPiece.GetInvalidCraftingPiece(pieceType), 100);
		}

		public static WeaponDesignElement CreateUsablePiece(CraftingPiece craftingPiece, int scalePercentage = 100)
		{
			return new WeaponDesignElement(craftingPiece, scalePercentage);
		}

		[SaveableField(10)]
		private readonly CraftingPiece _craftingPiece;

		[SaveableField(20)]
		public int ScalePercentage;
	}
}
