using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	public class WeaponComponent : ItemComponent
	{
		internal static void AutoGeneratedStaticCollectObjectsWeaponComponent(object o, List<object> collectedObjects)
		{
			((WeaponComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public MBReadOnlyList<WeaponComponentData> Weapons
		{
			get
			{
				return this._weaponList;
			}
		}

		public WeaponComponentData PrimaryWeapon
		{
			get
			{
				return this._weaponList[0];
			}
		}

		public void AddWeapon(WeaponComponentData weaponComponentData, ItemModifierGroup itemModifierGroup)
		{
			base.ItemModifierGroup = itemModifierGroup;
			this._weaponList.Add(weaponComponentData);
		}

		public override ItemComponent GetCopy()
		{
			return new WeaponComponent(base.Item);
		}

		public WeaponComponent(ItemObject item)
		{
			base.Item = item;
		}

		public ItemObject.ItemTypeEnum GetItemType()
		{
			return WeaponComponentData.GetItemTypeFromWeaponClass(this._weaponList[0].WeaponClass);
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			XmlAttribute xmlAttribute = node.Attributes["modifier_group"];
			if (xmlAttribute != null)
			{
				string value = xmlAttribute.Value;
			}
			WeaponComponentData weaponComponentData = new WeaponComponentData(base.Item, WeaponClass.Undefined, (WeaponFlags)0UL);
			weaponComponentData.Deserialize(base.Item, node);
			this._weaponList.Add(weaponComponentData);
		}

		private readonly MBList<WeaponComponentData> _weaponList = new MBList<WeaponComponentData>();
	}
}
