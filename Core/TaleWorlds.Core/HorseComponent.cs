using System;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	public class HorseComponent : ItemComponent
	{
		internal static void AutoGeneratedStaticCollectObjectsHorseComponent(object o, List<object> collectedObjects)
		{
			((HorseComponent)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public Monster Monster { get; private set; }

		public int Maneuver { get; private set; }

		public int ChargeDamage { get; private set; }

		public int Speed { get; private set; }

		public int BodyLength { get; private set; }

		public int HitPoints
		{
			get
			{
				return this.Monster.HitPoints;
			}
		}

		public int HitPointBonus { get; private set; }

		public bool IsRideable { get; private set; }

		public bool IsPackAnimal { get; private set; }

		public bool IsMount
		{
			get
			{
				return this.IsRideable && !this.IsPackAnimal;
			}
		}

		public bool IsLiveStock
		{
			get
			{
				return !this.IsRideable && !this.IsPackAnimal;
			}
		}

		public MBReadOnlyList<HorseComponent.MaterialProperty> HorseMaterialNames
		{
			get
			{
				return this._monsterMaterialNames;
			}
		}

		public int MeatCount
		{
			get
			{
				if (this.IsRideable)
				{
					return 3;
				}
				if (this.Speed > 20)
				{
					return 6;
				}
				if (this.Speed <= 11)
				{
					return 1;
				}
				return 2;
			}
		}

		public int HideCount
		{
			get
			{
				if (this.IsRideable)
				{
					return 0;
				}
				if (this.Speed <= 20)
				{
					return 1;
				}
				return 2;
			}
		}

		public SkeletonScale SkeletonScale { get; private set; }

		public HorseComponent()
		{
			this.Maneuver = 0;
			this.ChargeDamage = 0;
			this.Speed = 0;
			this.BodyLength = 0;
			this.HitPointBonus = 0;
			this.ModifiedName = null;
			this._monsterMaterialNames = new MBList<HorseComponent.MaterialProperty>();
			this.AdditionalMeshesNameList = new List<KeyValuePair<string, bool>>();
			this.SkeletonScale = null;
		}

		public override ItemComponent GetCopy()
		{
			return new HorseComponent
			{
				Maneuver = this.Maneuver,
				ChargeDamage = this.ChargeDamage,
				Speed = this.Speed,
				BodyLength = this.BodyLength
			};
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.Maneuver = XmlHelper.ReadInt(node, "maneuver");
			this.ChargeDamage = XmlHelper.ReadInt(node, "charge_damage");
			this.Speed = XmlHelper.ReadInt(node, "speed");
			this.BodyLength = XmlHelper.ReadInt(node, "body_length");
			this.IsRideable = XmlHelper.ReadBool(node, "is_mountable");
			this.IsPackAnimal = XmlHelper.ReadBool(node, "is_pack_animal");
			this.Monster = (Monster)objectManager.ReadObjectReferenceFromXml("monster", typeof(Monster), node);
			this.HitPointBonus = XmlHelper.ReadInt(node, "extra_health");
			XmlAttribute xmlAttribute = node.Attributes["skeleton_scale"];
			string text = ((xmlAttribute != null) ? xmlAttribute.Value : null);
			if (text != null)
			{
				this.SkeletonScale = Game.Current.ObjectManager.GetObject<SkeletonScale>(text);
			}
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Name == "Materials")
				{
					using (IEnumerator enumerator2 = xmlNode.ChildNodes.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj2 = enumerator2.Current;
							XmlNode xmlNode2 = (XmlNode)obj2;
							if (xmlNode2.Name == "Material")
							{
								string value = xmlNode2.Attributes["name"].Value;
								this._monsterMaterialNames.Add(new HorseComponent.MaterialProperty(value));
								foreach (object obj3 in xmlNode2.ChildNodes)
								{
									XmlNode xmlNode3 = (XmlNode)obj3;
									if (xmlNode3.Name == "MeshMultipliers")
									{
										foreach (object obj4 in xmlNode3.ChildNodes)
										{
											XmlNode xmlNode4 = (XmlNode)obj4;
											if (xmlNode4.Name == "MeshMultiplier")
											{
												uint num = ((xmlNode4.Attributes["mesh_multiplier"] != null) ? Convert.ToUInt32(xmlNode4.Attributes["mesh_multiplier"].Value, 16) : 0U);
												float num2 = ((xmlNode4.Attributes["percentage"] != null) ? ((float)Convert.ToDouble(xmlNode4.Attributes["percentage"].Value)) : 0f);
												this._monsterMaterialNames[this._monsterMaterialNames.Count - 1].MeshMultiplier.Add(new Tuple<uint, float>(num, num2));
											}
										}
									}
								}
								this._monsterMaterialNames[this._monsterMaterialNames.Count - 1].MeshMultiplier.Sort((Tuple<uint, float> x, Tuple<uint, float> y) => x.Item2.CompareTo(y.Item2));
							}
						}
						continue;
					}
				}
				if (xmlNode.Name == "AdditionalMeshes")
				{
					foreach (object obj5 in xmlNode.ChildNodes)
					{
						XmlNode xmlNode5 = (XmlNode)obj5;
						if (xmlNode5.Name == "Mesh" && xmlNode5.Attributes["name"] != null)
						{
							bool flag = false;
							if (xmlNode5.Attributes["affected_by_cover"] != null)
							{
								flag = bool.TryParse(xmlNode5.Attributes["affected_by_cover"].InnerText, out flag);
							}
							this.AdditionalMeshesNameList.Add(new KeyValuePair<string, bool>(xmlNode5.Attributes["name"].InnerText, flag));
						}
					}
				}
			}
		}

		public TextObject ModifiedName;

		public List<KeyValuePair<string, bool>> AdditionalMeshesNameList;

		private readonly MBList<HorseComponent.MaterialProperty> _monsterMaterialNames;

		public struct MaterialProperty
		{
			public MaterialProperty(string name)
			{
				this.Name = name;
				this.MeshMultiplier = new List<Tuple<uint, float>>();
			}

			public string Name { get; private set; }

			public List<Tuple<uint, float>> MeshMultiplier;
		}
	}
}
