using System;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000026 RID: 38
	public sealed class CraftingPiece : MBObjectBase
	{
		// Token: 0x06000216 RID: 534 RVA: 0x00009FB6 File Offset: 0x000081B6
		internal static void AutoGeneratedStaticCollectObjectsCraftingPiece(object o, List<object> collectedObjects)
		{
			((CraftingPiece)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000217 RID: 535 RVA: 0x00009FC4 File Offset: 0x000081C4
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000218 RID: 536 RVA: 0x00009FCD File Offset: 0x000081CD
		public CraftingPiece()
		{
			this.InitializeLists();
		}

		// Token: 0x06000219 RID: 537 RVA: 0x00009FDB File Offset: 0x000081DB
		[LoadInitializationCallback]
		private void OnLoad(MetaData metaData)
		{
			this.InitializeLists();
		}

		// Token: 0x0600021A RID: 538 RVA: 0x00009FE4 File Offset: 0x000081E4
		private void InitializeLists()
		{
			this._materialCosts = new MBList<int>(9);
			for (int i = 0; i < 9; i++)
			{
				this._materialCosts.Add(0);
			}
			this._materialsUsed = new MBList<ValueTuple<CraftingMaterials, int>>(0);
		}

		// Token: 0x0600021B RID: 539 RVA: 0x0000A024 File Offset: 0x00008224
		public static CraftingPiece GetInvalidCraftingPiece(CraftingPiece.PieceTypes pieceType)
		{
			if (CraftingPiece._invalidCraftingPiece == null)
			{
				CraftingPiece._invalidCraftingPiece = new CraftingPiece[4];
			}
			if (CraftingPiece._invalidCraftingPiece[(int)pieceType] == null)
			{
				CraftingPiece._invalidCraftingPiece[(int)pieceType] = new CraftingPiece
				{
					PieceType = pieceType,
					Name = new TextObject("{=!}Invalid", null),
					IsValid = false
				};
			}
			return CraftingPiece._invalidCraftingPiece[(int)pieceType];
		}

		// Token: 0x17000095 RID: 149
		// (get) Token: 0x0600021C RID: 540 RVA: 0x0000A07E File Offset: 0x0000827E
		// (set) Token: 0x0600021D RID: 541 RVA: 0x0000A086 File Offset: 0x00008286
		public bool IsValid { get; private set; }

		// Token: 0x17000096 RID: 150
		// (get) Token: 0x0600021E RID: 542 RVA: 0x0000A08F File Offset: 0x0000828F
		// (set) Token: 0x0600021F RID: 543 RVA: 0x0000A097 File Offset: 0x00008297
		public TextObject Name { get; private set; }

		// Token: 0x17000097 RID: 151
		// (get) Token: 0x06000220 RID: 544 RVA: 0x0000A0A0 File Offset: 0x000082A0
		// (set) Token: 0x06000221 RID: 545 RVA: 0x0000A0A8 File Offset: 0x000082A8
		public CraftingPiece.PieceTypes PieceType { get; private set; }

		// Token: 0x17000098 RID: 152
		// (get) Token: 0x06000222 RID: 546 RVA: 0x0000A0B1 File Offset: 0x000082B1
		// (set) Token: 0x06000223 RID: 547 RVA: 0x0000A0B9 File Offset: 0x000082B9
		public string MeshName { get; private set; }

		// Token: 0x17000099 RID: 153
		// (get) Token: 0x06000224 RID: 548 RVA: 0x0000A0C2 File Offset: 0x000082C2
		// (set) Token: 0x06000225 RID: 549 RVA: 0x0000A0CA File Offset: 0x000082CA
		public BasicCultureObject Culture { get; private set; }

		// Token: 0x1700009A RID: 154
		// (get) Token: 0x06000226 RID: 550 RVA: 0x0000A0D3 File Offset: 0x000082D3
		// (set) Token: 0x06000227 RID: 551 RVA: 0x0000A0DB File Offset: 0x000082DB
		public float Length { get; private set; }

		// Token: 0x1700009B RID: 155
		// (get) Token: 0x06000228 RID: 552 RVA: 0x0000A0E4 File Offset: 0x000082E4
		// (set) Token: 0x06000229 RID: 553 RVA: 0x0000A0EC File Offset: 0x000082EC
		public float DistanceToNextPiece { get; private set; }

		// Token: 0x1700009C RID: 156
		// (get) Token: 0x0600022A RID: 554 RVA: 0x0000A0F5 File Offset: 0x000082F5
		// (set) Token: 0x0600022B RID: 555 RVA: 0x0000A0FD File Offset: 0x000082FD
		public float DistanceToPreviousPiece { get; private set; }

		// Token: 0x1700009D RID: 157
		// (get) Token: 0x0600022C RID: 556 RVA: 0x0000A106 File Offset: 0x00008306
		// (set) Token: 0x0600022D RID: 557 RVA: 0x0000A10E File Offset: 0x0000830E
		public float PieceOffset { get; private set; }

		// Token: 0x1700009E RID: 158
		// (get) Token: 0x0600022E RID: 558 RVA: 0x0000A117 File Offset: 0x00008317
		// (set) Token: 0x0600022F RID: 559 RVA: 0x0000A11F File Offset: 0x0000831F
		public float PreviousPieceOffset { get; private set; }

		// Token: 0x1700009F RID: 159
		// (get) Token: 0x06000230 RID: 560 RVA: 0x0000A128 File Offset: 0x00008328
		// (set) Token: 0x06000231 RID: 561 RVA: 0x0000A130 File Offset: 0x00008330
		public float NextPieceOffset { get; private set; }

		// Token: 0x170000A0 RID: 160
		// (get) Token: 0x06000232 RID: 562 RVA: 0x0000A139 File Offset: 0x00008339
		// (set) Token: 0x06000233 RID: 563 RVA: 0x0000A141 File Offset: 0x00008341
		public float Weight { get; private set; }

		// Token: 0x170000A1 RID: 161
		// (get) Token: 0x06000234 RID: 564 RVA: 0x0000A14A File Offset: 0x0000834A
		// (set) Token: 0x06000235 RID: 565 RVA: 0x0000A152 File Offset: 0x00008352
		public float Inertia { get; private set; }

		// Token: 0x170000A2 RID: 162
		// (get) Token: 0x06000236 RID: 566 RVA: 0x0000A15B File Offset: 0x0000835B
		// (set) Token: 0x06000237 RID: 567 RVA: 0x0000A163 File Offset: 0x00008363
		public float CenterOfMass { get; private set; }

		// Token: 0x170000A3 RID: 163
		// (get) Token: 0x06000238 RID: 568 RVA: 0x0000A16C File Offset: 0x0000836C
		// (set) Token: 0x06000239 RID: 569 RVA: 0x0000A174 File Offset: 0x00008374
		public int ArmorBonus { get; private set; }

		// Token: 0x170000A4 RID: 164
		// (get) Token: 0x0600023A RID: 570 RVA: 0x0000A17D File Offset: 0x0000837D
		// (set) Token: 0x0600023B RID: 571 RVA: 0x0000A185 File Offset: 0x00008385
		public int SwingDamageBonus { get; private set; }

		// Token: 0x170000A5 RID: 165
		// (get) Token: 0x0600023C RID: 572 RVA: 0x0000A18E File Offset: 0x0000838E
		// (set) Token: 0x0600023D RID: 573 RVA: 0x0000A196 File Offset: 0x00008396
		public int SwingSpeedBonus { get; private set; }

		// Token: 0x170000A6 RID: 166
		// (get) Token: 0x0600023E RID: 574 RVA: 0x0000A19F File Offset: 0x0000839F
		// (set) Token: 0x0600023F RID: 575 RVA: 0x0000A1A7 File Offset: 0x000083A7
		public int ThrustDamageBonus { get; private set; }

		// Token: 0x170000A7 RID: 167
		// (get) Token: 0x06000240 RID: 576 RVA: 0x0000A1B0 File Offset: 0x000083B0
		// (set) Token: 0x06000241 RID: 577 RVA: 0x0000A1B8 File Offset: 0x000083B8
		public int ThrustSpeedBonus { get; private set; }

		// Token: 0x170000A8 RID: 168
		// (get) Token: 0x06000242 RID: 578 RVA: 0x0000A1C1 File Offset: 0x000083C1
		// (set) Token: 0x06000243 RID: 579 RVA: 0x0000A1C9 File Offset: 0x000083C9
		public int HandlingBonus { get; private set; }

		// Token: 0x170000A9 RID: 169
		// (get) Token: 0x06000244 RID: 580 RVA: 0x0000A1D2 File Offset: 0x000083D2
		// (set) Token: 0x06000245 RID: 581 RVA: 0x0000A1DA File Offset: 0x000083DA
		public int AccuracyBonus { get; private set; }

		// Token: 0x170000AA RID: 170
		// (get) Token: 0x06000246 RID: 582 RVA: 0x0000A1E3 File Offset: 0x000083E3
		// (set) Token: 0x06000247 RID: 583 RVA: 0x0000A1EB File Offset: 0x000083EB
		public int PieceTier { get; private set; }

		// Token: 0x170000AB RID: 171
		// (get) Token: 0x06000248 RID: 584 RVA: 0x0000A1F4 File Offset: 0x000083F4
		// (set) Token: 0x06000249 RID: 585 RVA: 0x0000A1FC File Offset: 0x000083FC
		public bool FullScale { get; private set; }

		// Token: 0x170000AC RID: 172
		// (get) Token: 0x0600024A RID: 586 RVA: 0x0000A205 File Offset: 0x00008405
		// (set) Token: 0x0600024B RID: 587 RVA: 0x0000A20D File Offset: 0x0000840D
		public Vec3 ItemHolsterPosShift { get; private set; }

		// Token: 0x170000AD RID: 173
		// (get) Token: 0x0600024C RID: 588 RVA: 0x0000A216 File Offset: 0x00008416
		// (set) Token: 0x0600024D RID: 589 RVA: 0x0000A21E File Offset: 0x0000841E
		public float Appearance { get; private set; }

		// Token: 0x170000AE RID: 174
		// (get) Token: 0x0600024E RID: 590 RVA: 0x0000A227 File Offset: 0x00008427
		// (set) Token: 0x0600024F RID: 591 RVA: 0x0000A22F File Offset: 0x0000842F
		public bool IsGivenByDefault { get; private set; }

		// Token: 0x170000AF RID: 175
		// (get) Token: 0x06000250 RID: 592 RVA: 0x0000A238 File Offset: 0x00008438
		// (set) Token: 0x06000251 RID: 593 RVA: 0x0000A240 File Offset: 0x00008440
		public bool IsHiddenOnDesigner { get; private set; }

		// Token: 0x170000B0 RID: 176
		// (get) Token: 0x06000252 RID: 594 RVA: 0x0000A249 File Offset: 0x00008449
		// (set) Token: 0x06000253 RID: 595 RVA: 0x0000A251 File Offset: 0x00008451
		public bool IsUnique { get; private set; }

		// Token: 0x170000B1 RID: 177
		// (get) Token: 0x06000254 RID: 596 RVA: 0x0000A25A File Offset: 0x0000845A
		// (set) Token: 0x06000255 RID: 597 RVA: 0x0000A262 File Offset: 0x00008462
		public string ItemUsageFeaturesToExclude { get; private set; }

		// Token: 0x170000B2 RID: 178
		// (get) Token: 0x06000256 RID: 598 RVA: 0x0000A26B File Offset: 0x0000846B
		public MBReadOnlyList<ValueTuple<CraftingMaterials, int>> MaterialsUsed
		{
			get
			{
				return this._materialsUsed;
			}
		}

		// Token: 0x170000B3 RID: 179
		// (get) Token: 0x06000257 RID: 599 RVA: 0x0000A273 File Offset: 0x00008473
		public bool IsEmptyPiece
		{
			get
			{
				return this._materialCosts.All((int cost) => cost == 0);
			}
		}

		// Token: 0x170000B4 RID: 180
		// (get) Token: 0x06000258 RID: 600 RVA: 0x0000A29F File Offset: 0x0000849F
		// (set) Token: 0x06000259 RID: 601 RVA: 0x0000A2A7 File Offset: 0x000084A7
		public int CraftingCost { get; private set; }

		// Token: 0x170000B5 RID: 181
		// (get) Token: 0x0600025A RID: 602 RVA: 0x0000A2B0 File Offset: 0x000084B0
		// (set) Token: 0x0600025B RID: 603 RVA: 0x0000A2B8 File Offset: 0x000084B8
		public int RequiredSkillValue { get; private set; }

		// Token: 0x170000B6 RID: 182
		// (get) Token: 0x0600025C RID: 604 RVA: 0x0000A2C1 File Offset: 0x000084C1
		// (set) Token: 0x0600025D RID: 605 RVA: 0x0000A2C9 File Offset: 0x000084C9
		public BladeData BladeData { get; private set; }

		// Token: 0x0600025E RID: 606 RVA: 0x0000A2D4 File Offset: 0x000084D4
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			this.IsValid = true;
			this.Name = new TextObject(node.Attributes["name"].InnerText, null);
			this.PieceType = (CraftingPiece.PieceTypes)Enum.Parse(typeof(CraftingPiece.PieceTypes), node.Attributes["piece_type"].InnerText, true);
			this.MeshName = node.Attributes["mesh"].InnerText;
			this.Culture = ((node.Attributes["mesh"] != null) ? ((BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node)) : null);
			this.Appearance = ((node.Attributes["appearance"] != null) ? float.Parse(node.Attributes["appearance"].Value) : 0.5f);
			this.CraftingCost = ((node.Attributes["CraftingCost"] != null) ? int.Parse(node.Attributes["CraftingCost"].Value) : 0);
			XmlAttribute xmlAttribute = node.Attributes["weight"];
			this.Weight = ((xmlAttribute != null) ? float.Parse(xmlAttribute.Value) : 0f);
			XmlAttribute xmlAttribute2 = node.Attributes["length"];
			if (xmlAttribute2 != null)
			{
				this.Length = 0.01f * float.Parse(xmlAttribute2.Value);
				this.DistanceToNextPiece = this.Length / 2f;
				this.DistanceToPreviousPiece = this.Length / 2f;
			}
			else
			{
				XmlAttribute xmlAttribute3 = node.Attributes["distance_to_next_piece"];
				XmlAttribute xmlAttribute4 = node.Attributes["distance_to_previous_piece"];
				this.DistanceToNextPiece = 0.01f * float.Parse(xmlAttribute3.Value);
				this.DistanceToPreviousPiece = 0.01f * float.Parse(xmlAttribute4.Value);
				this.Length = this.DistanceToNextPiece + this.DistanceToPreviousPiece;
			}
			this.Inertia = 0.083333336f * this.Weight * this.Length * this.Length;
			XmlAttribute xmlAttribute5 = node.Attributes["center_of_mass"];
			float num = ((xmlAttribute5 != null) ? float.Parse(xmlAttribute5.Value) : 0.5f);
			this.CenterOfMass = this.Length * num;
			XmlAttribute xmlAttribute6 = node.Attributes["item_holster_pos_shift"];
			Vec3 vec = default(Vec3);
			if (xmlAttribute6 != null)
			{
				string[] array = xmlAttribute6.Value.Split(new char[] { ',' });
				if (array.Length == 3)
				{
					float.TryParse(array[0], out vec.x);
					float.TryParse(array[1], out vec.y);
					float.TryParse(array[2], out vec.z);
				}
			}
			this.ItemHolsterPosShift = vec;
			XmlAttribute xmlAttribute7 = node.Attributes["tier"];
			this.PieceTier = ((xmlAttribute7 != null) ? int.Parse(xmlAttribute7.Value) : 1);
			this.IsUnique = XmlHelper.ReadBool(node, "is_unique");
			this.IsGivenByDefault = XmlHelper.ReadBool(node, "is_default");
			this.IsHiddenOnDesigner = XmlHelper.ReadBool(node, "is_hidden");
			XmlAttribute xmlAttribute8 = node.Attributes["full_scale"];
			this.FullScale = ((xmlAttribute8 != null) ? (xmlAttribute8.InnerText == "true") : (this.PieceType == CraftingPiece.PieceTypes.Guard || this.PieceType == CraftingPiece.PieceTypes.Pommel));
			XmlAttribute xmlAttribute9 = node.Attributes["excluded_item_usage_features"];
			this.ItemUsageFeaturesToExclude = ((xmlAttribute9 != null) ? xmlAttribute9.InnerText : "");
			XmlAttribute xmlAttribute10 = node.Attributes["required_skill_value"];
			this.RequiredSkillValue = ((xmlAttribute10 != null) ? int.Parse(xmlAttribute10.Value) : 0);
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				if (xmlNode.Attributes != null)
				{
					string name = xmlNode.Name;
					if (!(name == "StatContributions"))
					{
						if (!(name == "BladeData"))
						{
							if (!(name == "BuildData"))
							{
								if (!(name == "Materials"))
								{
									if (name == "Flags")
									{
										this.AdditionalItemFlags = (ItemFlags)0U;
										this.AdditionalWeaponFlags = (WeaponFlags)0UL;
										foreach (object obj2 in xmlNode.ChildNodes)
										{
											XmlNode xmlNode2 = (XmlNode)obj2;
											XmlAttribute xmlAttribute11 = xmlNode2.Attributes["name"];
											XmlAttribute xmlAttribute12 = xmlNode2.Attributes["type"];
											if (xmlAttribute12 == null || xmlAttribute12.Value == "WeaponFlags")
											{
												WeaponFlags weaponFlags = (WeaponFlags)Enum.Parse(typeof(WeaponFlags), xmlAttribute11.Value, true);
												this.AdditionalWeaponFlags |= weaponFlags;
											}
											else
											{
												ItemFlags itemFlags = (ItemFlags)Enum.Parse(typeof(ItemFlags), xmlAttribute11.Value, true);
												this.AdditionalItemFlags |= itemFlags;
											}
										}
									}
								}
								else
								{
									this._materialsUsed = new MBList<ValueTuple<CraftingMaterials, int>>();
									foreach (object obj3 in xmlNode.ChildNodes)
									{
										XmlNode xmlNode3 = (XmlNode)obj3;
										string value = xmlNode3.Attributes["id"].Value;
										string value2 = xmlNode3.Attributes["count"].Value;
										CraftingMaterials craftingMaterials;
										Enum.TryParse<CraftingMaterials>(value, out craftingMaterials);
										int num2;
										if (int.TryParse(value2, out num2) && num2 > 0)
										{
											this._materialsUsed.Add(new ValueTuple<CraftingMaterials, int>(craftingMaterials, num2));
										}
										this._materialCosts[(int)craftingMaterials] = num2;
									}
									this._materialsUsed.Capacity = this._materialsUsed.Count;
								}
							}
							else
							{
								XmlAttribute xmlAttribute13 = xmlNode.Attributes["piece_offset"];
								XmlAttribute xmlAttribute14 = xmlNode.Attributes["previous_piece_offset"];
								XmlAttribute xmlAttribute15 = xmlNode.Attributes["next_piece_offset"];
								this.PieceOffset = ((xmlAttribute13 != null) ? (0.01f * float.Parse(xmlAttribute13.Value)) : 0f);
								this.PreviousPieceOffset = ((xmlAttribute14 != null) ? (0.01f * float.Parse(xmlAttribute14.Value)) : 0f);
								this.NextPieceOffset = ((xmlAttribute15 != null) ? (0.01f * float.Parse(xmlAttribute15.Value)) : 0f);
							}
						}
						else
						{
							this.BladeData = new BladeData(this.PieceType, this.Length);
							this.BladeData.Deserialize(objectManager, xmlNode);
						}
					}
					else
					{
						XmlAttribute xmlAttribute16 = xmlNode.Attributes["armor_bonus"];
						this.ArmorBonus = ((xmlAttribute16 != null) ? int.Parse(xmlAttribute16.Value) : 0);
						XmlAttribute xmlAttribute17 = xmlNode.Attributes["handling_bonus"];
						this.HandlingBonus = ((xmlAttribute17 != null) ? int.Parse(xmlAttribute17.Value) : 0);
						XmlAttribute xmlAttribute18 = xmlNode.Attributes["swing_damage_bonus"];
						this.SwingDamageBonus = ((xmlAttribute18 != null) ? int.Parse(xmlAttribute18.Value) : 0);
						XmlAttribute xmlAttribute19 = xmlNode.Attributes["swing_speed_bonus"];
						this.SwingSpeedBonus = ((xmlAttribute19 != null) ? int.Parse(xmlAttribute19.Value) : 0);
						XmlAttribute xmlAttribute20 = xmlNode.Attributes["thrust_damage_bonus"];
						this.ThrustDamageBonus = ((xmlAttribute20 != null) ? int.Parse(xmlAttribute20.Value) : 0);
						XmlAttribute xmlAttribute21 = xmlNode.Attributes["thrust_speed_bonus"];
						this.ThrustSpeedBonus = ((xmlAttribute21 != null) ? int.Parse(xmlAttribute21.Value) : 0);
						XmlAttribute xmlAttribute22 = xmlNode.Attributes["accuracy_bonus"];
						this.AccuracyBonus = ((xmlAttribute22 != null) ? int.Parse(xmlAttribute22.Value) : 0);
					}
				}
			}
			CraftingPiece.PieceTypes pieceType = this.PieceType;
		}

		// Token: 0x170000B7 RID: 183
		// (get) Token: 0x0600025F RID: 607 RVA: 0x0000AB64 File Offset: 0x00008D64
		public static MBReadOnlyList<CraftingPiece> All
		{
			get
			{
				return Game.Current.ObjectManager.GetObjectTypeList<CraftingPiece>();
			}
		}

		// Token: 0x04000178 RID: 376
		private static CraftingPiece[] _invalidCraftingPiece;

		// Token: 0x04000196 RID: 406
		public WeaponFlags AdditionalWeaponFlags;

		// Token: 0x04000197 RID: 407
		public ItemFlags AdditionalItemFlags;

		// Token: 0x04000198 RID: 408
		private MBList<int> _materialCosts;

		// Token: 0x04000199 RID: 409
		private MBList<ValueTuple<CraftingMaterials, int>> _materialsUsed;

		// Token: 0x020000D9 RID: 217
		public enum PieceTypes
		{
			// Token: 0x04000614 RID: 1556
			Invalid = -1,
			// Token: 0x04000615 RID: 1557
			Blade,
			// Token: 0x04000616 RID: 1558
			Guard,
			// Token: 0x04000617 RID: 1559
			Handle,
			// Token: 0x04000618 RID: 1560
			Pommel,
			// Token: 0x04000619 RID: 1561
			NumberOfPieceTypes
		}
	}
}
