using System;
using System.Collections.Generic;
using System.Xml;
using TaleWorlds.Library;

namespace TaleWorlds.Core
{
	// Token: 0x0200003A RID: 58
	public class WeaponComponentData
	{
		// Token: 0x0600042F RID: 1071 RVA: 0x0000FE19 File Offset: 0x0000E019
		internal static void AutoGeneratedStaticCollectObjectsWeaponComponentData(object o, List<object> collectedObjects)
		{
			((WeaponComponentData)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000430 RID: 1072 RVA: 0x0000FE27 File Offset: 0x0000E027
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		// Token: 0x17000167 RID: 359
		// (get) Token: 0x06000431 RID: 1073 RVA: 0x0000FE29 File Offset: 0x0000E029
		// (set) Token: 0x06000432 RID: 1074 RVA: 0x0000FE31 File Offset: 0x0000E031
		public WeaponComponentData.WeaponTiers WeaponTier { get; private set; }

		// Token: 0x17000168 RID: 360
		// (get) Token: 0x06000433 RID: 1075 RVA: 0x0000FE3A File Offset: 0x0000E03A
		// (set) Token: 0x06000434 RID: 1076 RVA: 0x0000FE42 File Offset: 0x0000E042
		public string WeaponDescriptionId { get; private set; }

		// Token: 0x17000169 RID: 361
		// (get) Token: 0x06000435 RID: 1077 RVA: 0x0000FE4B File Offset: 0x0000E04B
		// (set) Token: 0x06000436 RID: 1078 RVA: 0x0000FE53 File Offset: 0x0000E053
		public int BodyArmor { get; private set; }

		// Token: 0x1700016A RID: 362
		// (get) Token: 0x06000437 RID: 1079 RVA: 0x0000FE5C File Offset: 0x0000E05C
		// (set) Token: 0x06000438 RID: 1080 RVA: 0x0000FE64 File Offset: 0x0000E064
		public string PhysicsMaterial { get; private set; }

		// Token: 0x1700016B RID: 363
		// (get) Token: 0x06000439 RID: 1081 RVA: 0x0000FE6D File Offset: 0x0000E06D
		// (set) Token: 0x0600043A RID: 1082 RVA: 0x0000FE75 File Offset: 0x0000E075
		public string FlyingSoundCode { get; private set; }

		// Token: 0x1700016C RID: 364
		// (get) Token: 0x0600043B RID: 1083 RVA: 0x0000FE7E File Offset: 0x0000E07E
		// (set) Token: 0x0600043C RID: 1084 RVA: 0x0000FE86 File Offset: 0x0000E086
		public string PassbySoundCode { get; private set; }

		// Token: 0x1700016D RID: 365
		// (get) Token: 0x0600043D RID: 1085 RVA: 0x0000FE8F File Offset: 0x0000E08F
		// (set) Token: 0x0600043E RID: 1086 RVA: 0x0000FE97 File Offset: 0x0000E097
		public string ItemUsage { get; private set; }

		// Token: 0x1700016E RID: 366
		// (get) Token: 0x0600043F RID: 1087 RVA: 0x0000FEA0 File Offset: 0x0000E0A0
		// (set) Token: 0x06000440 RID: 1088 RVA: 0x0000FEA8 File Offset: 0x0000E0A8
		public int ThrustSpeed { get; private set; }

		// Token: 0x1700016F RID: 367
		// (get) Token: 0x06000441 RID: 1089 RVA: 0x0000FEB1 File Offset: 0x0000E0B1
		// (set) Token: 0x06000442 RID: 1090 RVA: 0x0000FEB9 File Offset: 0x0000E0B9
		public int SwingSpeed { get; private set; }

		// Token: 0x17000170 RID: 368
		// (get) Token: 0x06000443 RID: 1091 RVA: 0x0000FEC2 File Offset: 0x0000E0C2
		// (set) Token: 0x06000444 RID: 1092 RVA: 0x0000FECA File Offset: 0x0000E0CA
		public int MissileSpeed { get; private set; }

		// Token: 0x17000171 RID: 369
		// (get) Token: 0x06000445 RID: 1093 RVA: 0x0000FED3 File Offset: 0x0000E0D3
		// (set) Token: 0x06000446 RID: 1094 RVA: 0x0000FEDB File Offset: 0x0000E0DB
		public int WeaponLength { get; private set; }

		// Token: 0x17000172 RID: 370
		// (get) Token: 0x06000447 RID: 1095 RVA: 0x0000FEE4 File Offset: 0x0000E0E4
		// (set) Token: 0x06000448 RID: 1096 RVA: 0x0000FEEC File Offset: 0x0000E0EC
		public float WeaponBalance { get; private set; }

		// Token: 0x17000173 RID: 371
		// (get) Token: 0x06000449 RID: 1097 RVA: 0x0000FEF5 File Offset: 0x0000E0F5
		// (set) Token: 0x0600044A RID: 1098 RVA: 0x0000FEFD File Offset: 0x0000E0FD
		public int ThrustDamage { get; private set; }

		// Token: 0x17000174 RID: 372
		// (get) Token: 0x0600044B RID: 1099 RVA: 0x0000FF06 File Offset: 0x0000E106
		// (set) Token: 0x0600044C RID: 1100 RVA: 0x0000FF0E File Offset: 0x0000E10E
		public DamageTypes ThrustDamageType { get; private set; }

		// Token: 0x17000175 RID: 373
		// (get) Token: 0x0600044D RID: 1101 RVA: 0x0000FF17 File Offset: 0x0000E117
		// (set) Token: 0x0600044E RID: 1102 RVA: 0x0000FF1F File Offset: 0x0000E11F
		public int SwingDamage { get; private set; }

		// Token: 0x17000176 RID: 374
		// (get) Token: 0x0600044F RID: 1103 RVA: 0x0000FF28 File Offset: 0x0000E128
		// (set) Token: 0x06000450 RID: 1104 RVA: 0x0000FF30 File Offset: 0x0000E130
		public DamageTypes SwingDamageType { get; private set; }

		// Token: 0x17000177 RID: 375
		// (get) Token: 0x06000451 RID: 1105 RVA: 0x0000FF39 File Offset: 0x0000E139
		// (set) Token: 0x06000452 RID: 1106 RVA: 0x0000FF41 File Offset: 0x0000E141
		public int Accuracy { get; private set; }

		// Token: 0x17000178 RID: 376
		// (get) Token: 0x06000453 RID: 1107 RVA: 0x0000FF4A File Offset: 0x0000E14A
		// (set) Token: 0x06000454 RID: 1108 RVA: 0x0000FF52 File Offset: 0x0000E152
		public WeaponClass WeaponClass { get; private set; }

		// Token: 0x17000179 RID: 377
		// (get) Token: 0x06000455 RID: 1109 RVA: 0x0000FF5B File Offset: 0x0000E15B
		// (set) Token: 0x06000456 RID: 1110 RVA: 0x0000FF63 File Offset: 0x0000E163
		public WeaponClass AmmoClass { get; private set; }

		// Token: 0x1700017A RID: 378
		// (get) Token: 0x06000457 RID: 1111 RVA: 0x0000FF6C File Offset: 0x0000E16C
		public int MissileDamage
		{
			get
			{
				return this.ThrustDamage;
			}
		}

		// Token: 0x1700017B RID: 379
		// (get) Token: 0x06000458 RID: 1112 RVA: 0x0000FF74 File Offset: 0x0000E174
		// (set) Token: 0x06000459 RID: 1113 RVA: 0x0000FF7C File Offset: 0x0000E17C
		public float Inertia { get; private set; }

		// Token: 0x1700017C RID: 380
		// (get) Token: 0x0600045A RID: 1114 RVA: 0x0000FF85 File Offset: 0x0000E185
		// (set) Token: 0x0600045B RID: 1115 RVA: 0x0000FF8D File Offset: 0x0000E18D
		public float CenterOfMass { get; private set; }

		// Token: 0x1700017D RID: 381
		// (get) Token: 0x0600045C RID: 1116 RVA: 0x0000FF96 File Offset: 0x0000E196
		// (set) Token: 0x0600045D RID: 1117 RVA: 0x0000FF9E File Offset: 0x0000E19E
		public Vec3 CenterOfMass3D { get; private set; }

		// Token: 0x1700017E RID: 382
		// (get) Token: 0x0600045E RID: 1118 RVA: 0x0000FFA7 File Offset: 0x0000E1A7
		// (set) Token: 0x0600045F RID: 1119 RVA: 0x0000FFAF File Offset: 0x0000E1AF
		public float SwingDamageFactor { get; private set; }

		// Token: 0x1700017F RID: 383
		// (get) Token: 0x06000460 RID: 1120 RVA: 0x0000FFB8 File Offset: 0x0000E1B8
		// (set) Token: 0x06000461 RID: 1121 RVA: 0x0000FFC0 File Offset: 0x0000E1C0
		public float ThrustDamageFactor { get; private set; }

		// Token: 0x17000180 RID: 384
		// (get) Token: 0x06000462 RID: 1122 RVA: 0x0000FFC9 File Offset: 0x0000E1C9
		// (set) Token: 0x06000463 RID: 1123 RVA: 0x0000FFD1 File Offset: 0x0000E1D1
		public int Handling { get; private set; }

		// Token: 0x17000181 RID: 385
		// (get) Token: 0x06000464 RID: 1124 RVA: 0x0000FFDA File Offset: 0x0000E1DA
		// (set) Token: 0x06000465 RID: 1125 RVA: 0x0000FFE2 File Offset: 0x0000E1E2
		public float SweetSpotReach { get; private set; }

		// Token: 0x17000182 RID: 386
		// (get) Token: 0x06000466 RID: 1126 RVA: 0x0000FFEB File Offset: 0x0000E1EB
		// (set) Token: 0x06000467 RID: 1127 RVA: 0x0000FFF3 File Offset: 0x0000E1F3
		public string TrailParticleName { get; private set; }

		// Token: 0x17000183 RID: 387
		// (get) Token: 0x06000468 RID: 1128 RVA: 0x0000FFFC File Offset: 0x0000E1FC
		// (set) Token: 0x06000469 RID: 1129 RVA: 0x00010004 File Offset: 0x0000E204
		public MatrixFrame StickingFrame { get; private set; }

		// Token: 0x17000184 RID: 388
		// (get) Token: 0x0600046A RID: 1130 RVA: 0x0001000D File Offset: 0x0000E20D
		// (set) Token: 0x0600046B RID: 1131 RVA: 0x00010015 File Offset: 0x0000E215
		public Vec3 AmmoOffset { get; private set; }

		// Token: 0x17000185 RID: 389
		// (get) Token: 0x0600046C RID: 1132 RVA: 0x0001001E File Offset: 0x0000E21E
		// (set) Token: 0x0600046D RID: 1133 RVA: 0x00010026 File Offset: 0x0000E226
		public short MaxDataValue { get; private set; }

		// Token: 0x17000186 RID: 390
		// (get) Token: 0x0600046E RID: 1134 RVA: 0x0001002F File Offset: 0x0000E22F
		// (set) Token: 0x0600046F RID: 1135 RVA: 0x00010037 File Offset: 0x0000E237
		public MatrixFrame Frame { get; private set; }

		// Token: 0x17000187 RID: 391
		// (get) Token: 0x06000470 RID: 1136 RVA: 0x00010040 File Offset: 0x0000E240
		// (set) Token: 0x06000471 RID: 1137 RVA: 0x00010048 File Offset: 0x0000E248
		public Vec3 RotationSpeed { get; private set; }

		// Token: 0x17000188 RID: 392
		// (get) Token: 0x06000472 RID: 1138 RVA: 0x00010051 File Offset: 0x0000E251
		// (set) Token: 0x06000473 RID: 1139 RVA: 0x00010059 File Offset: 0x0000E259
		public short ReloadPhaseCount { get; private set; }

		// Token: 0x06000474 RID: 1140 RVA: 0x00010064 File Offset: 0x0000E264
		public void Init(string weaponUsageName, string physicsMaterial, string itemUsage, DamageTypes thrustDamageType, DamageTypes swingDamageType, int bodyArmor, int weaponLength, float weaponBalance, float inertia, float centerOfMass, int handling, float swingDamageFactor, float thrustDamageFactor, short maxDataValue, string passBySoundCode, int accuracy, int missileSpeed, MatrixFrame stickingFrame, WeaponClass ammoClass, float sweetSpot, int swingSpeed, int swingDamage, int thrustSpeed, int thrustDamage, Vec3 rotationSpeed, WeaponComponentData.WeaponTiers tier, short reloadPhaseCount)
		{
			this.WeaponDescriptionId = weaponUsageName;
			this.PhysicsMaterial = physicsMaterial;
			this.ItemUsage = itemUsage;
			this.ThrustDamageType = thrustDamageType;
			this.SwingDamageType = swingDamageType;
			this.BodyArmor = bodyArmor;
			this.WeaponLength = weaponLength;
			this.WeaponBalance = weaponBalance;
			this.Inertia = inertia;
			this.CenterOfMass = centerOfMass;
			this.Handling = handling;
			this.SwingDamageFactor = swingDamageFactor;
			this.ThrustDamageFactor = thrustDamageFactor;
			this.MaxDataValue = maxDataValue;
			this.PassbySoundCode = passBySoundCode;
			this.Accuracy = accuracy;
			this.MissileSpeed = missileSpeed;
			this.StickingFrame = stickingFrame;
			this.AmmoClass = ammoClass;
			this.SweetSpotReach = sweetSpot;
			this.SwingSpeed = swingSpeed;
			this.SwingDamage = swingDamage;
			this.ThrustSpeed = thrustSpeed;
			this.ThrustDamage = thrustDamage;
			this.Frame = MatrixFrame.Identity;
			this.CenterOfMass3D = new Vec3(0f, 0f, centerOfMass, -1f);
			this.RotationSpeed = rotationSpeed;
			this.WeaponTier = tier;
			this.ReloadPhaseCount = reloadPhaseCount;
		}

		// Token: 0x17000189 RID: 393
		// (get) Token: 0x06000475 RID: 1141 RVA: 0x0001016D File Offset: 0x0000E36D
		public bool IsMeleeWeapon
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.MeleeWeapon);
			}
		}

		// Token: 0x1700018A RID: 394
		// (get) Token: 0x06000476 RID: 1142 RVA: 0x0001017C File Offset: 0x0000E37C
		public bool IsRangedWeapon
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.RangedWeapon);
			}
		}

		// Token: 0x1700018B RID: 395
		// (get) Token: 0x06000477 RID: 1143 RVA: 0x0001018B File Offset: 0x0000E38B
		public bool IsPolearm
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.MeleeWeapon | WeaponFlags.WideGrip);
			}
		}

		// Token: 0x1700018C RID: 396
		// (get) Token: 0x06000478 RID: 1144 RVA: 0x0001019B File Offset: 0x0000E39B
		public bool IsConsumable
		{
			get
			{
				return this.WeaponFlags.HasAllFlags(WeaponFlags.Consumable);
			}
		}

		// Token: 0x1700018D RID: 397
		// (get) Token: 0x06000479 RID: 1145 RVA: 0x000101AE File Offset: 0x0000E3AE
		public bool IsAmmo
		{
			get
			{
				return !this.WeaponFlags.HasAnyFlag(WeaponFlags.WeaponMask) && this.IsConsumable;
			}
		}

		// Token: 0x1700018E RID: 398
		// (get) Token: 0x0600047A RID: 1146 RVA: 0x000101C7 File Offset: 0x0000E3C7
		public bool IsShield
		{
			get
			{
				return !this.WeaponFlags.HasAnyFlag(WeaponFlags.WeaponMask) && this.WeaponFlags.HasAllFlags(WeaponFlags.HasHitPoints | WeaponFlags.CanBlockRanged);
			}
		}

		// Token: 0x0600047B RID: 1147 RVA: 0x000101EB File Offset: 0x0000E3EB
		public void SetFrame(MatrixFrame frame)
		{
			this.Frame = frame;
		}

		// Token: 0x0600047C RID: 1148 RVA: 0x000101F4 File Offset: 0x0000E3F4
		public void SetAmmoOffset(Vec3 ammoOffset)
		{
			this.AmmoOffset = ammoOffset;
		}

		// Token: 0x1700018F RID: 399
		// (get) Token: 0x0600047D RID: 1149 RVA: 0x000101FD File Offset: 0x0000E3FD
		public SkillObject RelevantSkill
		{
			get
			{
				return WeaponComponentData.GetRelevantSkillFromWeaponClass(this.WeaponClass);
			}
		}

		// Token: 0x17000190 RID: 400
		// (get) Token: 0x0600047E RID: 1150 RVA: 0x0001020A File Offset: 0x0000E40A
		public bool CanHitMultipleTargets
		{
			get
			{
				return this.WeaponClass == WeaponClass.TwoHandedAxe || this.WeaponClass == WeaponClass.TwoHandedMace;
			}
		}

		// Token: 0x0600047F RID: 1151 RVA: 0x00010220 File Offset: 0x0000E420
		public static SkillObject GetRelevantSkillFromWeaponClass(WeaponClass weaponClass)
		{
			SkillObject skillObject = null;
			switch (weaponClass)
			{
			case WeaponClass.Dagger:
			case WeaponClass.OneHandedSword:
			case WeaponClass.OneHandedAxe:
			case WeaponClass.Mace:
				skillObject = DefaultSkills.OneHanded;
				break;
			case WeaponClass.TwoHandedSword:
			case WeaponClass.TwoHandedAxe:
			case WeaponClass.TwoHandedMace:
				skillObject = DefaultSkills.TwoHanded;
				break;
			case WeaponClass.OneHandedPolearm:
			case WeaponClass.TwoHandedPolearm:
			case WeaponClass.LowGripPolearm:
				skillObject = DefaultSkills.Polearm;
				break;
			case WeaponClass.Arrow:
			case WeaponClass.Bow:
				skillObject = DefaultSkills.Bow;
				break;
			case WeaponClass.Bolt:
			case WeaponClass.Crossbow:
				skillObject = DefaultSkills.Crossbow;
				break;
			case WeaponClass.Stone:
			case WeaponClass.Boulder:
			case WeaponClass.ThrowingAxe:
			case WeaponClass.ThrowingKnife:
			case WeaponClass.Javelin:
				skillObject = DefaultSkills.Throwing;
				break;
			case WeaponClass.SmallShield:
			case WeaponClass.LargeShield:
				skillObject = DefaultSkills.OneHanded;
				break;
			}
			return skillObject;
		}

		// Token: 0x06000480 RID: 1152 RVA: 0x000102D4 File Offset: 0x0000E4D4
		public static ItemObject.ItemTypeEnum GetItemTypeFromWeaponClass(WeaponClass weaponClass)
		{
			switch (weaponClass)
			{
			case WeaponClass.Undefined:
			case WeaponClass.NumClasses:
				return ItemObject.ItemTypeEnum.Invalid;
			case WeaponClass.Dagger:
			case WeaponClass.OneHandedSword:
			case WeaponClass.OneHandedAxe:
			case WeaponClass.Mace:
				return ItemObject.ItemTypeEnum.OneHandedWeapon;
			case WeaponClass.TwoHandedSword:
			case WeaponClass.TwoHandedAxe:
			case WeaponClass.Pick:
			case WeaponClass.TwoHandedMace:
				return ItemObject.ItemTypeEnum.TwoHandedWeapon;
			case WeaponClass.OneHandedPolearm:
			case WeaponClass.TwoHandedPolearm:
			case WeaponClass.LowGripPolearm:
				return ItemObject.ItemTypeEnum.Polearm;
			case WeaponClass.Arrow:
				return ItemObject.ItemTypeEnum.Arrows;
			case WeaponClass.Bolt:
				return ItemObject.ItemTypeEnum.Bolts;
			case WeaponClass.Cartridge:
				return ItemObject.ItemTypeEnum.Bullets;
			case WeaponClass.Bow:
				return ItemObject.ItemTypeEnum.Bow;
			case WeaponClass.Crossbow:
				return ItemObject.ItemTypeEnum.Crossbow;
			case WeaponClass.Stone:
			case WeaponClass.Boulder:
			case WeaponClass.ThrowingAxe:
			case WeaponClass.ThrowingKnife:
			case WeaponClass.Javelin:
				return ItemObject.ItemTypeEnum.Thrown;
			case WeaponClass.Pistol:
				return ItemObject.ItemTypeEnum.Pistol;
			case WeaponClass.Musket:
				return ItemObject.ItemTypeEnum.Musket;
			case WeaponClass.SmallShield:
			case WeaponClass.LargeShield:
				return ItemObject.ItemTypeEnum.Shield;
			case WeaponClass.Banner:
				return ItemObject.ItemTypeEnum.Banner;
			default:
				return ItemObject.ItemTypeEnum.Invalid;
			}
		}

		// Token: 0x06000481 RID: 1153 RVA: 0x0001037C File Offset: 0x0000E57C
		public WeaponComponentData(ItemObject item, WeaponClass weaponClass = WeaponClass.Undefined, WeaponFlags weaponFlags = (WeaponFlags)0UL)
		{
			this.BodyArmor = 0;
			this.PhysicsMaterial = "";
			this.FlyingSoundCode = "";
			this.PassbySoundCode = "";
			this.ItemUsage = null;
			this.SwingSpeed = 0;
			this.ThrustSpeed = 0;
			this.MissileSpeed = 0;
			this.WeaponLength = 0;
			this.ThrustDamage = 0;
			this.SwingDamage = 0;
			this.AmmoOffset = Vec3.Zero;
			this.Accuracy = 0;
			this.StickingFrame = MatrixFrame.Identity;
			this.TrailParticleName = "";
			this.WeaponClass = weaponClass;
			this.WeaponFlags = weaponFlags;
			this.Frame = MatrixFrame.Identity;
			this.RotationSpeed = Vec3.Zero;
			this.ReloadPhaseCount = 0;
		}

		// Token: 0x06000482 RID: 1154 RVA: 0x0001043C File Offset: 0x0000E63C
		public void Deserialize(ItemObject item, XmlNode node)
		{
			this.BodyArmor = ((node.Attributes["body_armor"] != null) ? int.Parse(node.Attributes["body_armor"].Value) : 0);
			XmlAttribute xmlAttribute = node.Attributes["physics_material"];
			this.PhysicsMaterial = ((xmlAttribute != null) ? xmlAttribute.Value : null);
			XmlAttribute xmlAttribute2 = node.Attributes["flying_sound_code"];
			this.FlyingSoundCode = ((xmlAttribute2 != null) ? xmlAttribute2.Value : null);
			XmlAttribute xmlAttribute3 = node.Attributes["passby_sound_code"];
			this.PassbySoundCode = ((xmlAttribute3 != null) ? xmlAttribute3.Value : null);
			XmlAttribute xmlAttribute4 = node.Attributes["item_usage"];
			this.ItemUsage = ((xmlAttribute4 != null) ? xmlAttribute4.Value : null);
			this.WeaponBalance = ((node.Attributes["weapon_balance"] != null) ? ((float)int.Parse(node.Attributes["weapon_balance"].Value) * 0.01f) : 0f);
			this.SwingSpeed = ((node.Attributes["speed_rating"] != null) ? int.Parse(node.Attributes["speed_rating"].Value) : 0);
			this.ThrustSpeed = ((node.Attributes["thrust_speed"] != null) ? int.Parse(node.Attributes["thrust_speed"].Value) : 0);
			this.MissileSpeed = ((node.Attributes["missile_speed"] != null) ? int.Parse(node.Attributes["missile_speed"].Value) : 0);
			this.WeaponLength = ((node.Attributes["weapon_length"] != null) ? int.Parse(node.Attributes["weapon_length"].Value) : 0);
			this.ThrustDamage = ((node.Attributes["thrust_damage"] != null) ? int.Parse(node.Attributes["thrust_damage"].Value) : 0);
			this.SwingDamage = ((node.Attributes["swing_damage"] != null) ? int.Parse(node.Attributes["swing_damage"].Value) : 0);
			this.Accuracy = ((node.Attributes["accuracy"] != null) ? int.Parse(node.Attributes["accuracy"].Value) : 100);
			this.ThrustDamageType = ((node.Attributes["thrust_damage_type"] != null) ? ((DamageTypes)Enum.Parse(typeof(DamageTypes), node.Attributes["thrust_damage_type"].Value)) : DamageTypes.Blunt);
			this.SwingDamageType = ((node.Attributes["swing_damage_type"] != null) ? ((DamageTypes)Enum.Parse(typeof(DamageTypes), node.Attributes["swing_damage_type"].Value)) : DamageTypes.Blunt);
			this.WeaponClass = ((node.Attributes["weapon_class"] != null) ? ((WeaponClass)Enum.Parse(typeof(WeaponClass), node.Attributes["weapon_class"].Value)) : WeaponClass.Undefined);
			this.AmmoClass = ((node.Attributes["ammo_class"] != null) ? ((WeaponClass)Enum.Parse(typeof(WeaponClass), node.Attributes["ammo_class"].Value)) : WeaponClass.Undefined);
			this.ReloadPhaseCount = ((node.Attributes["reload_phase_count"] != null) ? short.Parse(node.Attributes["reload_phase_count"].Value) : 1);
			this.CenterOfMass = (float)this.WeaponLength * 0.5f * 0.01f;
			this.CenterOfMass3D = ((node.Attributes["center_of_mass"] != null) ? Vec3.Parse(node.Attributes["center_of_mass"].Value) : Vec3.Zero);
			if (this.WeaponClass != WeaponClass.Bow && this.WeaponClass != WeaponClass.Crossbow && this.WeaponClass != WeaponClass.SmallShield && this.WeaponClass != WeaponClass.LargeShield && this.WeaponClass != WeaponClass.Arrow && this.WeaponClass != WeaponClass.Bolt && this.WeaponClass != WeaponClass.ThrowingKnife && this.WeaponClass != WeaponClass.ThrowingAxe && this.WeaponClass != WeaponClass.Javelin && this.WeaponClass != WeaponClass.Stone)
			{
				WeaponClass weaponClass = this.WeaponClass;
			}
			XmlAttribute xmlAttribute5 = node.Attributes["ammo_limit"];
			XmlAttribute xmlAttribute6 = node.Attributes["stack_amount"];
			XmlAttribute xmlAttribute7 = node.Attributes["hit_points"];
			if (xmlAttribute5 != null)
			{
				this.MaxDataValue = short.Parse(xmlAttribute5.Value);
			}
			else if (xmlAttribute6 != null)
			{
				this.MaxDataValue = short.Parse(xmlAttribute6.Value);
			}
			else if (xmlAttribute7 != null)
			{
				this.MaxDataValue = short.Parse(xmlAttribute7.Value);
			}
			else
			{
				this.MaxDataValue = 0;
			}
			Vec3 vec = default(Vec3);
			Mat3 identity = Mat3.Identity;
			XmlNode xmlNode = node.Attributes["sticking_position"];
			if (xmlNode != null)
			{
				string[] array = xmlNode.Value.Split(new char[] { ',' });
				if (array.Length == 3)
				{
					float.TryParse(array[0], out vec.x);
					float.TryParse(array[1], out vec.y);
					float.TryParse(array[2], out vec.z);
				}
			}
			XmlNode xmlNode2 = node.Attributes["sticking_rotation"];
			if (xmlNode2 != null)
			{
				string[] array2 = xmlNode2.Value.Split(new char[] { ',' });
				if (array2.Length == 3)
				{
					float num;
					float.TryParse(array2[0], out num);
					float num2;
					float.TryParse(array2[1], out num2);
					float num3;
					float.TryParse(array2[2], out num3);
					identity.RotateAboutSide(num.ToRadians());
					identity.RotateAboutUp(num2.ToRadians());
					identity.RotateAboutForward(num3.ToRadians());
				}
			}
			vec = identity.TransformToParent(vec);
			this.StickingFrame = new MatrixFrame(identity, vec);
			Vec3 vec2 = default(Vec3);
			Mat3 identity2 = Mat3.Identity;
			XmlNode xmlNode3 = node.Attributes["position"];
			if (xmlNode3 != null)
			{
				string[] array3 = xmlNode3.Value.Split(new char[] { ',' });
				if (array3.Length == 3)
				{
					float.TryParse(array3[0], out vec2.x);
					float.TryParse(array3[1], out vec2.y);
					float.TryParse(array3[2], out vec2.z);
				}
			}
			XmlNode xmlNode4 = node.Attributes["rotation"];
			if (xmlNode4 != null)
			{
				string[] array4 = xmlNode4.Value.Split(new char[] { ',' });
				if (array4.Length == 3)
				{
					float num4;
					float.TryParse(array4[0], out num4);
					float num5;
					float.TryParse(array4[1], out num5);
					float num6;
					float.TryParse(array4[2], out num6);
					identity2.RotateAboutUp(num6.ToRadians());
					identity2.RotateAboutSide(num4.ToRadians());
					identity2.RotateAboutForward(num5.ToRadians());
				}
			}
			this.Frame = new MatrixFrame(identity2, vec2);
			this.RotationSpeed = ((node.Attributes["rotation_speed"] != null) ? Vec3.Parse(node.Attributes["rotation_speed"].Value) : Vec3.Zero);
			XmlAttribute xmlAttribute8 = node.Attributes["trail_particle_name"];
			this.TrailParticleName = ((xmlAttribute8 != null) ? xmlAttribute8.Value : null);
			foreach (object obj in node.ChildNodes)
			{
				XmlNode xmlNode5 = (XmlNode)obj;
				if (xmlNode5.Name == "WeaponFlags")
				{
					foreach (object obj2 in Enum.GetValues(typeof(WeaponFlags)))
					{
						WeaponFlags weaponFlags = (WeaponFlags)obj2;
						if (xmlNode5.Attributes[weaponFlags.ToString()] != null)
						{
							this.WeaponFlags |= weaponFlags;
						}
					}
				}
			}
			this.Inertia = item.Weight * 0.05f;
			this.Handling = this.ThrustSpeed;
			this.SweetSpotReach = 0.93f;
			this.SetDamageFactors(item.Weight);
		}

		// Token: 0x06000483 RID: 1155 RVA: 0x00010CCC File Offset: 0x0000EECC
		private void SetDamageFactors(float weight)
		{
			DamageTypes swingDamageType = this.SwingDamageType;
			if (this.WeaponClass == WeaponClass.Bow || this.WeaponClass == WeaponClass.Crossbow || this.WeaponClass == WeaponClass.ThrowingAxe || this.WeaponClass == WeaponClass.ThrowingKnife || this.WeaponClass == WeaponClass.Javelin || this.WeaponClass == WeaponClass.Arrow || this.WeaponClass == WeaponClass.Bolt)
			{
				this.SwingDamageFactor = 1f;
				this.ThrustDamageFactor = 1f;
				return;
			}
			float num = MathF.Sqrt(MathF.Sqrt(weight / ((float)this.WeaponLength * 0.01f)));
			float num2 = 0f;
			switch (swingDamageType)
			{
			case DamageTypes.Cut:
				num *= 0.8f;
				num2 = 0.5f;
				break;
			case DamageTypes.Pierce:
				num *= 0.7f;
				num2 = 0.4f;
				break;
			case DamageTypes.Blunt:
				num *= 1f;
				num2 = 1f;
				break;
			}
			num *= 0.8f;
			num2 *= 0.8f;
			this.SwingDamageFactor = num2;
			this.ThrustDamageFactor = num2;
		}

		// Token: 0x06000484 RID: 1156 RVA: 0x00010DBD File Offset: 0x0000EFBD
		public float GetRealWeaponLength()
		{
			return (float)this.WeaponLength * 0.01f + Vec3.DotProduct(this.Frame.rotation.u, this.Frame.origin);
		}

		// Token: 0x06000485 RID: 1157 RVA: 0x00010DF0 File Offset: 0x0000EFF0
		public MatrixFrame GetMissileStartingFrame()
		{
			MatrixFrame identity;
			if (this.WeaponClass == WeaponClass.Arrow || this.WeaponClass == WeaponClass.Bolt)
			{
				Mat3 mat = new Mat3(1f, 0f, 0f, 0f, 0f, -1f, 0f, 1f, 0f);
				identity.rotation = mat;
				identity.origin = Vec3.Zero;
			}
			else
			{
				identity = MatrixFrame.Identity;
				if (this.WeaponClass == WeaponClass.ThrowingAxe)
				{
					identity.rotation.RotateAboutUp(-1.5707964f);
				}
				else if (this.WeaponClass == WeaponClass.ThrowingKnife)
				{
					identity.rotation.RotateAboutUp(-1.5707964f);
				}
				else
				{
					Mat3 mat2 = new Mat3(1f, 0f, 0f, 0f, 0f, -1f, 0f, 1f, 0f);
					identity.rotation = mat2;
				}
			}
			return identity;
		}

		// Token: 0x0400023D RID: 573
		public WeaponFlags WeaponFlags;

		// Token: 0x020000EB RID: 235
		public enum WeaponTiers
		{
			// Token: 0x0400067D RID: 1661
			Tier1,
			// Token: 0x0400067E RID: 1662
			Tier2,
			// Token: 0x0400067F RID: 1663
			Tier3,
			// Token: 0x04000680 RID: 1664
			Tier4,
			// Token: 0x04000681 RID: 1665
			Special
		}
	}
}
