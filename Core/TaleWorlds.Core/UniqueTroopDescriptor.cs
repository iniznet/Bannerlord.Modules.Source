using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	// Token: 0x0200003F RID: 63
	public struct UniqueTroopDescriptor : IComparable<UniqueTroopDescriptor>, IEquatable<UniqueTroopDescriptor>
	{
		// Token: 0x060004DC RID: 1244 RVA: 0x00012510 File Offset: 0x00010710
		public static void AutoGeneratedStaticCollectObjectsUniqueTroopDescriptor(object o, List<object> collectedObjects)
		{
			((UniqueTroopDescriptor)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x060004DD RID: 1245 RVA: 0x0001252C File Offset: 0x0001072C
		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		// Token: 0x060004DE RID: 1246 RVA: 0x00012530 File Offset: 0x00010730
		internal static object AutoGeneratedGetMemberValueUniqueSeed(object o)
		{
			return ((UniqueTroopDescriptor)o).UniqueSeed;
		}

		// Token: 0x060004DF RID: 1247 RVA: 0x00012550 File Offset: 0x00010750
		public UniqueTroopDescriptor(int uniqueSeed)
		{
			this = default(UniqueTroopDescriptor);
			this.UniqueSeed = uniqueSeed;
		}

		// Token: 0x1700019E RID: 414
		// (get) Token: 0x060004E0 RID: 1248 RVA: 0x00012560 File Offset: 0x00010760
		// (set) Token: 0x060004E1 RID: 1249 RVA: 0x00012568 File Offset: 0x00010768
		[SaveableProperty(1)]
		public int UniqueSeed { get; private set; }

		// Token: 0x1700019F RID: 415
		// (get) Token: 0x060004E2 RID: 1250 RVA: 0x00012571 File Offset: 0x00010771
		public static UniqueTroopDescriptor Invalid
		{
			get
			{
				return UniqueTroopDescriptor.InvalidDescriptor;
			}
		}

		// Token: 0x170001A0 RID: 416
		// (get) Token: 0x060004E3 RID: 1251 RVA: 0x00012578 File Offset: 0x00010778
		public bool IsValid
		{
			get
			{
				return this.UniqueSeed > 0;
			}
		}

		// Token: 0x060004E4 RID: 1252 RVA: 0x00012584 File Offset: 0x00010784
		public int CompareTo(UniqueTroopDescriptor other)
		{
			return this.UniqueSeed.CompareTo(other.UniqueSeed);
		}

		// Token: 0x060004E5 RID: 1253 RVA: 0x000125A8 File Offset: 0x000107A8
		public int CompareTo(int uniqueSeed)
		{
			return this.UniqueSeed.CompareTo(uniqueSeed);
		}

		// Token: 0x060004E6 RID: 1254 RVA: 0x000125C4 File Offset: 0x000107C4
		public override string ToString()
		{
			return this.UniqueSeed.ToString();
		}

		// Token: 0x060004E7 RID: 1255 RVA: 0x000125E0 File Offset: 0x000107E0
		public override bool Equals(object obj)
		{
			return obj is UniqueTroopDescriptor && ((UniqueTroopDescriptor)obj).UniqueSeed == this.UniqueSeed;
		}

		// Token: 0x060004E8 RID: 1256 RVA: 0x0001260D File Offset: 0x0001080D
		public bool Equals(UniqueTroopDescriptor other)
		{
			return other.UniqueSeed == this.UniqueSeed;
		}

		// Token: 0x060004E9 RID: 1257 RVA: 0x0001261E File Offset: 0x0001081E
		public override int GetHashCode()
		{
			return this.UniqueSeed;
		}

		// Token: 0x060004EA RID: 1258 RVA: 0x00012626 File Offset: 0x00010826
		public static bool operator ==(UniqueTroopDescriptor a, UniqueTroopDescriptor b)
		{
			return a.UniqueSeed == b.UniqueSeed;
		}

		// Token: 0x060004EB RID: 1259 RVA: 0x00012638 File Offset: 0x00010838
		public static bool operator !=(UniqueTroopDescriptor a, UniqueTroopDescriptor b)
		{
			return !(a == b);
		}

		// Token: 0x0400025C RID: 604
		private static readonly UniqueTroopDescriptor InvalidDescriptor;
	}
}
