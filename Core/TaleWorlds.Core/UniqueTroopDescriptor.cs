using System;
using System.Collections.Generic;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	public struct UniqueTroopDescriptor : IComparable<UniqueTroopDescriptor>, IEquatable<UniqueTroopDescriptor>
	{
		public static void AutoGeneratedStaticCollectObjectsUniqueTroopDescriptor(object o, List<object> collectedObjects)
		{
			((UniqueTroopDescriptor)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		internal static object AutoGeneratedGetMemberValueUniqueSeed(object o)
		{
			return ((UniqueTroopDescriptor)o).UniqueSeed;
		}

		public UniqueTroopDescriptor(int uniqueSeed)
		{
			this = default(UniqueTroopDescriptor);
			this.UniqueSeed = uniqueSeed;
		}

		[SaveableProperty(1)]
		public int UniqueSeed { get; private set; }

		public static UniqueTroopDescriptor Invalid
		{
			get
			{
				return UniqueTroopDescriptor.InvalidDescriptor;
			}
		}

		public bool IsValid
		{
			get
			{
				return this.UniqueSeed > 0;
			}
		}

		public int CompareTo(UniqueTroopDescriptor other)
		{
			return this.UniqueSeed.CompareTo(other.UniqueSeed);
		}

		public int CompareTo(int uniqueSeed)
		{
			return this.UniqueSeed.CompareTo(uniqueSeed);
		}

		public override string ToString()
		{
			return this.UniqueSeed.ToString();
		}

		public override bool Equals(object obj)
		{
			return obj is UniqueTroopDescriptor && ((UniqueTroopDescriptor)obj).UniqueSeed == this.UniqueSeed;
		}

		public bool Equals(UniqueTroopDescriptor other)
		{
			return other.UniqueSeed == this.UniqueSeed;
		}

		public override int GetHashCode()
		{
			return this.UniqueSeed;
		}

		public static bool operator ==(UniqueTroopDescriptor a, UniqueTroopDescriptor b)
		{
			return a.UniqueSeed == b.UniqueSeed;
		}

		public static bool operator !=(UniqueTroopDescriptor a, UniqueTroopDescriptor b)
		{
			return !(a == b);
		}

		private static readonly UniqueTroopDescriptor InvalidDescriptor;
	}
}
