using System;
using System.Collections.Generic;
using TaleWorlds.Localization;

namespace TaleWorlds.Core
{
	public sealed class SkillObject : PropertyObject
	{
		internal static void AutoGeneratedStaticCollectObjectsSkillObject(object o, List<object> collectedObjects)
		{
			((SkillObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public SkillObject(string stringId)
			: base(stringId)
		{
		}

		public void SetAttribute(CharacterAttribute attribute)
		{
			this.CharacterAttribute = attribute;
		}

		public CharacterAttribute CharacterAttribute
		{
			get
			{
				return this._characterAttribute;
			}
			private set
			{
				this._characterAttribute = value;
				this._characterAttribute.AddSkill(this);
			}
		}

		public override string ToString()
		{
			return base.Name.ToString();
		}

		public SkillObject Initialize(TextObject name, TextObject description, SkillObject.SkillTypeEnum skillType)
		{
			base.Initialize(name, description);
			this._skillType = skillType;
			base.AfterInitialized();
			return this;
		}

		public bool IsLeaderSkill
		{
			get
			{
				return this._skillType == SkillObject.SkillTypeEnum.Leader;
			}
		}

		public bool IsPartySkill
		{
			get
			{
				return this._skillType == SkillObject.SkillTypeEnum.Party;
			}
		}

		public bool IsPersonalSkill
		{
			get
			{
				return this._skillType == SkillObject.SkillTypeEnum.Personal;
			}
		}

		public TextObject HowToLearnSkillText
		{
			get
			{
				if (GameTexts.FindText("str_how_to_learn_skill", base.StringId) == null)
				{
					return new TextObject("{=Aj3zqQq4}Not available", null);
				}
				return GameTexts.FindText("str_how_to_learn_skill", base.StringId);
			}
		}

		private SkillObject.SkillTypeEnum _skillType;

		private CharacterAttribute _characterAttribute;

		public enum SkillTypeEnum
		{
			Personal,
			Leader,
			Party
		}
	}
}
