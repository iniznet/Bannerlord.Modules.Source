using System;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using TaleWorlds.Library;

namespace TaleWorlds.Core
{
	// Token: 0x02000028 RID: 40
	public class EntitySystem<T> where T : class, IEntityComponent
	{
		// Token: 0x06000281 RID: 641 RVA: 0x0000B2C5 File Offset: 0x000094C5
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
		}

		// Token: 0x170000C4 RID: 196
		// (get) Token: 0x06000282 RID: 642 RVA: 0x0000B2C7 File Offset: 0x000094C7
		public MBReadOnlyList<T> Components
		{
			get
			{
				return this._components;
			}
		}

		// Token: 0x06000283 RID: 643 RVA: 0x0000B2CF File Offset: 0x000094CF
		public EntitySystem()
		{
			this._components = new MBList<T>();
			this._componentsOfTypes = new Dictionary<Type, IList>();
		}

		// Token: 0x06000284 RID: 644 RVA: 0x0000B2ED File Offset: 0x000094ED
		public TComponent AddComponent<TComponent>() where TComponent : class, T, new()
		{
			return this.AddComponent(typeof(TComponent)) as TComponent;
		}

		// Token: 0x06000285 RID: 645 RVA: 0x0000B310 File Offset: 0x00009510
		public T AddComponent(Type componentType)
		{
			T t = componentType.GetConstructor(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance, null, new Type[0], null).Invoke(new object[0]) as T;
			this._components.Add(t);
			Type type = t.GetType();
			while (type != null && type != typeof(object))
			{
				if (!this._componentsOfTypes.ContainsKey(type))
				{
					IList list = Activator.CreateInstance(typeof(List<>).MakeGenericType(new Type[] { type })) as IList;
					this._componentsOfTypes.Add(type, list);
				}
				this._componentsOfTypes[type].Add(t);
				type = type.BaseType;
			}
			t.OnInitialize();
			return t;
		}

		// Token: 0x06000286 RID: 646 RVA: 0x0000B3E8 File Offset: 0x000095E8
		public TComponent GetComponent<TComponent>() where TComponent : class, T
		{
			if (this._componentsOfTypes.ContainsKey(typeof(TComponent)))
			{
				IList list = this._componentsOfTypes[typeof(TComponent)];
				if (list.Count > 0)
				{
					return list[0] as TComponent;
				}
			}
			return default(TComponent);
		}

		// Token: 0x06000287 RID: 647 RVA: 0x0000B448 File Offset: 0x00009648
		public T GetComponent(Type componentType)
		{
			if (this._componentsOfTypes.ContainsKey(componentType))
			{
				IList list = this._componentsOfTypes[componentType];
				if (list.Count > 0)
				{
					return list[0] as T;
				}
			}
			return default(T);
		}

		// Token: 0x06000288 RID: 648 RVA: 0x0000B494 File Offset: 0x00009694
		public List<TComponent> GetComponents<TComponent>() where TComponent : class, T
		{
			if (this._componentsOfTypes.ContainsKey(typeof(TComponent)))
			{
				IList list = this._componentsOfTypes[typeof(TComponent)];
				if (list.Count > 0)
				{
					return list as List<TComponent>;
				}
			}
			return null;
		}

		// Token: 0x06000289 RID: 649 RVA: 0x0000B4DF File Offset: 0x000096DF
		public MBList<T> GetComponents()
		{
			return this._components;
		}

		// Token: 0x0600028A RID: 650 RVA: 0x0000B4E8 File Offset: 0x000096E8
		public void RemoveComponent(T component)
		{
			component.OnFinalize();
			this._components.Remove(component);
			Type type = component.GetType();
			while (type != null && type != typeof(object))
			{
				this._componentsOfTypes[type].Remove(component);
				type = type.BaseType;
			}
		}

		// Token: 0x0600028B RID: 651 RVA: 0x0000B554 File Offset: 0x00009754
		public void RemoveComponent<TComponent>() where TComponent : class, T
		{
			TComponent component = this.GetComponent<TComponent>();
			if (component != null)
			{
				this.RemoveComponent((T)((object)component));
			}
		}

		// Token: 0x040001AB RID: 427
		private readonly MBList<T> _components;

		// Token: 0x040001AC RID: 428
		private readonly Dictionary<Type, IList> _componentsOfTypes;
	}
}
