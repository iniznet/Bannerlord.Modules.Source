using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	public sealed class ItemObject : MBObjectBase
	{
		internal static void AutoGeneratedStaticCollectObjectsItemObject(object o, List<object> collectedObjects)
		{
			((ItemObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		public ItemComponent ItemComponent { get; private set; }

		public string MultiMeshName { get; private set; }

		public string HolsterMeshName { get; private set; }

		public string HolsterWithWeaponMeshName { get; private set; }

		public string[] ItemHolsters { get; private set; }

		public Vec3 HolsterPositionShift { get; private set; }

		public bool HasLowerHolsterPriority { get; private set; }

		public string FlyingMeshName { get; private set; }

		public string BodyName { get; private set; }

		public string HolsterBodyName { get; private set; }

		public string CollisionBodyName { get; private set; }

		public bool RecalculateBody { get; private set; }

		public string PrefabName { get; private set; }

		public TextObject Name { get; private set; }

		public ItemFlags ItemFlags { get; private set; }

		public ItemCategory ItemCategory { get; private set; }

		public int Value { get; private set; }

		public float Effectiveness { get; private set; }

		public float Weight { get; private set; }

		public int Difficulty { get; private set; }

		public float Appearance { get; private set; }

		public bool IsUsingTableau { get; private set; }

		public bool IsUsingTeamColor
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.UseTeamColor);
			}
		}

		public bool DoesNotHideChest
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.DoesNotHideChest);
			}
		}

		public bool IsCivilian
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.Civilian);
			}
		}

		public bool UsingFacegenScaling
		{
			get
			{
				return this.Type == ItemObject.ItemTypeEnum.HeadArmor && this.ArmorComponent.MeshesMask.HasAnyFlag(SkinMask.HeadVisible);
			}
		}

		public string ArmBandMeshName { get; private set; }

		public bool IsFood { get; private set; }

		public bool IsUniqueItem { get; private set; }

		public float ScaleFactor { get; private set; }

		public BasicCultureObject Culture { get; private set; }

		public bool MultiplayerItem { get; private set; }

		public bool NotMerchandise { get; private set; }

		public bool IsCraftedByPlayer { get; private set; }

		public int LodAtlasIndex { get; private set; }

		public bool IsCraftedWeapon
		{
			get
			{
				return this.WeaponDesign != null;
			}
		}

		public WeaponDesign WeaponDesign { get; private set; }

		public WeaponComponentData PrimaryWeapon
		{
			get
			{
				WeaponComponent weaponComponent = this.WeaponComponent;
				if (weaponComponent == null)
				{
					return null;
				}
				return weaponComponent.PrimaryWeapon;
			}
		}

		public WeaponComponent WeaponComponent
		{
			get
			{
				return this.ItemComponent as WeaponComponent;
			}
		}

		public bool HasWeaponComponent
		{
			get
			{
				return this.WeaponComponent != null;
			}
		}

		public HorseComponent HorseComponent
		{
			get
			{
				return this.ItemComponent as HorseComponent;
			}
		}

		public bool HasHorseComponent
		{
			get
			{
				return this.HorseComponent != null;
			}
		}

		public ArmorComponent ArmorComponent
		{
			get
			{
				return this.ItemComponent as ArmorComponent;
			}
		}

		public bool HasArmorComponent
		{
			get
			{
				return this.ArmorComponent != null;
			}
		}

		public BannerComponent BannerComponent
		{
			get
			{
				return this.ItemComponent as BannerComponent;
			}
		}

		public bool HasBannerComponent
		{
			get
			{
				return this.BannerComponent != null;
			}
		}

		public SaddleComponent SaddleComponent
		{
			get
			{
				return this.ItemComponent as SaddleComponent;
			}
		}

		public bool HasSaddleComponent
		{
			get
			{
				return this.SaddleComponent != null;
			}
		}

		public TradeItemComponent FoodComponent
		{
			get
			{
				return this.ItemComponent as TradeItemComponent;
			}
		}

		public bool HasFoodComponent
		{
			get
			{
				return this.FoodComponent != null;
			}
		}

		public ItemObject()
		{
		}

		public ItemObject(string stringId)
			: base(stringId)
		{
		}

		public ItemObject(ItemObject itemToCopy)
			: base(itemToCopy)
		{
			this.ItemComponent = itemToCopy.ItemComponent;
			this.MultiMeshName = itemToCopy.MultiMeshName;
			this.HolsterMeshName = itemToCopy.HolsterMeshName;
			this.HolsterWithWeaponMeshName = itemToCopy.HolsterWithWeaponMeshName;
			this.ItemHolsters = itemToCopy.ItemHolsters;
			this.HolsterPositionShift = itemToCopy.HolsterPositionShift;
			this.FlyingMeshName = itemToCopy.FlyingMeshName;
			this.BodyName = itemToCopy.BodyName;
			this.HolsterBodyName = itemToCopy.HolsterBodyName;
			this.CollisionBodyName = itemToCopy.CollisionBodyName;
			this.RecalculateBody = itemToCopy.RecalculateBody;
			this.PrefabName = itemToCopy.PrefabName;
			this.Name = itemToCopy.Name;
			this.ItemFlags = itemToCopy.ItemFlags;
			this.Value = itemToCopy.Value;
			this.Weight = itemToCopy.Weight;
			this.Difficulty = itemToCopy.Difficulty;
			this.ArmBandMeshName = itemToCopy.ArmBandMeshName;
			this.IsFood = itemToCopy.IsFood;
			this.Type = itemToCopy.Type;
			this.ScaleFactor = itemToCopy.ScaleFactor;
			this.IsUniqueItem = false;
		}

		public static ItemObject InitializeTradeGood(ItemObject item, TextObject name, string meshName, ItemCategory category, int value, float weight, ItemObject.ItemTypeEnum itemType, bool isFood = false)
		{
			item.Initialize();
			item.Name = name;
			item.MultiMeshName = meshName;
			item.ItemCategory = category;
			item.Value = value;
			item.Weight = weight;
			item.ItemType = itemType;
			item.IsFood = isFood;
			item.ItemComponent = new TradeItemComponent();
			item.AfterInitialized();
			item.ItemFlags |= ItemFlags.Civilian;
			return item;
		}

		public static void InitAsPlayerCraftedItem(ref ItemObject itemObject)
		{
			itemObject.IsCraftedByPlayer = true;
		}

		internal static void InitCraftedItemObject(ref ItemObject itemObject, TextObject name, BasicCultureObject culture, ItemFlags itemProperties, float weight, float appearance, WeaponDesign craftedData, ItemObject.ItemTypeEnum itemType)
		{
			BladeData bladeData = craftedData.UsedPieces[0].CraftingPiece.BladeData;
			itemObject.Weight = weight;
			itemObject.Name = name;
			itemObject.MultiMeshName = "";
			itemObject.HolsterMeshName = "";
			itemObject.HolsterWithWeaponMeshName = "";
			itemObject.ItemHolsters = (string[])craftedData.Template.ItemHolsters.Clone();
			itemObject.HolsterPositionShift = craftedData.HolsterShiftAmount;
			itemObject.FlyingMeshName = "";
			itemObject.BodyName = ((bladeData != null) ? bladeData.BodyName : null);
			itemObject.HolsterBodyName = ((bladeData != null) ? bladeData.HolsterBodyName : null) ?? ((bladeData != null) ? bladeData.BodyName : null);
			itemObject.CollisionBodyName = "";
			itemObject.RecalculateBody = true;
			itemObject.Culture = culture;
			itemObject.Difficulty = 0;
			itemObject.ScaleFactor = 1f;
			itemObject.Type = itemType;
			itemObject.ItemFlags = itemProperties;
			itemObject.Appearance = appearance;
			itemObject.WeaponDesign = craftedData;
		}

		public override int GetHashCode()
		{
			return (int)base.Id.SubId;
		}

		public void SetItemFlagsForCosmetics(ItemFlags newFlags)
		{
			this.ItemFlags = newFlags;
		}

		public float Tierf
		{
			get
			{
				return Game.Current.BasicModels.ItemValueModel.CalculateTier(this);
			}
		}

		public ItemObject.ItemTiers Tier
		{
			get
			{
				if (this.ItemComponent == null)
				{
					return ItemObject.ItemTiers.Tier1;
				}
				return (ItemObject.ItemTiers)(MBMath.ClampInt(MathF.Round(this.Tierf), 0, 6) - 1);
			}
		}

		public void DetermineItemCategoryForItem()
		{
			if (Game.Current.BasicModels.ItemCategorySelector != null && this.ItemCategory == null)
			{
				this.ItemCategory = Game.Current.BasicModels.ItemCategorySelector.GetItemCategoryForItem(this);
			}
		}

		public static ItemObject GetCraftedItemObjectFromHashedCode(string hashedCode)
		{
			foreach (ItemObject itemObject in MBObjectManager.Instance.GetObjectTypeList<ItemObject>())
			{
				if (itemObject.IsCraftedWeapon && itemObject.WeaponDesign.HashedCode == hashedCode)
				{
					return itemObject;
				}
			}
			return null;
		}

		public ItemObject PrerequisiteItem { get; private set; }

		public MBReadOnlyList<WeaponComponentData> Weapons
		{
			get
			{
				WeaponComponent weaponComponent = this.WeaponComponent;
				if (weaponComponent == null)
				{
					return null;
				}
				return weaponComponent.Weapons;
			}
		}

		public void AddWeapon(WeaponComponentData weapon, ItemModifierGroup itemModifierGroup)
		{
			if (this.WeaponComponent == null)
			{
				this.ItemComponent = new WeaponComponent(this);
			}
			this.WeaponComponent.AddWeapon(weapon, itemModifierGroup);
		}

		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			if (node.Name == "CraftedItem")
			{
				XmlNode xmlNode = node.Attributes["multiplayer_item"];
				if (xmlNode != null && !string.IsNullOrEmpty(xmlNode.InnerText))
				{
					this.MultiplayerItem = xmlNode.InnerText == "true";
				}
				XmlNode xmlNode2 = node.Attributes["is_merchandise"];
				if (xmlNode2 != null && !string.IsNullOrEmpty(xmlNode2.InnerText))
				{
					this.NotMerchandise = xmlNode2.InnerText != "true";
				}
				TextObject textObject = new TextObject(node.Attributes["name"].InnerText, null);
				string innerText = node.Attributes["crafting_template"].InnerText;
				bool flag = node.Attributes["has_modifier"] == null || node.Attributes["has_modifier"].InnerText != "false";
				XmlAttribute xmlAttribute = node.Attributes["modifier_group"];
				string text = ((xmlAttribute != null) ? xmlAttribute.Value : null);
				ItemModifierGroup itemModifierGroup = null;
				if (flag)
				{
					if (text == null)
					{
						itemModifierGroup = CraftingTemplate.GetTemplateFromId(innerText).ItemModifierGroup;
					}
					else
					{
						itemModifierGroup = Game.Current.ObjectManager.GetObject<ItemModifierGroup>(text);
					}
				}
				WeaponDesignElement[] array = new WeaponDesignElement[4];
				XmlNode xmlNode3 = null;
				for (int i = 0; i < node.ChildNodes.Count; i++)
				{
					if (node.ChildNodes[i].Name == "Pieces")
					{
						xmlNode3 = node.ChildNodes[i];
						break;
					}
				}
				foreach (object obj in xmlNode3.ChildNodes)
				{
					XmlNode xmlNode4 = (XmlNode)obj;
					if (xmlNode4.Name == "Piece")
					{
						XmlNode xmlNode5 = xmlNode4.Attributes["id"];
						XmlAttribute xmlAttribute2 = xmlNode4.Attributes["Type"];
						XmlAttribute xmlAttribute3 = xmlNode4.Attributes["scale_factor"];
						string innerText2 = xmlNode5.InnerText;
						CraftingPiece.PieceTypes pieceTypes = (CraftingPiece.PieceTypes)Enum.Parse(typeof(CraftingPiece.PieceTypes), xmlAttribute2.InnerText);
						CraftingPiece @object = MBObjectManager.Instance.GetObject<CraftingPiece>(innerText2);
						array[(int)pieceTypes] = WeaponDesignElement.CreateUsablePiece(@object, 100);
						if (xmlAttribute3 != null)
						{
							array[(int)pieceTypes].SetScale(int.Parse(xmlAttribute3.Value));
						}
					}
				}
				float num = ((node.Attributes["weight"] != null) ? float.Parse(node.Attributes["weight"].Value) : 0f);
				int num2 = ((node.Attributes["swing_speed"] != null) ? int.Parse(node.Attributes["swing_speed"].Value) : 0);
				int num3 = ((node.Attributes["thrust_speed"] != null) ? int.Parse(node.Attributes["thrust_speed"].Value) : 0);
				int num4 = ((node.Attributes["swing_damage"] != null) ? int.Parse(node.Attributes["swing_damage"].Value) : 0);
				int num5 = ((node.Attributes["thrust_damage"] != null) ? int.Parse(node.Attributes["thrust_damage"].Value) : 0);
				ItemObject itemObject = Crafting.CreatePreCraftedWeapon(this, array, innerText, textObject, new Crafting.OverrideData(num, num2, num3, num4, num5), itemModifierGroup);
				if (itemObject.WeaponComponent == null)
				{
					Debug.FailedAssert("Crafted item: " + itemObject.StringId + " can not be initialized, item replaced with Trash item.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 428);
					MBObjectManager.Instance.UnregisterObject(this);
					return;
				}
				this.Effectiveness = this.CalculateEffectiveness();
				if (node.Attributes["value"] != null)
				{
					this.Value = int.Parse(node.Attributes["value"].Value);
				}
				else
				{
					this.DetermineValue();
				}
				if (node.Attributes["culture"] != null)
				{
					this.Culture = (BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node);
				}
				this.PrerequisiteItem = ((node.Attributes["prerequisite_item"] != null) ? ((ItemObject)objectManager.ReadObjectReferenceFromXml("prerequisite_item", typeof(ItemObject), node)) : null);
			}
			else
			{
				this.Name = new TextObject(node.Attributes["name"].InnerText, null);
				XmlNode xmlNode6 = node.Attributes["multiplayer_item"];
				if (xmlNode6 != null && !string.IsNullOrEmpty(xmlNode6.InnerText))
				{
					this.MultiplayerItem = xmlNode6.InnerText == "true";
				}
				XmlNode xmlNode7 = node.Attributes["is_merchandise"];
				if (xmlNode7 != null && !string.IsNullOrEmpty(xmlNode7.InnerText))
				{
					this.NotMerchandise = xmlNode7.InnerText != "true";
				}
				this.PrerequisiteItem = ((node.Attributes["prerequisite_item"] != null) ? ((ItemObject)objectManager.ReadObjectReferenceFromXml("prerequisite_item", typeof(ItemObject), node)) : null);
				XmlNode xmlNode8 = node.Attributes["mesh"];
				if (xmlNode8 != null && !string.IsNullOrEmpty(xmlNode8.InnerText))
				{
					this.MultiMeshName = xmlNode8.InnerText;
				}
				this.HolsterMeshName = ((node.Attributes["holster_mesh"] != null) ? node.Attributes["holster_mesh"].Value : null);
				this.HolsterWithWeaponMeshName = ((node.Attributes["holster_mesh_with_weapon"] != null) ? node.Attributes["holster_mesh_with_weapon"].Value : null);
				this.FlyingMeshName = ((node.Attributes["flying_mesh"] != null) ? node.Attributes["flying_mesh"].Value : null);
				this.HasLowerHolsterPriority = false;
				if (node.Attributes["item_holsters"] != null)
				{
					this.ItemHolsters = node.Attributes["item_holsters"].Value.Split(new char[] { ':' });
					if (node.Attributes["has_lower_holster_priority"] != null)
					{
						this.HasLowerHolsterPriority = bool.Parse(node.Attributes["has_lower_holster_priority"].Value);
					}
				}
				else
				{
					this.ItemHolsters = new string[4];
				}
				this.HolsterPositionShift = ((node.Attributes["holster_position_shift"] != null) ? Vec3.Parse(node.Attributes["holster_position_shift"].Value) : Vec3.Zero);
				this.BodyName = ((node.Attributes["body_name"] != null) ? node.Attributes["body_name"].Value : null);
				this.HolsterBodyName = ((node.Attributes["holster_body_name"] != null) ? node.Attributes["holster_body_name"].Value : null);
				this.CollisionBodyName = ((node.Attributes["shield_body_name"] != null) ? node.Attributes["shield_body_name"].Value : null);
				this.RecalculateBody = node.Attributes["recalculate_body"] != null && bool.Parse(node.Attributes["recalculate_body"].Value);
				XmlNode xmlNode9 = node.Attributes["prefab"];
				if (xmlNode9 != null && !string.IsNullOrEmpty(xmlNode9.InnerText))
				{
					this.PrefabName = xmlNode9.InnerText;
				}
				else
				{
					this.PrefabName = "";
				}
				this.Culture = (BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node);
				string text2 = ((node.Attributes["item_category"] != null) ? node.Attributes["item_category"].Value : null);
				if (!string.IsNullOrEmpty(text2))
				{
					this.ItemCategory = Game.Current.ObjectManager.GetObject<ItemCategory>(text2);
				}
				this.Weight = ((node.Attributes["weight"] != null) ? float.Parse(node.Attributes["weight"].Value) : 1f);
				this.LodAtlasIndex = ((node.Attributes["lod_atlas_index"] != null) ? int.Parse(node.Attributes["lod_atlas_index"].Value) : (-1));
				XmlAttribute xmlAttribute4 = node.Attributes["difficulty"];
				if (xmlAttribute4 != null)
				{
					this.Difficulty = int.Parse(xmlAttribute4.Value);
				}
				XmlAttribute xmlAttribute5 = node.Attributes["appearance"];
				this.Appearance = ((xmlAttribute5 != null) ? float.Parse(xmlAttribute5.Value) : 0.5f);
				XmlAttribute xmlAttribute6 = node.Attributes["IsFood"];
				if (xmlAttribute6 != null)
				{
					this.IsFood = Convert.ToBoolean(xmlAttribute6.InnerText);
				}
				this.IsUsingTableau = node.Attributes["using_tableau"] != null && Convert.ToBoolean(node.Attributes["using_tableau"].InnerText);
				XmlNode xmlNode10 = node.Attributes["using_arm_band"];
				if (xmlNode10 != null)
				{
					this.ArmBandMeshName = Convert.ToString(xmlNode10.InnerText);
				}
				this.ScaleFactor = ((node.Attributes["scale_factor"] != null) ? float.Parse(node.Attributes["scale_factor"].Value) : 1f);
				this.ItemFlags = (ItemFlags)0U;
				foreach (object obj2 in node.ChildNodes)
				{
					XmlNode xmlNode11 = (XmlNode)obj2;
					if (xmlNode11.Name == "ItemComponent")
					{
						using (IEnumerator enumerator2 = xmlNode11.ChildNodes.GetEnumerator())
						{
							while (enumerator2.MoveNext())
							{
								object obj3 = enumerator2.Current;
								XmlNode xmlNode12 = (XmlNode)obj3;
								if (xmlNode12.NodeType != XmlNodeType.Comment)
								{
									string name = xmlNode12.Name;
									ItemComponent itemComponent;
									if (!(name == "Armor"))
									{
										if (!(name == "Weapon"))
										{
											if (!(name == "Horse"))
											{
												if (!(name == "Trade"))
												{
													if (!(name == "Food"))
													{
														if (!(name == "Banner"))
														{
															throw new Exception("Wrong ItemComponent type.");
														}
														itemComponent = new BannerComponent(this);
													}
													else
													{
														Debug.FailedAssert("FoodComponent tag has been converted to TradeComponent. Use Trade xml node type", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 677);
														itemComponent = null;
													}
												}
												else
												{
													itemComponent = new TradeItemComponent();
												}
											}
											else
											{
												itemComponent = new HorseComponent();
											}
										}
										else
										{
											itemComponent = this.ItemComponent ?? new WeaponComponent(this);
										}
									}
									else
									{
										itemComponent = new ArmorComponent(this);
									}
									if (itemComponent != null)
									{
										itemComponent.Deserialize(objectManager, xmlNode12);
										this.ItemComponent = itemComponent;
									}
								}
							}
							continue;
						}
					}
					if (xmlNode11.Name == "Flags")
					{
						foreach (object obj4 in Enum.GetValues(typeof(ItemFlags)))
						{
							ItemFlags itemFlags = (ItemFlags)obj4;
							XmlAttribute xmlAttribute7 = xmlNode11.Attributes[itemFlags.ToString()];
							if (xmlAttribute7 != null && xmlAttribute7.Value.ToLowerInvariant() != "false")
							{
								this.ItemFlags |= itemFlags;
							}
						}
					}
				}
				XmlAttribute xmlAttribute8 = node.Attributes["Type"];
				if (xmlAttribute8 != null)
				{
					this.Type = (ItemObject.ItemTypeEnum)Enum.Parse(typeof(ItemObject.ItemTypeEnum), xmlAttribute8.Value, true);
					if (this.WeaponComponent != null)
					{
						ItemObject.ItemTypeEnum itemType = this.WeaponComponent.GetItemType();
						if (this.Type != itemType)
						{
							Debug.Print(string.Concat(new object[] { "ItemType for \"", base.StringId, "\" has been overridden by WeaponClass from \"", this.Type, "\" to \"", itemType, "\"" }), 0, Debug.DebugColor.Red, 64UL);
						}
						this.Type = itemType;
					}
				}
				if (this.Type == ItemObject.ItemTypeEnum.Banner && !(this.ItemComponent is BannerComponent) && !(base.StringId == "campaign_banner_small"))
				{
					Debug.FailedAssert("Banner item with name: " + this.Name + " is not properly set. It must either be a campaign banner or it must have a banner component.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 739);
					Debug.Print("Banner item with name: " + this.Name + " is not properly set. It must either be a campaign banner or it must have a banner component.", 0, Debug.DebugColor.Yellow, 17592186044416UL);
				}
				XmlAttribute xmlAttribute9 = node.Attributes["AmmoOffset"];
				if (xmlAttribute9 != null)
				{
					string[] array2 = xmlAttribute9.Value.Split(new char[] { ',' });
					this.WeaponComponent.PrimaryWeapon.SetAmmoOffset(new Vec3(0f, 0f, 0f, -1f));
					if (array2.Length == 3)
					{
						try
						{
							Vec3 vec = new Vec3(float.Parse(array2[0], CultureInfo.InvariantCulture), float.Parse(array2[1], CultureInfo.InvariantCulture), float.Parse(array2[2], CultureInfo.InvariantCulture), -1f);
							this.WeaponComponent.PrimaryWeapon.SetAmmoOffset(vec);
							goto IL_E02;
						}
						catch (Exception)
						{
							Debug.FailedAssert("[DEBUG]Throw Base Offset is not valid", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 766);
							goto IL_E02;
						}
					}
					Debug.FailedAssert("[DEBUG]Throw Base Offset is not valid", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 771);
				}
				IL_E02:
				this.Effectiveness = this.CalculateEffectiveness();
				if (node.Attributes["value"] != null)
				{
					this.Value = int.Parse(node.Attributes["value"].Value);
				}
				else
				{
					this.DetermineValue();
				}
				if (this.PrimaryWeapon != null)
				{
					if (this.PrimaryWeapon.IsMeleeWeapon || this.PrimaryWeapon.IsRangedWeapon)
					{
						if (string.IsNullOrEmpty(this.BodyName))
						{
						}
					}
					else if (this.PrimaryWeapon.IsConsumable)
					{
						string.IsNullOrEmpty(this.HolsterBodyName);
						if (string.IsNullOrEmpty(this.BodyName))
						{
						}
					}
					else if (this.PrimaryWeapon.IsShield)
					{
						if (!string.IsNullOrEmpty(this.BodyName))
						{
							bool recalculateBody = this.RecalculateBody;
						}
						string.IsNullOrEmpty(this.CollisionBodyName);
					}
				}
			}
			this.DetermineItemCategoryForItem();
			Game.Current.ItemObjectDeserialized(this);
		}

		public ItemObject.ItemTypeEnum ItemType
		{
			get
			{
				return this.Type;
			}
			private set
			{
				this.Type = value;
			}
		}

		public bool IsMountable
		{
			get
			{
				return this.HasHorseComponent && this.HorseComponent.IsRideable;
			}
		}

		public bool IsTradeGood
		{
			get
			{
				return this.ItemType == ItemObject.ItemTypeEnum.Goods;
			}
		}

		public bool IsBannerItem
		{
			get
			{
				return this.ItemType == ItemObject.ItemTypeEnum.Banner;
			}
		}

		public bool IsAnimal
		{
			get
			{
				return this.HasHorseComponent && !this.HorseComponent.IsRideable;
			}
		}

		public override string ToString()
		{
			return base.StringId;
		}

		public SkillObject RelevantSkill
		{
			get
			{
				SkillObject skillObject = null;
				if (this.PrimaryWeapon != null)
				{
					skillObject = this.PrimaryWeapon.RelevantSkill;
				}
				else if (this.HasHorseComponent)
				{
					skillObject = DefaultSkills.Riding;
				}
				return skillObject;
			}
		}

		public static ItemObject GetItemFromWeaponKind(int weaponKind)
		{
			if (weaponKind < 0)
			{
				return null;
			}
			return MBObjectManager.Instance.GetObject(new MBGUID((uint)weaponKind)) as ItemObject;
		}

		[Conditional("_RGL_KEEP_ASSERTS")]
		private void MakeSureProperFlagsSetForOneAndTwoHandedWeapons()
		{
			if (this.PrimaryWeapon != null)
			{
				if ((this.Type == ItemObject.ItemTypeEnum.Bow || this.Type == ItemObject.ItemTypeEnum.Crossbow || this.Type == ItemObject.ItemTypeEnum.TwoHandedWeapon) && !this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
				{
					Debug.FailedAssert(this.Name + ": Two Handed Item does not have NotUsableWithOneHand flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 941);
					this.PrimaryWeapon.WeaponFlags |= WeaponFlags.NotUsableWithOneHand;
				}
				if ((this.Type == ItemObject.ItemTypeEnum.Bow || this.Type == ItemObject.ItemTypeEnum.Crossbow) && !this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.TwoHandIdleOnMount))
				{
					Debug.FailedAssert(this.Name + ": Two Handed Item does not have TwoHandIdleOnMount flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 950);
					this.PrimaryWeapon.WeaponFlags |= WeaponFlags.TwoHandIdleOnMount;
				}
				if ((this.Type == ItemObject.ItemTypeEnum.OneHandedWeapon || this.Type == ItemObject.ItemTypeEnum.Shield) && this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
				{
					Debug.FailedAssert(this.Name + ": One Handed Item has TwoHanded flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 959);
					this.PrimaryWeapon.WeaponFlags &= ~WeaponFlags.NotUsableWithOneHand;
				}
			}
		}

		[Conditional("DEBUG")]
		private void DebugMakeSurePhysicsMaterialCorrectlySet()
		{
		}

		[Conditional("DEBUG")]
		private void MakeSureWeaponLengthAndMissileSpeedCorrect()
		{
			if (this.WeaponComponent != null)
			{
				foreach (WeaponComponentData weaponComponentData in this.WeaponComponent.Weapons)
				{
					int weaponLength = weaponComponentData.WeaponLength;
					if (this.Type == ItemObject.ItemTypeEnum.Arrows || this.Type == ItemObject.ItemTypeEnum.Bolts || this.Type == ItemObject.ItemTypeEnum.Bullets || this.Type == ItemObject.ItemTypeEnum.Thrown)
					{
						int missileSpeed = weaponComponentData.MissileSpeed;
					}
				}
			}
		}

		public static ItemObject.ItemTypeEnum GetAmmoTypeForItemType(ItemObject.ItemTypeEnum itemType)
		{
			switch (itemType)
			{
			case ItemObject.ItemTypeEnum.Bow:
				return ItemObject.ItemTypeEnum.Arrows;
			case ItemObject.ItemTypeEnum.Crossbow:
				return ItemObject.ItemTypeEnum.Bolts;
			case ItemObject.ItemTypeEnum.Thrown:
				return ItemObject.ItemTypeEnum.Thrown;
			default:
				if (itemType != ItemObject.ItemTypeEnum.Pistol)
				{
					return ItemObject.ItemTypeEnum.Invalid;
				}
				return ItemObject.ItemTypeEnum.Bullets;
			}
		}

		public static float GetAirFrictionConstant(WeaponClass weaponClass, WeaponFlags weaponFlags)
		{
			switch (weaponClass)
			{
			case WeaponClass.Arrow:
				if (weaponFlags.HasAnyFlag(WeaponFlags.MultiplePenetration))
				{
					return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBallistaBolt);
				}
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Bolt:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Cartridge:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			case WeaponClass.Bow:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Crossbow:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Stone:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionKnife);
			case WeaponClass.Boulder:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.ThrowingAxe:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionAxe);
			case WeaponClass.ThrowingKnife:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionKnife);
			case WeaponClass.Javelin:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionJavelin);
			case WeaponClass.Pistol:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			case WeaponClass.Musket:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			default:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			}
		}

		private float CalculateEffectiveness()
		{
			float num = 1f;
			ArmorComponent armorComponent = this.ArmorComponent;
			if (armorComponent != null)
			{
				if (this.Type == ItemObject.ItemTypeEnum.HorseHarness)
				{
					num = (float)armorComponent.BodyArmor * 1.67f;
				}
				else
				{
					num = ((float)armorComponent.HeadArmor * 34f + (float)armorComponent.BodyArmor * 42f + (float)armorComponent.LegArmor * 12f + (float)armorComponent.ArmArmor * 12f) * 0.03f;
				}
			}
			if (this.WeaponComponent != null)
			{
				WeaponComponentData primaryWeapon = this.WeaponComponent.PrimaryWeapon;
				float num2 = 1f;
				switch (primaryWeapon.WeaponClass)
				{
				case WeaponClass.Dagger:
					num2 = 0.4f;
					break;
				case WeaponClass.OneHandedSword:
					num2 = 0.55f;
					break;
				case WeaponClass.TwoHandedSword:
					num2 = 0.6f;
					break;
				case WeaponClass.OneHandedAxe:
					num2 = 0.5f;
					break;
				case WeaponClass.TwoHandedAxe:
					num2 = 0.55f;
					break;
				case WeaponClass.Mace:
					num2 = 0.5f;
					break;
				case WeaponClass.Pick:
					num2 = 0.4f;
					break;
				case WeaponClass.TwoHandedMace:
					num2 = 0.55f;
					break;
				case WeaponClass.OneHandedPolearm:
					num2 = 0.4f;
					break;
				case WeaponClass.TwoHandedPolearm:
					num2 = 0.4f;
					break;
				case WeaponClass.LowGripPolearm:
					num2 = 0.4f;
					break;
				case WeaponClass.Arrow:
					num2 = 3f;
					break;
				case WeaponClass.Bolt:
					num2 = 3f;
					break;
				case WeaponClass.Cartridge:
					num2 = 3f;
					break;
				case WeaponClass.Bow:
					num2 = 0.55f;
					break;
				case WeaponClass.Crossbow:
					num2 = 0.57f;
					break;
				case WeaponClass.Stone:
					num2 = 0.1f;
					break;
				case WeaponClass.Boulder:
					num2 = 0.1f;
					break;
				case WeaponClass.ThrowingAxe:
					num2 = 0.25f;
					break;
				case WeaponClass.ThrowingKnife:
					num2 = 0.2f;
					break;
				case WeaponClass.Javelin:
					num2 = 0.28f;
					break;
				case WeaponClass.Pistol:
					num2 = 1f;
					break;
				case WeaponClass.Musket:
					num2 = 1f;
					break;
				case WeaponClass.SmallShield:
					num2 = 0.4f;
					break;
				case WeaponClass.LargeShield:
					num2 = 0.5f;
					break;
				}
				if (primaryWeapon.IsRangedWeapon)
				{
					if (primaryWeapon.IsConsumable)
					{
						num = ((float)(primaryWeapon.MissileDamage * primaryWeapon.MissileSpeed) * 1.775f + (float)(primaryWeapon.Accuracy * (int)primaryWeapon.MaxDataValue) * 25f + (float)primaryWeapon.WeaponLength * 4f) * 0.006944f * (float)primaryWeapon.MaxDataValue * num2;
					}
					else
					{
						num = ((float)(primaryWeapon.MissileSpeed * primaryWeapon.MissileDamage) * 1.75f + (float)(primaryWeapon.ThrustSpeed * primaryWeapon.Accuracy) * 0.3f) * 0.01f * (float)primaryWeapon.MaxDataValue * num2;
					}
				}
				else if (primaryWeapon.IsMeleeWeapon)
				{
					float num3 = (float)(primaryWeapon.ThrustSpeed * primaryWeapon.ThrustDamage) * 0.01f;
					float num4 = (float)(primaryWeapon.SwingSpeed * primaryWeapon.SwingDamage) * 0.01f;
					float num5 = MathF.Max(num4, num3);
					float num6 = MathF.Min(num4, num3);
					num = ((num5 + num6 * num6 / num5) * 120f + (float)primaryWeapon.Handling * 15f + (float)primaryWeapon.WeaponLength * 20f + this.Weight * 5f) * 0.01f * num2;
				}
				else if (primaryWeapon.IsConsumable)
				{
					num = ((float)primaryWeapon.MissileDamage * 550f + (float)primaryWeapon.MissileSpeed * 15f + (float)primaryWeapon.MaxDataValue * 60f) * 0.01f * num2;
				}
				else if (primaryWeapon.IsShield)
				{
					num = ((float)primaryWeapon.BodyArmor * 60f + (float)primaryWeapon.ThrustSpeed * 10f + (float)primaryWeapon.MaxDataValue * 40f + (float)primaryWeapon.WeaponLength * 20f) * 0.01f * num2;
				}
			}
			if (this.HorseComponent != null)
			{
				num = ((float)(this.HorseComponent.ChargeDamage * this.HorseComponent.Speed + this.HorseComponent.Maneuver * this.HorseComponent.Speed) + (float)this.HorseComponent.BodyLength * this.Weight * 0.025f) * (float)(this.HorseComponent.HitPoints + this.HorseComponent.HitPointBonus) * 0.0001f;
			}
			return num;
		}

		internal void DetermineValue()
		{
			ItemValueModel itemValueModel = Game.Current.BasicModels.ItemValueModel;
			this.Value = ((itemValueModel != null) ? itemValueModel.CalculateValue(this) : 1);
		}

		public WeaponComponentData GetWeaponWithUsageIndex(int usageIndex)
		{
			return this.Weapons.ElementAt(usageIndex);
		}

		public const float DefaultAppearanceValue = 0.5f;

		public const int MaxHolsterSlotCount = 4;

		public ItemObject.ItemTypeEnum Type;

		public enum ItemUsageSetFlags
		{
			RequiresMount = 1,
			RequiresNoMount,
			RequiresShield = 4,
			RequiresNoShield = 8,
			PassiveUsage = 16
		}

		public enum ItemTypeEnum
		{
			Invalid,
			Horse,
			OneHandedWeapon,
			TwoHandedWeapon,
			Polearm,
			Arrows,
			Bolts,
			Shield,
			Bow,
			Crossbow,
			Thrown,
			Goods,
			HeadArmor,
			BodyArmor,
			LegArmor,
			HandArmor,
			Pistol,
			Musket,
			Bullets,
			Animal,
			Book,
			ChestArmor,
			Cape,
			HorseHarness,
			Banner
		}

		public enum ItemTiers
		{
			Tier1,
			Tier2,
			Tier3,
			Tier4,
			Tier5,
			Tier6,
			NumTiers
		}
	}
}
