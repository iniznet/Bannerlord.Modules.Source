using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Xml;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;

namespace TaleWorlds.Core
{
	// Token: 0x02000031 RID: 49
	public sealed class ItemObject : MBObjectBase
	{
		// Token: 0x06000343 RID: 835 RVA: 0x0000D1B1 File Offset: 0x0000B3B1
		internal static void AutoGeneratedStaticCollectObjectsItemObject(object o, List<object> collectedObjects)
		{
			((ItemObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x06000344 RID: 836 RVA: 0x0000D1BF File Offset: 0x0000B3BF
		protected override void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			base.AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x17000101 RID: 257
		// (get) Token: 0x06000345 RID: 837 RVA: 0x0000D1C8 File Offset: 0x0000B3C8
		// (set) Token: 0x06000346 RID: 838 RVA: 0x0000D1D0 File Offset: 0x0000B3D0
		public ItemComponent ItemComponent { get; private set; }

		// Token: 0x17000102 RID: 258
		// (get) Token: 0x06000347 RID: 839 RVA: 0x0000D1D9 File Offset: 0x0000B3D9
		// (set) Token: 0x06000348 RID: 840 RVA: 0x0000D1E1 File Offset: 0x0000B3E1
		public string MultiMeshName { get; private set; }

		// Token: 0x17000103 RID: 259
		// (get) Token: 0x06000349 RID: 841 RVA: 0x0000D1EA File Offset: 0x0000B3EA
		// (set) Token: 0x0600034A RID: 842 RVA: 0x0000D1F2 File Offset: 0x0000B3F2
		public string HolsterMeshName { get; private set; }

		// Token: 0x17000104 RID: 260
		// (get) Token: 0x0600034B RID: 843 RVA: 0x0000D1FB File Offset: 0x0000B3FB
		// (set) Token: 0x0600034C RID: 844 RVA: 0x0000D203 File Offset: 0x0000B403
		public string HolsterWithWeaponMeshName { get; private set; }

		// Token: 0x17000105 RID: 261
		// (get) Token: 0x0600034D RID: 845 RVA: 0x0000D20C File Offset: 0x0000B40C
		// (set) Token: 0x0600034E RID: 846 RVA: 0x0000D214 File Offset: 0x0000B414
		public string[] ItemHolsters { get; private set; }

		// Token: 0x17000106 RID: 262
		// (get) Token: 0x0600034F RID: 847 RVA: 0x0000D21D File Offset: 0x0000B41D
		// (set) Token: 0x06000350 RID: 848 RVA: 0x0000D225 File Offset: 0x0000B425
		public Vec3 HolsterPositionShift { get; private set; }

		// Token: 0x17000107 RID: 263
		// (get) Token: 0x06000351 RID: 849 RVA: 0x0000D22E File Offset: 0x0000B42E
		// (set) Token: 0x06000352 RID: 850 RVA: 0x0000D236 File Offset: 0x0000B436
		public bool HasLowerHolsterPriority { get; private set; }

		// Token: 0x17000108 RID: 264
		// (get) Token: 0x06000353 RID: 851 RVA: 0x0000D23F File Offset: 0x0000B43F
		// (set) Token: 0x06000354 RID: 852 RVA: 0x0000D247 File Offset: 0x0000B447
		public string FlyingMeshName { get; private set; }

		// Token: 0x17000109 RID: 265
		// (get) Token: 0x06000355 RID: 853 RVA: 0x0000D250 File Offset: 0x0000B450
		// (set) Token: 0x06000356 RID: 854 RVA: 0x0000D258 File Offset: 0x0000B458
		public string BodyName { get; private set; }

		// Token: 0x1700010A RID: 266
		// (get) Token: 0x06000357 RID: 855 RVA: 0x0000D261 File Offset: 0x0000B461
		// (set) Token: 0x06000358 RID: 856 RVA: 0x0000D269 File Offset: 0x0000B469
		public string HolsterBodyName { get; private set; }

		// Token: 0x1700010B RID: 267
		// (get) Token: 0x06000359 RID: 857 RVA: 0x0000D272 File Offset: 0x0000B472
		// (set) Token: 0x0600035A RID: 858 RVA: 0x0000D27A File Offset: 0x0000B47A
		public string CollisionBodyName { get; private set; }

		// Token: 0x1700010C RID: 268
		// (get) Token: 0x0600035B RID: 859 RVA: 0x0000D283 File Offset: 0x0000B483
		// (set) Token: 0x0600035C RID: 860 RVA: 0x0000D28B File Offset: 0x0000B48B
		public bool RecalculateBody { get; private set; }

		// Token: 0x1700010D RID: 269
		// (get) Token: 0x0600035D RID: 861 RVA: 0x0000D294 File Offset: 0x0000B494
		// (set) Token: 0x0600035E RID: 862 RVA: 0x0000D29C File Offset: 0x0000B49C
		public string PrefabName { get; private set; }

		// Token: 0x1700010E RID: 270
		// (get) Token: 0x0600035F RID: 863 RVA: 0x0000D2A5 File Offset: 0x0000B4A5
		// (set) Token: 0x06000360 RID: 864 RVA: 0x0000D2AD File Offset: 0x0000B4AD
		public TextObject Name { get; private set; }

		// Token: 0x1700010F RID: 271
		// (get) Token: 0x06000361 RID: 865 RVA: 0x0000D2B6 File Offset: 0x0000B4B6
		// (set) Token: 0x06000362 RID: 866 RVA: 0x0000D2BE File Offset: 0x0000B4BE
		public ItemFlags ItemFlags { get; private set; }

		// Token: 0x17000110 RID: 272
		// (get) Token: 0x06000363 RID: 867 RVA: 0x0000D2C7 File Offset: 0x0000B4C7
		// (set) Token: 0x06000364 RID: 868 RVA: 0x0000D2CF File Offset: 0x0000B4CF
		public ItemCategory ItemCategory { get; private set; }

		// Token: 0x17000111 RID: 273
		// (get) Token: 0x06000365 RID: 869 RVA: 0x0000D2D8 File Offset: 0x0000B4D8
		// (set) Token: 0x06000366 RID: 870 RVA: 0x0000D2E0 File Offset: 0x0000B4E0
		public int Value { get; private set; }

		// Token: 0x17000112 RID: 274
		// (get) Token: 0x06000367 RID: 871 RVA: 0x0000D2E9 File Offset: 0x0000B4E9
		// (set) Token: 0x06000368 RID: 872 RVA: 0x0000D2F1 File Offset: 0x0000B4F1
		public float Effectiveness { get; private set; }

		// Token: 0x17000113 RID: 275
		// (get) Token: 0x06000369 RID: 873 RVA: 0x0000D2FA File Offset: 0x0000B4FA
		// (set) Token: 0x0600036A RID: 874 RVA: 0x0000D302 File Offset: 0x0000B502
		public float Weight { get; private set; }

		// Token: 0x17000114 RID: 276
		// (get) Token: 0x0600036B RID: 875 RVA: 0x0000D30B File Offset: 0x0000B50B
		// (set) Token: 0x0600036C RID: 876 RVA: 0x0000D313 File Offset: 0x0000B513
		public int Difficulty { get; private set; }

		// Token: 0x17000115 RID: 277
		// (get) Token: 0x0600036D RID: 877 RVA: 0x0000D31C File Offset: 0x0000B51C
		// (set) Token: 0x0600036E RID: 878 RVA: 0x0000D324 File Offset: 0x0000B524
		public float Appearance { get; private set; }

		// Token: 0x17000116 RID: 278
		// (get) Token: 0x0600036F RID: 879 RVA: 0x0000D32D File Offset: 0x0000B52D
		// (set) Token: 0x06000370 RID: 880 RVA: 0x0000D335 File Offset: 0x0000B535
		public bool IsUsingTableau { get; private set; }

		// Token: 0x17000117 RID: 279
		// (get) Token: 0x06000371 RID: 881 RVA: 0x0000D33E File Offset: 0x0000B53E
		public bool IsUsingTeamColor
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.UseTeamColor);
			}
		}

		// Token: 0x17000118 RID: 280
		// (get) Token: 0x06000372 RID: 882 RVA: 0x0000D350 File Offset: 0x0000B550
		public bool DoesNotHideChest
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.DoesNotHideChest);
			}
		}

		// Token: 0x17000119 RID: 281
		// (get) Token: 0x06000373 RID: 883 RVA: 0x0000D362 File Offset: 0x0000B562
		public bool IsCivilian
		{
			get
			{
				return this.ItemFlags.HasAnyFlag(ItemFlags.Civilian);
			}
		}

		// Token: 0x1700011A RID: 282
		// (get) Token: 0x06000374 RID: 884 RVA: 0x0000D374 File Offset: 0x0000B574
		public bool UsingFacegenScaling
		{
			get
			{
				return this.Type == ItemObject.ItemTypeEnum.HeadArmor && this.ArmorComponent.MeshesMask.HasAnyFlag(SkinMask.HeadVisible);
			}
		}

		// Token: 0x1700011B RID: 283
		// (get) Token: 0x06000375 RID: 885 RVA: 0x0000D393 File Offset: 0x0000B593
		// (set) Token: 0x06000376 RID: 886 RVA: 0x0000D39B File Offset: 0x0000B59B
		public string ArmBandMeshName { get; private set; }

		// Token: 0x1700011C RID: 284
		// (get) Token: 0x06000377 RID: 887 RVA: 0x0000D3A4 File Offset: 0x0000B5A4
		// (set) Token: 0x06000378 RID: 888 RVA: 0x0000D3AC File Offset: 0x0000B5AC
		public bool IsFood { get; private set; }

		// Token: 0x1700011D RID: 285
		// (get) Token: 0x06000379 RID: 889 RVA: 0x0000D3B5 File Offset: 0x0000B5B5
		// (set) Token: 0x0600037A RID: 890 RVA: 0x0000D3BD File Offset: 0x0000B5BD
		public bool IsUniqueItem { get; private set; }

		// Token: 0x1700011E RID: 286
		// (get) Token: 0x0600037B RID: 891 RVA: 0x0000D3C6 File Offset: 0x0000B5C6
		// (set) Token: 0x0600037C RID: 892 RVA: 0x0000D3CE File Offset: 0x0000B5CE
		public float ScaleFactor { get; private set; }

		// Token: 0x1700011F RID: 287
		// (get) Token: 0x0600037D RID: 893 RVA: 0x0000D3D7 File Offset: 0x0000B5D7
		// (set) Token: 0x0600037E RID: 894 RVA: 0x0000D3DF File Offset: 0x0000B5DF
		public BasicCultureObject Culture { get; private set; }

		// Token: 0x17000120 RID: 288
		// (get) Token: 0x0600037F RID: 895 RVA: 0x0000D3E8 File Offset: 0x0000B5E8
		// (set) Token: 0x06000380 RID: 896 RVA: 0x0000D3F0 File Offset: 0x0000B5F0
		public bool MultiplayerItem { get; private set; }

		// Token: 0x17000121 RID: 289
		// (get) Token: 0x06000381 RID: 897 RVA: 0x0000D3F9 File Offset: 0x0000B5F9
		// (set) Token: 0x06000382 RID: 898 RVA: 0x0000D401 File Offset: 0x0000B601
		public bool NotMerchandise { get; private set; }

		// Token: 0x17000122 RID: 290
		// (get) Token: 0x06000383 RID: 899 RVA: 0x0000D40A File Offset: 0x0000B60A
		// (set) Token: 0x06000384 RID: 900 RVA: 0x0000D412 File Offset: 0x0000B612
		public bool IsCraftedByPlayer { get; private set; }

		// Token: 0x17000123 RID: 291
		// (get) Token: 0x06000385 RID: 901 RVA: 0x0000D41B File Offset: 0x0000B61B
		// (set) Token: 0x06000386 RID: 902 RVA: 0x0000D423 File Offset: 0x0000B623
		public int LodAtlasIndex { get; private set; }

		// Token: 0x17000124 RID: 292
		// (get) Token: 0x06000387 RID: 903 RVA: 0x0000D42C File Offset: 0x0000B62C
		public bool IsCraftedWeapon
		{
			get
			{
				return this.WeaponDesign != null;
			}
		}

		// Token: 0x17000125 RID: 293
		// (get) Token: 0x06000388 RID: 904 RVA: 0x0000D43A File Offset: 0x0000B63A
		// (set) Token: 0x06000389 RID: 905 RVA: 0x0000D442 File Offset: 0x0000B642
		public WeaponDesign WeaponDesign { get; private set; }

		// Token: 0x17000126 RID: 294
		// (get) Token: 0x0600038A RID: 906 RVA: 0x0000D44B File Offset: 0x0000B64B
		public WeaponComponentData PrimaryWeapon
		{
			get
			{
				WeaponComponent weaponComponent = this.WeaponComponent;
				if (weaponComponent == null)
				{
					return null;
				}
				return weaponComponent.PrimaryWeapon;
			}
		}

		// Token: 0x17000127 RID: 295
		// (get) Token: 0x0600038B RID: 907 RVA: 0x0000D45E File Offset: 0x0000B65E
		public WeaponComponent WeaponComponent
		{
			get
			{
				return this.ItemComponent as WeaponComponent;
			}
		}

		// Token: 0x17000128 RID: 296
		// (get) Token: 0x0600038C RID: 908 RVA: 0x0000D46B File Offset: 0x0000B66B
		public bool HasWeaponComponent
		{
			get
			{
				return this.WeaponComponent != null;
			}
		}

		// Token: 0x17000129 RID: 297
		// (get) Token: 0x0600038D RID: 909 RVA: 0x0000D476 File Offset: 0x0000B676
		public HorseComponent HorseComponent
		{
			get
			{
				return this.ItemComponent as HorseComponent;
			}
		}

		// Token: 0x1700012A RID: 298
		// (get) Token: 0x0600038E RID: 910 RVA: 0x0000D483 File Offset: 0x0000B683
		public bool HasHorseComponent
		{
			get
			{
				return this.HorseComponent != null;
			}
		}

		// Token: 0x1700012B RID: 299
		// (get) Token: 0x0600038F RID: 911 RVA: 0x0000D48E File Offset: 0x0000B68E
		public ArmorComponent ArmorComponent
		{
			get
			{
				return this.ItemComponent as ArmorComponent;
			}
		}

		// Token: 0x1700012C RID: 300
		// (get) Token: 0x06000390 RID: 912 RVA: 0x0000D49B File Offset: 0x0000B69B
		public bool HasArmorComponent
		{
			get
			{
				return this.ArmorComponent != null;
			}
		}

		// Token: 0x1700012D RID: 301
		// (get) Token: 0x06000391 RID: 913 RVA: 0x0000D4A6 File Offset: 0x0000B6A6
		public BannerComponent BannerComponent
		{
			get
			{
				return this.ItemComponent as BannerComponent;
			}
		}

		// Token: 0x1700012E RID: 302
		// (get) Token: 0x06000392 RID: 914 RVA: 0x0000D4B3 File Offset: 0x0000B6B3
		public bool HasBannerComponent
		{
			get
			{
				return this.BannerComponent != null;
			}
		}

		// Token: 0x1700012F RID: 303
		// (get) Token: 0x06000393 RID: 915 RVA: 0x0000D4BE File Offset: 0x0000B6BE
		public SaddleComponent SaddleComponent
		{
			get
			{
				return this.ItemComponent as SaddleComponent;
			}
		}

		// Token: 0x17000130 RID: 304
		// (get) Token: 0x06000394 RID: 916 RVA: 0x0000D4CB File Offset: 0x0000B6CB
		public bool HasSaddleComponent
		{
			get
			{
				return this.SaddleComponent != null;
			}
		}

		// Token: 0x17000131 RID: 305
		// (get) Token: 0x06000395 RID: 917 RVA: 0x0000D4D6 File Offset: 0x0000B6D6
		public TradeItemComponent FoodComponent
		{
			get
			{
				return this.ItemComponent as TradeItemComponent;
			}
		}

		// Token: 0x17000132 RID: 306
		// (get) Token: 0x06000396 RID: 918 RVA: 0x0000D4E3 File Offset: 0x0000B6E3
		public bool HasFoodComponent
		{
			get
			{
				return this.FoodComponent != null;
			}
		}

		// Token: 0x06000397 RID: 919 RVA: 0x0000D4EE File Offset: 0x0000B6EE
		public ItemObject()
		{
		}

		// Token: 0x06000398 RID: 920 RVA: 0x0000D4F6 File Offset: 0x0000B6F6
		public ItemObject(string stringId)
			: base(stringId)
		{
		}

		// Token: 0x06000399 RID: 921 RVA: 0x0000D500 File Offset: 0x0000B700
		public ItemObject(ItemObject itemToCopy)
			: base(itemToCopy)
		{
			this.ItemComponent = itemToCopy.ItemComponent;
			this.MultiMeshName = itemToCopy.MultiMeshName;
			this.HolsterMeshName = itemToCopy.HolsterMeshName;
			this.HolsterWithWeaponMeshName = itemToCopy.HolsterWithWeaponMeshName;
			this.ItemHolsters = itemToCopy.ItemHolsters;
			this.HolsterPositionShift = itemToCopy.HolsterPositionShift;
			this.FlyingMeshName = itemToCopy.FlyingMeshName;
			this.BodyName = itemToCopy.BodyName;
			this.HolsterBodyName = itemToCopy.HolsterBodyName;
			this.CollisionBodyName = itemToCopy.CollisionBodyName;
			this.RecalculateBody = itemToCopy.RecalculateBody;
			this.PrefabName = itemToCopy.PrefabName;
			this.Name = itemToCopy.Name;
			this.ItemFlags = itemToCopy.ItemFlags;
			this.Value = itemToCopy.Value;
			this.Weight = itemToCopy.Weight;
			this.Difficulty = itemToCopy.Difficulty;
			this.ArmBandMeshName = itemToCopy.ArmBandMeshName;
			this.IsFood = itemToCopy.IsFood;
			this.Type = itemToCopy.Type;
			this.ScaleFactor = itemToCopy.ScaleFactor;
			this.IsUniqueItem = false;
		}

		// Token: 0x0600039A RID: 922 RVA: 0x0000D618 File Offset: 0x0000B818
		public static ItemObject InitializeTradeGood(ItemObject item, TextObject name, string meshName, ItemCategory category, int value, float weight, ItemObject.ItemTypeEnum itemType, bool isFood = false)
		{
			item.Initialize();
			item.Name = name;
			item.MultiMeshName = meshName;
			item.ItemCategory = category;
			item.Value = value;
			item.Weight = weight;
			item.ItemType = itemType;
			item.IsFood = isFood;
			item.ItemComponent = new TradeItemComponent();
			item.AfterInitialized();
			item.ItemFlags |= ItemFlags.Civilian;
			return item;
		}

		// Token: 0x0600039B RID: 923 RVA: 0x0000D684 File Offset: 0x0000B884
		public static void InitAsPlayerCraftedItem(ref ItemObject itemObject)
		{
			itemObject.IsCraftedByPlayer = true;
		}

		// Token: 0x0600039C RID: 924 RVA: 0x0000D690 File Offset: 0x0000B890
		internal static void InitCraftedItemObject(ref ItemObject itemObject, TextObject name, BasicCultureObject culture, ItemFlags itemProperties, float weight, float appearance, WeaponDesign craftedData, ItemObject.ItemTypeEnum itemType)
		{
			BladeData bladeData = craftedData.UsedPieces[0].CraftingPiece.BladeData;
			itemObject.Weight = weight;
			itemObject.Name = name;
			itemObject.MultiMeshName = "";
			itemObject.HolsterMeshName = "";
			itemObject.HolsterWithWeaponMeshName = "";
			itemObject.ItemHolsters = (string[])craftedData.Template.ItemHolsters.Clone();
			itemObject.HolsterPositionShift = craftedData.HolsterShiftAmount;
			itemObject.FlyingMeshName = "";
			itemObject.BodyName = ((bladeData != null) ? bladeData.BodyName : null);
			itemObject.HolsterBodyName = ((bladeData != null) ? bladeData.HolsterBodyName : null) ?? ((bladeData != null) ? bladeData.BodyName : null);
			itemObject.CollisionBodyName = "";
			itemObject.RecalculateBody = true;
			itemObject.Culture = culture;
			itemObject.Difficulty = 0;
			itemObject.ScaleFactor = 1f;
			itemObject.Type = itemType;
			itemObject.ItemFlags = itemProperties;
			itemObject.Appearance = appearance;
			itemObject.WeaponDesign = craftedData;
		}

		// Token: 0x0600039D RID: 925 RVA: 0x0000D7A8 File Offset: 0x0000B9A8
		public override int GetHashCode()
		{
			return (int)base.Id.SubId;
		}

		// Token: 0x0600039E RID: 926 RVA: 0x0000D7C3 File Offset: 0x0000B9C3
		public void SetItemFlagsForCosmetics(ItemFlags newFlags)
		{
			this.ItemFlags = newFlags;
		}

		// Token: 0x17000133 RID: 307
		// (get) Token: 0x0600039F RID: 927 RVA: 0x0000D7CC File Offset: 0x0000B9CC
		public float Tierf
		{
			get
			{
				return Game.Current.BasicModels.ItemValueModel.CalculateTier(this);
			}
		}

		// Token: 0x17000134 RID: 308
		// (get) Token: 0x060003A0 RID: 928 RVA: 0x0000D7E3 File Offset: 0x0000B9E3
		public ItemObject.ItemTiers Tier
		{
			get
			{
				if (this.ItemComponent == null)
				{
					return ItemObject.ItemTiers.Tier1;
				}
				return (ItemObject.ItemTiers)(MBMath.ClampInt(MathF.Round(this.Tierf), 0, 6) - 1);
			}
		}

		// Token: 0x060003A1 RID: 929 RVA: 0x0000D803 File Offset: 0x0000BA03
		public void DetermineItemCategoryForItem()
		{
			if (Game.Current.BasicModels.ItemCategorySelector != null && this.ItemCategory == null)
			{
				this.ItemCategory = Game.Current.BasicModels.ItemCategorySelector.GetItemCategoryForItem(this);
			}
		}

		// Token: 0x060003A2 RID: 930 RVA: 0x0000D83C File Offset: 0x0000BA3C
		public static ItemObject GetCraftedItemObjectFromHashedCode(string hashedCode)
		{
			foreach (ItemObject itemObject in MBObjectManager.Instance.GetObjectTypeList<ItemObject>())
			{
				if (itemObject.IsCraftedWeapon && itemObject.WeaponDesign.HashedCode == hashedCode)
				{
					return itemObject;
				}
			}
			return null;
		}

		// Token: 0x17000135 RID: 309
		// (get) Token: 0x060003A3 RID: 931 RVA: 0x0000D8B0 File Offset: 0x0000BAB0
		// (set) Token: 0x060003A4 RID: 932 RVA: 0x0000D8B8 File Offset: 0x0000BAB8
		public ItemObject PrerequisiteItem { get; private set; }

		// Token: 0x17000136 RID: 310
		// (get) Token: 0x060003A5 RID: 933 RVA: 0x0000D8C1 File Offset: 0x0000BAC1
		public MBReadOnlyList<WeaponComponentData> Weapons
		{
			get
			{
				WeaponComponent weaponComponent = this.WeaponComponent;
				if (weaponComponent == null)
				{
					return null;
				}
				return weaponComponent.Weapons;
			}
		}

		// Token: 0x060003A6 RID: 934 RVA: 0x0000D8D4 File Offset: 0x0000BAD4
		public void AddWeapon(WeaponComponentData weapon, ItemModifierGroup itemModifierGroup)
		{
			if (this.WeaponComponent == null)
			{
				this.ItemComponent = new WeaponComponent(this);
			}
			this.WeaponComponent.AddWeapon(weapon, itemModifierGroup);
		}

		// Token: 0x060003A7 RID: 935 RVA: 0x0000D8F8 File Offset: 0x0000BAF8
		public override void Deserialize(MBObjectManager objectManager, XmlNode node)
		{
			base.Deserialize(objectManager, node);
			if (node.Name == "CraftedItem")
			{
				XmlNode xmlNode = node.Attributes["multiplayer_item"];
				if (xmlNode != null && !string.IsNullOrEmpty(xmlNode.InnerText))
				{
					this.MultiplayerItem = xmlNode.InnerText == "true";
				}
				XmlNode xmlNode2 = node.Attributes["is_merchandise"];
				if (xmlNode2 != null && !string.IsNullOrEmpty(xmlNode2.InnerText))
				{
					this.NotMerchandise = xmlNode2.InnerText != "true";
				}
				TextObject textObject = new TextObject(node.Attributes["name"].InnerText, null);
				string innerText = node.Attributes["crafting_template"].InnerText;
				bool flag = node.Attributes["has_modifier"] == null || node.Attributes["has_modifier"].InnerText != "false";
				XmlAttribute xmlAttribute = node.Attributes["modifier_group"];
				string text = ((xmlAttribute != null) ? xmlAttribute.Value : null);
				ItemModifierGroup itemModifierGroup = null;
				if (flag)
				{
					if (text == null)
					{
						itemModifierGroup = CraftingTemplate.GetTemplateFromId(innerText).ItemModifierGroup;
					}
					else
					{
						itemModifierGroup = Game.Current.ObjectManager.GetObject<ItemModifierGroup>(text);
					}
				}
				WeaponDesignElement[] array = new WeaponDesignElement[4];
				XmlNode xmlNode3 = null;
				for (int i = 0; i < node.ChildNodes.Count; i++)
				{
					if (node.ChildNodes[i].Name == "Pieces")
					{
						xmlNode3 = node.ChildNodes[i];
						break;
					}
				}
				foreach (object obj in xmlNode3.ChildNodes)
				{
					XmlNode xmlNode4 = (XmlNode)obj;
					if (xmlNode4.Name == "Piece")
					{
						XmlNode xmlNode5 = xmlNode4.Attributes["id"];
						XmlAttribute xmlAttribute2 = xmlNode4.Attributes["Type"];
						XmlAttribute xmlAttribute3 = xmlNode4.Attributes["scale_factor"];
						string innerText2 = xmlNode5.InnerText;
						CraftingPiece.PieceTypes pieceTypes = (CraftingPiece.PieceTypes)Enum.Parse(typeof(CraftingPiece.PieceTypes), xmlAttribute2.InnerText);
						CraftingPiece @object = MBObjectManager.Instance.GetObject<CraftingPiece>(innerText2);
						array[(int)pieceTypes] = WeaponDesignElement.CreateUsablePiece(@object, 100);
						if (xmlAttribute3 != null)
						{
							array[(int)pieceTypes].SetScale(int.Parse(xmlAttribute3.Value));
						}
					}
				}
				float num = ((node.Attributes["weight"] != null) ? float.Parse(node.Attributes["weight"].Value) : 0f);
				int num2 = ((node.Attributes["swing_speed"] != null) ? int.Parse(node.Attributes["swing_speed"].Value) : 0);
				int num3 = ((node.Attributes["thrust_speed"] != null) ? int.Parse(node.Attributes["thrust_speed"].Value) : 0);
				int num4 = ((node.Attributes["swing_damage"] != null) ? int.Parse(node.Attributes["swing_damage"].Value) : 0);
				int num5 = ((node.Attributes["thrust_damage"] != null) ? int.Parse(node.Attributes["thrust_damage"].Value) : 0);
				ItemObject itemObject = Crafting.CreatePreCraftedWeapon(this, array, innerText, textObject, new Crafting.OverrideData(num, num2, num3, num4, num5), itemModifierGroup);
				if (itemObject.WeaponComponent == null)
				{
					Debug.FailedAssert("Crafted item: " + itemObject.StringId + " can not be initialized, item replaced with Trash item.", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 428);
					MBObjectManager.Instance.UnregisterObject(this);
					return;
				}
				this.Effectiveness = this.CalculateEffectiveness();
				if (node.Attributes["value"] != null)
				{
					this.Value = int.Parse(node.Attributes["value"].Value);
				}
				else
				{
					this.DetermineValue();
				}
				if (node.Attributes["culture"] != null)
				{
					this.Culture = (BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node);
				}
				this.PrerequisiteItem = ((node.Attributes["prerequisite_item"] != null) ? ((ItemObject)objectManager.ReadObjectReferenceFromXml("prerequisite_item", typeof(ItemObject), node)) : null);
			}
			else
			{
				this.Name = new TextObject(node.Attributes["name"].InnerText, null);
				XmlNode xmlNode6 = node.Attributes["multiplayer_item"];
				if (xmlNode6 != null && !string.IsNullOrEmpty(xmlNode6.InnerText))
				{
					this.MultiplayerItem = xmlNode6.InnerText == "true";
				}
				XmlNode xmlNode7 = node.Attributes["is_merchandise"];
				if (xmlNode7 != null && !string.IsNullOrEmpty(xmlNode7.InnerText))
				{
					this.NotMerchandise = xmlNode7.InnerText != "true";
				}
				this.PrerequisiteItem = ((node.Attributes["prerequisite_item"] != null) ? ((ItemObject)objectManager.ReadObjectReferenceFromXml("prerequisite_item", typeof(ItemObject), node)) : null);
				XmlNode xmlNode8 = node.Attributes["mesh"];
				if (xmlNode8 != null && !string.IsNullOrEmpty(xmlNode8.InnerText))
				{
					this.MultiMeshName = xmlNode8.InnerText;
				}
				this.HolsterMeshName = ((node.Attributes["holster_mesh"] != null) ? node.Attributes["holster_mesh"].Value : null);
				this.HolsterWithWeaponMeshName = ((node.Attributes["holster_mesh_with_weapon"] != null) ? node.Attributes["holster_mesh_with_weapon"].Value : null);
				this.FlyingMeshName = ((node.Attributes["flying_mesh"] != null) ? node.Attributes["flying_mesh"].Value : null);
				this.HasLowerHolsterPriority = false;
				if (node.Attributes["item_holsters"] != null)
				{
					this.ItemHolsters = node.Attributes["item_holsters"].Value.Split(new char[] { ':' });
					if (node.Attributes["has_lower_holster_priority"] != null)
					{
						this.HasLowerHolsterPriority = bool.Parse(node.Attributes["has_lower_holster_priority"].Value);
					}
				}
				else
				{
					this.ItemHolsters = new string[4];
				}
				this.HolsterPositionShift = ((node.Attributes["holster_position_shift"] != null) ? Vec3.Parse(node.Attributes["holster_position_shift"].Value) : Vec3.Zero);
				this.BodyName = ((node.Attributes["body_name"] != null) ? node.Attributes["body_name"].Value : null);
				this.HolsterBodyName = ((node.Attributes["holster_body_name"] != null) ? node.Attributes["holster_body_name"].Value : null);
				this.CollisionBodyName = ((node.Attributes["shield_body_name"] != null) ? node.Attributes["shield_body_name"].Value : null);
				this.RecalculateBody = node.Attributes["recalculate_body"] != null && bool.Parse(node.Attributes["recalculate_body"].Value);
				XmlNode xmlNode9 = node.Attributes["prefab"];
				if (xmlNode9 != null && !string.IsNullOrEmpty(xmlNode9.InnerText))
				{
					this.PrefabName = xmlNode9.InnerText;
				}
				else
				{
					this.PrefabName = "";
				}
				this.Culture = (BasicCultureObject)objectManager.ReadObjectReferenceFromXml("culture", typeof(BasicCultureObject), node);
				string text2 = ((node.Attributes["item_category"] != null) ? node.Attributes["item_category"].Value : null);
				if (!string.IsNullOrEmpty(text2))
				{
					this.ItemCategory = Game.Current.ObjectManager.GetObject<ItemCategory>(text2);
				}
				this.Weight = ((node.Attributes["weight"] != null) ? float.Parse(node.Attributes["weight"].Value) : 1f);
				this.LodAtlasIndex = ((node.Attributes["lod_atlas_index"] != null) ? int.Parse(node.Attributes["lod_atlas_index"].Value) : (-1));
				XmlAttribute xmlAttribute4 = node.Attributes["difficulty"];
				if (xmlAttribute4 != null)
				{
					this.Difficulty = int.Parse(xmlAttribute4.Value);
				}
				XmlAttribute xmlAttribute5 = node.Attributes["appearance"];
				this.Appearance = ((xmlAttribute5 != null) ? float.Parse(xmlAttribute5.Value) : 0.5f);
				XmlAttribute xmlAttribute6 = node.Attributes["IsFood"];
				if (xmlAttribute6 != null)
				{
					this.IsFood = Convert.ToBoolean(xmlAttribute6.InnerText);
				}
				this.IsUsingTableau = node.Attributes["using_tableau"] != null && Convert.ToBoolean(node.Attributes["using_tableau"].InnerText);
				XmlNode xmlNode10 = node.Attributes["using_arm_band"];
				if (xmlNode10 != null)
				{
					this.ArmBandMeshName = Convert.ToString(xmlNode10.InnerText);
				}
				this.ScaleFactor = ((node.Attributes["scale_factor"] != null) ? float.Parse(node.Attributes["scale_factor"].Value) : 1f);
				this.ItemFlags = (ItemFlags)0U;
				foreach (object obj2 in node.ChildNodes)
				{
					XmlNode xmlNode11 = (XmlNode)obj2;
					if (xmlNode11.Name == "ItemComponent")
					{
						using (IEnumerator enumerator2 = xmlNode11.ChildNodes.GetEnumerator())
						{
							while (enumerator2.MoveNext())
							{
								object obj3 = enumerator2.Current;
								XmlNode xmlNode12 = (XmlNode)obj3;
								if (xmlNode12.NodeType != XmlNodeType.Comment)
								{
									string name = xmlNode12.Name;
									ItemComponent itemComponent;
									if (!(name == "Armor"))
									{
										if (!(name == "Weapon"))
										{
											if (!(name == "Horse"))
											{
												if (!(name == "Trade"))
												{
													if (!(name == "Food"))
													{
														if (!(name == "Banner"))
														{
															throw new Exception("Wrong ItemComponent type.");
														}
														itemComponent = new BannerComponent(this);
													}
													else
													{
														Debug.FailedAssert("FoodComponent tag has been converted to TradeComponent. Use Trade xml node type", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 677);
														itemComponent = null;
													}
												}
												else
												{
													itemComponent = new TradeItemComponent();
												}
											}
											else
											{
												itemComponent = new HorseComponent();
											}
										}
										else
										{
											itemComponent = this.ItemComponent ?? new WeaponComponent(this);
										}
									}
									else
									{
										itemComponent = new ArmorComponent(this);
									}
									if (itemComponent != null)
									{
										itemComponent.Deserialize(objectManager, xmlNode12);
										this.ItemComponent = itemComponent;
									}
								}
							}
							continue;
						}
					}
					if (xmlNode11.Name == "Flags")
					{
						foreach (object obj4 in Enum.GetValues(typeof(ItemFlags)))
						{
							ItemFlags itemFlags = (ItemFlags)obj4;
							XmlAttribute xmlAttribute7 = xmlNode11.Attributes[itemFlags.ToString()];
							if (xmlAttribute7 != null && xmlAttribute7.Value.ToLowerInvariant() != "false")
							{
								this.ItemFlags |= itemFlags;
							}
						}
					}
				}
				XmlAttribute xmlAttribute8 = node.Attributes["Type"];
				if (xmlAttribute8 != null)
				{
					this.Type = (ItemObject.ItemTypeEnum)Enum.Parse(typeof(ItemObject.ItemTypeEnum), xmlAttribute8.Value, true);
					if (this.WeaponComponent != null)
					{
						ItemObject.ItemTypeEnum itemType = this.WeaponComponent.GetItemType();
						if (this.Type != itemType)
						{
							Debug.Print(string.Concat(new object[] { "ItemType for \"", base.StringId, "\" has been overridden by WeaponClass from \"", this.Type, "\" to \"", itemType, "\"" }), 0, Debug.DebugColor.Red, 64UL);
						}
						this.Type = itemType;
					}
				}
				XmlAttribute xmlAttribute9 = node.Attributes["AmmoOffset"];
				if (xmlAttribute9 != null)
				{
					string[] array2 = xmlAttribute9.Value.Split(new char[] { ',' });
					this.WeaponComponent.PrimaryWeapon.SetAmmoOffset(new Vec3(0f, 0f, 0f, -1f));
					if (array2.Length == 3)
					{
						try
						{
							Vec3 vec = new Vec3(float.Parse(array2[0], CultureInfo.InvariantCulture), float.Parse(array2[1], CultureInfo.InvariantCulture), float.Parse(array2[2], CultureInfo.InvariantCulture), -1f);
							this.WeaponComponent.PrimaryWeapon.SetAmmoOffset(vec);
							goto IL_D87;
						}
						catch (Exception)
						{
							Debug.FailedAssert("[DEBUG]Throw Base Offset is not valid", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 753);
							goto IL_D87;
						}
					}
					Debug.FailedAssert("[DEBUG]Throw Base Offset is not valid", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "Deserialize", 758);
				}
				IL_D87:
				this.Effectiveness = this.CalculateEffectiveness();
				if (node.Attributes["value"] != null)
				{
					this.Value = int.Parse(node.Attributes["value"].Value);
				}
				else
				{
					this.DetermineValue();
				}
				if (this.PrimaryWeapon != null)
				{
					if (this.PrimaryWeapon.IsMeleeWeapon || this.PrimaryWeapon.IsRangedWeapon)
					{
						if (string.IsNullOrEmpty(this.BodyName))
						{
						}
					}
					else if (this.PrimaryWeapon.IsConsumable)
					{
						string.IsNullOrEmpty(this.HolsterBodyName);
						if (string.IsNullOrEmpty(this.BodyName))
						{
						}
					}
					else if (this.PrimaryWeapon.IsShield)
					{
						if (!string.IsNullOrEmpty(this.BodyName))
						{
							bool recalculateBody = this.RecalculateBody;
						}
						string.IsNullOrEmpty(this.CollisionBodyName);
					}
				}
			}
			this.DetermineItemCategoryForItem();
			Game.Current.ItemObjectDeserialized(this);
		}

		// Token: 0x17000137 RID: 311
		// (get) Token: 0x060003A8 RID: 936 RVA: 0x0000E7E8 File Offset: 0x0000C9E8
		// (set) Token: 0x060003A9 RID: 937 RVA: 0x0000E7F0 File Offset: 0x0000C9F0
		public ItemObject.ItemTypeEnum ItemType
		{
			get
			{
				return this.Type;
			}
			private set
			{
				this.Type = value;
			}
		}

		// Token: 0x17000138 RID: 312
		// (get) Token: 0x060003AA RID: 938 RVA: 0x0000E7F9 File Offset: 0x0000C9F9
		public bool IsMountable
		{
			get
			{
				return this.HasHorseComponent && this.HorseComponent.IsRideable;
			}
		}

		// Token: 0x17000139 RID: 313
		// (get) Token: 0x060003AB RID: 939 RVA: 0x0000E810 File Offset: 0x0000CA10
		public bool IsTradeGood
		{
			get
			{
				return this.ItemType == ItemObject.ItemTypeEnum.Goods;
			}
		}

		// Token: 0x1700013A RID: 314
		// (get) Token: 0x060003AC RID: 940 RVA: 0x0000E81C File Offset: 0x0000CA1C
		public bool IsBannerItem
		{
			get
			{
				return this.ItemType == ItemObject.ItemTypeEnum.Banner;
			}
		}

		// Token: 0x1700013B RID: 315
		// (get) Token: 0x060003AD RID: 941 RVA: 0x0000E828 File Offset: 0x0000CA28
		public bool IsAnimal
		{
			get
			{
				return this.HasHorseComponent && !this.HorseComponent.IsRideable;
			}
		}

		// Token: 0x060003AE RID: 942 RVA: 0x0000E842 File Offset: 0x0000CA42
		public override string ToString()
		{
			return base.StringId;
		}

		// Token: 0x1700013C RID: 316
		// (get) Token: 0x060003AF RID: 943 RVA: 0x0000E84C File Offset: 0x0000CA4C
		public SkillObject RelevantSkill
		{
			get
			{
				SkillObject skillObject = null;
				if (this.PrimaryWeapon != null)
				{
					skillObject = this.PrimaryWeapon.RelevantSkill;
				}
				else if (this.HasHorseComponent)
				{
					skillObject = DefaultSkills.Riding;
				}
				return skillObject;
			}
		}

		// Token: 0x060003B0 RID: 944 RVA: 0x0000E880 File Offset: 0x0000CA80
		public static ItemObject GetItemFromWeaponKind(int weaponKind)
		{
			if (weaponKind < 0)
			{
				return null;
			}
			return MBObjectManager.Instance.GetObject(new MBGUID((uint)weaponKind)) as ItemObject;
		}

		// Token: 0x060003B1 RID: 945 RVA: 0x0000E8A0 File Offset: 0x0000CAA0
		[Conditional("_RGL_KEEP_ASSERTS")]
		private void MakeSureProperFlagsSetForOneAndTwoHandedWeapons()
		{
			if (this.PrimaryWeapon != null)
			{
				if ((this.Type == ItemObject.ItemTypeEnum.Bow || this.Type == ItemObject.ItemTypeEnum.Crossbow || this.Type == ItemObject.ItemTypeEnum.TwoHandedWeapon) && !this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
				{
					Debug.FailedAssert(this.Name + ": Two Handed Item does not have NotUsableWithOneHand flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 928);
					this.PrimaryWeapon.WeaponFlags |= WeaponFlags.NotUsableWithOneHand;
				}
				if ((this.Type == ItemObject.ItemTypeEnum.Bow || this.Type == ItemObject.ItemTypeEnum.Crossbow) && !this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.TwoHandIdleOnMount))
				{
					Debug.FailedAssert(this.Name + ": Two Handed Item does not have TwoHandIdleOnMount flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 937);
					this.PrimaryWeapon.WeaponFlags |= WeaponFlags.TwoHandIdleOnMount;
				}
				if ((this.Type == ItemObject.ItemTypeEnum.OneHandedWeapon || this.Type == ItemObject.ItemTypeEnum.Shield) && this.PrimaryWeapon.WeaponFlags.HasAnyFlag(WeaponFlags.NotUsableWithOneHand))
				{
					Debug.FailedAssert(this.Name + ": One Handed Item has TwoHanded flag!", "C:\\Develop\\MB3\\Source\\Bannerlord\\TaleWorlds.Core\\ItemObject.cs", "MakeSureProperFlagsSetForOneAndTwoHandedWeapons", 946);
					this.PrimaryWeapon.WeaponFlags &= ~WeaponFlags.NotUsableWithOneHand;
				}
			}
		}

		// Token: 0x060003B2 RID: 946 RVA: 0x0000E9E9 File Offset: 0x0000CBE9
		[Conditional("DEBUG")]
		private void DebugMakeSurePhysicsMaterialCorrectlySet()
		{
		}

		// Token: 0x060003B3 RID: 947 RVA: 0x0000E9EC File Offset: 0x0000CBEC
		[Conditional("DEBUG")]
		private void MakeSureWeaponLengthAndMissileSpeedCorrect()
		{
			if (this.WeaponComponent != null)
			{
				foreach (WeaponComponentData weaponComponentData in this.WeaponComponent.Weapons)
				{
					int weaponLength = weaponComponentData.WeaponLength;
					if (this.Type == ItemObject.ItemTypeEnum.Arrows || this.Type == ItemObject.ItemTypeEnum.Bolts || this.Type == ItemObject.ItemTypeEnum.Bullets || this.Type == ItemObject.ItemTypeEnum.Thrown)
					{
						int missileSpeed = weaponComponentData.MissileSpeed;
					}
				}
			}
		}

		// Token: 0x060003B4 RID: 948 RVA: 0x0000EA80 File Offset: 0x0000CC80
		public static ItemObject.ItemTypeEnum GetAmmoTypeForItemType(ItemObject.ItemTypeEnum itemType)
		{
			switch (itemType)
			{
			case ItemObject.ItemTypeEnum.Bow:
				return ItemObject.ItemTypeEnum.Arrows;
			case ItemObject.ItemTypeEnum.Crossbow:
				return ItemObject.ItemTypeEnum.Bolts;
			case ItemObject.ItemTypeEnum.Thrown:
				return ItemObject.ItemTypeEnum.Thrown;
			default:
				if (itemType != ItemObject.ItemTypeEnum.Pistol)
				{
					return ItemObject.ItemTypeEnum.Invalid;
				}
				return ItemObject.ItemTypeEnum.Bullets;
			}
		}

		// Token: 0x060003B5 RID: 949 RVA: 0x0000EAA8 File Offset: 0x0000CCA8
		public static float GetAirFrictionConstant(WeaponClass weaponClass, WeaponFlags weaponFlags)
		{
			switch (weaponClass)
			{
			case WeaponClass.Arrow:
				if (weaponFlags.HasAnyFlag(WeaponFlags.MultiplePenetration))
				{
					return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBallistaBolt);
				}
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Bolt:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Cartridge:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			case WeaponClass.Bow:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Crossbow:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.Stone:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionKnife);
			case WeaponClass.Boulder:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			case WeaponClass.ThrowingAxe:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionAxe);
			case WeaponClass.ThrowingKnife:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionKnife);
			case WeaponClass.Javelin:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionJavelin);
			case WeaponClass.Pistol:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			case WeaponClass.Musket:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionBullet);
			default:
				return ManagedParameters.Instance.GetManagedParameter(ManagedParametersEnum.AirFrictionArrow);
			}
		}

		// Token: 0x060003B6 RID: 950 RVA: 0x0000EBB8 File Offset: 0x0000CDB8
		private float CalculateEffectiveness()
		{
			float num = 1f;
			ArmorComponent armorComponent = this.ArmorComponent;
			if (armorComponent != null)
			{
				if (this.Type == ItemObject.ItemTypeEnum.HorseHarness)
				{
					num = (float)armorComponent.BodyArmor * 1.67f;
				}
				else
				{
					num = ((float)armorComponent.HeadArmor * 34f + (float)armorComponent.BodyArmor * 42f + (float)armorComponent.LegArmor * 12f + (float)armorComponent.ArmArmor * 12f) * 0.03f;
				}
			}
			if (this.WeaponComponent != null)
			{
				WeaponComponentData primaryWeapon = this.WeaponComponent.PrimaryWeapon;
				float num2 = 1f;
				switch (primaryWeapon.WeaponClass)
				{
				case WeaponClass.Dagger:
					num2 = 0.4f;
					break;
				case WeaponClass.OneHandedSword:
					num2 = 0.55f;
					break;
				case WeaponClass.TwoHandedSword:
					num2 = 0.6f;
					break;
				case WeaponClass.OneHandedAxe:
					num2 = 0.5f;
					break;
				case WeaponClass.TwoHandedAxe:
					num2 = 0.55f;
					break;
				case WeaponClass.Mace:
					num2 = 0.5f;
					break;
				case WeaponClass.Pick:
					num2 = 0.4f;
					break;
				case WeaponClass.TwoHandedMace:
					num2 = 0.55f;
					break;
				case WeaponClass.OneHandedPolearm:
					num2 = 0.4f;
					break;
				case WeaponClass.TwoHandedPolearm:
					num2 = 0.4f;
					break;
				case WeaponClass.LowGripPolearm:
					num2 = 0.4f;
					break;
				case WeaponClass.Arrow:
					num2 = 3f;
					break;
				case WeaponClass.Bolt:
					num2 = 3f;
					break;
				case WeaponClass.Cartridge:
					num2 = 3f;
					break;
				case WeaponClass.Bow:
					num2 = 0.55f;
					break;
				case WeaponClass.Crossbow:
					num2 = 0.57f;
					break;
				case WeaponClass.Stone:
					num2 = 0.1f;
					break;
				case WeaponClass.Boulder:
					num2 = 0.1f;
					break;
				case WeaponClass.ThrowingAxe:
					num2 = 0.25f;
					break;
				case WeaponClass.ThrowingKnife:
					num2 = 0.2f;
					break;
				case WeaponClass.Javelin:
					num2 = 0.28f;
					break;
				case WeaponClass.Pistol:
					num2 = 1f;
					break;
				case WeaponClass.Musket:
					num2 = 1f;
					break;
				case WeaponClass.SmallShield:
					num2 = 0.4f;
					break;
				case WeaponClass.LargeShield:
					num2 = 0.5f;
					break;
				}
				if (primaryWeapon.IsRangedWeapon)
				{
					if (primaryWeapon.IsConsumable)
					{
						num = ((float)(primaryWeapon.MissileDamage * primaryWeapon.MissileSpeed) * 1.775f + (float)(primaryWeapon.Accuracy * (int)primaryWeapon.MaxDataValue) * 25f + (float)primaryWeapon.WeaponLength * 4f) * 0.006944f * (float)primaryWeapon.MaxDataValue * num2;
					}
					else
					{
						num = ((float)(primaryWeapon.MissileSpeed * primaryWeapon.MissileDamage) * 1.75f + (float)(primaryWeapon.ThrustSpeed * primaryWeapon.Accuracy) * 0.3f) * 0.01f * (float)primaryWeapon.MaxDataValue * num2;
					}
				}
				else if (primaryWeapon.IsMeleeWeapon)
				{
					float num3 = (float)(primaryWeapon.ThrustSpeed * primaryWeapon.ThrustDamage) * 0.01f;
					float num4 = (float)(primaryWeapon.SwingSpeed * primaryWeapon.SwingDamage) * 0.01f;
					float num5 = MathF.Max(num4, num3);
					float num6 = MathF.Min(num4, num3);
					num = ((num5 + num6 * num6 / num5) * 120f + (float)primaryWeapon.Handling * 15f + (float)primaryWeapon.WeaponLength * 20f + this.Weight * 5f) * 0.01f * num2;
				}
				else if (primaryWeapon.IsConsumable)
				{
					num = ((float)primaryWeapon.MissileDamage * 550f + (float)primaryWeapon.MissileSpeed * 15f + (float)primaryWeapon.MaxDataValue * 60f) * 0.01f * num2;
				}
				else if (primaryWeapon.IsShield)
				{
					num = ((float)primaryWeapon.BodyArmor * 60f + (float)primaryWeapon.ThrustSpeed * 10f + (float)primaryWeapon.MaxDataValue * 40f + (float)primaryWeapon.WeaponLength * 20f) * 0.01f * num2;
				}
			}
			if (this.HorseComponent != null)
			{
				num = ((float)(this.HorseComponent.ChargeDamage * this.HorseComponent.Speed + this.HorseComponent.Maneuver * this.HorseComponent.Speed) + (float)this.HorseComponent.BodyLength * this.Weight * 0.025f) * (float)(this.HorseComponent.HitPoints + this.HorseComponent.HitPointBonus) * 0.0001f;
			}
			return num;
		}

		// Token: 0x060003B7 RID: 951 RVA: 0x0000EFC8 File Offset: 0x0000D1C8
		internal void DetermineValue()
		{
			ItemValueModel itemValueModel = Game.Current.BasicModels.ItemValueModel;
			this.Value = ((itemValueModel != null) ? itemValueModel.CalculateValue(this) : 1);
		}

		// Token: 0x060003B8 RID: 952 RVA: 0x0000EFEC File Offset: 0x0000D1EC
		public WeaponComponentData GetWeaponWithUsageIndex(int usageIndex)
		{
			return this.Weapons.ElementAt(usageIndex);
		}

		// Token: 0x040001DC RID: 476
		public const float DefaultAppearanceValue = 0.5f;

		// Token: 0x040001DD RID: 477
		public const int MaxHolsterSlotCount = 4;

		// Token: 0x040001ED RID: 493
		public ItemObject.ItemTypeEnum Type;

		// Token: 0x020000E7 RID: 231
		public enum ItemUsageSetFlags
		{
			// Token: 0x04000651 RID: 1617
			RequiresMount = 1,
			// Token: 0x04000652 RID: 1618
			RequiresNoMount,
			// Token: 0x04000653 RID: 1619
			RequiresShield = 4,
			// Token: 0x04000654 RID: 1620
			RequiresNoShield = 8,
			// Token: 0x04000655 RID: 1621
			PassiveUsage = 16
		}

		// Token: 0x020000E8 RID: 232
		public enum ItemTypeEnum
		{
			// Token: 0x04000657 RID: 1623
			Invalid,
			// Token: 0x04000658 RID: 1624
			Horse,
			// Token: 0x04000659 RID: 1625
			OneHandedWeapon,
			// Token: 0x0400065A RID: 1626
			TwoHandedWeapon,
			// Token: 0x0400065B RID: 1627
			Polearm,
			// Token: 0x0400065C RID: 1628
			Arrows,
			// Token: 0x0400065D RID: 1629
			Bolts,
			// Token: 0x0400065E RID: 1630
			Shield,
			// Token: 0x0400065F RID: 1631
			Bow,
			// Token: 0x04000660 RID: 1632
			Crossbow,
			// Token: 0x04000661 RID: 1633
			Thrown,
			// Token: 0x04000662 RID: 1634
			Goods,
			// Token: 0x04000663 RID: 1635
			HeadArmor,
			// Token: 0x04000664 RID: 1636
			BodyArmor,
			// Token: 0x04000665 RID: 1637
			LegArmor,
			// Token: 0x04000666 RID: 1638
			HandArmor,
			// Token: 0x04000667 RID: 1639
			Pistol,
			// Token: 0x04000668 RID: 1640
			Musket,
			// Token: 0x04000669 RID: 1641
			Bullets,
			// Token: 0x0400066A RID: 1642
			Animal,
			// Token: 0x0400066B RID: 1643
			Book,
			// Token: 0x0400066C RID: 1644
			ChestArmor,
			// Token: 0x0400066D RID: 1645
			Cape,
			// Token: 0x0400066E RID: 1646
			HorseHarness,
			// Token: 0x0400066F RID: 1647
			Banner
		}

		// Token: 0x020000E9 RID: 233
		public enum ItemTiers
		{
			// Token: 0x04000671 RID: 1649
			Tier1,
			// Token: 0x04000672 RID: 1650
			Tier2,
			// Token: 0x04000673 RID: 1651
			Tier3,
			// Token: 0x04000674 RID: 1652
			Tier4,
			// Token: 0x04000675 RID: 1653
			Tier5,
			// Token: 0x04000676 RID: 1654
			Tier6,
			// Token: 0x04000677 RID: 1655
			NumTiers
		}
	}
}
