using System;
using System.Collections.Generic;
using TaleWorlds.Library;
using TaleWorlds.Localization;
using TaleWorlds.ObjectSystem;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Core
{
	public struct EquipmentElement : ISerializableObject, ISavedStruct
	{
		public static void AutoGeneratedStaticCollectObjectsEquipmentElement(object o, List<object> collectedObjects)
		{
			((EquipmentElement)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		private void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.Item);
			collectedObjects.Add(this.ItemModifier);
		}

		internal static object AutoGeneratedGetMemberValueItem(object o)
		{
			return ((EquipmentElement)o).Item;
		}

		internal static object AutoGeneratedGetMemberValueItemModifier(object o)
		{
			return ((EquipmentElement)o).ItemModifier;
		}

		internal static object AutoGeneratedGetMemberValueIsQuestItem(object o)
		{
			return ((EquipmentElement)o).IsQuestItem;
		}

		[SaveableProperty(1)]
		public ItemObject Item { get; private set; }

		[SaveableProperty(2)]
		public ItemModifier ItemModifier { get; private set; }

		[SaveableProperty(3)]
		public bool IsQuestItem { get; private set; }

		public bool IsEmpty
		{
			get
			{
				return this.Item == null;
			}
		}

		public bool IsVisualEmpty
		{
			get
			{
				return this.IsEmpty && this.CosmeticItem == null;
			}
		}

		public int ItemValue
		{
			get
			{
				int num = 0;
				if (this.Item != null)
				{
					num = this.Item.Value;
					if (this.ItemModifier != null)
					{
						num = MathF.Round((float)num * this.ItemModifier.PriceMultiplier);
					}
				}
				return num;
			}
		}

		public float Weight
		{
			get
			{
				float weight = this.Item.Weight;
				if (weight <= 0f)
				{
					return 0f;
				}
				return weight;
			}
		}

		public EquipmentElement(ItemObject item, ItemModifier itemModifier = null, ItemObject cosmeticItem = null, bool isQuestItem = false)
		{
			this.Item = item;
			this.ItemModifier = itemModifier;
			this.CosmeticItem = cosmeticItem;
			this.IsQuestItem = isQuestItem;
		}

		public EquipmentElement(EquipmentElement other)
		{
			this = new EquipmentElement(other.Item, other.ItemModifier, other.CosmeticItem, false);
		}

		public void SetModifier(ItemModifier itemModifier)
		{
			this.ItemModifier = itemModifier;
		}

		public void Clear()
		{
			this.Item = null;
			this.ItemModifier = null;
		}

		public override int GetHashCode()
		{
			int num = 0;
			if (this.Item != null)
			{
				num += this.Item.GetHashCode();
			}
			if (this.ItemModifier != null)
			{
				num += this.ItemModifier.GetHashCode() * 317;
			}
			return num;
		}

		public override string ToString()
		{
			return this.Item.ToString() ?? "";
		}

		public int GetModifiedHeadArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				num = this.Item.ArmorComponent.HeadArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		public int GetModifiedBodyArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				ArmorComponent armorComponent = this.Item.ArmorComponent;
				num = ((this.Item.ItemType != ItemObject.ItemTypeEnum.HorseHarness) ? armorComponent.BodyArmor : 0);
			}
			else if (this.Item.WeaponComponent != null)
			{
				num = this.Item.WeaponComponent.PrimaryWeapon.BodyArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		public int GetModifiedMountBodyArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				ArmorComponent armorComponent = this.Item.ArmorComponent;
				num = ((this.Item.ItemType == ItemObject.ItemTypeEnum.HorseHarness) ? armorComponent.BodyArmor : 0);
			}
			else if (this.Item.WeaponComponent != null)
			{
				num = this.Item.WeaponComponent.PrimaryWeapon.BodyArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		public int GetModifiedLegArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				num = this.Item.ArmorComponent.LegArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		public int GetModifiedArmArmor()
		{
			int num = 0;
			if (this.Item.HasArmorComponent)
			{
				num = this.Item.ArmorComponent.ArmArmor;
			}
			if (num > 0 && this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyArmor(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		public short GetModifiedMaximumHitPointsForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMaximumHitPoints(this.ItemModifier);
		}

		public TextObject GetModifiedItemName()
		{
			if (this.ItemModifier == null || this.Item.IsCraftedByPlayer)
			{
				return this.Item.Name;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			TextObject textObject;
			if (!TextObject.IsNullOrEmpty((horseComponent != null) ? horseComponent.ModifiedName : null) && this.ItemModifier == null)
			{
				textObject = horseComponent.ModifiedName;
			}
			else
			{
				textObject = this.ItemModifier.Name;
				textObject.SetTextVariable("ITEMNAME", this.Item.Name);
			}
			return textObject;
		}

		public int GetModifiedThrustDamageForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedThrustDamage(this.ItemModifier);
		}

		public int GetModifiedSwingDamageForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedSwingDamage(this.ItemModifier);
		}

		public int GetModifiedMissileDamageForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMissileDamage(this.ItemModifier);
		}

		public int GetModifiedThrustSpeedForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedThrustSpeed(this.ItemModifier);
		}

		public int GetModifiedSwingSpeedForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedSwingSpeed(this.ItemModifier);
		}

		public int GetModifiedMissileSpeedForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedMissileSpeed(this.ItemModifier);
		}

		public int GetModifiedHandlingForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedHandling(this.ItemModifier);
		}

		public short GetModifiedStackCountForUsage(int usageIndex)
		{
			return this.Item.GetWeaponWithUsageIndex(usageIndex).GetModifiedStackCount(this.ItemModifier);
		}

		public int GetBaseValue()
		{
			int num = this.Item.Value;
			if (this.ItemModifier != null)
			{
				num = (int)((float)num * this.ItemModifier.PriceMultiplier);
			}
			return num;
		}

		public bool IsEqualTo(EquipmentElement other)
		{
			return this.Item == other.Item && this.ItemModifier == other.ItemModifier;
		}

		public override bool Equals(object obj)
		{
			if (obj is EquipmentElement)
			{
				EquipmentElement equipmentElement = (EquipmentElement)obj;
				return this.IsEqualTo(equipmentElement);
			}
			return false;
		}

		public bool Equals(ItemRosterElement other)
		{
			return this.Item == other.EquipmentElement.Item && this.ItemModifier == other.EquipmentElement.ItemModifier;
		}

		public float GetEquipmentElementWeight()
		{
			if (this.Item == null)
			{
				return 0f;
			}
			if (this.Item.PrimaryWeapon == null || !this.Item.PrimaryWeapon.IsConsumable)
			{
				return this.Weight;
			}
			return this.Weight * (float)this.GetModifiedStackCountForUsage(0);
		}

		public bool IsInvalid()
		{
			return this.Item == EquipmentElement.Invalid.Item && this.ItemModifier == EquipmentElement.Invalid.ItemModifier;
		}

		public int GetModifiedMountManeuver(in EquipmentElement harness)
		{
			if (this.Item == null)
			{
				return 0;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			EquipmentElement equipmentElement = harness;
			ItemObject item = equipmentElement.Item;
			ArmorComponent armorComponent = ((item != null) ? item.ArmorComponent : null);
			int num = horseComponent.Maneuver + ((armorComponent != null) ? armorComponent.ManeuverBonus : 0);
			if (this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyMountManeuver(num);
			}
			equipmentElement = harness;
			if (!equipmentElement.IsEmpty)
			{
				equipmentElement = harness;
				if (equipmentElement.ItemModifier != null)
				{
					equipmentElement = harness;
					num = equipmentElement.ItemModifier.ModifyMountManeuver(num);
				}
			}
			return num;
		}

		public int GetModifiedMountSpeed(in EquipmentElement harness)
		{
			if (this.Item == null)
			{
				return 0;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			EquipmentElement equipmentElement = harness;
			ItemObject item = equipmentElement.Item;
			ArmorComponent armorComponent = ((item != null) ? item.ArmorComponent : null);
			int num = horseComponent.Speed + ((armorComponent != null) ? armorComponent.SpeedBonus : 0);
			if (this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyMountSpeed(num);
			}
			equipmentElement = harness;
			if (!equipmentElement.IsEmpty)
			{
				equipmentElement = harness;
				if (equipmentElement.ItemModifier != null)
				{
					equipmentElement = harness;
					num = equipmentElement.ItemModifier.ModifyMountSpeed(num);
				}
			}
			return num;
		}

		public int GetModifiedMountCharge(in EquipmentElement harness)
		{
			if (this.Item == null)
			{
				return 0;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			EquipmentElement equipmentElement = harness;
			ItemObject item = equipmentElement.Item;
			ArmorComponent armorComponent = ((item != null) ? item.ArmorComponent : null);
			int num = horseComponent.ChargeDamage + ((armorComponent != null) ? armorComponent.ChargeBonus : 0);
			if (this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyMountCharge(num);
			}
			equipmentElement = harness;
			if (!equipmentElement.IsEmpty)
			{
				equipmentElement = harness;
				if (equipmentElement.ItemModifier != null)
				{
					equipmentElement = harness;
					num = equipmentElement.ItemModifier.ModifyMountCharge(num);
				}
			}
			return num;
		}

		public int GetModifiedMountHitPoints()
		{
			if (this.Item == null)
			{
				return 0;
			}
			HorseComponent horseComponent = this.Item.HorseComponent;
			int num = horseComponent.HitPoints + horseComponent.HitPointBonus;
			if (this.ItemModifier != null)
			{
				num = this.ItemModifier.ModifyMountHitPoints(num);
			}
			if (num <= 0)
			{
				return 0;
			}
			return num;
		}

		void ISerializableObject.DeserializeFrom(IReader reader)
		{
			string text = reader.ReadString();
			this.ItemModifier = null;
			if (text != "")
			{
				this.ItemModifier = Game.Current.ObjectManager.GetObject<ItemModifier>(text);
			}
			MBGUID mbguid = new MBGUID(reader.ReadUInt());
			this.Item = MBObjectManager.Instance.GetObject(mbguid) as ItemObject;
		}

		void ISerializableObject.SerializeTo(IWriter writer)
		{
			writer.WriteString((this.ItemModifier != null) ? this.ItemModifier.StringId : "");
			ItemObject item = this.Item;
			writer.WriteUInt((item != null) ? item.Id.InternalValue : 0U);
		}

		bool ISavedStruct.IsDefault()
		{
			return this.Item == null && this.ItemModifier == null;
		}

		public static readonly EquipmentElement Invalid = new EquipmentElement(null, null, null, false);

		public ItemObject CosmeticItem;
	}
}
