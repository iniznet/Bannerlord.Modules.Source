using System;
using System.Collections.Generic;
using System.Linq;
using TaleWorlds.Library;
using TaleWorlds.Localization.TextProcessor;
using TaleWorlds.SaveSystem;

namespace TaleWorlds.Localization
{
	// Token: 0x02000004 RID: 4
	[Serializable]
	public class TextObject
	{
		// Token: 0x0600001C RID: 28 RVA: 0x000025A5 File Offset: 0x000007A5
		internal static void AutoGeneratedStaticCollectObjectsTextObject(object o, List<object> collectedObjects)
		{
			((TextObject)o).AutoGeneratedInstanceCollectObjects(collectedObjects);
		}

		// Token: 0x0600001D RID: 29 RVA: 0x000025B3 File Offset: 0x000007B3
		protected virtual void AutoGeneratedInstanceCollectObjects(List<object> collectedObjects)
		{
			collectedObjects.Add(this.Attributes);
		}

		// Token: 0x0600001E RID: 30 RVA: 0x000025C1 File Offset: 0x000007C1
		internal static object AutoGeneratedGetMemberValueAttributes(object o)
		{
			return ((TextObject)o).Attributes;
		}

		// Token: 0x0600001F RID: 31 RVA: 0x000025CE File Offset: 0x000007CE
		internal static object AutoGeneratedGetMemberValueValue(object o)
		{
			return ((TextObject)o).Value;
		}

		// Token: 0x1700000B RID: 11
		// (get) Token: 0x06000020 RID: 32 RVA: 0x000025DB File Offset: 0x000007DB
		// (set) Token: 0x06000021 RID: 33 RVA: 0x000025E3 File Offset: 0x000007E3
		[SaveableProperty(2)]
		public Dictionary<string, object> Attributes { get; private set; }

		// Token: 0x1700000C RID: 12
		// (get) Token: 0x06000022 RID: 34 RVA: 0x000025EC File Offset: 0x000007EC
		public int Length
		{
			get
			{
				return this.Value.Length;
			}
		}

		// Token: 0x1700000D RID: 13
		// (get) Token: 0x06000023 RID: 35 RVA: 0x000025F9 File Offset: 0x000007F9
		public bool IsLink
		{
			get
			{
				return this.Value.StartsWith("{=!}{.link}");
			}
		}

		// Token: 0x06000024 RID: 36 RVA: 0x0000260B File Offset: 0x0000080B
		public TextObject(string value = "", Dictionary<string, object> attributes = null)
		{
			this.Value = value;
			this.Attributes = attributes;
		}

		// Token: 0x06000025 RID: 37 RVA: 0x00002628 File Offset: 0x00000828
		public TextObject(int value, Dictionary<string, object> attributes = null)
			: this(value.ToString(), attributes)
		{
		}

		// Token: 0x06000026 RID: 38 RVA: 0x00002638 File Offset: 0x00000838
		public TextObject(float value, Dictionary<string, object> attributes = null)
			: this(value.ToString(), attributes)
		{
		}

		// Token: 0x06000027 RID: 39 RVA: 0x00002648 File Offset: 0x00000848
		internal List<MBTextToken> GetCachedTokens()
		{
			if (this.Value != null)
			{
				if (this.cachedTokens == null || this.cachedTextLanguageId != MBTextManager.GetActiveTextLanguageIndex())
				{
					string localizedText = MBTextManager.GetLocalizedText(this.Value);
					this.cachedTokens = MBTextManager.Tokenizer.Tokenize(localizedText);
					this.cachedTextLanguageId = MBTextManager.GetActiveTextLanguageIndex();
				}
				return this.cachedTokens;
			}
			return null;
		}

		// Token: 0x06000028 RID: 40 RVA: 0x000026A4 File Offset: 0x000008A4
		public void CacheTokens()
		{
			if (this.Value != null)
			{
				string localizedText = MBTextManager.GetLocalizedText(this.Value);
				this.cachedTokens = MBTextManager.Tokenizer.Tokenize(localizedText);
				this.cachedTextLanguageId = MBTextManager.GetActiveTextLanguageIndex();
			}
		}

		// Token: 0x06000029 RID: 41 RVA: 0x000026E4 File Offset: 0x000008E4
		internal static TextObject TryGetOrCreateFromObject(object o)
		{
			if (o is TextObject)
			{
				return (TextObject)o;
			}
			if (o is string)
			{
				return new TextObject((string)o, null);
			}
			if (o is int)
			{
				return new TextObject((int)o, null);
			}
			if (o is float)
			{
				return new TextObject((float)o, null);
			}
			return null;
		}

		// Token: 0x0600002A RID: 42 RVA: 0x00002740 File Offset: 0x00000940
		public static bool IsNullOrEmpty(TextObject to)
		{
			return to == TextObject.Empty || to == null || (string.IsNullOrEmpty(to.Value) && to.Attributes == null);
		}

		// Token: 0x0600002B RID: 43 RVA: 0x00002768 File Offset: 0x00000968
		public override string ToString()
		{
			string text;
			try
			{
				text = MBTextManager.ProcessTextToString(this, true);
			}
			catch (Exception ex)
			{
				text = "Error at id: " + this.GetID() + ". Lang: " + MBTextManager.ActiveTextLanguage;
				Debug.Print(ex.Message, 0, Debug.DebugColor.White, 17592186044416UL);
			}
			return text;
		}

		// Token: 0x0600002C RID: 44 RVA: 0x000027C4 File Offset: 0x000009C4
		public string ToStringWithoutClear()
		{
			string text;
			try
			{
				text = MBTextManager.ProcessTextToString(this, false);
			}
			catch (Exception ex)
			{
				text = "Error at id: " + this.GetID() + ". Lang: " + MBTextManager.ActiveTextLanguage;
				Debug.Print(ex.Message, 0, Debug.DebugColor.White, 17592186044416UL);
			}
			return text;
		}

		// Token: 0x0600002D RID: 45 RVA: 0x00002820 File Offset: 0x00000A20
		public string Format(float p1)
		{
			MBTextManager.SetTextVariable("A0", p1.ToString("F1"), false);
			return new TextObject(this.Value, null).ToString();
		}

		// Token: 0x0600002E RID: 46 RVA: 0x0000284A File Offset: 0x00000A4A
		public bool Contains(TextObject to)
		{
			return this.Value.Contains(to.Value);
		}

		// Token: 0x0600002F RID: 47 RVA: 0x0000285D File Offset: 0x00000A5D
		public bool Contains(string text)
		{
			return this.Value.Contains(text);
		}

		// Token: 0x06000030 RID: 48 RVA: 0x0000286C File Offset: 0x00000A6C
		public bool Equals(TextObject to)
		{
			return this.Value == to.Value && ((this.Attributes == null && to.Attributes == null) || (this.Attributes != null && to.Attributes != null && this.Attributes.SequenceEqual(to.Attributes)));
		}

		// Token: 0x06000031 RID: 49 RVA: 0x000028C3 File Offset: 0x00000AC3
		public bool HasSameValue(TextObject to)
		{
			return this.Value == to.Value;
		}

		// Token: 0x06000032 RID: 50 RVA: 0x000028D8 File Offset: 0x00000AD8
		public static List<string> ConvertToStringList(List<TextObject> to)
		{
			List<string> list = new List<string>();
			foreach (TextObject textObject in to)
			{
				list.Add(textObject.Value);
			}
			return list;
		}

		// Token: 0x06000033 RID: 51 RVA: 0x00002934 File Offset: 0x00000B34
		private TextObject SetTextVariableFromObject(string tag, object variable)
		{
			if (this.Attributes == null)
			{
				this.Attributes = new Dictionary<string, object>();
			}
			this.Attributes[tag] = variable;
			return this;
		}

		// Token: 0x06000034 RID: 52 RVA: 0x00002957 File Offset: 0x00000B57
		public TextObject SetTextVariable(string tag, TextObject variable)
		{
			return this.SetTextVariableFromObject(tag, variable);
		}

		// Token: 0x06000035 RID: 53 RVA: 0x00002961 File Offset: 0x00000B61
		public TextObject SetTextVariable(string tag, string variable)
		{
			this.SetTextVariableFromObject(tag, variable);
			return this;
		}

		// Token: 0x06000036 RID: 54 RVA: 0x0000296D File Offset: 0x00000B6D
		public TextObject SetTextVariable(string tag, float variable)
		{
			this.SetTextVariableFromObject(tag, variable);
			return this;
		}

		// Token: 0x06000037 RID: 55 RVA: 0x0000297E File Offset: 0x00000B7E
		public TextObject SetTextVariable(string tag, int variable)
		{
			this.SetTextVariableFromObject(tag, variable);
			return this;
		}

		// Token: 0x06000038 RID: 56 RVA: 0x00002990 File Offset: 0x00000B90
		public void AddIDToValue(string id)
		{
			if (!this.Value.Contains(id) && !this.Value.StartsWith("{="))
			{
				string value = this.Value;
				this.Value = "{=" + id + "}" + value;
			}
		}

		// Token: 0x06000039 RID: 57 RVA: 0x000029DC File Offset: 0x00000BDC
		public bool GetVariableValue(string tag, out TextObject variable)
		{
			variable = TextObject.Empty;
			if (this.Attributes == null)
			{
				return false;
			}
			object obj;
			if (!this.Attributes.TryGetValue(tag, out obj))
			{
				return false;
			}
			variable = TextObject.TryGetOrCreateFromObject(obj);
			TextObject textObject = variable;
			if (((textObject != null) ? textObject.Value : null) != "")
			{
				return true;
			}
			TextObject textObject2 = variable;
			if (((textObject2 != null) ? textObject2.Attributes : null) != null)
			{
				variable.GetVariableValue(tag, out variable);
			}
			return true;
		}

		// Token: 0x0600003A RID: 58 RVA: 0x00002A4B File Offset: 0x00000C4B
		public int GetValueHashCode()
		{
			return this.Value.GetHashCode();
		}

		// Token: 0x0600003B RID: 59 RVA: 0x00002A58 File Offset: 0x00000C58
		public TextObject CopyTextObject()
		{
			Dictionary<string, object> dictionary = this.Attributes;
			if (this.Attributes != null && this.Attributes.Any<KeyValuePair<string, object>>())
			{
				Dictionary<string, object> dictionary2 = new Dictionary<string, object>();
				foreach (KeyValuePair<string, object> keyValuePair in this.Attributes)
				{
					dictionary2.Add(keyValuePair.Key, keyValuePair.Value);
				}
				dictionary = dictionary2;
			}
			return new TextObject(this.Value, dictionary)
			{
				cachedTokens = this.cachedTokens,
				cachedTextLanguageId = this.cachedTextLanguageId
			};
		}

		// Token: 0x0600003C RID: 60 RVA: 0x00002B00 File Offset: 0x00000D00
		public string GetID()
		{
			MBStringBuilder mbstringBuilder = default(MBStringBuilder);
			mbstringBuilder.Initialize(16, "GetID");
			if (this.Value != null && this.Value.Length > 2 && this.Value[0] == '{' && this.Value[1] == '=')
			{
				int num = 2;
				while (num < this.Value.Length && this.Value[num] != '}')
				{
					mbstringBuilder.Append(this.Value[num]);
					num++;
				}
			}
			return mbstringBuilder.ToStringAndRelease();
		}

		// Token: 0x0600003D RID: 61 RVA: 0x00002B9C File Offset: 0x00000D9C
		internal bool TryGetAttributesValue(string attribute, out TextObject value)
		{
			object obj;
			if (this.Attributes != null && this.Attributes.TryGetValue(attribute, out obj))
			{
				value = TextObject.TryGetOrCreateFromObject(obj);
				return true;
			}
			value = null;
			return false;
		}

		// Token: 0x0400000B RID: 11
		[SaveableField(1)]
		internal string Value;

		// Token: 0x0400000D RID: 13
		public static TextObject Empty = new TextObject("", null);

		// Token: 0x0400000E RID: 14
		[CachedData]
		internal List<MBTextToken> cachedTokens;

		// Token: 0x0400000F RID: 15
		[CachedData]
		internal int cachedTextLanguageId = -1;
	}
}
